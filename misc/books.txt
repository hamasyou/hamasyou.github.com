AUTHOR: hamasyou
TITLE: それはBooks スタイル一覧
BASENAME: books
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 04/07/2003 02:25:27 AM
-----
BODY:
自分用のエントリーです。

それはBooks で使っているスタイルの意味を定義しておくページです。
-----
EXTENDED BODY:
<h2>タイトルタグ (h1, h2, h3, h4)</h2>

タイトルにつけるタグ。h1 は記事のタイトルに使うので、記事の中では使いません。h2 は記事の中で大きな区分を表すときに使います。h3 は区分の中でのひとつのトピック（セクション）を表すときに使います。。h4 はトピックの中のそれぞれの部品の見出しに使います。。h5、h6 は使いません。

<h1>これが h1 タグです</h1>

<h2>これが h2 タグです </h2>

<h3> これが h3 タグです </h3>

<h4> これが h4 タグです </h4>

<h4 class="note"> クラスに note を指定 </h4>

<h2>テキスト装飾</h2>

<h3>文章を書くとき</h3>

通常は、この文字で記述します。少し強調したい場合は <em>em</em> タグを使って装飾します。 さらに強調したい場合やキーワードには <strong>strong</strong> タグを使います。

文章中で br タグは使いません。段落の区切りは p タグで区切ります。

<h3>引用</h3>

引用には <em>q</em> タグか <em>blockquote</em> タグを使います。<q>文章中で引用を行うときに q タグの方を使います。</q>

<blockquote>

段落を引用する場合は blockquote タグを使います。blockquote タグを使う場合には、cite タグを使って引用元を明記します。

<cite>どかしらから引用</cite>

</blockquote>

<h3>説明・定義</h3>

説明文や定義には、<em>dl</em>、<em>dt</em>、<em>dd</em> タグを使います。

<dl>
<dt>これが説明・定義する言葉です</dt>
<dd>
<p>ここに説明文を記述します。dd タグはブロック要素とインライン要素をとれるため、段落を含めてもかまいません。</p>

<pre>整形タグ（pre）も使用できます。</pre>

<pre class="console">これも整形タグ</pre>

<pre class="code">これも整形タグ</pre></dd>
</dl>

dt タグの class 属性に warn、notice、info、tips のいずれかを指定すると、タイトルの前に画像が表示されます。

<dl>
<dt class="warn">警告！</dt><dd>warn を使うとこんな感じ</dd>
<dt class="notice">注意です</dt><dd>notice を使うとこんな感じ</dd>
<dt class="info">これなんてどうかな</dt><dd>info を使うとこんな感じ。ブログのテーマカラー的にこれを使う？？</dd>
<dt class="tips">ティップス</dt><dd>tips を使うとこんな感じ。</dd>
<dt class="note">ノート</dt><dd>note を使うとこんな感じ。</dd>
</dl>

<h3>箇条書き</h3>

箇条書きは、単一行で説明できる文章をリスト化するときに使います。順番の必要がない場合は <em>ul</em> タグを使います。順番が必要なときは <em>ol</em> タグを使用します。

<ul><li>リスト１</li><li>リスト2</li><li>リスト３</li></ul>

<ol><li>リスト４</li><li><p><em>li</em> タグは、ブロック要素を取ることができますが、自分では使わないようにしよう。たぶんレイアウトが崩れるから。。</li></ol>

<h3>リンク</h3>

リンクには <em>a</em> タグを使います。外部リンク（それはBlog の外にでるとき）は、<em>target</em> 属性に _blank 値と <em>class</em> 属性に extlink を与えます。

<pre><a href="http://www.google.co.jp" target="_blank" class="extlink">http://www.google.co.jp</a></pre>

<h3>整形済みテキスト・ソースコード</h3>

整形済みテキストには <em>pre</em> を使います。pre タグにはインライン要素しか含めることができないので、空行が入る場合には、スペースをひとつ含めるようにします。（これは Movable Type の改行を勝手に p タグにしてくれる機能を回避するため）

<pre>たとえば、こんな風に書く。
 
改行を含めるときは、空行にスペースを忘れずに！
</pre>

<section>

<h4>コンソールの用に見せるには</h4>

整形済みテキストをコンソールのように見せるには、class 属性に <em>console</em> を与えます。

<pre class="console">&lt;pre class=&quot;console&quot;&gt;たとえば、キーボードからの入力を表すときには <em>kbd</em> タグを使います。&lt;/pre&gt;
 
 > <kbd>これをキーボードで入力する！</kbd>
</pre>

</section>

<section>

<h4>ソースコードのように見せるには</h4>

ソースコードのように見せるには class 属性に code を指定します。

<pre class="code">&lt;pre class=&quot;code&quot;&gt;&lt;code&gt;ソースコードの場合は <em>code</em> タグで囲みます。 code タグはインライン要素なので、空行を入れるときはスペースを（ry</pre>

ソースコード表示中は、span タグの class 属性に次の値を指定して装飾することが出来ます。

<dl>
<dt>keyword</dt><dd>ソースコード中のキーワードを表す。プログラミング言語の予約語などに使う</dd>
<dt>comment</dt><dd>ソースコード中のコメント行を表す。</dd>
<dt>literal</dt><dd>ソースコード中のリテラル（文字列や数値）を表す。</dd>
</dl>

<pre class="code"><code><span class="comment">/** 
 * This is a style test code.
 * 
 * @author hamasyou
 */</span> 
<span class="keyword">public</span> <span class="keyword">class</span> HogeClass <span class="keyword">implements</span> FooClass { 
 
  <span class="keyword">public</span> String getMessage(BarClass fooBar) { 
    <span class="keyword">return</span> <span class="literal">"テストメッセージ"</span>;
  } 
}
</code></pre> 

</section>

<h2>その他</h2>

<h3>Table タグ</h3>

テーブルタグは、<em>table</em>、<em>caption</em>、<em>th</em>、<em>td</em> を使用して使います。

<table> 
<caption>なんかの説明</caption>
<tr><th>これが見出し１</th><th>見出しは <em>th</em> タグです</th></tr>
<tr><td>ここがデータ部分</td><td>ここもね。</td>
</table> 

<h3>option クラスの使い方</h3>

<p class="option">段落に class="<em>option</em>" を使うとこんな感じになります。</p>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="それはBooks スタイル一覧" />
-----
KEYWORDS:
それはBooks,スタイル一覧,CSS,定義
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Windows98レジストリ辞典
BASENAME: windows98レジストリ辞典
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 05/22/2004 11:32:25 AM
TAGS: Windows98,レジストリ
-----
BODY:
レジストリ辞典というだけのことはあって、一つ一つの説明が詳しく、どの項目を設定するとどうなるのかということまで記されています。仕方なく買ったにしては結構勉強になったという感想です。
-----
EXTENDED BODY:
僕はとりあえず始めから最後まで読みましたが、机の上に置いておいてレジストリをいじくるときにパラパラとめくるのが正しい使い方のように思います。

この辞典の仕様用途は、レジストリをいじることになるので、自己責任でやってください。
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/win98_reg.jpg" border="0"  alt="Windows98レジストリ辞典">
-----
KEYWORDS:
Windows98,レジストリ,辞典
-----


-----
CF50_CF_4: 杉松 秀利
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/win98_reg.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4816326421/sorehabooks-22
CF50_CF: ナツメ社
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: 図解 アルゴリズムがわかるとプログラミングに強くなる
BASENAME: post_11
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 05/22/2004 11:32:54 AM
TAGS: アルゴリズム,図解
-----
BODY:
この本実は途中で読むのをやめちゃいました。最終的には全部読みましたけど、なんか文章がお難くてよほどがんばって読まないと最後まで読めない気がします。
-----
EXTENDED BODY:
書いてあるアルゴリズム自体はたいしたことはなくて、標準のデータ構造、統計計算、数値計算、文字列処理、整列、探索が載っていました。

この本は最初から読み物として考えておいた方がよいですね。僕的にはちょっと期待はずれの一冊でした。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4896270916.09.MZZZZZZZ.jpg" border="0" alt="図解 アルゴリズムがわかるとプログラミングに強くなる">
-----
KEYWORDS:
図解,アルゴリズム,プログラミング
-----


-----
CF50_CF_4: 宝剱 純一郎
CF50_URL: http://images-jp.amazon.com/images/P/4896270916.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4896270916/sorehabooks-22
CF50_CF: メディア・テック出版
-----
CF50_CF_5:

-----
CF50_CF_3: 1
--------
AUTHOR: hamasyou
TITLE: ATL COMプログラミング
BASENAME: atl_com
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/22/2004 02:09:14 PM
TAGS: ATL,COM
-----
BODY:
この本は作りがしっかりしていて、ATLを使ってCOMのプログラミングをする人にとっては非常に最適です。中身も分かりやすく書いてあります。
-----
EXTENDED BODY:
チュートリアル的に内容がかかれているので、それに沿ってやればVisualC++上でATLを使ったCOMの利用法を大体覚えられます。

ただ、ATLやCOMといった言葉を知らない人にとっては呪文のような本文に戸惑うかもしれません（僕がそうでした）。また、COMの仕様が複雑なので余計に難しく感じてしまいました。

こういった理由でCOMを少しでもかじったことのある中級者向けの本だと思います。いい本なんですが・・・。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4881356992.09.MZZZZZZZ.jpg" border="0" alt="ATL COMプログラミング">
-----
KEYWORDS:
ATL,COM,プログラミング
-----


-----
CF50_CF_4: リチャード グリムス (著), ジョージ ライリー (著), アレックス ストックトン (著), ジュリアン テンプルマン (著), Richard Grimes (原著), George Reilly (原著), Alex Stockton (原著), Julian Templeman (原著), 田中 正造 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51QTCM6068L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4881356992/sorehabooks-22
CF50_CF: 翔泳社
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: Windows2000システムプログラミング　BlackBook
BASENAME: windows2000blackbook
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/22/2004 06:31:30 PM
-----
BODY:
インプレスのBlackBookシリーズはほんとに読み応えのある本です。紙質も他の本に比べて薄く、サンプルも充実しています。
-----
EXTENDED BODY:
この本は、一つ一つのサンプルが大きめでプログラミングを初めたばかりの人にはとっつきにくいかもしれません。それと、中のサンプルを実際に打ち込んでも上手く実行されない時があって焦りました。理由はただの設定ミスでしたが、サンプルを動かす時の設定などは書かれていないため、つまずくと立ち上がるまでに時間がかかるかもしれないです。僕はそのつまずきに、２週間くらい費やしました。

システムプログラミングと銘打っているだけあり、システムの深いところの技術を学ぶのに適しています。
Windows2000とありますが、Visual Studio 6.0  を使う限り Windows XP でも試すことはできそうです。 Win32 API を使った、ソケットプログラミングや、ファイルIOのプログラミングを勉強できます。

一通りシステムプログラミングを学びたい人にはお勧めです。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4844313843.09.MZZZZZZZ.jpg" border="0" alt="Windows2000システムプログラミング　BlackBook">
-----
KEYWORDS:
Windows2000,システム,プログラミング
-----


-----
CF50_CF_4: アル ウィリアムス (著), Al Williams (原著), 風工舎 (翻訳)
CF50_URL: http://images-jp.amazon.com/images/P/4844313843.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4844313843/sorehabooks-22
CF50_CF: インプレス
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: XML+XSLによるWebサイトの構築と活用
BASENAME: xmlxslweb
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 05/22/2004 06:38:22 PM
TAGS: Webサイト,XML,XSL
-----
BODY:
実践で使えるXMLを解説している本ですが、基本も一通り学べます。XMLの概念を深くまで勉強したい人にとっては物足りないですけど、初めてXMLをさわる人にとっては敷居が低いと思います。つまり初心者向けってことです。
-----
EXTENDED BODY:
内容は、チュートリアル的なものが多く、サンプルも豊富ですし、読みながら手を動かすのがよいと思います。実際、僕もそうやってこの本を読みました。言葉も丁寧で読みやすかったです。

XMLをホームページに応用する方法が載っていて、XML と XSL を同時に学ぶことができる、かなりお薦めのXMLの本です（実際はXSL重視です）。これの他にもう一冊XMLを詳細に解説している本があればパーフェクトです。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797313404.09.MZZZZZZZ.jpg" border="0" alt="XML+XSLによるWebサイトの構築と活用">
-----
KEYWORDS:
XML,XSL,Web
-----


-----
CF50_CF_4: 宮坂 雅輝 (著), PROJECT KySS (著)
CF50_URL: http://images-jp.amazon.com/images/P/4797313404.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797313404/sorehabooks-22
CF50_CF: ソフトバンク パブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: おしえて！！FLASH4
BASENAME: flash4
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Design
CATEGORY: Design
DATE: 05/22/2004 06:44:11 PM
TAGS: FLASH4
-----
BODY:
最初にページを開いてみての感想は「すごいアニメチックだなぁ」でした。
非常にイラストが多く使われていて（まじで多いです）、まったくの初心者でも迷うことなくFlashの基本的な使い方をマスターできるでしょう。
-----
EXTENDED BODY:
中身は見開き１ページにつき一項目を説明するタイプの本で、著者のまつむらさん、たなかさん扮する師匠とまりたが、左のページで対話形式にその項目の利用法を説明して、右側のページで実際の使い方をレクチャーしています。

これ一冊で基本的なFLASHの使い方はマスターできると思います。FLASH自体、基本を学べばあとは自分の力量にかかっているといったところがありますので、最初に買う本としては最適ではないかなと思います。

現在は、Flash MX が発売されていますので、そちらの方もお勧めします。
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839907293/sorehabooks-22" target="_blank" class="extlink">おしえて!!Macromedia FLASH MX    毎コミおしえて!!シリーズ</a>

+ モデラーの方におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844357530/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4844357530.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844357530/sorehabooks-22/">女性の描き方 魅力的に見せるコツと表現方法</a><br />岩崎 宏<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4844357530"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844357530/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4844357530"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4839902585.09.MZZZZZZZ.jpg" border="0" alt="おしえて！！FLASH4">
-----
KEYWORDS:
Flash4,毎コミ,Macromedia
-----


-----
CF50_CF_4: まつむら まきお (著), たなか まり (著) 
CF50_URL: http://images-jp.amazon.com/images/P/4839902585.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4839902585/sorehabooks-22
CF50_CF: 毎日コミュニケーションズ
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: オールラウンドプログラミングvol.1　Java500の技
BASENAME: vol1java500
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/22/2004 07:04:31 PM
TAGS: Java
-----
BODY:
これは情報が満載の本でした。著者が５人もいるところで分かると思いますが、かなり情報が濃いです。一ページを縦割りで２列にしていて、１話完結タイプのお話が５００以上あります。目次のページもすごいです。何がしたいのかということを目次から探せば、リファレンスのように使うことが出来ます。
-----
EXTENDED BODY:
短めのサンプルがたくさん載っているところも評価できました。ただ、僕は電車の中で読むために買ったのですが、これは家や会社で、実際にコンピュータを触りながら読んだほうがよい本です。

ただ読むだけでは面白さが実感できないと思いますので、パソコンの前でキーボードに触りながら一つ一つのTIpsを実行していくと、自分の力が2倍くらいになっているのに、本を読み終わった後に気づきます。
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/all_round_java500.jpg" border="0" alt="オールラウンドプログラミングvol.1　Java500の技">
-----
KEYWORDS:
オールラウンドプログラミング,JAVA,技
-----


-----
CF50_CF_4: Windowsプログラミング愛好会 (著) 
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/all_round_java500.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774112259/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: オールラウンドプログラミングvol.3　C/C++300の技
BASENAME: オールラウンドプログラミングvol3　cc300の技
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/22/2004 07:09:52 PM
TAGS: C/C++
-----
BODY:
これは情報が満載の本でした。著者が５人もいるところで分かると思いますが、かなり情報が濃いです。
一ページを縦割りで２列にしていて、１話完結タイプのお話が３００以上あります。目次のページもすごいです。何がしたいのかということを目次から探せば、リファレンスのように使うことが出来ます。
-----
EXTENDED BODY:
短めのサンプルがたくさん載っているところも評価できました。ただ、僕は電車の中で読むために買ったのですが、これは家や会社で、実際にコンピュータを触りながら読んだほうがよい本です。

ただ読むだけでは面白さが実感できないと思いますので、パソコンの前に座り、キーボードを叩きながら読むことをお勧めします。この本では、C/C++プログラマがつまづきやすい、ポインタのことも解説してあり、お買い得です。僕はC言語で作るCGIという特集が非常に読みたくて何度も何度も読み返しました。
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/all_round_c300.jpg" border="0" alt="オールラウンドプログラミングvol.3　C/C++300の技">
-----
KEYWORDS:
オールラウンドプログラミング,C,C++,技
-----


-----
CF50_CF_4: Windowsプログラミング愛好会 (著) 
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/all_round_c300.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774113123/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: 改訂　C++のからくり
BASENAME: c_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/22/2004 07:15:16 PM
TAGS: C++
-----
BODY:
この本は面白い。この一言に尽きます。C++の仕様を一通り説明しているが、パワーユーザー向けの難しく、よく分からないようなことは一切切り捨てている。
-----
EXTENDED BODY:
それでもこの本を読めば普通にC++でプログラミングするのには十分であると思います。著者のユーモア溢れる洒落が所々に出てきて、ほんとに退屈させてくれませんでした。

これほど読みやすい本は数えるくらいしかないようにに思います。タイトルに「からくり」とあるように、どうしてこの仕様はなくてはならないのかといったところに焦点を当てているところも新鮮でよかったです。

C/C++言語初心者がおちいる、ポインタが、非常にわかりやすく頭に入ってきます。この本を読んで私はポインタを理解しました。


C言語の文法はもう完璧という人は、こちらのサイトはいかがですか？
自分のプログラムを診断してみましょう。

<a href="http://www.pro.or.jp/~fuji/mybooks/cdiag/" target="_blank" class="extlink">Ｃプログラミング診断室</a>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/479730829X.09.MZZZZZZZ.jpg" border="0" alt="改訂　C++のからくり">
-----
KEYWORDS:
C++,からくり
-----


-----
CF50_CF_4: スティーブン・R. デイビス (著), Stephen R. Davis (原著), 瀬谷 啓介 (翻訳)
CF50_URL: http://ecx.images-amazon.com/images/I/51S4AA687SL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/479730829X/sorehabooks-22
CF50_CF: ソフトバンク パブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 簡単動くホームページ  Dreamweaver4&Fireworks4活用ブック
BASENAME: _dreamweaver4fireworks4
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Design
CATEGORY: Design
DATE: 05/22/2004 08:40:31 PM
TAGS: Dreamweaver4,Fireworks4
-----
BODY:
タイトルに「簡単」とあるだけあって、基本動作のやり方は親切に手順を追って説明しています。書いてあるとおりにすれば簡単に出来ます。
-----
EXTENDED BODY:
ただ、この本はまったくの初心者が買う本ではないように思いました。というのも、アプリケーションの使い方の解説書ならもっといい本が出ているだろうし、それらを読んだ人ならこの本に載っている事柄くらい、本を見なくても出来るのではと思ったからです。それでも、ちょっとしたとき確認の意味で読む程度の使い方をするにはちょうどいい本ではあります。

なんとなく、中途半端な感じのする本でした・・・。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4816330437.09.MZZZZZZZ.jpg" border="0" alt="簡単動くホームページ  Dreamweaver4&Fireworks4活用ブック">
-----
KEYWORDS:
Dreamweaver4,Fireworks4,活用
-----


-----
CF50_CF_4: 佐藤 信正 (著) 
CF50_URL: http://ec2.images-amazon.com/images/I/51XRB5VW3YL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4816330437/sorehabooks-22
CF50_CF: ナツメ社
-----
CF50_CF_5:

-----
CF50_CF_3: 1
--------
AUTHOR: hamasyou
TITLE: 極めるVisualC++　〜基礎にして初歩にあらず〜
BASENAME: visualc
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 05/22/2004 08:48:13 PM
TAGS: C++
-----
BODY:
本は著者の熱い想いが非常に強く感じられました。タイトルに「基礎にして初歩にあらずとあるだけあって、初心者向けの本ではありませんが、VisualC++が水面下でどんなことをやっているのかを著者と一緒に解明していきたいという人にはお薦めの本です。
-----
EXTENDED BODY:
著者の言葉遣いに好き嫌いが分かれると思いますが、とりあえず読んでおいて損はないと思います。ただ、時代の流れがVisualC++を飛び越してしまっているので、いまさらという気もしないでもないですけど・・・。

この本は、実用書というよりは、読み物です。Visual C++ についての著者の熱い想いを感じてみたい方は、是非ご一読を。

著者のもうひとつの読み物本を紹介します。
今度はJavaに関しての本です。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774106747/sorehabooks-22" target="_blank" class="extlink">極めるJava―Symantec Visual Caf'e for Java 2.5J</a>
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/kiwameru_visualc%2B%2B.jpg" border="0" alt="極めるVisualC++　〜基礎にして初歩にあらず〜">
-----
KEYWORDS:
C++,極める,基礎
-----


-----
CF50_CF_4: 吉田 弘一郎 (著) 
CF50_URL: http://g-ec2.images-amazon.com/images/G/09/ciu/07/6a/99d4d0920ea0fd9a206bf110.L.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774105570/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: 第３版　ゲーム作りで学ぶJAVAプログラミング
BASENAME: 第３版　ゲーム作りで学ぶjavaプログラミング
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/22/2004 10:08:31 PM
TAGS: Java,ゲームプログラミング
-----
BODY:
この本を買った当時は僕はまったくの初心者でJavaなんて名前しか聞いたことのない奴でした。そういう人にとってはこの本はやさしく評価できるんじゃないかなって思います。でも少しくらいJavaをかじったことのある人にはこの本は簡単すぎてつまらないかもしれません。
-----
EXTENDED BODY:
表紙の裏面にこの本で学ぶ項目が書いてあって、どんなゲームを作るか載っているんですけど、これを見れば少しJavaを勉強した人でも容易に本を見なくてもゲームが作れちゃうんじゃないかな。

例を挙げる、「文字や図を表示する」からはじまって、「じゃんけんゲームを作ろう」、「スロットマシーンを作ろう」など、ゲーム作りを行っていくうえでプログラミング能力を伸ばそうというのがこの本の特徴。

説明がアプレットを中心にしているところも好き嫌いが分かれるところだと思います。基本的に、初心者向けの本は、GUIが出てこないとプログラミングしている気がしないらしいので、完全に初心者向けです。
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/gamedukuri_java.jpg" border="0" alt="第３版　ゲーム作りで学ぶJAVAプログラミング">
-----
KEYWORDS:
ゲーム,JAVA,プログラミング
-----


-----
CF50_CF_4: 中島 省吾 (著), 工学研究社 (著) 
CF50_URL: http://ec2.images-amazon.com/images/I/51juEMPVOPL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4886478581/sorehabooks-22
CF50_CF: エスシーシー
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: CGIのための実践入門Perl
BASENAME: cgiperl
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/22/2004 11:46:18 PM
TAGS: CGI,Perl
-----
BODY:
よくPerlはソースコードが読みにくいとか、ガラクタ製造機などといわれますが、この本でPerlを勉強してそう思いましたね（笑）。本書は、そんなPerlをCGIで使うための説明を非常に丁寧にしてくれています。
-----
EXTENDED BODY:
この本は、まず前半でPerlの基礎文法を勉強ができます。一通り言語仕様を学んだ後、後半でCGIの仕組みやサンプルが載っていて、実際にプログラムを完結するところまでできます。プログラムサンプルが、掲示板やカウンタといった、CGIでよく使うものであるところも非常に評価できます。

Perlの基礎はCGIで使用する部分のみを解説しているような気がしました。それでも、Perlの使用目的がCGIだったのでこれで十分でしたが。本のタイトルからして、CGI向けのPerlを学ぶというスタンスですので、十分目的は果たしています。

後半の実践用サンプルには、アクセスカウンター、ゲストブックが載っています。これ以外にも細かなサンプルが多数載っています。最後にトラブルシューティングが載っているのも非常に親切です。

CGIプログラムをPerlで書いてみたい人、掲示板、カウンタ、日記などを自前で実装したい人には、お勧めです。Perlのソースコードがわかりづらい中、これほど丁寧に説明してくれる本書は、良書の部類に入るのではないでしょうか。
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/cgi_perl.jpg" border="0" alt="CGIのための実践入門Perl">
-----
KEYWORDS:
Perl,CGI,実践
-----


-----
CF50_CF_4: 三島 俊司 (著) 
CF50_URL: http://ec2.images-amazon.com/images/I/61pWATtiTxL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774106291/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: C言語によるプログラミング　〜基礎編〜
BASENAME: c
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/22/2004 11:57:20 PM
TAGS: C
-----
BODY:
非常に基礎的に、王道を通ったようにC言語を学べます。大学の授業で使うにはうってつけかなと思います。この言葉をどのように取るかは個人個人にお任せしますが・・・
-----
EXTENDED BODY:
内容を読んでみると言葉使いはそれなりに丁寧かつ堅めです。そういう意味で万人に受ける本ではないかなと思います。
この本は続編が出ていて２冊目は<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274064875/sorehabooks-22" target="_blank" class="extlink">応用編</a>となっています。

これら２冊の本は、完全な初心者向けの本ですから、これからC言語を学ぶと言う人は購入してみたらどうでしょうか？
ただし、面白さは保証しません。あくまでも、王道を進みたい人向けの本です。


参考までに、続編となっている応用編はこちらです。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274064875/sorehabooks-22" target="_blank" class="extlink">C言語によるプログラミング 応用編</a>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4274064409.09.MZZZZZZZ.jpg" border="0" alt="C言語によるプログラミング　〜基礎編〜">
-----
KEYWORDS:
C言語,プログラミング,基礎編
-----


-----
CF50_CF_4: 内田 智史 (監修), システム計画研究所 (編集)
CF50_URL: http://ec2.images-amazon.com/images/I/41A9SPPF2WL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4274064409/sorehabooks-22
CF50_CF: オーム社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: C/C++によるプログラミングスタイルブック
BASENAME: cc
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/23/2004 01:28:18 AM
TAGS: C,C++,コーディングスタイル
-----
BODY:
自分のソースコードで決まったスタイルを持っている人は参考がてらに、決まったスタイルを持っていない人はこの本を師としてあがめましょう（笑）。非常にわかりやすくスタイルがまとめられている、入門書です。
-----
EXTENDED BODY:
どうしてこのスタイルがよいのか、このスタイルでは駄目なのかを理由づけて説明してあるところがよいです。読めば必ず納得できると思います。

ソースコードというのはただでさえ読みにくいものです。少しでも読みやすくするためにも、この本から読みやすくするコツを盗み取ってください。

ただ、少し経験をつんだ人なら当たり前のことがずいぶんと載っているので、業務でプログラムを書いているような人には、物足りないかもしれません。

ただ、体系的にまとめられているのが、非常に見やすく、わかりやすいことは確かです。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797311835.09.MZZZZZZZ.jpg" border="0" alt="C/C++によるプログラミングスタイルブック">
-----
KEYWORDS:
C,C++,プログラミング,スタイル
-----


-----
CF50_CF_4: 林 晴比古 (著)
CF50_URL: http://ecx.images-amazon.com/images/I/4158J6GCCQL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797311835/sorehabooks-22
CF50_CF: ソフトバンククリエイティブ
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: GTK+とGladeで作るLinuxプログラミング超入門
BASENAME: gtkgladelinux
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/23/2004 01:40:02 AM
TAGS: Glade,GTK,Linux
-----
BODY:
GTK+とGladeではじめるLinuxプログラミング。こうやって聞くとなんか難しそうですが、この本を読みながら進めれば、結構簡単に出来ます。ただし、この本を使って、自分でGUIアプリケーションをLinuxで作る必要があるのかを考えたほうがいいでしょう。
-----
EXTENDED BODY:
確かに、本を読みながらプログラミングすれば何とかアプリケーションを作ることができました。が、今の時代、自分でGUIアプリをLinux上に作る必要があるのかを先に考えたほうが、はるかに時間を有効に使えると思います。

業務などでLinuxアプリをGUIでつくる必要があるかもしれません。しかし、その場合は、もっと別の書籍を探したほうがいいでしょう。この本は、初心者向けのわりに、初心者にはとっつきにくく、上級者が必要とする情報はほとんどないといってもいいと思います。

きついことを書きましたが、それでも読んでみたければ止めはしません。時間を有効に使ってくださいね。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4883990494.09.MZZZZZZZ.jpg" border="0" alt="GTK+とGladeで作るLinuxプログラミング超入門">
-----
KEYWORDS:
GTK,Glade,Linux,プログラミング
-----


-----
CF50_CF_4: 鈴木 哲哉 (著)
CF50_URL: http://images-jp.amazon.com/images/P/4883990494.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4883990494/sorehabooks-22
CF50_CF: すばる舎
-----
CF50_CF_5:

-----
CF50_CF_3: 1
--------
AUTHOR: hamasyou
TITLE: 新 Visual C++6.0入門 〜シニア編〜
BASENAME: _visual_c60
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/23/2004 02:55:22 AM
TAGS: "Visual C++"
-----
BODY:
このシリーズには入門編とシニア編とがあって、やっぱりシニア編は難しいのかなって思って買ったらそうでもなかった。Windowsによく出てくるコントロールコンポーネントがほとんどと、もう少し高度なプログラムを一つの章で一つずつ学んでいけるのがこの本の特徴で、どこから読んでもよく、困ったときにパラパラめくるといった使い方ができるのが評価できる点です。
-----
EXTENDED BODY:
この本の著者の林さんは、非常に丁寧に解説を書いてくれて入門書としてはいまだはずれがないといっても過言じゃないくらいいい本をたくさん出しています。
本書もそんな良書の中のひとつです。

内容も分かりやすくて入門書にはお勧めです。ただし、このシニア編に限って言えば、Windowsプログラミングでよく使うコントロールコンポーネントの説明にとどまってしまったのが悔やまれる。Windowsプログラミングの解説というよりは、もっと狭く考えたほうがよい。


参考として、ビギナー編のリンクを載せておきます。ビギナー編はC/C++言語の基礎解説的な本で、これもまた非常に丁寧かつわかりやすいです。初心者に超お勧めです。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797307609/sorehabooks-22" border="0" target="_blank" class="extlink">新Visual C++6.0入門 (ビギナー編)    Visual C++6.0実用マスターシリーズ (1)</a>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797308028.09.MZZZZZZZ.jpg" border="0" alt="新 Visual C++6.0入門 〜シニア編〜">
-----
KEYWORDS:
VisualC++,入門,シニア
-----


-----
CF50_CF_4: 林 晴比古 (著)
CF50_URL: http://images-jp.amazon.com/images/P/4797308028.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797308028/sorehabooks-22
CF50_CF: ソフトバンク パブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 珠玉のプログラミング
BASENAME: 珠玉のプログラミング
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 05/23/2004 03:17:13 AM
TAGS: アルゴリズム
-----
BODY:
雑誌で絶賛されていたのでどれほどのものかと期待していた本ですが、非常に難しい。難しいの一言に尽きます。はっきり言ってアルゴリズムをかじったぐらいの学生では、到底本質は見えてこないのではないかと思う。
-----
EXTENDED BODY:
本書は、ほんとに難しくて、半分くらいしか理解できなかった覚えがある。何度も読み返した記憶もある。堅めの文章で、とっつきにくく、サンプルコードは擬似コード（Cに近いコード）。しかし、何度も読んでしまうのは、アルゴリズムがわからなくて悔しいわけではなく、本書の考え方が非常に良いものであるからに他ならない。

例えば、1,000,000人の人間から、ランダムに100人を選び出すときに、どのようにすれば一番簡単かという問題がある。この答えはあえて言わないでおくが、この本には確かにアルゴリズムについて考えさせてくれる部分が非常にたくさんある。

１５のコラムに分かれていて、一つの章で一つの話題が取り上げられていて、ちょっとした時間でも読みやすい。ちょっと難しいですが、納得できるところもいくつかあり、買って損はないと思う。むしろ買ってもらいたい。


アルゴリズムの勉強におひとついかがですか？楽天Booksでどうぞ。

<div class="rakuten">
<TABLE border=0 cellPadding=0 cellSpacing=0 width=270 hight=180><TR Align=top><TD align=middle noWrap width=90 hight=180><A href="http://px.a8.net/svt/ejp?a8mat=O4L69+FRZJW2+1N6+6A4FN&URL=http://books.rakuten.co.jp/afa8/NS/CSfLastGenGoodsPage_001.jsp?GOODS_NO=1200222" target="rakutenbooks"><IMG alt=珠玉のプログラミング本質を見抜いたアルゴリズムとデータ構造 src="http://books.rakuten.co.jp/com/images/goods/89471236.gif" width=65 height=98 border=0></A></TD><TD width=180 hight=180><A href="http://px.a8.net/svt/ejp?a8mat=O4L69+FRZJW2+1N6+6A4FN&URL=http://books.rakuten.co.jp/afa8/NS/CSfLastGenGoodsPage_001.jsp?GOODS_NO=1200222" target = "rakutenbooks" ><B>珠玉のプログラミング本質を見抜いたアルゴリズムとデータ構造</B></A><BR><BR><FONT size=-1>著者：ジョン・ルイス・ベントリ / 小林健一郎<BR>出版社：ピアソンエデュケーション<BR>本体価格：3,400円<BR></FONT></TD></TR><TR><TD colspan =2 align=right><A href="http://px.a8.net/svt/ejp?a8mat=O4L69+FRZJW2+1N6+6A4FN&URL=http://books.rakuten.co.jp/afa8/ticker/basket.jsp?no=1200222 " target = "rakutenbooks">楽天ブックスで購入する</a><A href="http://px.a8.net/svt/ejp?a8mat=O4L69+FRZJW2+1N6+6A4FN&URL=http://books.rakuten.co.jp/afa8/ticker/basket.jsp?no=1200222 " target = "rakutenbooks"><IMG align=absMiddle alt="楽天ブックスで購入する" border=0 height=18 width=21 hspace=3 src="http://books.rakuten.co.jp/RBOOKS/img/cart_s.gif" ></A></TD></TR></TABLE>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894712369.09.MZZZZZZZ.jpg" border="0" alt="珠玉のプログラミング">
-----
KEYWORDS:
プログラミング,アルゴリズム,C
-----


-----
CF50_CF_4: 小林 健一郎 (翻訳)
CF50_URL: http://images-jp.amazon.com/images/P/4894712369.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22
CF50_CF: ピアソン・エデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Direct３D　プログラミングガイドブック
BASENAME: directd
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/23/2004 10:52:55 AM
TAGS: Direct3D
-----
BODY:
この本は、Direct３Dについて解説してある本で、CD-ROMについているツールを使うと簡単に３Dのプログラミングができてしまうという画期的なものでした。当時は3Dプログラミングをするのに、非常に手間がかかり、何かしらのツールを使わないと、めんどくさくてやってられなかったものです。
-----
EXTENDED BODY:
DirectX自体がかなり難しい技術でしたのでこういったツールが付属でついてくるととても助かりました。
内容的にはそれほど難しくなく、ちょっとがんばれば読みこなせると思います。

ただ、現在のDirectXがこの本とはちょっと変わっているので、本で学んだことがそのまま通用するということはないと思いますので、この本をいまさら買うという気はほとんど起こらないかもしれないですね。

最近はDirext3D と DirectDraw(2D) が同じようにプログラミングできるようで、この書評を書いたきっかけに、久しぶりにDirectXを触ってみてもいいかなと思いました。

ちなみに、DirectX について知らない人は、IT用語辞典をどうぞ。

<a href="http://e-words.jp/w/DirectX.html" target="_blank" class="extlink">IT用語辞典 eWord-DIrectX</a>

本家、Microsoft DirectX のページです。

<a href="http://www.microsoft.com/japan/windows/directx/default.mspx" target="_blank" class="extlink">Microsoft DirectX (日本)</a>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4881355430.09.MZZZZZZZ.jpg" border="0" alt="Direct３D　プログラミングガイドブック">
-----
KEYWORDS:
Direct3D,プログラミング,ガイド
-----


-----
CF50_CF_4: 清水 亮 (著)
CF50_URL: http://images-jp.amazon.com/images/P/4881355430.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4881355430/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: 達人プログラマー  〜システム開発の職人から名匠への道〜
BASENAME: post_4
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 05/23/2004 12:16:04 PM
TAGS: これは読むべき,定番,良書,達人プログラマ
-----
BODY:
「猫がソースコードを食べちゃった」、「石のスープと蛙の煮物」、「表明プログラミング」、「リファクタリング」とふざけたようなタイトルから、しっかりしたタイトルまで非常に幅広く、プログラミングの達人における心構えを諭してくれる一冊です。
-----
EXTENDED BODY:
内容は、プログラミングを行う上で当たり前のことから（例えば手を動かす前に、まず考えること、など）、プログラムを設計する際の注意点（結合度を最小にする、デメテルの法則など）、テストしやすいコードにするにはどのようにプログラムを書いたら良いのかまで、幅広く網羅しています。

他の似た書籍と違うのは、現場のプログラマーが自分たちの実践において培った経験やカンを惜しげもなく書いている点でしょう。達人の域になると、こういうことを考えるのかと、目からうろこが落ちました。

構成は、コラム形式で、抽象的な概念なんだけど具体例をあげて説明してあり、納得しながら読むことができます。職場でプログラミングをしている人はもちろん、これからプログラミングを始める人にも是非読んで欲しい一冊です。はっきり言って、超おすすめ！

<blockquote>

達人プログラマーになるには、常に自分自身が何をやっているかを考え続ける必要があります。

（中略）

絶え間なく考え続け、リアルタイムで自身の作業を批判するのです。IBMにあったおなじみの企業モットーTHINK！（考えろ！）は達人プログラマーの唱えるべきマントラ（真言）です。

<cite>達人プログラマー・まえがきより</cite>

</blockquote>

この本はほんとにおすすめです。楽天Booksでこの本を買いませんか？

<div class="rakuten">
<TABLE border=0 cellPadding=0 cellSpacing=0 width=320 hight=180><TR vAlign=top><TD align=middle noWrap width=90 hight=180><A href="http://px.a8.net/svt/ejp?a8mat=O4L69+FRZJW2+1N6+6A4FN&URL=http://books.rakuten.co.jp/afa8/NS/CSfLastGenGoodsPage_001.jsp?GOODS_NO=1208338" target="rakutenbooks"><IMG alt=達人プログラマーシステム開発の職人から名匠への道 src="http://books.rakuten.co.jp/com/images/goods/89471274.gif" width=65 height=98 border=0></A></TD><TD width=220 hight=180><A href="http://px.a8.net/svt/ejp?a8mat=O4L69+FRZJW2+1N6+6A4FN&URL=http://books.rakuten.co.jp/afa8/NS/CSfLastGenGoodsPage_001.jsp?GOODS_NO=1208338" target = "rakutenbooks" ><B>達人プログラマーシステム開発の職人から名匠への道</B></A><BR><BR><FONT size=-1>著者：アンドリュー・ハント / デビッド・トーマス<BR>出版社：ピアソンエデュケーション<BR>本体価格：3,800円<BR></FONT></TD></TR><TR><TD colspan =2 align=right><A href="http://px.a8.net/svt/ejp?a8mat=O4L69+FRZJW2+1N6+6A4FN&URL=http://books.rakuten.co.jp/afa8/ticker/basket.jsp?no=1208338 " target = "rakutenbooks">楽天ブックスで購入する</a><A href="http://px.a8.net/svt/ejp?a8mat=O4L69+FRZJW2+1N6+6A4FN&URL=http://books.rakuten.co.jp/afa8/ticker/basket.jsp?no=1208338 " target = "rakutenbooks"><IMG align=absMiddle alt="楽天ブックスで購入する" border=0 height=18 width=21 hspace=3 src="http://books.rakuten.co.jp/RBOOKS/img/cart_s.gif" ></A></TD></TR></TABLE>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894712741.09.MZZZZZZZ.jpg" border="0" alt="達人プログラマー  〜システム開発の職人から名匠への道〜">
-----
KEYWORDS:
達人,プログラマー,システム開発
-----


-----
CF50_CF_4: 村上 雅章 (翻訳)
CF50_URL: http://images-jp.amazon.com/images/P/4894712741.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22
CF50_CF: ピアソン・エデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: とってもかんたん！ Vine Linux 早わかりガイド
BASENAME: _vine_linux
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 05/23/2004 06:01:57 PM
TAGS: "Vine Linux"
-----
BODY:
LinuxはフリーのOSで、こういう解説書なんかを買うとついてくるんですが、インターネットで探しても見つかります。Linux自体はフリーで、インストールにお金はかかりません。
-----
EXTENDED BODY:
Linuxの種類にもいろいろあって、ディストリビューションというのですが、いくつかのプログラムがセットになっています。このVineLinuxというのは数あるディストリビューションの中で、日本語対応が十分にされています。初心者にはこのVineLinuxをおすすめします。

さて、この本の評価ですが、本を読みながら自宅のパソコンにLinuxを入れてみましたが、確かに簡単です。まあ、最近のディストリビューションはほとんどインストールは自動で行ってくれるので、どれも似たようなものです。しかし、最初から気兼ねなく日本語を使えるというのがお勧めです。

VineLinuxのインストールから、XWindowの設定、ユーザ作成、インターネットの設定という流れになっています。とりあえず、この一冊で一般のユーザが使う設定はできそうです。

ただ、あえてLinuxをパソコンにインストールするユーザが、インターネットの設定までで納得するかは微妙です。この本は、ほんとの初心者が、興味本位にLinuxを触る手助けをするものだと割り切ったほうがいいでしょう。


VineLinux のホームページです。ちなみに、Vineというのは英語で「ブドウの木」という意味らしいです。

<a href="http://vinelinux.org/" target="_blank" class="extlink">Vine Linux Home Page</a>
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/~hamasyou/gallery/img/books_value/vine_linux.jpg" border="0" alt="とってもかんたん！ Vine Linux 早わかりガイド">
-----
KEYWORDS:
Vine,Linux,ガイド,かんたん
-----


-----
CF50_CF_4: 西井 淳 (著)
CF50_URL: http://www.sam.hi-ho.ne.jp/~hamasyou/gallery/img/books_value/vine_linux.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774110515/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: 著作権が明解になる10章
BASENAME: 10
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 05/23/2004 07:46:45 PM
TAGS: 著作権
-----
BODY:
最近何かと問題になる著作権についてわかりやすく解説しているのが本書の特徴です。インターネットが普及してきた現代において、固形物に対する著作権だけでなく、流体物に対する著作権の知識もますます必要になってきました。
-----
EXTENDED BODY:
本書では、まず、目次の部分がよくできていて、知りたいと思う情報が一目で入ってくるような章が並んでいます。「著作権とはどんのような権利か」からはじまり「著作権によって保護されるものは何か」、「どのような場合に著作権の自由利用ができるのか」、「権利侵害にどのように対処したらよいのか」など、興味を引く章ばかりです。

プログラムに関する著作権などもあり、プログラマーの皆さんも一度目を通しておくと良いかもしれません。じつは自分に著作権があったのに、「会社に不正使用されている」なんてこともあるかもしれませんよ。

文体はお堅い系の本ですが、難しいことを簡単に解説しているあたり、さすがです。必要な部分だけでも読んでみる事をおすすめします。手元にあって損するものではないですから。


こちらは、Web上の著作権に関するQ&Aです。

<a href="http://www.cric.or.jp/qa/qa.html" target="_blank" class="extlink">著作権に関するQ&A</a>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4785200839.09.MZZZZZZZ.jpg" border="0" alt="著作権が明解になる10章">
-----
KEYWORDS:
著作権,明解,10章
-----


-----
CF50_CF_4: 吉田 大輔 (著)
CF50_URL: http://images-jp.amazon.com/images/P/4785200839.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/478520107X/sorehabooks-22
CF50_CF: 出版ニュース社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: ハッカーの教科書
BASENAME: post_3
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Web-Internet
CATEGORY: Web-Internet
DATE: 05/23/2004 09:33:27 PM
TAGS: ハッカー
-----
BODY:
ハッカーという言葉は、マスコミが取り上げる中では、コンピュータに進入して悪いことをする人だという認識が高まっています。しかし、実はこれはまったくの誤解で、ハッカーというのはコンピュータの扱いにかけては右に出るものがいないほどの天才のことをさすのです。
-----
EXTENDED BODY:
本書をよんでまずはじめにがっくりきました。この本で言うハッカーはマスコミが取り上げる意味と同じハッカーでした。悪いことをするのは、「クラッカー」なのに・・・。

内容的には、まあ面白本でした。本の構成も終始一貫していてよかったです。ハッキング（クラッキング）するにはツールがあれば大した技術はなくても出来てしまいます。この本ではツール使い方やデータの読み方などの説明と効果などを説明してありました。

実際にクラッキングをすると罪になりますので、決してしないでください。やるとしても、自分のコンピュータだけに対して行ってください。この本を、まったく知識のない人が読んで、本のとおりに行ったとしたら、それは犯罪行為になります。注意してください。

ということで、本書ではハッキングのことを一通りのことは学べると思います。ハッキングするには実はたいした技術はいらなくて、ツールと、データの読み方と、警察に捕まってもかまわないという勇気があればいいのだということをこの本からは学びました。読み物として割り切ってください。

この本には続刊がでていて、第二巻ではハッカーが進入した場合を想定して書かれています。
二冊そろえて、是非あなたもハッカーに！！（よいこは絶対にまねしないでください。）

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/488718686X/sorehabooks-22" target="_blank" class="extlink">ハッカーの教科書〈2〉ハッカー侵入実験</a>

+ ハッカーを目指す人にはこちら

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/488718686X/sorehabooks-22/">ハッカーの教科書〈2〉ハッカー侵入実験</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/488718686X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/488718686X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">IPUSIRON<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=488718686X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/488718686X/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4887186347.09.MZZZZZZZ.jpg" border="0" alt="ハッカーの教科書">
-----
KEYWORDS:
ハッカー,教科書
-----


-----
CF50_CF_4: IPUSIRON (著)
CF50_URL: http://images-jp.amazon.com/images/P/4887186347.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4887186347/sorehabooks-22
CF50_CF: 株式会社データハウス
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: Software Technology26  はじめてのC++　[演習と解説]
BASENAME: software_technology26_c
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/23/2004 11:52:42 PM
TAGS: C++
-----
BODY:
この本を読んで思ったことは、<a href="http://www.amazon.co.jp/exec/obidos/ASIN/477410843X/sorehabooks-22" target="_blank" class="extlink">「決定版 はじめてのC++」</a>を読んだ人を対象にしているんだなってことです。まあ、ANSI標準のC++にのっとって解説してあるだろうから、C++を勉強した人ならこの本はさほど難しくないんじゃないかと思います。
-----
EXTENDED BODY:
内容的には基本的なことが問題にされています。ストリームとはなんぞやとか配列の使い方わかる？といったレベルです。いまさらこの本はないだろってくらい古い本なので、別の本を読んで演習を行ったほうがいいと思います。今読むとなんだか古臭い気がしますので。
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/hazimeteno_c%2B%2B.jpg" border="0" alt="Software Technology26  はじめてのC++　[演習と解説]">
-----
KEYWORDS:
はじめて,C++,演習
-----


-----
CF50_CF_4: 塚越 一雄 (著)
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/hazimeteno_c%2B%2B.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774110124/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 1
--------
AUTHOR: hamasyou
TITLE: はじめてのVisual C++６.０
BASENAME: visual_c
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/24/2004 03:12:40 AM
TAGS: "Visual C++"
-----
BODY:
C++でクラスを作るサンプルをやった後、住所録プログラムで継承・動的処理、MFCへと入っていきます。段階的に勉強できるのも特徴の一つですが、作るサンプルがまた一味違って面白いものばかりです。
-----
EXTENDED BODY:
最後に作るソリティアは何度作っても飽きず、ゲーム作りの基礎を学ぶのにもうってつけのように思います。

よくプログラミングはサンプルに学ぶって言われますけど、まさにそのとおりと実感できる一冊でした。初心者から中級者まで読める本です。ただし、C++の基礎は載っていないので、あえて言うならば文法は一通り覚えたけど次はどうするの？って人向けです。

プログラムのクラスの分け方、設定ファイルの書き出す目安、ゲーム作りの基礎など、実践的な部分を丁寧に学べます。本を読み終わった後に、ゲームができてしまうというのもひとつの魅力です。
このゲームやりたさに、がんばって読み終えてしまうくらいの勢いはでてくると思います。

MFCを学ぶ際に、Win32APIのあり方というのも知っていたほうが良いでしょう。本書では、最初はWin32APIを使ってGUIを作成し、同じものを今度はMFCを使って実装します。基礎から学べる逸品です。

MFCとかWin32APIとかちんぷんかんぷんな人用にこれを紹介します。

<table>
  <caption>MFC、Win32APIの参考サイト</caption>
  <tr>
    <th>用途</th><th>サイト</th>
  </tr>
  <tr>
    <td>VisualC++ をつかっていてわからないことがあったら</td>
    <td><a href="http://mfc.acty-net.ne.jp/ml/mfc/" target="_blank" class="extlink">VC++ML</a></td>
  </tr>
  <tr>
    <td>VisualC++ と MFC について平易に解説しているサイト</td>
    <td><a href="http://www.hi-ho.ne.jp/hawk/mfc0401.html" target="_blank" class="extlink">MFC 実践プログラミング ヒント集</a></td>
  </tr>
  <tr>
    <td>MFCプログラミングテクニックを教えてくれるサイトです。</td>
    <td><a href="http://akky.cjb.net/mfc/" target="_blank" class="extlink">MFCプログラミング</a></td>
  </tr>
  <tr>
    <td>Win32APIのサンプルコードが満載</td>
    <td><a href="http://homepage1.nifty.com/MADIA/vc/api/" target="_blank" class="extlink">C/C++によるWin32API </a></td>
  </tr>
</table>

<h4>最後はやっぱり本の紹介です。</h4>

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756136001/sorehabooks-22" target="_blank" class="extlink">プログラミングWindows第5版〈上〉Win32 APIを扱う開発者のための決定版!    Microsoft Programming Series</a>
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/hazimeteno_visualc%2B%2B.jpg" border="0" alt="はじめてのVisual C++６.０">
-----
KEYWORDS:
はじめての,VisualC++
-----


-----
CF50_CF_4: 山地 秀美 (著)
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/hazimeteno_visualc%2B%2B.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774107816/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Visual C++ 言語リファレンス BlackBook
BASENAME: visual_c_blackbook
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/24/2004 05:06:36 AM
TAGS: "Visual C++"
-----
BODY:
インプレスのBlackBookシリーズはほんとに読み応えのある本です。紙質も他の本に比べて薄く、たくさんの情報が載っているのがウリです。
-----
EXTENDED BODY:
この本は最初から最後まで通読するのではなくて、必要なところだけ必要な分読んだほうが効率がいいです。はっきり言って辞書です。

前半はC++の基本文法と、ライブラリルーチンの説明で、後半はVisual C++の操作説明にページが割かれています。前半で文法のチェック、後半でライブラリのチェックを行えます。

うーん、辞書以外の使い方が思いつかないんですが・・・。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4844312871.09.MZZZZZZZ.jpg" border="0" alt="Visual C++ 言語リファレンス BlackBook">
-----
KEYWORDS:
Visual,C++,BlackBook,言語リファレンス
-----


-----
CF50_CF_4: 野本 等 (翻訳)
CF50_URL: http://images-jp.amazon.com/images/P/4844312871.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4844312871/sorehabooks-22
CF50_CF: インプレス
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: MFCライブラリ標準リファレンス
BASENAME: mfcライブラリ標準リファレンス
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/24/2004 05:47:03 AM
TAGS: MFC
-----
BODY:
読んでみての感想は、この本あったら便利だけど特には使わないなって感じでした。僕はめんどくさがりやなので、本で探すよりWebを使って調べものをしますので・・・。
-----
EXTENDED BODY:
内容はVisualStadioについてくるMSDNのリファレンスと同じ内容が載っています。プログラミングをしながら見るにはMSDNのオンラインリファレンスのほうが便利です。

がそれでも、読みやすさからいったら断然書籍のほうが見やすく情報も調べやすいです。オンラインリファレンスか書籍で調べるかは好き嫌いの分かれるところだと思いますが、オンラインで調べ物をするときの唯一の欠点は、パソコンをつけていないと検索できないというところでしょう。その点、本書を手元に置いておけば好きなときに調べ物をすることができます。はっきり言って便利です。

まあ、とはいえパソコンに向かっていないときにですらMFCの辞書を片手にもっているのって、なんか嫌な感じですけどね。
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/mfc_library.jpg" border="0" alt="MFCライブラリ標準リファレンス">
-----
KEYWORDS:
MFC,ライブラリ,標準
-----


-----
CF50_CF_4: 加藤 佐一 (著)
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/mfc_library.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774106607/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: Visual C++6.0入門   初級から学ぶVC++プログラミング
BASENAME: visual_c60_vc
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/24/2004 05:54:39 AM
TAGS: "Visual C++"
-----
BODY:
この本を読むとVisualC++の基本操作がマスターできますね。簡単なプログラムも作れるようになるでしょう。たとえば、HelloWorldと表示させるプログラムとかね・・・。
-----
EXTENDED BODY:
この本で学べることといったら、それぐらいしか覚えてないんですけど、たしかテキスト処理の基本ばかりのサンプルしか載っていいなかったと思います。テキスト処理は基礎中の基礎ですから必ず学ばなければいけません。

GUIを使ったプログラミング練習も載ってましたが、すべてテキスト処理関係。「文字の太さを変えるには」とか、「文字色を変えるには」とかそんなのばっかりです。

ピアソンの本にしては内容がちんけすぎるような気がします。初級者から初心者に変わるまでしか使えない参考書という位置づけでしょう。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894711400.09.MZZZZZZZ.jpg" border="0" alt="Visual C++6.0入門   初級から学ぶVC++プログラミング">
-----
KEYWORDS:
初級,VC++,プログラミング
-----


-----
CF50_CF_4: 横井 与次郎 (著)
CF50_URL: http://images-jp.amazon.com/images/P/4894711400.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894711400/sorehabooks-22
CF50_CF: ピアソン・エデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 1
--------
AUTHOR: hamasyou
TITLE: 標準JAVAプログラミング
BASENAME: java_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/24/2004 04:18:48 PM
TAGS: Java
-----
BODY:
まずびっくりしたのが、この本は２１５のポイントに分けてJAVAを説明しているのですが、その１ポイントずつにサンプルコードが載っている点です。
-----
EXTENDED BODY:
それと、僕は３冊くらいJAVAの本を持っているのですが、パッケージについてあんなにに細かく解説してくれているのはこの本だけかもしれません。JAVAをはじめてはじめる人は、パッケージについての知識は乏しいでしょうから、非常に役にたちます。

そのほか、JAVAの文法、構文などの基本もばっちり説明してあります。文法や、基礎的なことばかりで終わってしまっているのが残念ですが、最初の一冊にするなら、この本は非常におすすめです。

この本を読んだ後に、更なるステップのできる本を探すと良いでしょう。

私のお勧めは、基礎文法を学んだ後には、JAVAの謎を理解しよう！ということで<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113611/sorehabooks-22" target="_blank" class="extlink">Java謎+落とし穴徹底解明</a>

+ この本もおすすめです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113611/sorehabooks-22/">Java謎+落とし穴徹底解明</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113611/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774113611.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">前橋 和弥<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774113611&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Javaの参考書というよりは．．．<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />"Java言語を知る"ことができる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />限られた予算から選ぶなら他書をお勧めします<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Javaに関する2冊目以降として<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Javaを本当に理解できる<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113611/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/java_programing.jpg" border="0" alt="標準JAVAプログラミング">
-----
KEYWORDS:
標準,JAVA,プログラミング
-----


-----
CF50_CF_4: 横井 与次郎 (著)
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/java_programing.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798000620/sorehabooks-22
CF50_CF: 秀和システム
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: 標準 Javaプログラミングブック    New Languageシリーズ
BASENAME: _java_new_language
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/25/2004 12:52:25 AM
TAGS: Java
-----
BODY:
本書は、初心者 → 中級者へのステップアップにちょうど良いガイドだと思う。それぞれのカテゴリ(クラス、ファイル、Swing、スレッド、イベント、ネットワークなど)毎に、【解説】→【例題】→【練習問題】の順で学んでいく。
-----
EXTENDED BODY:
練習問題はソースコードに適切なコードを埋め込む形で一人でも楽しく学べる。何より、コード例が非常にたくさん載っているのがよい。実際のコードに触れながら、ステップアップ形式で学んでいけれるので、体にしみこみやすい。

途中途中にある、コーヒーブレイクは少し頭を使うアルゴリズムに関する例題がある。これを解くのもまた面白い。リファレンスとしては使い勝手は良くないが、ラーニング目的で使う分には申し分ない。
練習問題の解答が切り離せるのもうれしい。解答を見ながら自分でコードを埋めていくだけでもかなりの練習になるだろう。

初級者から中級者におすすめの実践向け演習問題だといえる。

+ 「JAVAはちょっとね」と言うあなたには、C++でも学べる New Languageシリーズ。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/477411104X/sorehabooks-22" target="_blank" class="extlink">標準Visual C++プログラミングブック    New Languageシリーズ</a>


+ New Languageシリーズを買いませんか？

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477411104X/sorehabooks-22/">標準Visual C++プログラミングブック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477411104X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/477411104X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">河西 朝雄<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=477411104X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />一応初心者向けの本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />非常に洗練された内容<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477411104X/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/java_programing_book.jpg" border="0" alt="標準 Javaプログラミングブック    New Languageシリーズ">
-----
KEYWORDS:
JAVA,プログラミング,NewLanguageシリーズ,演習
-----


-----
CF50_CF_4: 河西 朝雄 (著)
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/java_programing_book.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774112194/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: プログラミングMicrosoft Visual C++6.0    マイクロソフト公式解説書
BASENAME: microsoft_visual_c60
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/25/2004 01:39:26 AM
TAGS: "Visual C++"
-----
BODY:
本書を墨から墨まで読めば、VisualC++マスターになれることを保障します。情報量、本の厚さ、価格、どれをとっても超一流の本書はVisualC++を使う必要のある人には必携のバイブルです。
-----
EXTENDED BODY:
この本には、まずその厚さに圧倒されます。はっきり言って辞書です辞書。この本をすべて読破したならばあなたは必ずやVisualC++マスターになれます。それくらいの情報量がこの本には載っています。

本の厚さに圧倒されながら少しずつ読み進めると、すらすら読めることに気づくことでしょう。そうです。この本は見た目によらず、解説が丁寧で読みやすいのです。それでも一日に100ページを読んでも2週間くらいはかかってしまうくらいのボリュームがあります。

めげずに最後まで読めば、VisualC++の手法だけでなく、プログラミングの考え方や良いコードの設計方法まで学べるはずです。ソースコードの実例も大量に載っていて、ソースコードを追うだけでも勉強になります。

すべてのVisualC++プログラマーの方へ本書をおすすめします。ただし、初級者・初心者の方はご遠慮ください。この量についていける、中級者以上のプログラマにご紹介します。
はっきり言って、バイブルです。さすがMicrosoftの公式解説書です。

+ MicrosoftのVisualC++(現在はVisualStudio.NETに統合）のサイトです。

<a href="http://www.microsoft.com/japan/msdn/vstudio/default.aspx" target="_blank" class="extlink">Microsoft Visual Studio.net</a>

+ マイクロソフト公式解説書の第二弾です。Windowsプログラミングにおけるデバッグ方法が載っています。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891001860/sorehabooks-22" target="_blank" class="extlink">Windowsプログラマのためのデバッグテクニック徹底解説    マイクロソフト公式解説書</a>


+ このバイブル本を買いませんか？少し高いですが損はないです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891001860/sorehabooks-22/">Windowsプログラマのためのデバッグテクニック徹底解説</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891001860/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4891001860.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジョン ロビンズ　John Robbins　豊田 孝<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4891001860&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />おすすめです<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891001860/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4891000503.09.MZZZZZZZ.jpg" border="0" alt="プログラミングMicrosoft Visual C++6.0    マイクロソフト公式解説書">
-----
KEYWORDS:
プログラミング,VisualC++,マイクロソフト,Microsoft,公式解説書
-----


-----
CF50_CF_4: デビッド・J. クルグリンスキー (著), スコット ウィンゴ (著), ジョージ シェファード (著), David J. Kruglinski (原著), Scot Wingo (原著), George Shepherd (原著), デジタルアドバンテージ (翻訳)
CF50_URL: http://images-jp.amazon.com/images/P/4891000503.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4891000503/sorehabooks-22
CF50_CF: 日経BPソフトプレス
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Linux 怒濤のQ&A
BASENAME: linux_怒濤のqa
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 05/25/2004 08:35:55 AM
TAGS: Linux,コマンド
-----
BODY:
すべてのLinuxディストリビューションに共通のQ&Aが載っています。ログイン・ログアウトに関するQ&Aから基本コマンド、インストール、カーネル、ネットワークに関するQ&Aまで一通りのことが書いてあります。
-----
EXTENDED BODY:
Linuxを使っていてわからないことがあれば、まずこの本を開きましょう。そうすればおそらく解答が載っている。それくらい一般的な問題点に関する答えが載っている。非常に情報量が多く、説明が丁寧な秀作だと思う。

コマンドに関するQ&Aからひとつ。例えばテキストの行数を鑑定する場合に空行を抜きたいという場合、

<pre class="console">cat hoge.txt | grep -v '^[]*$' | wc</pre>

とすればよい。

上記のコマンドにいたる道筋を順に追って説明しているのが、このQ&Aの丁寧なところだろう。決して冗長にならない程度に簡潔に説明しているにもかかわらず、Linux初心者にもわかりやすい。

Linuxを使う人にはおすすめの本だ。Webで検索すればよいと考えるかもしれないが、問題にぶちあたっと時に、ネットワークが常に使える環境にいるとは限りませんよ。

+ 「ディストリビューションとは?」について解説しているサイトです。Linux入門者でディストリビューションと聞いて「?」が浮かぶ人はこちらを参考にしてください。

<a href="http://linux.ascii24.com/linux/db/support/1999/11/11/172640-000.html" target="_blank" class="extlink">ディストリビューションとは(日刊アスキーLinux)</a>

+ 怒涛シリーズの第二弾、ネットワークに関する書籍が載っています。Linuxに限らず、すべてのネットワーカーにおすすめの本です。
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4871937984/sorehabooks-22" target="_blank" class="extlink">怒濤のLinuxネットワーク</a>

+ 怒涛シリーズを買いませんか？絶対損はないはず。超おすすめです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4871937984/sorehabooks-22/">怒濤のLinuxネットワーク</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4871937984/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4871937984.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ぱぱんだ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4871937984&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Linuxネットワーク初心者向け<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4871937984/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4871937356.09.MZZZZZZZ.jpg" border="0" alt="Linux 怒濤のQ&A">
-----
KEYWORDS:
Linux,怒涛,Q&A,ネットワーク
-----


-----
CF50_CF_4: ぱぱんだ (著)
CF50_URL: http://images-jp.amazon.com/images/P/4871937356.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4871937356/sorehabooks-22
CF50_CF: エーアイ出版
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Rubyプログラミング入門
BASENAME: ruby
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/25/2004 08:18:39 PM
TAGS: Ruby
-----
BODY:
まず、Rubyの大まかな形がわかって、それから細部が鮮明になっていく。そんな感じでこの本は進んでいきます。後半以降はリファレンスとして使えるし、前半だけで大体Rubyを使えるくらいまでなれるでしょう。Ruby自体、それほど厄介な言語でもないですし、この本を読めば大半はマスターできると思います。
-----
EXTENDED BODY:
RubyはPerlと違い、オブジェクト指向スクリプト言語です。オブジェクト指向であるので、最近のPerlの擬似オブジェクト指向表現と違いソースコードが読みやすいのが特徴です。まあ、プログラマによって読みやすいPerlのソースや、読みにくいRubyのコードになってしまうんですが・・・。

この本は、前半部分でRubyの文法について段階的に学び、後半はテキスト処理を重点にリファレンス的(?)な説明を行っています。
この本は、対象はRubyプログラミング初心者で、かつスクリプトを書いた経験がある人といったところでしょう。

後半部をリファレンス的に使えると書きましたが、実際は突込みが浅いので必要な情報を探しにくいかと思います。前半部も段階的に学ぶ方法をとっているので、局所的な項目(例えばクラスについてとか、正規表現の書き方とか)は探しにくいです。

Rubyを最初に学ぶなら、この本をおすすめしますが、この本を読み終わったらリファレンス的に使えて、他の良書に当たるのがいいかもしれません。

+ ということで、他の良書をおすすめします。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714531/sorehabooks-22" target="_blank" class="extlink">プログラミングRuby―達人プログラマーガイド</a>

+ オブジェクト指向Rubyの本家Webサイト

<a href="http://www.ruby-lang.org/ja/" target="_blank" class="extlink">オブジェクト指向スクリプト言語</a>

+ 達人プログラマーガイドを買いませんか?

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714531/sorehabooks-22/">プログラミングRuby―達人プログラマーガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714531/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894714531.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">デビット トーマス　アンドリュー ハント　David Thomas　Andrew Hunt　田和 勝<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714531&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714531/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4274063852.09.MZZZZZZZ.jpg" border="0" alt="Rubyプログラミング入門">
-----
KEYWORDS:
Ruby,プログラミング,入門,オブジェクト指向
-----


-----
CF50_CF_4: 原 信一郎 (著), まつもと ゆきひろ (監修)
CF50_URL: http://images-jp.amazon.com/images/P/4274063852.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4274063852/sorehabooks-22
CF50_CF: オーム社
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: プラグインSangam(サンガム)でペアプロ!!
BASENAME: sangam
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 05/26/2004 12:18:28 AM
-----
BODY:
Sangam(サンガム)とは、リモートでペアプログラミング(通称ペアプロ)をEclipse上で行うためのものだ。
Eclipseのプラグインとして提供されており、リモートでファイルロックと同期を取りながらペアプロを行うことができる。

ペアプロとは、2人1組でプログラミングする方法で、片方がドライバ(プログラミングする方)ともう一方がオブザーバ(見ているほう)という役割を行いながら進めていきます。詳しくは<a href="http://www.objectclub.jp/community/XP-jp/xp_relate/xp-intro" target="_blank" class="extlink">こちら</a>を参考に。

さて、Sangamの話に戻ります。このプラグインでペアプロを行う場合はインターネット越しでも使えるので、会社と自宅とでペアプロを行いたい場合もぜんぜん使えます。

設定項目も非常にわかりやすく、ローカルエリア内で使用する分には、パフォーマンスも気にならない。ネットワークが遅い環境で、サイズの大きなファイルをペアプロするとどうなるかはわからないです。

まずは、Sangamをダウンロードして、Eclipseにインストールしましょう。
-----
EXTENDED BODY:
+ Sangamのダウンロードはこちら

<a href="http://sourceforge.net/projects/sangam/" target="_blank" class="extlink">Sangam(サンガム)のダウンロード</a>

+ Eclipseのダウンロードとインストールはこちら(私はEclipse version2.1を使いました。)

<a href="http://www.eclipse.org/downloads/index.php" target="_blank" class="extlink">Eclipseダウンロード</a>

<a href="http://www.eclipsewiki.net/eclipse/index.php?%A5%A4%A5%F3%A5%B9%A5%C8%A1%BC%A5%EB" target="_blank" class="extlink">Eclipseインストール</a>

+ Sangamのインストールと設定はこちら(日本語解説)

<a href="http://eclipsewiki.net/eclipse/index.php?Sangam%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3" target="_blank" class="extlink">Sangamインストール/設定</a>

設定について少し補足します。まず、<strong>クライアント側のServer Pathの部分はローカルエリア内で使用する場合も必ず「http://」からはじめる。</strong>これはローカルエリア内で使用するときに結構忘れがちですが、「http://」から始まっていないとコネクションがつながりません。

また、<strong>実際の使用時はファイルはVSSやCVSなどのリポジトリを使用してまったく同じファイル(コメントの位置や行数までまったく同じ)でないと、ファイルの同期がおかしくなります。</strong>実際、行番号の違うファイルで行ったら、ドライバの操作している行と同一の行が編集されてしまい、意図しない部分に書き込まれるといったことがありました。

さて、実際に使ってみた感想ですが、非常に面白い。チャット機能がついていてネットワーク越しにペアプロしながらでも、会話ができます。チャットウィンドウは日本語文字も通るので心配なしです。

実際のプロジェクト運用時に使用できるほどまだまだ安全性等は足りないと思いますが、趣味で行う場合なんかは、仲の良い友達と隣同士なかよくペアプロなんかも絵になるんじゃないかと思います。

ペアプロはソースコードの品質をあげるのに非常に効果があるみたいです。実際<a href="http://www.objectclub.jp/community/XP-jp//" target="_blank" class="extlink">eXtream Programinng</a>(通称XP)では品質あがったという実績もあります。

これを機会にあなたも是非ペアプログラミングに挑戦してみるのはどうですか?

<h3>5/26追記：</h3>

このプラグイン、プログラミング講習会みたいなところでも使えるかもしれないですね。講師の人がオブザーバをやって、受講者の方々がそれぞれドライバーをやれば、マルチウィンドウでファイルを見つつ、受講者のソースコードをチェックすることができますよね。ペアプロ以外の使い方も色々できそうです。

+ ペアプロの指南書がAmazonから出ています。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716992/sorehabooks-22" target="_blank" class="extlink">ペアプログラミング―エンジニアとしての指南書</a>

+ Eclipseの書籍でおすすめがあります。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325046/sorehabooks-22/">JavaデベロッパーのためのEclipse導入ガイド 改訂版【CD-ROM付】</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325046/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797325046.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">宮本 信二　飯田 伸一<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797325046&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Eclipseを使ってJavaの世界に入りたい人へ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Javaの基本を理解した後Eclipseを使おうと考えている人に<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325046/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ XPに興味がでたら、この本を買いませんか?

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798003743/sorehabooks-22/">図解入門 よくわかる最新XPエクストリームプログラミングの基本と仕組み―多様化する開発条件に対応するソフトウェア開発手法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798003743/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798003743.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">畑田 成広　樋口 博昭<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798003743&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />わかりやすいです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />XPを理解しやすい１冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ＸＰ入門書にぴったり<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798003743/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Sangamでペアプロ">
-----
KEYWORDS:
Sangam,プラグイン,Plugin,ペアプロ,ペアプログラミング,Eclipse,エクリプス,XP,エクストリームプログラミング
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Javaクックブック―Java開発者のためのレシピ集
BASENAME: javajava
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/26/2004 04:10:21 AM
TAGS: Java,クックブック
-----
BODY:
文句なしのおすすめ書籍です。Javaの開発者には聖書のような存在になること間違いなしの本です。
Javaプログラミングにおける「こんなときはどうしよう?」や「あれはどうやればいいんだっけ?」という言葉が、確実に少なくなる逸品です。
-----
EXTENDED BODY:
この本は、CookBook(通称お料理本)のJava版です。このほかに<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873110378/sorehabooks-22" target="_blank" class="extlink">Perlクックブック</a>なんかもでています。各章毎に、レシピと名のついた「こんなときはどうする?」といったときの解決法(多くはサンプルコード)が載っています。

オライリーから出す本だけあって、内容が非常に濃いです。入門書やガイドブックの類ではなく、純粋にリファレンスとして使うための本です。ただし、それでも一通りは通読することをおすすめします。サンプルコードが非常に洗練されていて、業務でプログラミングするときにもほとんどそのまま使えてしまいます。

サンプルのソースコードはほとんどが完全な形で載せてあり、コメントも非常に丁寧に書かれています。良いソースコードの例とも言えるでしょう。

コンパイル・デバッグから始まり、文字列の料理、正規表現、数値、日付/時刻、データ構造(配列やコレクションクラス)、オブジェクト指向における技法、IO、ディレクトリ/ファイル操作、シリアル/パラレルポート、グラフィックス/サウンド、GUI、国際化と地域化、ネットワーク、ソケット、アプレット、サーブレット/JSP、電子メール(JavaMail)、データベースアクセス(JDBC)、XML、分散(RMI)、パッケージ/JAR、スレッド、コラム...と考え付くほとんどすべての標準JAVAプログラミングを網羅しています。

説明文も癖はなく、丁寧に書かれています。さすがオライリー出版という感じです。個人でプログラミングするときのスキルアップに、業務でプログラミングするときの問題解決に本書をおすすめします。

+ Perl の料理本もでています。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873110378/sorehabooks-22/">Perlクックブック―Perlの鉄人が贈るレシピ集</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873110378/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4873110378.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">トム クリスチャンセン　ネイザン トーキントン　田和 勝<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873110378&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />購入して良かった<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />役立つサンプルテンコ盛<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Perlらしさが全面に出てる本ですね。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />実例がたくさん<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873110378/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4873110955.09.MZZZZZZZ.jpg" border="0" alt="Javaクックブック―Java開発者のためのレシピ集">
-----
KEYWORDS:
Java,クックブック,料理本,レシピ,開発者
-----


-----
CF50_CF_4: イアン・F. ダーウィン (著), Ian F. Darwin (原著), 宇野 浩司 (翻訳), 豊福 剛 (翻訳)
CF50_URL: http://images-jp.amazon.com/images/P/4873110955.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4873110955/sorehabooks-22
CF50_CF: オライリー・ジャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: サーバーサイドJavaアンチパターン
BASENAME: java_5
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/27/2004 12:04:13 AM
TAGS: J2EE,Java,アンチパターン
-----
BODY:
「反面教師」という言葉を聞いたことがあると思います。悪い見本を見せて、良い行いをしてもらおうというものです。本書はサーバーサイドJavaプログラミングにおける、「反面教師」です。

この本の対象読者はJavaプログラミング中級者からアーキテクト担当、システム設計者などです。Javaプログラミングを始めて間もない人や、サーバーサイドプログラミングを始めて行う人には読みこなすのは困難です。
-----
EXTENDED BODY:
アンチパターンの名のとおり、悪いパターンの例をカタログにまとめ、それについてどの点が悪いのかを説明し、アンチパターンにおちいる原因とアンチパターンを適用した場合の結果について載せてあります。

当然、改善例も載っているので、自分の設計したシステムやアーキテクチャがアンチパターンにはまっている場合の手助けになります。

本書で扱っているアンチパターンのカテゴリは、サーブレット、JSP、キャッシュ、メモリー、接続リソース、Bean(EJB)、コーディング習慣、スケーラビリティです。それぞれについて、悪い点、パターンの原因、結果、解決策、リファクタリングの5つが載っています。

本書から、ひとつ例を簡単に説明します。

<h3>アンチパターン：Monolithic JSPs</h3>

モデルとビューの分離(MVC)がないプログラムですべてのコードをJSPに書いている。メソッドやクラスの定義、コントローラ、JSPを分けてソースコードを書くよりも、JSPにすべて書いたほうが早く簡単にできる。しかし、これでは保守性が著しく下がってしまう。

<h4>解決策：リファクタリングして、MVCにする</h4>

<ol>
  <li>コントローラオブジェクトを作る。</li>
  <li>動的コンテンツを作る重要な領域を特定し、コマンドにする。</li>
  <li>JSPでは、コマンドごとにBeanを作る。</li>
  <li>モデルの更新や初期化を行うコアロジックを特定し、クラス化する。</li>
  <li>コントローラでコマンドを初期化し、コマンドを実行する。</li>
  <li>コマンドからのレスポンスをJSPに転送し、画面を表示する。</li>
</ol>

上記は、非常に簡単に要約しました。実際はそれぞれのカテゴリごとに3〜4のアンチパターンを紹介し、補足説明、アンチパターンの背景などを織り交ぜながら説明しています。

本書の特徴は、アンチパターンをカテゴリにわけ、必要なときに参照しやすくした点にあります。納得できる部分が多く、実際の開発においても気をつける点がよくわかりました。本文もわかりやすく、図やサンプルコードが豊富に載っているので明快です。サーバーサイドプログラマーにおすすめです。

+ デザインパターンはアンチパターンの正常版です。こちらの本がおすすめです。

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797316462/sorehabooks-22" target="_blank" class="extlink">Java言語で学ぶデザインパターン入門</a>

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797311126/sorehabooks-22" target="_blank" class="extlink">オブジェクト指向における再利用のためのデザインパターン</a>

+ MVC(Model-View-Controller)アーキテクチャに興味がある人はこちら。

<a href="http://www.hyuki.com/yukiwiki/wiki.cgi?MVC" target="_blank" class="extlink">MVCとは...</a>

+ 関連商品を買いませんか?

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/">J2EEパターン―明暗を分ける設計の戦略</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894714345.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ディーパック・アラー　ジョン・クルーピ　ダン・マークス　ウルシステムズ株式会社　中野 明彦<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714345&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ EJB アンチパターンに関してはこちら

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281841/sorehabooks-22/">EJBアンチパターン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281841/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4822281841.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Bruce Tate　Mike Clark　Bob Lee　Patrick Linskey<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822281841&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は最高だけど翻訳が ...<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281841/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ J2EE アンチパターンに関してはこちら

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281981/sorehabooks-22/">J2EEアンチパターン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281981/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4822281981.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ビル ダドニー　ジョセフ クロザック　スティーブン アズベリー　ケビン ウィトコフ　Bill Dudney　Joseph Krozak<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822281981&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281981/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822281574.09.MZZZZZZZ.jpg" border="0" alt="サーバーサイドJavaアンチパターン">
-----
KEYWORDS:
サーバーサイド,JAVA,アンチパターン,デザインパターン
-----


-----
CF50_CF_4: ブルース・A. テイト (著), Bruce A. Tate (原著), トップスタジオ (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/419Q1BSPT3L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4822281574/sorehabooks-22
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 15分で知ったかぶりWebService
BASENAME: 15webservice
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 05/27/2004 02:15:12 PM
-----
BODY:
15分でWebServiceについて、知ったかぶりできる知識をまとめておきます。

<h3>Web Serviceとは</h3>

Webサービスとは最近流行の技術の一つです。実は、Webサービスの定義は結構曖昧で、その人や、その時々によってまちまちです。そこで今回はWebサービスを以下のように定義します。

<dl>
<dt>Webサービスとは</dt>
<dd><b>「コンピュータが利用可能な、ネットワーク上のソフトウェアコンポーネント」</b>。「コンピュータが利用可能」、「ネットワーク上」、「ソフトウェアコンポーネント」という3つのキーワードがWebサービスの特徴</dd>
</dl>
-----
EXTENDED BODY:
<h2>コンピュータが利用可能</h2>

コンピュータが利用可能とはどういう意味でしょうか。たとえば、Googleの検索サービスを例にとって解説します。
たとえば、Googleの検索サービスを使うには、Googleのサイトにアクセスして、検索を行う必要があります。その場合、キーワード欄にはユーザが入力して検索を行います。これは先ほどのコンピュータが利用可能とは反対の、ユーザが利用する場合になります。

<img src="http://hamasyou.com/images/webservice/google1.gif" />

対して、コンピュータが利用するというのは、例えばユーザが自分のホームページからGoogleの検索機能を呼び出して、結果を加工して表示するような場合です。

<img src="http://hamasyou.com/images/webservice/google2.gif" />

「加工して」というのがポイントで、Webサービスによって取得した情報は、そのまま利用することも、データを加工して利用することもできます。

さて、Googleの検索機能を呼び出すには実際にはどのようにすればいいのでしょうか?  どのコンピュータからも利用してもらうには、インターフェースを決めないといけません。そのインターフェースとなるのが「<a href="http://e-words.jp/w/WSDL.html" class="extlink" target="_blank"><b>WSDL</b></a>」というものです。

詳しくは別の機会に解説しようと思いますが、WSDLとは、Webサービスのインターフェースを記述するための言語です。XML形式の言語になっています。WSDL文書には、利用したいWebサービスがどこにあるのか、Webサービスを利用するために、どんなフォーマットのメッセージをやり取りするのか、どんなプロトコルに乗せてメッセージを送受信するのか、などの情報を記述します。

WSDLによって定義されたWebサービス仕様をもとに、自分のホームページ上で、Googleの検索機能を利用することができるようになります。

<h2>ネットワーク上のリソースを使う</h2>

Webサービスを定義するときに出てきた2つ目のキーワード「ネットワーク上」ですが、これはどういうことかといいますと、Webサービスはネットワーク上に置かれたサービスであるということです。

サービスの提供者（前回の例で言うと Googleの検索機能を提供する者）がサービスをネットワーク上に公開します。
ネットワーク上といったのは、例えばインターネットに公開するサービスと、イントラネット上で公開するサービスといったように、用途によってサービスの公開する範囲を決められるということです。

<img src="http://hamasyou.com/images/webservice/soap1.gif" />

さて、先ほど、「WSDL」の説明で出てきた、どんなフォーマットのメッセージをやり取りするのかという話がありました。Webサービスはサービスの提供者とサービスの利用者がメッセージをやり取りすることで成り立ちます。このメッセージのフォーマットを定めた規格が「<strong><a href="http://e-words.jp/w/SOAP.html" class="extlink" target="_blank">SOAP</a></strong>」です。このSOAPの規格に準拠したメッセージをSOAPメッセージと呼びます。SOAPメッセージはXML形式で記述されます。

SOAPは、プラットフォーム非依存のメッセージプロトコルになっています。 基本的にSOAPの規格はメッセージのフォーマットを定めているだけです。したがって、SOAPは通信プロトコルに依存しません。通信プロトコルには、現在はオープンなインターネットプロトコルが使用されることが多いです。

<h2>ソフトウェアコンポーネント</h2>

Webサービスの3つ目のキーワードである「ソフトウェアコンポーネント」とは、いったいなんでしょうか。ソフトウェアコンポーネントとは、何らかのサービスを提供する部品の塊です。例えばGoogleでいうと、Googleの検索機能を提供するサービスのことを指します。

さて、Webサービスとしてあるソフトウェアコンポーネントを利用したい時、サービスをどのように調べればよいのでしょう?

そこで登場するのが「<a href="http://e-words.jp/w/UDDI.html" class="extlink" target="_blank"><b>UDDI</b></a>」です。UDDIとは、サービスを公開したり、発見したりする際の仕組みを定めた規格です。

現在のUDDI規格では、Webサービスのための専用のデータベースであるUDDIレジストリの仕様を定めています。UDDIレジストリ自体も実はWebサービスでできているので、Webサービスの登録、更新、検索の機能をSOAPメッセージを通して行うことができます。

<h2>まとめ</h2>

<ul><li>WebサービスにはSOAPというプロトコルを使用する</li>
<li>サービスのインターフェースはWSDLという言語を用いて定義する</li>
<li>サービスの検索はUDDIというレジストリ情報から検索する</li>
</ul>

これからのWebサービスの用途として、１）情報発信を目的にしたシステム ２）企業内アプリケーションシステム ３）グループ企業間のシステム連携 ４）サービスを動的に検索、結合 といったものがあげられます。

Webサービスは、まだ発展途上の技術であるため、ビジネス上必須であるがまだ確定されていない技術も少なくありません。例えば、トランザクション処理を必要とする業務システムに組み込む場合、Webサービス間のトランザクション処理の統一的な方法はまだ確立されていません。

これらの方法が確立されれば、現在のインターネットビジネスは画期的に変わるかもしれません。

+ WebServiceに関する書籍のおすすめを買いませんか?

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/">図解標準 最新Webサービス マスタリングハンドブック―XML、SOAP、WSDL、UDDIの基本から開発まで</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798007064.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">本 俊也<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798007064&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />読みづらい、サンプルが少ない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おすすめです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おすすめです。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Webサービス">
-----
KEYWORDS:
WebService,Webサービス,SOAP,WSDL,UDDI
-----

COMMENT:
AUTHOR: Blog 王決定戦（REN）
EMAIL: rensleo@blog-king.com
IP: 219.165.208.187
URL: http://www.blog-king.com/
DATE: 05/27/2004 05:11:09 PM
&nbsp;はじめまして。Blog王決定戦の管理人をやっているものです。突然恐れ入ります。この度、5月16日よりブログ筆者を募集していまして、お邪魔させていただきました。ブログを拝見させていただき大変興味深い内容だったのでコメントを入れた次第です。私は個人で今回はじめてサイトを開設しましたので、何かと行き届かない所もあると思いますが、一度当サイトへ足を運んでいただけたら幸いです。もし、楽しそうだと思っていただけたら、ご登録の方、宜しくお願いします。本当に突然失礼致しました。
-----

COMMENT:
AUTHOR: 管理人
EMAIL: hamasyou_sh@yahoo.co.jp
IP: 163.143.87.157
URL: http://hamasyou.com/
DATE: 05/27/2004 06:06:57 PM
管理人です。はじめまして。この度は、それはBooksにいらしてくださって、ありがとうございました。
Blog王決定戦の方は、ご登録させて頂きました。面白い企画だと思います。なんとかいい位置を取れるようにがんばります。
また、遊びに来てくださいね。
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Developing Applications with JAVA and UML -プログラマーのための統一モデリング
BASENAME: developing_applications_with_j
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 05/28/2004 03:52:25 AM
TAGS: Java,UML
-----
BODY:
JAVAとUMLと方法論をまとめて解説してある。「JAVAだけ」とか「UMLだけ」とか「方法論だけ」といった書籍を読むよりも断然実践的に使える。方法論とUMLを使ってJAVAで実装するところまで解説している本は、希少価値が高いと思う。これらのことというのはやはり別々で学んでも、実際に開発現場ではどうすれば良いのかがどうしても不透明になる。
-----
EXTENDED BODY:
本書では

<ul>
<li>方法論(開発プロセス)に統一プロセス(通称UP)</li>
<li>開発成果物となるドキュメントにUML</li>
<li>実装方法にJAVA</li>
</ul>

をそれぞれ使用して、一連の流れの中でソフトウェア開発というものを説明している。

<h2>本書の特徴</h2>

<ul>
<li>ソフトウェアプロセスについて学べる</li>
<li>UMLを使った要件収集、ユースケース、クラス図などの成果物の導き方を学べる</li>
<li>UMLで設計したクラス図をJAVAの実装に落とし込む方法を学べる</li>
<li>システムの設計をWebアプリケーションベースで学べる</li>
<li>JSP、サーブレット、JavaBeanの組み合わせとJSP、サーブレット、EJBの組み合わせを比較できる</li>
</ul>

<h2>感想</h2>

アプリケーション設計に関する著書は色々あります。開発プロセス(UP、RUP、XP、ウォーターフォールなど)に関する著書もたくさんあります。JAVAに関する著書もたくさんあります。

しかし、これらが実際に現場でどのように結びつくかについて説明している本はほとんどないのが現状です。そんな中、本書は体系だてて、実際のアプリケーション開発の最初から最後まで(開発終了まで)を模擬的に学べます。

本書の文字は、少し他の書籍と違って一回りほど小さいように感じます。そのため、内容のボリュームが多くなっており、非常にお買い得です。

サンプルアプリケーションとして作成するのは、良くあるWeb上でショッピングを行えるようにするものです。これを、JSP、サーブレット、JavaBeanで作成した後、JSP、サーブレット、EJBを使って作り直しています。実際にEJBを使った場合にどの程度差が出るのかを体験するにはもってこいです。

この本は斜め読みするには向かず、最初から最後まで通読して、しっかりと読んだほうが身につくと思います。読みこなしレベルは少し高めです。少なくともJAVAプログラムくらいは書いたことがあるのが前提だと思います。

<blockquote>

「今日のすべてのJAVAプログラマーに本書をささげます。」

<cite>本書の著者、ポール・R・リード・Jrより</cite>

</blockquote>

+ JAVAでWebアプリケーションを作りたいと持っている人にはこの本がおすすめです。サーブレット/JSPに関する技術情報を体系的に学べる良書です。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/">サーブレット/JSP プログラミングテクニック 改訂版</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797324120.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">今野 睦　戸田 和宏　藤村 浩士　高安 厚思　西川 麗<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797324120&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 統一プロセスとUMLに関して学びたい人にはこの本がおすすめです。非常に良書で、評判がよい本です。内容が超重要な項目ばかりで、目から鱗のバイブルです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/">実践UML―パターンによる統一プロセスガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894713861.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">クレーグ ラーマン　Craig Larman　依田 光江　依田 智夫　今野 睦<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713861&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLの実践的な使い方を包括的に理解できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4893699598.09.MZZZZZZZ.jpg" border="0" alt="Developing Applications with JAVA and UML -プログラマーのための統一モデリング">
-----
KEYWORDS:
JAVA,統一プロセス,UML,プログラマー,オブジェクト指向
-----


-----
CF50_CF_4: ポール・R. リード Jr. (著), 長瀬 嘉秀 (翻訳), 今野 睦 (翻訳), テクノロジックアート (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/410ETCM412L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4893699598/sorehabooks-22
CF50_CF: ビーエヌエヌ新社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: JavaとUMLで学ぶオブジェクト指向の考え方―オブジェクト指向分析・設計入門
BASENAME: javauml
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 05/28/2004 02:35:23 PM
TAGS: Java,UML,オブジェクト指向
-----
BODY:
オブジェクト指向でシステムの分析・設計を行う際にUMLを使う機会が増えてきました。こういった機会に出会うたびに、UMLとオブジェクト指向をどのように結びつけたらよいかと迷うときがあります。本書では、まずオブジェクト指向の考え方を学び、オブジェクト指向で設計・分析を行っていきます。
-----
EXTENDED BODY:
オブジェクト指向でシステム開発を行うと何が良いのでしょう?手続き型プログラミングと比べて、<strong>カプセル化</strong>、<strong>継承関係</strong>、<strong>ポリモーフィズム</strong>の3つが、一般的に言われるオブジェクト指向の重要な概念となります。

しかし、私はこれらよりももっと重要な概念、原理があると思います。それが、<strong>オブジェクトの責務とインターフェイス</strong>です。今日のオブジェクト指向ではこの責務とインターフェイスが重要になってきます。

本書ではクラスの責務とインターフェイスに重点を置いてオブジェクト指向設計を説明しています。

<h2>クラス設計についてのガイドライン</h2>

本書ではクラスを設計するときには<strong>パブリックインターフェイスを最小に保つ</strong>ことが重要だと述べています。パブリックインターフェイスとはクラスを使う側のオブジェクトが操作できるメソッドと考えると良いでしょう。これを最小に保つことで、クラスの責務が明確になり、カプセル化を促進させることができます。

当初は適切だと思われていたインターフェースが、不完全である場合もあります。対象法を本書では以下のように解説しています。

<blockquote>

クラスは最小のインターフェイスのみを提供すべきです。もし、インターフェースが不十分でも、継承を使ってインターフェースを用意に拡張できます。継承を使用すると、新しいクラスで既存のクラスを継承し、拡張されたインターフェースを備えたクラスを生成できます。

<cite>本書より</cite>

</blockquote>

もうひとつの重要な概念は、<strong>クラスは単一の責務(役割)のみをもつ</strong>というものです。<q>すべてのオブジェクトは常に自分の責任で行動すべきだ</q>と「<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797301198/sorehabooks-22" target="_blank" class="extlink">Javaパワープログラミング</a>」で提言されています。

<h2>本書の特徴</h2>

本書はオブジェクト指向の考え方を非常に丁寧に解説してくれます。「オブジェクト指向とは何なのか?」から「クラスの設計方法」、「再利用と保守性」、「フレームワーク」まで解説してくれています。

JavaとUMLは、オブジェクト指向を説明するための道具として使われている感じです。そもそも、オブジェクト指向の考え方自体は、実装方法や表現方法にとらわれないものであるため、本書のような解説方法がもっとも適切なように思います。

オブジェクト指向とは何なのかモヤモヤしている人にはおすすめです。

<h2>関連おすすめ書籍</h2>

+ オブジェクト指向をもっと実装レベルで学びたい人には非常におすすめ(実装言語はC++)

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/">憂鬱なプログラマのためのオブジェクト指向開発講座―C++による実践的ソフトウェア構築入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4881356194.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Tucker<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4881356194&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向の知識はこれからの常識に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />もやもやがスッキリ。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向をマスターしたいなら読むべし！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />誰に聞いても「名著」という本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />読んで損のない一冊<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ UMLを重点的に、オブジェクト指向設計の原則、パターンを学びたい人におすすめ

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/">実践UML―パターンによる統一プロセスガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894713861.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">クレーグ ラーマン　Craig Larman　依田 光江　依田 智夫　今野 睦<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713861&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLの実践的な使い方を包括的に理解できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798102121.09.MZZZZZZZ.jpg" border="0" alt="JavaとUMLで学ぶオブジェクト指向の考え方―オブジェクト指向分析・設計入門">
-----
KEYWORDS:
オブジェクト指向,分析,設計,JAVA,UML,開発プロセス
-----


-----
CF50_CF_4: マット ワイスフェルド (著), Matt Weisfeld (原著), 萩本 順三 (翻訳), 多摩ソフトウェア (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/515Q7JJZ2ML._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798102121/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: JNDIでオブジェクト管理
BASENAME: jndi
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 05/29/2004 04:05:57 AM
-----
BODY:
JNDIは、オブジェクトに名前をつけて管理するネーミングサービスの共通インターフェースを提供します。JAVAアプリケーションはこのJNDIを使って統一された手法でネーミングサービスにアクセスすることができます。

JNDI(Java Naming and Directory Interface)とは、Javaでネーミングサービスを扱うためのAPIを定めたものです。JNDIが定められた目的はアプリケーションがさまざまなネーミング/ディレクトリサービスを統一的に利用することができるようにすることです。

ネーミングサービスとは、名前とオブジェクトを関連付けて管理するサービスのことです。例えば 管理人 =&gt; 「ハマショウというオブジェクト」 というように、<strong>管理人</strong>という名前を<strong>ハマショウ</strong>というオブジェクトに結び付け、<b>管理人 = ハマショウ</b>という関連を作ることと説明できます。
-----
EXTENDED BODY:
このネーミングサービスの例として、データベースへのコネクションをプーリングして管理するデータソースに名前をつけて、WebアプリケーションからJNDIを利用してデータソースを取得するという手法が良く使われます。

<img src="http://hamasyou.com/images/jndi/jndi_call.gif" />

<h2>JNDIの仕組み</h2>

JNDIはService Provider Interface(SPI)とこれにアクセスするためのAPIを提供します。SPIは主にネーミング/ディレクトサービスを提供するサードパティのためのもので、このインターフェースにしたがっているサービスをAPIからアクセスすることができるようになります。

ディレクトリサービスとは、ネーミングをディレクトリ階層で管理するものです。

<img src="http://hamasyou.com/images/jndi/directory.gif" />

身近な例を出すと、ファイル管理システムがあります。Linuxを思い浮かべるとわかると思いますが、ルートディレクト(/)があり、その下にサブディレクトリ(etc, usr, home)ディレクトリ、その下にさらにサブディレクトリとファイルが存在しています。index.htmlファイルにアクセスするにはLinuxのファイルディレクトリサービスを呼び出して、/home/hamasyou/index.html という名前でアクセスすることになります。

これが、ネーミング/ディレクトサービスの概要です。このようなサービスをデータソースの検索に利用したのが、先ほどの例であげたデータベース接続の取得などになります。

<h2>JNDIの用語</h2>

JNDIに出てくる用語として名前、コンテキスト、イニシャルコンテキスト、名前空間、ディレクトサービスというのがあります。

<dl>
<dt>名前</dt>
<dd>
オブジェクトを識別するためのものです。ネーミングサービスはこの名前を使ってオブジェクトを管理します。
</dd>
<dt>コンテキスト</dt>
<dd>
名前とオブジェクトを結びつけた集合をコンテキストといいます。ファイル管理の例で言うところの、ディレクトリに当たります。コンテキストには、サブコンテキストを含めることもできます。ネーミングサービスはこのコンテキストからオブジェクトを取り出します。
</dd>
<dt>イニシャルコンテキスト</dt>
<dd>コンテキストルートのことです。ファイル管理の例で言うところの、ルートディレクトリになります。このイニシャルコンテキストから、ネーミングサービスはオブジェクトの検索を始めます。
</dd>
<dt>名前空間</dt>
<dd>コンテキストの集合、つまりひとつのディレクトリサービスを識別するものが名前空間となります。</dd>
<dt>ディレクトリサービス</dt>
<dd>
ネーミングサービスの多くはディレクトリサービスを提供しています。このディレクトリサービスはオブジェクトに名前をつけて管理するだけでなく、属性をつけることもできます。これも、ファイルシステムを思い浮かべればよいでしょう。ファイルには日付やアクセス許可などの属性がついています。
</dd>
</dl>

<h2>JAVAでのコーディング例</h2>

こちらのサイトで詳しく説明しているので、ご覧ください。

<a href="http://www.hellohiro.com/jndi.htm" target="_blank" class="extlink">JavaでHelloWorld JNDI編</a>

<h2>まとめ</h2>

JNDIはネーミング/ディレクトリサービスにアクセスするための統一的な方法を提供します。また、アクセスするだけでなく、オブジェクトの格納も行うことができます。これらのネーミング/ディレクトリサービスは、サードパティから入手することができます。

例えば、WebアプリケーションでデータソースをJNDIで取得するネーミング/ディレクトリサービスは、Tomcatなどに実装されています。

ネーミング/ディレクトリサービスを使って、アプリケーションに統一的なオブジェクトアクセスの方法を導入することで、別の環境に移った場合でも、ソースコードを変更することなく、環境の整備だけで対処することができます。ネーミング/ディレクトリサービスの種類はたくさんあるので、探してみるのも面白いでしょう。

<h2>参考</h2>

+ JNDIを使ってHello Worldを表示させるもの。詳しく書いてあって、サンプルを打ち込むだけでも良くわかります。

<a href="http://www.hellohiro.com/jndi.htm" target="_blank" class="extlink">JavaでHelloWorld JNDI編</a>

+ JNDIを使って、JDBCコネクションプーリングを行う手順を説明しています。(Web+Tomcat)

<a href="http://www.atmarkit.co.jp/fjava/javatips/004container003.html" target="_blank" class="extlink">@IT: JNDI活用でデータソース管理を一元化する</a>

+ JDBC接続をDataSouceで管理する方法

<a href="http://www.hellohiro.com/datasource.htm" target="_blank" class="extlink">JavaでHelloWorld DataSource編</a>

+ JNDIだけでなく、J2EEで使われている技術全般に関して説明しています。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756144209/sorehabooks-22/">J2EEプログラミング講座</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756144209/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756144209.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">宇野 るいも　arton<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756144209&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756144209/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="JNDIでオブジェクト管理">
-----
KEYWORDS:
JNDI,J2EE,ネーミングサービス,ディレクトリサービス,コンテキスト
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: ひとりでできるJava実践入門
BASENAME: java_6
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 05/30/2004 03:11:52 PM
TAGS: Java,入門書
-----
BODY:
<blockquote>

本書が一般的なJavaプログラミングの入門書と違うのは、Javaのオブジェクトの取り扱いに主眼を置いていることである。Javaの基本事項の修得には、それほど多くの時間を費やさない。むしろ過半数の時間を、より実践的なJavaプログラミングに割り当てる。そして、その過程では、Javaを使って基本的なアルゴリズムの実践方法を学んでいく。この意味で、本書は、Javaの再入門により適しているといえる。

<cite>本書 『はじめに』より</cite>

</blockquote>
-----
EXTENDED BODY:
<h2>本書の特徴</h2>

本書はより実践的な内容に重点的に解説しています。実践的というのは、例えば java.util パッケージのリストや、ハッシュマップ、ツリー、セットなどの使い方を学べる点です。

他には、文字列の正規表現であったり、アルゴリズム(挿入ソート、バブルソート、クイックソート、シェルソート)や、java.io パッケージの使い方であったりします。。

実際のプロジェクトなどで非常に基本的な部分を学べる感じになっているので、初心者が読むというよりは、「Javaの基本文法はマスターした」というレベルの人におすすめです。

<h2>おすすめな点</h2>

それぞれの章にたいしていくつかサブトピックスがあるという構成ですが、サブトピックスを学ぶための実際のソースコードが非常に多いのが特徴です。

何かを説明するときには例を出すとわかりやすいと思いますが、本書ではその例が実際のソースコードになっています。

説明が非常に丁寧で、重要なキーワードは太文字になってたりして、何が重要なのかということが視覚的にわかっていいと思います。

<h3>ここがちょっとね・・・</h3>

まず、本書は図が非常に少ないです。文章で説明していることは二度三度と解説していますが、図による視覚的情報が少なすぎるかなと思いました。プログラマーならば、図よりも実際のソースコードの方が役に立つ場合もあると思いますが、やはり図を使ったほうが、説明がすっきりする部分も多々あるように思いました。

本書は他の入門書と比べると厚さがあります。この厚さは、ところどころにある Java のメソッドの説明が原因のように思います。Java には、JavaDocというJavaのクラスを詳しく説明したドキュメントがあります。これを読めばわかるようなことまでわざわざ説明してるので、その部分はカットしても良かったかと思います。

<h2>まとめ</h2>

図が非常に少ないという短所がありますが、文章による説明が非常に詳しくてわかりやすいです。実際のプログラミングの基礎となる部分の解説が主となっているので、「はじめに」でもあるように Java の再入門に最適だと思います。。

「Javaって何なんだろう?」、「Javaがわからなくなってきた」という人に是非本書をおすすめしたいです。
-----
EXCERPT:
<img src="http://ec3.images-amazon.com/images/I/51Z9BKSWFML._SL500_AA300_.jpg" border="0" alt="Javaデザインパターン徹底攻略">
-----
KEYWORDS:
Java,ひとりでできる,実践入門,プログラマー
-----


-----
CF50_CF_4: 柏原 正三
CF50_URL: http://ec3.images-amazon.com/images/I/51Z9BKSWFML._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774116963/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:
<table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEJava%E5%AE%8C%E5%85%A8%E5%85%A5%E9%96%80-%E6%A8%99%E6%BA%96%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC%E3%82%BA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E6%9F%8F%E5%8E%9F-%E6%AD%A3%E4%B8%89/dp/4774114626%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774114626" target="_blank">はじめてのJava完全入門 (標準プログラマーズライブラリシリーズ)</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEJava%E5%AE%8C%E5%85%A8%E5%85%A5%E9%96%80-%E6%A8%99%E6%BA%96%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC%E3%82%BA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E6%9F%8F%E5%8E%9F-%E6%AD%A3%E4%B8%89/dp/4774114626%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774114626" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51ZHNYZJMML._SL160_.jpg" border="0" alt="はじめてのJava完全入門 (標準プログラマーズライブラリシリーズ)" /></a></td><td valign="top"><font size="-1">柏原 正三 <br /><br />技術評論社  2002-04<br />売り上げランキング : 547400<br /><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-5.gif" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" />おかしい、、。アマゾンの評価がまちまち。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif" alt="star" />作者の意図がわからない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="star" />初めての人向きではない<br /><br /><a href="http://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEJava%E5%AE%8C%E5%85%A8%E5%85%A5%E9%96%80-%E6%A8%99%E6%BA%96%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC%E3%82%BA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E6%9F%8F%E5%8E%9F-%E6%AD%A3%E4%B8%89/dp/4774114626%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774114626" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その1:Adapterパターン
BASENAME: 実践デザパタその1adapterパターン
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 05/31/2004 12:13:30 AM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。GoFの23のパターンが有名です。

デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

最初は、仕様の違いを吸収する目的で使われる、<strong>Adapter</strong>パターンです。
-----
EXTENDED BODY:
<h2>Adapterパターン</h2>

<p class="option">Adapterパターンは、仕様の違い(インターフェースの違いとも言う)を吸収する目的で使われるパターンです。</p>

<img src="http://hamasyou.com/images/adapter/adapter.gif" alt="Adapterクラス図" />

例えば、Javaにはプリミティブ型と呼ばれる非オブジェクト型の存在があります。intやshort、long、byte、float、doubleなどです。これをListに追加するとき、Javaのリストはオブジェクト型しか引数に取ることができないので、直接は格納することができません。

この場合、おそらくint → Integer、double → Double といった感じで、オブジェクト型のクラスを使うことになると思います。JavaでAdapterパターンを使用したよい例が、以上のような例です。

これが仕様の違いです。このような時、Adapterパターンを使って、仕様の違いを吸収します。
Adapterパターンは、別名ラッパーとも呼ばれます。

<h2>パターンの適用タイミング</h2>

このパターンは仕様の違いを吸収するだけでなく、Adapterとなるクラスを介して、層を増やすことができます。<strong>一般に層を増やすと、変更に強くなり、保守性が高まります。</strong>

<strong>サードパティ製品、例えばExcelをJavaから操作できるようなライブラリ、をプロジェクトで使う場合</strong>などに、Adapterパターンを使うことができます。サードパティ製品と、プロジェクトドメインのクラスとの間にAdapterを噛ますことで、層を増やし、変更に強くすることができます。

また、<strong>サードパティによって提供されている機能の中に、たまたま必要な機能がほんの少し足りない場合</strong>など、Adapterパターンで実装を隠してしまえば、サードパティ製品を利用している他のところと統一的にコーディングすることができます。

もうひとつ、<strong>ソースコードを直接いじることができないのに機能の追加や呼び出し先の変更を変更する必要がある場合。</strong>

例えば、すでに稼働中のアプリケーションで、ある機能を試しに別の機能に変更してみたい場合などがそうです。この場合は、稼働中の機能と共通のインターフェースを実装したAdapterが別の機能を呼び出すようにするといった使い方ができます。

<ul>
<li>サードパティによって提供されるライブラリを使う場合</li>
<li>統一的なインターフェースを使いたいのだが、ほんの少しだけ機能が足りない場合</li>
<li>ソースコードに手を入れられないのだが、機能追加、機能変更を行いたい場合</li>
</ul>

の内のどれか一つに当てはまる場合、このパターンを使えるタイミングかもしれません。

<h2>実装サンプルと参考文献</h2>

Adapterパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;)

+ TECHSCORE(Adapterパターン)

<a href="http://www.techscore.com/tech/DesignPattern/Adapter.html" target="_blank" class="extlink">TECHSCORE</a>

+ デザインパターンのお勧め書籍

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Adapterパターン">
-----
KEYWORDS:
デザインパターン,Adapter,アダプター,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その2:Factory Methodパターン
BASENAME: -2factory_method
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 05/31/2004 01:11:02 PM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。GoFの23のパターンが有名です。

デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

今回は、インスタンスを生成する責務を切り出した、<strong>Factory Method</strong>パターンです。
-----
EXTENDED BODY:
<h2>Factory Methodパターン</h2>

<p class="option">Factory Methodパターンは、生成するインスタンスの種類が多くなりそうな場合に、
インスタンス生成の責務を外に切り出して、保守性を高めるパターンです。</p>

<img src="http://hamasyou.com/images/factory_method/factory_method.gif" alt="Factory   Methodのクラス図" />

例えば、ショッピングサイトシステムを作っているとしましょう。このショッピングサイトでは、現在では5種類の商品しか販売していないのですが、この先商品の種類が増える可能性があります。しかし、どのような種類の商品が増えるかはわかりません。

この、<strong>将来的に種類が増えるかもしれないが、今はまだわからない</strong>といった状況でよく使われれるパターンです。

Factory Methodパターンを使うと、インスタンスの生成処理で既存のプログラムを修正することなく、新しい種類(例えば本とか、コンピュータといったカテゴリのこと)を追加することができます。

<dl>
<dt class="info">開放・閉鎖原則</dt>
<dd>ただし、インスタンス生成のプログラムは、新規に作る必要があります。既存のコードを修正せずに、新しいコードで修正を行えるように設計することを、<strong>開放・閉鎖原則(Open・Closed Principle)</strong>といいます。</dd>
</dl>

<h2>パターンの適用タイミング</h2>

このパターンは、主に、<strong>インスタンスの種類が将来的に増えそうな場合</strong>に使われます。

もうひとつは、<strong>コンストラクタではない場所でインスタンスの生成を行いたい場合(遅延ロード)</strong>に使えます。コンストラクタを直接呼ばせたくはないが、インスタンスは作成したい時がこの例です。

他には、<strong>ポリモーフィズムを使いたいのだが、インスタンスの生成は共通化したい場合</strong>に使います。

<pre class="code"><code><span class="comment">/* Staffというスーパークラスがあり、AccountantクラスとSalesmanクラスと、
 * Developerクラスがあるとする。*/</span>
Staff staff = <span class="keyword">new</span> Accountant();
staff.calculateSalary();
staff = <span class="keyword">new</span> Salesman();
staff.calculateSalary();
staff = <span class="keyword">new</span> Developer();
staff.calculateSalary();
</code></pre>

上記の例は、Staffスーパークラスで、実際のサブクラスを受けて、ポリモーフィズムを使って、自分の給料を計算させるプログラムだと考えてください。ここでは、それぞれインスタンスをサブクラス名を使って生成しています。

これを、Factory Methodを使って書き換えると

<pre class="code"><code><span class="comment">/* Staffというスーパークラスがあり、AccountantクラスとSalesmanクラスと、
 * Developerクラスがあるとする。*/</span>
Staff staff = StaffFactory.createStaff(args[<span class="literal">0</span>]);
staff.calculateSalary();
</code></pre>

というように、サブクラスのインスタンス生成部を隠蔽することができます。

Factory Methodパターンには、もうひとつ重要な役割がありました。<strong>あるオブジェクトに関連するオブジェクトを、自身で作成させるというものです。</strong>

例えば、部品Aというオブジェクトは、ねじAというオブジェクトを必要とし、部品Bというオブジェクトは、ねじBというオブジェクトを必要とするとします。Factory Methodパターンを使うと、ねじA・ねじBを作成する責務を持つのは、それぞれ部品A、部品Bということになります。

<pre>
ねじ partA = 部品A.createPart();
ねじ partB = 部品B.createPart();
</pre>

Factory Methodパターンは

<ul>
<li>インスタンスの種類が将来増えそうな場合</li>
<li>コンストラクタではない場所でインスタンスを生成したい場合</li>
<li>サブクラスを指定せずにインスタンスを生成したい場合</li>
<li>対となるオブジェクトを関連するオブジェクトに生成させたい場合</li>
</ul>

に使えるパターンだと言えます。


<h2>実装サンプルと参考文献</h2>

Factory Methodパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;)

+ TECHSCORE(Factory Methodパターン)

<a href="http://www.techscore.com/tech/DesignPattern/FactoryMethod.html" target="_blank" class="extlink">TECHSCORE</a>

+ Open/Closed Principleについての解説

<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://homepage3.nifty.com/masarl/article/dp-ocp-2.html" target="_blank" class="uline">Open-Closed Principle とデザインパターン</a>

+ デザインパターンのお勧め書籍

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Factory Methodパターン">
-----
KEYWORDS:
デザインパターン,Factory Method,アダプター,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その3:Singletonパターン
BASENAME: 実践デザパタその3singletonパターン
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/01/2004 01:59:00 AM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。
デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

今回は、インスタンスを一つしか作らせたくない、<b>Singleton</b>パターンです。
-----
EXTENDED BODY:
<h2>Singletonパターン</h2>

<p class="option">Singletonパターンは、クラスのインスタンスを一つしか作りたくない、作らせたくない場合に使われるパターンです。</p>

例えば、アプリケーションの設定項目を保持するクラスやメッセージをつかさどるクラスのようなシステムに一つのインスタンスしか必要の無い場合に使います。Factory Methodパターンと一緒にも良く使われます。Factoryクラスはインスタンスを一つしか作る必要はないです。

<b>クラスのインスタンスが一つしか生成されないことを保証する場合</b>に使われます。メッセージをつかさどるクラスのインスタンスはシステムにたった一つだけしか生成してほしくは無いはずです。なぜなら、複数のインスタンスがいると、それぞれのインスタンスが異なるメッセージを保持する可能性が出てきてしまうからです。Singletonで実装しない場合もありえますが、ほとんどの場合、このようなときはSingletonパターンを使います。

Singletonパターンを適用するときに注意する点として、<b>インスタンスが一つしかないので不用意に状態を変更しないように気をつけなければなりません。</b>不用意に変更できるようにしてしまうと、思わぬところでバグが発生してしまう可能性があります。

<h2>パターンの適用タイミング</h2>

Singletonのインスタンスは、イメージ的には<b>staticメソッドのみを持つUtil系のクラスに状態を持たせたもの</b>と考えることができます。ということは、Util系のクラスを作りたいのだが、状態も持たせたい場合に使えるパターンだと言えます。

もうひとつは、<b>インスタンスを一つしか生成したくない、同じインスタンスであることを保証したい場合</b>に使います。メッセージ管理クラスのような、システムに一つしか必要なくかつ、いつでも同じインスタンスの状態でいて欲しいクラスに、このパターンを適用します。

つまり、<strong>Util系のクラスに状態を持たせたい場合</strong>、<strong>システムに一つだけ、常に同じ状態のインスタンスを保証したい場合</strong>に使えるパターンです。

<h2>実装サンプルと参考文献</h2>

Singletonパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;)

+ TECHSCORE(Singletonパターン)
<a href="http://www.techscore.com/tech/DesignPattern/Singleton.html" target="_blank" class="extlink">TECHSCORE</a>

+ Singletonパターンについての解説
<a href="http://www.tetras.co.jp/yada/j_java_singleton_r.htm" target="_blank" class="extlink">Singletonパターン</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Singletonパターン">
-----
KEYWORDS:
デザインパターン,Singleton,シングルトン,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その4:Template Methodパターン
BASENAME: -4template_method
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/01/2004 05:10:56 PM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

今回は、処理の順番を規制するためにつかう、<b>Template Method</b>パターンです。
-----
EXTENDED BODY:
<h2>Template Methodパターン</h2>

<p class="option">Template Methodパターンは、処理の流れがほとんど同じなんだけど、一部ちょっとだけ違うときに、その部分を入れ替えて使えるパターンです。</p>

<img src="http://hamasyou.com/images/template_method/template_method.gif" alt="Template   Method のクラス図" />

うーん、ちょっと説明がわかりにくそうですね。このパターンが使われている例としては、<a href="http://allabout.co.jp/career/swengineer/closeup/CU20030525A/" target="_blank" class="extlink">フレームワーク</a>があります。

メール送信のフレームワークがあるとします。

<pre>1. 送信先の宛先を設定する
2. メールのタイトルを設定する
3. メールの本文を設定する
4. メールを送信する</pre>

と、このような流れでメールを送信するとしましょう。普通のメールを送るには、この流れに沿ってメールを作成して、送信すればいいのです。が、HTMLメールを送信したい場合、「3. メールの本文を設定する」でHTML用のメール本文を作成する必要があります。

メール送信をクラスに割り当てたときには、PlainTextMailクラスとHTMLMailクラスの二つができてしまうことになります。この2つのクラスは、メールを送信するという機能は非常に似ていて、違うところとしては「3. メール本文を設定する」だけだとします。

このようなときに、Template Methodパターンを適用して、親クラスにAbstractTemplateMailクラスみたいなのを作って、メール配信の一連の処理は実装しておき、サブクラスのPlainTextMailクラスとHTMLMailクラスでは、メールの本文を作成する部分だけオーバーライドするといった手法がとれます。これでしたら、同じ機能(宛先を設定したりタイトルを設定する部分）でも、一度だけしか実装していないことになり、保守性がアップします。

<b>オブジェクト指向プログラミングでは、同じことは2度書かない(コピー&ペーストしない)という原則があります。</b>同じ処理は共通にまとめて、違う部分だけ実装するのが、良いプログラミングです。

Template Methodパターンは、まさにこの、<strong>共通化されている部分は定義しておき、違う部分だけをサブクラスで実装する</strong>という優れたパターンです。

<h2>パターンの適用タイミング</h2>

このパターンは、あらかじめ共通化できる部分を抜き出しておく必要があります。先ほどの例だと、メール配信の部分というのは共通化できるということが、設計段階でわかっていなければなりません。つまり、このパターンを使えるタイミングは、<b>共通化を行いたい処理が出てきた場合</b>といえるでしょう。

もうひとつは、<b>サブクラスで必ず実行して欲しい処理がある場合</b>です。Template Methodパターンの実装の仕方によって、サブクラスでオーバーライドしなければならないメソッドを制御することができます。

設計における注意点として、このパターンは処理の流れを抽象化したものであるので、あまりに流れを大まかに区切りすぎたりすると、サブクラスで実装するメソッドの単位が大きくなってしまいます。注意してください。

<strong>共通部分と差分部分が明確に区別でき、処理に流れがある場合</strong>、<strong>サブクラスで実装して欲しい処理がある場合</strong>上記の場合に、Template Methodパターンの適用をおすすめします。

<h2>実装サンプルと参考文献</h2>

Template Methodパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;)

+ TECHSCORE(Template Methodパターン)
<a href="http://www.techscore.com/tech/DesignPattern/TemplateMethod.html" target="_blank" class="extlink">TECHSCORE</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Template Methodパターン">
-----
KEYWORDS:
デザインパターン,Template Method,テンプレートメソッド,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その5:Compositeパターン
BASENAME: -5composite
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/02/2004 01:37:54 PM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

5回目は、再帰的な概念を表すことに使える<b>Composite</b>パターンです。
-----
EXTENDED BODY:
<h2>Compositeパターン</h2>

<p class="option">Compositeパターンは、複数のオブジェクトの集合を管理したい場合に使われるパターンです。</p>

難しい言い方をすると、「全体-部分」のモデルを同一視するパターンといえます。

<img src="http://hamasyou.com/images/design_pattern/composite.gif" alt="Compositeのクラス図" />

よくある例として、Windowsのフォルダとファイルがあります。フォルダが「全体」を表し、ファイルが「部分」を表します。フォルダの中にはまたフォルダがあり、その中にはまたフォルダがある...というような再起構造も持っています。

もう少し抽象度の高い例として、木があります。木には枝(全体)があり、枝には葉っぱがついているものもあれば、枝がまた伸びているものもあります。これもCompositeパターンの例です。

3つめの例として、階層構造があります。会社勤めの人はイメージがつくと思いますが、会社には「会社-部署-課-班」のような階層があると思います。これもCompositeパターンなのです。

つまり、Compositeパターンとは、<strong>再帰的、階層的な概念を簡単に扱う</strong>パターンといえます。

実装の段階でCompositeパターンの候補になるのは、リスト中のすべてのオブジェクトが<b>まったく等価</b>に取り扱われるものだけに限られます。リスト中からある条件のオブジェクトだけに処理を行うといった場合には、Compositeパターンは使うべきではありません。

<dl>
<dt class="info">ちょっと一言</dt>
<dd>Compositeパターンを適用すると、構造に柔軟性がでます。詳しい実装方法や、クラス図は参考文献を参照してもらいたいのですが、Compositeとなる「全体」とLeafとなる「部分」の間に、動的に階層を付け加えることができます。</dd>
</dl>

<h2>パターンの適用タイミング</h2>

Compositeパターンは、<b>再帰的構造をもつ場合</b>に考えることができます。Windowsのフォルダとファイルの例だと、フォルダに対して、サイズを計算させる場合、フォルダの中にあるファイルのサイズと、サブフォルダのサイズを求めます。そして、サブフォルダの中のファイルのサイズと...このように、再帰的に処理を行いたい場合に使えます。

<b>階層構造のあるシステムの場合</b>にも考えることができるでしょう。この場合も、再起構造と同じように考えられます。

<strong>再起的処理を施したい場合</strong>、<strong>階層構造(ツリー構造)で物事を管理したい場合</strong>、<strong>複数を表すオブジェクトと単数を表すオブジェクトを同じように扱いたい場合</strong>。これらの場合、Compositeパターンの適用を考えることができるでしょう。

<h2>実装サンプルと参考文献</h2>

Compositeパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。

ひとつだけ、このパターンを使う上で、実装に注意する点があります。「全体」と「部分」とを同じように扱うことを目的としてこのパターンを適用したときに、例外的に「部分」だけに持たせたいメソッドがあったらどうしましょう?

いくつか解答はあるのですが、Compositeパターンは共通インターフェースを「全体」と「部分」で使います。このとき、意図していない使われ方をした方には例外をスローするというのが
私が一番好きな方法です。参考文献の「オブジェクト倶楽部」のサイトを見ながら考えるとわかりやすいかも知れません (^^;

+ 日立ソフト(Compositeパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/composite.html" target="_blank" class="extlink">日立ソフト</a>

+ オブジェクト倶楽部(上から1/4位のところにCompositeパターンの解説有)
<a href="http://www.objectclub.jp/technicaldoc/pattern/DPforJavaProgrammers" target="_blank" class="extlink">オブジェクト倶楽部</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Compositeパターン">
-----
KEYWORDS:
デザインパターン,Composite,コンポジット,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Javaデザインパターン徹底攻略
BASENAME: java
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 06/03/2004 12:43:12 AM
TAGS: Java,デザインパターン
-----
BODY:
最近デザインパターンの使いどころについてのメモを取っている。デザインパターンは、どんなものがあるのかという知識とともに、実際に使いどころをかぎ分ける嗅覚が必要だと思っていいる。

本書は、デザインパターンをJavaで実装するときの実例と共に見やすい形でまとめている。

デザインパターンというのは、アプリケーション設計の一種の定石というか、先人の知恵をカタログ化したものです。
-----
EXTENDED BODY:
本書のネタ元は、<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/list.html" target="_blank" class="extlink">GoFデザインパターン一覧(日立ソフト)</a>です。

<h2>特徴</h2>

本書は、GoFのデザインパターンを非常に簡潔にまとめています。本のサイズもB5と小さいというのがいいです。

文章は非常に平易で、理解するのが簡単です。が、難点といえばソースコードが簡単すぎることです。プログラミングを始めたばかりのころ、HelloWorldを書いた覚えがある人はたくさんいると思います。そんなレベルのサンプルしか載っていません。(T T;)

付録として付いている、デザインパターンについての注意点が非常におすすめです。この部分を読むだけでもこの本は価値があると思います。

<h2>おすすめポイント</h2>

本書のお勧めポイントは、3つです。

<ul>
<li>個々のパターンのメリット・デメリットが簡単にわかる</li>
<li>本のサイズが小さく、薄いため、一気に読み進められる</li>
<li>内容的に薄いかもしれないが、付録だけでも読む価値有</li>
</ul>

デザインパターンについての本は、他にもたくさん出ていますが、
概要をつかむための最初の一冊としては、本書はうってつけかもしれません。

+ その他のデザインパターン書籍のお勧め

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">結城 浩<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797327030&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラマー必見でしょう<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソースコードが読める<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 必見の書籍だと思います。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">株式会社テクノロジックアート　長瀬 嘉秀<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798104450&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />デザインパターンをはじめるには最適な書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />分かりやすいGoFデザインパターンの説明<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774115797.09.MZZZZZZZ.jpg" border="0" alt="Javaデザインパターン徹底攻略">
-----
KEYWORDS:
Java,デザインパターン,オブジェクト指向,GoF,システム設計
-----


-----
CF50_CF_4: 日立ソフトウェアエンジニアリングインターネットビジネス部 (著)
CF50_URL: http://ecx.images-amazon.com/images/I/51SB77S4WAL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774115797/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その6:Decoratorパターン
BASENAME: -6decorator
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/03/2004 02:49:25 PM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

6回目は、機能拡張を統一的な方法で、自由に行うことができる<b>Decorator</b>パターンです。
-----
EXTENDED BODY:
<h2>Decoratorパターン</h2>

<p class="option">Decoratorパターンは、既存のクラスに機能を付け加えたい場合、
既存機能に、少しだけ修飾を加えたい場合に使われるパターンです。</p>

<img src="http://hamasyou.com/images/design_pattern/decorator.gif" alt="Decoratorのクラス図" />

Javaのクラスライブラリの例として、java.ioパッケージが最初に思い浮かびます。Javaには入出力(I/O)機能として、java.ioパッケージが用意されています。ファイルから一行ずつ読み取り、行番号をつけてファイルに書き込むという処理があるとします。

<pre class="code"><code><span class="keyword">import</span> java.io.*;
<span class="keyword">public</span> <span class="keyword">class</span> LineNumberAllocator {
  <span class="keyword">public</span> <span class="keyword">void</span> allocateLineNumber(String inFile, String outFile) 
      <span class="keyword">throws</span> IOException {
    LineNumberReader in = <span class="keyword">new</span> LineNumberReader(<span class="keyword">new</span> FileReader(inFile));
    PrintWriter out = 
      <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(outFile)));
 
    String line = <span class="keyword">null</span>;
    <span class="keyword">while</span> ( (line = in.readLine()) != <span class="keyword">null</span> ) {
      out.println(in.getLineNumber() + <span class="literal">":"</span> + line);
    }
    out.close();
    in.close();
  }	
}
</code></pre>
<div class="clear"></div>

4,5行目がDecoratorパターンが使われている部分です。FileReaderクラスの機能に行番号をつけるために、デコレートしているのが5行目です。FileWriterクラスのFile書き込み処理をバッファリングして、行ごとに書き出すためにデコレートしているのが6行目になります。

<b>Decoratorパターンは、機能の拡張を、「元となるオブジェクト + 自クラスの機能」という方法で、実装しています。</b>上記Javaでの例(太文字)の部分からなんとなく、雰囲気はつかめるかと思います。(newでオブジェクトを作り、機能拡張するクラスに渡している部分です。)

<h2>パターンの適用タイミング</h2>

Decoratorパターンは、すでにあるクラスに対して機能拡張を行うことを目的としています。オブジェクト指向に<b class="red">開放・閉鎖原則(Open・Closed Principle)</b>というのがあります。

クラスの拡張には開いていて、クラスの修正には閉じている。<b>つまり機能追加を自由にできるが、既存のクラスには修正を必要としない</b>というのがこの原則の意味するところです。Decoratorパターンは、まさにこの原則に則っています。

<strong>既存のクラスに機能を拡張したい場合</strong>、<strong>オブジェクトに修飾する形で、機能を付け加えたい場合</strong>に使えるパターンです。

<h2>実装サンプルと参考文献</h2>

Decoratorパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;

+ 日立ソフト(Decoratorパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/decorator.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/Decorator/index.htm" target="_blank" class="extlink">DECORATORの骸骨</a>

+ オブジェクト倶楽部(デザインパターン入門)
<a href="http://www.objectclub.jp/technicaldoc/pattern/DPforJavaProgrammers" target="_blank" class="extlink">オブジェクト倶楽部</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Decoratorパターン">
-----
KEYWORDS:
デザインパターン,Decorator,デコレータ,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その7:Iteratorパターン
BASENAME: -7iterator
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/04/2004 01:40:11 AM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

7回目、統一された方法で、集合オブジェクトに順番にアクセスする<b>Iterator</b>パターンのメモです。
-----
EXTENDED BODY:
<h2>Iteratorパターン</h2>

<p class="option">Iteratorパターンは、集合オブジェクトに順番にアクセスする方法を提供するパターンです。</p>

<img src="http://hamasyou.com/images/design_pattern/iterator.gif" alt="Iteratorのクラス図" />

Javaのクラスライブラリには、すでにIteratorというクラスが提供されています。<a href="http://msugai.fc2web.com/java/collection/CollectionsTips.html" target="_blank" class="extlink">コレクションフレームワーク</a>には、Iteratorパターンがいたるところで適用されています。

<b>このパターンの恩恵を受けるのは、配列を使うときよりもむしろ、集合体を扱うクラスを、自分で作ったときです。</b>自分で作成した集合体クラスにアクセスさせる場合に、それぞれ操作を提供すると思います。が、普通は提供する手段や方法はばらばらになってしまうのが常です。そんな時、このパターンを使うと、いろいろな集合体クラスに、順序良くアクセスさせる手段を統一的な方法で提供できます。

良い例が先ほどの、Javaコレクションフレームワークです。MapやList、Setなど、さまざまな集合オブジェクトへの順次アクセスは、すべて、Iteratorというインターフェースを使って行うことができます。

<h2>パターンの適用タイミング</h2>

<b>Iteratorパターンは、集合への順次アクセスを統一的に行うことを目的としています。</b>このパターンを実装するのは、独自クラスで集合クラスを作成したときくらいでしょう。

あとは、すでに提供されているIteratorの使い方を学ぶ程度だと思います。Javaでしたらコレクションフレームワークの基本的使い方を、C++でしたら、STL(Standard Template Library)の使い方をそれぞれ学ぶのが、このパターンを理解する近道だと思います。

<strong>独自クラスで集合体を作った場合</strong>、<strong>クラスの内部への順次アクセスの統一的手段を提供したい場合</strong>これらの場合に、Iteratorパターンの使用を考えてください。

<h2>実装サンプルと参考文献</h2>Iteratorパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;

+ 日立ソフト(Iteratorパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/iterator.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/Iterator/index.htm" target="_blank" class="extlink">ITERATORの骸骨</a>

+ TECHSCORE(Iteratorパターン)
<a href="http://www.techscore.com/tech/DesignPattern/Iterator.html" target="_blank" class="extlink">TECHSCORE</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Iteratorパターン">
-----
KEYWORDS:
デザインパターン,Iterator,イテレータ,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Java開発者のためのアンチデザインパターン
BASENAME: java開発者のためのアンチデザインパターン
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 06/05/2004 03:54:36 AM
TAGS: Java,アンチデザインパターン
-----
BODY:
本書は、Java開発者のためのデザインパターン入門である。アンチデザインパターンと銘打ってはいるが、アンチというよりもむしろデザインパターンを使わなかったときのはまりどころを、デザインパターンによって改善させる手段を解説したものである。
-----
EXTENDED BODY:
本書では、GoFの23パターンを、それぞれ解説している。デザインパターンを使わせるための例を、アンチパターンとして紹介し、その改善方法としてデザインパターンを紹介する方法がとられている。

<h2>特徴</h2>

解説に使われる画像が、アメリカンチックで好き嫌いが分かれるところだと思う。色使いも黒文字に、緑色のラベルなどが使われていて、新しい雰囲気をかもしだしている。

デザインパターンを使うタイミングや、注意点なども書かれていて中級者レベルの人にとっては、「AHA(アー)」と叫ぶ場面もあるかもしれないが、初めてのデザインパターンとして本書を選んだ人には、なんのこっちゃだろう。(^^;

<h2>おすすめポイント</h2>

本書でおすすめの点は、デザインパターンの解説よりもむしろ、アンチパターンとして解説されている、デザインパターンを使う背景の部分です。はっきり言って、デザインパターンの解説は、他の本を参考にしたほうがわかりやすいです。ソースコードも中途半端で、わかりやすいとは言いがたかったです。(+o+;)

ですが、所々にあるオブジェクト指向の考え方の解説は、デザインパターンの解説よりは役立ちます。例えば、オブジェクト指向では、「コピー&amp;ペーストは使わない」などの言葉は、完全な初心者には、心に響くことでしょう。

<h2>まとめ</h2>

結局、本書の対象読者は誰かということですが、完全な初心者でデザインパターンの概要を眺めるだけが目的の人か、中級者以上で、デザインパターンの知識があり、適用の背景を学びたい人が対象かなと思います。それ以外の人には、ちょっと合わなさそうです。

+ デザインパターンのおすすめはこちら

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">結城 浩<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797327030&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラマー必見でしょう<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソースコードが読める<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ GoF の本家デザインパターン集

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797311126/sorehabooks-22/">オブジェクト指向における再利用のためのデザインパターン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797311126/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797311126.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">エリック ガンマ　ラルフ ジョンソン　リチャード ヘルム　ジョン ブリシディース　Erich Gamma　Ralph Johnson<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797311126&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プロならば絶対にマスターすべき本です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向とはこのためにあったのか<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />デザインパターンを解説する本家本元<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />名著だが読みやすくはない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />C++ベース<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797311126/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 現場で使える即知識。いかがですか？

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798106976.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/">Javaプログラミングの処方箋</a><br />宇野 るいも ， arton<br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798106976"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://www.gihyo.co.jp/book/2002/403611/img403611.jpg" border="0" alt="Java開発者のためのアンチデザインパターン">
-----
KEYWORDS:
デザインパターン,アンチパターン,Java,使いこなす
-----


-----
CF50_CF_4: 安藤 利和 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/518BX7MXC3L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774114901/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その8:Bridgeパターン
BASENAME: -8bridge
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/06/2004 03:04:10 AM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

ついに、1/3を消化しました。
8回目は、機能の拡張と、実装の拡張を別々に管理する<b>Bridge</b>パターンのメモです。
-----
EXTENDED BODY:
<h2>Bridgeパターン</h2>

<p class="option">Bridgeパターンは、機能の拡張と実装の拡張を別々に管理するパターンです。</p>

Bridgeパターンは、少し複雑な部類のパターンに入るかと思います。このパターンの意図は、<b>機能のインターフェースと実装とを動的に切り替えたい場合や、拡張時のクラスの膨張を防ぎたいというものです。</b>

例えば、OSに依存するシステムを作るとします。現在は、WindowsとMacのみに対応するシステムだとします。このシステムで提供する機能として、「プリント」機能と「インターネット」機能があるとします。

<img src="http://hamasyou.com/images/bridge/bridge1.gif"   style="margin:10px" alt="クラス図1" />

通常は、このようなクラス関係で作成すると思います。「オペレーティングシステム」インターフェースが、機能のインターフェースです。「Windowsクラス」「Macintoshクラス」が実装のクラスになります。

開放・閉鎖原則に則ってこのクラスに機能を付け加えるとすると、「Windowsクラス」に「Windowsクラス改」、「Macintoshクラス」に「Macintoshクラス改」をそれぞれ付け加えるというような変更になります。

ここでは、「テレビを見る」機能が追加されました。

<img src="http://hamasyou.com/images/bridge/bridge2.gif"   style="margin:10px"  alt="クラス図2" />

このような変更を行っていくと、機能や実装が増えた場合に、クラスの数が膨大な数になってしまいます。

そこでこのBridgeパターンの出番というわけです。機能のクラスと実装のクラスをそれぞれ別々に管理して、クラスの増殖を防止します。

<img src="http://hamasyou.com/images/bridge/bridge3.gif"   style="margin:10px"  alt="クラス図3" />

機能のクラスと実装のクラスとで用意する操作が変わったことに注目してください。

「テレビを見る」機能は「表示する」と「通信する」という実装でできると仮定しています。

開放・閉鎖原則を満たすためには、実装のクラスを変更するのは避けなければなりません。実装のクラスが増える分には問題ないのですが、既存の実装を変更するような機能拡張は、原則を破ることになります。

つまり、<b>機能のクラスは、基本的に実装のクラスの操作の組み合わせでできる操作を拡張することになります。</b>実装のクラスで提供できない機能を拡張する場合は、実装のクラスに手を入れることになります。この辺は、<b>アプリケーションの要求や設計段階でクリアしておくべき問題となります。</b>

<h2>パターンの適用タイミング</h2>

<b>機能の拡張と実装の拡張を分けて考えるのがこのパターンでした。</b>新しい機能を追加しようとした場合に、実装を意識せずに機能拡張ができます。

どの実装で機能を満たせるかは知っている必要があります。実装を意識しないのは、OSの例で言うと、どのOS実装が使われるかを意識しないということです。

Bridgeパターンの注意点としては、<strong>機能の拡張は、実装のクラスの組み合わせでできるパターンに限られる</strong>があります。実装に手を加えなければ満たせない機能拡張は、Bridgeパターンの恩恵を受けるどころか、逆に修正の手間を必要としてしまう可能性があります。<b>実装クラスで提供されるインターフェースは、アプリケーション要求・設計時に洗い出しておく必要があります。</b>

<strong>機能拡張と実装拡張の組み合わせを動的に行いたい場合</strong>、</strong>サブクラスの作成を意図した組み合わせで管理したい(機能のクラスなのか実装のクラスなのか)</strong>これらの場合に、Bridgeパターンが使えると思います。

<h2>実装サンプルと参考文献</h2>

Bridgeパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;

+ 日立ソフト(Bridgeパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/bridge.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/Bridge/index.htm" target="_blank" class="extlink">BRIDGEの骸骨</a>

+ Mac Freaks(Bridgeパターン)
<a href="http://members.jcom.home.ne.jp/j-klein/java/dp-bridge.html" target="_blank" class="extlink">Mac Freaks</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Bridgeパターン">
-----
KEYWORDS:
デザインパターン,Bridge,ブリッジ,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: PHPプログラミング入門―PHPによるWebアプリケーション開発
BASENAME: phpphpweb
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/07/2004 12:19:08 AM
TAGS: PHP
-----
BODY:
PHPは、サーバーサイドスクリプトのひとつで、豊富な関数が標準で備わっているのが
特徴的です。言語は、C言語に非常に似ていて手続き型でプログラミングできます。
最近の風潮で、オブジェクト指向がもてはやされています。PHPはクラスを作成することもでき、
オブジェクト指向でプログラミングできる、非常に優れたスクリプト言語です。
-----
EXTENDED BODY:
本書は、PHP3を使った入門書です。この記事を書いている現在は、
最新バージョンが4.3.6(PHP4)で、PHP5 RC1が発表されたところです。
つまるところ、PHP3は、少し時代遅れの感があるということです。

しかししかし、PHPのバージョンがあがったところで、本書が良書であることには
変わりありません。<b>PHPの簡潔な説明と、関数のリファレンスが半分。PHPを使った
システム設計の解説が少しと、入門書にしては非常にボリュームがありながら、
そのバランスにはあっぱれとしか言いようがありません。</b>

PHPのバージョンが古いこともあり、関数リファレンスがそのままでは使えない部分があったりしますが、
入門書として、これほど完成された良書は珍しいと思います。
関数リファレンスといいながら、実はサンプルコードになっていて使い方が一目瞭然なのです。
PHP初心者が、そのままテキストに入力して実行できるところが、ニクイです。(^^)

<h2>特徴</h2>本書の特徴として下記のことが学べます。
<div class="ref"><dl style="margin:5px"><dt>■PHPの構文と関数の完全理解</dt><dt>■データベースアプリケーション開発のテクニック</dt><dt>■パフォーマンスの最適化のためのデザインと設計</dt><dt>■実践的で効率的なデバッグ</dt></dl></div>

本書からの役立ちそうな情報
<div class="ref">include関数とrequire関数はファイルへのパスを引数に取ります。
ファイルはPHPスクリプトと同じように解析されます。つまり、include・requireするファイルにも
PHPスクリプトを書くことができ、実行されるということです。
<b>require関数は、関数自体をPHP解析時にファイルと置き換えます。</b>
<b>include関数は、関数実行時に動的にファイルと置き換えます。</b>
この違いにより、例えばループ処理でファイル1、ファイル2、ファイル3を取り込みたい場合、
require関数では3つのファイルを静的に置き換えるのに対し、
<b>include関数は、ループ変数を使って、動的にファイルを置き換えることができます。</b>
<div class="code">require("ファイル1");
require("ファイル2");
require("ファイル3");

for ($i = 0; $i < 3; $i++) {
&nbsp;&nbsp;&nbsp;&nbsp;include("ファイル" . $i);
}
</div></div>


<h2>参考</h2>+ PHPのほぼすべての関数が載っています。(Webリファレンス)
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://php.planetmirror.com/manual/ja/funcref.php" target="_blank" class="uline">PHP関数リファレンス</a>

+ 日本PHPユーザ会
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://www.php.gr.jp/" target="_blank" class="uline">日本PHPユーザ会</a>


+ 他のPHPおすすめ書籍
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4871938956/sorehabooks-22/">Webプログラマのための目的別PHPハンドブック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4871938956/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4871938956.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">伊藤 博康<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4871938956&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />豊富なサンプルを収録<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />一番分かりやすい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Webアプリケーションを習得したい人にお勧めです<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4871938956/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ プロフェッショナルを目指すなら
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844314831/sorehabooks-22/">プロフェッショナルPHPプログラミング</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844314831/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4844314831.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジーザス カスタニェット　サシャ シュマン　ディーパク ベリアス　ハリッシュ ラワト　クリス スコロ　Jesus Castagnetto<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4844314831&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />教科書本の正道を行く。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />直訳が・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />良書だが、ネット上の時の流れは速い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />とてもわかりやすい本です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />PHPでアプリケーションを設計するために<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844314831/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894712253.09.MZZZZZZZ.jpg" border="0" alt="PHPプログラミング入門">
-----
KEYWORDS:
PHP,プログラミング,入門,Web,アプリケーション,リファレンス
-----


-----
CF50_CF_4: レオン アトキンソン (著), Leon Atokinson (原著), 玉川 竜司 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/519TQ1RYQ9L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894712253/sorehabooks-22
CF50_CF: ピアソンエデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その9:Abstract Factoryパターン
BASENAME: 実践デザパタその9abstract_factoryパターン
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/07/2004 12:28:18 PM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

9回目は、抽象概念を用いて、関連オブジェクトの集合を作成する<b>Abstract Factory</b>パターンのメモです。
-----
EXTENDED BODY:
<h2>Abstract Factoryパターン</h2>

<p class="option">Abstract Factoryパターンは、抽象化を用いて、関連オブジェクトの集合を作成するパターンです。</p>

<b>具象クラスを指定せずに、関連オブジェクトや従属オブジェクトの集合を生成するための規約を提供する</b>のがこのパターンの目的です。抽象的な話だと、わかったようでわからないということになりかねないので、自分なりに具体的な例でまとめておきます。

僕の中で、<b>Abstract Factoryパターンのイメージは、「<a href="http://hamasyou.com/archives/000171" target="_blank">Factory Method</a> + ポリモーフィズム</b>」だと思っています。Factory Methodパターンには、関連オブジェクトを自分の責務で生成するというものがありました。この目的で使うFactoryクラスを生成するFactoryがこのAbstract Factoryです。

つまり、関連オブジェクトを生成するFactoryの種類がたくさんあるので、Factoryを生成するFactoryを作った。それがAbstract Factoryだということです。このイメージで、Abstract Factoryパターンのクラス図を見るとわかりやすいと思います。

<img src="http://hamasyou.com/images/abstract_factory/abstract_factory1.gif"   style="margin:5px" />

「OSFactory」がAbstract Factoryクラスになっていて、「WindowsFactory」、「MacintoshFactory」がそれぞれFactoryクラスです。

Abstract Factoryパターンは、今のようなOS毎に提供するリソースが違う場合に使われたり、GUIの生成時に使われたりします。JavaのAWTで使われているToolkitクラスはこのパターンが使われています。プラットフォームごとに実装が異なっています。

Toolkitでは、この他 Bridgeパターンの使われています。Abstract Factoryで生成した部品の実装をBridgeで管理して、プラットフォーム毎に異なる実装を隠しています。

<h2>パターンの適用タイミング</h2>

Abstract Factoryパターンの長所は、新たな実装を提供するのに柔軟性があるという点です。先ほどのOSの例だと、Factoryクラスに「UnixFactory」クラスが増えても、<a href="http://www.alles.or.jp/~torutk/oojava/oo/develop/011.html" target="_blank" class="extlink">開放・閉鎖原則</a>は守られています。

逆に、Abstract Factoryパターンの欠点は、関連オブジェクト(先ほどの例だと「ブラウザ」「ファイルシステム」)の種類が増えた場合、修正箇所がすべてのFactoryクラスに及んでしまう点です。この場合だと、<a href="http://www.alles.or.jp/~torutk/oojava/oo/develop/011.html" target="_blank" class="extlink">開放・閉鎖原則</a>は守られていません。<strong>Abstract Factoryインターフェースを適切に定義しておく必要がある</strong>ということです。

<strong>関連オブジェクトが複数あり、生成の責務を自分が持つ場合</strong>、<strong>リソースの関連に対して、複数の実装がありえる場合</strong>。これらの場合に、Abstract Factoryパターンが使えると思います。

<h2>実装サンプルと参考文献</h2>

Abstract Factoryパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;

+ 日立ソフト(Abstract Factoryパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/abstract_factory.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/AbstractFactory/index.htm" target="_blank" class="extlink">Abstract Factoryの骸骨</a>

+ Codian(生成に関するパターン)
<a href="http://www.kab-studio.biz/Programing/Codian/DesignPattern/02.html" target="_blank" class="extlink">生成に関するパターン</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Abstract Factoryパターン">
-----
KEYWORDS:
デザインパターン,Abstract Factory,アブストラクト ファクトリ,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: セキュアプログラミング―失敗から学ぶ設計・実装・運用・管理
BASENAME: セキュアプログラミング失敗から学ぶ設計実装運用管理
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Web-Internet
CATEGORY: Web-Internet
DATE: 06/08/2004 01:22:34 AM
TAGS: セキュリティ
-----
BODY:
本書は、セキュアなアプリケーションを作成する際のバイブルとして、是非とも有効活用して欲しい一冊です。

<blockquote>

小手先のテクニックとしての対策では、後手のセキュリティからは脱却できません。セキュリティ対策は先手でこそ意味があるのです。そして、セキュリティの奥深さに興味を持ってください。人間の心の闇が根本原因であることにも気づいてください。

<cite>本書推薦の言葉</cite>

</blockquote>
-----
EXTENDED BODY:
今日さまざまなウイルス、ワーム、クラッカーが世の中に出回っています。ソフトウェアの中にも、潜在的なバグ、目に見えるバグ、多くのセキュリティホールが存在しています。本書は、「セキュリティとは何か」のレベルから、アプリケーション開発におけるすべての段階において実施すべきことを解説しています。

ありきたりなソフトウェアの実装は最小限に抑え、「なぜセキュリティホールが生み出されてしまうのか」「どのようなことに注意するべきなのか」といったことを詳細に記述しています。

セキュアなアプリケーションを構築するためのノウハウが、ぎっしり詰まった非常におすすめの一冊です。本書のタイトルに「セキュアプログラミング」とありますが、プログラミングだけに焦点を絞った本ではありません。「設計」「実装」「運用」「管理」のそれぞれのパートで、気をつけるべきこと、セキュリティホールになりえる事例、それを防ぐ手立てを、余すことなく解説しています。

<h2>例</h2>

実装の章から参考となるチェックリストをあげておきます。チェックリストの解説や、他のチェック項目も知りたい人は、本書を買ってください。(^^;

<ul>
<li>データの汚染チェック(サニタイジング)</li>
<li>境界チェックを行う</li>
<li>URLを疑う</li>
<li>Webコンテンツに注意する</li>
<li>データに妥当な初期値を設定する</li>
<li>データの入力源をチェックする</li>
<li>処理が成功すると仮定しない</li>
<li>信頼できないもので認証しない</li>
</ul>

<h2>ほんとにおすすめです</h2>

アプリケーション開発に携わるひとには、必ず読んで欲しい一冊です。本書の前書きでも、べた褒めでした。まさか、そこまで褒めることないじゃん・・・なんて思って読んだら、「セキュリティに気をつけるって、こんなことまで対応しないといけなかったんだ。知らなかった」なんてことが絶対出てきます。ほんとにおすすめの一冊です。是非、本書をそばにおいてやってください。

+ セキュリティ関係のほかのおすすめ本

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111595/sorehabooks-22/">Linuxセキュリティクックブック―システム防御のためのレシピ集</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111595/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4873111595.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ダニエル・J. バレット　ロバート・G. バイネス　リチャード・E. シルバーマン　Daniel J. Barrett　Robert G. Byrnes　Richard E. Silverman<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873111595&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111595/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311151X/sorehabooks-22/">LinuxサーバHacks―プロが使うテクニック&ツール100選</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311151X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/487311151X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロブ フリッケンガー　Rob Flickenger　山口 晴広　イメージズアンドワーズ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311151X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Linuxのプロとプロでない者<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />実際に使える<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />真のハッカーのための本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311151X/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 「マイクロソフトではこの本を読むことが必要条件である -- ビル・ゲイツ」だそうです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891002913/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4891002913.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891002913/sorehabooks-22/">プログラマのためのセキュリティ対策テクニック</a><br />Michael Howard, David LeBlanc, ドキュメントシステム<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />実践的で読みやすいプログラマ向けの本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />対岸の火と思うべからず<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891002913/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4891002913"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4873111757.09.MZZZZZZZ.jpg" border="0" alt="セキュアプログラミング―失敗から学ぶ設計・実装・運用・管理">
-----
KEYWORDS:
セキュア,プログラミング,セキュリティ,設計,実装,運用,管理
-----


-----
CF50_CF_4: マーク・G. グラフ (著), ケネス・R.ヴァン ワイク (著), Mark G. Graff (原著), Kenneth R.van Wyk (原著), 新井 悠 (翻訳), 一瀬 小夜 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/5160ZZ1KDEL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22
CF50_CF: オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: ライト、ついてますか―問題発見の人間学
BASENAME: ライトついてますか問題発見の人間学
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 06/08/2004 04:58:31 PM
TAGS: ジェラルド・M・ワインバーグ
-----
BODY:
「ライト、ついてますか？」

非常に興味深いタイトルの本で、内容はどんなものかと思えば、実は、問題発見・問題解決の本でした。著者のユーモアたっぷりな語り口調で各ストーリーごとに問題を発見する過程、問題を解決する過程を徐々にブレイクダウンしながら解説しています。
-----
EXTENDED BODY:
本書で一番心に残る一言は、タイトルにもある「<strong>ライト、ついてますか？</strong>」です。これだけ聞くと、ひらめきに関することかと思う人もいると思いますが、実はぜんぜん違います。

「ライト、ついてますか？」という一言は、本書のあるストーリーの中に出てきた言葉です。そのストーリーについて話したくて、たまらないのですが、ここはあえて話さずにおきます。 (^^;

軽く説明しておくと、問題を解決するのは第三者ではなく、問題を持っている人であるということです。<strong>「問題を解決する方法は、問題を持っている人に考えさせる」</strong>これが、本書のひとつのポイントでした。

ジェラルド・M・ワインバーグは、私の大好きなコンサルタントの一人です。(実際にあったことはありませんが・・・)

この人は、非常にユーモアたっぷりで、本書のようなお堅い系統の本でも、面白おかしく書いてくれます。本書は、社会に出てから、「問題とはなんだろうか？」「この問題はどのように解決すればよいのだろうか？」という大切な考える力、発見する力、解決する力を養ってくれるよい本です。

生きていくうちに、何か問題にぶつかったらこう考えましょう。

<strong>「ライト、ついてますか？」</strong>

<h2>ジェラルド・M・ワインバーグの他の書物</h2>

彼の書物はほんとに面白いです。非常にお勧めです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4320025636/sorehabooks-22/">スーパーエンジニアへの道―技術リーダーシップの人間学</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4320025636/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4320025636.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">G.M. ワインバーグ　木村 泉<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4320025636&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />コンサルタントの秘密を先に読めばよかったかな？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />万人向け<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />技術者からマネージャーという立場になっていく過程で読んでおきたい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ぜひ読んでみてください<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />技術者にとってリーダーシップとは何か？<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4320025636/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ コンサルタント必見

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4320025377/sorehabooks-22/">コンサルタントの秘密―技術アドバイスの人間学</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4320025377/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4320025377.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">G.M.ワインバーグ　木村 泉<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4320025377&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />問題を解決したい人に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />専門知識で生計をたてるには？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />法則好きになりました<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />いっぱい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />本物。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4320025377/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ コンサルタントの武器になります。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281728/sorehabooks-22/">コンサルタントの道具箱</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281728/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4822281728.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジェラルド・M・ワインバーグ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822281728&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />理解するには時間がかかる？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />コンサルタントじゃない人にも勧めたい一冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />カウンセラーの道具箱？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />優しくなったワインバーグ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />人生において宝となる道具が散りばめられた名著！！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281728/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4320023684.09.MZZZZZZZ.jpg" border="0" alt="ライト、ついてますか―問題発見の人間学">
-----
KEYWORDS:
問題発見,問題解決,ライト,ワインバーグ,人間学
-----


-----
CF50_CF_4: ドナルド・C・ゴース (著), G.M.ワインバーグ (著), 木村 泉 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/410X6YM9F7L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4320023684/sorehabooks-22
CF50_CF: 共立出版
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その10:Builderパターン
BASENAME: 実践デザパタその10builderパターン
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/09/2004 09:29:00 AM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

10回目になりました。インスタンスの生成手順や生成内容が複雑な場合に、インスタンス生成作業を軽減する<b>Builder</b>パターンのメモです。
-----
EXTENDED BODY:
<h2>Builderパターン</h2>

<p class="option">Builderパターンは、インスタンス生成手順が複雑な場合やインスタンス生成構成が複雑な場合に、生成を簡略化するパターンです。</p>

インスタンス生成手順が複雑な場合というのは、例えば次のような場合です。

<ul><li>インスタンスの生成が他のオブジェクトとの関連で成り立っている</li><li>外部リソースを読み取る処理によって作られるインスタンス</li><li>データベースからデータを読み取り、加工しながら作成されるインスタンス</li></ul>

<a href="http://hamasyou.com/archives/000173" target="_blank">Template Method</a>パターンで取り扱った、インスタンス生成手順を規則正しく決めたい場合なども、Builderパターンは応用できます。

手順に関して言うと、Template MethodパターンとBuilderパターンの違いは、<b>インスタンス生成の役割を誰が負うのか</b>というところです。Template Methodパターンは、インスタンス生成の手順をスーパークラス(親クラス)で決めます。一方Builderパターンは、生成の手順はDirectorクラス(他のクラス)が責任を負います。

Builderパターンで一番のポイントは、<strong>誰がインスタンスの生成手順を知っているのか</strong>というところです。Directorクラスが知っているというのがその答えです。

もうひとつのポイントは、<b>Directorを使うユーザは、Builderで作られたインスタンスが何かということを知っていなければならない</b>という点でしょう。どういうことかというと、まずクラス図を見てください。

<img src="http://hamasyou.com/images/builder/builder1.gif"/>

「User」クラスが「Director」クラスを呼び出して作成した「Product」を使用する点に注目です。「User」クラスは「Director」がどんな「Product」を生成するのかを知っていなければ使いようがないという点を表しています。

実装の点から見ると、DirectorをBuilder毎に作り成果物の取得で固有のProductを返すようにするか、成果物を抽象化しておき、取得時にキャストして使うかということです。

<h2>パターンの適用タイミング</h2>

Builderパターンの長所は、UserがProductの生成手順をすべてDirectorに任せているという部分です。これによって、<b>Productの生成手順が変わったり、どんなに複雑な処理をしていても、Userからしてみれば、変更する必要がない</b>のです。

設計時の注意点ですが、<b>Builderが提供する生成手順は、増やしたり減らしたりするのが困難である</b>ということを覚えて置いてください。オブジェクト指向の原則である<b><a href="http://www.alles.or.jp/~torutk/oojava/oo/develop/011.html" target="_blank" class="extlink">開放・閉鎖原則</a></b>では、拡張には開いていて(Open)、修正には閉じている(Closed)必要があります。ConcreteBuilderの拡張は、容易にできますが、親クラスのBuilderの機能を増やすことは、子クラス全体に修正が及ぶ可能性があります。

これを回避するためには、<b>十分な設計と変更に強い構造をBuilderに持たせることです。</b>

Builderパターンのまとめです。<strong>インスタンス生成に手順がある場合</strong>、<strong>外部リソースを使ってインスタンスを作成しなければいけない場合</strong>、<strong>コンストラクタで引数の違うものがたくさんできてしまった場合</strong>

<h2>実装サンプルと参考文献</h2>

Builderパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;

+ 日立ソフト(Builderパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/builder.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/Builder/index.htm" target="_blank" class="extlink">Builderの骸骨</a>

+ TECHSCORE(生成に関するパターン)
<a href="http://www.techscore.com/tech/DesignPattern/Builder.html" target="_blank" class="extlink">TECHSCORE Builderパターン</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Builderパターン">
-----
KEYWORDS:
デザインパターン,Builder,ビルダー,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Webアプリケーション/サービス開発者のためのJavaクラス設計
BASENAME: webjava
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 06/10/2004 02:30:34 AM
TAGS: Java,Webアプリケーション開発,クラス設計
-----
BODY:
「Webアプリケーションって、なんだろう？」

最近のアプリケーションは、ほとんどがWeb対応になってきています。Webの仕組みは単純ながら奥が深い。モヤモヤした頭を、解きほぐしたいと思っている人に、本書はおすすめです。

Javaの文法を終え、プログラミング初心者を抜け出したいと思っている人、なんとなく、オブジェクト指向でのクラスの作り方がわからない人、Webアプリケーションについては知ってるんだけど、実際何なの？って人達のベースになる知識を幅広く学べます。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、Webアプリケーションとは何なのかということから、JavaでWebアプリケーションを作るときの基礎知識、クラスを作るときに注意したい点、セキュリティに関してと、幅広い知識を学べます。

「Javaの基本文法は学んだけど、オブジェクト指向はちょっと・・・」という人に特におすすめしたいです。説明が非常にわかりやすいです。個人的に、ソフトバンクの本は紙質がいいので、線を引くのが楽しいです。(^^

<h2>内容</h2>

本書の構成は

<ul><li>サーバーサイドJava、クラス設計</li><li>Servletクラスの基礎</li><li>JSPの基本</li><li>再利用性とパフォーマンス</li><li>セキュリティと信頼性</li><li>データベース・アクセスのクラス設計</li><li>応用編</li></ul>

と、Webの基礎知識から、ビジネスアプリケーションで考えることまで網羅しています。

タイトルにある、クラス設計という言葉は、</b>単体クラスを作るときのアドバイス</b>と捕らえたほうがよいです。僕は、クラス間の関連も考慮したクラス設計をイメージしていましたが、そうではありませんでした。

Webアプリケーションをつくっていると知らなかった事が結構ありますが、本書はそんな部分もカバーしていて、Webアプリケーションを作ったことがある人も、一読をおすすめします。

<h2>おぼえがき</h2>

<h3>URLエンコードの決まりごと</h3>

<ul><li>「a」〜「z」、「A」〜「Z」、「0」〜「9」はそのまま</li><li>特別なキャラクタ「,」「-」「*」「_」はそのまま</li><li>半角空白は「+」にする</li><li>残りの文字は8ビットを2桁の16進数にし、%xyの形式で指定(x,yは16進数文字列)</li></ul>

例：さーぶれっと =&gt; %82%B3%81%5B%82%D4%82%EA%82%C1%82%C6

<h3>Redirect</h3>

<ul><li>静的なHTMLファイルや他のサーバにあるServlet、JSPを呼び出す</li><li>「/」から始まる相対パスは、Servletコンテナのルートからの相対パスと見られる</li><li>Redirect後は、Servletからの出力はできません。</li></ul>

<h3>インクルード</h3>

<ul><li>&lt;%@ include file="参照URL" %&gt; タグでインクルードするファイルには、&lt;html&gt;、&lt;body&gt;タグなどは含まれていてはいけない</li></ul>

<h3>キャッシュさせないようにする</h3>

<ul><li>&lt;meta http-equiv="Pragmaa" content="no-cache"&gt;</li><li>&lt;meta http-equiv="Expires" content="-1"&gt;</li><li>&lt;meta http-equiv="Cache-Control" content="no-cache"&gt;</li></ul>

<h2>参考</h2>

+Javaの基礎を先に学びたい人にはこの本をぜひ!

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756142524/sorehabooks-22/">Javaを独習する前に読む本</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756142524/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756142524.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">青木 峰郎<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756142524&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />もっと早くこの本に出会いたかった<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756142524/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Javaの勉強書の基本

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107972/sorehabooks-22/">独習Java第3版</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107972/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798107972.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジョゼフ・オニール　武藤 健志　トップスタジオ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798107972&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107972/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Webアプリケーションを始める前に読む本です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774120855/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774120855.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774120855/sorehabooks-22/">JavaによるWebプログラミング基礎からわかる完全入門</a><br />柏原 正三<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774120855"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774120855/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774120855"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797321148.09.MZZZZZZZ.jpg" border="0" alt="Webアプリケーション/サービス開発者のためのJavaクラス設計">
-----
KEYWORDS:
Web,アプリケーション,Java,クラス,設計,システム
-----


-----
CF50_CF_4: 米川 英樹 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/41XXSG18P7L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797321148/sorehabooks-22
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 技術者のためのプログラミングによるセキュリティ強化ガイド
BASENAME: post_9
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Web-Internet
CATEGORY: Web-Internet
DATE: 06/11/2004 01:58:56 PM
TAGS: セキュリティ
-----
BODY:
<blockquote>

ネットワーク管理者任せは、もうやめませんか。これからは、開発者がセキュリティを考える時代です。不正アクセス防止のためのWebアプリケーション強化入門。

<cite>本書帯</cite>

</blockquote>

個人情報の流出、重大なセキュリティホールの発見などアプリケーションに求められる堅固さセキュアレベルは非常に高まっています。本書は、プログラマーレベルで対処できるアプリケーションのセキュリティ強化に関して書かれた本です。
-----
EXTENDED BODY:
<h2>対象読者</h2>

本書の対象は、Webアプリケーションを開発する必要のある技術者である。「WebフォームのGETとPOSTの違い」や「passwordフィールドは安全か？」、「汚染チェック(サニタイジング)」など、Webアプリケーションを作るときに気をつけるべきことが網羅されていて、技術者のみならずWeb開発に携わるすべての人に読んで欲しい。

<h2>特徴</h2>

Webアプリケーションで問題となるセキュリティーホールを防ぐための手法が網羅されている。本書の目次は次のようになっている。

<ul><li>Webサーバのセキュリティ</li><li>セッション管理</li><li>汚染チェック</li><li>遷移制御</li><li>クロスサイトスクリプティング</li><li>情報流出対策</li><li>ユーザー認証とアクセス制御</li><li>Web掲示板</li><li>その他の注意点</li><li>SSL</li><li>データベース</li><li>運用/メンテナンスガイド</li><li>サーバのセキュリティ管理</li><li>実践編</li></ul>

少しでもWebアプリケーションのセキュリティに関心がある人なら、大体どんなことが書いてあるのか想像できると思います。一つ一つのトピックに丁寧に解説が加えられていて、読みやすいです。実装は、Perlで書かれていますが、他の言語を使っているWebプログラマーにも読めるくらい簡単です。

「汚染チェック」から、クライアント側による入力値のチェックの短所について。クライアント側のスクリプトによる入力チェックは、上手く用いれば利用者の利便性を向上させたり、
サーバの負荷を下げたりできます。しかし、セキュリティの観点から言えば、何もチェックしていないのと同じです。
クライアント側スクリプトの入力チェックを使用する場合は、その処理に依存せず、<strong>サーバ側のチェックを必ず併用しなくてはなりません。</strong>

<h2>参考</h2>

セキュリティに関する本は、他にもたくさんでています。一冊読んだだけですべてをわかった気にならずに、いくつか書籍を読むのがいいと思います。

+ @IT

<a href="http://www.atmarkit.co.jp/fsecurity/rensai/webhole01/webhole01.html" target="_blank" class="extlink">Webアプリケーションに潜むセキュリティホール</a>

+ IPA ISEC

<a href="http://www.ipa.go.jp/security/awareness/vendor/programming/" target="_blank" class="extlink">セキュアプログラミング講座</a>

+ 関連おすすめ書籍

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534031270/sorehabooks-22/">図解でわかるインターネットのすべて―TCP/IP&セキュリティ</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534031270/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4534031270.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">小泉 修<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4534031270&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />わかりやすい<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534031270/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22/">セキュアプログラミング―失敗から学ぶ設計・実装・運用・管理</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4873111757.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">マーク・G. グラフ　ケネス・R.ヴァン ワイク　Mark G. Graff　Kenneth R.van Wyk　新井 悠　一瀬 小夜<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873111757&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />全般を学ぶには、良い本でしょうか<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />内容は良いけど、訳が悪すぎ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />「プログラミング」といいつつもその周辺に関する注意が豊富な本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://image.books.rakuten.co.jp/books/com/images/goods/77411633.gif" border="0" alt="技術者のためのプログラミングによるセキュリティ強化ガイド">
-----
KEYWORDS:
セキュリティ,セキュア,プログラミング,Web,インターネット
-----


-----
CF50_CF_4: 宮前 竜也 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51TCS5YZE9L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774116335/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: Javaの哲学
BASENAME: java_4
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 06/12/2004 11:50:07 AM
TAGS: Java,良書
-----
BODY:
Javaのように仕様が巨大で、生まれながらにオブジェクト指向の言語では、初心者は本質的な部分と付加的な部分の区別が困難で、無駄な努力を重ねがちである。

本書は、そんなJavaの設計思想や「なぜ？」の部分を解きほぐしてくれるものです。著者の独特の語り口「なぜ〜ではだめなんだ？」など、新鮮ながらわかりやすい本です。Javaクラス設計の「なぜ？」を深くまで知りたい方におすすめします。
-----
EXTENDED BODY:
<h2>対象読者</h2>

Javaの基本文法をマスターした方か、少なくともクラスとインターフェースが大体どんなものかを知っているレベルが好ましいと思いました。クラスとインターフェースの違いについては、本書でも解説されているので、完全にわかる必要はありません。Java入門者が読む本としては、少し抽象的過ぎるかなと思います。

本書で解説されているトピックはこれらがあります。

<ul><li>プログラミングの歴史 オブジェクトへの道のり</li><li>Javaの基本性質 オブジェクトとその立場</li><li>Javaの基本性質2 クラスとその社会</li><li>Javaの基本性質 ライブラリと言語仕様の接点</li><li>I/Oの仮想化 何もかもストリーム</li><li>データ構造 Collection系とMap系</li><li>ネットワーキング ソケットとURLに二極化</li><li>Swing GUIによるアプリケーション構築 JFrameの上にお絵かき</li><li>伏魔殿 java.lan</li></ul>

この中でも、僕が特におすすめしたいのが

<ul><li>Javaの基本性質 クラスとその社会</li><li>I/Oの仮想化 何もかもストリーム</li><li>データ構造 Collection系とMap系</li></ul>

の3つです。

「なぜinterfaceが必要なのか？」「抽象クラスの使い道ってなんなのさ？」といった疑問に答えてくれます。CollectionとMapの違いを理解できれば、プログラミング技能が2倍にアップすると思います。データ構造は、プログラミングの基礎知識ですからね。

<h2>特徴</h2>

独特の語り口調と、鋭い突込みが本書のうりです。入門書や学習書とは一味違った視点からJavaの言語仕様に触れています。完全な入門者向けの本とは言えませんが、ある程度Javaを理解できた人が読むと、目からウロコでしょう。技術書というよりは読み物として楽しめる逸品だと思います。

<h2>参考</h2>

「なぜ？」の部分に解説を絞った本は、なかなか希少価値が高いと思います。そんな中でも、おすすめなのがこれです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113611/sorehabooks-22/">Java謎+落とし穴徹底解明</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113611/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774113611.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">前橋 和弥<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774113611&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Javaの参考書というよりは．．．<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />"Java言語を知る"ことができる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />限られた予算から選ぶなら他書をお勧めします<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Javaに関する2冊目以降として<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Javaを本当に理解できる<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113611/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ もっとJavaの原則や定石を中心に学びたい人にはこれ！

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711877/sorehabooks-22/">Javaの格言―より良いオブジェクト設計のためのパターンと定石</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711877/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894711877.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ナイジェル ウォーレン　フィリップ ビショップ　Nigel Warren　Philip Bishop　安藤 慶一<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894711877&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Javaを用いた設計，コーディングのポイントが簡潔にまとまっている<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Effective Javaの元ネタか？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />深い。。。何度読んでも深い。。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />渋く味わい深い1冊です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Javaの基礎から応用まで詰まっています<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711877/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797317043.09.MZZZZZZZ.jpg" border="0" alt="Javaの哲学">
-----
KEYWORDS:
Java,哲学,設計,思想,定石
-----

COMMENT:
AUTHOR: ベル
EMAIL: 
IP: 219.165.174.126
URL: http://belltree.littlestar.jp/blog
DATE: 06/15/2004 10:55:19 PM
ハジメマシテです。
JAVAの全くの初心者なのですが、
オススメの本は何かありますか？
-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 192.168.0.2
URL: http://hamasyou.com/
DATE: 06/16/2004 01:21:25 AM
ベルさんへ
はじめましてです。

他のプログラミング言語をまったく触ったことがないのなら、新Java言語入門 ビギナー編・シニア編がおすすめです。
この方の本は、説明がわかりやすく、何より紙質がいいです。
異色系ですが、読みやすい本としては、Head First Javaとかあります。絵が非常に多く、アメリカンチックで面白いです。
最初から読むのは少しきついですが、プログラミング言語Javaもおすすめです。非常にコアな部分まで書いてあるので、Javaを極めるならこれも読んでおいて損は無いと思います。

私なりのアドバイスですが、とりあえず表紙と紙質に引かれて買ってみると良いかもしれないです。
本を読むのって気分に左右されるので・・・。

あまり参考にならなかったらすみません。
-----

COMMENT:
AUTHOR: ベル
EMAIL: 
IP: 220.109.79.134
URL: http://belltree.littlestar.jp/blog
DATE: 06/16/2004 08:09:53 PM
アドバイスどうもです。
紹介して頂いた本はどんな感じですか？
サンプルプログラムがあって、
それで問題、という構成ですか？
-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 192.168.0.2
URL: http://hamasyou.com/
DATE: 06/17/2004 08:58:43 AM
紹介したものは、ほとんど問題はついていないタイプです。
解説があって、サンプルプログラムがついてる感じですね。

問題が載っているのをお探しなら、標準 JavaプログラミングブックNew Languageシリーズがいいかもしれないです。
-----

COMMENT:
AUTHOR: ベル
EMAIL: 
IP: 219.165.174.80
URL: http://belltree.littlestar.jp/blog
DATE: 06/19/2004 10:11:51 PM
アドバイスありがとうございます〜。
早速見てみますね。
小生、最近、perlに凝っております。
なんとなくプログラムがわかりかけてきました。
-----


-----
CF50_CF_4: 岩谷 宏 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/4174JTDZX4L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797317043/sorehabooks-22
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その11:Prototypeパターン
BASENAME: 実践デザパタその11prototypeパターン
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/13/2004 01:33:51 PM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

11個目はインスタンスを新しく作るときに、既存のインスタンスのコピーを作成する<b>Prototype</b>パターンのメモです。
-----
EXTENDED BODY:
<h2>Prototypeパターン</h2>

<p class="option">Prototypeパターンは、既存のインスタンスのコピーを使って、生成の複雑なインスタンスや、少しだけ違うインスタンスをたくさん作りたいときに使えるパターンです。</p>

どんな時にこのパターンが使えるかというと、例えば株のシミュレーションプログラムを作っているとします。株価がこの先どのように変化するかを調べたいときに、現時点の株インスタンスの状態を複製して、別々の条件に当てはめたい場合、まったく同じ株インスタンスが必要となります。こんな状況にPrototypeパターンが使えます。

他には、ドローツール(お絵かきソフト)を作っているとすると、ユーザの書いた絵インスタンスは、とても複雑な状態になっていると考えられます。このインスタンスは、プログラムで同じものを作るのは、非常に大変です。(描いた手順をすべて覚えておいて、作るとなると時間もコストもかかる)こんなとき、絵インスタンスの複製を作ることができれば、描いた手順なんて必要なくなります。

3つ目は、テンプレートとなるインスタンスがすでに存在する場合です。テンプレートインスタンスを複製して、少し状態を変化させることで、同じような処理を何度も行わなくてすむようになります。

<h2>パターンの適用タイミング</h2>

Webアプリケーションなどを作っていると、<a href="http://yougo.ascii24.com/gh/10/001099.html" class="extlink">ウィザード形式</a>の処理を行う場合があります。入力して、確認して、登録するという一連の処理がある場合、登録時にエラーが発生してしまったら、入力時点まで、インスタンスの状態を戻さなければなりません。
こんなとき、インスタンスの複製を作っておいて、複製の方で登録処理を行い、エラーが出たら、複製元のインスタンスを処理するようにすれば複雑な処理は一切いらなくなります。

Prototypeパターンが使えそうな状況は、<strong>インスタンスを複製(コピー)しておいて、試しになにか処理してみる場合</strong>、<strong>複雑な生成過程を経たインスタンスをもう一度作りたい場合</strong>、<strong>テンプレートインスタンスが存在し、コピーすることで処理が楽になる場合</strong>

Prototypeパターンを使うときの注意点は、コピーの深さを間違えないことです。最近の言語は、オブジェクトの参照を扱います。コピーの深さを間違えると、見た目だけコピーされているが、実は中身は同じ参照だったということがありえます。詳しい解説は、<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22" class="extlink" target="_blank">Effective Java</a>という本が参考になります。

Web上だとSun Microsystemsの<a href="http://sdc.sun.co.jp/java/techtips/2001/index.html" class="extlink" target="_blank">JDC Tech Tips 日本語版</a>がよさそうでした。(※このページは会員制です。無料ですので登録してから、読んでみてください。)

<h2>実装サンプルと参考文献</h2>

Prototypeパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;

+ 日立ソフト(Prototypeパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/prototype.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/Prototype/index.htm" target="_blank" class="extlink">Prototypeの骸骨</a>

+ TECHSCORE(生成に関するパターン)
<a href="http://www.techscore.com/tech/DesignPattern/Prototype.html" target="_blank" class="extlink">TECHSCORE Prototypeパターン</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Prototypeパターン">
-----
KEYWORDS:
デザインパターン,Prototype,プロトタイプ,GoF,Java
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: ループ構造の正しさを証明してやる！
BASENAME: post_5
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/14/2004 03:37:38 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839912653/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4839912653.09.MZZZZZZZ.jpg" border="0" /></a>
</p>

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839912653/sorehabooks-22" target="_blank" class="extlink">Code Reading</a>を読んで、ループ性能(妥当性)に関しての議論を考えるときに、有効な手段があると書いてあった。<b>「バリアント(variant)」と「インバリアント(invariant)」</b>という概念を使う方法だ。「バリアント(variant)」とは、変わりやすいとか変更されるといった意味を持っている。

逆に「インバリアント(invariant)」は、変わらないとか不変なとかという意味を持っているらしい。

この「バリアント(variant)」と「インバリアント(invariant)」を使って、ループ構造が正しいかを証明する方法が、<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839912653/sorehabooks-22" target="_blank" class="extlink">Code Reading</a>の2章に載っていたので、忘れないうちに復習しておきたいと思います。

それにしても、<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839912653/sorehabooks-22" target="_blank" class="extlink">Code Reading</a>は面白いですね。技術者のツボをついた本だと思います。
-----
EXTENDED BODY:
<h2>概要と解説</h2>

ループ処理の開始と終了の時点で共に成り立つ条件を<b>ループインバリアント</b>と呼ぶそうです。直訳すると、「回る不変式」 ・・・何のこっちゃ(--;)。

<blockquote>

このループ処理中にインバリアント(不変式)が常に成り立つことを証明し、かつループ終了時に期待する値が得られたことを示すことができるようにインバリアント(不変式)を定めることで、ループのアルゴリズムが正しい結果の範囲内で機能することを保証できます。

<cite>本書</cite>

</blockquote>

(・・・わかったようなわからないような)

まあ要するに、ある定めた式がループ中に常に真になり続けたままループが終了したら、このループは正しく終了したってことが証明できるらしいです。ループが終了することを証明したり、期待した値を示す式を定めたりって事をしないと証明にならないらしいのですが。

とりあえず、例を見ながら整理しておきます。配列の最大値を求めるループがあるとします。

<pre class="code"><code>max = array[n];
<span class="keyword">while</span> (n--) {
  <span class="keyword">if</span> (array[n] &gt; max) {
    max = array[n];
  }
}
</code></pre>
<div class="clear"></div>

つぎに、以下の式をループ終了時に期待する結果を返す式として定義します。

<pre class="code"><code>max = maximum{array[0 : n)}</code></pre>

maximum{array[0 : n)} は、配列 array の要素 0からn -1の中から最大の値を返します。

この結果を証明するためのインバリアント(不変式)は次のように定義します。ループ中の max = array[n]; で示される部分を抜き出した感じです。

<pre class="code"><code>max = maximum{array[x : n)}</code></pre>

<b>このインバリアント(不変式)が常に成り立つことが証明できれば、ループが正しいということになります。</b>逆に考えると、インバリアント(不変式)を常に真に保つようなコーディングをすればよいとも言えます。

このインバリアント(不変式)は、maxに最初の値がセットされたときに開始されるので、ループの最初では妥当性が保たれます。2行目の nのデクリメントで maximum{array[x-1 : n)} は、要素の範囲が広がり、maxの値よりも大きい値を持つ可能性がでてきました。インバリアント(不変式)を真に保つために、3行目のif文で新しい要素がmaxよりも大きいかを調べ、4行目の代入式でmaxを現時点での最大に設定しなおしています。

これでインバリアント(不変式)は、2度目のループでも真に保たれることを保証できました。ループを繰り返してもインバリアント(不変式)は真になることがわかります。whileループが終了する条件は、n==0になったときですので、ループが終了することも確認できました。

ということで、最大値を返す<code>max = maximum{array[0 : n)}</code>は期待する値(最大値)を返すことを証明できました。

以上が、「バリアント｣と「インバリアント」を使った<b>ループ構造が正しいかどうかの証明</b>ということになります。(たぶん・・・)

こんな風にして、ループ処理の正しさを証明する方法があるということを、Code Readingを読んでしりました。結構奥が深くて、楽しめそうだなぁと思いつつ、次の章に読みふけっていくのであった・・・。
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" alt="ループ構造の正しさを証明してやる！" border="0">
-----
KEYWORDS:
Code Reading,プログラミング,ループ,妥当性,バリアント,インバリアント
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Java逆引き大全500の極意
BASENAME: java500
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/16/2004 01:40:26 AM
TAGS: リファレンス,本が重い,極意
-----
BODY:
やりたいことから探せる、リファレンス的存在の本です。ただし、他のリファレンスと少し違うのが、項目それぞれに対して、サンプルソースが載っている点です。動くコードで実際の結果まで載っているので、ちょっと調べるときなどに重宝します。業務で使用するときにも使えるテクニックなど載っているので、初心者から経験者まで手元に置いておきたい一冊です。
-----
EXTENDED BODY:
<h2>特徴</h2>

タイトルに「極意」とありますが、極意というほどの大層なものではなく、ほんとにちょっと困ったときに参考になるリファレンスです。すべての見出しに対してサンプルコードが載っていて、カバーしている範囲も広くおすすめです。カバー範囲として

<ul><li>Java入門</li><li>プログラミングの極意</li><li>文字列操作</li><li>配列操作</li><li>例外処理</li><li>オブジェクト指向プログラミングの極意</li><li>AWTプログラミング</li><li>コントロール(AWT)</li><li>Swingプログラミング</li><li>コントロール(Swing)</li><li>スレッド</li><li>I/Oストリーム</li><li>ファイル操作</li><li>ネットワークプログラミング</li><li>データベースプログラミング</li><li>サーバーサイドプログラミング</li><li>サーブレット/JSP</li><li>iモードプログラミング</li><li>JBuilderの極意</li></ul>

とあげればキリがないくらいたくさんの項目に関して載っています。

プログラミングを始めたばかりの人は、本書を片手にサンプルコードを打ち込み、実務でJavaを使っている人は、つまずいたときに利用してください。机の片隅においておくだけで役に立つ本はなかなかないと思いますよ。

<h2>参考</h2>

本書のパワーアップ版である「アドバンス編」があります。こちらもおすすめです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798005940/sorehabooks-22/">Javaアドバンストテクニック逆引き大全 500の極意</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798005940/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798005940.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">アリエスコンピュータ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798005940&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798005940/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479800815X/sorehabooks-22/">最新Java逆引き大全 550の極意</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479800815X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/479800815X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">高橋 和也　さとう ひでき　井川 はるき　植山 能成　プロジェクトA<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=479800815X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479800815X/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 現場で使える即知識。いかがですか？

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798106976.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/">Javaプログラミングの処方箋</a><br />宇野 るいも ， arton<br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798106976"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798002569.09.MZZZZZZZ.jpg" border="0" alt="Java逆引き大全500の極意">
-----
KEYWORDS:
Java,逆引き,500,極意,大全
-----


-----
CF50_CF_4: 高橋 和也 (著), 井川 はるき (著), さとう ひでき (著), プロジェクトA (著)
CF50_URL: http://ecx.images-amazon.com/images/I/515SQK1NG7L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798002569/sorehabooks-22
CF50_CF: 秀和システム
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Javaの鉄則―エキスパートのプログラミングテクニック
BASENAME: javaの鉄則エキスパートのプログラミングテクニック
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/17/2004 09:30:41 AM
TAGS: イディオム満載,テクニック,良書
-----
BODY:
Javaに限らず、初心者と達人プログラマとの違いはどれだけその言語の鉄則を守ってコーディングしているのかの違いだと思います。実際にコーディングを行ってつまずいて、解決した人にしかわからないTipsや設計原則を惜しげもなく解説してくれる、まさに聖書のような存在です。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書はJavaに関する実践的提案やアドバイス、コーディング例、解説をあつめて、「鉄則」という形でまとめたものです。入門書を読むだけでは気づかない点を詳しく丁寧に解説してくれます。その上で、よりよいコーディング例などを説明してくれるため、Javaの中級者から上級者におすすめします。初心者には、少し難しい部分もあるかもしれません。しかし、確実に読むべきです。

どんな鉄則が載っているのかを少しあげておきます。

<ul><li>パラメータは参照渡しでなく値で渡される</li><li>instanceofよりも多態を</li><li>必要がなくなったらオブジェクト参照にnullを設定する</li><li>equalsメソッド実装にはgetClassを使うのがよい</li><li>finallyを使ってリソースのリークを回避する</li><li>連結にはStringよりもStringBufferを使う</li><li>インスタンスメソッドの場合synchronizedはメソッドコードではなくオブジェクトをロックすることを理解する</li><li>１つの演算に関わるすべてのオブジェクトをロックする</li><li>インタフェース、抽象クラス、具体クラスを区別する</li><li>不変クラスの定義と実装は慎重に</li<li>cloneメソッドを実装するときはsuper.cloneをよびだす。</li></ul>

ここにあげたもの以外に3倍近い鉄則がまとめられています。

本書で説明されている鉄則は、すべて普通のプログラマから達人プログラマになるのに必要なことばかりだと思います。実践でそのまま利用できるテクニック、プラクティスばかりです。<strong>「知らないことはできない」。「鉄則」という名の武器を装備してみませんか？</strong>

<h2>参考</h2>

本書と一緒に読みたいのが、<a href="http://hamasyou.com/archives/000191">Javaの哲学</a>という本です。Javaの「なぜ？」を知りたい人におすすめです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797317043/sorehabooks-22/">Javaの哲学</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797317043/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797317043.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">岩谷 宏<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797317043&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />Javaプログラマの読み物として<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />哲学チックにひたりたい人に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />一通りJavaの学習を終えた方に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />２冊目に最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />目からうろこ<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797317043/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Javaに限らずすべてのプログラマに贈るバイブルです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/">達人プログラマー―システム開発の職人から名匠への道</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894712741.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">アンドリュー ハント　デビッド トーマス　Andrew Hunt　David Thomas　村上 雅章<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894712741&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />SEの基本が書かれてます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />達人エンジニアになる方法<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />プログラマーの為の自己啓発本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />達人プログラマー<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />もう１ランク上のプログラマを目指すために<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/489471258X.09.MZZZZZZZ.jpg" border="0" alt="Javaの鉄則―エキスパートのプログラミングテクニック">
-----
KEYWORDS:
Java,鉄則,達人,エキスパート,プログラミング,テクニック
-----


-----
CF50_CF_4: ピーター ハガー (著), Peter Haggar (原著), ドキュメントシステム (翻訳)
CF50_URL: http://ecx.images-amazon.com/images/I/517ZSR63HHL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22
CF50_CF: ピアソンエデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: Effective Java プログラミング言語ガイド
BASENAME: effective_java_プログラミング言語ガイド
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/19/2004 11:49:01 AM
TAGS: Java,これは読むべき,良書
-----
BODY:
Javaプログラマのための最も実用的な本のうちのひとつといってもいいと思います。それくらい実用性があり、優れたソースコードを書くための指南書として使える良書だと思います。

本書は、Javaの慣習と効果的な使用法を学べます。Javaの基本的使い方、文法をマスターした人向けの本です。次のステップへの最適な一冊だと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は次のタイトルから構成されています。

<ul><li>オブジェクトの生成と消滅</li><li>すべてのオブジェクトに共通するメソッド</li><li>クラスとインターフェース</li><li>C構文に対する置き換え</li><li>メソッド</li><li>プログラミング一般</li><li>例外</li><li>スレッド</li><li>シリアライズ</li><li>パターンとイデオムの索引</li></ul>

タイトルを眺める限り、退屈そうな印象を受けるかもしれません。しかし、それは大いに間違っています。本書は少しも退屈な部分なんてありません。

本書はそれぞれのタイトルに対して、5〜10項目のプログラミング指南を行ってくれます。例えば、「オブジェクトの生成と消滅」では「コンストラクタの代わりに static ファクトリーメソッドの提供を検討する。」という項目があります。

static ファクトリーメソッドをコンストラクタの代わりに提供するメリット・デメリット、設計方法、利用方法などの説明を詳しく行ってくれます。

<strong>static ファクトリーメソッドを使うメリットは、名前を持つこと</strong>だという解説がありました。確かに、メソッドに適切な名前をつけることはいいことです。このような方法もありだと思います。

ある程度プログラミングをやってきた人ならば、この点を発見、利用できると思います。ただ、プログラミング文法を終えたばかりの人が、名前の大切さを理解して、コンストラクタの変わりに static ファクトリーメソッドの利用を検討できるようになるには、誰かの助言がないとできないと思います。

本書は、文法を学び終えた人が次のステップを踏み出すために使えると思います。また、優れたJavaプログラムが書きたい人にもおすすめです。本書に書かれていることは、ほとんどJavaプログラムを書く上での原則や黄金則となっています。

すべてのJavaプログラマ必携の良書です。

<h2>参考</h2>

本書はJavaプログラムの効果的書き方を学べる良書です。他にも似た系統の本を知っていますので、ご紹介します。

+ C言語を使ってプログラミングする上でのヒントが満載のサイトです。

<a href="http://www.pro.or.jp/~fuji/mybooks/cdiag/" target="_blank" class="extlink">Cプログラミング診断室</a>

+ Javaにおける定石やイデオムといった部分を学べます。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22/">Javaの鉄則―エキスパートのプログラミングテクニック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/489471258X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ピーター ハガー　Peter Haggar　ドキュメントシステム<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=489471258X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Javaが少しかけるようになったら絶対読むべき。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />お勧めの１冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />是非手元に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />なかなか・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本に関するレビュー<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 同じく、Javaの格言や定石をまとめています。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711877/sorehabooks-22/">Javaの格言―より良いオブジェクト設計のためのパターンと定石</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711877/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894711877.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ナイジェル ウォーレン　フィリップ ビショップ　Nigel Warren　Philip Bishop　安藤 慶一<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894711877&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Javaを用いた設計，コーディングのポイントが簡潔にまとまっている<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Effective Javaの元ネタか？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />深い。。。何度読んでも深い。。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />渋く味わい深い1冊です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Javaの基礎から応用まで詰まっています<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711877/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894714361.09.MZZZZZZZ.jpg" border="0" alt="Effective Java プログラミング言語ガイド">
-----
KEYWORDS:
Java,Effective,プログラミング,定石,パターン,イデオム
-----


-----
CF50_CF_4: ジョシュア・ブロック (著), 柴田 芳樹 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/515MNX5P7FL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22
CF50_CF: ピアソン・エデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その12:Strategyパターン
BASENAME: 実践デザパタその12strategyパターン
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/19/2004 11:31:50 PM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

12番目は処理手順やアルゴリズムをスムーズに交換できるようにする<b>Strategy</b>パターンのメモです。
-----
EXTENDED BODY:
<h2>Strategyパターン</h2>

<p class="option">　Strategyパターンは、実行時に処理のアルゴリズムを決定したいときに使うパターンです。</p>

処理のアルゴリズムとは、例えばソートの方法であったり、数値の計算の仕方であったりします。

<img src="http://hamasyou.com/images/design_pattern/strategy.gif" alt="Strategyのクラス図" />

1つ目のアルゴリズムを使うと計算は速いがメモリをたくさん使う。2つ目のアルゴリズムを使うと計算は遅いがメモリは少なくすむ。1つ目のアルゴリズムと2つ目のアルゴリズムを使うかは、ユーザに選択させたい場合など、動的にアルゴリズムを切り替える必要があります。こういった場合に使えるパターンとなります。

Strategyパターンは、<a href="http://mikata.curiocube.com/oop/part2/ch11_composition.html" class="extlink" target="_blank">コンポジション</a>という手法を用いて実装されます。コンポジションの主な利用用途として、インスタンス間の緩やかな関係を築く場合に使われます。Strategyパターンの様に実行時に何かを決めたいという場合は、その処理を専門で行うインスタンスとして切り出し、そのインスタンスへの<a href="http://www.netlaputa.ne.jp/~hijk/study/oo/ooglossary.html" class="extlink" target="_blank">委譲</a>を用いるという手法が良くとられます。これがコンポジションの主な実装になります。

<h2>パターンの適用タイミング</h2>

Strategyパターンの使い時はわかりやすいと思います。処理の方法やアルゴリズムを動的(実行時)に切り替えたい場合に使います。

Strategyパターンと同じ実装方法で同じクラス図になるパターンに、<a href="http://www.hellohiro.com/pattern/state.htm" class="extlink" target="_blank">Stateパターン</a>というのがあります。このパターンは、<b>インスタンスの状態を動的に変更したい場合に使う</b>ものです。<b class="red">Strategyパターンとは概念が違います。</b>Strategyパターンは、動的に処理方法やアルゴリズムを変化させます。

<h2>実装サンプルと参考文献</h2>

Strategyパターンの実装方法をもっと詳しく知りたい場合は、下記のサイトにアクセスするのをお勧めします。もしくは、参考書籍を載せておきますので、そちらをお買い求めください。(^^;

+ 日立ソフト(Strategyパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/strategy.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/Strategy/index.htm" target="_blank" class="extlink">Strategyの骸骨</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Strategyパターン">
-----
KEYWORDS:
デザインパターン,Strategy,ストラテジ,GoF,Java,振る舞い
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 図解入門 よくわかるアルゴリズムの基本と仕組み
BASENAME: 図解入門_よくわかるアルゴリズムの基本と仕組み
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/20/2004 07:45:58 PM
TAGS: アルゴリズム,図解シリーズ
-----
BODY:
<blockquote>

一人前のプログラマには、一朝一夕ではなれません。すばらしいコンピュータソフトは、優れたプログラマの集団から生まれます。将来、その集団の中にあなたの名前があるように、今日から努力を始めてください。本書は、そのための第一歩です。さあ、踏み出しましょう。

<cite>本書「はじめに」より</cite>

</blockquote>
-----
EXTENDED BODY:
<h2>特徴</h2>

図解シリーズのいいところが出ています。何がいいかって、小難しいアルゴリズムの説明をわかりやすい図を使って丁寧・親切に説明しているところがステキです。

アルゴリズムの種類は、大学の講義で習う程度のものになっています。

<ul><li>平均を求める</li><li>最大値・最小値を求める</li><li>番人を使ったアルゴリズム</li><li>ソート(選択法・バブルソート・挿入法・シェルソート・クイックソート)</li><li>探索(リニアサーチ・バイナリサーチ)</li><li>再帰(最大公約数・階乗・クイックソート)</li><li>ファイルのマージ</li><li>ニュートン法</li><li>台形法</li><li>ダイクストラ法</li><li>ポインタ</li></ul>

対象読者は、<strong>プログラミングを始めたばかりの人〜実はアルゴリズムをしっかり勉強したことのない中堅プログラマ</strong>です。アルゴリズムの基本と仕組みを図入りの説明で行った後、C言語を使って実装まで行っています。大学の授業でニュートン法とかのプログラムを書く必要がありましたが、本書のおかげでスムーズに理解できました。

おすすめポイントは、とにかくわかりやすいところです。他にもアルゴリズムを解説した本はたくさん出ていますが、本書ほどわかりやすく解説しているアルゴリズムの本はありません。

<h2>参考</h2>

+本書に載っているアルゴリズムで足りないと感じた人には、これをご紹介。決して読みやすくはないですが、アルゴリズムのバイブルです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614411X/sorehabooks-22/">The Art of Computer Programming Volume1 Fundamental Algorithms Third Edition 日本語版</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614411X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/475614411X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ドナルド・E・クヌース　有澤 誠　和田 英一　青木 孝　筧 一彦　鈴木 健一<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=475614411X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />とにかく買え、苦しめ、そして感動しろ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />超豪華な翻訳陣！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />少しでもコンピュータプログラムに関係のある方、必読！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614411X/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ アルゴリズムのバイブル第二弾

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145434/sorehabooks-22/">The Art of Computer Programming (2) 日本語版 Seminumerical algorithms Ascii Addison Wesley programming series</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145434/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756145434.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Donald E.Knuth　有沢 誠　和田 英一<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756145434&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145434/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ アルゴリズムを後ろの角度から学びたい人におすすめ。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/">珠玉のプログラミング―本質を見抜いたアルゴリズムとデータ構造</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894712369.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジョン ベントリー　Jon Bentley　小林 健一郎<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894712369&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラマなら読むべき本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />アルゴリズムって何?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />視点が変わる本です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />自信をなくしそう...<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />quot;知的Programingquot;入門に最適です<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 本書と同じくらいわかりやすくアルゴリズムを解説してくれます。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324198/sorehabooks-22/">プログラミングの宝箱 アルゴリズムとデータ構造</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324198/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797324198.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">紀平 拓男　春日 伸弥<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797324198&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />初級者が中上級者になるためのよいガイド<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />初心者にやさしいプログラミング解説本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324198/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798002615.09.MZZZZZZZ.jpg" border="0" alt="図解入門 よくわかるアルゴリズムの基本と仕組み">
-----
KEYWORDS:
アルゴリズム,図解,基本,入門,プログラミング,ポインタ
-----


-----
CF50_CF_4: 杉浦 賢 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51DJTSCX3ML._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798002615/sorehabooks-22
CF50_CF: 秀和システム
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 独習Java
BASENAME: java_7
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/22/2004 02:15:51 AM
TAGS: Java,定番,独習シリーズ
-----
BODY:
本書は、非常に人気のあるJavaの入門書です。が、人気のあるわりにわかりにくいというのが本音です。確かに、独習とあるだけあって、一人で読み進めればある程度理解できます。しかし、本書は専門用語を最初から使いすぎ！「対象読者がプログラミングを始めて間もない人から〜」とあるわりに、「これじゃあ誰もわからねーよ」と突っ込みたくなります。
-----
EXTENDED BODY:
<h2>特徴</h2>

とまあ、あまり初心者にはおすすめできない本書なわけですが、カバーしている範囲は確かにすばらしい。

<ul><li>Javaの基礎</li><li>クラスとメソッド</li><li>制御ステートメント</li><li>演算子</li><li>クラスの作成</li><li>継承</li><li>インターフェースとパッケージ</li><li>例外</li><li>マルチスレッド</li><li>クラスライブラリの初歩</li><li>入出力</li><li>ネットワーキング</li><li>アプレット</li><li>イベント処理</li><li>AWT</li><li>その他のテクノロジー</li></ul>

と、これを覚えたら独り立ちできるというレベルのことは書かれています。

本書よりもわかりやすく、本書よりもやさしいJavaの解説書は存在します。それでも、本書を選ぶのには理由があります。それは、専門用語をどのように使うかを学べる。最初から本書を使って学ぶことで、ほんとにわからない部分のみを補習すればよくなる。考える力がつく。これに尽きると思います。

厳しい環境でこそ、本領を発揮できるひとに、本書をおすすめします。

<h2>参考</h2>

+ 「さすがに最初から厳しいのはむりだろ」って人におすすめなのがこれ！

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797318570/sorehabooks-22/">新Java言語入門 ビギナー編</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797318570/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797318570.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">林 晴比古<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797318570&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ビギナー編としては良い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />他の本に比べると格段に判りやすいです。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />新Java言語入門ビギナー編<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />根気よく読もう<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />プログラム入門者にも分かりやすい<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797318570/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ もう少し、変わった路線から学びたい人にはこちらをどうぞ

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797318422/sorehabooks-22/">Javaゲームプログラミング　アルゴリズムとフレームワーク</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797318422/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797318422.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">長久 勝<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797318422&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />本気以上じゃないと無理でしょう〜<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />アルゴリズムは秀逸ですが...<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />JAVAでゲームを作りたい方必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />表紙だけでなく、中身も素晴らしい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />考え方からわかるところが最高<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797318422/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 本格的なJavaの使い方を学びたければこんなのもあります。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116963/sorehabooks-22/">ひとりでできるJava実践入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116963/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116963.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">柏原 正三<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774116963&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Javaの奥深さを教えてくれます<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116963/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 現場で使える即知識。いかがですか？

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798106976.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/">Javaプログラミングの処方箋</a><br />宇野 るいも ， arton<br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798106976"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798102784.09.MZZZZZZZ.jpg" border="0" alt="独習Java">
-----
KEYWORDS:
独習,Java,入門,初心者
-----


-----
CF50_CF_4: ジョゼフ オニール (著), 武藤 健志 (監修), Joseph O’Neil (原著), トップスタジオ (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/516AMEDAF9L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798102784/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: Professionalゲームプログラミング
BASENAME: professionalゲームプログラミング
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/23/2004 12:07:32 PM
TAGS: ゲームプログラミング
-----
BODY:
ゲームプログラミングというのは、一般業務で使うアプリケーションとは違った、もっとテクニック重視の技法を使う必要がでてきます。ゲーム会社などでは、ひとつのゲームを作る為だけに、専用のツール(マップを作成するものなど)をつくることもあるそうです。そんな、ある意味変わったゲームプログラミングを、本書を通じて体験してみてはいかがですか？
-----
EXTENDED BODY:
<h2>特徴</h2>

本書はMicrosoft Windowsの<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00009PJOD/sorehabooks-22" target="_blank" class="extlink">Visual C++</a>というプログラミングツール対応です。つまり、Windowsプログラミング用の本ということになります。

ゲームプログラミングと同様に、Windowsプログラミングも、少し癖があります。本書ではWindowsプログラミングに関しては必要最低限のことしか書いてありません。まあ、ゲームプログラミングに関する本なので、仕方ないというところですが、最初からつまづかないためにも、別に一冊Windowsプログラミング用の本を手元に置いておくことをおすすめします。

本書の内容はこのようになっています。

<h4>基本項目</h4>

<ul><li>ウィンドウの作成(フルスクリーン表示)</li><li>CGを読み込んで表示する</li><li>画像ファイルの書き込み</li><li>CGの重ね合わせ</li><li>画面効果(ワイプ・スクロール・フェード・リージョンを使ったワイプ)</li><li>CGの切り替え</li><li>アニメーション(目パチ)</li></ul>

<h4>ゲーム作成(RPG・カードゲーム)</h4>

<ul><li>マップの表示</li><li>キャラクターの移動</li><li>戦闘(アルゴリズム・マップの表示)</li><li>カード作成</li><li>カードのシャッフルと移動</li></ul>

<h4>その他</h4>

<ul><li>音楽を演奏する</li><li>DirectDrawを使う</li><li>セーブデータ</li><li>データ管理</li></ul>

僕が本書を購入した動機は、クォータービューのRPGを作りたいと思ったからです。本書で説明しているRPGは、ドラクエやFFとは違う、<strong>「戦略シュミレーションRPG」のようなタイプ</strong>です。マスに沿ってキャラクターを移動させていくタイプです。

本書の解説は、わかりやすく技法(ワイプやスクロール)などを使ったときの効果や、リージョンを使ったときの注意点なども網羅しています。ゲームを始めて作る人には、本書に載っていることは知らないことだらけかも知れませんが、説明が図入りで丁寧なので、なんとかついていけるのではないかと思います。

ゲームプログラミングに関しての技法を身につけたいならば本書はおすすめです。

<h2>参考</h2>

+ Microsoft 公式ホームページ

<a href="http://www.microsoft.com/japan/msdn/visualc/" target="_blank" class="extlink">Microsoft Visual C++.NET</a>

+ 本書で使用されているツール、Visual C++ が欲しい人はこちら。Microsoftのツールは非常に優秀で、業務アプリケーションから、Windowsアプリ、ゲームまで幅広くサポートします。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top" width="80"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00009PJOC/sorehabooks-22/ref=nosim/"><img src="http://images-jp.amazon.com/images/P/B00009PJOC.09.THUMBZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00009PJOC/sorehabooks-22/ref=nosim/"><font size="small;">Microsoft Visual C++ .NET Standard Version 2003</font></a><br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=B00009PJOC"></iframe><br />業務アプリケーション開発から、ゲーム開発までプログラミングに関することならこれひとつで十分</td></tr></table>
</div>

+ ロールプレイングゲームを始めたいならこちら

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797316802/sorehabooks-22/">ロールプレイングゲームプログラミング</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797316802/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797316802.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">坂本 千尋<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797316802&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />こう言うＲＰＧを作る人なら<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ゲームプログラミングに興味があるなら。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />RPGが作りたい人は必見！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />使いやすさ抜群<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797316802/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Windows以外でゲームを作りたいならこれ！

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4627844115/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4627844115.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4627844115/sorehabooks-22/">応用OpenGLグラフィックス―簡単プログラミングで3Dアニメーションを学ぶ</a><br />関根 詮明 ， 安居院 猛<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />応用OpenGLをやってみて。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4627844115/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4627844115"/></a><br /></td></tr></table>
</div>

+ Javaでゲームプログラミングを始める方へ

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797318422/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797318422.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797318422/sorehabooks-22/">Javaゲームプログラミング　アルゴリズムとフレームワーク</a><br />長久 勝<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />JAVAでゲームを作りたい方必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />表紙だけでなく、中身も素晴らしい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />考え方からわかるところが最高<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797318422/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797318422"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797314222.09.MZZZZZZZ.jpg" border="0" alt="Professionalゲームプログラミング">
-----
KEYWORDS:
Professional,ゲーム,プログラミング,Windows,VisualC++
-----


-----
CF50_CF_4: 坂本 千尋 (著)
CF50_URL: http://images-jp.amazon.com/images/P/4797314222.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797314222/sorehabooks-22
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: UMLによるオブジェクト指向開発実践ガイド
BASENAME: uml
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 06/26/2004 03:13:52 AM
TAGS: UML
-----
BODY:
<blockquote>

UML、Java、CORBA、COMなど、オブジェクト指向はソフトウェア開発にとってもはや当たり前の技術になっているが、実践に基づいた具体的なノウハウはいまだに少ない。本書の目的は、オブジェクト指向開発プロジェクト全体に標準的な体系を与え、またチーム全体がオブジェクト指向技術のスキルを蓄積しながら成長するテクニックを、現場で実践するう方々に提供することである。

<cite>本書表紙より</cite>

</blockquote>
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、UMLを使ったシステム開発の手順をまるごと解説したまさに「実践ガイド」です。実装よりは、分析・設計を重視している感じです。どんなドキュメントが必要なのかという点から、詳細設計時におけるテストケースの作成方法まで書かれています。

本書の流れとして、

<ol>
<li>オブジェクト指向の基礎(75P)</li>
<li>オブジェクト指向開発技法の概要(70P)</li>
<li>要求分析作業(20P)</li>
<li>仕様分析作業(25P)</li>
<li>設計作業(11P)</li>
<li>詳細設計作業(25P)</li>
<li>実装作業(5P)</li>
</ol>

を網羅しています。ただし、割かれているページ数を見るとわかるように、<strong>実装向けというより、プロジェクトの最初で利用するための解説書という感じです。</strong>

解説は、わかりやすくは書いてあります。ただ、使われているUML図の説明や開発プロセスに関しての説明が少ないのが残念です。プロジェクトのどの部分で、どのようなドキュメントを作る必要があるのかという点を解説しているてんは、評価できると思います。

いちプログラマーの立場から、本書を読んでも本書のよさはわかりにくいかと思います。実際、僕もそうです。非常にいい事を書いているという雰囲気はしているのですが、少し学術向きかという点で、評価を下げてあります。

<h2>参考</h2>

+本書を読むには、まずこの本を読んでおくと良いと思います。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894713861.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/"><b>実践UML―パターンによる統一プロセスガイド</b></a><br />クレーグ ラーマン, Craig Larman, 依田 光江, 依田 智夫, 今野 睦<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894713861"/></a><br /></td></tr></table>
</div>

+ Javaによるもっと実践重視でプロジェクト開発を網羅している優良書です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798102113/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798102113.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798102113/sorehabooks-22/"><b>UMLによるエンタープライズJava開発―ソフトウェアモデリングによる効率的なJavaシステムの構築</b></a><br />C.T. アーリントン, C.T. Arrington, ウルシステムズ株式会社, 平澤 章, 笠 充彦, 船越 隆行, 早川 秀利<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />サンプルプロジェクトに沿って開発プロセスを理解できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />以下の項目に該当するひとにお薦め<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798102113/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798102113"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/477410714X.09.MZZZZZZZ.jpg" border="0" alt="UMLによるオブジェクト指向開発実践ガイド">
-----
KEYWORDS:
UML,オブジェクト指向,実践,ガイド
-----

COMMENT:
AUTHOR: きまぐれＴ
EMAIL: kimagure-bbs1010@jcom.home.ne.jp
IP: 61.23.192.44
URL: http://minna-shoseki.seesaa.net/
DATE: 06/27/2004 01:24:21 AM
突然のコメント失礼します。m(_　_)m

みんなのための書籍広場の管理人きまぐれＴです。
<a href="http://minna-shoseki.seesaa.net/" rel="nofollow">http://minna-shoseki.seesaa.net/</a>
本に関しての情報・評論・意見・感想の広場です！
と言っても、立ち上げたばっかりのブログでして、
まだまだ情報そのものがありません。＞＜

あなたの貴重な情報をこちらでも宣伝してみませんか？
方法はチョー簡単です！
本に関することを記事にしたときにトラックバックを飛ばすだけです！
どうぞ、よろしくお願い致します。m(_　_)m

P.S.管理人の個人ブログもよろしく〜！＾o＾
<a href="http://kimagure-t.seesaa.net/" rel="nofollow">http://kimagure-t.seesaa.net/</a>
-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 192.168.0.2
URL: http://hamasyou.com
DATE: 06/28/2004 12:44:29 PM
こんにちは、はじめまして。 > きまぐれTさん

なかなか面白いアイデアだと思います。
これから、僕のところで書いた書評は、
トラックバックを飛ばしていきたいと思います。

今後ともよろしくおねがいしますです。
-----


-----
CF50_CF_4: 吉田 裕之 (著), 上原 忠弘 (著), 山本 里枝子 (著), 田中 達雄 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51PKCERS2VL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/477410714X/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: Javaアルゴリズム+データ構造完全制覇
BASENAME: java_2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 06/27/2004 01:55:51 AM
TAGS: Java,わかりやすい,アルゴリズム
-----
BODY:
本書は、2つの方法で読者にアルゴリズムとデータ構造を学ばせようとしている。1つは、良くあるアルゴリズムとデータ構造のみの解説

2つめは、Java言語による実装を基準としたデータ構造とアルゴリズムの解説

文書による解説である程度理解できたところで、実装の面から更なる知識をインプットする。これが本書の特徴です。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、2つの面からアルゴリズムとデータ構造を学べる。文書による解説と実際のソースコードによる解説だ。実際、よく配慮されていると思う。アルゴリズムやデータ構造の解説書というのは、得てして小難しく書いてある。そんな中、絵を多用しわかりやすい解説と丁寧なソースコードによる本書のアプローチを、僕は非常に評価したい。

<h3>本書で扱うデータ構造</h3>

<ul><li>配列</li><li>スタック</li><li>待ち行列(キュー)</li><li>連結リスト</li><li>探索二分木</li><li>ハッシュテーブル</li></ul>

<h3>本書で扱うアルゴリズム</h3>

<ul><li>再帰</li><li>整列(バブルソート/クイックソート)</li><li>配列における削除/挿入/検索</li><li>スタックにおける削除/挿入</li><li>連結リストにおける削除/挿入/検索</li><li>探索二分木における削除/挿入/検索</li></ul>

Javaによる実装を扱っているので、Javaコレクションフレームワークの解説も少し入っている。本書で扱うJavaの実装は、コレクションフレームワークのほぼすべての実装になる。

初めてプログラミングをはじめた人でJava言語を選択した人は、本書を必ず買うべし！はっきり言って、基本的なデータ構造とアルゴリズムの本は、本書だけで十分です。おすすめです。

<h2>参考</h2>

+基本的なことがまとめられています。結構見やすいです。

<a href="http://www5c.biglobe.ne.jp/~ecb/algorithm/algorithm00.html" target="_blank" class="extlink">アルゴリズム入門</a>

+ソートに関するアルゴリズムがまとめられています。

<a href="http://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/" target="_blank" class="extlink">いろいろなソートアルゴリズム</a>

+本書以外にも手を出したいなら、これもおすすめです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774117293/sorehabooks-22/">Javaによるアルゴリズム事典</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774117293/sorehabooks-22/"><img src="http://books.rakuten.co.jp/com/images/goods/77411729.jpg"   border="0" /></a></td><td valign="top"><font size="-1">奥村 晴彦　杉浦 方紀　津留 和生　首藤 一幸　土村 展之<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774117293&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />アルゴリズムの豊富さに満足<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774117293/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+アルゴリズムのバイブルです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614411X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/475614411X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614411X/sorehabooks-22/"><b>The Art of Computer Programming Volume1 Fundamental Algorithms Third Edition 日本語版</b></a><br />ドナルド・E・クヌース, 有澤 誠, 和田 英一, 青木 孝, 筧 一彦, 鈴木 健一, 長尾 高弘<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />とにかく買え、苦しめ、そして感動しろ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />超豪華な翻訳陣！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />少しでもコンピュータプログラムに関係のある方、必読！<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614411X/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="475614411X"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774116327.09.MZZZZZZZ.jpg" border="0" alt="Javaアルゴリズム+データ構造完全制覇    標準プログラマーズライブラリ">
-----
KEYWORDS:
Java,アルゴリズム,データ構造,完全制覇
-----


-----
CF50_CF_4: オングス (著), 後藤 大地 (監修), 杉山 貴章
CF50_URL: http://ec2.images-amazon.com/images/I/51WDPZCSNWL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774116327/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: リファクタリング覚書き
BASENAME: post_8
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/29/2004 03:06:57 AM
-----
BODY:
リファクタリングとは「ソフトウェアの外部的振る舞いを保ったままで、内部の構造を改善していく作業」をいいます。と、こんな説明は世の中腐るほど出ています。僕のおすすめの「<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22" class="extlink" target="_blank">リファクタリング プログラミングの体質改善テクニック</a>」という本もあります。

ここでは、プロジェクト中のちょっとしたときに、リファクタリングを行えるような覚書きをまとめておこうかと思います。すべてのリファクタリングに先立って<strong>自動テストを行うことがリファクタリングの最低条件</strong>である。
-----
EXTENDED BODY:
<h2>コードの嫌な匂い</h2>

<ul>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#1" class="extlink" target="_blank">重複したコード</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#2" class="extlink" target="_blank">長すぎるメソッド</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#3" class="extlink" target="_blank">大きすぎるクラス</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#4" class="extlink" target="_blank">多すぎる引数</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#5" class="extlink" target="_blank">変更クラスが複数</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#6" class="extlink" target="_blank">変更箇所が多い</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#7" class="extlink" target="_blank">他クラスの属性ばかり使っている</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#8" class="extlink" target="_blank">まとまったデータ</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#9" class="extlink" target="_blank">基本データ型よりオブジェクト</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#10" class="extlink" target="_blank">スイッチ文</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#11" class="extlink" target="_blank">継承する毎に変更が入る</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#12" class="extlink" target="_blank">無駄なクラス</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#13" class="extlink" target="_blank">不要な一般化</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#14" class="extlink" target="_blank">一時属性の多用</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#15" class="extlink" target="_blank">過剰なメッセージチェーン</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#16" class="extlink" target="_blank">過剰な委譲</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#17" class="extlink" target="_blank">相互リンク</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#18" class="extlink" target="_blank">処理は同じで名前が違う</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#19" class="extlink" target="_blank">未熟なクラスライブラリ</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#20" class="extlink" target="_blank">データクラス</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#21" class="extlink" target="_blank">親クラスがほとんど不要</a></li>
<li><a href="http://www.objectclub.jp/technicaldoc/refactoring/refact-smell#22" class="extlink" target="_blank">コメント</a></li>
</ul>

<h2>リファクタリングカタログ</h2>

<ul>
<li><a href="#メソッドの抽出">メソッドの抽出</a></li>
<li><a href="#一時変数の置き換え">一時変数の置き換え</a></li>
<li><a href="#説明用変数の導入">説明用変数の導入</a></li>
<li><a href="#複数の意味を持つ変数は避ける">複数の意味を持つ変数は避ける</a></li>
<li><a href="#引数でわたされた変数への代入を避ける">引数でわたされた変数への代入を避ける</a></li>
<li><a href="#メソッドの移動">メソッドの移動</a></li>
<li><a href="#クラスの分割">クラスの分割</a></li>
<li><a href="#デメテルの法則">デメテルの法則</a></li>
<li><a href="#自己カプセル化">自己カプセル化</a></li>
<li><a href="#オブジェクトによるデータの置き換え">オブジェクトによるデータの置き換え</a></li>
<li><a href="#コレクションのカプセル化">コレクションのカプセル化</a></li>
<li><a href="#条件記述の分解">条件記述の分解</a></li>
<li><a href="#ガード節による条件記述の置き換え">ガード節による条件記述の置き換え</a></li>
<li><a href="#ポリモーフィズムによる条件記述の置き換え">ポリモーフィズムによる条件記述の置き換え</a></li>
<li><a href="#ヌルオブジェクトの導入">ヌルオブジェクトの導入</a></li>
<li><a href="#メソッドに関して">メソッドに関して</a></li>
<li><a href="#メソッドの名前変更">メソッドの名前変更</a></li>
<li><a href="#問い合わせと更新の分離">問い合わせと更新の分離</a></li>
<li><a href="#引数オブジェクトの導入">引数オブジェクトの導入</a></li>
<li><a href="#setメソッドの削除">setメソッドの削除</a></li>
<li><a href="#Factoryメソッドによるコンストラクタの置き換え">Factoryメソッドによるコンストラクタの置き換え</a></li>
<li><a href="#ダウンキャストの隠蔽">ダウンキャストの隠蔽</a></li>
<li><a href="#メソッドの引き上げ">メソッドの引き上げ</a></li>
<li><a href="#インターフェースの抽出">インターフェースの抽出</a></li>
<li><a href="#委譲による継承の置き換え">委譲による継承の置き換え</a></li>
</ul>

<h3 id="メソッドの抽出">メソッドの抽出</h3>

<ul><li>長すぎるメソッド</li><li>コメントがないと処理が理解できない部分</li></ul>

メソッド抽出できる合図です。ただし、<strong>メソッドに良い名前が付けられる場合だけ</strong>抽出します。メソッドには、どんな処理をするかではなく、<b>何をするか</b>によって命名する。<b>メソッド名と本体との意味的な距離が重要であって、メソッド名の長さは関係ない。</b>明快さが向上するなら、メソッド名がコードよりも長くても抽出すべきである。

<h3 id="一時変数の置き換え">一時変数の置き換え</h3>

一度だけ代入される一時変数がある。そんな時、メソッドの問い合わせによる置き換えを検討する。ただ、パフォーマンスなど考慮する場合もあるので、ほとんどの場合無視できる。他のリファクタリングの邪魔になったときだけ実行する。

<h3 id="説明用変数の導入">説明用変数の導入</h3>

長くて、よく考えないとわからないような評価式があった場合、一時変数を使って意味のわかるようにする。条件ロジックにおいて、各条件記述の意味を適切な名前の一時変数を使って説明するのは有効です。ただし、メソッドの抽出を行える場合は、そちらを優先する。メソッドにすることで他の場所でも使える可能性ができる。

<h3 id="複数の意味を持つ変数は避ける">複数の意味を持つ変数は避ける</h3>

ループ変数や、値を集める変数でもなく、複数回代入されるようなものは、意味ごとに変数を分けるべき。その際、<b>適切な名前を付ける</b>こと。

<h3 id="引数でわたされた変数への代入を避ける">引数でわたされた変数への代入を避ける</h3>

メソッドの引数に渡された変数に、値を代入することはさける。「値渡し」と「参照渡し」の混乱をさけるために、代入はしない。結果用の別の変数を用意して、そっちをつかう。

<h3 id="メソッドの移動">メソッドの移動</h3>

メソッドの定義されたクラスの属性よりも、他のクラスの属性のほうをよく使っている場合、属性を良く使うクラスの方にメソッドを移動させたほうがよい。<b>クラス間の結合度を下げるために。</b>逆に、属性を移動させる方法もある。どちらにするかは、やってみてぴったりくる方にする。

<h3 id="クラスの分割">クラスの分割</h3>

ひとつのクラスに、メソッドが多くなりすぎた場合や、責務が複数ある場合は、別々のクラスに分割する。責務で分割する粒度を決める。

<h3 id="デメテルの法則">デメテルの法則</h3>

<a href="http://homepage3.nifty.com/masarl/article/oo-principles.html" class="extlink" target="_blank">オブジェクト指向の法則集</a>

あるオブジェクトから取得したオブジェクトには、直接アクセスしてはいけない。デメテルの法則について、詳しくは<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22" class="extlink" target="_blank">達人プログラマー</a>をご覧あれ。

<h3 id="自己カプセル化">自己カプセル化</h3>

自分のクラスの属性であっても、アクセサメソッドを使ってアクセスする。サブクラスが情報の取り出し方をメソッドによってオーバーライドできること、遅延初期化のようにデータ管理面で、
柔軟性を持たせられることがその理由。逆に、変数に直接アクセスすると、コードが読みやすくなる利点がある。

<h3 id="オブジェクトによるデータの置き換え">オブジェクトによるデータの置き換え</h3>

引数で渡されたデータだけを使って処理をしたり、他のクラスの属性を使って処理をしたりしている場合、それらのデータをクラスとして切り出し、振る舞いを持たせることができる。

<b>配列の各要素がそれぞれ別々の意味を持つようなデータ構造を考えた場合も、オブジェクトとして切り出したほうがすっきりする。</b>配列や、リストなどのコレクションを使う場合は、同じ種類のオブジェクトを保持するときだけにする。

<h3 id="コレクションのカプセル化">コレクションのカプセル化</h3>

getアクセサメソッドで、直接コレクションオブジェクトを返すのはやめにしましょう。コレクションの中身を直接書き換えられてしまう可能性があります。コレクションを隠蔽し、getメソッドでは、読み取り専用のオブジェクトを、コレクションに値を加えたい場合は、クラスにaddメソッドを用意しましょう。コレクションにsetメソッドは必要ありません。自らが仲介役を果たしましょう。

<h3 id="条件記述の分解">条件記述の分解</h3>

複雑な条件記述がある場合、その条件部をメソッドとして切り出します。抽出するメソッドは小さくても、メソッドのほうが条件式よりもコメントのように楽に読めます。

<b>条件記述の抽出は、何を行っているかの記述をなぜ行っているかの文で置き換えることになる</b>ため、非常に読みやすくなります。

<h3 id="ガード節による条件記述の置き換え">ガード節による条件記述の置き換え</h3>

<b>if-then-else構造が使われるときには、if部にもelse部にも同じウェイトが置かれています。</b>

これは、読み手に、両方とも等しく起こる、等しく重要であるということを伝えます。ガード節は「めったに起きないが、起きたときは何もしないで出て行く」ということを伝えます。ガード節はreturnするか例外を投げるかのどちらかです。

ガード節による入れ子条件の置き換えを行う場合のヒントは、条件記述を逆にすることでしばしば行える。

<h3 id="ポリモーフィズムによる条件記述の置き換え">ポリモーフィズムによる条件記述の置き換え</h3>

オブジェクトのタイプや状態でのswitch文が存在する場合、その部分をオブジェクトのポリモーフィズムに置き換えることができます。ポリモーフィズムの真髄は、オブジェクトの振る舞いが型によって変わるとき、明示的な条件記述を書かなくてもすむようにすることです。

このリファクタリングを行う前に、適切かつ必要な継承関係を持っていることが必要です。

<h3 id="ヌルオブジェクトの導入">ヌルオブジェクトの導入</h3>

null のチェックが繰り返し行われる場合、ポリモーフィズムを利用した、nullオブジェクトを導入するとよい。<a href="http://www.hyuki.com/dp/dpinfo.html#NullObject" class="extlink" target="_blank">Null Objectパターン</a>

<h3 id="メソッドに関して">メソッドに関して</h3>

優れたオブジェクト指向のソフトウェアを開発するには、理解が容易で使いやすいインターフェースを提供することが秘訣となります。状態を更新するメソッドと、状態を問い合わせるメソッドを明確に分離することは非常に良いことである。よいインターフェースは、何をすべきかだけを示し、それ以上は何も語らない。クラスのユーザにダウンキャストを強要するのはできるだけさける。

<h3 id="メソッドの名前変更">メソッドの名前変更</h3>

メソッドの名前は、そのメソッドの処理にコメントを付けるとどうなるかを考え、それをそのまま名前にしてしまうとよい。名前だけでなく、シグネチャの部分(引数)の順序を変更することで、メソッドの意図が明確になるなら、変更するべきです。

<h3 id="問い合わせと更新の分離">問い合わせと更新の分離</h3>

値を返す関数は、クラスの状態を変更するなどの副作用がないのが好ましい。<strong>副作用のあるメソッドと、ないメソッドを明確に分離するのは、非常によいこと</strong>です。問い合わせと更新は、明確に分離するべきです。

<blockquote>

ファンクション(関数)とプロシージャ(手続き)を明確に区別したほうがプログラムは分かりやすくなります。ファンクションとは、戻り値を記述して値の取得を意図するもの。プロシージャは、オブジェクトに対して何かしらの処理を行うもの。

<b>ファンクション名には、戻り値を記述するものをつけると良い。</b>例えば、cos()、sin()、currentPenColor()などは良い例です。<b>プロシージャ名には、動詞 + 目的語を記述する良い。</b>例えば、calcMoney()、printReport()、formatDocument()などは良い例です。

<cite>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756102107/sorehabooks-22" target="_blank" class="extlink">コードコンプリート―完全なプログラミングを目指して</a>』 アスキー </cite>

</blockquote>

<h3 id="引数オブジェクトの導入">引数オブジェクトの導入</h3>

本来一緒に扱うべきデータを引数としてたくさん渡している場合、引数オブジェクトの導入を検討する。長い引数リストは理解しづらいものです。引数オブジェクトを導入することで、振る舞いもそのクラスに移動できる場合があります。<b>クラスの責務を単純明快にするのは、オブジェクト指向の原則です。</b>

<h3 id="setメソッドの削除">setメソッドの削除</h3>

setメソッドを提供するというのは、フィールドが変更される可能性があるということを示しています。オブジェクトを生成した後、フィールドを変更したくないのであれば、setメソッドを削除し、フィールドをfinalに設定するべきです。

<h3 id="Factoryメソッドによるコンストラクタの置き換え">Factoryメソッドによるコンストラクタの置き換え</h3>

このリファクタリングは、主にサブクラス化することによって、タイプコードを置き換えたい場合に利用されます。また、単に引数の数値や型の違いではすまない生成時におけるさまざまな振る舞いを実現できます。

<h3 id="ダウンキャストの隠蔽">ダウンキャストの隠蔽</h3>

クラスのユーザにダウンキャストを強要するのはなるべくさけたほうがよい。それは、変更が分散してしまうからです。メソッドが返すオブジェクトは、メソッド内でキャストしてやり、できるだけ特化された戻り値を使用するほうが好ましいです。ただし、インターフェースで返す場合は別の話です。そもそも、インターフェースを使う場合はダウンキャストを使う必要はほとんどありません。

<h3 id="メソッドの引き上げ">メソッドの引き上げ</h3>

まったく同じ処理を行っている2つのクラスがあった場合、共通のクラスを作り、そこにメソッドを移動してやる。オブジェクト指向では、重複するコードは書かないという原則がある。

2つのメソッドが非常によく似ているが、まったく同じではない場合は、<a href="http://www.hellohiro.com/pattern/templatemethod.htm" target="_blank" class="extlink">Template Method パターン</a>が利用できるかもしれない。

<h3 id="インターフェースの抽出">インターフェースの抽出</h3>

ひととまとまりのクライアントが、あるクラスの責任のうち一部だけを利用することがあります。その場合、責任をインターフェースとして抽出することで、責務を明確にすることができます。

インターフェースが機能を追加するように働く場合は、名前に able と付けるとわかりやすい。

<h3 id="委譲による継承の置き換え">委譲による継承の置き換え</h3>

継承を行ったはいいが、スーパークラスの多くの操作がサブクラスではふさわしくないことに気づくことがあります。この場合、多くは正しくインターフェースが切り出せていないのが原因です。これらの状況をすっきりさせるには、継承ではなく、メッセージの委譲を行うことで、必要な機能だけを利用している状況をはっきりさせることができます。

逆に、すべてのインターフェースに対して委譲を行っているような場合は、委譲をクラスの継承で置き換えるべきです。

<h2>参考</h2>

+ C言語によるリファクタリングの例です。
<a href="http://www.s34.co.jp/cpptechdoc/article/c_refactoring/" target="_blank" class="extlink">Refactoring C-code</a>

+ リファクタリングのWebページ版
<a href="http://www.alles.or.jp/~torutk/oojava/maneuver/2000/6-2.html" target="_blank" class="extlink">リファクタリング勉強ノート</a>

+ コードの嫌な匂いのリファクタリング例が載ってます。(PDF)
<a href="http://www.metabolics.co.jp/OOTechnology/Object2001/Refactoring.pdf" target="_blank" class="extlink">リファクタリング</a>

+ J2EEのリファクタリング例が載ってます。Tokenの導入などあります。(PDF)
<a href="http://www-6.ibm.com/jp/software/websphere/developer/j2ee/pdf/4_2.pdf" target="_blank" class="extlink">J2EE リファクタリング</a>

+ すばらしき良書。この本に出会って、変わった気がする。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894712288.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/">リファクタリング―プログラムの体質改善テクニック</a><br />マーチン ファウラー, Martin Fowler, 児玉 公信, 平澤 章, 友野 晶夫, 梅沢 真史<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラムの資産価値を上げる。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラマーにとって必須アイテム<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />いい本です<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894712288"/></a><br /></td></tr></table>
</div>

+ 「リファクタリング」をワークブック形式で学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145027/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756145027.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145027/sorehabooks-22/">リファクタリングワークブック</a><br />株式会社テクノロジックアート<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756145027"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145027/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756145027"/></a><br /></td></tr></table>
</div>

+ 洋書ですが、リファクタリングをデザインパターンで行うといった趣旨の本です。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321213351/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/0321213351.01.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321213351/sorehabooks-22/">Refactoring to Patterns (Addison-Wesley Signature Series)</a><br />Joshua Kerievsky<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=0321213351"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321213351/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="0321213351"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="リファクタリング覚書き">
-----
KEYWORDS:
リファクタリング,Refactoring,プログラミング,体質,改善,テクニック
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: プログラミング作法
BASENAME: post_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/30/2004 03:25:02 AM
TAGS: コーディング規約,プログラミング,定番,良書
-----
BODY:
この世の中に、自分のソースコードを芸術のように扱うプログラマーがいったい何人いるのだろうか。本書を読み終わった後、プログラミングって芸術だよなーって、一人で納得してしまいました。

<strong>ソースコードは、コンピュータが解釈するもの。良いソースコードは、人が解釈できるもの。</strong>自らのプログラミングソースを優れたものとして自慢できるプログラマーに僕はなりたい。本書はそんな願いをかなえてくれる、すばらしきバイブルです。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、以下のような経験をしたことがあるプログラマーに是非とも読んでいただきたい。

<ul>
<li>間違ったアルゴリズムでコーディングしてやたらと時間を無駄にした</li>
<li>使用するデータ構造が死ぬほど複雑になった</li>
<li>プログラムをテストしたのに明白な問題点を見落としていた</li>
<li>5分もあれば見つかるはずのバグを1日がかりで探し回った</li>
<li>プログラムを3倍速くしメモリ使用量も減らしたいと思った</li>
<li>ワークステーションとPCの間でプログラムを移植するのに苦労した</li>
<li>他人のプログラムに少々変更を加えようとした</li>
<li>さっぱり理解できないプログラムを書き直した</li>
</ul>


基本的で互いに関連しあう原則

<ul><li>簡潔性(simplicity)</li><li>明瞭製(clarity)</li><li>一般性(generality)</li><li>自動化(automation)</li></ul>

この4つの原則を基本アプローチとして解説している。

本書の目次は以下のようになっている

<ul><li>スタイル</li><li>アルゴリズムとデータ構造</li><li>設計と実装</li><li>インターフェース</li><li>デバッグ</li><li>テスト</li><li>性能</li><li>移植性</li><li>記法</li></ul>

本書の例は、C言語もしくはそれに似た言語で書かれている。しかし、作法という点で見るとどの言語についても言える、高水準なものが説明されている。

本書の中で特に良かったと思うところを参考までにあげておきます。

<h3>スタイル</h3>

よいコーディングとはどのようなものかを解説しています。具体的なコード例が載っていて、なぜこれが良いのかという理由がはっきりしているのが魅力的です。

名前についても書かれています。変数名やメソッド名、インターフェース名やクラス名にはどのような名前をつけたらよいのかも解説しています。<strong>名前は、情報を含み、簡潔で覚えやすくできれば発音可能な名前にしなければならない。</strong>

他にも、聞きたくても聞けなかった疑問や、使えるTipsなど豊富に盛り込まれています。例えば、「オブジェクトサイズは言語に計算させよう」や「悪いコードにコメントはいらない。書き直せ。」など、プログラマの聖書となるようなアドバイスがたくさんです。

<h3>インターフェース</h3>

設計においてまず解決しなければならない問題をしっかりとした理由をつけて解説してくれています。インターフェース設計で注意する点やライブラリを作るときの心構えなども載っています。

「インターフェースというのは要するに提供者と顧客の間の契約だ」「ペアとなる作業(リソースのオープンとクローズなど)は同一のレベルないし同じ場所で実行されるべきだ」「原則として、ライブラリルーチンはエラー発生時に単純に死んではならない」「ユーザに内緒で何かをするな」など、目からウロコが落ちるアドバイスばかりです。

<h3>デバッグ</h3>

「丁寧な治療よりもほんのちょっとした予防のほうが、現実にはるかに効き目がある」「プログラムをステップ実行するよりも、もっと真剣に考えたり、重要部分に出力分野自動チェックコードを追加したりするほうが効率的」「コードをなめるように読んで、変更を施さずにしばらくよく考えてみること」

デバッグするときの金言集になっています。

本書について説明すればするほど、本書の価値が下がってしまうような気がします。<strong>ほんとうに良いものに、説明は必要ない。</strong>そんな言葉が一番マッチする本だと思います。

<h2>参考</h2>

+ C言語の処方箋

<a href="http://www.pro.or.jp/~fuji/mybooks/cdiag/" target="_blank" class="extlink">Cプログラミング診断室</a>

+ 本書を実践している人たちがずばりこの人たちでしょう。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894712741.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/">達人プログラマー―システム開発の職人から名匠への道</a><br />アンドリュー ハント, デビッド トーマス, Andrew Hunt, David Thomas, 村上 雅章<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />プログラマーの為の自己啓発本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />SEの基本が書かれてます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />達人エンジニアになる方法<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894712741"/></a><br /></td></tr></table>
</div>

+ アルゴリズムに特化した、超おすすめ本

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894712369.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/">珠玉のプログラミング―本質を見抜いたアルゴリズムとデータ構造</a><br />ジョン ベントリー, Jon Bentley, 小林 健一郎<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラマなら読むべき本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />アルゴリズムって何?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />視点が変わる本です<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894712369"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4756136494.09.MZZZZZZZ.jpg" border="0" alt="プログラミング作法 ">
-----
KEYWORDS:
プログラミング,作法,スタイル,品質
-----

COMMENT:
AUTHOR: きまぐれＴ
EMAIL: kimagure-bbs1010@jcom.home.ne.jp
IP: 61.23.192.44
URL: http://minna-shoseki.seesaa.net/
DATE: 06/30/2004 02:48:03 PM
きまぐれTです。
早速トラックバック頂きましてありがとうございます。m(_　_)m
これからも、どんどんと活用ください！！＾o＾

私も仕事上、プログラムを書くのですが、
なかなか悩みます。
忘れた頃に見直してもわかるプログラム。
人が見てもわかるプログラム。
これを目指しているのですが、なかなかです。

でも反面、きれいなプログラムを書くために
時間をとるのも馬鹿らしいですしね。＾＾；

う、うーん。。。
難しい。＞＜
-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 192.168.0.2
URL: http://hamasyou.com/
DATE: 07/01/2004 10:24:46 AM
きれいなプログラムを書くのって、大変ですよね。
一度習慣付けてしまえば、と思ってはいるものの実際はなかなか ^^;
-----


-----
CF50_CF_4: ブライアン カーニハン (著), ロブ パイク (著), Brian Kernighan (原著), Rob Pike (原著), 福崎 俊博 (翻訳)
CF50_URL: http://ec3.images-amazon.com/images/I/515BKZF6GXL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/sorehabooks-22
CF50_CF: アスキー
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: ロールプレイングゲームプログラミング
BASENAME: post_2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 07/02/2004 02:10:02 AM
TAGS: わかりやすい,ゲームプログラミング
-----
BODY:
最近のゲームは個人のレベルで作るには量も質も大きすぎて手の届かないところまで言ってしまった感じがある。一昔前の、「<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00005OVEB/sorehabooks-22" target="_blank" class="extlink">タクティクスオウガ</a>」や「<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00005U0MH/sorehabooks-22" target="_blank" class="extlink">ファイナルファンタジータクティクス</a>」などのシミュレーションRPGや、テーブルゲームの「<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00009KAP7/sorehabooks-22" target="_blank" class="extlink">カルドセプト</a>」などは、僕の中で大ヒットなゲームでした。

そんなシミュレーションRPGや、斜め上から見下ろす感じのテーブルRPG(?)みたいなゲームを作れるようになっちゃうのが本書です。「いまさら自作のRPGなんてなぁ・・・」って人も、本書一冊で、自分の好きなRPGゲームが作れちゃうなんてすげーと思って、本書を読んでみたらどうですか？
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、開発環境に<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00009PJON/sorehabooks-22" target="_blank" class="extlink">Visual C++6.0</a> を使って、自分でシミュレーションRPGを作れるようになってしまう本です。Windowsプログラミングが始めてという人にも、丁寧な解説がついているので恐れることはありません。初めてRPGを作る人にはRPGって、こうやってやるんだーっという驚きが出るにちがいありません。

ゲームシステムの設計からウィンドウ表示のやり方、マップ・キャラクターの書き方まで本書だけで一通りのシミュレーションRPGゲームはつくれてしまいます。サンプルに出来上がったゲームがついているのもうれしいです。プログラミング中にハマった場合に、サンプルを見て確認したり、息抜きにやってみたりできます。

本格的にゲーム作りをしたい人も、初めてゲーム作りを体験する人も、最初は本書からやってみるといいと思います。ゲーム作りのノウハウ、キャラクターやマップの作り方まで、一通りのことを覚えることができます。

<h2>ノウハウかじり</h2>

<h3>CPUの行動ルーチンの考え方</h3>

基本的にCPUが行動を判別するときに使う考え方は「数値化」です。数値が高いか低いかを選択するようにします。たまに、ランダムな行動をとらせたり、少し低い数値を選んだりすることで、CPUの強さを調節し、ゲームバランスを整えます。

ゲームルールを作るうえで考慮する点として、「<strong>ルール上でプレイヤーを不利に作らない</strong>」ということがあります。例えば、数値化した場合に端数が出た場合、プレイヤーに不利にならない用にします。(端数切捨てなど)そうしないと、プレイヤーはいかさまをされている印象を受けてしまいます。

<h3>ビットマップの概要</h3>

Windowsが扱うビットマップには大きく分けて3つ種類があります。

<dl>
<dt>デバイス依存ビットマップ(DDB)</dt>
<dd>HBITMAP型のハンドルで扱われ、CreateBitmapなどの関数で作られる。</dd>
<dt>デバイスに依存しないビットマップ(DIB)</dt>
<dd>メモリ上のフォーマットを規定したもので、作成用のAPIは用意されていない。</dd>
<dt>両方の特徴を持ったビットマップ(DIBSection)</dt>
<dd>CreateDIBSectionで作られる、両方の特徴を持ったもの。</dd>
</dl>

DIBSectionはWindowsのリソースを消費するため、表示を行わない場合は使用しないほうが良いでしょう。<strong>特別な理由がない限り、DIBを利用するようにします。</strong>DDBは、HBITMAP型のハンドルが必要な場合(プログラムの都合で必要な場合)に使います。

DIBの構造仕様は、Windowsに定められていますが、本書には実装サンプルが存在します。

<h3>移動の考え方</h3>

移動は、一歩の移動を考えて、それの応用になります。例えば、二歩の移動は、1歩の処理 + 1歩の処理 になります。一般式で書くと 1歩の処理 + (n-1)歩の処理 = n歩の処理 になります。再起処理を使えば、移動処理を簡単に書けるということです。

<h3>マップデータ</h3>

マップは、設定ファイルに構造を書いておき、それを解析する方法が一般的です。起伏のあるマップを表現したい場合は、設定ファイルに数値化しておき、それを解析するという手法がとられます。


<h3>戦闘の考え方</h3>

戦闘シーンでのCPUの考え方としては、そのマップのクリア条件を満たすように行動させるのがポイントです。クリア条件には、例えばキャラクターの全滅などとします。複雑なルール、例えば属性の効果などは、仮想計算を行い一番効果的な手段を選択するようにします。

<h2>参考</h2>

+ ドット絵のキャラクタを、本格的に書きたいと思ったら、この本が絶対的におすすめです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844357050/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4844357050.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844357050/sorehabooks-22/">ドット絵職人―すべてのパソコンに入っている「ペイント」ツールでつくる</a><br />Suguru.T<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ドット絵職人の復権？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />とても楽しい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にもできたドット絵<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844357050/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4844357050"/></a><br /></td></tr></table>
</div>

+ アドベンチャーゲームを作りたくなったら、本書をおすすめ！

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797320273/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797320273.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797320273/sorehabooks-22/">アドベンチャーゲームプログラミング</a><br />坂本 千尋<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />良書です。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797320273/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797320273"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797316802.09.MZZZZZZZ.jpg" border="0" alt="ロールプレイングゲームプログラミング">
-----
KEYWORDS:
ロールプレイング,RPG,シミュレーション,ゲーム,プログラミング
-----


-----
CF50_CF_4: 坂本 千尋 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/51CY7BK9EAL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797316802/sorehabooks-22
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: プログラマのためのJava設計ベストプラクティス
BASENAME: java_3
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/04/2004 01:21:14 AM
TAGS: Java,ベストプラクティス,定番,良書
-----
BODY:
<strong>開放・閉鎖原則</strong>(Open Closed Principle)、<strong>Liskovの置換原則</strong>(Liskov Substitution Principle)、<strong>依存関係反転法則</strong>(Dependency Inversion Principle)、<strong>インターフェース分離原則</strong>(Interface Segregation Principle)、<strong>コンポジット再利用原則</strong>(Composite Reuse Principle)、<strong>最小知識原則</strong>(Principle of Least Knowledge)、以上が本書で説明されているオブジェクト指向設計におけるクラス原則です。

優れたクラス設計を行うためには、上記のような頭の痛くなる言葉を覚える必要はありません。が、この言葉の意味と何が言いたいのかを理解することは大切です。

本書は、オブジェクト指向の原則、デザインパターンとその実践的な利用方法、UMLとJavaとのマッピング、モデリングの指針、アーキテクチャモデリング、ソフトウェア開発プロセスといった、避けては通れない問題を丁寧に解説している。
-----
EXTENDED BODY:
<h2>特徴</h2>

まず、本書の目次を見てください。

<ul><li>オブジェクト指向の原則とパターン</li><li>クラス原則</li><li>パッケージ原則</li><li>パターン</li><li>UML入門</li><li>UMLの基礎</li><li>UMLとソフトウェア開発プロセス</li><li>モデリング戦略</li><li>要件モデリング</li><li>問題分析</li><li>アーキテクチャの確立</li><li>クラスの割り当て</li><li>振る舞いモデリング</li><li>構造モデリング</li><li>アーキテクチャモデリング</li><li>アーキテクチャメカニズム(レイヤ・Observer・MVC・パーティション)</li><li>サブシステムの設計</li><li>RUPとXP</li><li>J2EEとUML</li></ul>

本書のすべてを読破する必要はないと思います。が、240ページと薄い部類に入る本なので、読み始めるのに気合とか勇気とかはいらないと思います。

本書の中で特におすすめ＆読んで欲しい部分は、「オブジェクト指向の原則とパターン」です。本書のタイトルが「プログラマのためのJava設計ベストプラクティス」となっていますが、この「オブジェクト指向の原則とパターン」の部分を含め、本書のほとんどは、Javaに依存しません。

本書の中で、UMLに関する部分はあまり期待しないほうがいいです。他にもっといい解説をしている本が出ているので、UMLに関してはそちらを参考にしたほうが良いでしょう。ただ、それ以外の部分に関しては、結構深いところや経験のない技術者の方は気づきにくい点も解説してあり、非常に役に立ちます。

設計に関して解説している本で、オブジェクト指向の原則に触れているものは少ないと思います。原則は、パターンよりも抽象度が上の概念ですので、ここをしっかり理解できると、デザインパターンも理解が早いと思います。買って損はないと思います。おすすめです。

<h2>おぼえがき</h2>

<h3>開放・閉鎖原則(Open Closed Principle: OCP)</h3>

既存のクラスを修正せずに、システムに新しい機能を追加できるように設計すること。「<strong>モジュールは拡張性について開いて（Open）おり，修正について閉じて（Closed）いなければならない。</strong>」

詳しくは<a href="http://homepage3.nifty.com/masarl/article/dp-ocp.html" target="_blank" class="extlink">デザインパターンとOpen-Closed Principle</a>を参考に。

<h3>Liskovの置換原則(Liskov Substitution Principle: LSP)</h3>

振る舞いにおいて、下位クラスのインスタンスが上位クラスのインスタンスとみなせるかどうか。

下位クラスで保証する事前条件を上位クラスで保証する事前条件より強めることはできない。つまり、下位クラスは、上位クラスよりも事前条件を甘くしなければならないということ。Javaの例で言うと、親クラスに

<pre class="code"><span class="keyword">public abstract void</span> execute() <span class="keyword">throws</span> IllegalArgumentException</pre>

というメソッドがあるとする。サブクラスでは

<pre class="code"><span class="keyword">public void</span> execute() <span class="keyword">throws</span> Exception</pre>

 という宣言は許されない。「throws Exception」は、親クラスの例外より高水準(強い)例外は定義できない。

下位クラスのメソッドで保証する事後条件を、上位クラスの事後条件よりも弱くすることはできない。Javaの例で言うと、Objectクラスのcloneというメソッドは、protected宣言されている。サブクラスでは、cloneというメソッドをprotected以上のアクセス制限をかけなければいけない。protected Object clone() throws CloneNotSupportedException
というメソッドがあります。サブクラスでは、<strong>private</strong> Object clone() throws CloneNotSupportedException という宣言は許されないということになります。

参考文献は、<a href="http://www.ogis-ri.co.jp/otc/hiroba/technical/OO_Guide/pdf/OO_Guide.pdf" target="_blank" class="extlink">オブジェクトの広場(PDF)</a>です。

<h3>依存関係反転原則(Dependency Inversion Principle: DIP)</h3>

抽象に依存する。具象に依存してはいけない。例えば、インスタンスを生成するために具象クラスを指定しする場合(newする場合)は、依存関係反転原則を侵害しているといえる。この場合、主な解決策は、Factoryクラスを使用して、インスタンス生成を具象クラスに依存させない用にする。

しかし、すべてのインスタンス生成にFactoryクラスを適用するのはばかげていて、実際には、クラスの実装が将来変更するかどうか不明な場合にこの原則を適用する。

<h3>インターフェース分離原則(Interface Segregation Principle: ISP)</h3>

単独の汎用的なインターフェースよりも、多くの特化したインターフェースのほうが良い。つまり、インターフェースの凝集度を高めるべきであるということ。<strong>インターフェースは、オブジェクトが存在している瞬間に果たす役割に過ぎない</strong>ということから、インターフェースの操作は複数の役割に対応しないように定義すべきである。

<h3>コンポジット再利用原則(Composite Reuse Principle: CRP)</h3>

継承よりもコンポジションのほうがよいというもの。継承は、静的な関連しかできないが、コンポジションは動的な関連にできる。また、サブクラスの種類が増えた場合に、継承では対応できなくなってくる。なにより、開放・閉鎖原則を侵害してしまう。

<h3>最小知識原則(Principle of Least Knowledge: PLK)</h3>

別名、デメテルの法則とよばれる。別のオブジェクトのメソッド呼び出しで取得できるオブジェクトのメソッドは呼び出さないというもの。この原則の例外は、インターフェース型で取得した場合である。インターフェース型で取得したオブジェクトに関しては、メソッド呼び出しを許可できる。

詳しい解説は、<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22" target="_blank" class="extlink">達人プログラマー</a>が参考になります。

<h2>参考</h2>

+ オブジェクト指向の法則に関してよくまとめられています。

<a href="http://homepage3.nifty.com/masarl/article/oo-principles.html" target="_blank" class="extlink">オブジェクト指向の法則集</a>

+ 設計のさらに上級編(J2EE編)はこちら

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715821/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894715821.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715821/sorehabooks-22/">管理者のためのJ2EE設計ベストプラクティス</a><br />ハワー・ザマン アーメド, ケアリー・E. アンリッシ, Khawar Zaman Ahmed, Cary E. Umrysh, 船切 誠, 今野 睦<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />管理者さんも、たいへんだなぁ<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715821/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894715821"/></a><br /></td></tr></table>
</div>

+ 法則や原則以外のプログラマーが知っておくとよいことが非常に丁寧にまとめられています。【超おすすめ】

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894712741.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/">達人プログラマー―システム開発の職人から名匠への道</a><br />アンドリュー ハント, デビッド トーマス, Andrew Hunt, David Thomas, 村上 雅章<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />プログラマーの為の自己啓発本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />SEの基本が書かれてます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />達人エンジニアになる方法<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894712741"/></a><br /></td></tr></table>
</div>

+ 本書より厚めですが、こちらもおすすめ。UMLに関して非常に丁寧に解説してくれます。本書のUMLの部分を補うだけでなく、こちらもオブジェクト指向の原則を解説してくれています。【超おすすめ】

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894713861.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/">実践UML―パターンによる統一プロセスガイド</a><br />クレーグ ラーマン, Craig Larman, 依田 光江, 依田 智夫, 今野 睦<br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894713861"/></a><br /></td></tr></table>
</div>

+ 現場で使える即知識。いかがですか？

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798106976.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/">Javaプログラミングの処方箋</a><br />宇野 るいも ， arton<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798106976"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798106976"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894715937.09.MZZZZZZZ.jpg" border="0" alt="プログラマのためのJava設計ベストプラクティス">
-----
KEYWORDS:
プログラマ,Java,設計,ベストプラクティス,原則
-----


-----
CF50_CF_4: カーク クネンシルト (著), Kirk Knoernschild (原著), 長瀬 嘉秀 (翻訳), 今野 睦 (翻訳), テクノロジックアート (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51Q1TYA8MWL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894715937/sorehabooks-22
CF50_CF: ピアソンエデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Java2エンタープライズシステム構築作法
BASENAME: java2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/07/2004 02:17:51 AM
TAGS: J2EE,Java,エンタープライズ
-----
BODY:
この記事を書いている今では、Javaはエンタープライズシステム構築の場面で、非常に大きな成功を収めていると思います。サーブレット/JSP、EJBといったサーバーサイド技術や、JDBC、JNIといったJ2EE技術、RMIによる分散オブジェクト技術。Javaで業務用アプリケーションを作った事のある人なら、一度は聞いたことのある名前だと思います。

エンタープライズシステム構築技術の中には、忌み嫌われるものもいくつかあります。それでも僕は、その原理や実装、実情を踏まえた上で良し悪しを決めたい。そのための知識を得るために本書を読みました。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、Javaにおけるエンタープライズシステム構築技術(手っ取り早く言うとJ2EEです)について解説しています。幅広く深い知識を要求されるエンタープライズJavaを、一冊でこれだけの情報を得られるのは、非常に評価できると思います。ただ、エンタープライズJavaに知識のない人が、興味本位で読もうとすると焼けどします。少し知識のある人が読むことが、本書を一番理解できると思いました。

本書は、少し訳がわかりづらいです。その上、複雑な技術に関しての解説となっていますから、初心者には非常に厳しかったです。ある程度知識を蓄えた後で本書を読むことをおすすめします。技術的に濃い部分を中心に解説していますので、入門書としては失格ですが中級者以上の人には、是非読んでもらいたいと思いました。本書のよさがわかると思います。

本書の目次

<ul><li>エンタープライズJavaによるシステム開発の基礎</li><li>JDBCについて</li><li>Javaサーブレットの展開</li><li>JNIによるJavaと既存システムとの融合</li><li>オブジェクトの直列化</li><li>RMIについて</li><li>Java IDL-JavaとCORBAの接続</li><li>EJBについて</li></ul>

<h2>覚書き</h2>

<h3>JDBCのURL構文</h3>

URLとは、リソースが存在する実際の位置を表したものです。インターネットをやるときによく見る「アドレス」が主な例です。JDBCドライバを目的のデータベースと通信させるためにURLを指定します。このURLも、実は、インターネットのアドレスとまったく同じ表記になっています。

<pre>
JDBC:<サブプロトコル>:<サブネーム>://<ホスト名>:<ポート番号>/<データベース名>
</pre>

例： jdbc:mysql://www.xlegend.dip.jp:7777/testdb

上記の例では、「jdbc:mysql」の部分がプロトコル、「www.xlegend.dip.jp:7777」の部分がホスト名とポート番号、「testdb」というのが実際のデータベース名になります。

このように、JDBC接続時に使われるURLも、インターネットのアドレス部分となんら変わらないことがわかると思います。

<h3>トランザクション隔離レベル</h3>

java.sql.Connectionクラスには、トランザクション隔離レベルが定義されています。

<dl>
<dt>TRANSACTION_NONE</strong></dt>
<dd>トランザクションはサポートされない</dd>
<dt>TRANSACTION_READ_COMMITTED</dt>
<dd>不確定な読み込み(dirty read)を阻止。繰り返し不能な読み込み(nonrepeatable read)、架空読み込み(phantom read)は可能。</dd>
<dt>TRANSACTION_READ_UNCOMMITTED</dt>
<dd>不確定な読み込み(dirty read)、繰り返し不能な読み込み(nonrepeatable read)、架空読み込み(phantom read)のどれも可能。</dd>
<dt>TRANSACTION_REPEATABLE_READ</dt>
<dd>不確定な読み込み(dirty read)、繰り返し不能な読み込み(nonrepeatable read)を阻止。架空読み込み(phantom read)は可能。</dd>
<dt>TRANSACTION_SERIALIZABLE</dt>
<dd>不確定な読み込み(dirty read)、繰り返し不能な読み込み(nonrepeatable read)、架空読み込み(phantom read)のどれも阻止。</dd>
</dl>

<dl>
<dt>不確定な読み込み(Dirty read)</dt>
<dd>読んだデータが後で無効にされる</dd>
<dt>繰り返し不能な読み込み(Nonrepeatable read)</dt>
<dd>同じデータを2回読むと値が違う</dd>
<dt>架空読み込み(Phantom read)</dt>
<dd>存在しなかったはずのデータが後から現れる</dd>
</dl>

トランザクションの隔離レベルを変更するのは、トランザクションを開始する前にするべきです。トランザクション実行中に隔離レベルを変更すると、その時点でトランザクションがコミットされてしまいます。

<h3>RMI</h3>

オブジェクトを直列化(Serialize)してネットワーク通信を行う場合、バイトコードは単純なテキストとして送られます。金融系など、セキュアな環境で利用を想定している場合、バイトコードを暗号化するという処理が必要になります。

もうひとつの方法は、そもそも重要なデータをネットワーク通信で送らないという方法があります。「transient」というキーワードを付けることで、そのフィールドは直列化されません。

<h3>オブジェクトバージョンの管理</h3>

直列化されたオブジェクトには、固有の識別番号SUIDが振られます。SUIDは、クラス定義によって流動的に変わってしまいます。これでは、一度リリースした後に修正をするとバージョンが変わってしまって、直列化したデータを元に戻すことができなくなります。

そこで、クラス自体にバージョン番号を持たせるという方法がとれます。JDKで提供される「serialver」というツールを使って、SUIDを生成できます。これをstatic final long serialVersionUID= 387249290804798024L というように埋め込むことで、常に同じSUIDを使うことができるようになります。

<h2>参考</h2>

+ J2EEに関する技術の紹介は、こちらでもしています。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">実践J2EE システムデザイン</a><br />ロッド・ジョンソン<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797322888"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />坊主にくけりゃ袈裟までにくい?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに実践　まさに必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Spring Freamworkの作者に迫れる唯一の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797322888"/></a><br /></td></tr></table>
</div>

+ さらなる知識のたくわえに

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756144209/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756144209.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756144209/sorehabooks-22/">J2EEプログラミング講座</a><br />宇野 るいも ， arton<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756144209"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756144209/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756144209"/></a><br /></td></tr></table>
</div>

+ 読みやすいです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106437/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798106437.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106437/sorehabooks-22/">論より現場のJ2EE入門</a><br />(株)サンブリッジテクノロジーズ<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798106437"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />かなりのスピードで読めます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />1冊でJ2EE関連諸技術の概要を通勤電車で！<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106437/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798106437"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4274079031.09.MZZZZZZZ.jpg" border="0" alt="Java2エンタープライズシステム構築作法">
-----
KEYWORDS:
Java2,エンタープライズ,システム,構築,作法,J2EE
-----


-----
CF50_CF_4: ゴヴィンダ シシャドリ (著), ゴパランサレシュ ラジ (著), Govind Seshadri (原著), Gopalan Suresh Raj (原著), あびこ ひろし (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51DD1HK1QTL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4274079031/sorehabooks-22
CF50_CF: オーム社
-----
CF50_CF_5:

-----
CF50_CF_3: 2
--------
AUTHOR: hamasyou
TITLE: 図解入門 よくわかる最新オブジェクト指向の基本と仕組み
BASENAME: 図解入門_よくわかる最新オブジェクト指向の基本と仕組み
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/09/2004 01:50:53 PM
TAGS: オブジェクト指向,図解シリーズ
-----
BODY:
実践でそのまま使えるオブジェクト指向の考え方を学べるのが本書の特徴です。オブジェクト指向自体を解説する場合、抽象度が高く言っている意味はわかるけど、それがなんなの？ってなることが多い中、本書は開発現場でそのまま使える知識にまで落として解説しています。

例えば、「検索」という機能をオブジェクト指向でいうクラスの責務に併せて考える場合、どのクラスのメソッドとして実装すればしっくりくるのかということを解説していました。本書の中では、この例の場合は、static メソッドして、本の検索ならば本クラスに、著者の検索ならば著者クラスに実装する方法が解説されていました。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の特徴は、実践で使えるオブジェクト指向の知識を解説している点にあると思います。現場で開発を行ってきた著者ならでわの視点で、かゆいところに手が届く説明がいろんなところにありました。

例えば、検索で返された結果のページ処理(次へ・前へ)の公式や、ドキュメントは追跡可能でなければならない(プレーンテキストでドキュメントを書くより、HTMLで書いたほうがリンクが使える！)など、「確かになぁ」という発見がありました。

オブジェクト指向に関する本の中では、サイズも小さく量も少ないと思います。それでもよくまとまっていて、ほんとにわかりやすいの一言です。オブジェクト指向を始めてみたい人や開発の現場でほんとにオブジェクト指向ってこれでいいのか？という人に本書をおすすめします。

本書の目次です。(一部抜粋)

<ul><li>オブジェクト指向とは</li><li>オブジェクト指向に向くもの、向かないもの</li><li>オブジェクトとは？</li><li>オブジェクトを定義するということ</li><li>カプセル化・メッセージ・継承</li><li>メソッドサーチ　受動性と自立性</li><li>要求定義</li><li>オブジェクト指向分析</li><li>分析でするべきこと</li><li>オブジェクト候補の切り出し</li><li>オブジェクトの抽出</li><li>オブジェクト間の関連</li><li>オブジェクト指向設計</li><li>インターフェースを考慮する</li><li>オブジェクトの同一性</li><li>オブジェクトの永続性とデータベース</li><li>デザインパターン</li><li>オブジェクト指向プログラミング</li><li>状態管理の実装</li><li>倉庫の実装(シングルトンの実装)</li><li>ラッパーの実装</li><li>リスナーの実装(オブザーバの実装)</li><li>複製の実装(cloneの実装)</li><li>データベース周りの実装</li><li>よりよりオブジェクト指向開発のために</li></ul>

<h2>覚書き</h2>

<h3>ページ処理の公式</h3>

検索機能を実行して、結果を取得した場合に件数が多いと１ページにすべては表示できません。そこで、ページ遷移処理が入ることが多々あります。そんなページ処理の公式(デザインパターン)です。

ページ遷移時に表示する項目として通常、「全検索件数」、「総ページ数」、「現在の表示ページ」、「前ページ」、「次ページ」の５つの情報があります。これらの情報を導くためには、

<ul><li>検索結果の全件数(X)</li><li>１ページに表示する件数(Y)</li><li>現在のページが何ページ目か(Z)</li></ul>

という３つの情報が必要になります。

３つの情報を用意したら、下の要領で表示項目を求めることができます。

<table>
<tr>
   <th>概要</th>
   <th>内容</th>   
</tr>
<tr>
  <td>全検索件数</td>
  <td>X</td>
</tr>
<tr>
  <td>総ページ数</td>
  <td>X ÷ Y の切り上げ整数 </td>
</tr>
<tr>
  <td>現在の表示ページ</td>
  <td>Z</td>
</tr>
<tr>
  <td>前ページ</td>
  <td>(Z - 1) &gt;= 1 の場合は Z - 1 </td>
</tr>
<tr>
  <td>次ページ</td>
  <td>(Z + 1) &lt;= (総ページ数) の場合は Z + 1 </td>
</tr>
</table>

<h3>同一性と同値性の区別</h3>

オブジェクト指向において、オブジェクト同士が同一なのか同値なのかを区別することは非常に大切です。例えば、「よくわかる最新オブジェクト指向の基本と仕組み」という本オブジェクトがあるとします。同値つまり同じ内容を表しているかどうかは、本の場合はISBNを比較すればわかります。同一の内容を表す本であれば同じISBNを持つはずです。

しかし、オブジェクトが同一であるかは判定できません。１つはAさんの持つ本。もう１つはBさんの持つ本である場合、２つの本は同一のものとはいえません。

そこで、同一性を確認するために、古くからデータベースなどでは「主キー」というものを使い同一性のチェックを行っていました。この考えをオブジェクトにも反映させて、同じキーを持つものを同一と保証するようにします。

<h3>状態を問い合わせるメソッド</h3>

オブジェクト指向において、オブジェクトの状態がどうであるかはオブジェクト自身に問い合わせるようにするべきです。これにより、簡素な記述ができる場面が増えると思われます。

<h2>参考</h2>

+ オブジェクト指向を体にしみこませたい人はこれをおすすめ。読みやすく、わかりやすいです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104183/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104183.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104183/sorehabooks-22/">オブジェクト脳のつくり方―Java・UML・EJBをマスターするための究極の基礎講座</a><br />牛尾 剛 ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104183"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />誤植が多くて<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私も、オブジェクト脳になりたい。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ちょっと変わったオブジェクト教本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104183/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104183"/></a><br /></td></tr></table>
</div>

+ 図解シリーズUML編はどうですか？

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798002879/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798002879.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798002879/sorehabooks-22/">よくわかる最新UMLの基本と仕組み―オブジェクト指向ソフトウェア設計の基礎</a><br />東海林 誠<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798002879"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />UMLの概略を把握する本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />あくまでさわりだけ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />最初に読むには最適な本だと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798002879/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798002879"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798004413.09.MZZZZZZZ.jpg" border="0" alt="図解入門 よくわかる最新オブジェクト指向の基本と仕組み">
-----
KEYWORDS:
よくわかる,オブジェクト指向,基本,仕組み,図解入門
-----


-----
CF50_CF_4: 近藤 博次 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51P2700Z98L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798004413/sorehabooks-22
CF50_CF: 秀和システム
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: JavaプログラミングFAQ
BASENAME: javafaq
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 07/12/2004 01:21:35 AM
TAGS: FAQ,Java
-----
BODY:
Web開発に関わる初心者プログラマーにおすすめです。本書は、JavaでWeb開発をするときの疑問点、注意点についてFAQ形式でまとめられています。JSP/Servlet、J2EE、EJBに関するFAQが載っています。

Web開発の初心者が抱く疑問点を、「知識(Knowledge)」と「コツ(Tips)」に分けて解説してあります。JSP/Servletで文字化け問題が起こる仕組みから、JDBCドライバの種類と使い分けについてまで、浅いところから深いところまで色々な疑問点があげられていて、Web開発を行った経験のある人でも新しい発見があると思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の対象読者は、Javaの開発経験はあるが、Web開発は初めてという方です。基本的な原理や仕組みを解説した項目が多いので、Web開発に携わって長い人には、知っている知識が多いと思いました。

本書は、2000年12月から「<a href="http://www.atmarkit.co.jp/fjava/" target="_blank" class="extlink">＠IT(アットマーク・アイティ) Java Solutionフォーラム</a>」で連載された「Java Solution FAQ」の記事をまとめたものになっているそうです。大幅加筆をおこない、コラムなどからも追加知識を得られるようになっています。Webの方でどんなFAQが載っているのか確認し、常に手元において置きたいようであれば本書を購入するというのがいいと思います。1800円と、技術書にしては手ごろな値段になっていることですし。

読んだ感想としては、かなり基礎知識的な部分が多いという印象があります。これからWeb開発者として食べていく人には深い知識があれば越したことはないですが、目先のプロジェクトだけをこなすなら、Webの記事を適度に参考にすれば間に合うかなと思います。

それでも、本書を購入する価値は、1800円という低価格から考えるとかなり有だと思いました。買って損はなかったです。

<h2>覚書き</h2>

<h3>サーブレットで日本語文字を出力するときの注意点</h3>

基本的に現在の開発アーキテクチャ(デザインパターン)からすると、サーブレットでHTMLの出力を行うことはアンチパターンとされています。それでもときには出力せざるをえない場面に出くわすことがあります。

サーブレットでは、HttpServletResponseクラスのsetContentTypeメソッドでエンコーディングを指定しないと「ISO-8859-1」(いわゆるLatin文字)で出力エンコーディングされてしまいます。これでは日本語文字は化けてしまいますので、適切なエンコーディングを「charset=???」(???にはエンコーディング文字(Shift_JIS,EUC-JPなど)を指定する)の形で指定します。

<h4>参考</h4>

+ <a href="http://www.atmarkit.co.jp/fjava/rensai2/webopt08/webopt08.html" target="_blank" class="extlink">文字化け"???"の法則とその防止策(＠IT)</a>

+ <a href="http://www.atmarkit.co.jp/fjava/onepoint/svltjsp/svltjsp11.html" target="_blank" class="extlink">サーブレットからの出力(＠IT)</a>

<h3>&lt;%@ include %&gt;と&lt;jsp:include&gt;の違い</h3>

&lt;%@ include %&gt;タグによって指定されたファイルは、JSPがサーブレットにコンパイルされる前にJSPの一部としてインクルードされます。つまり静的インクルードというわけです。<strong>インクルードされるファイルを更新しても、JSPが更新されるまで変更は反映されません。</strong>

一方、&lt;jsp:include&gt;は、JSPの一部としてファイルをインクルードするのではなく、インクルードファイルへのURLをリクエストとして送信し、その結果を動的にインクルード場所に挿入して表示します。この場合、動的なインクルードになります。<strong>インクルードされるファイルを更新すれば即座に反映されます。</strong>この場合のインクルード対象のURLは、単独でアクセスできるものを指定する必要があります。

<h4>参考</h4>

+ <a href="http://www.atmarkit.co.jp/fjava/rensai/jsp05/jsp05.html" target="_blank" class="extlink">インクルードによるコードの再利用で効率化をはかる(＠IT)</a>
+ <a href="http://www.atmarkit.co.jp/fjava/rensai/jsp09/jsp09.html" target="_blank" class="extlink">JSPから別のファイルにアクセスする(＠IT)</a>

<h2>参考</h2>

+ 本書の元になった、＠ITの記事です。

<a href="http://www.atmarkit.co.jp/fjava/" target="_blank" class="extlink">＠IT Java Solution</a>

+ Java言語自体へのFAQです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872804430/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4872804430.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872804430/sorehabooks-22/">Javaの質問箱</a><br />Java FAQプロジェクト<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4872804430"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />机の上に一冊おいておくと便利かも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />初心者にやさしい<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872804430/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4872804430"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4534033192.09.MZZZZZZZ.jpg" border="0" alt="JavaプログラミングFAQ">
-----
KEYWORDS:
Web,開発,Java,プログラミング,FAQ,つまづく
-----


-----
CF50_CF_4: テンアートニ (著)
CF50_URL: http://ecx.images-amazon.com/images/I/41MGS330G9L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4534033192/sorehabooks-22
CF50_CF: 日本実業出版社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: テストはソフトウェア設計である
BASENAME: post
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 07/14/2004 05:18:11 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a>
</p>

「アジャイルソフトウェア開発の奥義」を読み始めました。最近では、ソフトウェアエンジニアに馴染みが深くなってきた「アジャイル」という言葉ですが目からウロコです。僕は本を読むとすぐに影響されてしまう性質で、哲学書とか開発手法に関する本とかを読むとすぐにやってみたくなってしまう人です。それでも最近は、色々な視点から考えることもできるようになってきたと思いますが・・・。

まだこの本は全部読みきっていないので、書評はまた後で書きます。今は本書を読んで心に残ったことをメモっておきます。( ..)φメモメモ

とりあえず、テストファーストに関してのメモです。テストファーストという言葉をきくとワクワクしてくるのは僕だけじゃないはず・・・。テスト、最高です！
-----
EXTENDED BODY:
<h2>テストはソフトウェア設計である</h2>

XPなんかの開発プロセスで有名な「テストファースト」という言葉。ソースコードを書く前にテストコードを書くというものですが、テストコードは何のために書くのか？本書でテスティングに関して述べられていて、非常に共感がもてました。<strong>テストはソフトウェア設計である。</strong>

テストファーストの利点に、テストを最初に書くことですべてのソースコードを検証した証明になるというものがあります。確かに共感できるのですが、これだけの利点ではあまりテストファーストを好きになれませんでした。しかし、本書でもっと重要な利点に気づきました。以下抜粋

<blockquote>

<b>テストを最初に書くことによって、これまでとは違った視点で物事を見ざるを得なくなる</b>ということだ。テストを書こうとすれば、呼び出す側の立場でプログラムを見るようになる。したがって、<b>早い段階からプログラムの機能だけでなくインターフェースに注意を払うようになる。</b>テストを最初に書くことは、ソフトウェアを<b>呼び出しやすい形式</b>に設計することにつながるのだ。

<cite>本書</cite>

</blockquote>

テストファーストを実践することで、プログラムの呼び出しインターフェースを設計する必要が出てくる。また、テスト可能であるためには、周辺のコードから独立でなければならないため<b>独立性を高める</b>必要がある。これらを行うことで、個々のプログラムが独立し、わかりやすいソースコードになることにつながると思うと、テストという行為がとてもワクワクしたものになってきます。

もうひとつ、テストを行う利点にテストコードが生きたドキュメントになるというものがありました。メソッドの呼び出し方法やインスタンスの作り方を実際のソースコードが教えてくれる。しかもそれは常に最新であるということは、ドキュメント地獄の開発よりも何倍も楽しいものだと思います。

テストファーストという考えを持つと、リファクタリングをスムーズに受け入れることができるのかなと思いました。テストケースを書き、テストをパスするようにコーディングをした後ですぐにそのコードをリファクタリングしてきれいにする。常にソースコードをきれいに保つことがアジャイルの極意だと思いました。

まだまだ、最初の方しか読んでないですが、開発者にとって役立つことばかり載っている気がします。本書はとてもすばらしいと思います。

<h2>参考</h2>

+ はっきり言って最高の本です。一緒に開発を行う人にも是非勧めたいです。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg" border="0">
-----
KEYWORDS:
アジャイル,ソフトウェア,開発,奥義,デザインパターン,テスト,ファースト,設計
-----


-----
CF50_CF_4: 
CF50_URL: http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: DBUnitでデータベーステスト
BASENAME: dbunit
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 07/16/2004 12:11:16 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797325143.09.MZZZZZZZ.jpg" border="0" /></a>
</p>

業務でアプリケーションプログラミングを行っている人で、データベースを使わない案件はまれでしょう。ほとんどがデータベースに顧客データを格納したり、マスターデータを引っ張ってきたりするはずです。

そんなデータベースとのやり取りで、SQL文を書いたが、それがほんとうに合っているのか?、単体テスト時にテストデータを毎回手動でデータベースに入れては、プログラムで引っ張ってきた値と等しいかをチェックするのはばかばかしい、データを更新してはみたが、ほんとうに更新されているのかを確認しないといけない、なんて作業はとてもめんどくさくて憂鬱な作業ですよね。

そんな時に威力を発揮するのが、DBUnitという、データベースに関係する単体テストを自動で行ってくれるツールです。
もちろん、どんなテストケースがあるのかは自分で書かなければいけませんが、意図しているデータや、更新されたはずのデータはすべて外部のXMLファイルに書くため、プログラマとテスト実施者が別々に作業することも可能です。
-----
EXTENDED BODY:
DBUnitは開発環境に依存しませんので、EclipseなどのIDEを使っているかテキストエディタを使っているかは問題にしません。

<h2>特徴</h2>

DBUnitの特徴は以下のようなものです。

<ul><li>テスト用のテーブルの自動生成と自動削除機能</li>
<li>テストデータの自動insertと自動delete機能</li>
<li>データベース内を直接見なくても、データの比較を行ってくれる</li>
<li>テストデータとテストコードの分離(テストデータはXMLファイルとして記述できる)</li>
<li><a href="#dtd_code">DTDをエクスポートできる</a>(多少のプログラミングが必要[5処理くらい])</li>
</ul>

+ DBUnitはこちらからダウンロードできます。
<a href="http://www.dbunit.org/" target="_blank" class="extlink">SouceForgeでDBUnitをダウンロード</a>

DBUnitはテストデータを外部のXMLファイルに記述することができます。もちろん、プログラム中に埋め込むこともできますが、テストコードとテストデータを分離して開発すれば、プログラマーとテスト担当者に作業を分割することもできます。

<h3>XMLBuddy</h3>

テストデータを記述するこの作業はルーチンワークになりますので、テストエディタで処理するのは次第に苦痛になってくるでしょう。そんな時におすすめなのが、EclipseのプラグインであるXMLBuddyです。XMLBuddy はXMLエディタとしてEclipseプラグインで提供されています。記述の補佐や要素をツリー形式で表示してくれたりします。

+ XMLBuddyはこちらからダウンロードできます。
<a href="http://www.xmlbuddy.com/" target="_blank" class="extlink">XMLBuddyのダウンロード</a>

<h3>DBEdit</h3>

これらをEclipseで使用する場合はついでにDBEditもインストールすると良いでしょう。DBEditはEclipseプラグインでデータベースの中身をEclipseから見ることができるツールです。テーブルの関連などもボタン一発で参照できますし、データの追加・変更・削除もEclipse上からできるようになります。

+ DBEditはこちらからダウンロードできます。
<a href="http://sourceforge.net/projects/dbedit" target="_blank" class="extlink">DBEditのダウンロード</a>

<h2>まとめ</h2>

DBUnitを使ったテストは最初はデータベースの設定やDTDの読み込みなどの手間が発生します。これはこれからくる簡単な単体テストの甘い蜜の下準備としてがんばって設定してください。この設定が終われば後は、XMLファイルにテストデータを記述してDBUnitを実行するだけです。テーブルを自動で作成してくれて、XMLファイルに書かれたテストデータを自動でinsertしてくれ、自分の書いたselect文と比較して間違っていいないか確認してくれます。

このツールの恩恵は、単体テストではもちろん、納品後の保守段階でバグが出た場合にも受けることができます。納品後というのは、実際にシステムが稼動していることがしばしばあります。そんな時に、実データに手を入れてテストを行うのは至難の業です。DBUnit を使うと、多少テストが簡単になるかもしれません。

<dl>
<dt class="info">Tips</dt>
<dd>DBUnitを使うことでテストデータを自動でinsertしてくれ、insertしたデータは単体テスト終了後に自動的に削除するという設定もできます。</dd>
</dl>

今まで複雑で、めんどくさかったデータベースの単体テストがこのDBUnitを使って簡単になるといいなと思います。

<h3>DBUnit で使う表定義の DTD ファイルを自動生成する</h3>

DBUnitには表定義を DTD ファイルとして作成する機能があります。少しソースコードを書かないといけないので、サンプルコードを載せておきます。間違ってたらもうしわけないです。

<section>

<h4>DTDExporter.java</h4>

<pre class="code"><code><span class="keyword">import</span> java.io.*;
<span class="keyword">import</span> java.sql.*;
<span class="keyword">import</span> org.dbunit.database.DatabaseConnection;
<span class="keyword">import</span> org.dbunit.database.IDatabaseConnection;
<span class="keyword">import</span> org.dbunit.dataset.xml.FlatDtdDataSet;
 
<span class="comment"/**
 * データベースのスキーマから DTD を吐き出すクラス
 * 接続するデータベースへの情報、エクスポートするファイル名は適宜変更する
 * @author hamasyou
 */</span>
<span class="keyword">public</span> <span class="keyword">class</span> DTDExporter {
  <span class="comment">/** エクスポートするファイル名 */</span>
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXPORT_FILENAME = <span class="literal">"tables.dtd"</span>;
  <span class="comment">/** スキーマ名 */</span>
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCHEMA = <span class="literal">"schema"</span>;
  <span class="comment">/** 接続するデータベースへの情報(PostgreSQL用)情報適宜変更すること */</span>
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="literal">"org.postgresql.Driver"</span>;
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_URL = "jdbc:postgresql:<span class="comment">//YOUR_HOST/DATABASE_NAME";</span>
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_USER = <span class="literal">"postgres"</span>;
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_PASS = <span class="literal">"*******"</span>;
  <span class="comment">/** 接続するデータベースへの情報(MySQL用) */</span>
<span class="comment">//  private static final String JDBC_DRIVER = "org.gjt.mm.mysql.Driver";</span>
<span class="comment">//  private static final String JDBC_URL = "jdbc:mysql://YOUR_HOST/DATABASE_NAME";</span>
<span class="comment">//  private static final String JDBC_USER = "mysql";</span>
<span class="comment">//  private static final String JDBC_PASS = "*******";</span>
 
  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception {
    <span class="keyword">if</span> (args.length < 1) {
      System.out.println(<span class="literal">"使い方: java DTDExporter TABLE_NAME [TABLE_NAMES]"</span>);
      System.exit(-1);
    }
    Class.forName(JDBC_DRIVER);
    IDatabaseConnection con = 
      <span class="keyword">new</span> DatabaseConnection(DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASS), SCHEMA); 
    FlatDtdDataSet.write(con.createDataSet(args), <span class="keyword">new</span> FileOutputStream(EXPORT_FILENAME)); 
  }
}
</code></pre>

</section>

これを実行してできたDTDファイルを、XMLBuddy で利用することで、テストデータを XMLBuddy で作成するときに補完機能が効くようになります。XMBuddy で作成したテストデータ記述用ファイルの先頭に次の記述を行います。

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot;?&gt;</span> 
<span class="tag">&lt;!DOCTYPE dataset SYSTEM &quot;tables.dtd&quot;&gt;</span>
</code></pre>

これでこれでいくらかテストデータを作成する効率が上がると思います。

<dl>
<dt class="info">Tips</dt>
<dd>XMLBuddyで補完を使う場合、「.xml」ファイルのエディターを「XMLBuddy」にしておく必要があります。Eclipse メニューの 「ウィンドウ」→「設定」→「ワークベンチ」→「ファイルの関連付け」 で .xml のデフォルトエディターを XMLBuddy に設定しておくと便利です。</dd>
</dl>

<h2>ハマりそうなポイント</h2>

<h3>例外に対応する</h3>

<h4>XML ファイルの読み込み例外が発生した場合</h4>

XMLファイルの読み込み時に以下のような例外が発生した場合の対応方法です。

<pre>org.dbunit.dataset.DataSetException: Line 2: 基本 URI を使用せずに、相対 URI "tables.dtd" を解決することはできません。</pre>

XML ファイルの DTD 読み込み部分を書き換えてみてください。

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="tag">&lt;!DOCTYPE dataset SYSTEM &quot;file:///C:/Documents and Settings/hamasyou/test/tables.dtd&quot;&gt;</span>
</code></pre>

上のように URI の部分を絶対パスで書いてみてください。環境に依存しますが、テストコード用ですので OK としましょう。

<h4>データベースコネクションが取得できない場合</h4>

データベースコネクションを取得できない場合や、DTD を吐き出せない場合に下記の例外が出たら、コネクション取得時にスキーマ名を指定してみてください。

<pre>org.dbunit.database.AmbiguousTableNameException</pre>

<h3>Operationの種類</h3>

DBUnitの実行時に呼び出される getDataSet() メソッドの挙動を変更できる Operationの種類です。

<table>
<caption>Operation の種類</caption>
<tr><th>Operation</th><th>動作</th></tr>
<tr><td>INSERT</td><td><b>指定したデータセットをテーブルに挿入します。</b>テーブル内で同じ主キーとなるデータがすでに存在する場合は、エラーになります。外部キーなどの参照整合性を保つようにデータセットの順序を指定する必要があります。</td></tr>
<tr><td>UPDATE</td><td><b>指定したデータセットの同じ主キーとなるデータを上書きします。</b>上書きするデータが存在しない場合エラーになります。テストデータ以外が存在する場合、データの上書きに注意してください。</td></tr>
<tr><td>DELETE</td><td><b>指定したデータセットとマッチするものだけを削除します。</b>データセットに含まれていないデータは、削除されません。</td></tr>
<tr><td>DELETE_ALL</td><td><b>指定したデータセットに存在するテーブルのレコードすべてを削除します。</b>テーブル自体は削除されません。データセットの逆順にデータが削除されていきます。</td></tr>
<tr><td>CLEAN_INSERT</td><td>指定したデータセットに存在するテーブルに対して、DELETE_ALLを行った後、INSERTを行います。データセットに含まれるデータのみでテストしたい場合に使います。<b>既存のデータはすべて削除されてしまいます。</b></td></tr>
<tr><td>REFRESH</td><td><b>指定したデータセットの主キーにマッチするデータを更新します。更新するデータがない場合は、挿入されます。</b>ほとんどのデータベーステスト時に使用できますが、既存データの更新にだけは注意する必要があります。</td></tr>
<tr><td>TRANCATE_TABLE</td><td><b>指定したデータセットに含まれるテーブルが削除されます。</b>テーブルに格納されているデータもすべて削除されるので、注意してください。</td></tr>
<tr><td>NONE</td><td>何も行わない処理です。</td></tr>
</table>

<h4>動作に関しての注意点</h4>

<dl>
<dt class="warn">データの削除に注意！</dt>
<dd>保守段階で、DBUnitを使う場合、既存のデータの更新や削除に注意してください。間違ってもテーブルの削除(TRANCATE_TABLE)などしないように！</dd>
</dl>

<dl>
<dt class="notice">わかってないこと</dt>
<dd><ul><li>データセットで、DEFAULT 値の設定してある列に DEFAULT 値を入れる方法がみつかりません・・・</li>
<li>シーケンス値が主キーになるようなデータの挿入の方法がわかりません・・・</li>
<li>テーブルの列が Number などの数値型の場合、比較時に文字として認識されてしまう</li>
<li>Timestamp 型は、正確に同じデータを入れておかないと、比較に失敗する</li></ul></dd>
</dl>

<h3>特殊な値をテストデータとして入力するには？</h3>

<h4>現在時刻をテストデータとして入力する方法</h4>

テストデータをXMLに書く場合、Timestamp型の列には現在日時を入れたいときがある。そんな場合は、ReplacementDataSet を使用する。データセットに例えば次のように書いておく。

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="tag">&lt;!DOCTYPE dataset SYSTEM &quot;tables.dtd&quot;&gt;</span>
<span class="tag">&lt;dataset&gt;</span>
  <span class="tag">&lt;TABLENAME <span class="attr">TODAY=</span><span class="value">&quot;[SYSDATE]&quot;</span> <span class="attr">ID=</span><span class="value">&quot;1&quot;</span>/&gt;</span>
  <span class="tag">&lt;TABLENAME <span class="attr">TODAY=</span><span class="value">&quot;2004-06-10&quot;</span> <span class="attr">ID=</span><span class="value">&quot;2&quot;</span>/&gt;</span>
<span class="tag">&lt;/dataset&gt;</span>
</code></pre>

[SYSDATE] の部分を <code>ReplacementDataSet#addReplacementObject()</code> を使って置き換えることで、任意の値でテストすることができます。

<h4>テストクラス</h4>

<pre class="code"><code><span class="keyword">protected</span> IDataSet getDataSet() <span class="keyword">throws</span> Exception { 
  ReplacementDataSet dataSet = 
    <span class="keyword">new</span> ReplacementDataSet(<span class="keyword">new</span> FlatXmlDataSet(<span class="keyword">new</span> FileInputStream(<span class="literal">"dataset.xml"</span>))); 
  dataSet.addReplacementObject(<span class="literal">"[SYSDATE]"</span>, 
    <span class="keyword">new</span> Timestamp(System.currentTimeMillis())); 
  <span class="keyword">return</span> dataSet; 
} 
</code></pre>

<h4>テストデータに null を入れる方法</h4>

上記「現在日時をテストデータに使用する」と同様の方法が使える。

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="tag">&lt;!DOCTYPE dataset SYSTEM &quot;tables.dtd&quot;&gt;</span>
<span class="tag">&lt;dataset&gt;</span>
  <span class="tag">&lt;TABLENAME <span class="attr">TODAY=</span><span class="value">&quot;[NULL]&quot;</span> <span class="attr">ID=</span><span class="value">&quot;1&quot;</span>/&gt;</span>
  <span class="tag">&lt;TABLENAME <span class="attr">TODAY=</span><span class="value">&quot;2004-06-10&quot;</span> <span class="attr">ID=</span><span class="value">&quot;2&quot;</span>/&gt;</span>
<span class="tag">&lt;/dataset&gt;</span>
</code></pre>

[NULL]の部分を<code>ReplacementDataSet#addReplacementObject()</code> を使って置き換えることで、任意の値でテストすることができます。

<h4>テストクラス</h4>

<pre class="code"><code><span class="keyword">protected</span> IDataSet getDataSet() <span class="keyword">throws</span> Exception { 
  ReplacementDataSet dataSet = <span class="keyword">new</span> ReplacementDataSet(<span class="keyword">new</span> FlatXmlDataSet(<span class="keyword">new</span> FileInputStream(<span class="literal">"dataset.xml"</span>)));
  dataSet.addReplacementObject(<span class="literal">"[NULL]"</span>, null); 
  <span class="keyword">return</span> dataSet; 
} 
</code></pre>

<h4>テストデータに ランダムな値を入れる方法</h4>

上記「現在日時をテストデータに使用する」の応用でいけると思います。

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="tag">&lt;!DOCTYPE dataset SYSTEM &quot;tables.dtd&quot;&gt;</span>
<span class="tag">&lt;dataset&gt;</span>
  <span class="tag">&lt;TABLENAME <span class="attr">TODAY=</span><span class="value">&quot;[RANDOM]&quot;</span> <span class="attr">ID=</span><span class="value">&quot;1&quot;</span>/&gt;</span>
  <span class="tag">&lt;TABLENAME <span class="attr">TODAY=</span><span class="value">&quot;2004-06-10&quot;</span> <span class="attr">ID=</span><span class="value">&quot;2&quot;</span>/&gt;</span>
<span class="tag">&lt;/dataset&gt;</span>
</code></pre>

[RANDOM] の部分を <code>ReplacementDataSet#addReplacementObject()</code> を使って置き換えることで、任意の値でテストすることができます。

<h4>テストクラス</h4>

<pre class="code"><code><span class="keyword">protected</span> IDataSet getDataSet() <span class="keyword">throws</span> Exception { 
  ReplacementDataSet dataSet = <span class="keyword">new</span> ReplacementDataSet(<span class="keyword">new</span> FlatXmlDataSet(<span class="keyword">new</span> FileInputStream(<span class="literal">"dataset.xml"</span>)));
  dataSet.addReplacementObject(<span class="literal">"[RANDOM]"</span>, <span class="literal">""</span> + <span class="keyword">new</span> Random().nextInt()); 
  <span class="keyword">return</span> dataSet; 
} 
</code></pre>

<h3>テストコードサンプル</h4>

DBUnitのサンプルコードです。感じだけでも大体つかめてもらえたらと思います。

<h4>テストコードサンプル</h4>

<pre class="code"><code><span class="keyword">package</span> com.hamasyou.domain.test;
 
<span class="keyword">import</span> java.io.*;
<span class="keyword">import</span> junit.framework.*;
<span class="keyword">import</span> org.dbunit.*;
<span class="keyword">import</span> org.dbunit.database.*;
<span class="keyword">import</span> org.dbunit.operation.*;
<span class="keyword">import</span> org.dbunit.dataset.*;
<span class="keyword">import</span> org.dbunit.dataset.xml.*;
<span class="keyword">import</span> com.hamasyou.domain.Form;
 
<span class="comment">/** テストクラス */</span>
<span class="keyword">public</span> <span class="keyword">class</span> FormTest <span class="keyword">extends</span> DatabaseTestCase {
  <span class="keyword">private</span> IDatabaseConnection connection;
  <span class="keyword">protected</span> <span class="keyword">void</span> setUp() <span class="keyword">throws</span> Exception {
    <span class="keyword">super</span>.setUp();
    connection = getConnection();
  }
 
  <span class="keyword">protected</span> <span class="keyword">void</span> tearDown() <span class="keyword">throws</span> Exception {
    connection.close();
    <span class="keyword">super</span>.tearDown();
  }
 
  <span class="keyword">protected</span> IDatabaseConnection getConnection() <span class="keyword">throws</span> Exception {
    <span class="keyword">return</span> <span class="keyword">new</span> DatabaseConnection(getJDBCConnection(), <span class="literal">"SCHEMA"</span>);
  }
 
  <span class="keyword">protected</span> IDataSet getDataSet() <span class="keyword">throws</span> Exception {
    ReplacementDataSet dataSet = <span class="keyword">new</span> ReplacementDataSet(<span class="keyword">new</span> FlatXmlDataSet(<span class="keyword">new</span> FileInputStream(<span class="literal">"dataset.xml"</span>)));
    dataSet.addReplacementObject(<span class="literal">"[SYSDATE]"</span>, <span class="keyword">new</span> Timestamp(System.currentTimeMillis()));
    <span class="keyword">return</span> dataSet;
  }
 
  <span class="keyword">protected</span> DatabaseOperation getSetUpOperation() <span class="keyword">throws</span> Exception {
    <span class="keyword">return</span> DatabaseOperation.REFRESH;
  }
 
  <span class="keyword">protected</span> DatabaseOperation getTearDownOperation() <span class="keyword">throws</span> Exception {
    <span class="keyword">return</span> DatabaseOperation.DELETE;
  }
 
  <span class="comment">/**
   * データベースコネクションを返します。
   * @param autoCommit    自動コミット(true/自動コミットOn, false/自動コミットOff)
   */</span>
  <span class="keyword">private</span> Connection getJDBCConnection(boolean autoCommit) <span class="keyword">throws</span> Exception {
    Class.forName(System.getProperty(<span class="literal">"test.jdbc.driver"</span>));
    String url = System.getProperty(<span class="literal">"test.jdbc.url"</span>);
    String user = System.getProperty(<span class="literal">"test.jdbc.user"</span>);
    String pass = System.getProperty(<span class="literal">"test.jdbc.pass"</span>);
    Connection con = DriverManager.getConnection(url, user, pass);
    con.setAutoCommit(autoCommit);
    <span class="keyword">return</span> con;
  }
 
 
  <span class="comment">/*=====================================*/</span>
  <span class="comment">/* テストケース */</span>
  <span class="comment">/*=====================================*/</span>
 
  <span class="comment">/**
   * フォームを期待通りに取得できるかどうかのテスト
   */</span>
  <span class="keyword">public</span> <span class="keyword">void</span> testGetData() <span class="keyword">throws</span> Exception {
    Form form = Form.getData();
    <span class="comment">// 期待するデータを読み込む</span>
    IDataSet expectedDataSet = <span class="keyword">new</span> FlatXmlDataSet(<span class="keyword">new</span> FileInputStream(<span class="literal">"expect-data.xml"</span>));
    ITable expectedTable = expectedDataSet.getTable(<span class="literal">"FORM"</span>);
    <span class="comment">// アプリケーションID、フォームID、フォーム名が一致した場合同じ物とみなす</span>
    assertEquals(<span class="literal">"アプリID"</span>, expectedTable.getValue(0, <span class="literal">"APP_ID"</span>), form.getAppId());
    assertEquals(<span class="literal">"フォームID"</span>, expectedTable.getValue(0, <span class="literal">"FORM_ID"</span>), form.getFormId());
    assertEquals(<span class="literal">"フォーム名"</span>, expectedTable.getValue(0, <span class="literal">"FORM_NAME"</span>), form.getFormName());
  }
}
</code></pre>

<h3>テストデータを Excel で作る</h3>

テストデータを Excel で作ることができます。Excelで作ったデータを読み込むには、XlsDataSet というクラスを使います。このクラスは、内部で Jakarta POI を使っています。

<dl>
<dd class="info">Jakarta POIプロジェクト</dd>
<dd><p>POI とは、Javaから Microsoft Word や Microsoft Excel を扱うためのライブラリです。Jakarata POIプロジェクトでは、Microsoft OLE 2複合ドキュメント形式に基づいた様々なファイル形式を Pure Java で取り扱うためのAPI群から成り立つプロジェクトです。</p>

<p><a href="http://jakarta.terra-intl.com/poi/" target="_blank">Jakarta POI のダウンロードはこちら</a></p></dd>
</dl>

Excelでどのようにテストデータを作るかというと、シートごとにテーブルに挿入するデータを作成します。シート名には、挿入するテーブル名をそれぞれ書きます。シートの最初の行に、テーブルのカラム名(列名)を並べて書きます。2行目から挿入するデータを書き並べます。下はサンプル画像です。

<img src="http://hamasyou.com/images/dbunit/excel-data.gif" alt="Excelサンプル" />

Excel のセルの書式設定によって、XlsDataSet での値の取り扱い方が違います。数値は BigDecimal 型、日付は Date 型、文字列は String 型で扱われます。

<dl>
<dt class="info">数字を文字として扱いたい場合</dt>
<dd>数字を文字列として扱いたい場合は、セルの書式設定を「文字列」に設定します。文字列として扱われていれば、Excel2003 であればセルの左上に緑の三角が現れます。</dd>
</dl>

現時点では、POI が未熟なせいか、まだまだ不安定な部分もあります。(特定の列名の後に空白が入ってしまうなど)それでも、Excelを使ってテストデータを作れるのは、非常に強いと思います。

<h3>データセットをSQLを使って取得する</h3>

QueryDataSet クラスの addTable メソッドを使うと、SQL 文を使ってデータセットを作り出すことができます。

<pre class="code"><code>QueryDataSet dataSet = <span class="keyword">new</span> QueryDataSet(getConnection());
dataSet.add(<span class="literal">"TABLE_NAME"</span>, <span class="literal">"select * from TABLE_NAME where ID = '1'"</span>);
</code></pre>

データベース接続からデータセットを取得する方法もあります。

<div class="code">getConnection().createDataSet()</div>

<h3>Oracle の Timestamp 型が Insert できない</h3>

<pre>WARNING - CREATE_DATE data type (1111, 'TIMESTAMP(6)') not recognized and will be ignored. See FAQ for more information. </pre>

こんな警告が表示されるのは、データ型にデフォルトのJDBC 型が使われているのが原因です。例えば Oracle を使っている場合は、次のようにしてデータ型を Oracle のものに指定してやることで回避できます。

<pre class="code"><code>IDatabaseConnection con = 
  <span class="keyword">new</span> DatabaseConnection(DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASS), SCHEMA);
DatabaseConfig config = con.getConfig();
config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, <span class="keyword">new</span> OracleDataTypeFactory());
</code></pre>

このように設定を指定することで、データベース独自の型を使えるようになります。

<h3>効率の良いテストにするには</h3>

DBUnitを使って効率のよいテストを行うには、下の3点に気をつけることで効率があがると思います。

<ul><li>自分専用のデータベースを利用する</li>
<li>テスト終了後にデータを削除しない</li>
<li>接続処理などを一元管理する</li>
</ul>

<h4>自分専用のデータベースを持つ</h4>

DBUnitのひとつの弱点に、データベースの状態にテストが依存してしまう>いう点があげられます。これは、複数の開発者が同じデータベースを使ってテストを行っていると顕著になってきます。

そこで、データベースの状態にできるだけ依存しないテストを行うために、自分専用のデータベースを利用する方法があります。最近では、<a href="http://hsqldb.sourceforge.net/index.html" target="_blank" class="extlink">HSQLDB</a> や <a href="http://mckoi.com/database/" target="_blank" class="extlink" />Mckoi</a> といった、ポータブルデータベースがありますので、簡単に自分専用のデータベースを作ることができると思います。

この場合の注意点は、最新の DDL を使って自分のデータベースを作らないと、本番データベースとバージョンが違うものができてしまうということです。

<h4>参考</h4>

+ <a href="http://www.sssg.org/wiki/index.jsp?pid=HSQLDB" target="_blank" class="extlink">HSQLDB - *HSQLD</a>
+ <a href="http://home.att.ne.jp/apple/wizard/java/mckoi/" target="_blank" class="extlink">Mckoi によるポータブルデータベース生活</a>

<h4>テスト終了時にデータを削除しない</h4>

自分専用のデータベースを使えば心配はないのですが、開発者共通のデータベースを使ってテストしていた場合、間違ってすべてのデータを消してしまうということがあります。DBUnitの場合、コマンドをひとつまちがえるだけで簡単にデータがすべて消えてしまいます。

こういった間違いを起こさないために、テスト終了時のデータは残しておくのがいいと思います。デバッグ時に実際のデータを確認するときにもつかえることですし。

<dl>
<dt class="warn">TRANCATE_TABLE に注意</dt>
<dd>TRANCATE_TABLE を行うと、テストに使ったテーブルが削除されてしまいます。本番で使っているデータベースでは、必ず確認して、実行しないようにしましょう。</dd>
</dl>

<h4>接続処理を一元管理する</h4>

DBUnitを使ってテストケースを書く場合、DatabaseTestCase クラスを継承して作り始めます。このクラスでは、データベースコネクションを取得するメソッドとデータセットを取得するメソッドをオーバーライドしなければなりません。また、テスト開始時のオペレーションやテスト終了時のオペレーションも、適宜オーバーロードしなければ、デフォルトでは「何もしない」設定になっています。

毎回これらの処理を書くのは、非常にめんどくさいです。そこで、DatabaseTestCase を継承し、デフォルトの実装を行って独自テストケースクラスを作成し、そのクラスを個々のテストケースに継承させます。

<h2>参考文献：</h2>

+ DBUnit、DBEdit、XMLBuddyをつかったデータベースプログラミングはこちらが参考になります。
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119334/sorehabooks-22" target="_blank" class="uline">JavaPRESS34(技術評論社)</a>

+ DBUnitの本家Webサイトです。膨大な情報があります。
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://dbunit.sourceforge.net/howto.html" target="_blank" class="uline">DBUnit</a>

+ テスティングモジュールのJUnitも参考になります。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/">JUnitイン・アクション</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797325143.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ビンセント マソル　テッド ハスティード　Vincent Massol　Ted Husted　クイープ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797325143&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />JUnitやその派生フレームワークの使用法解説<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ DbUnitに関して、分かりやすく解説されています。
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://www.stackasterisk.jp/tech/java/dbunit01_01.jsp" target="_blank" class="uline">DbUnit (Stack*)</a>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="DBUnitでデータベーステスト">
-----
KEYWORDS:
DBUnit,データベース,テスト,DBEdit,XMLBuddy
-----

COMMENT:
AUTHOR: 津島
EMAIL: tsushima@tacsol.co.jp
IP: 61.199.241.232
URL: 
DATE: 05/05/2005 07:55:37 PM
津島と申します。
突然のメールすみません。。
質問がありメールさせて頂いております。
GWもなく働いているので、勝手なお願いですが聞いてやって下さい。
Excelのインポートがありますが、複数テーブルを同時に取り込むことは可能でしょうか？
シートを分けて試して見ましたがダメでした。
何かアドバイスがありましたら是非お願い致します。

-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 219.126.159.194
URL: 
DATE: 05/09/2005 10:49:01 PM
返信遅くなって申し訳ありません。

テーブルのインポートはシート毎に行われるので、
シートを分けてテーブルを指定してやればいけるはずですけどね。

僕が試したときには、シートを分けることでインポートができましたが、テーブル名によってインポートが正常に行われない場合もありました。POIのバグかもしれません。

答えになっていませんが、申し訳ないです。
-----

COMMENT:
AUTHOR: kom
EMAIL: komu@cam.hi-ho.ne.jp
IP: 61.194.199.81
URL: 
DATE: 05/10/2005 11:34:50 AM
初めまして。最近DBUnitでテストを始めたものです。

POIのバグで時々期待値に空白が入ってしまうことがあります。その後修正させることができないことが多く、
EXCELでテストデータを運用することはあきらめかけているのですが、みなさまどうお考えですか？
-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 219.126.159.194
URL: 
DATE: 05/11/2005 09:49:21 PM
POIで登録した期待値に空白が入ってしまうのは、いまだどうしようもないのですね(泣)

POIのバグを修正して使うか、EXCELでテストデータを運用するのをあきらめるかですね。

私なら、時間があればPOIを修正します。EXCELでデータ管理が出来ると楽ですからね。
-----

COMMENT:
AUTHOR: 通りすがり
EMAIL: 
IP: 122.213.118.24
URL: 
DATE: 04/22/2007 12:47:32 AM
通りすがりで失礼いたします。
「Oracle の Timestamp 型が Insert できない」の項、参考にさせていただきます。
エクスポートしたXMLを読み込んでCLEAN_INSERTしようとした際、Longがどうとかいうエラーが出たので、この方法を試してみます。
「テストデータに ランダムな値を入れる方法」というのも面白そうです。
-----


PING:
TITLE: ユニットテスト
URL: http://blog.goo.ne.jp/glass-_-onion/e/582d91ee034250f6262351dc5f2653bd
IP: 210.165.9.64
BLOG NAME: グラスオニオン日記
DATE: 01/17/2006 09:59:45 AM
僕はテストが苦手です。
たまにバグが多いと指摘されることあります。
これではイカンということで最近ユニットテストをするようにしています。
もろリファクタリングの影響ですねｗ

いきなりテスト駆動開発ってのは難しいのでDBUnitを使ってデータベース回りのテストを...
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: すべては自分の内側から！
BASENAME: すべては自分の内側から
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 07/18/2004 05:53:57 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638015/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4906638015.09.MZZZZZZZ.jpg"  border="0" /></a>
</p>

「7つの習慣」を読み始めました。人生で成功するための原則が書かれているということです。まだ、最初の方しか読んでませんが例のごとく、気になったことや学んだことをメモしておこうかなと思います。

本書の読み方として、読んだことを人に話し、議論するのがいいということでした。そういったことを念頭において読むことで、よりよい理解を示せるらしいです。ということで、早速実践のためにぶろぐの記事を使います。　

まだ最初の方だけしか読んでないのでこれから読み進めていくうちに色々な考えができるようになるかと思います。(というより、なりたい！)
-----
EXTENDED BODY:
<h2>自分の内側から変えていく</h2>

まず、最初に納得したのが、最近の「他人を思い通りに操るテクニック」や「他人のことを知る技術」みたいな、他人をどうにかするというのは、長期的に見た場合の自分の幸せにはたどり着けないということ。理由は簡単で、<b>自分が思い通りに操ることができるのは自分しかいない</b>から。成功への原則のすべての根底にあるのが、自分を変えるというもの。

「どう見せるかではなく、自分がどうありたいか」が一番大切なポイント。そして、人の成長には3つの段階があり<b>「依存」「自立」「相互依存」</b>の順に成長していく。最初は皆「依存」の状態から始まり、自立性を養うことで次第に自立していく。

長期的に効果的な成長を続けるためには、<b>目標達成(Performance)と目標達成能力(Performance Capability)</b>のP/PCのバランスが大切であるということを学んだ。これは、ある手段を用いて効果を得たとき、効果ばかり(目標達成)を追い続けてしまうと、その手段がさびてしまう。逆に手段ばかり(目標達成能力)を高めていては、いつまでたっても効果は出ないというものである。目標達成と目標達成能力のバランスが、成長するプロセスには必要である。

「〜さえ○○なれば」「〜が○○だからだめなんだ」といった、自分のコントロール下にない問題に自分が左右されるのは、自分が<b>反応性</b>であることの表れである。逆に「自分が○○する」といった、判断を自分に置くことができる人は、<b>自主性</b>である。「依存」の関係から「自立」に成長するためにはこの自主性を持たなければならない。
　自分のコントロール下にない事柄を「関心の輪」、自分のコントロールできる自己の意識を「影響の輪」として表せる。この「影響の輪」を大きくしていくことで自主性を高められる。
　自主性を高める方法に、<b>自分に約束をしそれを守る</b>というものがある。身近なことから約束し、守っていくことで自主性を高めようと思う。

<h2>参考</h2>

+ 技術書と違い拾い読みするような本ではない。ちょくちょく読み返して生きたいと思います。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638112/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4906638112.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638112/sorehabooks-22/">7つの習慣 最優先事項―「人生の選択」と時間の原則</a><br />スティーブン・R. コヴィー, レベッカ・R. メリル, A.ロジャー メリル, Stephen R. Covey, Rebecca R. Merrill, A.Roger Merrill, 宮崎 伸治<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4906638112"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />７つの習慣を読んでれば別に読まなくても。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />すべての時間貧乏の人に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />自分のバイブル<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638112/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4906638112"/></a><br /></td></tr></table>
</div>

+ リーダーシップに関する7つの習慣。この本も読みたいな
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638260/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4906638260.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638260/sorehabooks-22/">7つの習慣 原則中心のリーダーシップ</a><br />スティーブン・R・コヴィー<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4906638260"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />一冊で一生の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />７つの習慣に対する理解が深まった。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />７つの習慣以来の傑作！７年間待ったかいがあった。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638260/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4906638260"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4906638015.09.MZZZZZZZ.jpg" border="0" alt="7つの習慣">
-----
KEYWORDS:
7つの習慣,成功,原則,自分,自主性,変える
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Java/Eclipseソフトウェアテスト・チュートリアルブック
BASENAME: javaeclipseソフトウェアテストチュートリアルブック
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 07/21/2004 02:42:24 AM
TAGS: Eclipse,Java,テスト技法
-----
BODY:
本書は、JavaプログラムのテストをJUnitを使ってEclipse上で行ってしまおうという、いかにもJavaプログラムにうけがいい内容をもってきています。しかし、中身はというと、非常に実践向けの、テストの何たるかを開発者の視点から語っているわかりやすい内容になっています。

Eclipse上でJUnitを使う方法が後半に載っています。丁寧な解説とわかりやすい図で、こちらも迷うことはないと思います。

プログラミング初心者の書いたコードに限らず、テストがしっかりとできていないコードというのは、品質に問題があります。動けばいいという考えはそろそろやめにして、とりあえず流行のテスティングにのっかってみましょう。絶対損はないはずですから。
-----
EXTENDED BODY:
<h2>特徴</h2>

「テストの重要性は、耳にたこができるほど聞いた。でも、実際にどうやればいいの？」という人にこそ、本書をおすすめします。まず、テストの何たるかを前半で、中盤ではどんなテストを行えばいいのかまた、どのようにテストを行えばいいのかを。後半では、EclipseとJUnitという2大ツールの使い方を学べます。

複数回実行されたときの状態をテストしたいとき、スレッド関連のテストをしたいとき、例外が発生したとこにテストをを行いたいときなど、少し変わったテストに関しても解説してあります。テストの応用編もあり、Antによる自動実行の方法もあり、実際に現場で使える技術・技法を学べます。

テストをしやすくする方法も書いてあります。これは、プログラムをどう作ればいいかの手ほどきになっていて、初心者プログラマだけでなく、実際に現場でバリバリの中堅プログラマの人も教わる点はあると思います。

少しリファクタリングぽっくなっているのが、実際にどうすればいいのかという疑問に答えてくれると思います。

かなり使える現場向けのテスト解説本になっています。今すぐ全部を読む必要はないですが、現場に一冊あると効果的かと思います。おすすめ！

<h2>覚書き</h2>

<h3>どんなときにテストするのか</h3>

テストは「不安に思ったらする」です。「このメソッド動かなさそ〜」とか、「ここはバグが出たらまずい。」といった不安がでたら、まずテストする。不安がなくなるまでテストする。自分の作ったプログラムに責任を持ち、正しく動くかどうかを不安に思わなければならないのです。

<h3>どんなテストをすればいいのか</h3>

コードをテストを意識せずに書いてはいけない。テストケースを考えながらコーディングすることで、仕様の抜けや問題点が明確になります。設計自体も洗練されていき、わかりやすいコードになります。

テストしなければならないのは、「正しく動作するか疑問な部分」です。非常に明快で、バグがないことがはっきりわかるくらいのコードなら、テストする必要すらないでしょう。明快な部分をテストするのではなく、<strong>動くか疑問、正しさが証明できない</strong>部分を重点的にテストするべきです。

限界値のテストはもちろんするに越したことはないのです。また、メソッドを呼び出すことで内部状態が変わるものは、その呼び出し順序がどのようであっても正しく動くかをテストするべきです。

<h2>参考</h2>

+ JUnitの情報はこちら

<a href="http://www.junit.org/" target="_blank" class="extlink">JUnit</a>

<a href="http://www.alles.or.jp/~torutk/oojava/maneuver/2000/6-3.html" target="_blank" class="extlink">テスティングフレームワーク JUnit</a>

+ Eclipseの情報はこちら

<a href="http://www.eclipse.org/" target="_blank" class="extlink">Eclipse</a>

+ JUnitに関する解説本です。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797325143.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/">JUnitイン・アクション</a><br />ビンセント マソル, テッド ハスティード, Vincent Massol, Ted Husted, クイープ<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797325143"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797325143"/></a><br /></td></tr></table>
</div>

+ テスト駆動の開発入門書です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894717115.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/">テスト駆動開発入門</a><br />ケント ベック, Kent Beck, 長瀬 嘉秀, テクノロジックアート<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4894717115"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />XPに親しみを感じているなら<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />想定読者レベルはバリバリの実装者・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ケントとペアプロ<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894717115"/></a><br /></td></tr></table>
</div>

+ C++ によるテスト実践書です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798005711/sorehabooks-22/ref=nosim/"><img src="http://images-jp.amazon.com/images/P/4798005711.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798005711/sorehabooks-22/ref=nosim/">CppUnitによるXP‐eXtreme Programming‐実践テスト技法</a><br />大月 美佳<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798005711"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />CppUnit初心者のためのスタートアップガイド<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798005711/sorehabooks-22/ref=nosim/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798005711"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798006084.09.MZZZZZZZ.jpg" border="0" alt="Java/Eclipseソフトウェアテスト・チュートリアルブック">
-----
KEYWORDS:
Java,ソフトウェアテスト,チュートリアル,Eclipse,JUnit,テスト
-----


-----
CF50_CF_4: 安藤 利和 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/51FR4BCEDZL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798006084/sorehabooks-22
CF50_CF: 秀和システム
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: オブジェクト指向設計の原則
BASENAME: post_7
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/22/2004 01:43:06 PM
TAGS: これは読むべき,わかりやすい,アジャイル,デザインパターン,定番,良書,設計の原則
-----
BODY:
「アジャイルソフトウェア開発の奥義」を読んで第二弾。オブジェクト指向設計の原則に関するメモです。自分で読んで思い出せるくらいの内容しかメモってないと思われるので、もっと詳しい解説が欲しければ本書を買ってください。

本書には、クラス設計の原則として5つの原則が載っています。

<ul><li><strong>単一責任の原則</strong> (The Single Responsibility Principle: SRP)</li>
<li><strong>オープン・クローズドの原則</strong> (The Open-ClosedPrinciple: OCP)</li>
<li><strong>Liskovの置換原則</strong> (The Liskov Substitution Principle: LSP)</li>
<li><strong>依存関係逆転の原則</strong> (The Dependency Inversion Principle: DIP)</li>
<li><strong>インターフェース分離の原則</strong> (The Interface Segregation Principle: ISP)</li></ul>

パッケージ設計の原則として次6つの原則が載っています。

<ul><li><strong>再利用・リリース等価の原則</strong> (Resuse-Release Equivalency Principle: REP)</li>
<li><strong>全再利用の原則</strong> (Common Resue Principle: CRP)</li>
<li><strong>閉鎖性共通の原則</strong> (Common Closure Principle: CCP)</li>
<li><strong>非循環依存関係の原則</strong> (Acyclic Dependencies Principle: ADP)</li>
<li><strong>安定依存の原則</strong> (Stable Dependencies Principle: SDP)</li>
<li><strong>安定度・抽象度等価の原則</strong>(Stable Abstractions Principle: SAP)</li></ul>

『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715937/sorehabooks-22" target="_blank" class="extlink">プログラマのためのJava設計ベストプラクティス</a>』という本にも、オブジェクト指向設計の原則に関しての解説があります。
-----
EXTENDED BODY:
<h2>設計における原則</h2>

オブジェクト指向設計におけるデザインパターンよりも上の概念に、原則というものがあります。原則は主に5つか6つあります。本書では5つの原則に関して、わかりやすい説明と理解しやすい例を挙げて説明してくれました。

本書は、プログラム設計者だけでなくプログラマの人にも、是非読んでもらいたいです。だてに「Jolt Award受賞」はしていません。「アジャイル開発はいいぞー」なんて偏った解説本ではなく、設計・テスト・原則・パターン・プラクティスといった、ソフトウェア開発における重要な側面を、丁寧かつわかりやすく説明してくれています。ほとんどの解説に目からウロコがおちます。最高の本ですので、一度立ち読みでもしてみてください。

<h4>クラス設計の原則</h4>

<ol><li><a href="#srp" class="uline">単一責任の原則(The Single Responsibility Principle: SRP)</a></li>
<li><a href="#ocp" class="uline">オープン・クローズドの原則(The Open-Closed Principle: OCP)</a></li>
<li><a href="#lsp" class="uline">Liskovの置換原則(The Liskov Substituion Principle: LSP)</a></li>
<li><a href="#dip" class="uline">依存関係逆転の原則(The Dependency Inversion Principle: DIP)</a></li>
<li><a href="#isp" class="uline">インターフェース分離の原則(The Interface Segregation Principle: ISP)</a></li></ol>

<h4>パッケージ設計の原則</h4>

<ol><li><a href="#rep">再利用・リリース等価の原則(Reuse-Release Equivalency Principle: REP)</a></li>
<li><a href="#crp">全再利用の原則(Common Reuse Principle: CRP)</a></li>
<li><a href="#ccp">閉鎖性共通の原則(Common Closure Principle: CCP)</a></li>
<li><a href="#adp">非循環依存関係の原則(Acyclic Dependencies Principle: ADP)</a></li>
<li><a href="#sdp">安定依存の原則(Stable Dependencies Principle: SDP)</a></li>
<li><a href="#sap">安定度・抽象度等価の原則(Stable Absstractions Principle: SAP)</a></li></ol>

<h2 id="srp">クラス設計の原則</h2>

<h3>単一責任の原則(The Single Responsibility Principle: SRP)</h3>

<blockquote>

クラスを変更する理由は一つ以上存在してはならない

<cite>本書</cite>

</blockquote>

クラスには一つの役割だけを持たせるべきです。単一責務のクラスは、クラス自体の変更理由がたった一つに絞られます。その責務が変更された場合だけクラスの変更がおきます。

<dl>
<dt class="tips">Tips</dt>
<dd>複数の役割を持ったクラスは、変更理由も複数になっていまい、変更部分がわかりづらくなります。</dd>
</dl>

単一責任の原則(SRP)では「<strong>役割(責任) = 変更理由</strong>」として定義されています。役割の観点からクラスの設計を行うと、複数の役割を負っているかの判断がつくにくい場合があります。そんなときは、アプリケーションが今後、どんな変更をされるかを考えてみるといいです。

本書の例に、Modem というクラスがでてきました。Modem クラスは、「接続の管理」と「データ通信」の2つの役割を持っています。アプリケーションで、「接続の管理」と「データ通信」が別々に変更されうるのならば、Modem クラスは、2つの役割を持っていることになります。しかし、常に同時に変更される場合は、1つの役割を持っていると言っても問題ありません。

このように、クラスの役割を見極めるのに、変更理由の観点からクラスを眺めるのも一つの手です。

<dl>
<dt class="tips">Tips</dt>
<dd>変更の理由が変更の理由たるのは、実際に変更の理由が生じた場合だけである</dd>
</dl>

単一責任の原則を適用するには、どのような点に気をつければいいのでしょうか？その答えの一つに、「<strong>GRASP (General Responsibility Assignment Software Patterns)</strong>」というものがあります。詳しくは『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22" target="_blank" class="extlink">実践UML</a>』を参考にするといいと思います。ここでは簡単にまとめておきます。

<h3>GRASP</h3>

GRASP には基本パターンが5つと、追加パターンが4つ(以上)あります。GRASP というのは、クラスの責務割り当てにおける一般原則のパターンのことです。ここでいう「責務」とは、次の2つのことを言います。

<ol><li><strong>情報把握 (knowing)</strong></li><li><strong>実行 (doing)</strong></li></ol>

情報把握責任の例には、カプセル化しているデータを把握していることや関係しているオブジェクトを把握しているといったものがあります。また、実行責任の例には、自分自身で何かを行うことや関連するオブジェクトのアクションを起動させることなどがあります。

GRASP の基本パターンには次のものがあります。

<ul><li>Expert (エキスパート)</li>
<li>Creator (生成者)</li>
<li>High Cohesion (高凝集性)</li>
<li>Low Coupling (疎結合性)</li>
<li>Controller (コントローラ)</li></ul>

<dl>
<dt>Expert (エキスパート)</dt>
<dd>責務の遂行に必要な情報を持っているクラスに、責務を割り当てるものです。</dd>
<dt>Creator (責任者)</dt>
<dd>他のクラスのインスタンスを生成する責務を割り当てるパターンです。クラスの関係が「集約」や「コンポジション」になっている場合や、密接にかかわりを持つクラス、インスタンスの初期化データを持つ場合に、責務を割り当てます。</dd>
<dt>High Cohesion (高凝集性)</dt>
<dd>機能の類似性が高まるようにクラスに責務を割り当てるパターンです。ただし、あまりに多い仕事量を持つクラスでは、凝集性は高いとはいえなくなります。</dd>
<dt>Low Coupling (疎結合性)</dt>
<dd>クラス間の関連を出来るだけ少なくなるように責務を割り当てるパターンです。ただし、再利用性を重視しない場合は、特別重要にならない場合があります。</dd>
<dt>Controller (コントローラ)</dt>
<dd>システムイベントを処理する責務をコントローラと呼ばれる「システム全体」を表したようなクラスに割り当てるパターンです。ユースケース単位で作成されるのが普通です(Facadeパターン GoF)。</dd>
</dl>

<h3 id="ocp">オープン・クローズドの原則(The Open-Closed Principle: OCP)</h3>

<blockquote>

ソフトウェアの構成要素(クラス・モジュール・関数など)は拡張に対して開いて(オープン: Open)いて修正に対して閉じて(クローズド: Closed)いなければならない。

<cite>本書</cite>

</blockquote>

OCPを上手く適用してあるシステムは、変更に対してコードの追加という手段で対処できるようになります。既存のコードに手を加えなる必要がなくなるため、動いているコードを壊す恐れがなくなります。

<dl>
<dt>拡張に対して開かれている(オープン: Open)</dt>
<dd>モジュールの振る舞いを拡張できるということ。仕様変更が起こった場合に、モジュールの振る舞いを追加することで対応できる。</dd>
<dt>修正に対して閉じている(クローズド: Closed)</dt>
<dd>モジュールの振る舞いを変更しても、既存のソースコードやバイナリコードは影響を受けない。</dd>
</dl>

<dl>
<dt class="tips">Tips</dt>
<dd>オープン・クローズドの原則の鍵は、「抽象」にあります。モジュールをある固定した「抽象」に依存させておけば、修正に対してコードを閉じることができるようになります。「抽象」を使えば、派生クラスを新たに追加するだけで、振る舞いを拡張できます。</dd>
</dl>

本書を読んでいて、ウロコが落ちたのが下の図です。

<img src="http://hamasyou.com/images/agilesoftware/open-closed1.gif" alt="Open-Closed   の原則" align="middle" />

この図は、Client はClient Interface という抽象を利用して処理が組まれていて、Client Interface の実装が Server によって提供されるというものです。Client が依存する抽象の名前が、Client Interface であるのがポイントです。

「<strong>抽象クラスはそれを実際に実装するクラスとの関連よりも、それを利用するクラスとの関係のほうがずっと密接</strong>」という事実があるため、インターフェースには、Client Interface という名前がついています。この辺の詳しい説明は、本書を読んでください。

<dl>
<dt class="tips">Tips</dt>
<dd>オープン・クローズドの原則に順ずるためにもっとも典型的に使われるのが、「<a href="http://www.hellohiro.com/pattern/strategy.htm" target="_blank" class="extlink">Strategy パターン</a>」と「<a href="http://www.hellohiro.com/pattern/templatemethod.htm" target="_blank" class="extlink">Template Method パターン</a>」です。</dd>
</dl>

<h4>いつ「抽象」を導入すればいいのか</h4>

これには、2通りの答えがあります。一つは、設計する人がどういった種類の変更に対して自分の設計を閉じたいのかを選択し、その変更に対して閉じるという、先を見越した対策。
　
もう一つは、実際に変更が起きた場合に「抽象」を組み込むという対応。すべての変更に対してこの原則を適用するにはコストがかかりすぎるため、実際に変更されるまで、この原則を導入しないという方法もあります。

とはいっても、運用後の変更で、「抽象」を導入するとバグを生み出してしまう可能性も無くはありません。ここで大活躍するのが「<strong>テストファースト</strong>」です。確実にテストを行えるようにするために設計しておけば、テストの変更で取り入れた「抽象」の多くが、実際の運用時の変更に耐えられるものになっている場合が多いのです。

<dl>
<dt class="tips">Tips</dt>
<dd>早まった抽象をしないことも、抽象を使うのと同様に重要なこと</dd>
</dl>

<h3 id="lsp">Liskovの置換原則(The Liskov Substituion Principle: LSP)</h3>

<blockquote>

派生型はその基本型と置換可能でなければならない

<cite>本書</cite>

</blockquote>

派生型に求められるのは、「基本型の能力＋アルファ」であるということ。基本型にできることが、派生型でできなくなっているような継承の仕方では、LSP に反しているといえます。

これは、先ほどの OCP にあった、抽象を使って実装と切り離すということができなくなる事を示しています。抽象の変わりに実装を使った場合の振る舞いが予期できないものになってしまうからです。

例えば、抽象クラスで宣言された get というメソッドを、実装時に使わせたくないなどの理由で例外が発生するようにしてしまった場合、実装クラスを抽象クラスの変わりに使えなくなってしまう。if 文の分岐や instanceof などを使って、オブジェクトの型を判定しなければならなくなってしまいます。

<h4>契約による設計</h4>

これは、契約によってクラスを使うクライアントが必要としている振る舞いを、クラスの作成者に強制させることができるというものです。これには、<strong>事前条件</strong> と <strong>事後条件</strong> というものをつかいます。

ここで、ポイントなのは、「どうしてクラスのクライアント側が、機能の実装者に契約を課すことができるのか？」という点です。実際のコーディングでは、機能の実装者が使用者に契約を課すことはできても、使用者が実装者に契約を課すことは明示的にするのはむずかしいです。

でも実は一つだけクライアントが実装者に契約を課す方法があるのです。OCP のところで出てきた図をもう一度見ると答えがでてくるのではないでしょうか？ そう！Client に、必要なインターフェースを定義してもらうのです。クラスの使用者である Client は、自分の定義したインターフェースにのみ依存します。 Server はそのインターフェースを実装するときに、契約に沿って実装すればよいのです。

この、「契約による設計」を適用することで、Liskov の置換原則を守ることができるようになります。この辺の解説が非常に面白いので、一度本書を読んでみてください。
　
<h4>参考</h4>

<ul><li><a href="http://www.ne.jp/asahi/yamashita/programming/se/pbd.html" target="_blank" class="extlink">契約によるプログラミング</a></li></ul>

<h3 id="dip">依存関係逆転の原則(The Dependency Inversion Principle: DIP)</h3>

<blockquote>

<ol><li>上位のモジュールは下位のモジュールに依存してはならない。どちらのモジュールも「抽象」に依存すべきである</li>
<li>「抽象」は実装の詳細に依存してはならない。実装の詳細が「抽象」に依存すべきである</li></ol>

<cite>本書</cite>

</blockquote>

<img src="http://hamasyou.com/images/engineer_soul/layer.gif" alt="依存関係の図" />

上記の図は、上位モジュールである Policy 層が下位モジュールの Service 層や Utility 層に依存してしまっています。この依存関係を反転させたのが下記の図です。
　
<img src="http://hamasyou.com/images/engineer_soul/new_layer.gif" alt="依存関係を解消した図" />

上位のモジュールは、下位のモジュールに依存しなくなっています。注目なのは、下位のモジュールが、上位モジュールと同レベルの「抽象」に依存した点です。

<h4>抽象に依存せよ</h4>

この原則の本質は、「プログラムは具体的なクラスに依存してはいけない。プログラム内の関係はすべて、抽象クラスかインターフェースで終結すべきである。」という点にあります。この辺り、さらに上位のパッケージやモジュールといった集合に関しても同様の議論があります。本書の後半に、パッケージの結合度のところで、安定度に関しての説明時にさらに鮮明に言いたいことがわかるようになると思います。

<dl>
<dt class="tips">Tips</dt>
<dd>プログラムの関係は、抽象クラスかインターフェースにのみ依存するようにする。疎結合であることが、よいプログラムのひとつの指針です。</dd>
</dl>

<h4>インターフェースが変更されるのは、クライアントが変更を必要としたときのみ</h4>

抽象インターフェースはクライアントクラスが宣言するものであり、それはクライアント自らが必要なサービスを受けるためだという視野に立つと、インターフェースが変更されるのは、クライアントが変更を必要とするときだけです。

インターフェースは、誰の所有物でもありません。インターフェースはたくさんのクライアントによって利用され、多数のサーバーに実装されることになるので、どのグループにも所属しない独立した存在でなければならりません。

<h3 id="isp">インターフェース分離の原則(The Interface Segregation Principle: ISP)</h3>

<blockquote>

すべてのインターフェースを一つのクラスに押し込めてしまうのではなく、関連性を持ったインターフェースはグループ化し、抽象基本クラスとして分けて利用すべき

<cite>本書</cite>

</blockquote>

クラスを利用するクライアントが違うのならば、インターフェースを別にしておくべきです。クライアントは、利用するインターフェースに依存することになるからです。これは、依存関係逆転の原則でもあったように、インターフェースの変更は、クライアントが変更を要する場合にとどめておくべきです。

<dl>
<dt class="tips">Tips</dt>
<dd>クラスのクライアントが違うのなら、インターフェースは別にしておくこと。</dd>
</dl>

クライアントが利用するインターフェースごとに分離させておけば、変更時にクライアントに影響する度合いが少なくなります。たくさんのインターフェースを実装しているクラスに変更が入った場合、クライアントに、自分の利用しないインターフェースの変更による影響を与えてはいけないのです。

<dl>
<dt class="tips">Tips</dt>
<dd>インターフェースのクライアントに、クライアントが依存しないメソッドへの依存を強制してはならない。</dd>
</dl>

<h2>パッケージ設計の原則</h2>

Java言語で開発を行っていると、パッケージという言葉を聞くと思います。UML にも「パッケージ」というものが存在します。Java言語のパッケージとほとんど同じ意味で使われる、「機能のグループ単位」です。パッケージはサブシステムとも呼ばれます。

パッケージ分けの指針として、マーチン・ファウラーの著 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22" target="_blank" class="extlink">UML モデリングのエッセンス 第２版</a>』 ではこんなことを言っています。
　
<blockquote>

クラスの場合それをグループにまとめるための何らかの方針がなければ、グループ化は意味のない単なるまとまりになってしまいます。私が最も効果的だと感じ、UMLにおいても最も強調しているのは、<strong>依存関係に基づくグループ化</strong>です。

<cite>本書</cite>

</blockquote>

<dl>
<dt class="notice">Notice</dt>
<dd>クラスと、パッケージの一番の大きな違いは、「パッケージは依存関係に推移性をもたない」ということです。</dd>
</dl>

<img src="http://hamasyou.com/images/agilesoftware/dependency.gif" alt="クラス依存とパッケージ依存" />

<h3 id="rep">再利用・リリース等価の原則(Reuse-Release Equivalency Principle: REP)</h3>

<blockquote>

再利用の単位とリリースの単位は等価になる

<cite>本書</cite>

</blockquote>

この原則は、「再利用の単位(パッケージ)はリリースの単位より小さくなることはない」ということです。裏を返せば、「リリースの単位は、パッケージごとに行う」ということです。パッケージという言葉を、Java であれば「Jar ファイル」に置き換えると分かりやすいと思います。バグの修正やバージョンアップに伴うリリースは、クラス単位ではなく、Jar ファイルの単位で行うということです。

この原則は、パッケージのあり方を考えさせてくれます。
　
<blockquote>

パッケージに含まれるクラスは、すべてが再利用されるか、すべてが再利用できないかのどちらかにすべきだ。

<cite>本書</cite>

</blockquote>

とあるように、再利用を目的としたパッケージには、再利用できないパッケージは含めるべきではありません。例えば、「Jakarta Commons」のライブラリパッケージ(再利用可能)にドメイン固有のクラス(再利用不可能)を含めるべきでないということです。

<h3 id="crp">全再利用の原則(Common Reuse Principle: CRP)</h3>

<blockquote>

パッケージに含まれるクラスは、すべて一緒に再利用される。つまり、パッケージに含まれるいずれかのクラスを再利用するということは、その他のクラスのすべてを再利用するすることを意味する。

<cite>本書</cite>

</blockquote>

「同じパッケージに含めるクラスは、一緒に使われる傾向にある」ということを意味しています。例えば、List インターフェースと ArrayList クラスは一緒に使われる場合が非常に多いと思います。こういうものは、一緒のパッケージに入れておいたほうがよいのです。また、逆に、FileReader クラスとPreparedStatement クラスは、たぶん一緒には使わないでしょう。

<dl>
<dt class="tips">Tips</dt>
<dd>互いに強い関連性を持たないクラスを同じパッケージにまとめるべきではない</dd>
</dl>

<h3 id="ccp">閉鎖性共通の原則(Common Closure Principle: CCP)</h3>

<blockquote>

パッケージに含まれるクラスは、みな同じ種類の変更に対して閉じているべきである。パッケージに影響する変更はパッケージ内のすべてのクラスに影響を及ぼすが、他のパッケージには影響しない

<cite>本書</cite>

</blockquote>

<a href="#srp">単一責任の原則</a>のパッケージ版です。パッケージの変更理由は一つであるべきだと言っています。<a href="#crp">全再利用の原則</a>は、互いに強い関連性を持つクラスは同一パッケージにするべしと言っています。強い関連性を持ったクラスというのは、同じ変更理由で修正しなければならない場合が多いので、全再利用の原則と一緒に考えるといいと思います。

<h3 id="adp">非循環依存関係の原則(Acyclic Dependencies Principle: ADP)</h3>

<blockquote>

パッケージ依存グラフに循環を持ち込んではならない。

<cite>本書</cite>

</blockquote>

クラスの依存とパッケージの依存の違いは「パッケージの依存には、推移的な依存関係はない」という点だと『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22" target="_blank" class="extlink">UML モデリングのエッセンス 第2版</a>』 P.97 に書かれています。これの意図することは、「パッケージ間はインターフェースにのみ依存すべきである」ということだと思います。<a href="#isp" />インターフェース分離の原則</a>を適用したシステムであれば、パッケージ間は抽象にのみ依存するように出来ると思います。

<dl>
<dt class="tips">Tips</dt>
<dd>パッケージ依存サイクルに、循環を持たせてはいけない。</dd>
</dl>

<h4>循環を断つ方法</h4>

パッケージ依存循環を断ち切るためには、<a href="#dip">依存関係逆転の法則</a> を使います。依存しているクラスへのインターフェースを自分のパッケージに作る(移動させる)ことで、依存関係を逆転できます。

<h3 id="sdp">安定依存の原則(Stable Dependencies Principle: SDP)</h3>

<blockquote>

安定する方向に依存せよ。

<cite>本書</cite>

</blockquote>

変更することを意識して作られた(不安定な)パッケージが、変更しにくい(安定している)パッケージに依存されてはいけないというのが、この原則です。

「安定している」とは、変更しづらいという意味です。変更しづらいというのは「他のクラスやパッケージから依存されている場合です。つまり、依存されればされるほど変更が難しくなるのです。逆に「不安定」とは、依存ばかりしているクラスやパッケージのことで、依存先が変更されると自分も変更しなければなりません。

安定した方向に依存せよとはつまり、抽象に依存せよということです。システムの上位レベルの設計(アーキテクチャやフレームワーク)は、安定したパッケージに配置されるべきものです。ただ、アーキテクチャやフレームワークに柔軟性を持たせたい場合もあります。例えばプラグインを付け加えたりしたい場合です。そういったときには<a href="#ocp">オープン・クローズドの原則</a> が答えを握っています。
　
<q>実装に依存するな。抽象に依存せよ。</q>

<h3 id="sap">安定度・抽象度等価の原則(Stable Absstractions Principle: SAP)</h3>

<blockquote>

パッケージの抽象度と安定度は同程度でなければならない。

<cite>本書</cite>

</blockquote>

安定度の高いパッケージは、抽象度が高くなければならないと言っています。逆に、不安定なパッケージは具体的でなければならないということです。これは、抽象度が高いクラス(インターフェース)は、変更が少ないということに起伏しています。安定したパッケージに出来るだけ変更を発生させないためには抽象的である必要があります。

<h2>参考</h2>

+ この記事の元ネタです。オブジェクト指向設計を行うなら、本書を一度は読んでおくべし。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>

+ この本にもオブジェクト指向設計の原則に関しての解説があります。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715937/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894715937.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715937/sorehabooks-22/">プログラマのためのJava設計ベストプラクティス</a><br />カーク クネンシルト, Kirk Knoernschild, 長瀬 嘉秀, 今野 睦, テクノロジックアート<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4894715937"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />本質を突いた良書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />オブジェクト指向設計の本質に迫る貴重な本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715937/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894715937"/></a><br /></td></tr></table>
</div>

+ GRASP の原則が載っています。UMLを使ったオブジェクト指向設計が良くわかります。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" name="G-Tools">実践UML―パターンによる統一プロセスガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" name="G-Tools"><img src="http://images-jp.amazon.com/images/P/4894713861.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">クレーグ ラーマン　Craig Larman　依田 光江　依田 智夫　今野 睦<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713861&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLの実践的な使い方を包括的に理解できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" name="G-Tools">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg" border="0" alt="アジャイルソフトウェア開発の奥義" />
-----
KEYWORDS:
アジャイル,ソフトウェア,開発,奥義,オブジェクト指向,原則,設計
-----


PING:
TITLE: 依存関係逆転の原則
URL: http://blog.goo.ne.jp/glass-_-onion/e/91d51585d966f1a005f957eacacc01de
IP: 210.165.9.64
BLOG NAME: A Day In The Life
DATE: 03/30/2007 06:53:14 PM
依存関係逆転の原則とは
上位モジュールは下位モジュールに依存してはいけない。抽象は具象に依存してはいけない。上位モジュールと下位モジュールの間にインタフェースを用意して、下位モジュールの変更をインタフェースに吸収させる。という原則です。

まずはこのクラ...
-----

-----
CF50_CF_4: ロバート・C・マーチン (著), 瀬谷 啓介 (翻訳) 
CF50_URL: http://ec2.images-amazon.com/images/I/51YANQY595L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22
CF50_CF: ソフトバンククリエイティブ
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その13:Monostateパターン
BASENAME: -13monostate
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 07/23/2004 04:14:37 AM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

13番目は唯一性を保証するSingletonパターンとは別の方法である<b>Monostate</b>パターンのメモです。
-----
EXTENDED BODY:
<h2>Monostateパターン</h2>

<p class="option">Monostateパターンは、それぞれのインスタンスが状態をあたかも一つしか持っていないように振る舞うパターンです。</p>

Monostateクラスである条件は、<b>すべてのインスタンスで振る舞いが同じ</b>であればよいのです。実装はいたって簡単で、すべての変数をstaticにするだけです。メソッドはすべてstaticではないことに注意してください。

Monostateとは、たった一つの状態のみを持つというもので、どのインスタンスオブジェクトも同じ振る舞いを行います。Singletonパターンとは、「構造」と「振る舞い」のどちらに視点を置いているかが違うだけです。

Singletonパターンは、「<b>構造</b>」に着目しています。インスタンスをたった一つしか作らせない「構造」になっているからです。逆に、Singletonパターンを実装する場合は、必ずインスタンスが一つになるような構造にしておかなければなりません。

Monostateパターンは、「<b>振る舞い</b>」に着目しています。インスタンスを生成する方法に制約はなく、あくまでオブジェクトの「振る舞い」がどのインスタンスにおいても同じであるということを規制します。

SingletonパターンとMonostateパターンは非常に似通っていながら、少し違いがあります。Monostateクラスに対するテストケースは、Singletonクラスに適用できます。しかし、Singletonクラスのテストケースは、必ずしもすべてMonostateクラスに適用できない場合があります。Singletonクラスは常に同じインスタンスを返すのに対して、Monostateクラスはインスタンスはそれぞれ異なり振る舞いだけが同一のインスタンスになるからです。

<h3>SingletonクラスとMonostateクラスの主な相違点</h3>

<h4>Singleton</h4>

<dl>
<dt>継承できない</dt>
<dd>Singletonクラスから派生されるクラスは、必ずしもSingletonにならない。派生クラスをSingletonとして機能させたければ、適切なインスタンス変数とstaticメソッドを用意する必要がある。</dd>
</dl>

<h4>Monostate</h4>

<dl><dt>継承できる</dt>
<dd>Monostateクラスの派生クラスはMonostateクラスになる。親クラスのすべての変数を共有できます。</dd>
<dt>ポリモーフィズム可能</dt>
<dd>Monostateのメソッドはstaticではないので、派生クラスの中でオーバーライドできます。Singletonクラスでは、そもそもインスタンスが一つしかないので、ポリモーフィズムにならない。</dd>
</dl>

<h2>パターンの適用タイミング</h2>

SingletonパターンとMonostateパターンの適用するタイミングは、以下のような場合です。<strong>Singletonパターンを導入するのは、「構造」の観点からインスタンスを一つに制限したい場合</strong>、</strong>Monostateパターンを導入するのは、「振る舞い」の観点からインスタンスを制限したい場合</strong>

SingletonパターンとMonostateパターンはどちらも、オブジェクトの唯一性を保証する場合に使うことができます。その中でも、Monostateパターンは、<b>ポリモーフィズムを利用したい場合</b>に使うことができます。

<h2>実装サンプルと参考文献</h2>

+ SingletonパターンとMonostateパターン
<a href="http://blog.goo.ne.jp/meiamipapa/e/ae13a17af6305d5b6bb4208d402ccaa3" target="_blank" class="extlink">ジャズと育児とオブジェクト</a>

+ Monostate
<a href="http://www.hyuki.com/dp/dpinfo.html#Monostate" target="_blank" class="extlink">デザインパターン紹介</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Monostateパターン">
-----
KEYWORDS:
デザインパターン,Monostate,Singleton,GoF,振る舞い,構造
-----

COMMENT:
AUTHOR: 松浦
EMAIL: 
IP: 218.219.235.91
URL: http://blog.goo.ne.jp/meiamipapa
DATE: 01/06/2005 11:12:31 PM
はじめまして、参考としてリンクしていただいた「ジャズと育児とオブジェクト」を書いています、松浦と申します。自分のblog名を試しに検索してみたところ、こちらを発見しました。

僕のblogは誰にも宣伝せず、本当に自分のためのメモ程度に書いていたのでまさかリンクしていただけるとは嬉しい喜びです。ありがとうございます。

ところで、「C++の設計と進化」という翻訳本が出ます。良かったら読んでみてください。
<a href="http://blog.goo.ne.jp/meiamipapa/e/82914fe063ca2a977818021ea85b7259" rel="nofollow">http://blog.goo.ne.jp/meiamipapa/e/82914fe063ca2a977818021ea85b7259</a>

って、宣伝になってしまいました、ごめんなさい (^^;
-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 192.168.0.2
URL: http://xlegend.dip.jp/
DATE: 01/07/2005 08:45:49 PM
はじめまして。
宣伝でも全然結構ですよ。

技術者様のサイトを見るのは楽しいです。
「ジャズと育児とオブジェクト」の組み合わせは初めてでしたが・・・ (笑)

今後とも宜しくお願いします。
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その14:Observerパターン
BASENAME: -14observer
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 07/25/2004 10:23:32 PM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

14番目のパターンは観察対象の状態が変化を通知しそれに沿って処理を行うという<b>Observer</b>パターンのメモです。
-----
EXTENDED BODY:
<h2>Observerパターン</h2>

<p class="option">Observerパターンは、観察対象(Subject)のオブジェクトの状態が変化したときに、共通の方法で観察者(Observer)に通知することを意図したものです。</p>

<img src="http://hamasyou.com/images/design_pattern/observer.gif" alt="Observerのクラス図" />

このパターンは主に、GUIシステムで使われます。GUIシステムでは、データを持つBeanオブジェクトと、それを表示するビューオブジェクトがきれいに分かれているのが一般的です。このとき、オブジェクト指向の原則の一つである「<b>オープン・クローズドの原則(OCP)</b>」を意識して設計を進めると、次第にObserverパターンが有効に働いてくるのです。

<section>

<h4>参考</h4>

『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank" class="extlink">アジャイルソフトウェア開発の奥義</a>』

観察対象であるSubjectは、自分がどのObserverに観察されているかは知りません。ただ、観察されているという事実と、自分の状態に変化があった場合に、notifyメソッドを呼び出して、すべてのObserverのupdateを呼び出してやるだけです。

</section>

Observerパターンには、2つの種類があります。updateを呼び出す時の振る舞いが2つあるのです。一つは、updateの引数に変更された状態を渡すことで、Observerに通知する「<b>push</b>」型。もう一つは、updateを呼び出されたタイミングでObserverがSubjectに状態を問い合わせる「<b>pull</b>」型です。

<section>

<h4>push型の特徴</h4>

push型は、ObserverがSubjectのどの状態が変更されたのかを直接知ることができるのが特徴です。updateの引数で渡されてきたものが、変更された状態だからです。短所は、updateメソッドに引数をとる形でインターフェースを定義しなければならないので、一般化に向かない点です。

</section>

<section>

<h4>pull型の特徴</h4>

pull型は、一般化した形でupdateメソッドを定義できます。しかし、Subjectのどの状態が変更されたのかをSubjectに問い合わせなければなりません。Subjectに状態が非常にたくさんある場合は、なんらかの方法を使わなければ、複雑になってしまいます。

</section>

「push型」と「pull型」のどちらを使うかは、単純にSubjectの状態の複雑さで決めればいいと思います。Subjectの状態が単純でならばpush型。Subjectの状態が複雑で、多くのフィールドを持つような場合はpull型にするといいと思います。

<section>

<h4>参考</h4>

<a href="http://www.objectclub.jp/technicaldoc/pattern/eDWP" target="_blank" class="uline">オブジェクト倶楽部</a>

</section>

<h2>パターンの適用タイミング</h2>

Observerパターンは、次のような場合に使えます。<strong>状態を持つオブジェクトが、状態変化を通知したいが、通知後の処理については知りたくない場合。(上位層が下位層に依存したくない場合)</strong>

<h2>実装サンプルと参考文献</h2>

+ 日立ソフト(Observerパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/observer.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/Observer/index.htm" target="_blank" class="extlink">Observerの骸骨</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/">独習デザインパターン</a><br />株式会社テクノロジックアート ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104450"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104450"/></a><br /></td></tr></table>
</div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/">デザインパターンによるJava実践プログラミング</a><br />スティーヴン シュテルティン, オーラブ マースセン, Stephen Stelting, Olav Maassen, クイック<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4756141552"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4756141552"/></a><br /></td></tr></table>
</div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/">UML 500の技</a><br />Windowsプログラミング愛好会<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774116882"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774116882"/></a><br /></td></tr></table>
</div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/">アジャイルソフトウェア開発の奥義</a><br />ロバート・C・マーチン ， 瀬谷 啓介<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797323361"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797323361"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Observerパターン">
-----
KEYWORDS:
デザインパターン,Observer,オブザーバー,GoF,Java,状態,変化,通知
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: ユースケースの適用:実践ガイド
BASENAME: ユースケースの適用実践ガイド
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/28/2004 02:51:43 AM
TAGS: ユースケース,定番,良書
-----
BODY:
実際のソフトウェア開発を行う上で、「<strong>ユースケース</strong>」をどのように作り上げていけばいいのかということが、ケーススタディを進める感じで学べます。RUPという開発プロセスに従ってユースケースの最初の一歩から、設計の前までをわかりやすくまとめてあります。190ページ弱という結構量が少ない中、ユースケースの色々な使い方、ドキュメントのまとめ方が書かれています。

今まで読んできた中で、ユースケースについて書かれている本でこの本ほどわかりやすいと思えたものはまだないです。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、ユースケースの使い方をケーススタディに沿って解説されています。カズ・タラ・デニス・リサの4人のアメリカ人(?)が、通信販売の会社を作るという設定で進められていきます。

要所要所で、ドキュメントの書き方や中身についての議論もあり、一貫した取り組みができるのが魅力的です。読み物としても筋が通っており、実際に読み進めながら一緒にドキュメントを作り上げていくと、さらに理解度が増すと思います。

本書のカバー範囲は、RUPという開発プロセス上でユースケースをいかにして使うかというところです。顧客の要求に沿って、ユースケースを書き始めるところから、シナリオの書き方、個々のユースケースからシステムレベルのユースケースへの広げ方、ドキュメントの書き方、レビューの仕方、設計への入り方と進んでいきます。

ユースケースに特化した本はいくつかありますが、ケーススタディに沿って進めている本書は、他のどの本よりも理解しやすいと思います。4人の登場人物の議論の仕方がいかにもアメリカチックですが、的を得た疑問点に対して、論理的に解答されているところはケーススタディならではのものだと思いました。


<h2>覚書き</h2>

<h3>リスク管理</h3>

リスク分析には、基地のリスク、その他の既知の市場要因、プロジェクトに関する仮定事項が含まれていなければならない。

<h3>システムの境界を考える</h3>

システムの境界を明確に識別すること。何がシステムの内部にあり、何がシステムの外部にあるかを見つけ出すことが大切。システムの内部にあるものに関しては、自分たちが責任を持たなくてはいけない。反対に、システムの外部にあるものに関しては、インターフェースのみに責任をもつ。

アクターは常にシステムの外部に存在する。クラス図やシーケンス図にアクターがいるときは、何かが間違っている証拠である。

UMLでは、ユースケースは常にアクターによって開始される。時間などによって起動されるユースケースがあるかもしれないが、その場合は通常、タイマーをアクターとみなす。

アクターとして宣言されれるものについての一つのルールとして、<strong>自分たちは管理しない</strong>。

<h3>シナリオ</h3>

検討しなければならないもの：基本機能、あらゆる代替手順、エラー条件、ユースケースの開始時に成り立たなければならない事前条件、ユースケースの終了時に成り立たなければならない事後条件

事後条件は、ユースケースがどの分岐、代替パスを通った場合でも常に成り立たなければならない。

シナリオはアクターの視点から書くもの。シナリオのステップはアクターから見えるか、アクターが容易に推測できるものでなければならない。

<h2>参考</h2>

+ ユースケース入門

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713772/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894713772.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713772/sorehabooks-22/">ユースケース入門―ユーザマニュアルからプログラムを作る</a><br />ダグ ローゼンバーグ, ケンドール スコット, Doug Rosenberg, Kendall Scott, 長瀬 嘉秀, 今野 睦, テクノロジックアート<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4894713772"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />これなら使える<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ユースケースベースのシステム開発<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクトモデリング初心者には完璧にさえ見える<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713772/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894713772"/></a><br /></td></tr></table>
</div>

+ UMLのエッセンスならこちら

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4881358642.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/">UMLモデリングのエッセンス―標準オブジェクトモデリング言語入門</a><br />マーチン ファウラー, ケンドール スコット, Martin Fowler, Kendall Scott, 羽生田 栄一<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4881358642"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />無駄がない導入書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLエッセンスを凝縮<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />簡にして要を得た優れた解説書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4881358642"/></a><br /></td></tr></table>
</div>

+ ユースケースに関して、非常に実践的な観点から解説してあります。(おすすめ)

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101273/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798101273.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101273/sorehabooks-22/">ユースケース実践ガイド―効果的なユースケースの書き方</a><br />アリスター コーバーン, Alisteir Cockburn, ウルシステムズ株式会社, 山岸 耕二, 矢崎 博英, 水谷 雅宏, 篠原 明子<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798101273"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ユースケースという言語の"いい書き方"を学べます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ユースケースを書く技術を教える本の中で考えうる限り最高品質<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />要件定義/基本設計を担当する方必見！<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101273/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798101273"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894711869.09.MZZZZZZZ.jpg" border="0" alt="ユースケースの適用:実践ガイド">
-----
KEYWORDS:
ユースケース,適用,実践,ガイド,ケーススタディ
-----


-----
CF50_CF_4: ゲリ シュナイダー (著), ジェイソン ウィンタース (著), Geri Schneider (著), Jason P. Winters (著), 羽生田 栄一 (著), オージス総研 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/41C00GY81YL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894711869/sorehabooks-22
CF50_CF: ピアソンエデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 逆引きサーブレット&JSPリファレンス
BASENAME: jsp
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 07/31/2004 03:26:06 AM
TAGS: J2EE,定番
-----
BODY:
本書は、技術者必携の辞書の役割を十分果たしてくれるハンドブックです。「<strong>やりたいこと</strong>」から「<strong>実装方法</strong>」を導くためのサーブレット&JSPの開発者のための本となっています。

僕が本書をおすすめする理由は、良くある参考書と違って、クラスやメソッドの一覧が掲載されていないところです。本書の役割は、開発現場ですぐに使えるリファレンスだと思っています。開発現場に一冊あれば、サーブレット初心者の開発者から中級開発者まで広く利用できると思います。

見出し、目的、ポイント、説明、サンプルコード、関連項目、仕様書の対応部分の7パートで一つのトピックを扱っています。不要な説明は極力省き、すぐに使える点が非常に魅力的な一冊です。
-----
EXTENDED BODY:
<h2>特徴</h2>

約100近いトピックを取り扱っています。サーブレットの基礎、JSPの基礎、応用Tips、資料の4つの章からなっています。基礎の部分では、ほんとに基礎の部分から、実際のコーディングで詰まりそうな部分まで扱っています。応用Tipsの部分では、少し凝ったことを行う方法が載っています。

主な内容は以下のようになっています。

<ul><li>リクエスト文字のエンコーディングをセットする</li><li>別のページへ転送する</li><li>別のページを挿入する</li><li>挿入もとのパス情報を参照する</li><li>一度書き込んだレスポンスデータを取り消す</li><li>エラーページへジャンプする</li><li>セッション内の情報を追加/削除する</li><li>初期化パラメータを取得する</li><li>サーブレットの実行を一時停止する</li><li>一時ファイルの保存場所を取得する</li><li>リソースファイルを読み込む</li><li>サーブレットの実行後に別処理を挿入する</li><li>HTTPを使ってユーザ認証する</li><li>フォームを使ってユーザ認証する</li><li>Beanを利用する</li><li>HTMLの特殊コードをエンコードする</li><li>最終更新日を制御する</li><li>動的に生成したExcelファイル(CSV形式)をダウンロードさせる</li><li>動的に生成した画像(JPEG)をダウンロードさせる</li><li>動的に生成したZIPファイルをダウンロードさせる</li><li>セキュリティ制御をかける</li><li>別のアプリケーションへBeanを転送する</li><li>C言語で書かれた関数をサーブレットの中から呼ぶ</li><li>クラスパスを調べる</li><li>メールを送信する</li><li>添付ファイルをメールで送信する</li><li>タグライブラリを作る</li><li>文字化けについて</li></ul>

本書は、かなり使えるサーブレット&JSPのリファレンスとなっています。すべてのトピックにサンプルコードがついているので、ソースコードを眺めて、どんなことができるのかを見るだけでも勉強になります。おすすめです。

<h2>参考</h2>

+ さらにプチリファレンスが存在します。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798005223/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798005223.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798005223/sorehabooks-22/">プチリファレンスJSP&サーブレット  プチリファレンスシリーズ</a><br />山田 祥寛<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798005223"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />コンパクトだが内容豊富<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かわいくって使いやすい<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798005223/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798005223"/></a><br /></td></tr></table>
</div>

+ 樋口研究室からの保証つき

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103470/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798103470.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103470/sorehabooks-22/">一番やさしいJSP&サーブレット入門塾</a><br />樋口研究室<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798103470"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />一番やさしいかどうかは別にして<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />2度楽しめる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />なるほど！と思った<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103470/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798103470"/></a><br /></td></tr></table>
</div>

+ JSP/サーブレットの解説書は、この本だけで十分です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797324120.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/">サーブレット/JSP プログラミングテクニック 改訂版</a><br />今野 睦, 戸田 和宏, 藤村 浩士, 高安 厚思, 西川 麗, 三島 俊司<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797324120"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これ一冊で十分だ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />技術解説にとどまることなくWebアプリケーション開発を解説した良書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797324120"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/021152950000.jpg" border="0" alt="逆引きサーブレット&JSPリファレンス">
-----
KEYWORDS:
サーブレット,Servlet,JSP,逆引き,リファレンス
-----


-----
CF50_CF_4: 日立ソフトウェアエンジニアリングインターネットビジネス推進部 (著)
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/021152950000.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774113794/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: UMLシステム設計実践技大全―アッと驚く達人の技
BASENAME: uml_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 08/06/2004 01:51:42 AM
TAGS: UML,サンプルが豊富
-----
BODY:
タイトルは別として、UMLに関しての一般的な知識とある程度の使いどころを理解するには良い本だと思いました。全体的に絵や表をたくさん使っていて、UML初心者には非常にとっつきやすいと思います。ただ、タイトルの『アッと驚く達人の技』や『実践技大全』といった部分に引っかかったUMLの知識のある人には、少し物足りないかも知れません。

本書はUMLをシステム開発の現場で使うための最初の一冊です。ユースケースの意味や使いどころ、クラス図の描き方や注意点、シーケンス図の流れやワンポイントなど、それなりに使える知識が載っていました。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の特徴はなんと言っても絵と表非常にたくさん載っている点でしょう。初心者向けの非常にわかりやすい丁寧な言葉で説明してあり、UMLについての大体の知識は抑えられると思います。

しかし、タイトルがすこし大げさすぎるのがマイナスポイントだと思いました。中身は完全に初心者向けなのに、『達人の技』、『実践技』などの大げさな言葉につられて買ってしまうと少し物足りなく感じると思います。タイトルは6分くらいに受け取って、UML知識の整理やシステム設計時におけるUMLの使い方を学び始めるに、本書をおすすめします。

本書で説明されているUMLは、「<strong>ユースケース</strong>」「<strong>クラス図</strong>」「<strong>シーケンス図</strong>」「<strong>アクティビティ図</strong>」です。実践で使われている主な4つの図についてのみ説明しています。この辺りがおそらく『実践技』の由来でしょう。図の描き方やポイント、注意点や考えどころを絵と表を中心に説明していますので、ぱらぱらめくっているだけでもイメージが頭に残るようになっています。初心者におすすめの一冊です。

<h2>参考</h2>

+ もう少し高度なUMLの使い方を学びたい人に

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4881358642.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/">UMLモデリングのエッセンス―標準オブジェクトモデリング言語入門</a><br />マーチン ファウラー, ケンドール スコット, Martin Fowler, Kendall Scott, 羽生田 栄一<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4881358642"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />無駄がない導入書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLエッセンスを凝縮<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />簡にして要を得た優れた解説書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4881358642"/></a><br /></td></tr></table>
</div>

+ かなりおすすめのUML実践本です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894713861.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/">実践UML―パターンによる統一プロセスガイド</a><br />クレーグ ラーマン, Craig Larman, 依田 光江, 依田 智夫, 今野 睦<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4894713861"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894713861"/></a><br /></td></tr></table>
</div>

+ モデリングに関して、僕が非常に尊敬している方による一冊です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4822221180.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/">UMLモデリングの本質</a><br />児玉 公信<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4822221180"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />この本を手がかりに、自分でやってみよう！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLモデリングの窓から見た情報システム工学の展望<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これは「モデリング本」です。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4822221180"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4816336354.09.MZZZZZZZ.jpg" border="0" alt="UMLシステム設計実践技大全―アッと驚く達人の技">
-----
KEYWORDS:
UML,システム設計,達人,アッと驚く,実践技,大全
-----


-----
CF50_CF_4: テクノロジックアート (著), C&amp;R研究所 (著), 橋本 大輔 (監修), 長瀬 嘉秀
CF50_URL: http://ec2.images-amazon.com/images/I/61W82Z3HMJL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4816336354/sorehabooks-22
CF50_CF: ナツメ社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: 憂鬱なプログラマのためのオブジェクト指向開発講座
BASENAME: post_12
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 08/10/2004 01:36:35 AM
TAGS: C++,わかりやすい,オブジェクト指向,定番,良書
-----
BODY:
これから<strong>オブジェクト指向</strong>をはじめる人に、超おすすめの一冊です。本書のサンプルはC++言語で書かれていますが、Javaで開発を行っている人も敬遠しないでください。ところどころに実装依存の話も出てきますが、全体的に抽象度が高いです。にもかかわらず読みやすく理解しやすく、楽しいのはなぜなんでしょう？

オブジェクト指向とはなんだというところから、どんな考え方が本当のオブジェクト指向なのかを気づかせてくれる、非常に秀逸な本です。繰り返し繰り返し要点を述べてくれるので、頭に残りやすいです。また、最後まで読みきれば、C++言語に関する一通りの文法も学べてしまう一石二鳥の内容となっています。

是非、オブジェクト指向をこれから始めるという方に、オブジェクト指向をもう一度勉強したいという人に読んでいただきたい良書です。自身を持っておすすめします。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の特徴は、段階的に繰り返し同じ事を違った角度から解説してくれるところにあります。オブジェクト指向のなんたるかが、確実に頭に残るように書かれています。それでいて、非常に読みやすくわかりやすいです。

一つ残念なのは、最近のUMLブームより前に発売されたこともあり、中で使われている記法はOMT記法となっています。ほとんどUMLと同じように読めるのですが、こういうところから古書の感じがしてしまうのが残念です。それでも、今読んでも他のオブジェクト指向解説本にくらべたら、まだまだ右に出るものは少ないと思います。

本書の目次です。

<ul><li>誤解と混乱からの開放</li><li>クラスとはなにか</li><li>「データ」ではなく「クラス」である理由</li><li>私たち開発者にとってのメリットとは</li><li>なにがクラスになるのか、そしてならないのか</li><li>知られざる最重要概念</li><li>プログラムを「作らない」ためのテクニック</li><li>さらに深くシステムを洞察するために</li><li>複数の面をもつクラスの本質に迫る</li><li>オブジェクトの変化を管理するための方法</li><li>有限状態マシンの本質を追求するためには</li><li>オブジェクトの連携の把握</li><li>実際にプログラムを動かすために</li><li>オブジェクト指向に不可欠な実装技術</li><li>動くプログラムを作る</li></ul>

「なにがクラスになるのか、そしてならないのか」というタイトルに、非常に興味を持ったのが本書を購入したきっかけでした。非常に読みやすく、買ったその日に全部読みきったのを覚えています。その後も、3度ほど読み返してみました。それくらい面白い本だったのです。

すべてのオブジェクト指向開発技術者におすすめする、非常に優れた本だと思います。是非読んでみてください。

<h2>覚書き</h2>

<ul><li>ユーザの視点からシステムを客観的に見たときに、そこに存在する対象(モノ)をモジュール化したモノがクラス</li><li>改良の要求は「開発時の視点」ではなく、「運用時の視点｣から常に発生する</li><li>分析段階の成果物は、環境に依存性がないものになる</li><li>システムからクラスを探し出す作業は、システムの仕様から名詞を探す作業となる</li><li>ソフトウェア構成部品としてクラスを考えるならば、内部に隠されてしまう属性よりも、外部からの窓口となる操作のほうがはるかに重要</li><li>オブジェクト指向開発では、クラスの内部の変化を状態としてとらえる</li><li>イベントとは一瞬しか存在できないもの。時間がかかるようであれば、それはもうイベントではなく一つの状態</li><li>問題領域のクラスは、基本的に処理系独自の処理や、アプリケーション独特の仕様に依存するべきではない</li></ul>

<h2>参考</h2>

+ オブジェクト脳を作るための本です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104183/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104183.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104183/sorehabooks-22/">オブジェクト脳のつくり方―Java・UML・EJBをマスターするための究極の基礎講座</a><br />牛尾 剛 ， 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798104183"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />上級者にもおすすめ！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />もう少し砕いて書いてもらえれば<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私も、オブジェクト脳になりたい。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104183/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798104183"/></a><br /></td></tr></table>
</div>

+ オブジェクト指向についての疑問点の解消にどうぞ

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4822281957.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/">オブジェクト指向でなぜつくるのか―知っておきたいプログラミング、UML、設計の基礎知識―</a><br />平澤 章<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4822281957"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />わかりやすい！！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />共感できます。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向の本質<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4822281957"/></a><br /></td></tr></table>
</div>

+ これからのC++によるソフトウェア開発に欠かせない一冊になるはず

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797328541/sorehabooks-22/">C++の設計と進化</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797328541/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797328541.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1"><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797328541&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797328541/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4881356194.09.MZZZZZZZ.jpg" border="0" alt="憂鬱なプログラマのためのオブジェクト指向開発講座">
-----
KEYWORDS:
オブジェクト指向,開発,講座,憂鬱,プログラマ,C++,実践
-----

COMMENT:
AUTHOR: 村山
EMAIL: 
IP: 219.98.204.203
URL: 
DATE: 09/02/2004 12:05:40 AM
憂鬱本，ですか．．．．
絶賛する人もいますが，私が心から軽蔑している本です．所詮は似て非なる紛い物．あれだったら読まない方がマシです．時間の浪費，人生の無駄使い．迷える子羊を「分かったつもり」にさせて，なお一層迷わせる本です．
あとの二つもさほど勧める気はありません．いずれも憂鬱本ほどじゃないけど内容はイマイチ．
まあ私のコメントを信じる信じないは勝手ですが，憂鬱本を信じる限り，いずれ大きな壁にぶつかるでしょう．その時こそ，私の忠告を思い出して頂きたい．アレは紛い物であり，信じるものは救われないのだと．
-----

COMMENT:
AUTHOR: 秀
EMAIL: 
IP: 61.116.43.236
URL: 
DATE: 10/29/2004 10:49:31 PM
私は、C言語世代の人間で、憂鬱本＋日経BP本でオブジェクト指向が、わかったような気がしてきたところです。要は、自分の考え方に会った切り口で説明されているかどうかがポイントであり、本書の評価が高いのは、本書の切り口に共感する人が多いということと理解しています。
組織の中間にいると、周りには批判する人ばかりが多くて嫌になります。結局、評論家と一般的に呼ばれる人たちは、無意識のうちに自分の底の浅さを隠したいのでしょう。
さて、村山さんは批判に対する提案・代替案（お勧めの書籍）をお持ちでしょうかか？
それとも、批判するだけ？それなら、あなたの忠告は思い出す価値はありません。
-----

COMMENT:
AUTHOR: しゅん
EMAIL: 
IP: 210.130.210.44
URL: 
DATE: 11/29/2004 08:45:34 PM
僕も秀さんの意見に共感します。

僕はプログラミング初級者の学生です。憂鬱本を読み大変感銘を受けました。
もしかしたら、村山さんの仰るとおり、いつか大きな壁にぶつかるのかもしれないですが、少なくともこの本は、オブジェクト指向及びC++の入門書として、万人を共感させることの出来るかなりの良本だと思います。

＞読まない方がマシです．時間の浪費，人生の無駄使い．
と仰るなら、”わかったつもりの子羊”を作りださないように、この本のダメな点、もしくはその他の推奨できる本を提示するべきです。
抽象的な批判をするだけなら、猿と同レベルですよ。
-----


-----
CF50_CF_4: Tucker (著)
CF50_URL: http://ec2.images-amazon.com/images/I/613VSGX380L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: Cygwin+CygwinJE-Windowsで動かすUNIX
BASENAME: cygwincygwinje-windowsunix
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 08/15/2004 04:12:45 PM
TAGS: Cygwin
-----
BODY:
CygwinはWindows上にUNIX環境を構築することを目的としたソフトウェアです。一昔前では、まだまだ実用で使えるレベルではなかったのですが、最近では非常に安定していて、とても使いやすいツールになっています。

本書は、CygwinをWindows上で使う場合に問題となりやすい「<strong>日本語化</strong>」を重点的に解説しています。独自のパッケージを付属のCD-ROMからインストールすることで、Cygwin上で日本語環境を簡単に構築・運用できるようになっています。

日本語環境を整える方法の他、XFree86を利用してCygwin上で X Window System を起動させる方法も解説しています。コマンドリファレンスも載っていて、本書一冊で非常に心強いです。

本書は、あくまでWindows上でCygwinを使う方法を解説しているので、UNIXの基本的な使い方等は別の参考書を利用する必要があります。本書の対象読者は、WindowsとUNIXを使い分ける必要があり、手軽に環境を整えたいという人だと思います。こういった解説本としては、なかなか読みやすく、良書のように思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、Cygwinのインストール、日本語環境構築、サービスの利用、Xサーバとしての利用方法、セキュリティ、コマンドリファレンスといった内容について解説してあります。主に本書を重宝するのは、日本語関係の設定がうまくいかない場合だと思います。付属のCD-ROMに独自の日本語化パッケージを備えており、簡単に日本語環境を設定することができます。

本書の目次です。

<ul><li>Cygwinの概要</li><li>Cygwinの構造</li><li>Cygwinの用途</li><li>インストールの方法</li><li>コマンドラインから使うCygwin</li><li>日本語環境の構築</li><li>デーモンを利用する</li><li>CygwinのGUI環境</li><li>XFree86を使う</li><li>CygwinをXサーバにする</li><li>Cygwinの環境変数</li><li>Cygwinのセキュリティ</li><li>より進んだアプリケーションの利用方法</li><li>Cygwinコマンドリファレンス</li><li>トラブルシューティング</li></ul>

私は本書を、大学のWindowsマシンにUNIX環境を導入するときに本書を利用しました。Cygwinを使うと、Windowsで作業をしていて、少しUNIXで作業をしたい場合に非常に有効です。完全にWindowsとUNIXを分けて作業したい場合は、マシンを2台使うか、VMware等のVirtual環境を利用するのもいいとも思います。主にWindowsで作業するが、手軽にUNIX環境も使いたいというひとにCygwinをお勧めし、本書はそれを上手にサポートしてくれる良書です。

<h2>参考</h2>

+ Cygwinのコマンドリファレンスです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/483991169X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/483991169X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/483991169X/sorehabooks-22/">Cygwinコンパクトリファレンス</a><br />河野 寿, 竹田津 恩, 大橋 正巳<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=483991169X"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />手堅いリファレンス<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/483991169X/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="483991169X"/></a><br /></td></tr></table>
</div>

+ 本気でわかりやすいみたいです。本書と一緒にいかがですか？

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839911959/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4839911959.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839911959/sorehabooks-22/">WindowsでUNIXを使う本―CygwinでUNIX入門</a><br />阿久津 良和<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4839911959"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />付属CD-ROMは使えない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Cygwinの入門書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839911959/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4839911959"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4756143059.09.MZZZZZZZ.jpg" border="0" alt="Cygwin+CygwinJE-Windowsで動かすUNIX">
-----
KEYWORDS:
Cygwin,Windows,UNIX,JE,日本語環境
-----


-----
CF50_CF_4: 佐藤 竜一 (著), いけだやすし (著), 野村直 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/51PR0RRRN0L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4756143059/sorehabooks-22
CF50_CF: アスキー
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: オブジェクト脳のつくり方
BASENAME: post_10
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 08/23/2004 02:28:41 AM
TAGS: わかりやすい,オブジェクト指向,定番,良書
-----
BODY:
オブジェクト脳、略して『オブ脳』の芽生えはエンジニア人生の転機となる。と本書のカバーに書いてあります。最近のシステム開発の現場でオブジェクト指向という言葉を聞いたことが無い人はいないと思います。組み込みの業界でさえオブジェクト指向を取り入れた設計・実装が行われています。

本書は、エンジニアに必須の知識となった『オブジェクト指向』を理解するための要領本です。本書を読めばきっとあなたにもオブジェクト脳が芽生えることでしょう。オブジェクト脳を持った人は、プログラミングの要素をオブジェクトとして捕らえます。

オブジェクト指向を学ぶ理由なんて何でも良いんじゃないですか？「周りがやっているから自分もオブジェクト指向を身に付けたい」という理由でもいいと思います。どんな不純な動機でも本書を読めばオブ脳の芽が生えてくるのですから。オブジェクト指向を学びたいという人に、おすすめです。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の特徴は、なんと言ってもその<b>わかりやすさ</b>です。オブジェクト指向についての本はさまざまなものが出ていますが、本書はそのどれよりもわかりやすいと思いました。

まず、専門用語がほとんど出てこないところが特徴だと思います。後半のEJBの解説は、前半のオブジェクト指向解説と比べて極端に難しくなってしまっていますが、本書は前半だけでも非常に価値が高いと思います。逆に、後半のEJBの部分は無くても良いと私は思いました。

<a href="http://e-words.jp/w/EJB.html" target="_blank" class="extlink">EJBとは何か 【Enterprise JavaBeans】 ： IT用語辞典</a>

オブジェクト指向の3大基礎である「<strong>継承</strong>」「<strong>カプセル化</strong>」「<strong>ポリモーフィズム</strong>」について、しっかりと解説しているところが魅力です。中でも、ポリモーフィズムに関しても説明が、非常に丁寧です。オブジェクト指向で最初につまずくのがこのポリモーフィズムということから、特に力を入れているのが高評価です。

オブジェクト指向解説で使われているサンプルが、「社長命令、起立」というものです。社長と社員とのやり取りを、オブジェクト指向を使って表すとどうなるかという点から解説しています。ここでの解説を理解すると、世の中ほとんどが、「社長命令、起立」が使われているということに気づきます。

非常にわかりやすい解説と、ちっとも難しくないサンプルが本書の魅力です。後半についているEJBの解説はかなり難しく、初心者は挫折してしまう可能性があります。その部分を本書に入れるべきだったのかというのは疑問ですが、全体的に見ても非常に「買い」の一冊だと思います。新人研修の参考資料などに使えると思います。

<h2>参考</h2>

+ オブジェクト指向に関しての解説なら、本書もおすすめです。C++プログラマ向け

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4881356194.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/">憂鬱なプログラマのためのオブジェクト指向開発講座―C++による実践的ソフトウェア構築入門</a><br />Tucker!<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4881356194"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />本質を理解できる。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />何をすればいいのかが分かる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />"オブジェクト指向"を理解する最短の道<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4881356194"/></a><br /></td></tr></table></div>

+ オブジェクト指向でなぜ作るのか？その答えは本書のなかで

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4822281957.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/">オブジェクト指向でなぜつくるのか―知っておきたいプログラミング、UML、設計の基礎知識―</a><br />平澤 章<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4822281957"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />読んで損はない１冊だと思います！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />基礎がしっかりしているベテランエンジニアにこそ。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに「目からうろこ」のオブジェクト指向入門書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4822281957"/></a><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798104183.09.MZZZZZZZ.jpg" border="0" alt="オブジェクト脳のつくり方">
-----
KEYWORDS:
オブジェクト脳,EJB,オブ脳,芽生え,パターン
-----


-----
CF50_CF_4: 牛尾 剛 (著), 長瀬 嘉秀 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51MXTVQSZ7L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798104183/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: はじめてのJSF―Web開発を変えるJavaフレームワークのすべて
BASENAME: jsfwebjava
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 09/06/2004 09:45:37 AM
TAGS: JSF,定番
-----
BODY:
本書は、JSFフレームワークがどんな流れで処理を進めていくのかがよくわかるので非常に初心者向けだと思います。実際、僕が最初にJSFをやることになって、いろいろと書籍を見た中では、フレームワークの流れが一番よくわかる本だと思いました。

JSFにはライフサイクルというものがあり、6つのフェーズからできています。この6つのフェーズ（Viewの復元・リクエスト値の適用・入力値の検証・モデル値の更新・アプリケーションロジックの呼び出し・レスポンスレンダリング）のそれぞれに関してフレームワークがどのように処理を進めていくのかを、丁寧に解説しています。

JSFは、これから使われてくる技術であり、これからのWebアプリケーション開発を変えてしまうものだと思っているので、本書を元に流れを理解しておくと、今後のJSF旋風に飲み込まれた時に役立つと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、次世代Webアプリケーションフレームワークである<b>Java Server Faces</b>について解説しているものです。この記事を書いている現在では、まだJSFに関する書籍が4, 5冊くらいしかありません。その中でもっともJSFの流れがわかる本だと思っています。

本書が他のJSF解説書と比べていいと思ったのは、フレームワークのライフサイクルに関して詳しく説明してある本だったからです。ライフサイクルには6つのフェーズがあり、それぞれ

<ul><li>Viewの復元</li><li>リクエスト値の適用</li><li>入力値の検証</li><li>モデル値の更新</li><li>アプリケーションロジックの呼び出し</li><li>レスポンスレンダリング</li></ul>

に分かれています。

一つ一つのフェーズで、JSFフレームワークがどんなことをやっているのか、どんなことをするのかという根本の解説が一番よくわかるのが本書でした。詳しい解説でおなじみのオライリーからも『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22" class="extlink">JavaServer Faces完全ガイド</a>』という本が出版されていますが、本書の方が図を使っていてわかりやすく、日本人著者が書いているのではるかにわかりやすいです。

サンプルアプリケーションも載っていて、一通り本書を読みながらアプリケーションを作れば、JSFの流れは完全に理解できるかと思います。本書を読んだあと、オライリーの『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22" class="extlink">JavaServer Faces完全ガイド</a>』を読むとさらに理解が深まると思います。

<h2>覚書き</h2>

<h3>javax.faces.model.SelectItem を使ったときのプロパティの型</h3>

selectOneMenuなどのコンポーネントを使った場合に使用する「selectItem、selectItems」タグを使用するときに使える javax.faces.model.SelectItem というクラスには setValue というセッターメソッドがある。このメソッドの引数は Object 型になっていて、ここで<strong>セットした型と同じ型でBeanのプロパティを作らないと、Convert Invalid となってしまう</strong>ので注意。

<h3>アクションでエラーが起こった場合に画面遷移しないようにするには</h3>

アクションやリスナーメソッドでエラーが起こった場合に、画面遷移をしたくない場合がある。そんなときは、戻りの ViewID を null にしてやるといい。具体的には、アクションメソッドの戻り値を null にする。

<h2>参考</h2>

+ 安くてボリュームも少なく、JSFって何ぞや？という人向けの雑誌タイプの書籍です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008435/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798008435.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008435/sorehabooks-22/">徹底解説!JSF(JavaServer Faces)のすべて</a><br />イーベンチャーサポート<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798008435"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008435/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798008435"/></a><br /></td></tr></table>
</div>

+ 解説本というよりはリファレンス的な意味合いが強いです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008303/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798008303.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008303/sorehabooks-22/">JSF(JavaServer Faces)によるWebアプリケーション開発―Java徹底活用</a><br />川崎 克巳<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798008303"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />JSF1.1に対応した初めての本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008303/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798008303"/></a><br /></td></tr></table>
</div>

+ オライリーから詳説本でました。日本語訳はちょっとな感じですが、さすがに詳しいです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4873111978.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/">JavaServer Faces完全ガイド</a><br />ハンス バーグステン, Hans Bergsten, 岩谷 宏<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4873111978"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   />非技術者による翻訳？<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4873111978"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822221253.09.MZZZZZZZ.jpg" border="0" alt="はじめてのJSF―Web開発を変えるJavaフレームワークのすべて">
-----
KEYWORDS:
JSF,JavaServerFaces,はじめて,図解,わかりやすい
-----


-----
CF50_CF_4: 若尾 正樹 (著), 田添 英一 (著), 三浦 圭司 (著), 神山 淑朗 (著)
CF50_URL: http://ecx.images-amazon.com/images/I/51TWVT4PZSL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4822221253/sorehabooks-22
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 体験オブジェクト指向 はじめるUMLモデリング
BASENAME: _uml
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 09/13/2004 09:51:57 AM
TAGS: UML,オブジェクト指向
-----
BODY:
「モデリング」という言葉が最近グッと身近に感じられる世の中になってきたような気がします。システム開発をやっていない人にはいまいちピンと来ないかも知れないのですが、上流工程ではビジネス要件をモデリングしますし、下流工程ではアプリケーション設計をモデリングします。

本書は、最近主流の「UML(Unified Modeling Language)」という記法を使ったモデリング方法を解説しています。非常に初心者向けの易しい内容です。

<ul><li>要求モデリング</li><li>概念モデリング</li><li>仕様モデリング</li><li>実装モデリング</li></ul>

の大きく分けて4レベルのモデリングを行います。実際のシステム開発でも、要求モデリング、概念モデリング、実装モデリング辺りは行っているのが現状ですので、実務経験が無い人でも『体験』的に学べると思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の特徴として下記のような点があります。

<ol><li>4つの視点から見たモデリングを行うところが実際の現場に近い体験を与えてくれる</li><li>下手に深いところまで解説せず、対象読者がしぼれている(UML入門者向け)</li><li>モデリングに必要な用語が一通り出ている</li></ol>

内容としては、ある図書館管理システムをモデリングするという課題があり、それに対して要求モデリング、概念モデリング、仕様モデリング、実装モデリングをいう段階を経て実装までつなげていくという形になっています。

<h3>要求モデリング</h3>

要求モデリングのレベルでは、主に「ユースケース」と「アクティビティ図」の説明が出てきます。システムのワークフローをアクティビティ図で表したり、要求からユースケースを探し出したりという方法が載っています。シーケンス図とテストシナリオの抜き出し方も少し解説してあります。

<h3>概念モデリング</h3>

概念モデリングのレベルでは、システムにおける概念(ドメイン)を抜き出す方法や、ライフサイクルを考えてシーケンス図にしたりといった作業を行います。概念オブジェクトの静的構造(クラス図)もここで書き表します。

<h3>仕様モデリング</h3>

仕様モデリングのレベルでは、システムのアーキテクチャやパッケージ、サブシステムのインターフェース等を考えます。

<h3>実装モデリング</h3>

実装モデリングのレベルでは、UMLで表現したシステムを実際のソースコード(JAVA)に変換する方法を解説します。UMLで表現した関連が実際にはどのようにソースコードに落ちていくのかというところを解説します。

全体的に読みやすい構造になっていて、これからUMLを学びたい人や、モデリングの基礎知識を得たい人におすすめできます。あまり深くまで突っ込んだ解説はしていないので、本書を最初のステップとして次のレベルに進んでいくといいと思います。

<h2>覚書き</h2>

<h3>クラス図に多重度は必須</h3>

概念モデリングのクラス図を描く上で、オブジェクト同士に関連を引きます。このとき、<strong>オブジェクト同士の多重度と関連は必ず描く</strong>ようにした方がいいです。概念図といえども、多重度と関連が無ければ何を表しているのかがはっきりと分からなくなってしまいます。概念図を見て、何を表しているのかが分からなければ使えないですし、ただのお絵かきになってしまいます。趣味で書く場合はいいと思いますが、業務で概念図を書く場合は、必ず多重度と関連は書き込むべきだと思います。

<h2>参考</h2>

+ UMLの記法について解説した本書の類似本です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4816334114/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4816334114.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4816334114/sorehabooks-22/">はじめて学ぶUML―オブジェクト指向の基礎からUMLの利用法まで、しっかりよくわかる!</a><br />竹政 昭利<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4816334114"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />入門書としては良いかと<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ＵＭＬ入門者、およびＵＭＬ技術者認定制度受験者に最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />入門書の決定版<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4816334114/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4816334114"/></a><br /></td></tr></table>
</div>

+ 本書よりもチュートリアル的な要素が強い本です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105600/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798105600.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105600/sorehabooks-22/">かんたんUML［増補改訂版］</a><br />オージス総研<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798105600"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />認定試験のテキストとしての価値はある<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />入門書としてはあまりよくないかも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLの入門には良い本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105600/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798105600"/></a><br /></td></tr></table>
</div>

+ 本書を読んだ後、さらにUMLについての知識を深めたい人向け

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4881358642.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/">UMLモデリングのエッセンス―標準オブジェクトモデリング言語入門</a><br />マーチン ファウラー, ケンドール スコット, Martin Fowler, Kendall Scott, 羽生田 栄一<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4881358642"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />無駄がない導入書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLエッセンスを凝縮<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />簡にして要を得た優れた解説書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4881358642"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774117218.09.MZZZZZZZ.jpg" border="0" alt="体験オブジェクト指向 はじめるUMLモデリング">
-----
KEYWORDS:
UML,モデリング,体験,オブジェクト指向,要求,概念,仕様,実践
-----


-----
CF50_CF_4: 山田 正樹 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51E6PN217BL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774117218/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 文字コード超研究
BASENAME: post_6
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 09/27/2004 11:27:33 AM
TAGS: わかりやすい,定番,文字コード,良書
-----
BODY:
本書は、コンピュータで扱う「文字」に関して非常に分かりやすく説明してくれています。扱っている文字コードの数も、15種類以上あります。コンピュータで文字がどのように扱われているかという原理を知りたい方は、一度読まれることをおすすめします。

本書の特徴の一つとして、文字コードに対する実験があります。例えば、Macintoshで使われるデフォルトの改行コードをWindowsのデフォルト改行コードに変換するPerlのプログラムなど、Perlのソースコードがあちらこちらに出てきます。文字コードの研究をテーマに「Perlを学ぶ」本だと思ってもいいと思います。『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774108170/sorehabooks-22" target="_blank" class="extlink">すぐわかるPerl</a>』片手にPerlのお勉強に使えます。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の特徴はなんと言っても、文字コードを扱っているところです。原理から入って、その原理をすぐに自分の目で確かめるために実験を行う原理主義+実験主義。さらに、古い規格や使われない理論などは極力説明を省いて、つまづきやすいところを重点的に解説する実際主義。本書の解説のアプローチは、Perl主義を含めて4つ主義をコンセプトにしています。

前半は、原理編ということで、「バイナリとテキストの違い」や「10進と2進と16進」、「規格と機関」などの項目を解説します。

後半は、主に使われる文字コードを個別に解説しています。ASCIIから始まり、JIS、ISO2022、ISO8859-1、EUC-JP、Shift_JIS、Unicodeなど、大体15種類以上の文字コードの説明があります。さらに、インターネット編ということで、Base64エンコードや、実体参照にも触れています。

全614ページの分厚い本ですが、中身は非常に分かりやすい語り口調で、すらすら読めると思います。本書のすべての実験コードはPerlでかかれています。ですので、Perlの勉強をしたいという人にもおすすめできます。使えそうなユーティリティスクリプトもあり、文字コードをテーマにしたPerl本といえるかも知れません。

読み物として読むもよし、Perl本として読むもよし。読みやすい本ですので、一度目を通しておくと後々辞書としての使い方も出来るかもしれません。面白い内容が豊富にそろっていますので、一度ごらんあれ！

<h2>参考</h2>

+ 本書をPerl勉強本だと思って買った場合はこれを手元においておきましょう。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774108170/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774108170.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774108170/sorehabooks-22/">すぐわかるPerl</a><br />深沢 千尋<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4774108170"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />はじめてPerlを学ぶならおすすめ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />網羅ではなく、肝で解説（実習あり）<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「初めてのPerl」を読む前に読む<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774108170/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4774108170"/></a><br /></td></tr></table>
</div>

+ Amazonで『文字コード超研究』とあわせて買いたいとのことでした

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032242/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4534032242.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032242/sorehabooks-22/">図解でわかる文字コードのすべて―異体字・難漢字からハングル・梵字まで</a><br />清水 哲郎<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4534032242"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />Unicodeを扱う技術者に最適な入門書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032242/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4534032242"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4899770510.09.MZZZZZZZ.jpg" border="0" alt="文字コード超研究">
-----
KEYWORDS:
文字コード,Perl,研究,原理主義,実験主義
-----


-----
CF50_CF_4: 深沢 千尋 (著)
CF50_URL: http://ecx.images-amazon.com/images/I/41FK9AZ0EDL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4899770510/sorehabooks-22
CF50_CF: ラトルズ
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: バグがないプログラムのつくり方 JavaとEclipseで学ぶTDDテスト駆動開発
BASENAME: バグがないプログラムのつくり方_javaとeclipseで学ぶtddテスト駆動開発
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 09/30/2004 11:59:20 PM
TAGS: TDD,わかりやすい,定番,良書
-----
BODY:
テスト駆動開発(TDD)は、アジャイル開発に非常に良く適した開発技法である。プログラムを書く前にテストケースを書くという、今までの開発のやり方とはまったく逆の「目的から解法を求める」やり方です。このやり方だと何がいいのかというと、目的が見えているから(テストケースを満足させること)、解法が非常にシンプルになることです。つまり無駄がなくなる。トヨタのカンバン方式をご存知ならば、ほとんど一緒の考え方がこの<strong>テスト駆動開発</strong>になるのです。

本書は、今までの開発方法とは一風変わったテスト駆動開発を、日本人による解説と豊富なサンプルプログラムで分かりやすく理解できます。なぜテスト駆動がいいのかということを、余すことなくかかれています。

開発者だけでなく管理者の方も、本書を読むことで品質の良いプログラムを作るためのきっかけが得られるのではないかと思います。とても良い本だと思うので、少しでもテスト駆動開発に興味のある方は読んでみてください。
-----
EXTENDED BODY:
<h2>解説</h2>

本書のタイトルに『バグがないプログラムの作り方』とあるので、プログラミング技法の本かと思いますが実は違います。

本書は、テスト駆動開発という開発手法の本となります。今までの開発は、「十分な設計 ⇒ 実装 ⇒ テスト」の順で行われているのが主だったと思います。が、テスト駆動開発だと、開発の流れが「必要最低限の設計 ⇒ テスト ⇒ 実装」の順になります。

実装の前にテストを行うのが、テスト駆動開発の特徴です。実装前にテストを行うことに意味があるのかというと、ここに非常に意味があります。品質のよいプログラムを書くためにはテストを最初に行う必要があります。

テスト駆動で開発すると良い事が、本書の中で非常に丁寧に分かりやすく、納得しやすく書いてあるので興味がわいてきたら読んでみてください。すらすら読めてしまうので、3時間もあればほとんど読めてしまうと思います。非常に良いことがかいてあります。

<h2>覚書き</h2>

<h3>リズムが大切</h3>

テスト駆動開発で重要な要素の一つして「リズム」があります。一般的にテスト駆動で開発するときには<a href="http://d.hatena.ne.jp/keyword/xUnit?kid=23897" class="extlink" target="_blank">xUnit</a>というテスティングフレームワークを使います。本書では<a href="http://www.alles.or.jp/~torutk/oojava/maneuver/2000/6-3.html" class="extlink" target="_blank">JUnit</a>を使っています。

このJUnitは、テストに成功すると「グリーン｣、失敗すると「レッド」のバーが出力されます。

<strong>テスト駆動開発では、「レッド、グリーン、リファクタリング」というリズムを絶えず繰り返すことが、テスト駆動開発の極意</strong>となっています。最初にテストに失敗することからスタートします。ずっとグリーンだと、ほんとにプログラムがあっているのか不安になってきます。ですので、最初に「レッド」からスタートします。

グリーンにした後にリファクタリングを行うのがポイントで、最初のグリーンにする作業では、一番簡単なやり方(Fake It!)でテストをパスすることだけを考えます。次のリファクタリングフェーズで、重複をなくすようなコードに変更していきます。

テスト駆動で開発するときに、最初のレッドにする作業とグリーンにする作業が非常にかったるくなってくることがあります。でも、ここが我慢のしどころで、「レッド、グリーン、リファクタリング」のリズムを守ることを重視してください。折れそうになったら、「ペアプログラミング」をして、パートナーに何とか抑制してもらいましょう。

<h3>テストコードを書くときのポイント</h3>

<ul><li>テストコードにはコードの意図を伝えるコメントを入れる</li><li>テスト同士が関連するのは避ける</li><li>テストの名前には何のテストをしているかと分かる名前を付ける</li></ul>

テストコードには、引数の意味や数字の意味などを書いておくべきです。テストコードにはリテラルがそのまま使われることが多々ありますので、後々見たときに数字の意味が分かるようにしておくようにします。

プログラムに修正が入る場合、テストコードから最初に修正します。また、テストコードより先にテストコードに書いたコメントを最初に修正します。

<h3>テスト駆動とDependency Injection</h3>

<a href="http://www.kakutani.com/trans/fowler/injection.html" class="extlink" target="_blank">Dependency Injection(依存性注入)</a>というものがあります。これは簡単に言うと、クラスの関連を実装と切り離しておいて、第三者によって実装を設定させるというものです。(あんまり上手く説明できてないな・・・)
　
テスト駆動開発を行う上で、あるメソッドをテストするときにクラスの関連が多すぎてテストしにくい場合が出てきます。その場合、設計を見直して関連を減らすことが出来ればいいのですが、出来ない場合も出てきます。

そんな時、MockオブジェクトのほかにもDIを使うことでテストしやすくできます。

<h4>参考</h4>

<ul>
<li><a href="http://blog.drecom.jp/object-garden/archive/28" class="extlink" target="_blank">Object Garden</a></li>
<li><a href="http://www.ingrid.org/jajakarta/cactus/doc/mockobjects.html" class="extlink" target="_blank">モック・オブジェクト 対 コンテナ内テスト</a></li>
</ul>

<h3>「テスト可能」なアプリケーションにするための7つの原則</h3>

<dl>
<dt>1. GUIビューの外側に</dt>
<dd>GUIのビューからコードを切り離すことが出来れば、単純なメソッド呼び出しとしてコードをテスト出来るようになる。</dd>
<dt>2. 型によるエラー検査</dt>
<dd>型の検査はシステムが自動的に行ってくれます。高い抽象度で型を切り出すことは、ほとんどの場合よいことです。</dd>
<dt>3. 「断層線」を避けるために仲介機能(mediator)を利用する</dt>
<dd>独立したコンポーネント同士のインターフェースに仲介役を用意すると、公開メソッドの呼び出しのみを使ってコンポーネントをテストすることが簡単になります。</dd>
<dt>4. メソッド、小さなシグニチャーおよびデフォルトの引数</dt>
<dd>小さな引数や、シグネチャを持つメソッドが複数(オーバーライド)あるほうが、テスト時に簡単に呼び出せます。</dd>
<dt>5. アクセサーは、メモリー状態を修正してはいけない</dt>
<dd>テストでオブジェクトの状態を検査するときには、オブジェクトの状態を変更しない用にするべきです。さもなければ、内部状態を検査しにくくなってしまいます。</dd>
<dt>6. インターフェースを使ってプログラム外のコンポーネントを明示する</dt>
<dd>プログラム外のコンポーネント接続にはインターフェースを使うことで、すべてのコードがそろわなくてもテストすることが出来るようになります。</dd>
<dt>7. 最初にテストから考える</dt>
<dd>最初にテストから実装することで、実装段階で間違いを発見することが出来るようになります。</dd>
</dl>

<h4>参考</h4>

<a href="http://www-6.ibm.com/jp/developerworks/java/020125/j_j-diag0911.html" target="_blank" class="extlink">「テスト可能な」アプリケーションの設計 IBM</a>

<h2>参考</h2>

+ テスト駆動開発といったらケントベックは外せません。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894717115.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/">テスト駆動開発入門</a><br />ケント ベック, Kent Beck, 長瀬 嘉秀, テクノロジックアート<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4894717115"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />XPに親しみを感じているなら<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />想定読者レベルはバリバリの実装者・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />TDDプログラマの思考過程が読める<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894717115"/></a><br /></td></tr></table>
</div>

+ JUnitに関することならこれがおすすめ

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797325143.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/">JUnitイン・アクション</a><br />ビンセント マソル, テッド ハスティード, Vincent Massol, Ted Husted, クイープ<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797325143"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797325143"/></a><br /></td></tr></table>
</div>

+ テストファースト開発に関して分かりやすく解説しています。JUnitの使い方に関しても解説されています。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325720/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797325720.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325720/sorehabooks-22/">JUnitによるテストファースト開発入門</a><br />サイバービーンズ ， 今野 睦<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797325720"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェアテスト本の新スタンダードかも<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325720/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797325720"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/479810714X.09.MZZZZZZZ.jpg" border="0" alt="バグがないプログラムのつくり方 JavaとEclipseで学ぶTDDテスト駆動開発">
-----
KEYWORDS:
テスト駆動開発,TDD,Test-Driven-Developement,バグ,Java,Eclipse
-----


-----
CF50_CF_4: 川端 光義 (著), 倉貫 義人 (著), 兒玉 督司 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51XPEMTPVTL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/479810714X/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: JSFフレームワーク覚書き
BASENAME: jsfフレームワーク覚書き
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 10/06/2004 02:19:02 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221253/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4822221253.09.MZZZZZZZ.jpg" border="0" /></a>
</p>

JSFは今後期待されるWebアプリケーションフレームワークの一つです。標準規格ということで、普及してくるのではないかと思います。

JSFはユーザインターフェース周りの処理を簡単に実装できるということを目標に開発されたフレームワークで、WebでGUIアプリケーションを作っているような感覚でコーディングが出来ます。

アクションやイベントといった概念を扱っていて、非常に直感的に流れが分かるようなフレームワークになっています。ということで、今回はJSFフレームワークの流れについての覚書きです。

<section>

<h4>参考</h4>

<ul>
<li>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221253/sorehabooks-22" target="_blank" class="extlink">はじめてのJSF</a>』 日経BP社</li>
<li><a href="http://www.atmarkit.co.jp/fjava/special/jsf01/jsf01.html" target="_blank" class="extlink">@IT：特別企画  JavaServer Facesを理解する(前編)</a></li>
</ul>

</section>
-----
EXTENDED BODY:
<h2>覚書き</h2>

JSFのライフサイクルの覚書きです。JSFには6つのフェーズがあり、それぞれ役割分担がきっちりされています。

<section>

<h4>参考</h4>

<a href="http://www.atmarkit.co.jp/fjava/special/jsf01/jsf01.html#ap03" target="_balnk" class="extlink">JSFライフサイクルの図 (@IT)</a>

</section>

JSFはJavaのWebアプリケーションフレームワークですので、サーブレットとして動作します。javax.faces.webapp.FacesServlet というのがそうです。クライアントのリクエストをサーブレットが受け取ってレスポンスを返すという処理は、通常のWebアプリケーションと一緒です。(当たり前ですが・・・)

JSFはリクエストを受け取って、レスポンスを返すまでのサイクルが6つに分かれています。

<ol><li><a href="#Viewの復元">Viewの復元(Reconstitute Request Tree)</a></li><li><a href="#リクエスト値の適用">リクエスト値の適用(Apply Request Values)</a></li><li><a href="#入力値の検証">入力値の検証(Process Validations)</a></li><li><a href="#モデルの更新">モデルの更新(Update Model Values)</a></li><li><a href="#アプリケーションロジックの呼び出し">アプリケーションロジックの呼び出し(Invoke Application)</a></li><li><a href="#レスポンスのレンダリング">レスポンスのレンダリング(Render Response)</a></li></ol>

<h3 id="Viewの復元">Viewの復元(Reconstitute Request Tree)</h3>

レスポンス時に保存してあったコンポーネントツリーを復元するフェーズです。

初めてのリクエストや、JSF以外のページからのリクエストの場合は、コンポーネントツリーが存在しないので、新しくコンポーネントツリーを生成し、[<a href="#レスポンスのレンダリング">レスポンスのレンダリング</a>]フェーズに移行する。

このように途中のフェーズを省略して[<a href="#レスポンスのレンダリング">レスポンスのレンダリング</a>]フェーズに移行するためには、FacesContext#renderResponse メソッドを呼び出す。

<pre>
JSFフレームワークは、UIコンポーネントという単位で画面を作っています。UIコンポーネントとは情報を持った塊のことで、下記のようなコンポーネントがある。

<ul><li>フォーム(<a href="http://java.sun.com/j2ee/javaserverfaces/1.1/docs/api/javax/faces/component/UIForm.html" target="_blank">UIForm</a>)</li><li>入力フィールド(<a href="http://java.sun.com/j2ee/javaserverfaces/1.1/docs/api/javax/faces/component/UIInput.html" target="_blank">UIInput</a>)</li><li>ボタン(<a href="http://java.sun.com/j2ee/javaserverfaces/1.1/docs/api/javax/faces/component/UICommand.html" target="_blank">UICommand</a>)</li></ul></pre>

開発者はUIコンポーネントに対して処理を行っていく。サーバー側ではUIコンポーネントは親子関係を持ったツリーの形で保持される。

<h3 id="リクエスト値の適用">リクエスト値の適用(Apply Request Values)</h3>

クライアントが入力した値を、対応するUIコンポーネントに保存する。

入力フィールド(UIInput)であれば値をコンポーネントに保存し、ボタン(UICommand)であればイベントをキューに追加する。<b>この段階ではモデルには値は反映されない。</b>

編集可能なUIコンポーネント(<a href="http://java.sun.com/j2ee/javaserverfaces/1.1/docs/api/javax/faces/component/EditableValueHolder.html" target="_balnk" class="extlink">EditableValueHolderインターフェース</a>を実装したコンポーネント、例えばUIInputクラス)はこのフェーズで2種類の処理に分岐される。

<section>

<h4>immediate属性が true の場合</h4>

バリデータを呼び出して入力検証を行う。成功した場合UIコンポーネントに値を保存して、ValueChangeEventをキューにつめる。通常この処理は[<a href="#入力値の検証">入力値の検証</a>]フェーズで行われる。その後、ValueChangeEventのリスナーや、対応するアクションが呼ばれる。

</section>

<section>

<h4>immediate属性が false の場合(属性がない場合)</h4>

UIコンポーネントに値を保存して、次のフェーズ[<a href="#入力値の検証">入力値の検証</a>]に移行する。

</section>

<pre>
イベントキューにイベントが追加された場合、次のProcess Eventsが処理される。(<a href="http://www.atmarkit.co.jp/fjava/special/jsf01/jsf01.html#ap03" target="_balnk" class="extlink">ライフサイクル図</a>を参照) immediate属性が true の場合はこのフェーズでイベントがキューに追加されるため、イベントが処理されて[<a href="#レスポンスのレンダリング">レスポンスのレンダリング</a>]フェーズに移行する(Render Response)。
</pre>

つまり、この後のフェーズが実行されない。これは、例えば「キャンセル」ボタンや「戻る」ボタンを実装したい場合に使う。[<a href="#入力値の検証">入力値の検証</a>]が行われては困る場合には immediate属性をコントロールするべし。</div>

<h3 id="入力値の検証">入力値の検証(Process Validations)</h3>

[<a href="#リクエスト値の適用">リクエスト値の適用</a>]フェーズでUIコンポーネントに適用された値を、バリデータによって検証する。ここでは、画面に表示されるUIコンポーネントのみがチェックされる(rendered属性がtrueのもの)。

<pre>
1. UIコンポーネントに保持されている値を型変換する。型変換エラーが出た場合には <a href="http://java.sun.com/j2ee/javaserverfaces/1.1/docs/api/javax/faces/convert/ConverterException.html" target="_blank" class="extlink">ConverterException</a>例外をスローする。
2. 型変換された値に対してバリデータを使って検証する。検証エラーが出た場合には <a href="http://java.sun.com/j2ee/javaserverfaces/1.1/docs/api/javax/faces/validator/ValidatorException.html" target="_blank" class="extlink">ValidatorException</a>例外をスローする。
3. 例外が発生した場合には、FacesContextにエラーメッセージを追加して、Render Response処理に移行する。
</pre>

このフェーズでバリデーションエラーが出た場合には、モデルの値は更新されずに下の画面に戻る。

通常であれば、[<a href="#Viewの復元">Viewの復元</a>]フェーズでリクエスト元のコンポーネントルート(UIViewRoot)が設定されて、[<a href="#アプリケーションロジックの呼び出し">アプリケーションロジックの呼び出し</a>]フェーズで次の画面のコンポーネントルート(UIViewRoot)が設定されて次の画面に遷移する。

しかし、途中でエラーがでて、次の画面のコンポーネントルート(UIViewRoot)が設定されない場合には、元の画面のコンポーネントルート(UIViewRoot)が残っているために、元の画面に戻ってしまうのである。


<h3 id="モデルの更新">モデルの更新(Update Model Values)</h3>

UIコンポーネントに設定された値を、対応するモデル(JavaBean)にセットする。UIコンポーネントの型からモデルの型に変換できずにエラー(<a href="http://java.sun.com/j2ee/javaserverfaces/1.1/docs/api/javax/faces/convert/ConverterException.html" target="_blank" class="extlink">ConvertException</a>)が発生した場合には、Response Renderが呼ばれてレスポンス処理に入る。

<h3 id="アプリケーションロジックの呼び出し">アプリケーションロジックの呼び出し(Invoke Application)</h3>

ボタンを押したなどのアクションに対してロジックを呼び出します。このロジックの結果によって次の画面遷移先を決定します。

イベントが発生するとイベントのリスナーが呼ばれます。リスナーはaddActionListenerメソッドで追加する方法(アクションリスナー)とsetActionメソッドでセットする方法(アクションハンドラ)がある。フレームワークはアクションリスナーを先に呼び出します。

<pre>
リスナーの設定は基本的にはJSP内でタグを使って設定する。
・アクションリスナーを設定するには、UIInputやUICommandコンポーネントに 〜Listener という属性があるので、そこにメソッド・バインディングという方法を用いて指定する。
 
・アクションハンドラを設定するにはUICommandコンポーネントの action という属性にメソッド・バインディングを使って指定する。
</pre>

<h3 id="レスポンスのレンダリング">レスポンスのレンダリング(Render Response)</h3>

次の画面を構築します。FacesContextに設定されているUIViewRootを使って、次の画面を決定します。

<h2>参考</h2>

 <a href="http://dream.mods.jp/first_jsf/part5.html" target="_blank" class="extlink">JSFのタグ一覧</a>
 
 <a href="http://www.atmarkit.co.jp/fjava/special/jsf01/jsf01.html" target="_blank" class="extlink">@IT：特別企画  JavaServer Facesを理解する(前編)</a>

+ オライリーから発売中のJSFに関する書籍です。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4873111978.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/">JavaServer Faces完全ガイド</a><br />ハンス バーグステン, Hans Bergsten, 岩谷 宏<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4873111978"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   />非技術者による翻訳？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />だめ翻訳<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4873111978"/></a><br /></td></tr></table>
</div>

+ リファレンス的な使い方も出来る結構情報量の多い本です。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008303/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798008303.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008303/sorehabooks-22/">JSF(JavaServer Faces)によるWebアプリケーション開発―Java徹底活用</a><br />川崎 克巳<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798008303"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />JSF1.1に対応した初めての本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008303/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798008303"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="はじめてのJSF">
-----
KEYWORDS:
JSF,はじめて,フレームワーク,覚書き,解説,Java,Server,Faces
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: ストリームラインオブジェクトモデリング―パターンとビジネスルールによるUML
BASENAME: uml_2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 10/11/2004 10:34:58 PM
TAGS: UML,わかりやすい,モデリング,定番,良書
-----
BODY:
モデリングの部分部分をパターン化して、モデリングに利用しようとしている印象を受けました。ビジネスのモデリングというのは細分化して分類してみると、12種類の「分子」に分けられるというのが著者の意見のようです。

12種類のパターンは以下のようなものがあります。

<ul><li>アクター-ロール</li><li>外部の場所-場所</li><li>品目-特定品目</li><li>組立品-部品</li><li>コンテナ-コンテンツ</li><li>グループ-メンバー</li><li>トランザクション-ロール</li><li>トランザクション-場所</li><li>トランザクション-特定品目</li><li>コンポジットトランザクション-明細</li><li>特定品目-明細</li><li>トランザクション-後続トランザクション</li></ul>

ビジネスモデルというものは、会社ごとに違っているのが普通だと思います。同じビジネスモデルでは、競争なんて出来ませからこれはきわめて普通なことだと思います。モデリングというのは、ビジネスを抽象化して捕らえるところに意味がある行為です。そして、抽象化したレベルではいくつかのパターンを見ることが出来る。これが本書の説明したかった事柄だと思います。
-----
EXTENDED BODY:
<h2>解説</h2>

ビジネスモデリングにはその分野(ドメイン)の専門化が必要です。そして、問題点(What)を明確にすることが必要です。本書で解説されている12種類のビジネスモデリングパターンは、ドメインの共通する関係をすばやくモデリングするためにドメイン固有のオブジェクトで満たされ得るテンプレートを提供します。

パターンと聞いて最初に思い浮かべるのは、<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/list.html" target="_blank" class="extlink">GoFのデザインパターン</a>だと思います。これは、設計のパターンを示したもので、本書で説明しているストリームラインオブジェクトモデリングパターンは、<strong>ビジネスモデルを細分化したときのパターン</strong>になっています。

本書で説明されているパターンは非常に粒度の細かいものになっています。詳しいモデルパターンやモデル間の関係図は本書を見てください。 (^^;)

「ストリームラインオブジェクトモデリング」とは、モデリング方法論の一つです。この方法論の目指すところは、実世界のドメインに存在する、人、場所、モノ、事象を細分化不可能なレベルにまで落としたオブジェクトでパターン化することです。そして、パターンから、どんなオブジェクトモデリングでも作成できるようにすることがテーマになっています。

本書の面白いところは、12種類のモデリングオブジェクトパターンと、5種類のビジネスルール、3種類のビジネスサービスを使って、ストリームラインオブジェクトモデリングというものを構成しているところです。

最近のシステム開発の現場では、モデリングというものの比重が大きくなってきています。モデラーの人曰く、「モデリングにもある種のパターンはあるはず。モデルの中にそういったパターンがあると、一目でどんな構造になっているかとらえることが出来る。」らしいです。

本書で説明されているパターンは、非常に粒度が細かく、応用が利くパターンが多いと思います。オブジェクトモデリングだけでなく、データ指向(DOA)のモデリングにも使えます。一通りのパターンは知識として残しておくといいと思います。

<h2>覚書き</h2>

<h3>オブジェクトの識別</h3>

ドメインのオブジェクトを見つけるには、ドメインの専門家に聞くのが一番正確です。しかし、下記の4つの分類を知っているとある程度見つけられるはずです。

<ul><li>人</li><li>場所</li><li>モノ</li><li>事象</li></ul>

<h4>人</h4>

人あるいは組織はほとんどの場合オブジェクトとなります。<strong>アクター</strong>と呼ばれます。<strong>人が行う<すべてのアクションは、コンテキスト内で生じる</strong>というオブジェクトモデリングのルールがあります。

コンテキスト内における「人」だけがアクションを行い、アクションがコンテキスト内のほかの人、場所、モノだけに関与します。

<h4>場所</h4>

人または場所によるすべての記録されるアクションは、ある場所で発生します。記録されるアクションが発生する場所をモデリングする場合は「場所」オブジェクトを使用します。

また、「場所」はしばしば階層構造になります。階層構造以外にも、場所を複数含むことの出来る「外部の場所」というオブジェクトも使用されます。

<h4>モノ</h4>
アクションを行うエンティティ(実体)はサブジェクト(主体)に関与します。アクションのサブジェクトになれるエンティティは「モノ」と考えられます。

「モノ」を集合として記述する場合(品目)と、特化したものとして記述する場合(特定品目)があります。これらを明確に区別することは、非常に大切な要素となってきます。

<h4>事象</h4>

「事象」は人や場所とモノとの相互作用になります。これは、例えば、あるアクションの履歴のような役割を持ちます。

<h2>参考</h2>

+ モデリングのパターンを理解するのに非常にいい本です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711362/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894711362.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711362/sorehabooks-22/">戦略とパターンによるビジネスオブジェクトモデリング</a><br />ピーター・コード, ディビッド・ノース, マーク・メイフィールド, 今野 睦, 依田 智夫, 依田 光江<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4894711362"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />なんでも説明することは、何も説明していない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />モデリングの過程が一歩一歩進んでいく様子がよく分かる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクトモデラーとしての必携の書<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711362/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894711362"/></a><br /></td></tr></table>
</div>

+ ドメインにおける分析をパターン化した有名な本です。かなり難しいです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894716933.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/">アナリシスパターン―再利用可能なオブジェクトモデル</a><br />マーチン ファウラー, Martin Fowler, 堀内 一, 友野 晶夫, 児玉 公信, 大脇 文雄<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4894716933"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />よい本ですね<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「オブジェクト」指向モデリングの導き手<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894716933"/></a><br /></td></tr></table>
</div>

+ プログラム設計のパターン集です。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894715775.09.MZZZZZZZ.jpg" border="0" alt="ストリームラインオブジェクトモデリング―パターンとビジネスルールによるUML">
-----
KEYWORDS:
ストリームライン,オブジェクト,モデリング,パターン,ビジネス,ルール,UML
-----


-----
CF50_CF_4: ジル ニコラ (著), マイク アベニー (著), マーク メイフィールド (著), Jill Nicola (原著), Mike Abney (原著), Mark Mayfield (原著), 今野 睦 (翻訳), デュオシステムズ (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51YJ30ZT85L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22
CF50_CF: ピアソンエデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Antを勉強する
BASENAME: ant
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 10/12/2004 04:00:39 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774120006/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774120006.09.MZZZZZZZ.jpg"  border="0" /></a>
</p>

Antはビルドツールです。OSや環境に依存しないビルドツールということで幅広く使われています。

個人的にAntを使う理由というのは、ビルド以外のいろんな設定が簡単に出来ることです。例えば、環境ごとに異なった設定ファイルを作りたいときに、ベースとなるファイルを一つ用意するだけで、Filterという機能を使って設定ファイルの内容を変化させることが出来ます。

他にも、JUnitを使ったときに、Reportを自動で生成する機能や、Webアプリケーション用のwarファイルを作りそのままデプロイしたりと、色々なことが連続的に出来るのが気に入っています。作業と作業の間に人の手を入れずに実行できるので、作業忘れが発生しないというのが特徴です。　
-----
EXTENDED BODY:
<h2>解説</h2>

Antのサンプルビルドファイルを元にAntを理解していきます。

Antのデフォルトのビルドファイルは 「build.xml」という名前で作る。

Antはビルドファイルを読み込んで動作します。コマンドラインから 「ant」 と打つことで、build.xmlというファイルを読み込んでデフォルトタスクを実行します。ビルドファイルや実行タスクを指定することも出来ます。

<pre class="code"><code><span class="tag">&lt;project <span class="attr">name=</span><span class="value">&quot;AntTask&quot;</span> <span class="attr">default=</span><span class="value">&quot;compile&quot;</span> <span class="attr">basedir=</span><span class="value">&quot;.&quot;</span>&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;src.dir&quot;</span> <span class="attr">value=</span><span class="value">&quot;./src&quot;</span> /&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;classes.dir&quot;</span> <span class="attr">location=</span><span class="value">&quot;./classes&quot;</span> /&gt;</span> 
  <span class="tag">&lt;property <span class="attr">file=</span><span class="value">&quot;project.properties&quot;</span> <span class="attr">prefix=</span><span class="value">&quot;project&quot;</span> /&gt;</span> 
  <span class="tag">&lt;property <span class="attr">environment=</span><span class="value">&quot;env&quot;</span> /&gt;</span> 
 
  <span class="tag">&lt;fileset <span class="attr">id=</span><span class="value">&quot;classpath&quot;</span> <span class="attr">dir=</span><span class="value">&quot;${project.lib}&quot;</span>&gt;</span>
    <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;*&quot;</span> /&gt;</span> 
    <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*.jar&quot;</span> /&gt;</span> 
    <span class="tag">&lt;exclude <span class="attr">name=</span><span class="value">&quot;*.txt&quot;</span> /&gt;</span> 
  <span class="tag">&lt;/fileset&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;echo&quot;</span>&gt;</span>
    <span class="tag">&lt;echo&gt;</span>${src.dir}<span class="tag">&lt;/echo&gt;</span> 
    <span class="tag">&lt;echo&gt;</span>${classes.dir}<span class="tag">&lt;/echo&gt;</span> 
    <span class="tag">&lt;echo&gt;</span>${project.ver}<span class="tag">&lt;/echo&gt;</span> 
    <span class="tag">&lt;echo&gt;</span>${env.Path}<span class="tag">&lt;/echo&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;init&quot;</span>&gt;</span> 
    <span class="tag">&lt;mkdir <span class="attr">dir=</span><span class="value">&quot;${classes.dir}&quot;</span> /&gt;</span>
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;compile&quot;</span>&gt;</span> 
    <span class="tag">&lt;ant <span class="attr">antfile=</span><span class="value">&quot;build.xml&quot;</span> <span class="attr">target=</span><span class="value">&quot;echo&quot;</span> /&gt;</span>
    <span class="tag">&lt;javac <span class="attr">srcdir=</span><span class="value">&quot;${src.dir}&quot;</span> <span class="attr">destdir=</span><span class="value">&quot;${classes.dir}}&quot;</span> <span class="attr">debug=</span><span class="value">&quot;on&quot;</span>&gt;</span> 
      <span class="tag">&lt;classpath&gt;</span> 
        <span class="tag">&lt;fileset <span class="attr">refid=</span><span class="value">&quot;classpath&quot;</span> /&gt;</span>           
      <span class="tag">&lt;/classpath&gt;</span> 
    <span class="tag">&lt;/javac&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;copy&quot;</span> <span class="attr">depends=</span><span class="value">&quot;compile&quot;</span>&gt;</span> 
    <span class="tag">&lt;copy <span class="attr">todir=</span><span class="value">&quot;${classes.dir}&quot;</span>&gt;</span>
      <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;${src.dir}&quot;</span>&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*.properties&quot;</span> /&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*.xml&quot;</span> /&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*.dtd&quot;</span> /&gt;</span> 
        <span class="tag">&lt;exclude <span class="attr">name=</span><span class="value">&quot;build.xml&quot;</span> /&gt;</span> 
      <span class="tag">&lt;/fileset&gt;</span> 
    <span class="tag">&lt;/copy&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;clean&quot;</span>&gt;</span> 
    <span class="tag">&lt;delete <span class="attr">dir=</span><span class="value">&quot;${classes.dir}&quot;</span> /&gt;</span> 
    <span class="tag">&lt;delete&gt;</span> 
      <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;${project.tmp}&quot;</span> <span class="attr">defaultexcludes=</span><span class="value">&quot;no&quot;</span>&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*&quot;</span> /&gt;</span> 
      <span class="tag">&lt;/fileset&gt;</span> 
    <span class="tag">&lt;/delete&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;tests&quot;</span>&gt;</span> 
    <span class="tag">&lt;junit <span class="attr">printsummary=</span><span class="value">&quot;yes&quot;</span> <span class="attr">haltonfailure=</span><span class="value">&quot;no&quot;</span>&gt;</span>
      <span class="tag">&lt;classpath&gt;</span> 
        <span class="tag">&lt;fileset <span class="attr">refid=</span><span class="value">&quot;${classes.dir}&quot;</span> /&gt;</span> 
        <span class="tag">&lt;pathelement <span class="attr">path=</span><span class="value">&quot;${java.class.path}&quot;</span> /&gt;</span> 
      <span class="tag">&lt;/classpath&gt;</span> 
      <span class="tag">&lt;formatter <span class="attr">type=</span><span class="value">&quot;xml&quot;</span>/&gt;</span> 
      <span class="tag">&lt;batchtest <span class="attr">fork=</span><span class="value">&quot;yes&quot;</span> <span class="attr">todir=</span><span class="value">&quot;${reports.dir}&quot;</span>&gt;</span> 
        <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;${src.dir}&quot;</span>&gt;</span> 
          <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*Test.java&quot;</span>/&gt;</span> 
        <span class="tag">&lt;/fileset&gt;</span> 
      <span class="tag">&lt;/batchtest&gt;</span> 
    <span class="tag">&lt;/junit&gt;</span> 
    <span class="tag">&lt;junitreport <span class="attr">todir=</span><span class="value">&quot;${reports.dir}&quot;</span>&gt;</span> 
      <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;${reports.dir}&quot;</span>&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;TEST-*.xml&quot;</span>/&gt;</span> 
      <span class="tag">&lt;/fileset&gt;</span> 
      <span class="tag">&lt;report <span class="attr">format=</span><span class="value">&quot;frames&quot;</span> <span class="attr">todir=</span><span class="value">&quot;${reports.dir}&quot;</span>/&gt;</span> 
    <span class="tag">&lt;/junitreport&gt;</span> 
  <span class="tag">&lt;/target&gt;</span>    
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;setup&quot;</span>&gt;</span> 
    <span class="tag">&lt;filter <span class="attr">token=</span><span class="value">&quot;VERSION&quot;</span> <span class="attr">value=</span><span class="value">&quot;2.0.1&quot;</span> /&gt;</span>
    <span class="tag">&lt;copy <span class="attr">file=</span><span class="value">&quot;config-base.properties&quot;</span> 
             <span class="attr">tofile=</span><span class="value">&quot;config.properties&quot;</span> 
             <span class="attr">filtering=</span><span class="value">&quot;yes&quot;</span> /&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
<span class="tag">&lt;/project&gt;</span>
</code></pre>
<div class="clear"></div>

<h3 id="1">1. 1行目: ビルドファイルは project タグで開始する</h3>

Antのビルドファイルは project タグではじめます。project の属性には、デフォルトのタスク名やベースとなるフォルダをしてすることが出来ます。今回の例では、プロジェクト名が AntTask、デフォルトタスク名が compile、ベースディレクトリがカレントディレクトリになります。

<h3 id="2">2. 2行目: property タスクは、設定情報を定義する</h3>

propertyタスクは、name属性に指定しな名前にマッピングされる値を定義します。定義された値は、ビルドファイル中から ${name} という方法で取り出せます。

1つめの例が、単純にnameに対してvalueを設定する方法です。

<pre>${src.dir} ⇒ ./src</pre>

2つめの例は、name属性に対して、PATH情報を設定しています。location属性で値を設定すると、値が絶対パスとして定義されます。

<pre>${classes.dir} ⇒ C:\java\ant\classes</pre>

3つめの例は、設定ファイルに定義されている値を読み込みます。file属性で指定されたファイルからname=valueという情報を読みとります。prefixが指定されていると、読み込んだname属性の頭にprefixで指定した値を付けて、valueを取り出せるようになります。

<pre>${project.version} ⇒ 1.6.1</pre>

4つめの例は、環境変数を読み込むときに使用するプレフィックスを指定します。

<pre>${env.PATH} ⇒ C:\java\lib\;C:\java\ant\lib</pre>

<h3 id="3">3. 7行目: fileset タスクは、ファイルの集合を定義する</h3>

filesetタスクは、ファイルの集合を定義します。javacやjava コマンドで使用するクラスパスや、ライブラリパスなどを設定するのに便利です。

id属性に指定した名前で、ビルドファイル中から呼び出されます。dir属性は、ファイルの存在場所を指定します。include・exclude属性を使って、集合に含めるファイルを選択します。パターンとして使える文字と意味は<a href="http://homepage1.nifty.com/kuprij/antdoc/common.html#pattern" target="_bank" class="extlink">Ant詳細</a>というページを参考にしてください。

<h3 id="4">4. 13行目: タスクの集合を定義するには、targetタスクを利用します</h3>

タスクをまとめて実行したい場合には、targetタスクを利用します。通常、意味のある単位でタスクをまとめます。例えば、JUnitでテストを行う、javacコマンドでコンパイルしてクラスファイルだけを別のフォルダに移動させる、jarコマンドでファイルを圧縮してデプロイするなどです。

<h3 id="5">5. 21行目: フォルダを作るには mkdir タスクを使う</h3>

フォルダの作成には、mkdirタスクを使います。この他、ファイルを削除したり(deleteタスク)、ファイルを移動したり(moveタスク)もできます。

<h3 id="6">6. 25行目: 他のビルドファイル中のタスクを呼び出すには antタスクを呼び出す</h3>

ビルドファイルを分割したい場合があります。例えば、非常に大きなファイルになってしまったり、環境に応じて読み込むビルドファイルを変えたりしたい場合です。

そんなときは、antタスクを使って、別のビルドファイルを読み込むことが出来ます。antfile属性に読み込むビルドファイルを指定します。target属性には、呼び出すタスクを指定します。

<h3 id="7">7. 34行目: ファイルをコピーするには copyタスクを利用する</h3>

ファイルをコピーしたい場合は良くあります。そのようなときは copy タスクを使います。moveタスクとの違いは、copyはコピー元のファイルが残ることです。

<h3 id="8">8. 54行目: JUnitとJUnitReportを使う</h3>

AntにはJUnitを実行して、その結果をレポートにまとめるタスクが存在します。細かいタスクの説明は参考文献を見てもらうとして、レポートに必要な条件は1つだけです。

<pre>JUnitのサマリーをXML形式で出力すること。(Formatter type="xml")</pre>

JUnitとJUnitReportタスクを使うと、それなりにしっかりとした形式でテスト結果が出力されるようになります。テスト結果をプロジェクトメンバーで共有したい場合などに利用できます。

<h3 id="9">9. 75行目: ファイル内の設定を置換する Filter タスク</h3>

環境によって設定ファイルを複数用意したい場合があると思います。そんな時、ベースとなる設定ファイルを一つ用意して、Filterタスクを利用して、環境に合わせた設定ファイルを作ることが出来ます。
参考：<a href="http://members.at.infoseek.co.jp/pokopensjant/j/docs/manual/CoreTasks/filter.html" target="_blank" class="extlink">Filter タスク </a>

Antは、非常にたくさんのことが出来るビルドツールです。CVSから最新のファイルを取得して、コンパイルしてデプロイするなんて動作も、Antの達人にしてみれば朝飯前なことでしょう。僕はまだまだ初心者ですが (^^;)

今回はAntを勉強する取っ掛かりとしてサンプルファイルを元に簡単な説明書きだけを載せておきました。(勉強会用の資料としてつくりましたので・・・)これを気に、Antに興味がわいたなら勉強会大成功ということにしておきます。

<h2>プロジェクト管理ツール「Maven」</h2>

Antはビルドツールです。ただのビルドツールではなく、タスクを利用して定型作業を自動化したり、JUnitなどと連携して自動テストを行ったりも出来ます。しかし、プロジェクトで開発を行っていくと、さまざまな問題点がでてきます。　

例えば、開発者ごとにビルドの構成が変わってくるということがあげられます。開発環境が違えば、それぞれ開発用のビルドファイルを用意しなければなりません。また、ビルドの手順も人それぞれによって変わってきてしまいます。これらの問題点というのは、プロジェクト管理の範疇に入ってくる問題といえます。

つまり、Antにはプロジェクト管理の機能が抜けているといえるでしょう。個人で開発を行う上では非常に便利なAntですが、複数人で開発を行うときは、気をつけなければならない点が増えてきてしまいます。

こういった問題点を解決してくれるのが「<a href="http://maven.apache.org/" target="_blank" class="extlink">Maven</a>」です。MavenはApacheプロジェクトで作られている、Java開発プロジェクトの管理および開発チーム間での情報共有のために用いられるツールです。

Mavenに関しての詳しい解説は参考ページを見てください。

<ul>
<li><a href="http://www.ingrid.org/jajakarta/turbine/jp/turbine/maven/" target="_blank" class="extlink">Maven (Jajakarta日本語記事)</a>
<li><a href="http://www.02.246.ne.jp/~torutk/maven/" target="_blank" class="extlink">Mavenを使った開発</a>
<li><a href="http://www.objectclub.jp/technicaldoc/tools/maven/maven_top/" target="_blank" class="extlink">Maven ではじめるプロジェクトドライブ ObjectClub</a>
</ul>

<h2>参考</h2>

+ WebのAnt解説ページです。(詳しい！)
<a href="http://homepage1.nifty.com/kuprij/antdoc/toc.html" target="_blank" class="uline">Ant 詳説</a>

+ Antの解説本です。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008540/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798008540.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008540/sorehabooks-22/">Jakartaプロジェクト カンタンAnt</a><br />柴田 ゆき枝<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798008540"></iframe><br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008540/sorehabooks-22/"><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798008540"/></a><br /></td></tr></table>
</div>&#8203;&#8203;
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774120006.09.MZZZZZZZ.jpg" border="0" alt="Javaプログラミングツールズ1 Apache Ant">
-----
KEYWORDS:
Ant,Apache,ビルド,ツール
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: SOAP/UDDI/WSDL Webサービス技術基礎と実践 徹底解説
BASENAME: soapuddiwsdl_web
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Web-Internet
CATEGORY: Web-Internet
DATE: 10/18/2004 09:59:23 AM
TAGS: Webサービス
-----
BODY:
「ビジネスサービスを動的に発見・接続できるようにする」という、Webサービスの目的。そこで使われる技術というのは、実際にはそれほど新しいものではありません。Webサービスは、既存の技術(例えばXMLやSOAP)の組み合わせによる新しい発想と壮大な思想から生まれたある技術仕様です。

本書は、「サービスの動的発見・接続」を可能にする『SOAP』、『WSDL』、『UDDI』という基本仕様についての解説書になっています。Webサービスは発展途上の技術であるため、さまざまな仕様が検討されています。トランザクションに関するものから、セキュリティに関するものまでいくつかあります、が本書では扱っていません。

『SOAP』、『WSDL』、『UDDI』の基本仕様とXMLの概要説明、Webサービスを .Net と Java で構築するというのが本書のテーマです。手っ取り早くWebサービスを構築したいという人には本書は向かないかもしれません。本書のターゲットは、Webサービスの基本技術をしっかりと学びたいという人向けです。
-----
EXTENDED BODY:
<h2>解説</h2>

本書では、Webサービスという言葉を以下のように定義しています。

「Webサービスとは、オープンな技術を使って記述、呼び出し、公開、発見が可能な、ネットワーク上に存在するソフトウェア部品のこと」

XMLやHTTPといった既存技術を使ってサービスの呼び出し、公開、発見を可能にしようというのがWebサービスの目指すところです。その中でも、オープンな技術(標準仕様)を使うというのがポイントで、ベンダー固有の技術やプロトコルを使用しないので同じ方法でサービスを利用することが出来ます。

<a href="http://ew.hitachi-system.co.jp/w/SOA.html" target="_blank" class="extlink">SOA(サービス指向アーキテクチャ)</a>という考え方があります。これまでのシステム構築を『アプリケーション』単位から『サービス』という単位で行い、サービスの組み合わせでもってシステムを考えようというものです。WebサービスはこのSOAの一端を担っている技術です。

Webサービスという言葉は、少し中に浮いた感じをうけます。自分の言葉でWebサービスを説明できるようになるには、基礎的な知識が必須だとおもいます。本書は、基礎技術の詳細にこだわって解説しています。技術が生まれた背景にも触れているので、理解が早いと思います。

少し技術的要素が強いので、プログラミング初心者には難しいところがあるかもしれません。が、Webサービスについてしっかりと学びたい人には本書はおすすめです。

<h4>本書の対象読者</h4>

<ul><li>Webサービスの基礎技術をしっかりと学びたい人</li>
<li>SOAP、WSDL、UDDIの技術背景を知りたい人</li>
<li>Webサービスを学びたいがどの本からはじめたらよいのか分からないひと</li>
</ul>

<h2>ひとりごと</h2>

Webサービスはまだまだ発展途上の技術であるため、この先どうなってくるのかは実際にはわかりません。インターネットを通してビジネスを行うというのは、まだまだセキュリティ的にもどうかという考えもありますし、ビジネスにはトランザクションが必須です。この辺りのインフラが整ってWebサービスの真価を発揮してくれると、ビジネスの幅は広がるのではないかと思っています。

CORBAや分散オブジェクト技術(RMIやDCOM)ももてはやされた割には、あまり使えない技術だったようです。しかし、技術が使えなかったというよりはむしろ、そのような考え方にビジネスのあり方がついてこなかったというのが正しいような気がします。Webサービスも分散技術であり、まだビジネス的に使われているのはごく一部というのが現状です。

技術者は、新しい技術に希望や夢を抱きます。「どんなことが出来るのだろうか？」と。しかし、経営者は新しいことをするのに、戸惑いや躊躇をいだくのではないでしょうか。まず、技術がありビジネスがついて来るといった今の世の中の流れでは、捨てられる技術が多いのもうなずけるような気がします。

Webサービスが、そうならないことを期待しています。(・・・本の紹介とまったく関係ないな (^^;

<h2>参考</h2>

+ もっとやさしくWebサービスを始めたい人には本書をどうぞ。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715902/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894715902.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715902/sorehabooks-22/">Webサービス入門―Javaを使って覚える簡単SOAP、WSDL、UDDIプログラミング</a><br />グラハム グラス, Graham Glass, 尾形 隆彦, 石井 真, 木村 和之<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4894715902"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Webサービスを学ぶ上での良書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />混沌としたWebサービスを整理して学べる本<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715902/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4894715902"/></a><br /></td></tr></table>
</div>

+ 図をベースに解説してくれる、非常に丁寧な解説書です。おすすめ

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798007064.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/">図解標準 最新Webサービス マスタリングハンドブック―XML、SOAP、WSDL、UDDIの基本から開発まで</a><br />本 俊也<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4798007064"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />読みづらい、サンプルが少ない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おすすめです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おすすめです。<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4798007064"/></a><br /></td></tr></table>
</div>

+ オライリーからもWebサービスの解説書が出ています。濃いです。

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111013/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4873111013.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111013/sorehabooks-22/">Java Webサービス</a><br />David A.Chappell, Tyler Jewell, テクノロジックアート, 長瀬 嘉秀<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4873111013"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Web技術とJavaについて知ることが出来る<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111013/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4873111013"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774116165.09.MZZZZZZZ.jpg" border="0" alt="SOAP/UDDI/WSDL Webサービス技術基礎と実践 徹底解説">
-----
KEYWORDS:
SOAP,WSDL,UDDI,Webサービス,技術,仕様,基礎,実践
-----


-----
CF50_CF_4: 日本ユニテックDigital Xpress編集部 (著)
CF50_URL: http://ecx.images-amazon.com/images/I/51H3TJCW59L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774116165/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: CODE コードから見たコンピュータのからくり
BASENAME: code
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 10/23/2004 11:09:38 PM
TAGS: コンピュータの仕組み,定番
-----
BODY:
「コンピュータの仕組みを知りたいとは思わないかい？」一般にコンピュータを使っている人ならこの質問には「NO」と答えるだろう。電子工学を勉強している学生の中には、少なからず「YES」と答える人もいるかもしれない。本書はモールス信号からコンピュータの仕組みを理解するところまで持っていってしまうところがすごい。つまりコンピュータのことを知らなくても（モールス信号さえ知っていれば）誰でもコンピュータの仕組みまで理解できてしまうのである。ただし、順を追って読み進めていけばの話ではあるが・・・。

コンピュータの動作原理は「0」と「1」との組み合わせがすべてである。コンピュータを知っている人なら誰でもこう答えるだろう。しかし、最近のコンピュータは音楽を聴いたり、ゲームをしたり、写真を取り込んだりできるのにほんとうに「0」と「1」とでしか出来ていないのかと思う人もいると思う。

500ページという本のなかに、著者のコンピュータを知ってもらいたいという熱い想いを感じ取って欲しいと思います。基本情報技術者試験の試験勉強でコンピュータの仕組みを勉強するよりも、はっきり言って本書で仕組みを理解したほうが深く身につきます。<strong>決して簡単には読み進められないかもしれません。</strong>しかし確実に感動を覚えることはできると思います。少し時間をとって頭の体操にどうぞ！
-----
EXTENDED BODY:
<h2>解説</h2>

コンピュータというものはどういうものかというのを、原子レベル(これ以上分解できない位)から解説しています。モールス信号とバイナリ(0か1のどちからしかとり得ないもの)のようにコンピュータにかかわりのない人でも理解しやすい例を使って、詳しく解説しています。

本書の目的は「<strong>コンピュータの仕組みを理解すること</strong>」です。そのためにとてもユニークな例を取り出して解説しています。途中、実際にコンピュータが自分で作れてしまう程低レベル(銅線と電球が出てきます)なところまででてきますので、電子工学の知識が多少あったほうが理解しやすいかもしれません。ただ、最初から順番に理解して読み進めていく限り、絶対に最後まで読めます。

コンピュータの本当の仕組みを理解したい人や、学校の課題でコンピュータ基盤を作成している学生、物事の仕組みを理解せずにはいられない理系人間は、本書を最初に読んだほうがいいと思います。<strong>読み物なので、肩を張らずに読み進められます。</strong>多少難しいかもしれませんが、頭の体操にもってこいだと思っています。

難しくてもコンピュータを理解したい人に本書をおすすめします。

<h2>覚書き</h2>

<h3>ASCIIコードの右下にDEL記号がある理由</h3>

昔はプログラムをパンチカードというものに穴を開けて作っていました。パンチカードは一度穴を開けると二度と元に戻せないため、間違えた場合にはパンチカードを無効にする必要がありました。簡単に無効なパンチカードかどうかを判定するために、「間違えた場合には、すべての穴を開ける」という方法でパンチカードを無効化していました。この理由から、パンチカードの最後にはDELという制御コードが設けられていました。

現在でもその風習が残っていて、ASCIIコードの最後にDELの制御記号があります。他の制御コード(例えばビープ音を鳴らす)は最初の方に固まっているのに、DELだけが他の制御コードと離れた場所にあるのは、こういう理由だそうです。

<h4>参考</h4>

<a href="http://www.psl.ne.jp/perl/pdojo00b.html" target="_blank" class="extlink">ASCIIコード一覧表</a>

<h2>参考</h2>

+ 図入りで仕組みを理解したい人向け

<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883373347/sorehabooks-22/">コンピュータ・プログラムのしくみ―イラストで理解する、プログラミングの基本的な考え方</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883373347/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4883373347.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ダニエル アップルマン　Daniel Appleman　小林 敦子<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4883373347&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />とっても分かりやすい！！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883373347/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table>
</div>
　
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4891003383.09.MZZZZZZZ.jpg" border="0" alt="CODE コードから見たコンピュータのからくり">
-----
KEYWORDS:
CODE,コード,コンピュータ,仕組み,0,1,バイナリ,からくり
-----


-----
CF50_CF_4: Charles Petzold (著), 永山 操 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/41MMSFF3E5L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4891003383/sorehabooks-22
CF50_CF: 日経BPソフトプレス
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: djUnitで Virtual Mock Objects ユニットテスト
BASENAME: djunit_virtual_mock_objects
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 10/24/2004 06:38:15 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101281/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4798101281.09.MZZZZZZZ.jpg"  border="0" /></a>
</p>

「JUnitでユニットテストをするときに、クラス間の関係が問題でテストできない。」なんて事ありませんか？ <abbr title="Test Driven Developement">TDD</abbr>(テスト駆動開発)で行っている場合は、クラスの関係をそのつど考えながら進めていくので、こういった問題はあまり起きません。しかし、TDDはまだまだ敷居が高いと思う開発者が多いように思います。

<a href="http://www.h6.dion.ne.jp/~junpei/tdd.html" target="_blank" class="extlink">テスト駆動開発考察</a>

djUnit を使うと、<a href="http://www.xprogramming.com/xpmag/virtualMockObjects.htm" target="_blank" class="uline">Virtual Mock Objects</a>という手法を用いて、クラス間の関連を裏技的に変えることが出来るようになります。つまり、クラスがどんなに複雑に絡み合っていても、それらをすべて無視してテストが出来るようになるのです。さらには、『<a href="http://www.jcoverage.com/" target="_blank" class="uline">JCoverage</a>』というツールを使ったカバレッジテストの結果をエディタ上で見ることが出来るようになります。

djUnitは JUnti の機能と Aspect の機能を併せ持ったユニットテストツールとなっています。

<section>

<h4>参考</h4>

<a href="http://works.dgic.co.jp/djwiki/Viewpage.do?pid=@646A556E6974" target="_blank" class="extlink">djUnit Wiki</a></p>

</section>
-----
EXTENDED BODY:
<h2>解説</h2>

<h3>JUnitの問題とは？</h3>

JUnitでユニットテストを行うときに問題となる「<strong>クラス間の関係</strong>」は、<a href="http://www.ingrid.org/jajakarta/cactus/doc/mockobjects.html" target="_blank" class="extlink">Mock Object(モックオブジェクト)</a>を使ってテストするというのが通例になっているようです。しかし、この Mock Object も、クラス設計によっては使えない場合が多いのです。

例えば、クラスの内部で他のクラスに依存している場合などは、外側(テストケース側)からMock Object を注入することが出来ません。そのため、最近話題の <abbr title="Dependency Injection">DI</abbr>(依存性注入)を使ってテストケースを組み立てることが不可能になります。

<h3>djUnitを使うとどうなるのか</h3>

djUnitは Eclipse のプラグインとして動作する、ユニットテストツールです。JUnitよりも簡単にユニットテストを行うことが出来るようになります。最新版では<a href="http://ant.apache.org/" target="_blank" class="extlink">Ant</a>のタスクとして使うことも出来るようになっています。

djUnitを使うと、Virtual Mock Objects という手法を用いて、クラス内部の処理をAspect技術を使って切り替えることが出来てしまいます。例えばテストしたいメソッドの内部で、リソースファイルに依存した処理があるとします。

<pre class="code"><code><span class="keyword">public</span> String getProperty(String key, String defaultValue) {
  ResourceBundle resource = 
        ResourceBundle.getBundle(<span class="literal">"config.properties"</span>);
  <span class="keyword">if</span> (resource == <span class="keyword">null</span>) {
    <span class="keyword">return</span> defaultValue;
  }
 
  String val = resource.getString(key);
  <span class="keyword">if</span> (val == <span class="keyword">null</span> || <span class="literal">""</span>.equals(val)) {
    <span class="keyword">return</span> defaultValue;
  } <span class="keyword">else</span> {
    <span class="keyword">return</span> val;
  }
}
</code></pre>

この例では、リソースバンドルを外部から取得しているため外部に依存してしまっています。つまり、ユニットテストがしにくいのです。本来なら、Mock Object を使って、ResourceBundle を擬似クラスで模倣してテストするのですが、それにはメソッドをリファクタリングする必要がでてきます。

Virtual Mock Objects を使うと、メソッドはそのままで、<b>ResourceBundle#getBundle の戻り値だけを Mock Object に変更することが出来ます</b>。また、<b>ResourceBundle#getString も戻り値も好きなものに変更することもできます</b>。

<section>

<h4>参考</h4>
<a href="http://works.dgic.co.jp/djwiki/Viewpage.do?pid=@5669727475616C204D6F636B204F626A65637473E38292E4BDBFE381A3E3819FE38386E382B9E38388" target="_blank" class="extlink">Virtual Mock Objects とは？ djWiki</a>

</section>

<h3>djUnitの使い方</h3>

djUnitの詳しい使い方は、『<a href="http://works.dgic.co.jp/djwiki/Viewpage.do?pid=@5669727475616C204D6F636B204F626A65637473E38292E4BDBFE381A3E3819FE38386E382B9E38388" target="_blank" class="extlink">Virtual Mock Objects を使ったテスト</a>』を参考にしてください。非常に詳しく書いてあります。一度つかったら、Virtual Mock Objects の使いやすさを実感できると思います。

djUnitのもう一つの利点としては、カバレッジテストレポートが出力できる点です。djUnit は <a href="http://www.eclipse.org/" target="_blank" class="extlink">Eclipse</a> の Plugin として提供されているので統合環境上でカバレッジテストの結果が見えるのはかなり便利です。どの処理がテストされていないかをエディター上に表示してくれる点は、テストケースの抜けを未然に防げるので重宝しそうです。

<section>

<h4>参考</h4>

<a href="http://works.dgic.co.jp/djwiki/Viewpage.do?pid=@E382ABE38390E383ACE38383E382B8E383ACE3839DE383BCE38388E38292E8A68BE3828B" target="_blank" class="extlink">カバレッジレポートを見る</a>

<h3>Virtual Mock Objects の気になるところ</h3>

Virtual Mock Objects は非常に簡単に、楽しくユニットテストが実行できる優れたツールだと思います。しかし、いくつか気になる点があります。(個人的にですが・・・)

<pre><ul><li> JUnit + Aspect の概念が分からないと、仕組みが理解しづらいかも</li><li>どんなにクラスの関連が複雑でもとりあえずテストできてしまう</li><li>リファクタリングでよい設計にしようとする気力が薄れる可能性がある</li><li>テストケースが失敗したのが、Aspect が問題なのか処理が問題なのか切り分けがつかない場合があるかもしれない</li><li>JCoverageの結果は参考程度に受け取るべし</li></ul></pre>

テストしづらいプログラムでも何とかなってしまうというのが Virtual Mock Objects の気になるところではありますが、<b>カバレッジツールを使うだけでも djUnit を使う価値はある</b>かと思います(他に良いカバレッジツールがあればdjUnitは不要なのか？？？・・・)。通常はJUnitの代わりとして使い、どうしてもJUnitではテストが難しい部分や、外部に依存してしまっている部分は Virtual Mock Objects を使うというのがいいのかもしれません。どちらにしても、かなり面白いテストツールだと思います。

<h2>参考</h2>

+ djUnitを作っているところです。Wiki に非常に詳しく使い方が載っています。
<a href="http://works.dgic.co.jp/djwiki/Viewpage.do?pid=@646A556E6974" target="_blank" class="extlink">djUnit Wiki</a>

+ 上記と同じサイト内の、Virtual Mock Objects に関するページへのリンクです。
<a href="http://works.dgic.co.jp/djwiki/Viewpage.do?pid=@5669727475616C204D6F636B204F626A65637473E38292E4BDBFE381A3E3819FE38386E382B9E38388" target="_blank" class="extlink">Virtual Mock Objects を使ったテスト(in djUnit Wiki)</a>

+ エクリプスに関する日本語の Wiki サイトです。djUnitの概要が分かりやすく載っています。
<a href="http://eclipsewiki.net/eclipse/?djUnit" target="_blank" class="extlink">エクリプス Wiki</a>

+ Virtual Mock Objects に関するドキュメントです。英文ですが興味深い内容です。
<a href="http://www.xprogramming.com/xpmag/virtualMockObjects.htm" target="_blank" class="extlink">Virtual Mock Objects using AspectJ with JUNIT</a>

+ エクリプス本家へのリンクです。djUnitは Eclipse のプラグインとして動作します。
<a href="http://www.eclipse.org/" target="_blank" class="extlink">Eclipse.org</a>

+ JUnitの使い方がたっぷり載っている書籍です。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/">JUnitイン・アクション</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797325143.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ビンセント マソル　テッド ハスティード　Vincent Massol　Ted Husted　クイープ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797325143&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798101281.09.MZZZZZZZ.jpg" border="0" alt="djUnitで Virtual Mock Object ユニットテスト">
-----
KEYWORDS:
djUnit,Virtual Mock Object,ユニットテスト,単体テスト,カバレッジテスト,レポート
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: DAOとO/Rマッピングとビジネスロジックと
BASENAME: daoor
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 10/28/2004 03:44:54 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4764902834/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4764902834.09.MZZZZZZZ.jpg"  border="0" /></a>
</p>

最近、<a href="#ドメインモデリング" title="システム要件から問題領域を抜き出すこと">ドメインモデリング</a>と業務アプリケーション開発がちぐはぐだなーと感じます。たぶん色々な開発者が感じていると思いますが、業務アプリケーションというのは、得てして「<b>データの出し入れが基本</b>」となるシステムになります。<a href="#ビジネスロジック" title="ワークフロー中で分岐が発生する処理のこと">ビジネスロジック</a>がふんだんに盛り込まれた業務システムというのはあまりありません。

「<strong>データの出し入れ</strong>」が基本ということは、データの格納庫が必要になってくるわけで、それがデータベースになります。最近ではオブジェクト指向データベースも使われ始めましたが、まだまだリレーショナルデータベースの方がよく使われています。

オブジェクト指向で開発していると、ほとんど必ず問題となるのが、<b>リレーショナルデータベースとオブジェクト指向のインピーダンスミスマッチ</b>です。データベースは「データ」を扱い、オブジェクト指向は「振る舞い」を扱います。つまり、「振る舞い」をいかにして「データ」に落とすかというのが、問題となるわけです。

最近では、「DAO(Data Access Object」パターンや「O/Rマッピング」というものを使い、オブジェクト指向とリレーショナルデータベースの差を埋める努力がされています。DAOとO/Rマッピングをまとめつつ、業務アプリケーション開発で思ったことを書いていこうと思います。かなり主観的な意見になります。

<dl>
<dt id="ドメインモデリング">ドメインモデリング</dt>
<dd>
<p>簡単に言うと、システム要件から問題領域(医療システムであれば医学、とか)の用語を抜きだすこと。さらには、抜き出した用語の必要性や重要性、独立性などを考慮してオブジェクト間の関連をモデル化すること。</p>
</dd>
<dt id="ビジネスロジック">ビジネスロジック</dt>
<dd>
<p>ワークフローやUMLのアクティビティー図で分岐処理を行うこと。</p>
</dd>
</dl>
-----
EXTENDED BODY:
<h3>ドメインクラスと永続化機構へのアクセスは分けるべし！</h3>

ドメインクラスと永続化機構(データベースやファイルシステム)へのアクセスは層を持って分けるべきです。理由の一つは、「<strong>単一責任の原則 (The Single Responsibility Principle: SRP)</strong>」に反してしまうからです。また、ドメインクラスに永続化処理の責務を負わせてしまうと、処理が複雑かつアクセス手段に依存した形になってしまうので、保守がしにくくなります。

保守がしにくいとは、テストがしにくいと言い換えてもいいと思います。永続化機構に依存したコードは、テスト環境が用意しにくく、環境に依存してしまうことが多いので、非常にテストがしづらくなります。単体レベルでテストが行えないクラスは、安心して使えません。

<img src="http://hamasyou.com/images/engineer_soul/dao_interface.gif" alt="データアクセスのイメージ" />

業務アプリケーションで永続化機構(特にデータベース)を使わないことはほぼありえないので、<b class="red">データアクセス部分は、一つ層を増やしたほうがベター</b>です。データアクセスパターンには主に「DAO (Data Access Object)パターン」と「O/Rマッピング」という方法がとられます。

前者は、永続化機構とクライアントの間にデータアクセスインターフェースを用意して、データアクセスにはすべてインターフェース経由で行うというものです。後者は、オブジェクト指向分析/設計(OOA/OOD)で導出したドメインクラスと、リレーショナルデータベースのテーブルとをマッピングすると言うものです。

<section>

<h4>結局</h4>

永続化機構(データベース)と、クライアントとは一つ層を設けるほうがよい。クライアントがデータベースに依存してしまうと、単体テストや再利用が出来なくなってしまう。

</section>

<h3>DAO (Data Access Object) + Value Object</h3>

「DAO(Data Access Object)パターン + Value Object」 というのは 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22" target="_blank" class="extlink">J2EEパターン―明暗を分ける設計の戦略</a>』 で紹介されている、データベースアクセスの一つの方法です。　

DAOパターンは永続化機構との間にデータアクセス層を増やすことで、クライアント(永続化機構を使うクラス群のこと)がデータアクセスの方法に依存させなくしたものです。データアクセス方法に依存しないと何が幸せかというと、「<em>テストしやすくなる</em>」の一言に尽きます。データベースが変わったときに変更が吸収できるというのもメリットの一つですが、実際にはデータベースが変わることはほとんどありません。

<section>

<h4>メリット</h4>

<pre><ul><li>永続化機構(データベース等)のアクセス手段を、ドメインクラスから隠蔽できる</li><li>画面ベースでデータモデリングを行った場合に、Value Object の単位がぴったりとハマる</li><li>永続化層が明確になる</li><li>層が追加されるので柔軟性が増す<li>SQL文のチューニングも可能</li><li>キャッシュ戦略が使える(パフォーマンスの向上)</li><li><a href="http://www.tech-arts.co.jp/oo/pattern.html#Proxy" target="_blank" class="extlink">Virtual Proxy</a>を使って、遅延ロードが可能(パフォーマンスの向上)</li></ul></pre>

</section>

<section>

<h4>デメリット</h4>

<pre><ul><li>クラスの責務の切り分けが難しい</li><li>うまく共通化しないと重複コードの嵐になりかねない</li><li>ツールを使ってコードを生成しないとめんどくさくてやってられない</li></ul></pre>

</section>

<h4>結局</h4>

DAOは、データアクセス層という永続化機構にアクセスするインターフェースを提供する。データのアクセスはすべてDAO経由で行うことで、データアクセスから独立させることができる。外部に依存する部分は層を設けて独立させるのがよい。

<h3>O/Rマッピング</h3>

「O/Rマッピング」は、オブジェクト指向で言われる「オブジェクト」とリレーショナルデータベースにおける「リレーション」をマッピングしたものです。いまだに多くのデータベースはリレーショナル型になっています。オブジェクト指向アプローチで開発を行う際に必ずと言ってよいほど、「オブジェクト」と「リレーション」のインピーダンスミスマッチが起こります。この問題を解決するために行われるのが「O/Rマッピング」です。

O/Rマッピングが必要となるのは、オブジェクト指向とリレーショナルデータベースの考え方が違っているというのが大きな理由です。オブジェクト指向は、オブジェクト同士の関連を大切にする考え方です。例えば、領収書と明細という関係を考えた場合

<img src="http://hamasyou.com/images/engineer_soul/meisai.gif" alt="ヘッダー明細の例" />

オブジェクト指向では、明細データの集合を取得するときに、親となる「領収書ヘッダー」に問い合わせをして、「明細」を取得します。つまり、クライアントは最初から「明細」に直接問い合わせをする事はありません。　逆にリレーショナルデータベースでは、明細データを取得する場合に、直接「明細」テーブルにアクセスします。データベースは「明細」テーブルのヘッダーIDを元にデータを取ってくるのです。

<pre>
つまり、明細データが欲しい場合には、「明細」テーブルに対してのみSQL文を発行すればよい。しかし、オブジェクト指向でやっているので「領収書」オブジェクトと「明細」オブジェクトを作らなければならない。そのために「領収書ヘッダー」テーブルと「明細」テーブルを結合しないといけない。という面倒なことになってくるのです。
</pre>　

このように、オブジェクト指向とリレーショナルデータベースとで考え方が違っていることから、<em>オブジェクト指向設計とデータベース設計との差を埋めるために「O/Rマッピング」が使われます。</em>

<section>

<h4>参考</h4>

<a href="http://www.arclamp.jp/blog/archives/000021.html" target="_blank" class="extlink">arclamp O/Rマッピングとは</a>

</section>

<section>

<h4>メリット</h4>

<pre><ul><li>永続化層の実装をクライアントから隠蔽できる</li><li>データベースのテーブルやカラムが変更になった場合に対応しやすい</li><li>オブジェクト指向アプローチで進められる</li><li>コードの自動生成でめんどくさくない</li></ul></pre>

</section>

<section>

<h4>デメリット</h4>

<pre><ul><li>SQL文のチューニングが難しい</li><li>データベース設計の質に左右される</li><li>永続化層が分かりにくくなりがち</li><li>細かい検索処理がしにくい</ul></pre>

</section>

<section>

<h4>結局</h4>

O/Rマッピングはオブジェクト指向分析/設計で導出されたドメインモデルと、リレーショナルデータベースとの差を埋めるために使われている。そもそもO/Rマッピングを使わなければいけなくなる原因として、オブジェクト指向の考え方とリレーショナルデータベースの考え方が違うのが原因である。

</section>

<h3>そもそもオブジェクト指向設計ってどうなんだ？</h3>

僕が思うに、DAOもO/Rマッピングも使う場面とアーキテクチャによっては<em>恩恵が受けられない</em>のです。DAOパターンは、永続化層を設けてデータアクセスを隠蔽するのが目的です。なぜ隠蔽するのかといわれれば、ドメインクラスの独立性を高めるため。でも、ちょっとまってください。ドメインクラスってなんで必要なんでしょう？

ドメインクラスは、問題領域を表したモデルです。問題領域というのは<em>システムで解決すべきこと</em>であるはずです。この、「システムで解決すべきこと」というのは、そもそもなんなのでしょう？業務アプリケーションであれば、いまだにほとんどが「<strong>データの出し入れ</strong>」を目的としています。(例えば組み込み系などは、ビジネスロジックで出来ているといえます)

つまり、ドメインクラスをオブジェクト指向で分析/設計する必要はないのです。「データの出し入れ」のみを目的とするシステムであれば、ドメインクラスはオブジェクト指向分析/設計ではなく『<a href="http://www.drinet.co.jp/index.html" target="_blank" class="extlink">データ指向アプローチ(DOA)</a>』で行ったほうがよいのです。<em>あくまで、「データの出し入れ」のみを行うシステム設計の場合ですが。</em>

補足をしておくと、オブジェクト指向分析/設計とオブジェクト指向プログラミングは違います。オブジェクト指向プログラミングはすばらしいものです。データを隠蔽して、インターフェースで処理を行う。このプログラミング手法は今後もなくならないと思います。クラスの考え方をオブジェクト指向ではなくデータ指向で設計して、プログラムの開発はオブジェクト指向プログラミングで行う。現在の業務アプリケーションにはしっくりくるのではないでしょうか。

オブジェクト指向設計が生きてくるアプリケーションというのは、業務アプリケーションではあまりないのかも知れません。「データの出し入れ」よりも「処理や振る舞い」に主眼を置いたアプリケーションというのは、今後<a href="http://e-words.jp/w/SOA.html" target="_blank" class="extlink"><abbr title="Service Oriented Architecture">SOA</abbr></a>などのサービス重視のアプリケーション開発が増えてくることで、多くなってくると思います。

<section>

<h4>参考</h4>

<a href="http://www.atmarkit.co.jp/fxml/tanpatsu/33soa/soa01.html" target="_blank" class="section">@IT: サービス指向アーキテクチャの未来を考察する（前編）</a>

</section>

<section>

<h4>結局</h4>

「データの出し入れ」を行うだけの業務アプリケーションには、オブジェクト指向分析/設計はあわない。『<a href="http://www.drinet.co.jp/index.html" target="_blank" class="extlink">データ指向アプローチ(DOA)</a>』でドメインモデルを設計したほうが、データベースとの相性は良くなる。オブジェクト指向アプローチは、「振る舞い」を重視するサービス指向アプリケーションに向いている。

</section>

<h3>結局、DAOやO/Rマッピングは使えるのか？</h3>

結局、ドメインをオブジェクト指向分析/設計をする必要がなくなれば、「O/Rマッピング」で苦労することがなくなります。「O/Rマッピング」を使わなくなるということではありません。クラスとテーブルが一対一に対応するから、データアクセス層を作って隠蔽すれば、インピーダンスミスマッチが起こらなくなるということです。

結局、「データの出し入れ」を行うだけのアプリケーションであれば、ドメインクラスをデータ指向アプローチで設計し、DAO でデータアクセス層を設けて、O/Rマッピングでテーブルとマッピングするというのがもっともすっきりくる開発スタイルではないかと思います。

<section>

<h4>結局</h4>

ドメインモデルと永続化機構との考えの違いを埋めるためにDAOもO/Rマッピングも考えられている。この差を埋めるのに必死になる前に、一貫したアプローチでシステム開発を行ったほうが効果的なんじゃないのかな。

</section>

<h2>参考</h2>

+ 業務アプリケーションのアーキテクチャパターンで、OOA と DOA の違いについてふれられています。
<a href="http://www.nri-aitd.com/tips/g-patern.html" target="_blank" class="extlink">野村総合研究所 「業務アプリケーションアーキテクチャパターン」</a>

+ アーキテクチャに関して、どういう点が良くて、どういうところが悪いのかと言う事が、非常にうまく書かれています。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321127420/sorehabooks-22/">Patterns of Enterprise Application Architecture (Addison-Wesley Signature Series)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321127420/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/0321127420.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Martin Fowler　David Rice　Matthew Foemmel　Edward Hieatt　Robert Mee　Randy Stafford<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0321127420&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均　</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />非常に面白い良書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />アーキテクトにとって、必携の一冊<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321127420/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ DAOとO/Rマッピングツールについてのお話を参考にさせてもらいました。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774121630/sorehabooks-22/" name="G-Tools">WEB+DB PRESS Vol.23 (23)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774121630/sorehabooks-22/" name="G-Tools"><img src="http://images-jp.amazon.com/images/P/4774121630.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">WEB+DB Press編集部<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774121630&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774121630/sorehabooks-22/" name="G-Tools">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ DAOパターンの意義についてはここを参考にしました。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" name="G-Tools">J2EEパターン―明暗を分ける設計の戦略</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" name="G-Tools"><img src="http://images-jp.amazon.com/images/P/4894714345.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ディーパック・アラー　ジョン・クルーピ　ダン・マークス　ウルシステムズ株式会社　中野 明彦　佐野 祐一郎<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714345&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均　</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />副題の言うとおり<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これが待ち望んでいたもの<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />J2EEにとらわれず、すべてのJAVA Webアプリケーション開発者に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />総てのJ2EE開発者必携!! 持ってない?! いますぐ買いに走れ!!<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" name="G-Tools">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ オブジェクト指向分析/設計の良書です。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" name="G-Tools">実践UML―パターンによる統一プロセスガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" name="G-Tools"><img src="http://images-jp.amazon.com/images/P/4894713861.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">クレーグ ラーマン　Craig Larman　依田 光江　依田 智夫　今野 睦<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713861&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均　</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLの実践的な使い方を包括的に理解できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" name="G-Tools">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4764902834.09.MZZZZZZZ.jpg" border="0" alt="DAOとO/Rマッピングとビジネスロジックと">
-----
KEYWORDS:
DAO,O/Rマッピング,ビジネスロジック,Data Access Object,ORマッピング,業務アプリケーション
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Refactoring to Patterns メモ
BASENAME: refactoring_to_patterns
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 10/29/2004 11:15:02 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321213351/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/0321213351.01.MZZZZZZZ.jpg"  border="0" /></a>
</p>

『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321213351/sorehabooks-22" target="_blank" class="uline">REFACTORING TO PATTERNS</a>』から、場合別リファクタリングカタログのメモです。本書は<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22" class="extlink" target="_blank">『リファクタリング―プログラムの体質改善テクニック』</a>の続編になっています。

例のごとく、自分で読み直したときにどんな場合にどのリファクタリングが使えるかのメモにしようと思ってます。2005年中くらいには、本書の和訳が出版される予定です。

現在、洋書読破中。記事もそのつど更新していくつもりです。(最終更新日：2004/10/29)

本家サイトはこちらになります。カタログ一覧あります。

<a href="http://www.industriallogic.com/xp/refactoring/" target="_blank" class="extlink">Refactoring To Patterns</a>
-----
EXTENDED BODY:
<h2>インデックス</h2>

<ul><li><a href="#Form Template Method">Form Template Method</a></li>
<li><a href="#Introduce Polymorphic Creation with Factory Method">Introduce Polymorphic Creation with Factory Method</a></li>
<li><a href="#Chain Constructors">Chain Constructors</a></li>
<li><a href="#Replace One/Many Distinctions with Composite">Replace One/Many Distinctions with Composite</a></li>
<li><a href="#Extract Composite">Extract Composite</a></li>
<li><a href="#Unify Interfaces with Adapter">Unify Interfaces with Adapter</a></li>
<li><a href="#Introduce Null Object">Introduce Null Object</a></li>
<li><a href="#Compose Method">Compose Method</a></li>
<li><a href="#Move Accumulation to Collectiong Parameter">Move Accumulation to Collectiong Parameter</a></li>
<li><a href="#Replace Conditional Dispatcher with Command">Replace Conditional Dispatcher with Command</a></li>
<li><a href="#Move Accumulation to Visitor">Move Accumulation to Visitor</a></li>
<li><a href="#Replace Conditional Logic with Strategy">Replace Conditional Logic with Strategy</a></li>
<li><a href="#Move Embellishment to Decorator">Move Embellishment to Decorator</a></li>
<li><a href="#Replace State-Altering Conditionals with State">Replace State-Altering Conditionals with State</a></li>
<li><a href="#Replace Type Code with Class">Replace Type Code with Class</a></li>
<li><a href="#Replace Implicit Language with Interpreter">Replace Implicit Language with Interpreter</a></li>
<li><a href="#Encapsulate Composite with Builder">Encapsulate Composite with Builder</a></li>
<li><a href="#Replace Constructors with Creation Methods">Replace Constructors with Creation Methods</a></li>
<li><a href="#Move Creation Knowledge to Factory">Move Creation Knowledge to Factory</a></li>
<li><a href="#Encapsulate Classes with Factory">Encapsulate Classes with Factory</a></li>
<li><a href="#Inline Singleton">Inline Singleton</a></li>
<li><a href="#Replace Implicit Tree with Composite">Replace Implicit Tree with Composite</a></li></ul>

<h2>場合別リファクタリングカタログ</h2>

カタログ名のリンクをクリックすると、別ウィンドウで本家のイメージ図が開きます。一緒に見るとイメージがわくかも。

<h3 id="Form Template Method"><a href="http://www.industriallogic.com/xp/refactoring/formTemplateMethod.html" target="_blank" class="extlink">Form Template Method</a></h3>

継承関係にあるサブクラス間の明白な、または微妙な重複コードを取り除く

<h3 id="Introduce Polymorphic Creation with Factory Method"><a href="http://www.industriallogic.com/xp/refactoring/polymorphicCreationFactory.html" target="_blank" class="extlink">Introduce Polymorphic Creation with Factory Method</a></h3>

サブクラスで似たような処理を実装している場合、オブジェクト生成段階で Template Method パターンを用いることによって重複コードを減らすことができる。

オブジェクト生成をポリモーフィズムで行うことで、オブジェクト指向っぽくなります。このリファクタリングを行った後のコードは、サブクラス間で重複した同じようなコードがなくなります。

Factory Method パターンと Template Method パターンはよく同時に使われます。

<h3 id="Chain Constructors"><a href="http://www.industriallogic.com/xp/refactoring/chainConstructors.html" target="_blank" class="extlink">Chain Constructors</a></h3>

コンストラクタで似たような処理が重複している場合、このパターンで重複を除去できる。

<h3 id="Replace One/Many Distinctions with Composite"><a href="http://www.industriallogic.com/xp/refactoring/onemanyDistinctionsWithComposite.html" target="_blank" class="extlink">Replace One/Many Distinctions with Composite</a></h3>

一つのオブジェクトもしくはオブジェクトのコレクションを処理するコードが散らばっているような場合に、重複を除去できる可能性がある。

<h3 id="Extract Composite"><a href="http://www.industriallogic.com/xp/refactoring/extractComposite.html" target="_blank" class="extlink">Extract Composite</a></h3>

階層関係にあるサブクラスで、個々のクラスがコンポジット関係にある場合、実装はほとんど同じである場合が多い。そのようなときに使える。

<h3 id="Unify Interfaces with Adapter"><a href="http://www.industriallogic.com/xp/refactoring/interfacesWithAdapter.html" target="_blank" class="extlink">Unify Interfaces with Adapter</a></h3>

異なったインターフェースを持つからという理由で、単に違うオブジェクトを処理するのなら、Adapterと統一のインターフェースを利用して、共通のロジックを除去出来るかもしれない。

<h3 id="Introduce Null Object"><a href="http://www.industriallogic.com/xp/refactoring/nullObject.html" target="_blank" class="extlink">Introduce Null Object</a></h3>

オブジェクトが null の場合に条件句で何の処理も行わない場合が多くある時、このパターンで重複が減らせるかもしれない。

<h3 id="Compose Method"><a href="http://www.industriallogic.com/xp/refactoring/composeMethod.html" target="_blank" class="extlink">Compose Method</a></h3>

長くて理解しにくいメソッドがある場合、処理を構成する部分をわける。この方法は、リファクタリングの Extract Method を多く用いる。

処理を区切るときの注意点として、<strong>同じ処理の詳細レベルになるようにメソッド化する</strong>ことがあげられる。

このリファクタリングを適用すると、private メソッドや小さな処理単位のメソッドが非常にたくさんできる。その場合は、Extract Class リファクタリングを用いて、クラスを分けるなどして対応するとよい。

<h3 id="Move Accumulation to Collectiong Parameter"><a href="http://www.industriallogic.com/xp/refactoring/accumulationToCollection.html" target="_blank" class="extlink">Move Accumulation to Collectiong Parameter</a></h3>

情報を変換していく作業がある場合、処理を構成する別々のメソッドを定義して、処理の順番で一つの情報を構成するようにする。

<h3 id="Replace Conditional Dispatcher with Command"><a href="http://www.industriallogic.com/xp/refactoring/conditionDispatcherWithCommand.html" target="_blank" class="extlink">Replace Conditional Dispatcher with Command</a></h3>

条件文 (switch 文など)によって処理を分岐させるようなコーディングは、ハードコードになり、新しい条件が付け加わったりリクエストが増えたりした場合に、修正が追いつかなくなる。

対応策として、Command パターンを用いるとよい。Command クラスにパラメータやリクエストを保持させるようにし、処理内容を Command 自体に行わせる。条件パラメータやリクエストが増えたら、新しいCommand クラスを作ることで対応できるようになる。

<h3 id="Move Accumulation to Visitor"><a href="http://www.industriallogic.com/xp/refactoring/accumulationToVisitor.html" target="_blank" class="extlink">Move Accumulation to Visitor</a></h3>

異なったインターフェースのオブジェクトから情報を取得するために、巨大な switch 文を使うくらいなら、Visitor パターンを利用してデータを集めるようにする。

<h3 id="Replace Conditional Logic with Strategy"><a href="http://www.industriallogic.com/xp/refactoring/conditionalWithStrategy.html" target="_blank" class="extlink">Replace Conditional Logic with Strategy</a></h3>

条件によって処理のアルゴリズムが違うような場合は、 条件句をStrategy パターンで置き換える。

このパターンを使う動機の一つとしてこのようなことがあげられる。まず、条件分岐のロジックを書く場合というのはよく、アルゴリズムを決めるためということが多い。Decompose Conditional パターンや <a href="http://www.industriallogic.com/xp/refactoring/composeMethod.html" target="_blank" class="extlink">Compose Method</a>パターンを用いてこのロジックの部分をシンプルに、分かりやすくすることが出来る。

しかし一方では、Decompose Conditionalパターンや Compose Method パターンを使ってロジックをメソッドに分割すると、小さなメソッドがたくさん出来てしまう。それを防ぐために、このReplace Conditional Logic with Strategy パターンを使う。

<h3 id="Move Embellishment to Decorator"><a href="http://www.industriallogic.com/xp/refactoring/embellishmentToDecorator.html" target="_blank" class="extlink">Move Embellishment to Decorator</a></h3>

クラスの核となる責務を装飾するようなコードは、条件句で装飾をするかどうかを判断するのではなくて、装飾するコードをDecoratorクラスに委譲するようにする。

Decorator(装飾するクラス)とDecoratee(装飾されるクラス)は同じインターフェースを持つ。しかし、オブジェクトのクラスが一致するかどうかを判定するような場合(instanceof演算子を使う場合)は注意する必要があります。Decorateされたインスタンスは、Decorateeと同じインターフェースを持ちますが、通常は継承関係にはないので、クラスが一致することはありません。

クラスの同一性に依存するようなコードがクライアントにない場合にのみ、Decoratorパターンを使います。Decorator クラスは状態(フィールド)を持たない方がいいです。なぜならDecorator クラスは不必要な状態(フィールド)があったとしても、継承せざるを得なくなるからです。

<h3 id="Replace State-Altering Conditionals with State"><a href="http://www.industriallogic.com/xp/refactoring/alteringConditionalsWithState.html" target="_blank" class="extlink">Replace State-Altering Conditionals with State</a></h3>

オブジェクトの状態遷移が複雑になるとき、Stateパターンを使って状態遷移を簡略化する。

状態遷移のロジックというのは、さまざまなところに重複ロジックが散乱することが多い。状態遷移のロジックを他のクラス(Stateクラス)に移動させることで、コードがシンプルになる。ただし、最初からこのリファクタリングを適用するのではなく、通常はもっと簡単な<i>Extract Method</i>パターンを適用する。

<dl>
<dt class="info">Stateパターンと Strategyパターンの違い</dt>
<dd>Stateパターンと Strategyパターンは、考え方の違いである(最終的なクラス図はほとんど同じ形)。Stateパターンは、状態クラスのインスタンス間で状態遷移のロジックが簡単になるように使われる。一方の Strategyパターンは、ストラテジークラスのインスタンスにアルゴリズムの実行を委譲(delegate)する目的で使う。</dd>
</dl>

<h3 id="Replace Type Code with Class"><a href="http://www.industriallogic.com/xp/refactoring/typeCodeWithClass.html" target="_blank" class="extlink">Replace Type Code with Class</a></h3>

プリミティブ型をつかって型(タイプ)を判別しているようなら、 Type クラスを作って、型の安全性を保証したほうがよい。

<h3 id="Replace Implicit Language with Interpreter"><a href="http://www.industriallogic.com/xp/refactoring/implicitLanguageWithInterpreter.html" target="_blank" class="extlink">Replace Implicit Language with Interpreter</a></h3>

クラスの責務が、プリミティブ型の組み合わせで成り立つような場合、ある種の言語と考えて Interpreter パターンを使うといいかもしれない。

<h3 id="Encapsulate Composite with Builder"><a href="http://www.industriallogic.com/xp/refactoring/compositeWithBulder.html" target="_blank" class="extlink">Encapsulate Composite with Builder</a></h3>

Compositeパターンを使った再帰的な構造を組み立てる場合に Builder を使うとクライアントはシンプルになる。

通常、Compositeパターンを使って構造を組み立てる場合、実装クラスに関連してしまう(カタログの場合 TagNode クラス)。Compositeを組み立てる Builder クラスを用意することで、実装を知らずにクライアントは構造を組み立てることが出来るようになる。

<dl>
<dt class="info">このパターンを使う動機</dt>
<dd>
<pre>
１． 複雑なオブジェクトを構築しなければならない場合にクライアントの実装はシンプルに保ちたい
２． クライアントをCompositeの詳細から切り離したい
</pre>
</dd>
</dl>

CompositeパターンとBuilderパターンは同時に使われることが多い。理由は2番の動機のように、クライアントがCompositeの詳細を知らなくてもすむようにしたいから。このように設計しておくことで、Compositeの実装が変わった場合にBuilderでクライアントの変更を吸収出来る場合が多くなる

<h3 id="Replace Constructors with Creation Methods"><a href="http://www.industriallogic.com/xp/refactoring/constructorCreation.html" target="_blank" class="extlink">Replace Constructors with Creation Methods</a></h3>

クラスにコンストラクタがたくさんあり、プログラマーがどのコンストラクタを呼べばよいのか分かりにくい場合にこのリファクタリングが使える。複数のコンストラクタよりも、Create Method を用意したほうが良い理由は、<b>メソッドに名前が付けられるから、どんな処理が行われるのか名前から判断できる</b>から。(コンストラクタじゃ全部同じ名前で分からない)

<h3 id="Move Creation Knowledge to Factory"><a href="http://www.industriallogic.com/xp/refactoring/creationWithFactory.html" target="_blank" class="extlink">Move Creation Knowledge to Factory</a></h3>

色々なクラスにインスタンス生成の情報が広がってしまっている場合、単一のFactoryクラスを作成することでシンプルになるかもしれない。

インスタンス生成の役割は色々なクラスに広がるべきではない。今回のようなaStringNodeインスタンス生成の方法をaParser、aStringParser、StringNodeに散らばらせるのではなく、NodeFactoryを導入しインスタンス生成と設定をカプセル化すべき。(クラスには単一の責務のみを持たせるべきだから)

生成するインスタンスがロジックによって違ってくるような場合、AbstractFactoryパターンを使ってFactoryを分けることで対応できるようになる。aParserにインスタンス生成の責務を負わせていると、条件分岐のロジックが重複してしまう可能性が高い。

<h3 id="Encapsulate Classes with Factory"><a href="http://www.industriallogic.com/xp/refactoring/classesWithFactory.html" target="_blank" class="extlink">Encapsulate Classes with Factory</a></h3>

クラスのクライアントが直接、実装に依存してしまう関連よりも Factory メソッドを用意して抽象に依存させるようにする。

「<strong>抽象に依存せよ。実装に依存するな。</strong>」は、良いクラス設計のポイントです。このパターンを適用することでクライアントは実装に依存せずに、抽象インターフェースにのみ依存するようになります。

ただし一つ問題があります。このパターンでは、子クラスが増えた場合に Factory クラスを修正しなければなりません。インターフェースの変更(追加)を行わなければならなくなるので、子クラスがほとんど追加されないような場合にだけ使った方が良いと思います。

<h3 id="Inline Singleton"><a href="http://www.industriallogic.com/xp/refactoring/inlinesingleton.html" target="_blank" class="extlink">Inline Singleton</a></h3>

不適切なSingletonの使い方をしている部分をリファクタリングします。

Singletonパターンを必要としない場面は下記のようなときがあります。

<ul><li>Singletonオブジェクトを使うクラスが、Singletonオブジェクトを引数などで簡単に渡してもらえる場合</li><li>些細なメモリやパフォーマンスを改善するためだけに使われるSingletonオブジェクト</li><li>下層のクラスが同一層のリソース以外を使う目的で使われているSingletonオブジェクト</li></ul>

Singletonを使うべき理由は以下だけです。

<strong>たった一つのインスタンスであることを保証したい場合とグローバルアクセスポイントを提供したい場合</strong>

<dl>
<dt class="info">図の説明</dt>
<dd>
<p>カタログに載ってる図は、アプリケーション層にある Blackjackクラスが 上位層の Console クラスに依存している。リファクタリング前のコードでは、ConsoleクラスをHitStayResponseオブジェクトを上位層から下位層に渡すためのRegistの役割に使っている。</p>

<p>リファクタリング後のコードでは、素直に Blackjackクラスにセッターメソッドを用意して、無駄なRegistクラスを作らないように修正されている。</p>
</dd>
</dl>

<h3 id="Replace Implicit Tree with Composite"><a href="http://www.industriallogic.com/xp/refactoring/implicitTreeWithComposite.html" target="_blank" class="extlink">Replace Implicit Tree with Composite</a></h3>

ツリー構造を構成するような処理を、<i>Composite</i> パターンをを使って分かりやすくします。

XMLデータなどのツリー形式を構成するデータ構造を扱う場合、<i>Composite</i> パターンを使ってクラスを分割すると、ロジックがすっきりすることがあります。


<h2>参考</h2>

+ Refactoring to Patterns のWikiです。随時サンプルコードが増えていく予定のようです。
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://capsctrl.que.jp/kdmsnr/wiki/RtP/" target="_blank" class="uline">Refactorint to Patterns Wiki(サンプルコード有)</a>

+ GoFのデザインパターンを学ぶ定番です。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/">増補改訂版Java言語で学ぶデザインパターン入門</a><br />結城 浩<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797327030"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797327030"/></a><br /></td></tr></table>
</div>

+ GoF以外のデザインパターンが載ってます。PLoPで扱われている中で主なものを選んであります。
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797314397/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797314397.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797314397/sorehabooks-22/">プログラムデザインのためのパターン言語―Pattern Languages of Program Design選集</a><br />PLoPD Editors, 細谷 竜一, 中山 裕子<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=4797314397"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />PLoPで提案されたパターンの粋を集めた本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />役に立ちそうなパターンがいくつも説明されています<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797314397/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="4797314397"/></a><br /></td></tr></table>
</div>

+ エンタープライズで使えるパターン集のバイブル的本です。(洋書)
<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321127420/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/0321127420.01.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top" /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321127420/sorehabooks-22/">Patterns of Enterprise Application Architecture (Addison-Wesley Signature Series)</a><br />Martin Fowler, David Rice, Matthew Foemmel, Edward Hieatt, Robert Mee, Randy Stafford<br /><iframe scrolling="no" frameborder="0" width="250" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://xml-jp.amznxslt.com/onca/xml3?dev-t=D2JW5SAFEH7L0B&t=goodpic-22&f=http://www.g-tools.com/xsl/aws-price-ffffff.xsl&locale=jp&type=lite&AsinSearch=0321127420"></iframe><br /><br /><font size="-1"><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />アーキテクトにとって、必携の一冊<br /></font><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321127420/sorehabooks-22/" /><font size="-1">Amazonで詳しく見る</font></a><img src="http://www.g-tools.com/img/spacer.gif"   width="50" height="1" /><a href="http://www.goodpic.com/mt/aws/" /><img src="http://www.g-tools.com/img/powered-by-gtool.gif"   border="0" alt="0321127420"/></a><br /></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="REFACTORING TO PATTERNS">
-----
KEYWORDS:
Refactoring,Patterns,リファクタリング,パターン,カタログ,Addison Wesley
-----

COMMENT:
AUTHOR: 匿名
EMAIL: 
IP: 219.5.32.60
URL: 
DATE: 09/22/2004 01:02:58 AM
どの出版社から？そして訳されるのはどなた？??
-----

COMMENT:
AUTHOR: 管理者
EMAIL: 
IP: 192.168.0.2
URL: 
DATE: 09/22/2004 11:06:50 PM
どうもです。
まだ、正式に発表されていないようなので、出版社と翻訳者は秘密にしておきます。

ただ、今までの翻訳書からするとかなり期待の持てる翻訳者だと思います。出版社もしかり。

乞うご期待！
-----

COMMENT:
AUTHOR: 管理者
EMAIL: 
IP: 210.229.150.131
URL: 
DATE: 07/29/2005 05:38:49 PM
ついに、日本語版が発売になりました。

『パターン指向リファクタリング入門 〜ソフトウエア設計を改善する27の作法』
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: はじめて学ぶUML―オブジェクト指向の基礎からUMLの利用法まで、しっかりよくわかる!
BASENAME: umluml
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 10/30/2004 12:17:36 PM
TAGS: UML,オブジェクト指向
-----
BODY:
「ユースケース図」から「パッケージ図」までの全10個のUML図を<a href="http://www.umtp-japan.org/examination/index.html" target="_blank" class="extlink">モデリング技能認定試験</a>のL1,L2試験に合格できる程度で紹介されています。UMLは、世界標準のモデリング表記法です。モデリングの共通言語として使われています。

本書では、下記の10個のUML図について説明しています。

<ol><li>ユースケース図</li><li>クラス図</li><li>シーケンス図</li><li>コラボレーション図</li><li>ステートチャート図</li><li>コンポーネント図</li><li>配置図</li><li>オブジェクト図</li><li>アクティビティ図</li><li>パッケージ図</li></ol>

UML図以外にも簡単なオブジェクト指向の基本概念やモデリングの必要性などにも触れられています。モデリング技能認定試験の勉強本としての活用が考慮されているのか、Keyword や Step Up といった本文中に出てきた用語の解説も豊富に載っています。

本書で扱われているUMLのバージョンは1.xです。今後は、UMLの2.0が使われ始めると思います。UML2.0では、1.xよりもさらに表現力豊かになった図が使えたり、現在のUML図のいくつかが変更されていたりします。ですが、UML2.0対応の本で始めるよりも、本書のような<b>全体図を見渡せる</b>入門書で基礎から作っていくのが、UMLの理解のコツかと思います。
-----
EXTENDED BODY:
<h2>解説</h2>

<h3>ソフトウェア開発の現場では使えない</h3>

ソフトウェア開発の現場で、すべてのUMLを使う機会というのはほとんどないように思います。最低「ユースケース」、「アクティビティ図」、「クラス図」が分かっていれば、オブジェクト指向設計の話し合いにはついていけるでしょう。「シーケンス図」、「コラボレーション図」まで理解していれば、実装の段階でコーディングする前にロジックの検証が行えます。

本書は<strong>ソフトウェア開発の現場では使えません</strong>。というのは、おそらく本書の目的は、UML図の読み方を学ぶことだからです。ソフトウェア開発の現場では、UMLはクラスの関係性のチェックや仕様の検証などに使われます。本書の内容だけでは、何が書いてあるのかは読み取れても、なぜこうなったのかということの理解までは至らないと思います。

<h3>基礎学力向上のための良書</h3>

ただ、本書が悪い本なのかというとそういうわけでは決してありません。UMLを使ったモデリングの Why の部分を理解する書籍はたくさんあります。そういった書籍を読み進めるための基礎知識を<b>分かりやすく</b>学べる本というのは、実際にはすくないように思います。本書はUMLの Why の部分を理解する書籍を読み進めるための基礎学力を育てる良い本です。

幅広くUML図を説明しているので、あまり深くまで突っ込んだ説明というのはあまりありません。むしろ、図の読み方に専念していて、非常に一貫性のあるまとまった形になっていると思います。

<a href="http://www.umtp-japan.org/examination/index.html" target="_blank" class="extlink">モデリング技能認定試験</a>というものがあります。これは、上流工程や要求仕様とソフトウェア実装仕様との間を取り次ぐ『UML』をどれくらい使いこなせるかというのを計る試験です。本書はこの試験の L1, L2 合格程度の「UMLを読む技術」向上の試験本としても使えます。

<h2>覚書き</h2>

<h3>クラス図の関連</h3>

<dl><dt>関連</dt><dd>クラス間に<strong>構造的</strong>な関係がある場合に使用します。</dd>
<dt>集約 (aggregation)</dt><dd>クラス間に<strong>全体-部分</strong>の関係が成り立つときに使われます。</dd>
<dt>依存</dt><dd>利用関係を表すときに使います。引数で参照される場合、ローカル変数として参照する場合、グローバルに参照する場合</dd>
<dt>汎化</dt><dd>継承関係を表すときに使われます。</dd>
<dt>コンポジション</dt><dd>全体-部分のうち、ライフサイクルが同じ場合に使われます。</dd>
</dl>

<h2>参考</h2>

+ 本書と同類の基礎学力向上書です。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774117218/sorehabooks-22/" name="G-Tools">体験オブジェクト指向 はじめるUMLモデリング</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774117218/sorehabooks-22/" name="G-Tools"><img src="http://images-jp.amazon.com/images/P/4774117218.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">山田 正樹<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774117218&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />「暗記中心」ではない学習の方法論が紹介されているわけではありません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />期待外れ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これからUMLを始めようという人に最適な本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />モデリングの本質を学べる，実践的オブジェクト・モデリングの良書！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774117218/sorehabooks-22/" name="G-Tools">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ モデリングの Why を理解＆実践するための良書 (おすすめ)

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" name="G-Tools">UMLモデリングの本質</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" name="G-Tools"><img src="http://images-jp.amazon.com/images/P/4822221180.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">児玉 公信<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822221180&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />この本を手がかりに、自分でやってみよう！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLモデリングの窓から見た情報システム工学の展望<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これは「モデリング本」です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />必読です！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" name="G-Tools">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ UMLモデリングでさらに一歩進むために (おすすめ)

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/" name="G-Tools">UMLモデリングのエッセンス―標準オブジェクトモデリング言語入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/" name="G-Tools"><img src="http://images-jp.amazon.com/images/P/4881358642.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">マーチン ファウラー　ケンドール スコット　Martin Fowler　Kendall Scott　羽生田 栄一<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4881358642&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLエッセンスを凝縮<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />簡にして要を得た優れた解説書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />無駄がない導入書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />手元におきたい一冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />入門書ではない<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/" name="G-Tools">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4816334114.09.MZZZZZZZ.jpg" border="0" alt="はじめて学ぶUML―オブジェクト指向の基礎からUMLの利用法まで、しっかりよくわかる!">
-----
KEYWORDS:
はじめて学ぶ,UML,オブジェクト指向,基礎,利用法,赤本,オージス総研
-----


-----
CF50_CF_4: 竹政 昭利 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/51WB9PTJNTL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4816334114/sorehabooks-22
CF50_CF: ナツメ社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Spring Framework 覚書き - IoC
BASENAME: spring_framework_覚書き_ioc
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/04/2004 01:14:02 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764558315/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg" border="0" /></a>
</p>

アメリカではほとんどデフェクトスタンダードとなっている「<a href="http://www.springframework.org/" target="_blank" class="extlink"><b>Spring Framework</b></a>」の覚書きです。Spring は簡単に言うと、<abbr title="Inversion of Control">IoC (制御の反転)</abbr>、またの名を <abbr title="Dependency Injection">DI (依存性注入)</abbr> という仕組みを取り入れた軽量コンテナです。

Springが他のIoCコンテナと差別化を計っている点として、「<b>ビジネスオブジェクトを管理する方法にフォーカスを当てている</b>」という点があります。また、「レイヤー化されたアーキテクチャであるため、局所的にSpringアーキテクチャを利用できる」、「テストドリブンプロジェクトに理想的なフレームワークになるように設計されている」という利点があります。

Springの詳細については、ほかにもっとよいサイト(<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント</a>や<a href="http://www.andore.com/money/trans/spring_ja.html" target="_blank" class="extlink">Springフレームワークの紹介</a>)があるので、そちらを参考にしてください。ここでは、Springを使っていて、ハマった点や気になった点などをメモしていこうと思います。随時更新していくつもりです。間違っている可能性が高いので、気になる点があればコメントをお願いします。

<section>

<h4>参考</h4>

<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad - Wiki</a>

<a href="http://direct.idg.co.jp/detail_1.msp?id=1066&class=10005&n=2" target="_blank" class="extlink">JavaWorld 7月号 2004年</a>

</section>
-----
EXTENDED BODY:
<h2>IoCコンテナ</h2>

<ul><li><a href="#IoCコンテナとは">IoCコンテナとは</a></li>
<li><a href="#IoC で使われる主なクラス / インターフェース">IoC で使われる主なクラス / インターフェース</a></li>
<li><a href="#XmlBeanFactory を使った、サンプルコード">XmlBeanFactory を使った、サンプルコード</a></li>
<li><a href="#ApplicationContext を使った場合">ApplicationContext を使った場合</a></li>
<li><a href="#bean-context.xml (Bean定義ファイル)の中身">bean-context.xml (Bean定義ファイル)の中身</a></li>
<li><a href="#CustomEditorConfigurer を使った、特殊型へのマッピング">CustomEditorConfigurer を使った、特殊型へのマッピング</a></li>
<li><a href="#MessageResource の取り扱い">MessageResource の取り扱い</a></li>
<li><a href="#ApplicationContextの取得方法その2">ApplicationContextの取得方法その2</a></li>
<li><a href="#BeanFactoryLocator が必要な理由">BeanFactoryLocator が必要な理由</a></li>
<li><a href="#Beanのプロパティを別ファイルに定義する方法">Beanのプロパティを別ファイルに定義する方法</a></li>
<li><a href="#メソッドの実行結果をBeanのプロパティに設定する">メソッドの実行結果をBeanのプロパティに設定する</a></li>
<li><a href="#ハマった点">ハマった点</a></li></ul>

<h2 id="IoCコンテナとは">IoCコンテナとは</h2>

Spring の IoC コンテナはXMLで定義された Bean定義ファイル に基づいて、オブジェクトの生成や初期化、関連付けを行います。

オブジェクトの管理に使うこともできます。例えば、Singleton (インスタンスが常に一つしか存在しないクラス) として扱いたい場合にも、Bean定義ファイルに設定することで Singleton として扱えるようになります。

<h2 id="IoC で使われる主なクラス / インターフェース">IoC で使われる主なクラス / インターフェース</h2>

IoCコンテナを利用する場合に使われる主なクラスやインターフェースです。

<h3>org.springframework.context.ApplicationContext</h3>

このクラスはIoCの核となるものです。以下のような機能を ApplicationContext は備えています。

<ul><li>BeanFactory 機能</li>
<li>国際化機能</li>
<li>リソースファイルのロード機能</li>
<li>複数コンテキストの扱い</li>
<li>イベントの通知</li>
</ul>

<h3>org.springframework.beans.factory.BeanFactory</h3>

IoCコンテナの核となるインターフェース。このインターフェースの実装クラスが、Beanインスタンスを生成し、初期値を設定してくれる。ただし、メモリ容量などの縛りがない限り通常は ApplicationContext の使用が推奨されています。

通常は、ApplicationContext を使用します。

<h3>org.springframework.context.support.FileSystemXmlApplicationContext</h3>

XMLファイルを読み込んで Beanインスタンスを生成します。おそらく、一般的な ApplicationContext の実装だと思います。

<h3>org.springframework.beans.factory.xml.XmlBeanFactory</h3>

Beanの定義ファイル(XML)を読み込んでインスタンスの生成や初期化を行うクラス。XMLのDTDは「<a href="http://www.springframework.org/dtd/spring-beans.dtd" target="_blank" class="extlink">http://www.springframework.org/dtd/spring-beans.dtd</a>」が利用できます。BeanFactory を利用する場合にはこのクラスを使います。

<h3>org.springframework.beans.factory.InitializingBean</h3>

このインターフェースを実装しているクラスは、IoC コンテナが BeanFactoryがインスタンスを生成して初期値を設定した後に呼び出されるようになります。このインターフェースに定義されている afterPropertiesSet() で初期化処理を行うことが出来るようになります。これは、Bean定義の init-method を指定したのと同じ動作になります。

POJOのクラスは、Springに依存させたくない場合がほとんどでしょう。通常、このインターフェースを実装するよりも、Bean定義に init-method を指定したほうが幸せになれます。

<h3>org.springframework.beans.factory.DisposableBean</h3>

このインターフェースを実装しているクラスは、BeanFactory のデストラクタ処理の中で呼ばれるようになります。通常、Bean中のリソースを開放したい場合に使います。destroy() メソッドを実装します。 Bean定義の destroy-method を指定したのと同じ動作です。

POJOのクラスは、Springに依存させたくない場合がほとんどでしょう。通常、このインターフェースを実装するよりも、Bean定義に destroy-method を指定したほうが幸せになれます。

<h3>org.springframework.beans.factory.config.CustomEditorConfigurer</h3>

Bean定義の中で、プロパティの型が特殊なもの (独自クラスや Timestamp型など) は、Bean定義ファイルの中に直接値を書いても、BeanCreationException が発生してしまいます。原因は型が一致しないからです。このクラスは、指定した型に独自のコンバート処理を施すことが出来るようになります。<a href="#CustomEditorConfigurer を使った、特殊型へのマッピング">サンプルコード</a>を参考にしてください。

<section>

<h4>デフォルトで用意されている主なカスタムエディター</h4>

<dl>
<dt>org.springframework.beans.propertyeditors.CustomBooleanEditor</dt>
<dd><p>true, false という文字列を Boolean に変換します。</p></dd>
<dt>org.springframework.beans.propertyeditors.CustomDateEditor</dt>
<dd><p>日付文字列を日付型に変換します。日付文字列は、コンストラクタに渡すフォーマッタで指定できます。</p></dd>
<dt>org.springframework.web.multipart.support.ByteArrayMultipartFileEditor</dt>
<dd><p>マルチパートファイルをバイトの配列に変換します。</p></dd>
<dt>org.springframework.beans.propertyeditors.CustomNumberEditor</dt>
<dd><p>Integer, Long, Short, Double, Float 等の数値型への変換を行います。</p>

<p>Webアプリケーションで使用する場合は、通例では BaseCommandController の initBinder メソッドで、binder.registerCustomEditor を呼び出すようにする。</p></dd>
<dt>org.springframework.beans.propertyeditors.StringTrimmerEditor</dt>
<dd><p>空文字 を null に変換するエディターです。Webアプリケーションで使えるかも。</p></dd>
</dl>

</section>

<h3>org.springframework.beans.factory.access.BeanFactoryLocator</h3>

BeanFactory クラスをルックアップするためのインターフェースです。このインターフェースの実装クラスは、主に Singleton で使われます。Singleton で使われる理由は「<a href="#BeanFactoryLocator が必要な理由">BeanFactoryLocator が必要な理由</a>」を見てください。

<h2 id="XmlBeanFactory を使った、サンプルコード">XmlBeanFactory を使った、サンプルコード</h2>

ここでは、まず XmlBeanFactory を作成しています。これが IoC コンテナの本体です。

<section>

<h4>XmlBeanFactory のサンプル</h4>

<pre class="code"><code><span class="keyword">package</span> com.hamasyou.spring; 
 
<span class="keyword">import</span> java.io.FileInputStream; 
<span class="keyword">import</span> java.math.BigDecimal; 
<span class="keyword">import</span> junit.framework.TestCase; 
<span class="keyword">import</span> org.springframework.beans.factory.BeanFactory; 
<span class="keyword">import</span> org.springframework.beans.factory.xml.XmlBeanFactory; 
 
<span class="keyword">public</span> <span class="keyword">class</span> ExsampleBeanTest <span class="keyword">extends</span> TestCase { 
  <span class="keyword">public</span> <span class="keyword">void</span> testDataAccess() <span class="keyword">throws</span> Exception { 
    BeanFactory factory =  
      <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> FileInputStream(<span class="literal">"bean-context.xml"</span>)); 
    PersonAccessDAO dao = (PersonAccessDAO)factory.getBean(<span class="literal">"personAccessDAO"</span>);
    Person person = dao.findPerson(BigDecimal.valueOf(1)); 
        
    assertEquals(<span class="literal">"IDは 1 のはず"</span>, 1, person.getId().intValue()); 
  } 
} 
</code></pre>

</section>

<h2 id="ApplicationContext を使った場合">ApplicationContext を使った場合</h2>

ApplicationContext は、BeanFactory に国際化メッセージ機能や、イベント通知機能を備えたものです。複数のコンテキストを扱え、Bean定義ファイルを分割することが出来ます。BeanFactory と使い方はほとんどかわりません。プロジェクトでは、BeanFactory よりも ApplicationContext を利用するほうが多いと思います。

<h3>BeanFactory よりも ApplicationContext をつかう</h3>

BeanFactory よりも ApplicationContext を主に使いましょう。ApplicationContext は、AOP のサポートや分散トランザクションのサポートなど、 BeanFactory よりも高機能を備えています。

<section>

<h4>ApplicationContext のサンプル</h4>

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">void</span> testApplicationContext() <span class="keyword">throws</span> Exception { 
  FileSystemXmlApplicationContext context = 
    <span class="keyword">new</span> FileSystemXmlApplicationContext(  
        <span class="keyword">new</span> String[] { <span class="literal">"bean-context.xml"</span>, 
                       <span class="literal">"bean-context2.xml"</span>, 
                       <span class="literal">"custom-edit.xml"</span> } ); 
  PersonAccessDAO dao = 
      (PersonAccessDAO)context.getBean(<span class="literal">"personAccessDAO"</span>);         
  Person person = dao.findPerson(BigDecimal.valueOf(1)); 
         
  assertEquals(<span class="literal">"IDは 1 のはず"</span>, 1, person.getId().intValue());         
} 
</code></pre>

</section>

<h2 id="bean-context.xml (Bean定義ファイル)の中身">bean-context.xml (Bean定義ファイル)の中身</h2>

Bean定義ファイルには、Beanの設定を書いておきます。プロジェクトで使い始めたら、あっという間にBeanファイルが大きくなりすぎてしまう気がします。<b>ApplicationContext</b> なら、複数のコンテキストを扱えるので、Bean 定義を複数ファイルに分割することが出来ます。

ApplicationContext クラスを使うと、Bean 定義ファイルを分割することができます。ApplicationContext を使う場合、bean-context.xml ではなく <strong>applicationContext.xml</strong> というファイル名を使うのが慣習です。

<section>

<h4>bean-context.xml</h4>

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> 
<span class="tag">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; 
 &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;</span> 
<span class="tag">&lt;beans&gt;</span> 
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;dataSource&quot;</span>  
        <span class="attr">class=</span><span class="value">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span> 
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;driverClassName&quot;</span>&gt;</span> 
      <span class="tag">&lt;value&gt;</span>org.hsqldb.jdbcDriver<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/property&gt;</span> 
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;url&quot;</span>&gt;</span> 
      <span class="tag">&lt;value&gt;</span>jdbc:hsqldb:hsql://localhost<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/property&gt;</span> 
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;username&quot;</span>&gt;</span> 
      <span class="tag">&lt;value&gt;</span>sa<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/property&gt;</span> 
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;password&quot;</span>&gt;</span> 
      <span class="tag">&lt;value&gt;</span><span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/property&gt;</span>     
  <span class="tag">&lt;/bean&gt;</span> 
   
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;personAccessDAO&quot;</span>  
        <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.dao.SimpleAccessDAO&quot;</span>&gt;</span> 
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;dataSource&quot;</span>&gt;</span> 
      <span class="tag">&lt;ref <span class="attr">local=</span><span class="value">&quot;dataSource&quot;</span>/&gt;</span> 
    <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;/bean&gt;</span> 
<span class="tag">&lt;/beans&gt;</span>
</code></pre>

</section>

<h2 id="CustomEditorConfigurer を使った、特殊型へのマッピング">CustomEditorConfigurer を使った、特殊型へのマッピング</h2>

例えば Timestamp 型を Bean に設定したい場合、ファイルに直接値を書いても、BeanCreationException が発生してしまいます。特殊型へのマッピングには、いくつか方法がありますが、下記はそのうちの一つです。

<section>

<h4>[参考]</h4>
+ <a href="http://wiki.bmedianode.com/Spring/?BeanFactory%A4%CE%A5%AB%A5%B9%A5%BF%A5%DE%A5%A4%A5%BA" target="_blank">Spring Pad - BeanFactory のカスタマイズ</a>

</section>

<section>

<h4>Timestamp型へのマッピングがあるBean定義</h4>

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> 
<span class="tag">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; 
 &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;</span> 
<span class="tag">&lt;beans&gt;</span> 
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;employee&quot;</span> <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.Employee&quot;</span>&gt;</span> 
    <span class="tag">&lt;constructor-arg <span class="attr">index=</span><span class="value">&quot;0&quot;</span> <span class="attr">type=</span><span class="value">&quot;java.math.BigDecimal&quot;</span>&gt;</span> 
      <span class="tag">&lt;value&gt;</span>1<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/constructor-arg&gt;</span> 
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;name&quot;</span>&gt;</span> 
      <span class="tag">&lt;value&gt;</span>Employee Syougo Hamada<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/property&gt;</span> 
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;birthday&quot;</span>&gt;</span> 
      <span class="tag">&lt;value&gt;</span>2004-11-04 00:48:32.00<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/property&gt;</span>     
  <span class="tag">&lt;/bean&gt;</span>     
   
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;customEditorConfig&quot;</span> 
        <span class="attr">class=</span><span class="value">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span> 
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;customEditors&quot;</span>&gt;</span> 
      <span class="tag">&lt;map&gt;</span> 
        <span class="tag">&lt;entry <span class="attr">key=</span><span class="value">&quot;java.sql.Timestamp&quot;</span>&gt;</span> 
          <span class="tag">&lt;bean <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.custom.TimestampEditor&quot;</span>/&gt;</span> 
        <span class="tag">&lt;/entry&gt;</span> 
      <span class="tag">&lt;/map&gt;</span> 
    <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;/bean&gt;</span>   
<span class="tag">&lt;/beans&gt;</span>
</code></pre>

</section>

これが 独自コンバータの実装です。java.beans.PropertyEditorSupport クラスを継承して作ると簡単になります。

<section>

<h4>TimestampEditor クラスの実装</h4>

<pre class="code"><code><span class="keyword">package</span> com.hamasyou.spring.custom;
 
<span class="keyword">import</span> java.beans.PropertyEditorSupport;
<span class="keyword">import</span> java.sql.Timestamp;
 
<span class="keyword">public</span> <span class="keyword">class</span> TimestampEditor <span class="keyword">extends</span> PropertyEditorSupport {
  <span class="keyword">public</span> String getAsText() {
    <span class="keyword">return</span> getValue().toString();
  }
 
  <span class="keyword">public</span> <span class="keyword">void</span> setAsText(String text) <span class="keyword">throws</span> IllegalArgumentException {
    setValue(Timestamp.valueOf(text));
  }
}
</code></pre>

</section>

<h2 id="MessageResource の取り扱い">MessageResource の取り扱い</h2>

ApplicationContext は MessageResource を扱えるようになっています。実装は <b>StaticMessageSource</b> や<b>ResourceBundleMessageSource</b> が使えるようです。 Bean定義ファイルに 「<b>messageSource</b>」という ID で Bean を定義することで、MessageResource の実装を切り替えられるようです。

この方法を使うと、MessageResource を使うクラスが ApplicationContext に依存してしまいます。依存しないようにするには、アダプターとか使うと良いかもしれません。Beanクラスに ApplicationContext を渡すためには、 <i>ApplicationContextAware</i>  インターフェースを実装すれば良いです。setApplicationContext というメソッドを使い、ApplicationContext にアクセスできます。

<pre class="code"><code><span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;messageSource&quot;</span>
    <span class="attr">class=</span><span class="value">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;basenames&quot;</span>&gt;</span>
    <span class="tag">&lt;list&gt;</span>
      <span class="tag">&lt;value&gt;</span>application_messages<span class="tag">&lt;/value&gt;</span>
    <span class="tag">&lt;/list&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
<span class="tag">&lt;/bean&gt;</span>
</code></pre>

<h2 id="ApplicationContextの取得方法その2">ApplicationContextの取得方法その2</h2>

BeanFactory や ApplicationContext は 直接 <code><span class="keyword">new</span></code> することもできますが、設定ファイルに実装クラスを書いておきたい場合もあるでしょう。そんな場合には、「<b>SingletonBeanFactoryLocator</b>」、「<b>ContextSingletonBeanFactoryLocator</b>」を使えます。詳しくは、<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad</a> さんの 『<a href="http://wiki.bmedianode.com/Spring/?%BC%D9%B0%AD%A4%CASingleton" target="_blank" class="extlink" />邪悪な Singleton</a>』を参考にするといいと思います。

<blockquote>

BeanFactory や ApplicationContext は Singleton オブジェクトとして扱うべきです。大きく2つの理由があります。

<ul><li>サードパティのコードが BeanFactory や ApplicationContext を使って、オブジェクトをインスタンス化したときにも、こちら側で設定した Bean定義を生かせるようにしたい</li>
<li>Webアプリケーションのようなリソースが制限されるアプリのときに、最小のリソースですむようにしたい</li>
</ul>

<cite>本書</cite>

</blockquote>

<code>BeanFactoryLocator</code> は XML 定義ファイルを読み込んでコンテナを生成してくれます。読み込む定義ファイル名は定義されているようです。

<dl><dt>SingletonBeanFactoryLocator</dt>
<dd><p>BeanFactory コンテナを生成するクラス。定義ファイル名は「beanRefFactory.xml」</p></dd>
<dt>ContextSingletonBeanFactoryLocator</dt>
<dd><p>ApplicationContext コンテナを生成するクラス。定義ファイル名は「beanRefContext.xml」</p></dd>
</dl>

このファイルの中に、例えば次のように書きます。

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="tag">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; 
&quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;</span>
<span class="tag">&lt;beans&gt;</span>
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;context&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>&gt;</span>
    <span class="tag">&lt;constructor-arg&gt;</span>
      <span class="tag">&lt;list&gt;</span>
        <span class="tag">&lt;value&gt;</span>bean-factory.xml<span class="tag">&lt;/value&gt;</span>
        <span class="tag">&lt;value&gt;</span>bean-context.xml<span class="tag">&lt;/value&gt;</span>
      <span class="tag">&lt;/list&gt;</span>
    <span class="tag">&lt;/constructor-arg&gt;</span>
  <span class="tag">&lt;/bean&gt;</span>
<span class="tag">&lt;/beans&gt;</span>
</code></pre>

そして、BeanFactory、ApplicationContext を生成するコードはこんな感じになります。

<pre class="code"><code>BeanFactoryLocator locator = ContextSingletonBeanFactoryLocator.getInstance();
BeanFactoryReference ref = locator.useBeanFactory(<span class="literal">"context"</span>);
ApplicationContext context = (ApplicationContext) ref.getFactory();
Person person = (Person)context.getBean(<span class="literal">"personBean"</span>);
ref.release();
</code></pre>

<h2 id="BeanFactoryLocator が必要な理由">BeanFactoryLocator が必要な理由</h2>

<a href="http://wiki.bmedianode.com/Spring/?%BC%D9%B0%AD%A4%CASingleton" target="_blank" class="extlink">Spring Pad 「邪悪なSingleton」</a> の中でこんな部分がありました。

<blockquote>

なぜこういうものが必要かというと，コンテナの外でインスタンス化されたオブジェクトからコンテナを使いたい場合があるから，ということです．世の中にはすでに様々なフレームワークがあって，インスタンス化はそれらにおまかせというのはIoCなコンテナに限った話ではありません．そのようなフレームワークをいろいろと組み合わせて使う場合，あっちでインスタンス化されたオブジェクトからこっちのコンテナでDependency Injectionされたオブジェクトを使いたいということもあるでしょう．そのような場合のために，Spring Frameworkが用意してくれているのが BeanFactoryLocator です．だから"Glue code"なんですね．

<cite><a href="http://wiki.bmedianode.com/Spring/?%BC%D9%B0%AD%A4%CASingleton" target="_blank" class="extlink">Spring Pad 「邪悪なSingleton」</a></cite>

</blockquote>

つまり、SpringFramework の外にあるオブジェクトから、SpringFramework が管理しているオブジェクトに触りたいときに使うのが BeanFactoryLocator というわけです。

<h2 id="Beanのプロパティを別ファイルに定義する方法">Beanのプロパティを別ファイルに定義する方法</h2>

Beanのプロパティを別ファイルに定義しておいて、実行時に設定させたい場合があります。例えば、データベース接続情報など、Bean定義ファイルの中身は直接触らせたくないけど、お客様にデータベースの接続情報を変更して欲しい場合などです。そんなときは、データベースの接続情報だけをリソースファイルとして定義しておき、置換処理を行うことで、Beanのプロパティを設定できます。

<section>

<h4>置換処理でプロパティを設定する</h4>

<pre class="code"><code><span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;propertyConfigurer&quot;</span>
  <span class="attr">class=</span><span class="value">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span>&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;locations&quot;</span>&gt;</span> 
    <span class="tag">&lt;list&gt;</span> 
      <span class="tag">&lt;value&gt;</span>jdbc.properties<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/list&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
 <span class="tag">&lt;/bean&gt;</span> 
  
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;dataSource&quot;</span>  
      <span class="attr">class=</span><span class="value">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>  
      <span class="attr">destroy-method=</span><span class="value">&quot;close&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;driverClassName&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>${jdbc.driverClassName}<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;url&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>${jdbc.url}<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;username&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>${jdbc.username}<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;password&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>${jdbc.password}<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span>     
<span class="tag">&lt;/bean&gt;</span>
</code></pre>

</section>

PropertyPlaceholderConfigurer クラスは、設定ファイル中の 「<b>${置換文字列}</b>」とマッチするキーが、locations で指定したリソースファイルの中にあれば、置換します。結構使えると思います。

<h2 id="メソッドの実行結果をBeanのプロパティに設定する">メソッドの実行結果をBeanのプロパティに設定する</h2>

コンテナ管理される Bean のプロパティに、メソッドの実行結果を設定したい場合があります。例えば、データベースの値であったり、設定ファイルを読み込んだ値だったりするものです。その場合は、<b>org.springframework.beans.factory.config.MethodInvokingFactoryBean</b> という FactoryBean をつかう事ができます。詳しくは、「<a href="http://www.andore.com/money/trans/spring_ref_p4_ja.html#doc1_3.14" target="_blank" class="extlink">メソッド起動の結果にビーンプロパティを設定する</a>」を参考に。

MethodInvoke の実行結果はキャッシュされるようです。キャッシュされないようにするには、setSingleton プロパティに false を設定すればよさそうです。

<h2 id="ハマった点">ハマった点</h2>

<h3>インスタンスの初期化をコンテナの外から渡すには</h3>

コンテナ管理のオブジェクトは、必要なときに生成され、初期化されます。生成時に必要な引数や、初期化時の値は通常 Bean 定義ファイルに書きます。

コンテナ管理されるオブジェクトの初期化に、コンテナ管理されていないオブジェクトを渡したい場合はどうするのでしょうか？例えば、GUI の入力値保持するオブジェクトをコンテナ管理されるオブジェクトの初期化に使いたい場合などです。

おそらく、「<b>コンテナ管理されるオブジェクトをコンテナ管理されないオブジェクトに依存させることは出来ない</b>」はずです。そもそも、DIコンテナで扱うべきものというのは、<a href="http://e-words.jp/w/E382B3E383B3E3839DE383BCE3838DE383B3E38388.html" target="_blank" class="extlink">コンポーネント</a> の単位であるはずです。コンポーネントとして切り出すときの指針として、設定ファイルとして書けるか？というのがあります。GUI の入力は設定ファイルとして書けるはずありませんから、DIで扱うべきものではないと言うのが、僕の意見です。

Seasar2 フレームワークでは、こういう用途にも対応できる機能が備わっています。もしかしたら、SpringFramework にも後のバージョンで可能になるかもしれません。

<section>

<h4>[参考]</h4>

『<a href="http://hamasyou.com/archives/000238">Dependency Injection の乱用！？</a>』

</section>

<h2>参考</h2>

+ Spring Framework の本家です。
<a href="http://www.springframework.org/" target="_blank" class="extlink">Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring Framework の 日本語 Wiki です。大量の情報があります。
<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント (日本語訳)
<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークドキュメント</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring フレームワークに関しての概要です。TECHSCORE さんの記事は読みやすいなぁ (^^ ;
<a href="http://www.techscore.com/tech/Java/Spring/1.html" target="_blank" class="extlink">TECHSCORE - Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring を含めた、軽量コンポーネントのお話です。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">軽快なJava―Better,Faster,Lighter Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ブルース・A. テイトジャスティン ゲットランドBruce A. TateJustin Gehtland岩谷 宏<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311201X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />率直な筆者の経験は必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />シンプル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring の ロッドジョンソンが贈る、J2EE技術者のためのバイブル
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">実践J2EE システムデザイン&業務運用[仮題・予定価格]</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロッド・ジョンソン<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322888&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Spring Freamworkの作者に迫れる唯一の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />坊主にくけりゃ袈裟までにくい?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は充実、ただ経験、印象に頼るところも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに実践まさに必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「現場主義」といったスタンスが根底に貫かれている<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring のロッドジョンソンによる Spring ユーザのための本 (洋書)
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Professional Java Development With The Spring Framework</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/0764574833.01.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Rod JohnsonJuergen HoellerALEF ARENDSENDMITRIY KOPYLENKOTHOMAS RISBERG<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0764574833&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ SpringでWebアプリケーションを作りながら、Springの全体像がわかりやすく解説されています。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Java press (Vol.41)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774122793.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1"><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg" border="0" alt="Spring Framework 覚書き">
-----
KEYWORDS:
Spring,Framework,覚書き,スプリング,フレームワーク,アーキテクチャ,DI,IoC,トランザクション
-----


PING:
TITLE: かごバッグ
URL: http://www.thailandmfr.com/%E3%83%90%E3%83%83%E3%82%B0-%E3%81%8B%E3%81%94%E3%83%90%E3%83%83%E3%82%B0-c-10_19.html
IP: 142.4.210.131
BLOG NAME: かごバッグ
DATE: 01/06/2014 02:22:32 AM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: ミュウミュウ財布
URL: http://www.flurkapelle-boedigheim.com/%E3%83%9F%E3%83%A5%E3%82%A6%E3%83%9F%E3%83%A5%E3%82%A6%E8%B2%A1%E5%B8%83-c-2.html
IP: 142.4.210.131
BLOG NAME: ミュウミュウ財布
DATE: 01/09/2014 12:36:53 PM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: バッグ
URL: http://www.naplestransportationjobs.com/%E3%83%A9%E3%83%AD%E3%83%BC%E3%83%AD-%E3%83%90%E3%83%83%E3%82%B0-c-203_204.html
IP: 142.4.210.131
BLOG NAME: バッグ
DATE: 01/14/2014 10:06:52 PM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: シャネル ネックレス
URL: http://www.shialabeoufweb.net/%E3%82%B7%E3%83%A3%E3%83%8D%E3%83%AB-%E3%82%B7%E3%83%A3%E3%83%8D%E3%83%AB-%E3%83%8D%E3%83%83%E3%82%AF%E3%83%AC%E3%82%B9-c-13_101.html
IP: 142.4.210.131
BLOG NAME: シャネル ネックレス
DATE: 01/17/2014 04:11:11 PM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: プ ラダ クリスマスセール
URL: http://www.ejoysoft.com/
IP: 142.4.210.131
BLOG NAME: プ ラダ クリスマスセール
DATE: 01/19/2014 02:23:04 PM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: www.dannisblog.com
URL: http://www.dannisblog.com/
IP: 142.4.210.131
BLOG NAME: www.dannisblog.com
DATE: 01/22/2014 04:26:56 PM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: クラッチバッグ
URL: http://www.thailandmfr.com/%E3%83%90%E3%83%83%E3%82%B0-%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%83%90%E3%83%83%E3%82%B0-c-10_12.html
IP: 142.4.210.131
BLOG NAME: クラッチバッグ
DATE: 01/23/2014 10:26:00 AM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: シャネル 二つ折り・三つ折り財布
URL: http://www.naplestransportationjobs.com/%E3%82%B7%E3%83%A3%E3%83%8D%E3%83%AB-%E3%82%B7%E3%83%A3%E3%83%8D%E3%83%AB-%E4%BA%8C%E3%81%A4%E6%8A%98%E3%82%8A%E3%83%BB%E4%B8%89%E3%81%A4%E6%8A%98%E3%82%8A%E8%B2%A1%E5%B8%83-c-13_28.html
IP: 142.4.210.131
BLOG NAME: シャネル 二つ折り・三つ折り財布
DATE: 01/23/2014 10:43:44 PM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: マークバイマークジェイコブス
URL: http://www.dannisblog.com/%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%90%E3%82%A4%E3%83%9E%E3%83%BC%E3%82%AF%E3%82%B8%E3%82%A7%E3%82%A4%E3%82%B3%E3%83%96%E3%82%B9-c-31.html
IP: 142.4.210.131
BLOG NAME: マークバイマークジェイコブス
DATE: 01/24/2014 10:53:00 PM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: コインケース・カードケース
URL: http://www.outdoorheatingsolutions.com/%E3%82%B0%E3%83%83%E3%83%81-%E3%82%B3%E3%82%A4%E3%83%B3%E3%82%B1%E3%83%BC%E3%82%B9%E3%83%BB%E3%82%AB%E3%83%BC%E3%83%89%E3%82%B1%E3%83%BC%E3%82%B9-c-15_58.html
IP: 142.4.210.131
BLOG NAME: コインケース・カードケース
DATE: 01/28/2014 07:55:15 AM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: バーバリー コート
URL: http://www.curiouslycool.com/
IP: 142.4.210.131
BLOG NAME: バーバリー コート
DATE: 01/29/2014 04:21:01 AM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: バーバリー トレンチコート・コレクション
URL: http://www.curiouslycool.com/%E3%83%88%E3%83%AC%E3%83%B3%E3%83%81%E3%82%B3%E3%83%BC%E3%83%88-%E3%83%88%E3%83%AC%E3%83%B3%E3%83%81%E3%82%B3%E3%83%BC%E3%83%88%E3%83%BB%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-c-5_6.html
IP: 142.4.210.131
BLOG NAME: バーバリー トレンチコート・コレクション
DATE: 01/30/2014 10:57:01 PM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: ブルガリ
URL: http://www.naplestransportationjobs.com/%E3%83%96%E3%83%AB%E3%82%AC%E3%83%AA-c-133.html
IP: 142.4.210.131
BLOG NAME: ブルガリ
DATE: 02/02/2014 12:16:26 AM
Spring Framework 覚書き - IoC - それはBooks
-----

PING:
TITLE: www.midi-cable.net
URL: http://www.midi-cable.net/gucci-%E3%83%99%E3%83%93%E3%83%BC%E3%83%BB%E3%82%AD%E3%83%83%E3%82%BA-c-15_123.html
IP: 142.4.210.131
BLOG NAME: www.midi-cable.net
DATE: 02/03/2014 09:01:58 PM
Spring Framework 覚書き - IoC - それはBooks
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Spring Framework 覚書き - JDBC抽象化
BASENAME: spring_framework_覚書き_jdbc抽象化
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/04/2004 01:35:24 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764558315/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg"  border="0" /></a>
</p>

アメリカではほとんどデフェクトスタンダードとなっている「<a href="http://www.springframework.org/" target="_blank" class="extlink"><b>Spring Framework</b></a>」の覚書きです。Spring は簡単に言うと、<abbr title="Inversion of Control">IoC (制御の反転)</abbr>、またの名を <abbr title="Dependency Injection">DI (依存性注入)</abbr> という仕組みを取り入れた軽量コンテナです。

Springは JDBCを抽象化した層を持っています。JDBCを使ったプログラミングで、共通化できる部分や、煩雑な部分をすっきりとした統一的な方法でアクセスできる手段を提供してくれます。

Springの詳細については、ほかにもっとよいサイト(<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント</a>や<a href="http://www.andore.com/money/trans/spring_ja.html" target="_blank" class="extlink">Springフレームワークの紹介</a>)があるので、そちらを参考にしてください。ここでは、Springを使っていて、ハマった点や気になった点などをメモしていこうと思います。随時更新していくつもりです。間違っている可能性が高いので、気になる点があればコメントをお願いします。

<section>

<h4>参考</h4>

<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad - Wiki</a>

<a href="http://direct.idg.co.jp/detail_1.msp?id=1066&class=10005&n=2" target="_blank" class="extlink">JavaWorld 7月号 2004年</a>

</section>
-----
EXTENDED BODY:
<h2>JDBC抽象化フレームワーク</h2>

<ul><li><a href="#JDBC抽象化層とは？">JDBC抽象化層とは？</a></li>
<li><a href="#JDBC抽象化層で使われる主な クラス / インターフェース">JDBC抽象化層で使われる主な クラス / インターフェース</a></li>
<li><a href="#JdbcTemplateを使った基本的なSQL文の実行">JdbcTemplateを使った基本的なSQL文の実行</a></li>
<li><a href="#DataSource の設定の仕方">DataSource の設定の仕方</a></li>
<li><a href="#SqlFunction クラスを使った単一問い合わせのサンプル">SqlFunction クラスを使った単一問い合わせのサンプル</a></li>
</ul>

<h2 id="JDBC抽象化層とは？">JDBC抽象化層とは？</h2>

Springは、JDBCをラップした抽象化層を提供しています。これは、JDBCを使ってプログラミングを行う際に必ず必要となる、Connectionのオープン / クローズや Statement、ResultSet の生成と破棄をテンプレート化して提供するものであると考えてよいと思います。

もう一つは、<em>SQLException を使わないで永続化処理が書ける</em>というものです。通常、データベースへの処理は SQLException を明示的に処理しなければなりません。しかし、実際のアプリケーションでSQLExceptionをキャッチして処理するということはあまりありません。なぜなら、ほとんどのSQLExceptionの原因はアプリケーション内からでは復帰が難しいものだからです。

JDBC抽象化層は、SQLException よりももっと抽象化した<em>実行時例外である org.springframework.dao.DataAccessException</em>を扱います。実行時例外であるため、開発者は無意味な SQLException をわざわざキャッチしなくてすむようになります。アプリケーション側で復帰できそうな例外に関してはキャッチして処理することも可能です。

JDBC抽象化層では、テーブルに対する検索(SELECT)や更新(INSERT / UPDATE / DELETE)を一つのオブジェクトとして定義する方法が提供されています。一つのSQL文に対して、一つのクラスを対応させる感じです。クラス数が非常に多くなっちゃいそうですね・・・。

<h2 id="JDBC抽象化層で使われる主な クラス / インターフェース">JDBC抽象化層で使われる主な クラス / インターフェース</h2>

JDBC抽象化層で使われる主なクラスとインターフェースです。

<h3>org.springframework.dao.DataAccessException</h3>

JDBC抽象化層で使われるトップレベルのデータアクセス実行時例外クラス。開発者は必要であれば、このクラスのサブクラスを適切に処理することができます。

<h3>org.springframework.jdbc.datasource.DriverManagerDataSource</h3>

Beanのプロパティを使ってJDBCドライバ構成を組み立てます。このクラスは、<strong>常に新しいコネクションオブジェクトを返します</strong>。既知のサブクラスに SingleConnectionDataSource クラスがあります。

このクラスは、常に同一のコネクションを使いまわします。マルチスレッド環境では使えません。

<section>

<h4>Bean定義ファイルで宣言するときに設定する属性</h4>

<dl><dt>driverClassName</dt><dd>JDBCドライバの完全クラス名です。</dd>
<dt>url</dt><dd>データベースへのURLです。</dd>
<dt>username</dt><dd>データベースへつなぐユーザ名</dd>
<dt>password</dt><dd>データベースへつなぐパスワード</dd>
</dl>

</section>

接続設定を直接書くのではなくて、設定ファイルに定義しておいて、その値を読み込むといったことも出来ます。詳しくは 『<a href="http://www.andore.com/money/trans/spring_ref_p4_ja.html#doc1_3.6.2" target="_blank" class="extlink">Spring-Java/J2EE アプリケーションフレームワークドキュメント (3.6.2 PropertyPlaceholderConfigurer)</a>』をどうぞ。

<h3>org.springframework.jdbc.object.MappingSqlQuery</h3>

テーブルに関する検索処理を行う、再利用可能な問い合わせクラスです。サブクラスでは、mapRow メソッドによって、 ResultSet を オブジェクトに変換する処理が書けます。オブジェクト変換時に、SQL文に設定したパラメータ(PreparedStatementのパラメータ)が必要な場合には、org.springframework.jdbc.object.MappingSqlQueryWithParameters を使用します。

SqlQuery#findObject メソッドは、ユニークなオブジェクトを返すメソッドとなります。そのため、SQL文の結果がたった一つになるようにしなければなりません。主キーを指定するSQL文を作るのが一般的な使い方でしょう。

mapRow メソッドは、実行したSQL文の結果セットが存在する場合(レコードがある場合)のみ呼び出されます。

<dl>
<dt>findObject メソッド</dt><dd>SELECT文を実行します。実行結果が一つだけ存在する場合に使います。</dd>
<dt>execute メソッド</dt><dd>SELECT文を実行します。実行結果が複数ある場合に使います。</dd>
</dl>

<h3>org.springframework.jdbc.object.SqlUpdate</h3>

SQLの更新を表すクラスです。MappingSqlQueryと同様に再利用な可能(PreparedStatement式)なオブジェクトになります。update / execute メソッドを呼び出すことで、更新処理(INSERT, UPDATE, DELETE)が実行されます。

<dl><dt>update メソッド</dt><dd>INSERT文、UPDATE文、DELETE文を実行します。</dd></dl>

<h3>org.springframework.jdbc.core.JdbcTemplate</h3>

JDBC抽象化層のコアクラスです。通常のSQLクエリを抽象化します。RowCallbackHandler を使って、ResultSet をオブジェクトに変換する処理が書けます(<a href="#JdbcTemplateを使った基本的なSQL文の実行">サンプルコード</a>参照)。

<dl>
<dt>query メソッド</dt>
<dd><p>問い合わせSQL文を発行します。引数に現れる <code>ResultSetExtractor</code>、<code>RowCallbackHandler</code>、<code>RowMapper</code> はいづれも ResultSet に何らかの処理を加えられるものです。通常、オブジェクトへの変換を行います。</p></dd>
<dt>execute メソッド</dt>
<dd><p>あらゆる種類のSQL文を実行します。引数にとるコールバックインターフェースは、execute メソッドが呼ばれたときに呼び出されます。</p></dd>
<dt>update メソッド</dt>
<dd><p>更新系(INSERT, UPDATE, DELETE) のSQL文を発行します。</p></dd>
</dl>

<h3>org.springframework.jdbc.core.support.JdbcDaoSupport</h3>

このクラスは、サブクラスに DataSource を提供できるようにしたクラスです。Bean定義書で DataSource の設定を書いておくと、IoCコンテナが自動的に DataSource を生成してセットしておいてくれます。サブクラスで JdbcTemplate を利用することが期待されているみたいです。

<h3>org.springframework.jdbc.object.SqlFunction</h3>

単一の結果を返す、SQL問い合わせのラッパークラスです。例えば、テーブルレコードのカウントをとりたい場合などに利用できます。サンプルコードは後述。基本的には SqlFunction の返す結果は int 型になるようです。他の方が使いたい場合には、runGeneric() メソッドを呼び出せばいいです。

<h2 id="JdbcTemplateを使った基本的なSQL文の実行">JdbcTemplateを使った基本的なSQL文の実行</h2>

JdbcTemplate クラスを使ったSQL文の実行方法です。ここでは、RowCallbackHandler クラスを使って、検索結果をオブジェクトに変換する処理までやっています。更新系の処理なら、JdbcTemplate オブジェクトを作成して、execute メソッドの引数にSQL文を渡してやるだけで実行されるようです。

<section>

<h4>JdbcTemplateの例</h4>

<pre class="code"><code><span class="keyword">public</span> List findPersons() <span class="keyword">throws</span> DataAccessException {
  JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(getDataSource());
  <span class="keyword">final</span> List result = <span class="keyword">new</span> ArrayList();
  template.query(<span class="literal">"select ID, NAME, AGE from PERSON"</span>, 
                  <span class="keyword">new</span> RowCallbackHandler() {
    <span class="keyword">public</span> <span class="keyword">void</span> processRow(ResultSet rs) <span class="keyword">throws</span> SQLException {
      Person p = <span class="keyword">new</span> Person(rs.getBigDecimal(1));
      p.setName(rs.getString(2));
      p.setAge(rs.getBigDecimal(3));
      result.add(p);
    }
  });
  <span class="keyword">return</span> result;
}
 
<span class="keyword">public</span> List findPersonsAsMap() {
  <span class="comment">/*
   * List の要素は Map オブジェクト
   * key が 列名 で value が値
   * [ {ID=1, NAME=Taro, AGE=22}, {ID=2, NAME=Hanako,AGE=25} ]
   */</span>
  JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate(getDataSource());
  List result = jt.queryForList(<span class="literal">"select * from PERSON"</span>);
  <span class="keyword">return</span> result;
}
 
<span class="keyword">public</span> <span class="keyword">void</span> addPerson(BigDecimal id, String name, BigDecimal age) {
  JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate(getDataSource());
  jt.update(<span class="literal">"insert into PERSON (ID, NAME, AGE) "</span> +
            <span class="literal">"  values (?, ?, ?) "</span>,
            <span class="keyword">new</span> Object[] {id, name, age});
}
</code></pre>

</section>

<h2 id="DataSource の設定の仕方">DataSource の設定の仕方</h2>

JdbcDaoSupport クラスには getDataSource() というデータ接続を返すメソッドが用意されています。DataSource の設定は、Bean定義に例えば次のように書きます。

<section>

<h4>DataSourceのBean定義例</h4>

<pre class="code"><code><span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;dataSource&quot;</span> 
    <span class="attr">class=</span><span class="value">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span>
 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;driverClassName&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>org.hsqldb.jdbcDriver<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;url&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>jdbc:hsqldb:hsql://localhost<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;username&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>sa<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;password&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span><span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>    
<span class="tag">&lt;/bean&gt;</span>
</code></pre>

</section>

<h2 id="SqlFunction クラスを使った単一問い合わせのサンプル">SqlFunction クラスを使った単一問い合わせのサンプル</h2>

SqlFunction クラスを使うと、単一の問い合わせを表現することができます。通常、単一問い合わせの結果は int 型になるみたいです。複数件の結果が返ってきたり、オブジェクトに変換したりする処理が発生する場合には、 JdbcTemplate の例のような方法を使います。

<section>

<h4>テーブルのレコード数を返す例</h4>

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">int</span> countRows() {
  SqlFunction sf = 
    <span class="keyword">new</span> SqlFunction(dataSource, <span class="literal">"select count(*) from mytable"</span>);
  sf.compile();
  <span class="keyword">return</span> sf.run();
}
</code></pre>

</section>

<h2>参考</h2>

+ Spring Framework の本家です。
<a href="http://www.springframework.org/" target="_blank" class="extlink">Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring Framework の 日本語 Wiki です。大量の情報があります。
<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント (日本語訳)
<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークドキュメント</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring フレームワークに関しての概要です。TECHSCORE さんの記事は読みやすいなぁ (^^ ;
<a href="http://www.techscore.com/tech/Java/Spring/1.html" target="_blank" class="extlink">TECHSCORE - Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring を含めた、軽量コンポーネントのお話です。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">軽快なJava―Better,Faster,Lighter Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ブルース・A. テイトジャスティン ゲットランドBruce A. TateJustin Gehtland岩谷 宏<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311201X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />率直な筆者の経験は必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />シンプル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring の ロッドジョンソンが贈る、J2EE技術者のためのバイブル
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">実践J2EE システムデザイン&業務運用[仮題・予定価格]</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロッド・ジョンソン<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322888&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Spring Freamworkの作者に迫れる唯一の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />坊主にくけりゃ袈裟までにくい?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は充実、ただ経験、印象に頼るところも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに実践まさに必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「現場主義」といったスタンスが根底に貫かれている<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring のロッドジョンソンによる Spring ユーザのための本 (洋書)
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Professional Java Development With The Spring Framework</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/0764574833.01.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Rod JohnsonJuergen HoellerALEF ARENDSENDMITRIY KOPYLENKOTHOMAS RISBERG<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0764574833&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ SpringでWebアプリケーションを作りながら、Springの全体像がわかりやすく解説されています。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Java press (Vol.41)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774122793.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1"><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg" border="0" alt="Spring Framework 覚書き">
-----
KEYWORDS:
Spring,Framework,覚書き,スプリング,フレームワーク,アーキテクチャ,DI,IoC,JDBC,抽象化
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Spring Framework 覚書き - トランザクション管理
BASENAME: spring_framework_-
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/04/2004 01:38:38 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764558315/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg"  border="0" /></a>
</p>

アメリカではほとんどデフェクトスタンダードとなっている「<a href="http://www.springframework.org/" target="_blank" class="extlink"><b>Spring Framework</b></a>」の覚書きです。Spring は簡単に言うと、<abbr title="Inversion of Control" >IoC (制御の反転)</abbr>、またの名を <abbr title="Dependency Injection">DI (依存性注入)</abbr> という仕組みを取り入れた軽量コンテナです。

Springはとても抽象化した方法で、トランザクション管理を行います。抽象化というのは実装に依存していないという意味です。アプリケーションサーバが持つトランザクション機能や、 JDBCのようなリソースを使った DataSource に関しても、共通の方法でトランザクション管理を提供しています。

Springの詳細については、ほかにもっとよいサイト(<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント</a>や<a href="http://www.andore.com/money/trans/spring_ja.html" target="_blank" class="extlink">Springフレームワークの紹介</a>)があるので、そちらを参考にしてください。ここでは、Springを使っていて、ハマった点や気になった点などをメモしていこうと思います。随時更新していくつもりです。間違っている可能性が高いので、気になる点があればコメントをお願いします。

<section>

<h4>参考</h4>

<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad - Wiki</a>

<a href="http://direct.idg.co.jp/detail_1.msp?id=1066&class=10005&n=2" target="_blank" class="extlink">JavaWorld 7月号 2004年</a>

</section>
-----
EXTENDED BODY:
<h2>トランザクション管理</h2>

<ul><li><a href="#トランザクション管理機能">トランザクション管理機能</a></li></ul>

<h2 id="トランザクション管理機能">トランザクション管理機能</h2>

Springのトランザクション機能は、トランザクションマネジャというものが管理します。マネジャの設定もBean定義書で行います。Springのトランザクションマネジャは、<abbr title="Java Transaction API">JTA</abbr> をサポートしていない DataSource に対しても宣言的なトランザクションをかけることが出来る。

宣言的なトランザクションとは、トランザクション境界(トランザクションの開始と終了)を宣言して、<abbr title="Plain Old Java Object">POJO</abbr> のメソッドにトランザクション処理を行うことが出来るものです。例外が発生した場合に自動的にロールバックを行わせるものだと考えてください。

<section>

<h4>[参考]</h4>
<a href="http://wiki.bmedianode.com/Spring/?TransactionProxyFactoryBean" target="_blank" class="extlink">Spring Pad - TransactionProxyFactoryBean</a>

<h3>org.springframework.transaction.PlatformTransactionManager</h3>

Springのトランザクションマネジャの基本インターフェースのようです。

<dl><dt>グローバルトランザクション</dt>
<dd>リソースを使わないトランザクション。JTAを使ってアプリケーションサーバが処理します。</dd>
<dt>ローカルトランザクション</dt>
<dd>JDBCなどのリソースを使用したトランザクション処理。</dd>
</dl>

Springは、グローバルトランザクションとローカルトランザクションを透過的に扱うためにこのインターフェースを用意しています。

<h3>org.springframework.transaction.TransactionDefinition</h3>

<section>

<h4>トランザクション設定を定義するインターフェース</h4>

<dl><dt>PROPAGATION_REQUIRED</dt>
<dd>トランザクションを実行する。</dd>
<dt>PROPAGATION_REQUIRES_NEW</dt>
<dd>メソッド呼出し毎に新しいトランザクションを実行する。</dd>
<dt>PROPAGATION_MANDATORY</dt>
<dd>トランザクションを開始している必要がある。</dd>
<dt>PROPAGATION_NOT_SUPPORTED</dt>
<dd>トランザクションの開始に関わらず、メソッド呼び出しはトランザクションに含まれない。</dd>
<dt>PROPAGATION_SUPPORTS</dt>
<dd>トランザクションが開始されていれば、メソッドが実行される。開始されていなければ実行されない。</dd>
<dt>PROPAGATION_NEVER </dt>
<dd>トランザクションに参加しない。</dd>
</dl>

</section>

コミット対象にする例外を追加するには、トランザクション属性に 「+《例外の型》」 をつける。ロールバック対象の例外を追加するには 「-《例外の型》」 をつける。

<pre>PROPAGATION_REQUIRED, +java.io.IOException</pre>

<h3>org.springframework.jdbc.datasource.DataSourceTransactionManager</h3>

一つのDataSourceのためのトランザクション実装です。DataSourceごとに一つのスレッドが対応します。JDBCのConnectionを利用してトランザクションを制御します。

<h2>参考</h2>

+ Spring Framework の本家です。
<a href="http://www.springframework.org/" target="_blank" class="extlink">Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring Framework の 日本語 Wiki です。大量の情報があります。
<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント (日本語訳)
<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークドキュメント</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring フレームワークに関しての概要です。TECHSCORE さんの記事は読みやすいなぁ (^^ ;
<a href="http://www.techscore.com/tech/Java/Spring/1.html" target="_blank" class="extlink">TECHSCORE - Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring を含めた、軽量コンポーネントのお話です。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">軽快なJava―Better,Faster,Lighter Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ブルース・A. テイトジャスティン ゲットランドBruce A. TateJustin Gehtland岩谷 宏<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311201X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />率直な筆者の経験は必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />シンプル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring の ロッドジョンソンが贈る、J2EE技術者のためのバイブル
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">実践J2EE システムデザイン&業務運用[仮題・予定価格]</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロッド・ジョンソン<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322888&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Spring Freamworkの作者に迫れる唯一の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />坊主にくけりゃ袈裟までにくい?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は充実、ただ経験、印象に頼るところも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに実践まさに必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「現場主義」といったスタンスが根底に貫かれている<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring のロッドジョンソンによる Spring ユーザのための本 (洋書)
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Professional Java Development With The Spring Framework</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/0764574833.01.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Rod JohnsonJuergen HoellerALEF ARENDSENDMITRIY KOPYLENKOTHOMAS RISBERG<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0764574833&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ SpringでWebアプリケーションを作りながら、Springの全体像がわかりやすく解説されています。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Java press (Vol.41)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774122793.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1"><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg" border="0" alt="Spring Framework 覚書き">
-----
KEYWORDS:
Spring,Framework,覚書き,スプリング,フレームワーク,アーキテクチャ,DI,IoC,トランザクション管理,JTA
-----

COMMENT:
AUTHOR: kakuda
EMAIL: kakuda.naoyuki@members.co.jp
IP: 61.199.34.121
URL: http://secure.ddo.jp/~kaku/tdiary/
DATE: 11/05/2004 11:47:17 AM
without EJBの読書会を行っています。ご興味があれば是非。
<a href="http://groups.yahoo.co.jp/group/without-ejb/" rel="nofollow">http://groups.yahoo.co.jp/group/without-ejb/</a>
-----

COMMENT:
AUTHOR: 管理人
EMAIL: hamasyou_sh@yahoo.co.jp
IP: 219.163.55.122
URL: 
DATE: 11/05/2004 10:46:13 PM
ご案内ありがとうございます。
早速入会しました。
今後とも宜しくお願いします。
-----

COMMENT:
AUTHOR: kakuda
EMAIL: kakuda.naoyuki@members.co.jp
IP: 61.199.34.121
URL: http://secure.ddo.jp/~kaku/tdiary/
DATE: 11/08/2004 04:57:05 PM
入会ありがとうございます〜
13日に第3回を行いますので、ご都合宜しければ是非ゼヒご参加くださいな。
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Spring Framework 覚書き - MVCフレームワーク
BASENAME: spring_framework_-_mvc
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/06/2004 02:00:28 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764558315/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg" border="0" /></a>
</p>

アメリカではほとんどデフェクトスタンダードとなっている「<a href="http://www.springframework.org/" target="_blank" class="extlink"><b>Spring Framework</b></a>」の覚書きです。Spring は簡単に言うと、<abbr title="Inversion of Control">IoC (制御の反転)</abbr>、またの名を <abbr title="Dependency Injection">DI (依存性注入)</abbr> という仕組みを取り入れた軽量コンテナです。

Springは MVCフレームワークを提供しています。Springのフレームワークは、すべてインターフェースベースになっているので、単一継承の JAVA にとっては非常にありがたいものです。Spring MVC の View には、JSP の他、Velocity、XSLT、JSFなどといったさまざまな技術が使えます。

Validation 機能は、Web システムにとって非常に重要なものとなっています。Springでは、 Validation は Web パッケージと切り離されているので、単体テストも簡単に出来るようになっています。

Springの詳細については、ほかにもっとよいサイト(<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント</a>や<a href="http://www.andore.com/money/trans/spring_ja.html" target="_blank" class="extlink">Springフレームワークの紹介</a>)があるので、そちらを参考にしてください。ここでは、Springを使っていて、ハマった点や気になった点などをメモしていこうと思います。随時更新していくつもりです。間違っている可能性が高いので、気になる点があればコメントをお願いします。

<section>

<h4>参考</h4>

<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad - Wiki</a>

<a href="http://direct.idg.co.jp/detail_1.msp?id=1066&class=10005&n=2" target="_blank" class="extlink">JavaWorld 7月号 2004年</a>

</section>
-----
EXTENDED BODY:
<h2>Spring MVC フレームワーク</h2>

<ul><li><a href="#Spring MVC フレームワークとは">Spring MVC フレームワークとは</a></li>
<li><a href="#Spring MVC で使われる主なクラス / インターフェース">Spring MVC で使われる主なクラス / インターフェース</a></li>
<li><a href="#コントローラ・サーブレットの設定 (web.xml)">コントローラ・サーブレットの設定 (web.xml)</a></li>
<li><a href="#ModelAndView のサンプルコード">ModelAndView のサンプルコード</a></li>
<li><a href="#ViewResolverの例">ViewResolverの例</a></li>
<li><a href="#Validateを使った妥当性チェックの方法">Validateを使った妥当性チェックの方法</a></li>
<li><a href="#Bind を使ったエラーメッセージの表示方法">Bind を使ったエラーメッセージの表示方法</a></li>
<li><a href="#型変換時のエラーメッセージを独自のメッセージにする方法">型変換時のエラーメッセージを独自のメッセージにする方法</a></li>
<li><a href="#独自の型変換を使う方法">独自の型変換を使う方法</a></li>
<li><a href="#Command コントローラ一覧">Command コントローラ一覧</a></li>
<li><a href="#コントローラマッピング">コントローラマッピング</a></li>
<li><a href="#ハマった点">ハマった点</a></li>
<li><a href="#Spring MVC フレームワークに出てくる用語">Spring MVC フレームワークに出てくる用語</a></li>
</ul>

<h2 id="Spring MVC フレームワークとは">Spring MVC フレームワークとは</h2>

Spring MVCは、IoC コンテナをベースにした、WebアプリケーションのためのMVCアーキテクチャです。IoCコンテナをベースにしているので、設定は定義ファイルに書くことになります。

Spring MVC が使用する定義ファイルは、WEB-INFフォルダの直下に 「<em>《サーブレット名》-servlet.xml</em>」という名前で作成します。《サーブレット名》は web.xml で設定した名前となります。(今後は、便宜的に 「Web アプリケーション定義ファイル」と呼びます。)

Spring MVC の基本的な処理の流れは以下のようになります。

<pre>
リクエストを受け取る （コントローラーサーブレット）
　　　　　　↓
転送先のコントローラを決定する （ハンドラマッピング）
　　　　　　↓
ビジネスロジックを呼び出す （コントローラ）
　　　　　　↓
ビジネスロジックを呼び出して「モデル」に結果をセットする （ビジネスロジック）
　　　　　　↓
モデルと、それを表示するビュー名のセット （モデル＆ビュー）
　　　　　　↓
ビュー名からビューを解決する （ビューリゾルバ）
　　　　　　↓
モデルの結果を表示する （ビュー）
</pre>

Spring MVC のアーキテクチャは非常に柔軟で、プラグイン形式でワークフローを制御したり、Validation を追加したりすることが出来ます。Web アプリケーション定義ファイルに定義された ID を使って Bean を指定することでプラグインします。

<h2 id="Spring MVC で使われる主なクラス / インターフェース">Spring MVC で使われる主なクラス / インターフェース</h2>

Spring MVC を利用する場合に使われる主なクラスやインターフェースです。

<h3>org.springframework.web.servlet.DispatcherServlet</h3>

コントローラサーブレットの基本クラスです。アダプタクラス設定することで、さまざまなワークフローを行うことが出来ます。デフォルトの設定クラスは以下のようになっています。

<dl>
<dt>HandlerMapping</dt>
<dd>
<p>リクエストとコントローラのマッピングを保持します。デフォルトの設定は BeanNameUrlHandlerMappingです。このクラスは「/」で始まるBean名とURLをマッピングします。多くの場合、SimpleUrlHandlerMapping クラスを変わりに使います。</p>
</dd>
<dt>HandlerAdapter</dt>
<dd><p>ワークフローを制御するために設定されるもの(たぶん)です。デフォルトは SimpleControllerHandlerAdapter です。</p></dd>
<dt>HandlerExceptionResolver</dt>
<dd><p>例外からエラーページビューを解決するためのクラスです。デフォルトは設定されていません（none）。</p></dd>
<dt>ViewResolver</dt>
<dd><p>ビューと名前をマッピングさせるものです。 例えば、 prefix="/WEB-INF/jsp"  suffix=".jsp"  viewname="test"  の場合、/WEB-INF/jsp/test.jsp  というビューを参照することになります。</p>

<p><em>JSPファイルは、WEB-INF 以下のフォルダに置くことをおすすめします。</em>こうすることで、外部から直接アクセスが出来なくなります。コントローラを経由しなければファイルが読めないので、セキュリティ的にも非常に効果的です。</p>

<p>デフォルトは InternalResourceViewResolver を使います。このクラスは、実際にビューの在る無しに関わらず、名前からビューを解決することが出来ます。</p></dd>
<dt>MultipartResolver</dt>
<dd><p>マルチパートのリクエストを処理するものです。「multipartResolver」という名前でBean定義を設定します。デフォルトは設定されていません（none）。</p></dd>
<dt>LocaleResolver</dt>
<dd><p>Webベースロケール(?)を受け付けるかどうかを設定します。デフォルトは AcceptHeaderLocaleResolver クラスです。このクラスは、セッション、クッキーなどを受け付けます。おそらく、ワークフローを処理する条件か何かになると思います。「localeResolver」という名前でBean定義を設定します。</p></dd>
<dt>ThemeResolver</dt>
<dd><p>テーマを受け付けるかどうかを設定します。おそらく、ワークフローを処理する条件か何かだと思います。 「themeResolver」という名前でBean定義を設定します。デフォルトは FixedThemeResolver クラスです。</p></dd>
</dl>

<h3>org.springframework.web.servlet.mvc.Controller</h3>

リクエストとレスポンスを引数にとるコントローラの基本インターフェースです。サーブレットとほとんど同じで、Struts の Action クラスのようなものです。このクラスは、複数のHTTPリクエストで処理できるように、スレッドセーフでなければなりません。

リクエストを受け取ったあと、ロケールやテーマを元にワークフローが決定されます。そして、適切なコントローラが見つかると、handleRequest メソッドが呼び出されます。Webアプリケーションのために、標準的な機能を持つコントローラが用意されています。

<dl>
<dt>org.springframework.web.servlet.mvc.AbstractController</dt>
<dd><a href="http://hamasyou.com/archives/000173">Template Method パターン</a>を利用した、便利なコントローラ抽象クラスです。

<section>

<h4>【特徴的な機能】</h4>

<dl>
<dt>Generation of Caching Headers</dt>
<dd><p>世代別キャッシュヘッダーを備えています。指定秒内の同じリクエストに対してはキャッシュされた結果を返します。</p></dd>
<dt>GET/POST のサポート切り替え</dt>
<dd><p>GET/POST のサポートを切り替えます。POST メソッドは処理するのに、GET メソッドはエラーにするといったことが出来ます。</p></dd>
</dl>

</section>
    
<section>

<h4>【設定可能な項目(Web アプリケーション定義ファイルに書く)】</h4>

<dl>
<dt>supportedMethods</dt>
<dd><p>サポートするメソッド(GET, POST, PUT)。カンマ(,)で区切って指定する(例： GET,POST)。デフォルトは『GET,POST』</p></dd>
<dt>requireSession</dt>
<dd><p>セッションの存在をチェックするかどうか(true, false)。この設定を true にしておけば、セッション切れをチェックできます。セッションが切れていたときには ServletException がスローされます。デフォルトは『false』</p></dd>
<dt>cacheSeconds</dt>
<dd><p>キャッシュヘッダーを利用する秒数(数値)。設定した秒内の同じリクエストに対しては、キャッシュされた結果を返します。デフォルトは『-1 (キャッシュを利用しない)』</p></dd>
</dl>

</section>
    
<section>

<h4>【ワークフロー】</h4>

<ol><li>メソッドがサポートされているかのチェック</li>
<li>セッションが要求されているかどうかのチェック</li>
<li>キャッシュヘッダーのチェック</li>
<li>コントローラ処理の呼び出し</li>
</ol>

</section>
</dd>
<dt>org.springframework.web.servlet.mvc.AbstractCommandController</dt>
<dd><p>リクエストからコマンドオブジェクトを作成して、リクエストパラメータをセットするコントローラです。リクエストパラメータを Bean クラスに設定するために利用できます。その際、Validation を使ってパラメータの妥当性チェックを行うことが出来ます。Validation の結果は Errors オブジェクトに格納します。</p>

<p>リクエストパラメータが 「firstName」であった場合、コマンドオブジェクトの「setFirstName」メソッドが呼び出されます。ネスとしたパラメータ、「address.city」といった形も受け入れられます(getAddress().setCity())。</p>

<p>パラメータを独自型や特殊型に変換することも出来ます。その際は、PropertyEditor クラスを利用します。</p>

<section>

<h4>[参考]</h4>

<a href="http://wiki.bmedianode.com/Spring/?PropertyEditor%A4%C0%A4%E8" target="_blank" class="extlink">Spring Pad - PropertyEditorだよ</a>

</section>

<section>

<h4>【設定可能な項目】</h4>

<dl><dt>commandName</dt>
<dd><p>リクエストとコマンドオブジェクトを結びつけるときに使う名前(文字列)。デフォルトは『command』。</p></dd>
<dt>commandClass</dt>
<dd><p>コマンドとして使われる完全クラス名(文字列)。デフォルトは『null』。</p></dd>
<dt>validator</dt>
<dd><p>妥当性チェックで使われる名前(Bean 参照)。リストも受け取れます。複数のバリデーションクラスを指定する場合は 「validators」を使います。設定する値は、「&lt;ref bean=&quot;ValidatorID&quot;/&gt;」のように書きます。デフォルトは『null』です。</p></dd>
<dt>validateOnBinding</dt>
<dd><p>リクエストと結び付けられたバリデータを有効にするかどうか(true, false)。デフォルトは『true』。</p></dd>
</dl>

</section>

<p>通常は、このクラス使わずに AbstractFormController を代わりに使います。</p>
</dd>
<dt>org.springframework.web.servlet.mvc.AbstractFormController</dt>
<dd>
<p>リクエストパラメータを自動的に フォームオブジェクトに設定するコントローラです。 Struts の Action とほとんど同じものだと思います。フォームオブジェクトは、 Struts の ActionForm と同じくただの JavaBean です。リクエスト毎に新しいフォームオブジェクトを作成するか、毎回同じフォームオブジェクトを使いまわすかを決められるようです。フォームが送信されたかどうかは 「<em>isFormSubmission(HttpServletRequest)</em>」メソッドの戻り値で判断されます。デフォルトは POST で呼び出された場合に、送信とみなされます。オーバーライドして独自にカスタマイズも可能です(コマンド名が送信されたらフォーム送信とみなすとか)。</p>

<p>サブクラスに、 SimpleFormController があり、Bean定義 を使って処理後のページを設定できるようです。AbstractFormController を直接使う場合は、処理後のページはプログラマティックに設定しなければなりません。</p>

<section>

<h4>【設定可能な項目】</h4>

<dl><dt>bindOnNewForm</dt>
<dd><p>新しいフォームオブジェクトを作成した場合に、リクエストと結びつけるかを決めます(true, false)。結び付けなかった場合は、ただのリクエストパラメータはただのパラメータとして処理されます。デフォルトは『false』。</p></dd>
<dt>sessionForm</dt>
<dd><p>セッションで共有するかどうかの設定(true, false)。デフォルトは『false』</p></dd>
<dt>AbstractCommandControllerで設定できる項目</dt>
<dd><p>AbstractCommandController で設定できる項目が設定できます。</p></dd>
</dl>

</section>
</dd>
<dt>org.springframework.web.servlet.mvc.multiaction.MultiActionController</dt>
<dd><p>メソッド名で複数のリクエストを処理することが出来るクラスです。アクション名をメソッドと結びつけることで、コントローラクラスが膨張するのを防げます。</p>

<section>

<h4>定義するメソッドシグネチャ</h4>

<pre>
ModelAndView 《メソッド名》(HttpServletRequest request, HttpServletResponse response);
ModelAndView 《メソッド名》(HttpServletRequest request, HttpServletResponse response, ExceptionClass exception);
</pre>

</section>

<p>メソッド名とアクション名のマッピングは MethodNameResolver を使います。「methodNameResolver」というプロパティ名に設定します。</p>

<section>

<h4>MethodNameResolver に使える主なクラス</h4>

<dl>
<dt>ParameterMethodNameResolver</dt>
<dd><p>リクエストパラメータを元にメソッド名を決定します。例えば 「<code>http://hamasyou.com/index.view?action=insert</code>」 の場合、 「ModelAndView insert(HttpServletRequest, HttpServletResponse)」 というメソッドが呼ばれます。「action」というパラメータ名をメソッドと結びつけるという設定を行っておく必要があります。</p></dd>
<dt>InternalPathMethodNameResolver</dt>
<dd><p>パス名がそのままメソッド名と結び付けられるクラスです。「<code>http://hamasyou.com/insert.view</code>」 というリクエストパスがあった場合に 「ModelAndView insert(HttpServletRequest, HttpServletResponse)」 が呼ばれることになります。</p></dd>
<dt>PropertiesMethodNameResolver</dt>
<dd><p>マッピングをプロパティファイルに持つクラスです。「/action/insert.view=insert」というマッピング情報をプロパティファイルに書いておくことで、「/action/insert.view」 という名前が含まれるパスが呼ばれると 「ModelAndView insert(HttpServletRequest, HttpServletResponse)」 が呼ばれることになります。</p></dd>
</dl>

</section>
</dd>
</dl>

<h3>org.springframework.web.servlet.ModelAndView</h3>

ビューに対するモデルを保持する単なるホルダーとして機能します。コントローラから返された ModelAndView インスタンスからビューに遷移し、ビューからモデルを使用できるようにします。

ビューには、View を継承したオブジェクトか、 ViewResolver によって解決されるビュー名を指定します。 モデルには、キーとなる文字列と、オブジェクトを設定します。内部では Mapで保持するようです。

ビューにおいてモデルは、EL式を用いて表現することが出来ます。JSPでは、request の attribute にモデルが設定されてるはずです。

<h3>org.springframework.web.servlet.ViewResolver</h3>

ビュー名とビューのマッピングを行うクラスです。ResourceBundleViewResolver クラスは、マッピング情報を設定ファイルに指定できます。InternalResourceViewResolver はマッピングを MVCアプリケーション定義ファイルにしていします。

Spring で言う 「ビュー」とは、レスポンスを返すクラスのことです。例えば、JSTL と JSP を使ってレスポンスを返す場合には、org.springframework.web.servlet.view.JstlView を使用します。Velocity などのテンプレートエンジンや JSF などを使用する場合には、別のビュークラスを指定します(<a href="#ViewResolverの例">参考</a>)

<h3>org.springframework.web.servlet.HandlerInterceptor</h3>

ワークフローに処理を付け加えるためのインターフェースです。「インターセプター」という名前の通り、処理を横取りします。例えば、入力パラメータのエンコードに使えます。

<h2 id="コントローラ・サーブレットの設定 (web.xml)">コントローラ・サーブレットの設定 (web.xml)</h2>

コントローラ・サーブレットは web.xml に設定します。サーブレット読み込み時にIoC コンテナのところで書いた Bean定義ファイル を読み込むには、 <em>org.springframework.web.context.ContextLoaderListener</em> を使用します。

<section>

<h4>[参考]</h4>

<a href="http://wiki.bmedianode.com/Spring/?Servlet%B4%C4%B6%AD%A4%D8%A4%CE%C6%B3%C6%FE" target="_balnk" class="extlink">Spring Pad- Servlet 環境への導入</a>

</section>

<section>

<h4>サーブレットの例</h4>

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; ?&gt;</span> 
<span class="tag">&lt;!DOCTYPE web-app PUBLIC &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;  
&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;&gt;</span> 
<span class="tag">&lt;web-app&gt;</span>    
   
<span class="tag">&lt;listener&gt;</span> 
    <span class="tag">&lt;listener-class&gt;</span> 
    org.springframework.web.context.ContextLoaderListener 
    <span class="tag">&lt;/listener-class&gt;</span> 
<span class="tag">&lt;/listener&gt;</span> 
   
  <span class="rem">&lt;!-- Bean定義ファイルの設定 --&gt;</span> 
  <span class="tag">&lt;context-param&gt;</span> 
    <span class="tag">&lt;param-name&gt;</span>contextConfigLocation<span class="tag">&lt;/param-name&gt;</span> 
    <span class="tag">&lt;param-value&gt;</span>BeanContext.xml<span class="tag">&lt;/param-value&gt;</span> 
  <span class="tag">&lt;/context-param&gt;</span>   
   
  <span class="rem">&lt;!-- 通常のコントローラ・サーブレット --&gt;</span> 
  <span class="tag">&lt;servlet&gt;</span> 
    <span class="tag">&lt;servlet-name&gt;</span>dispatcher<span class="tag">&lt;/servlet-name&gt;</span> 
    <span class="tag">&lt;servlet-class&gt;</span> 
      org.springframework.web.servlet.DispatcherServlet 
    <span class="tag">&lt;/servlet-class&gt;</span> 
    <span class="tag">&lt;load-on-startup&gt;</span>1<span class="tag">&lt;/load-on-startup&gt;</span> 
  <span class="tag">&lt;/servlet&gt;</span> 
   
  <span class="tag">&lt;servlet-mapping&gt;</span> 
    <span class="tag">&lt;servlet-name&gt;</span>dispatcher<span class="tag">&lt;/servlet-name&gt;</span>     
    <span class="tag">&lt;url-pattern&gt;</span>*.do<span class="tag">&lt;/url-pattern&gt;</span> 
  <span class="tag">&lt;/servlet-mapping&gt;</span> 
   
<span class="tag">&lt;/web-app&gt;</span> 
</code></pre>

</section>

<h2 id="ModelAndView のサンプルコード">ModelAndView のサンプルコード</h2>

ModelAndView を使ったビュー表示の例です。

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">class</span> WelcomeForm <span class="keyword">extends</span> SimpleFormController {
  <span class="comment">/**
   * 読み取り専用で処理すること！
   * スレッドセーフでないから、書き込みすると危ない。
   * 本来なら、clone を返すか、ラップするべし。
   */</span>
  <span class="keyword">private</span> Person[] defaultPersons;
 
  <span class="keyword">public</span> WelcomeForm() {
    <span class="keyword">super</span>();
  }
 
  <span class="keyword">public</span> Person[] getDefaultPersons() {
    <span class="keyword">return</span> defaultPersons;
  }
 
  <span class="keyword">public</span> <span class="keyword">void</span> setDefaultPersons(Person[] defaultPersons) {
    <span class="keyword">this</span>.defaultPersons = defaultPersons;
  }
 
  <span class="keyword">protected</span> ModelAndView 
     processFormSubmission(HttpServletRequest request,
                           HttpServletResponse response, 
                           Object command, 
                           BindException errors)
      <span class="keyword">throws</span> Exception {
    Map map = <span class="keyword">new</span> HashMap();
    map.put(<span class="literal">"title"</span>, <span class="literal">"WelcomeFormTitle"</span>);
    map.put(<span class="literal">"persons"</span>, getDefaultPersons());        
    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="literal">"/WEB-INF/jsp/form_list.jsp"</span>, <span class="literal">"model"</span>, map);
  }
}
</code></pre>

Webアプリケーション定義ファイルの設定例です。今回は、コントローラ(WelcomeForm)が SimpleFormController を継承しているので、「<em>commandClass</em>」 を設定しなければなりません。 jp.dip.xlegend.spring.web.cmd.WelcomeCommand は、ただの JavaBeanです。Struts で言うところの、 ActionForm だと思えばいいと思います。

<section>

<h4>Web アプリケーション定義ファイルの設定例</h4>

<pre class="code"><code><span class="rem">&lt;!-- 中略 --&gt;</span> 
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;WelcomeForm&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.web.WelcomeForm&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;commandClass&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>jp.dip.xlegend.spring.web.cmd.WelcomeCommand<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;validator&quot;</span>&gt;</span> 
    <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;welcomeValidator&quot;</span>/&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;defaultPersons&quot;</span>&gt;</span> 
    <span class="tag">&lt;list&gt;</span> 
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;person1&quot;</span>/&gt;</span> 
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;person2&quot;</span>/&gt;</span> 
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;person3&quot;</span>/&gt;</span> 
    <span class="tag">&lt;/list&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
<span class="tag">&lt;/bean&gt;</span> 
 
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;person1&quot;</span>  
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.Person&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;value&gt;</span>山田　太郎<span class="tag">&lt;/value&gt;</span><span class="tag">&lt;/property&gt;</span> 
<span class="tag">&lt;/bean&gt;</span> 
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;person2&quot;</span>  
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.Person&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;value&gt;</span>山田　次郎<span class="tag">&lt;/value&gt;</span><span class="tag">&lt;/property&gt;</span> 
<span class="tag">&lt;/bean&gt;</span> 
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;person3&quot;</span>  
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.Person&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;value&gt;</span>山田　三郎<span class="tag">&lt;/value&gt;</span><span class="tag">&lt;/property&gt;</span> 
<span class="tag">&lt;/bean&gt;</span> 
<span class="rem">&lt;!-- 中略 --&gt;</span>
</code></pre>

</section>

ModelAndView で設定された JSP ファイルの例です。JSTLを使って表示していますが、スクリプトレットを使って表示することも出来ます。

<section>

<h4>JSPファイルの例</h4>

<pre class="code"><code><span class="tag">&lt;%@ page contentType=&quot;text/html; charset=Shift_JIS&quot; %&gt;</span>
<span class="tag">&lt;%@ page import=&quot;java.util.*&quot; %&gt;</span>
<span class="tag">&lt;%@ page import=&quot;jp.dip.xlegend.spring.Person&quot; %&gt;</span>
<span class="tag">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jstl/core&quot; %&gt;</span>
<span class="tag">&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jstl/fmt&quot; %&gt;</span>  
 
<span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
<span class="tag">&lt;title&gt;</span>form_list.jsp<span class="tag">&lt;/title&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body <span class="attr">bgcolor=</span><span class="value">&quot;#FFFFFF&quot;</span>&gt;</span>
<span class="tag">&lt;form <span class="attr">action=</span><span class="value">&quot;welcome.do&quot;</span> <span class="attr">method=</span><span class="value">&quot;post&quot;</span>&gt;</span>
  EL式を利用した表示 <span class="tag">&lt;br&gt;</span>
  <span class="tag">&lt;h4&gt;</span><span class="tag">&lt;c:out <span class="attr">value=</span><span class="value">&quot;${model.title}&quot;</span>/&gt;</span><span class="tag">&lt;/h4&gt;</span>
  <span class="tag">&lt;c:forEach <span class="attr">items=</span><span class="value">&quot;${model.persons}&quot;</span> <span class="attr">var=</span><span class="value">&quot;person&quot;</span>&gt;</span>
    <span class="tag">&lt;c:out <span class="attr">value=</span><span class="value">&quot;${person.name}&quot;</span>/&gt;</span>
  <span class="tag">&lt;/c:forEach&gt;</span>  
 
  こうしても同じ結果が取得できる。
  <span class="tag">&lt;%
      Map map = (Map)request.getAttribute(&quot;model&quot;);
  %&gt;</span>
 
  <span class="tag">&lt;h4&gt;</span><span class="tag">&lt;%= map.get(&quot;title&quot;) %&gt;</span><span class="tag">&lt;/h4&gt;</span>
  
  <span class="tag">&lt;%
      Person[] persons = (Person[])map.get(&quot;persons&quot;);
      for (int i = 0; i &lt; persons.length; i++) {      
  %&gt;</span>  
  <span class="tag">&lt;%= persons[i].getName() %&gt;</span>
  <span class="tag">&lt;% } %&gt;</span>
 
  <span class="tag">&lt;input <span class="attr">type=</span><span class="value">&quot;submit&quot;</span> <span class="attr">value=</span><span class="value">&quot;送信&quot;</span>&gt;</span>  
<span class="tag">&lt;/form&gt;</span>
<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</code></pre>

</section>

最後に、結果画面です。

<img src="http://hamasyou.com/images/engineer_soul/spring_jsp_01.gif" alt="結果画面" />

<h2 id="ViewResolverの例">ViewResolverの例</h2>

ViewResolver はビュー名とビューとをマッピングするものです。レスポンスを返すものを「ビュー」と、Springでは呼んでいます。ビューの例としては「JSP」、「JSF」、「Velocity」、「Tiles」、「Excel」、「PDF」などがあります。

ViewResolver を指定する場合には、MVCアプリケーション定義ファイルに「<em>viewResolver</em>」という名前で設定します。

<section>

<h4>ViewResolverの設定例</h4>

<pre class="code"><code><span class="rem">&lt;!-- 中略 --&gt;</span>
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;viewResolver&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;viewClass&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>org.springframework.web.servlet.view.JstlView<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;prefix&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>/WEB-INF/jsp/<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;suffix&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>.jsp<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
<span class="tag">&lt;/bean&gt;</span>
<span class="rem">&lt;!-- 中略 --&gt;</span>
</code></pre>

</section>

<h2 id="Validateを使った妥当性チェックの方法">Validateを使った妥当性チェックの方法</h2>

データ検証について、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22" target="_blank" class="extlink">実践J2EE</a>』から、少し抜粋します。(P.532)

<blockquote>

データ検証 (Validation) は、「構文」の検証と「セマンティクス」の検証とに分類されます。構文検証には、データが存在するか、データの長さが許容範囲にあるか、データが有効なフォーマット(数字など)であるかといった、単純な操作が含まれます。通常、これはビジネスロジックではありません。セマンティクス検証はこれより手が込んだもので、ビジネスロジックやデータアクセスまでが含まれます。

<cite>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22" target="_blank" class="extlink">実践J2EE</a>』</cite>

</blockquote>

Struts では、構文検証もセマンティクス検証も、アクションフォームの validate メソッドで行っています。しかし、Spring ではWeb 層にとらわれない方法でValidation 処理を行うことができます。Validator インターフェースを実装したクラスがそれに当たります。

ただし、<em>Validator インターフェースでは、サポートするクラスを明示的に指定しなければなりません(supports メソッド)</em>。これだと、フォームごとにアクションフォームのようなクラスをたくさん作った場合に、Validator クラスも作らなければなりません。

そこで、「構文」の検証には、BaseCommandController クラスの 「<em>onBindAndValidate</em>」メソッドをオーバーライドして、「セマンティクス」の検証にだけ、Validator インターフェースを継承したクラスを作成するのがいいと思います。

<h2 id="Bind を使ったエラーメッセージの表示方法">Bind を使ったエラーメッセージの表示方法</h2>

Bind というのは、コマンドオブジェクトのフィールドと、入力パラメータとを結びつける機構です。JSP の入力項目で idと password という入力項目があったとすると、コマンドオブジェクトの setId()、setPassword() というメソッドが自動的に呼ばれるということです。

もちろん、妥当性チェック(Validation) に失敗した場合にエラーメッセージを表示させることもできます。Struts のタグリブを使った動作とほとんど同じ感じです。

<pre class="code"><code><span class="tag">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jstl/core&quot; %&gt;</span> 
<span class="tag">&lt;%@ taglib prefix=&quot;spring&quot; uri=&quot;/spring&quot; %&gt;</span> 
<span class="tag">&lt;html&gt;</span> 
<span class="tag">&lt;body&gt;</span> 
<span class="tag">&lt;form <span class="attr">action=</span><span class="value">&quot;entry.do&quot;</span> <span class="attr">method=</span><span class="value">&quot;post&quot;</span>&gt;</span> 
  <span class="tag">&lt;table&gt;</span> 
    <span class="tag">&lt;tr&gt;</span> 
   <span class="tag">&lt;spring:bind <span class="attr">path=</span><span class="value">&quot;person.id&quot;</span>&gt;</span> 
      <span class="tag">&lt;td&gt;</span> 
      ID： 
      <span class="tag">&lt;/td&gt;</span> 
      <span class="tag">&lt;td&gt;</span> 
      <span class="tag">&lt;input <span class="attr">type=</span><span class="value">&quot;text&quot;</span> <span class="attr">name=</span><span class="value">&quot;id&quot;</span> <span class="attr">value=</span><span class="value">&quot;&lt;c:out value=&quot;</span></span>&quot;&gt; 
      <span class="tag">&lt;td&gt;</span>  
      <span class="tag">&lt;font <span class="attr">color=</span><span class="value">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;c:out <span class="attr">value=</span><span class="value">&quot;${status.errorMessage}&quot;</span>/&gt;</span><span class="tag">&lt;/font&gt;</span> 
      <span class="tag">&lt;/td&gt;</span> 
     <span class="tag">&lt;/spring:bind&gt;</span> 
    <span class="tag">&lt;/tr&gt;</span> 
    <span class="tag">&lt;tr&gt;</span> 
      <span class="tag">&lt;spring:bind <span class="attr">path=</span><span class="value">&quot;person.password&quot;</span>&gt;</span> 
      <span class="tag">&lt;td&gt;</span> 
      Password： 
      <span class="tag">&lt;/td&gt;</span> 
      <span class="tag">&lt;td&gt;</span> 
      <span class="tag">&lt;input <span class="attr">type=</span><span class="value">&quot;text&quot;</span> <span class="attr">name=</span><span class="value">&quot;password&quot;</span> <span class="attr">value=</span><span class="value">&quot;&lt;c:out value=&quot;</span></span>&quot;&gt; 
      <span class="tag">&lt;td&gt;</span>  
      <span class="tag">&lt;font <span class="attr">color=</span><span class="value">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;c:out <span class="attr">value=</span><span class="value">&quot;${status.errorMessage}&quot;</span>/&gt;</span><span class="tag">&lt;/font&gt;</span> 
      <span class="tag">&lt;/td&gt;</span> 
      <span class="tag">&lt;/spring:bind&gt;</span> 
    <span class="tag">&lt;/tr&gt;</span> 
<span class="rem">&lt;!-- 中略 --&gt;</span>
</code></pre>

「<em>&lt;spring:bind path=&quot;person.id&quot;&gt;</em>」の部分が Bind している部分です。person という名前で定義されたコマンドオブジェクトの id フィールドと、入力フィールドの id を結び付けています。 「<em>{status.value} </em>」というのは Bind された値を表示する場合に使うものです。入力値を Bind して、妥当性チェックでエラーがあった場合に、元の画面で入力値を再表示させるときに使えます。

「<em>{status.errorMessage}</em>」は妥当性チェック等で、Errors オブジェクトにエラーが設定された場合に表示されます。 Validation クラスのエラーチェック時に、 「errors.rejectValue("id", 《エラーコード》, "Default Message.") メソッド」を呼び出してエラーを設定すると、画面に表示されるようになります。ちなみに「<em>{status.expression}</em>」はバインドするプロパティ名が取得できます。フィールドの name 属性にセットするという使い方が出来ます。

<section>

<h3>Validation で エラーメッセージを追加する方法</h3>

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">void</span> validate(Object command, Errors errors) { 
  Person person = (Person)command; 
  <span class="keyword">if</span> (person.getPassword() == <span class="keyword">null</span>) { 
    errors.rejectValue(<span class="literal">"password"</span>, <span class="literal">"M001"</span>,  
                       <span class="keyword">new</span> String[] { <span class="literal">"Password"</span> },  
                       <span class="literal">"必須入力です。"</span>); 
  } 
} 
</code></pre>

</section>

Bind するときに使った「person」を定義する場所は、Web アプリケーション定義ファイルです。他にも、コントローラのコンストラクタで setCommandName を呼び出してコマンド名を設定しているサンプルもありました。

<section>

<h3>Web アプリケーション定義ファイルでコマンドオブジェクトを指定する</h3>

<pre class="code"><code><span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;EntryFormController&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.web.EntryFormController&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;commandName&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>person<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;commandClass&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>jp.dip.xlegend.spring.Person<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
<span class="rem">&lt;!-- 中略 --&gt;</span>
</code></pre>

</section>

「<em>commandName</em>」 に Bind するときに使ったコマンド名を指定します。「<em>commandClass</em>」 はコマンドのクラス名を書きます。Spring では、入力値をそのままドメインのオブジェクトにマッピングすることが出来ます。Struts では ActionForm を使わなければならず、コントローラで値の詰め替えが必要でしたが、Spring ではその必要はありません。ただ、凝った画面表示をしようとした場合には、画面用のコマンドを用意して処理を呼び出すなどの方法も必要かもしれません。

<img src="http://hamasyou.com/images/engineer_soul/spring_jsp_02.gif" alt="Bindの結果" />

<h2 id="型変換時のエラーメッセージを独自のメッセージにする方法">型変換時のエラーメッセージを独自のメッセージにする方法</h2>

Bind 時に型変換でエラーが出ると次のようなエラーが出力されます。

<pre>Failed to convert property value of type [java.lang.String] to required type [{型名}] for property '{プロパティ名}'; nested exception is ...</pre>

このエラーは、開発時はまだ許せるとして、リリースした後は、ユーザにはまったく意味不明のメッセージになっています。

このメッセージは、MessageResource を使うことで、独自のメッセージにすることが出来ます。メッセージファイルに 「<em>typeMismatch.{プロパティ名}</em>」 というキーでメッセージを定義しておくと、そのメッセージが使えます。そして、置換文字の 0番目「{0}」にプロパティ名が埋め込まれるようになっています。(typeMismatch だけだと、すべての型変換エラーに対するメッセージが定義できる。typeMismatch.{コマンド名}.{プロパティ名} だと、コマンド名で指定されたものにマッチするようになる。さらに、typeMismatch.{型名} だと、型名にマッチするものに対してメッセージを指定できる。)

<section>

<h4>errorMessage.properties</h4>

<pre>
# 日本語は native2ascii をかけておく
typeMismatch={0} は入力形式が無効です。
typeMismatch.java.sql.Timestamp={0} は日付型で入力してください。
typeMismatch.int={0} は整数値で入力してください。
typeMismatch.dateFiled={0} は yyyy/mm/dd 。
typeMismatch.command.dateField={0} は yyyy/mm/dd の形で入力してください。 
</pre>

</section>

詳細に設定するほど優先的に使われるようです。上記のように定義した場合、command.dateFiled プロパティのエラーメッセージは「{0} はyyyy/mm/dd の形で入力してください。」 が使われます。それ以外の型エラーに関しては、「{0} は入力形式が無効です。」が使われます。

<h4>[参考]</h4>

<a href="http://www.springframework.org/docs/api/org/springframework/validation/DefaultMessageCodesResolver.html" target="_blank" class="extlink">Spring Framework API - DefaultMessageCodesResolver</a>

<h2 id="独自の型変換を使う方法">独自の型変換を使う方法</h2>

MVC フレームワークでは、CustomeEditor の設定の仕方がちょっと違ったのでメモ。MVC フレームワーク中で CustomeEditor を設定するには、BaseCommandController クラスのメソッド 「<em>initBind(HttpServletRequest request,  ServletRequestDataBinder binder)</em>」メソッドをオーバーライドして、その中で、binder.registerCustomEditor(Class, PropertyEditor) を呼び出します。SimpleFormController は BaseCommandController を継承しています。

<pre class="code"><code><span class="keyword">protected</span> <span class="keyword">void</span> initBinder(HttpServletRequest request, 
                          ServletRequestDataBinder binder)
    <span class="keyword">throws</span> ServletException {        
  CustomDateEditor de =  <span class="keyword">new</span> CustomDateEditor(
            <span class="keyword">new</span> SimpleDateFormat(<span class="literal">"yyyy/MM/dd"</span>), <span class="keyword">true</span>);        
  binder.registerCustomEditor(java.util.Date.class, de);
}
</code></pre>

<h2 id="Command コントローラ一覧">Command コントローラ一覧</h2>

Spring MVC フレームワークで使われるコントローラの中で、基本的なコントローラである Command Controller をまとめます。

<section>

<h4>[参考]</h4>
「<a href="http://www.springframework.org/docs/reference/mvc.html#mvc-controller-command" target="_blank" class="extlink">Spring Framework リファレンス - 12.3.4. CommandControllers</a>」

</section>

<table>
<caption>Command Controller 一覧</caption>
<tr><th>クラス名</th><th>説明</th></tr>
<tr><td>AbstractCommandController</td><td>任意のデータオブジェクトにリクエストをマッピングできる コマンドコントローラ を定義するために使います。フォーム機能は提供しませんが妥当性チェック(Validation)機能は提供されます。。明示的にリクエストパラメータをデータオブジェクトせ設定できるので、分かりやすいコントローラです。</td></tr>
<tr><td>AbstractFormController</td><td>フォーム送信機能を提供します。データオブジェクトにバインドされたフォームを表示し、妥当性エラーが発生したときに画面を再表示できます。サポートされる機能は、不正入力送信チェック、妥当性チェック、フォームのワークフローです。このコントローラは、ビューの指定を明示することができません。</td></tr>
<tr><td>SimpleFormController</td><td>指定したデータオブジェクトとのマッピングを行うフォームコントローラの具象クラスです。コマンドオブジェクトと、成功時や失敗時に表示するビュー名を指定することができます。</td></tr>
<tr><td>AbstractWizardFormController</td><td>ウィザード形式のフォームを作るときに指定します。validatePage, processFinish, processCancel メソッドを実装します。この3つのメソッドを適切に実装して、ワークフローを定義します。</td></tr>
</table>

<h2 id="コントローラマッピング">コントローラマッピング</h2>

コントローラサーブレットは、リクエストを処理するコントローラを選択します。どのような条件でコントローラが選択されるかは、Bean 定義で設定されている HandlerMapping インターフェースの実装クラスに任されます。

<dl>
<dt>BeanNameUrlHandlerMapping</dt>
<dd><p>Struts と同じようなマッピング方法で、スラッシュ(&quot;/&quot;)で始まるURLと Bean の名前をマッピングするクラス。DispatcherServlet がデフォルトで使う実装です。</p></dd>
<dt>SimpleUrlHandlerMapping</dt>
<dd><p>URL からリクエストハンドラBean へのマッピングを提供します。「urlMap」プロパティにマッピンを定義します。この定義は Bean 定義ファイルに書きます。</p></dd>
</dl>

<h2 id="ハマった点">ハマった点</h2>

<h3>Bind 時に例外が発生する</h3>

Bind 時に次のような例外がでます。

<pre>javax.servlet.ServletException: Neither Errors instance nor plain target object for bean name 《コマンド名》 available as request attribute</pre>

これは、Bind するコマンドオブジェクトがリクエストに保存されていないのが原因です。コントローラに SimpleFormController を使っている場合、processFormSubmission() メソッドで、super.onSumit(request, response, command, errors) を呼び出すと、例外は発生しなくなりました。参考までに。

<h3>更新系画面の初期表示はどうするのか？</h3>

FormController 系のコントローラを使うと、フォーム送信をデータオブジェクトに自動でバインドしてくれて楽チンです。ですが、初期表示(フォームに何も入力していない状態の画面)を行いたい場合に、どうすればいいのか分かりませんでした。

SimpleFormController の 「<em>formView</em>」プロパティは、初期表示する画面を設定するプロパティだったということに、やっと気づきました。Struts とかだと、初期表示用のアクションを用意していたので Spring でもそうするのかと思ってました。ハマった・・・ (T T;)

それでもって、初期表示に使いたいデータは 「protected Map referenceData(HttpServletRequest) throws Exception」メソッドをオーバーライドして Map につめて返せばいいわけでした。

<h2 id="Spring MVC フレームワークに出てくる用語">Spring MVC フレームワークに出てくる用語</h2>

Spring MVCフレームワークに出てくる用語をまとめておきます。

<dl>
<dt>コントローラサーブレット</dt>
<dd><p>フレームワークを使用するためのエントリポイントとなるサーブレット。コントローラのコントローラであり、アプリケーション固有のリクエストコントローラを呼び出す役割を担います。DispatcherServlet はコントローラサーブレットです。</p></dd>
<dt>コントローラ(リクエストコントローラ)</dt>
<dd><p>リクエストの処理を受け持つサーブレットです。通常、コントローラサーブレットによってリクエストの処理を委譲されます。コントローラはマルチスレッドコンポーネントであり、スレッドセーフでなければなりません。したがって、フィールドやプロパティはリードオンリであることが推奨されます。<i>org.springframework.web.servlet.mvc.Controller</i> インターフェースを実装する必要があります。実装クラスには BaseCommandController, AbstractFormController, SimpleFormController, MultiActionController などがあります。</p></dd>
<dt>ハンドラマッピング</dt>
<dd><p>リクエストをリクエストコントローラに結びつける役割を担います。コントローラサーブレットは、ハンドラマッピングを元にリクエストを委譲するリクエストコントローラを判断します。<i>org.springframework.web.servlet.HandlerMapping</i> インターフェースを実装する必要があります。実装クラスには BeanNameUrlHandlerMapping, SimpleUrlHandlerMapping などがあります。</p>

<p><a href="http://www.springframework.org/docs/reference/mvc.html#mvc-handlermapping" target="_blank" class="extlink">Handler mappings</a></p></dd>
<dt>ModelAndView</dt>
<dd><p>MVC アーキテクチャにおける モデルとビューのホルダーです。ビュー名にモデルをバインドして、リクエストコントローラから返されます。</p></dd>
<dt>ビュー</dt>
<dd><p>モデルをレンダリングするオブジェクトです。ビューオブジェクトはレスポンスにモデルデータをレンダリングするのが仕事です。<i>org.springframework.web.servlet.View</i> インターフェースを実装します。実装クラスには JstlView, TilesView, VelocityView などがあります。</p></dd>
<dt>ビューリゾルバ</dt>
<dd><p>ModelAndView のビュー名から、ビューオブジェクトを解決するクラスです。実装クラスには UrlBasedViewResolver などがあります。</p>

<p><a href="http://www.springframework.org/docs/reference/mvc.html#mvc-viewresolver" target="_blank" class="extlink">View and resolving them</a></p></dd>
<dt>ワークフロー</dt>
<dd><p>コントローラにおける処理の流れのことです。ウィザード形式のフォームコントローラを使用する場合など、画面間における必須項目のチェックなどを行えます。</p></dd>
<dt>ハンドラインターセプター</dt>
<dd><p>コントローラを呼ぶ前や、コントローラの処理が終了した後などに、呼び出されるコールバックオブジェクト。インターセプターと名前がつくことから、コントローラの処理を横取りして、処理をなかったことにしたり、装飾を加えたリクエストをコントローラに渡したりできる。<i>HandlerInterceptor</i> インターフェースを実装する必要がある。通常、HandlerInterceptorAdapter クラスを継承して、任意のインターセプトポイントに関するメソッドのみをオーバーライドすればよい。</p></dd>
<dt>妥当性チェック (Validation)</dt>
<dd><p>入力値が処理可能なものかを検査すること。一般に「構文」の検証と「セマンティクス」の検証とがある。構文検証は、データが存在するか、データの長さが許容範囲に日あっているか、データが有効なフォーマットかどうかを調べるものです。セマンティクス検証は、ビジネスロジックやデータアクセスまでが含まれる、手の込んだ検証になります。</p></dd>
</dl>

<h2>参考</h2>

+ Spring Framework の本家です。
<a href="http://www.springframework.org/" target="_blank" class="extlink">Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring Framework の 日本語 Wiki です。大量の情報があります。
<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント (日本語訳)
<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークドキュメント</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring フレームワークに関しての概要です。TECHSCORE さんの記事は読みやすいなぁ (^^ ;
<a href="http://www.techscore.com/tech/Java/Spring/1.html" target="_blank" class="extlink">TECHSCORE - Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring を含めた、軽量コンポーネントのお話です。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">軽快なJava―Better,Faster,Lighter Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ブルース・A. テイトジャスティン ゲットランドBruce A. TateJustin Gehtland岩谷 宏<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311201X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />率直な筆者の経験は必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />シンプル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring の ロッドジョンソンが贈る、J2EE技術者のためのバイブル
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">実践J2EE システムデザイン&業務運用[仮題・予定価格]</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロッド・ジョンソン<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322888&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Spring Freamworkの作者に迫れる唯一の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />坊主にくけりゃ袈裟までにくい?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は充実、ただ経験、印象に頼るところも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに実践まさに必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「現場主義」といったスタンスが根底に貫かれている<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring のロッドジョンソンによる Spring ユーザのための本 (洋書)
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Professional Java Development With The Spring Framework</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/0764574833.01.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Rod JohnsonJuergen HoellerALEF ARENDSENDMITRIY KOPYLENKOTHOMAS RISBERG<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0764574833&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ SpringでWebアプリケーションを作りながら、Springの全体像がわかりやすく解説されています。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Java press (Vol.41)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774122793.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1"><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg" border="0" alt="Spring Framework 覚書き">
-----
KEYWORDS:
Spring,Framework,覚書き,スプリング,フレームワーク,アーキテクチャ,DI,IoC,MVC,Web
-----

COMMENT:
AUTHOR: Kasshy
EMAIL: mkasshy@nifty.com
IP: 219.101.218.61
URL: 
DATE: 02/01/2005 11:09:45 AM
JSP に記述しているタグの spring:bind の部分ですが、自分の環境ですと、Spring:bind とSを大文字で書かないと
javax.servlet.jsp.JspTagException: Neither Errors instance nor plain target object for bean name formData available as request attribute
という例外が発生してしまいます。
このような事例を御存知ないでしょうか？
サーブレット側は SimpleFormController を使っています。
JSP には

と記述しています。

また、Spring:bind という記述で実行させた場合で、Validator で rejectValue() によって JSP に戻されるときに、JSP側の${status.value} や ${status.errorMessage} も機能しません。（何も表示されない。）
ただ、サーブレット側ではコマンドオブジェクトからパラメータの取得は出来ています。

環境：
 Vine Linux 3.1 (kernel 2.4.28)  LANG=Ja_JP.eucjp
 java version "1.4.2_06"
 Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_06-b03)
 Java HotSpot(TM) Client VM (build 1.4.2_06-b03, mixed mode)
 SpringFramework 1.1.3
 Tomcat 4.1.31
 Eclipse 3.0.1 を使用
-----

COMMENT:
AUTHOR: Kasshy
EMAIL: mkasshy@nifty.com
IP: 219.101.218.61
URL: 
DATE: 02/01/2005 03:47:26 PM
Spring:bind とSを大文字で書かないと・・・　の件ですが、XML での URL Mapping を間違えているだけでした。
おはずかしい。お騒がせしました。
-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 163.143.87.157
URL: http://hamasyou.com
DATE: 02/02/2005 08:56:45 PM
> Kasshy 様
こんにちは。
お返事が遅くなって申し訳ないです。

> XML での URL Mapping を間違えているだけでした。
そうですね、taglib の指定のところで、 prefix の先頭が大文字になっていたんだと思います。

解決されて良かったです。
また、何かあればご連絡ください。
ありがとうございます。
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Spring Framework 覚書き - AOP
BASENAME: spring_framework_覚書き_aop
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/09/2004 10:14:58 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764558315/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg" /></a>
</p>

アメリカではほとんどデフェクトスタンダードとなっている「<a href="http://www.springframework.org/" target="_blank" class="extlink"><b>Spring Framework</b></a>」の覚書きです。Spring は簡単に言うと、<abbr title="Inversion of Control">IoC (制御の反転)</abbr>、またの名を <abbr title="Dependency Injection">DI (依存性注入)</abbr> という仕組みを取り入れた軽量コンテナです。

<abbr title="Aspect Oriented Programming">AOP</abbr>(アスペクト指向プログラミング) はクラスの直接的な責務ではない、各モジュールから共通で使われる処理を、独立して切り出す手法です。「クラスの直接的な責務でない」とは、例えば「ログ」や「トランザクション」、「認証」などです。多くのクラスに重複コードが生まれてしまうような処理は、<b>アスペクト(横断的関心事)</b> として別のモジュールにしてしまうという手法をとることが出来ます。Spring AOP は、このアスペクトを扱うものです。
参考：<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797326387/sorehabooks-22" target="_blank" class="extlink">『AspectJによるアスペクト指向プログラミング入門』 ソフトバンクパブリッシング</a>
　
Springの詳細については、ほかにもっとよいサイト(<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント</a>や<a href="http://www.andore.com/money/trans/spring_ja.html" target="_blank" class="extlink">Springフレームワークの紹介</a>)があるので、そちらを参考にしてください。ここでは、Springを使っていて、ハマった点や気になった点などをメモしていこうと思います。随時更新していくつもりです。間違っている可能性が高いので、気になる点があればコメントをお願いします。

<section>

<h4>参考</h4>

<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad - Wiki</a>

<a href="http://direct.idg.co.jp/detail_1.msp?id=1066&class=10005&n=2" target="_blank" class="extlink">JavaWorld 7月号 2004年</a>

</section>
-----
EXTENDED BODY:
<h2>Spring AOP フレームワーク</h2>

<ul><li><a href="#Spring AOP 用語">Spring AOP 用語</a></li>
<li><a href="#Spring AOP とは">Spring AOP とは</a></li>
<li><a href="#Spring AOP で使われる主なクラス / インターフェース">Spring AOP で使われる主なクラス / インターフェース</a></li>
<li><a href="#ProxyFactoryBean を使ったサンプルコード">ProxyFactoryBean を使ったサンプルコード</a></li>
<li><a href="#Advisor とは？">Advisor とは？</a></li>
<li><a href="#ハマった点">ハマった点</a></li>
</ul>

<h2 id="Spring AOP 用語">Spring AOP 用語</h2>

Spring AOP で出てくる主要な用語まとめです。

<dl><dt><a name="アスペクト"></a>アスペクト (Aspect)</dt>
<dd>共通の処理としてモジュールから呼び出されるもの。</dd>
<dt><a name="インターセプト"></a>インターセプト (Intercept)</dt>
<dd>メソッドの呼び出しタイミングで、振る舞いを挿入すること。</dd>
<dt><a name="ジョインポイント"></a>ジョインポイント (Joinpoint)</dt>
<dd>アスペクトコードが挿入できる位置を表したもの。例えば、メソッド呼び出しの前後などは、ジョインポイントになる。</dd>
<dt><a name="アドバイス"></a>アドバイス (Advice)</dt>
<dd>ジョインポイントに埋め込まれるアスペクトコードのこと。4つの種類がある。
<dl><dt>Around Advice</dt>
<dd>ジョインポイントの前後で実行される。</dd>
<dt>Before Advice</dt>
<dd>ジョインポイントの前に実行される。</dd>
<dt>After Advice</dt>
<dd>ジョインポイントの後に実行される。2つの種類がある。
<dl><dt>After returning Advice</dt>
<dd>ジョインポイントでの処理が正常に終了した後に実行される。</dd>
<dt>Throws Advice</dt>
<dd>ジョインポイントでの処理で例外が発生した場合に実行される。</dd>
</dl>
</dd>
</dl>
</dd>
<dt><a name="ポイントカット"></a>ポイントカット (Pointcut)</dt>
<dd>ジョインポイントの集合のこと。条件にあうジョインポイントだけを抜き出すことも可能。</dd>
<dt<a name="イントロダクション"></a>イントロダクション (Introduction)</dt>
<dd>アドバイスとしてメソッドやフィールドを挿入すること。ソースコード上で実装していないインターフェースなどを実行時に付け加えることが出来るので、デバッグは難しくなる。</dd>
<dt><a name="ウィーブ"></a>ウィーブ (Weave)</dt>
<dd><p>アスペクトをジョインポイントやポイントカットに織り込むこと。</p>

<section>

<h4>[静的ウィーブと動的ウィーブ]</h4>

 静的ウィーブとは、コンパイル時にアスペクトを織り込むこと。静的ウィーブを提供している実行環境には、「AspectJ」などがある。逆に、動的時にウィーブするには、プロキシを使って実行コードを隠蔽してやる必要があります。

</section>
</dd>
</dl>

アスペクト用語を図にするとこんな感じでしょうか？

<img src="http://hamasyou.com/images/engineer_soul/aspect_image.gif" alt="アスペクト指向イメージ図" />

<h2 id="Spring AOP とは">Spring AOP とは</h2>

Spring AOP は<a href="#インターセプト">インターセプト</a>をベースにしています。つまり、「処理に何らかの付加を付け加える目的でAOPが使われている。」と言えます。ただし、Spring でも、インターフェースの動的実装のみの目的としてのみ<a href="#イントロダクション">イントロダクション</a>は使えます。

Spring AOP は、<a href="#ジョインポイント">ジョインポイント</a>に<a href="#アスペクト">アスペクト</a>を織り込む方法として、インターセプトを使います。処理の流れはこんな感じです。

<ol><li>Spring は実行時に、アスペクト対象クラスのプロキシオブジェクトを生成します。</li><li>そして、プロキシオブジェクトの内部で、アスペクト対象クラスの処理を実行します。</li><li>ジョインポイントとして、アスペクト対象クラスが指定されると、プロキシの中でインターセプトクラスのアドバイスメソッドが呼ばれます。</li></ol>

Spring AOP では、<a href="#ポイントカット">ポイントカット</a>と<a href="#アドバイス">アドバイス</a>を一緒に扱う「<b>アドバイザー (Advisor)</b>」というものを使います。任意のポイントカットとアドバイスを組み合わせて使います。

<h2 id="Spring AOP で使われる主なクラス / インターフェース">Spring AOP で使われる主なクラス / インターフェース</h2>

Spring AOP を利用する場合に使われる主なクラスやインターフェースです。

<h3>org.springframework.aop.framework.ProxyFactoryBean</h3>

AOP Proxy 戦略を行うための FactoryBean です。簡単に言うと、Spring で AOP を行うときに使う、FactoryBean です。

<section>

<h4>【設定する項目】</h4>

<dl><dt>interceptorNames</dt>
<dd>インターセプトするクラスを設定します。<i>org.aopalliance.intercept.MethodInterceptor</i> を実装したクラス参照の ID を指定します。リスト値を取ることが出来るので、クラス名の並び順を考える必要があります。(指定した順に適用される)</dd>
<dt>target</dt>
<dd>アスペクト対象の Bean 参照(ref bean)を指定します。</dd>
<dt>proxyInterfaces</dt>
<dd>プロキシに使用するクラス名の配列を指定します。特に指定のない場合は、書かなくても問題ありません。</dd>
</dl>

</section>

<h3>org.springframework.aop.Pointcut</h3>

<a href="#ポイントカット">ポイントカット</a>はアドバイスの挿入地点であるジョインポイントの部分集合です。クラス名やメソッド名のマッチング条件を指定することにより、ジョインポイントの集合を表すことが出来ます。

<h3>org.springframework.aop.MethodMatcher</h3>

<a href="#ポイントカット">ポイントカット</a>の一部です。呼び出されたメソッドがポイントカットの集合に含まれるかどうかを判定します。静的な呼び出しである場合には、引数が2つの matches メソッドが呼び出されます。動的な呼び出しである場合には、引数が3つの matches メソッドが呼び出されます。

Spring AOP では、ポイントカットは Union (和集合) と Intersection (交差) で表せます。 org.springframework.aop.support.Pointcuts クラスを使います。

<section>

<h4>【主な MethodMatcher】</h4>

<dl><dt>TrueMethodMatcher</dt>
<dd>すべてのメソッドにマッチするマッチャーです。</dd>
<dt>NameMatchMethodPointcut</dt>
<dd>メソッド名を正規表現を使って表せるマッチャーです。</dd>
<dt>RegexpMethodPointcutAdvisor</dt>
<dd>正規表現を使ってポイントカットを表せるアドバイザーです。</dd>
</dl>

</section>

<h3>org.aopalliance.aop.Advice</h3>

<a href="#アドバイス">アドバイス</a>はポイントカットに挿入する処理を定義するインターフェースです。Spring では「Around Advice」、「Before Advice」、「Throws Advice」、「After returning Advice」の 4 種類をサポートしています。

<dl><dt>org.aopalliance.intercept.MethodInterceptor</dt>
<dd><p>Around Advice を実装するためのインターフェースです。Around Advice は アドバイスの処理が、アスペクト対象の処理の前後に及ぶため、自分で Advice のタイミングを実装しなければなりません。Advice の処理の中で、 invocation.proceed() を呼び出す必要があります。このインターフェースの実装の仕方によっては、4種類全部の Advice を表現できます。</p></dd>
<dt>org.springframework.aop.MethodBeforeAdvice</dt>
<dd>Before Advice を実装するためのインターフェースです。before() メソッド中にアドバイスコードを実装します。</dd>
<dt>org.springframework.aop.ThrowsAdvice</dt>
<dd>
<p>Throws Advice を実装するためのインターフェースです。インターフェースで定義されたメソッドはありません。</p>

<pre>
public void afterThrowing(java.lang.refrect.Method m, Object[] args, Object target, Throwable subclass)
</pre>

<p>の形式でメソッドを定義しておくと、SpringFramework によって呼ばれます。</p>

<p>第4引数の Throwable は、キャッチしたい例外クラスを指定することで、例外にマッチするときだけ呼ばれるようになります。</p>
</dd>
<dt>org.springframework.aop.AfterReturningAdvice</dt>
<dd>After returning Advice を実装するためのインターフェースです。処理が正常に終了した場合に呼び出されます。</dd>
</dl>

<h3>org.springframework.aop.Advisor</h3>

<a href="#ポイントカット">ポイントカット</a>と<a href="#アドバイス">アドバイス</a>を一緒に扱うインターフェースです。Spring の世界では、おそらく「<b>インターセプト = アドバイス</b>」と言えると思います。

<h2 id="ProxyFactoryBean を使ったサンプルコード">ProxyFactoryBean を使ったサンプルコード</h2>

ProxyFactoryBean の使い方サンプルです。Bean 定義書に ProxyFactoryBean を使う指定をして、その<b> ID に プロキシでラップした Bean を取り出すときの名前を付ける</b> だけです。

<section>

<h4>bean-context.xml の例</h4>

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="tag">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; 
&quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;</span>
<span class="tag">&lt;beans&gt;</span>
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;calcTarget&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.aop.Calculator&quot;</span>/&gt;</span>   
 
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;debugInterceptor&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;org.springframework.aop.interceptor.DebugInterceptor&quot;</span>/&gt;</span>
 
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;calc&quot;</span>
       <span class="attr">class=</span><span class="value">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span>
      <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;target&quot;</span>&gt;</span>
        <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;calcTarget&quot;</span>/&gt;</span>
      <span class="tag">&lt;/property&gt;</span>
      <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;interceptorNames&quot;</span>&gt;</span>
      <span class="tag">&lt;list&gt;</span>
        <span class="tag">&lt;value&gt;</span>debugInterceptor<span class="tag">&lt;/value&gt;</span>
      <span class="tag">&lt;/list&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;/bean&gt;</span>
<span class="tag">&lt;/beans&gt;</span>
</code></pre>

</section>

「ProxyFactoryBean」の定義のところの ID を使って Bean を取り出しています。

<section>

<h4>メインクラス</h4>

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception {
  BeanFactory factory = 
      <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> FileInputStream(<span class="literal">"bean-context.xml"</span>));
  Calculator cal = (Calculator)factory.getBean(<span class="literal">"calc"</span>);
  cal.add(10, 20);
} 
</code></pre>

</section>

アスペクト対象の Calculator クラスです。アスペクト対象のクラスは、<strong>JavaBeanでなければなりません</strong>。デフォルトコンストラクタ(引数無しのコンストラクタ)が無いと、プロキシを作る時にエラーになります。

<section>

<h4>アスペクト対象のクラス</h4>

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">class</span> Calculator {    
  <span class="keyword">public</span> Calculator() {
    <span class="keyword">super</span>();
  }
 
  <span class="keyword">public</span> <span class="keyword">int</span> add(<span class="keyword">int</span> a, <span class="keyword">int</span> b) {      
    System.out.println(<span class="literal">"add("</span> + a + <span class="literal">", "</span> + b + <span class="literal">")"</span>);
    <span class="keyword">return</span> a + b;
  }
}
</code></pre>

実行結果です。

<pre class="console"><code>Debug interceptor: count=1 invocation= ...
add(10, 20)
Debug interceptor: next returned
</code></pre>

<h2 id="Advisor とは？">Advisor (アドバイザー)とは？</h2>

Advisor (アドバイザー)とは、<a href="#ポイントカット">ポイントカット</a>と<a href="#アドバイス">アドバイス</a>をセットにしたものと考えればよさそうです。アドバイスとはアスペクトとして付け加える処理のことです。ポイントカットはアドバイスを付け加える位置のことです。つまり、<b>アドバイザーとは、自身がアドバイスであり、ポイントカットである</b>わけです。

<section>

<h4>アドバイザーの例</h4>

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;.&quot; encoding=&quot;UTF-&quot;?&gt;</span>
<span class="tag">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot;
  &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;</span>
<span class="tag">&lt;beans&gt;</span>
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;calcTarget&quot;</span>
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.aop.Calculator&quot;</span>/&gt;</span>
 
   <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;debugInterceptor&quot;</span>
      <span class="attr">class=</span><span class="value">&quot;org.springframework.aop.interceptor.DebugInterceptor&quot;</span>/&gt;</span>
 
   <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;advisor&quot;</span>
<span class="attr">class=</span><span class="value">&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;</span>&gt;</span>
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;advice&quot;</span>&gt;</span>
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;debugInterceptor&quot;</span>/&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;mappedNames&quot;</span>&gt;</span>
      <span class="tag">&lt;list&gt;</span>
        <span class="tag">&lt;value&gt;</span>insert*<span class="tag">&lt;/value&gt;</span>
        <span class="tag">&lt;value&gt;</span>update*<span class="tag">&lt;/value&gt;</span>
      <span class="tag">&lt;/list&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;/bean&gt;</span>
 
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;calc&quot;</span>
       <span class="attr">class=</span><span class="value">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span>
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;target&quot;</span>&gt;</span>
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;calcTarget&quot;</span>/&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;interceptorNames&quot;</span>&gt;</span>
      <span class="tag">&lt;list&gt;</span>
        <span class="tag">&lt;value&gt;</span>advisor<span class="tag">&lt;/value&gt;</span>
      <span class="tag">&lt;/list&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;/bean&gt;</span>
<span class="tag">&lt;/beans&gt;</span>
</code></pre>
<div class="clear"></div>

</section>

11行目でアドバイザーを定義しています。アドバイザーは「ポイントカット」と「アドバイス」の組み合わせでした。13〜15行目で「アドバイス」を設定しています。<b>インターセプタはアドバイス</b>だということですね。16〜21行目で「ポイントカット」を正規表現で指定しています。最後に ProxyFactoryBean の interseptorNames に 定義したアドバイザーを指定して、アスペクト対象を設定すれば、AOP の出来上がりです。

<h2 id="ハマった点">ハマった点</h2>

<h3>BeanCreationException が発生する</h3>

取得しようとしている Bean に 「<b>デフォルトコンストラクタがない</b>」と、このエラーが発生することがあります。基本的に Spring の Bean 定義ファイルに書くクラスには、「デフォルトコンストラクタ」を書いておきましょう。案外忘れがち・・・

<h3>Spring の ポイントカットは、クラス単位</h3>

Bean 定義書を見ると分かるのですが、ProxyFactoryBean の target には単一のクラスしか書けません。ポイントカットに関しても、ターゲットののメソッドしかサポートしません。

トランザクション管理などで、複数のクラスを指定したい場合には、「<b>AutoProxy</b>」 と呼ばれる仕組みを使う必要があるとのことです。そのうち使ってみようかと思います。

<h2>参考</h2>

+ Spring Framework の本家です。
<a href="http://www.springframework.org/" target="_blank" class="extlink">Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring Framework の 日本語 Wiki です。大量の情報があります。
<a href="http://wiki.bmedianode.com/Spring/?FrontPage" target="_blank" class="extlink">Spring Pad</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント (日本語訳)
<a href="http://www.andore.com/money/trans/spring_ref_ja.html" target="_blank" class="extlink">Spring-Java/J2EEアプリケーションフレームワークドキュメント</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring フレームワークに関しての概要です。TECHSCORE さんの記事は読みやすいなぁ (^^ ;
<a href="http://www.techscore.com/tech/Java/Spring/1.html" target="_blank" class="extlink">TECHSCORE - Spring Framework</a><img src="/images/linkext.gif" alt="linkext" />

+ Spring を含めた、軽量コンポーネントのお話です。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">軽快なJava―Better,Faster,Lighter Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ブルース・A. テイトジャスティン ゲットランドBruce A. TateJustin Gehtland岩谷 宏<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311201X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />率直な筆者の経験は必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />シンプル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring の ロッドジョンソンが贈る、J2EE技術者のためのバイブル
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">実践J2EE システムデザイン&業務運用[仮題・予定価格]</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロッド・ジョンソン<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322888&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Spring Freamworkの作者に迫れる唯一の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />坊主にくけりゃ袈裟までにくい?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は充実、ただ経験、印象に頼るところも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに実践まさに必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「現場主義」といったスタンスが根底に貫かれている<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Spring のロッドジョンソンによる Spring ユーザのための本 (洋書)
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Professional Java Development With The Spring Framework</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/0764574833.01.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Rod JohnsonJuergen HoellerALEF ARENDSENDMITRIY KOPYLENKOTHOMAS RISBERG<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0764574833&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ SpringでWebアプリケーションを作りながら、Springの全体像がわかりやすく解説されています。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Java press (Vol.41)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774122793.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1"><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/0764558315.01.MZZZZZZZ.jpg" border="0" alt="Spring Framework 覚書き">
-----
KEYWORDS:
Spring,Framework,覚書き,スプリング,フレームワーク,アーキテクチャ,DI,IoC,AOP,アスペクト,横断的関心,Pointcut,Advice,インターセプト
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Executable UML MDAモデル駆動型アーキテクチャの基礎
BASENAME: executable_uml_mda
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 11/12/2004 10:52:23 AM
TAGS: MDA,UML,モデル駆動
-----
BODY:
「Executable UML」とは、<b>実行可能なモデル</b>という意味です。Executable UML の目的は 「<strong>ソフトウェア実装上の構成を決定せずに、問題領域の解決に向けての分かりやすいモデルを提供すること</strong>」です。ソフトウェア実装とは例えば、プログラミング言語やプラットフォームといったいわゆる、問題領域の解決につかう道具のことです。逆に問題領域の解決とは、ビジネスモデルやビジネスルールと言われる、ソフトウェアの目的の部分です。

Executable UML は、UML のアクションセマンティックス(動作意味論) を提供します。これにより、ソフトウェア実装を決定せずともソフトウェアの動作を表すことができます。しかも、厳密に定義することで、ツールによる解釈・実行が可能になります。<a href="http://www.atmarkit.co.jp/aig/04biz/mda.html" target="_blank"><abbr title="Model Driven Architecture">MDA</abbr> (モデル駆動アーキテクチャ)</a>は、こうしたExecutable UML によって書かれたモデルを解釈し、コードを自動生成しようとしています。モデルの解釈を行うためには、厳密なセマンティックスが必要とされます。

本書は、Executable UML を理解するためのよい書籍だと思います。Executable UML 自体は、新しいモデリング言語と言うわけではありません。<strong>UML の一つの拡張(プロファイル)であり、実行可能なモデルを生み出すためのただの表記法</strong>です。

最近は、「モデリング」という言葉をいろんなところで聞けるようになりました。書籍もたくさん出ています。今後は、プログラムだけではなくモデリングも出来なくてはならない時代が来るかもしれません。そうすると、自然とモデルからコードを生成するという発想が生まれてきます。今後は MDA のようなモデルからコードを生成する手法が一般的になってくるかもしれません。Executable UML は次世代のための必須知識と言えるのではないでしょうか。
-----
EXTENDED BODY:
<h2>特徴</h2>

Executable UML は、UML に<b>厳密なアクションセマンティックス</b>を拡張したものです。プログラミングコードによる実装なくして、モデルの解釈・動作を行うことが出来るようになります。本書は、Executable UML の表記法や仕様を理解するのにとても分かりやすいと思います。現時点で、Executable UML に関する和書が少ないということも事実ですが、とりあえず本書を理解できれば Executable UML の基本は完璧だと思います。

<h3>目次</h3>

目次を見ると分かりますが、UML の解説書と見間違うほどです。UML を読めるだけの基本知識があるほうが読み進めやすいと思います。

<ol><li>序論</li>
<li>Executable UMLの利用</li>
<li>ドメインとブリッジ</li>
<li>ユースケース</li>
<li>クラスと属性</li>
<li>関係と関連</li>
<li>クラスのアクション</li>
<li>制約</li>
<li>ライフサイクル</li>
<li>オブジェクト間の通信</li>
<li>オブジェクト間の同期</li>
<li>ライフサイクルの利用法</li>
<li>関係の動的変化</li>
<li>ドメインの動的振る舞い</li>
<li>ドメインの検証</li>
<li>モデルの管理</li>
<li>複数ドメインの結合</li>
<li>モデルコンパイラ</li>
</ol>

<h3>Executable UML の利用</h3>

Executable UML の目的は 「完全な製品を組み立てずに、問題解決を試作する方法を提供すること」です。これは、モデルを書くことで動作検証を行えるということを意味しています。つまり、実際にプロトタイプや擬似コードを書くことなく、モデルのみでソフトウェアのテストが可能になると言うことです。

考え方自体は、とてもすばらしいものだと思います。プログラミング言語に依存せずにソフトウェアがテストできると言うことは、どんなプラットフォーム上でも同じソフトウェアが作成可能になります。しかも、テスト済みのモデルであれば、モデルから自動生成したコードをそのままソフトウェア成果物として納品することも可能になるはずです。

モデルの検証は2種類の方法があります。静的検証と動的検証です。

<dl>
<dt>静的検証</dt>
<dd>静的検証はモデルコンパイラが行う構文検査のようなものです。モデルが解釈可能かどうかを検証します。</dd>
<dt>動的検証</dt>
<dd>動的検証は、実際の値を使用してモデルを検証するものです。検証するためには「実際のオブジェクト」と「シナリオ」が必要になります。テストシナリオは、モデルごとに作成する方が向いているが、ユースケースには一致している必要があります。</dd>
</dl>

作成したモデルは、モデルコンパイラを使って実装に変換します。モデルコンパイラの種類によって実装コードが変わるため、パフォーマンスのよいものを選択する。よいパフォーマンスが得られない場合は、その部分だけ手でコードを書き、コンパイラによって吐き出されたコードとリンクする措置をとる。

<h3>本書の総括</h3>

全体的に、UML の解説書のような印象を受けました。実行可能なUMLと言っても、結局 UML (モデリング言語) ですから自然なことかもしれませんが。アジャイルプロセスを好む人は、モデリングはコミュニケーションの手段だと考えていると思います。そういう意味では、Executable UML はとっつきにくい分野かもしれないし、なにより胡散臭い感じがしていました。

本書を読んだ後、モデル駆動の開発は近い将来ありえるかもと言う気持ちになりました。確かに、ツール依存という点は否定できませんが、大きな期待はもてるかと思います。

Executable UML は厳密なセマンティックスを要求するので、通常の UML よりも制限や制約が多いです。それでも、UML を書く上で参考になる部分が結構あるので、読んで損はないはずです。

今後、「モデリング」の重要性がさらに高まると、MDA (モデル駆動アーキテクチャ) のようなモデル主体の開発が多くなってくるかもしれません。それには、Executable UML のような厳密な表記法が欠かせません。将来を見越して早くからこういった知識を蓄えておくことは、よいことではないでしょうか。本書は、Executable UML を理解するには、とても参考になり、とりあえず持っていれば何かあったときにも怖くないです (何かってなんだ・・・ (^^; )

<h2>覚書き</h2>

<h3>ドメイン</h3>

<dl>
<dt class="info">ドメインとは</dt>
<dd>ドメインとは、特徴的な規則と方針に従って振る舞う概念的エンティティによって形成される、自立した、現実的、仮想的、抽象的な世界である。</dd>
</dl>

システムに対して最初に行う作業は、システム全体を構成するいくつかのドメインを識別することです。概念的エンティティはたった一つのドメインの中に定義される。例えば、注文、発注、顧客、会社といった概念エンティティは物流ドメインの一部である。

異なるドメインにおけるエンティティは、たとえ同じ名前だとしても別の概念を意味していなければならない。また、ドメイン内の概念エンティティは同じドメイン内の別の概念エンティティの存在が必要になる。例えば、注文は、顧客がいなければほとんど意味を成さない。ドメイン内の概念エンティティは、別ドメインの概念エンティティの存在を必要としない。

<strong>ドメインをモデル化するときは、そのドメインについての用語だけを使う</strong>。ドメインのモデルは、Executable UML において重要な意味をもつ。ドメインの振る舞いが Executable UML におけるモデル群になるからである。Executable UML モデルを構築するには、要件を理解して収集することが必要。そのために、ユースケースをつかう。

<h2>参考</h2>

+ Executable UML の実践的な使い方を解説した本です。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4789837149/sorehabooks-22/">Executable UML実践入門―クラス・モデルをいかに作成するか</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4789837149/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4789837149.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">レオン スター　Leon Starr　二上 貴夫　長瀬 嘉秀　Executable UML研究会<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4789837149&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4789837149/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ モデル駆動アーキテクチャ (MDA) に関しての導入ガイドです。概念がよく分かります。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844318691/sorehabooks-22/">MDA(モデル駆動型アーキテクチャ)導入ガイド―UMLを基盤としたオブジェクト指向設計・開発手法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844318691/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4844318691.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Anneke Kleppe　Wim Bast　Jos Warmer　テクノロジックアート<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4844318691&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844318691/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ モデル駆動アーキテクチャ (MDA) の技術的側面を解説しています。結構難しいです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434038133/sorehabooks-22/">MDA モデル駆動アーキテクチャ</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434038133/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4434038133.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">David S.Frankel　日本アイ・ビー・エム TEC-J MDA分科会<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4434038133&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />難解だが有益<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ちょっと、手ごわかったですが、ためになりました<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />硬派アーキテクトの必携本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />モデル駆動型ソフトウェア開発に向けて重要となる概念やメカニズムを概説<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />包括的でツボをおさえた良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434038133/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/479810602X.09.MZZZZZZZ.jpg" border="0" alt="Executable UML MDAモデル駆動型アーキテクチャの基礎">
-----
KEYWORDS:
Executable,UML,実行可能なUML,MDA,モデル駆動アーキテクチャ
-----


-----
CF50_CF_4: スティーブ J.メラー (著), マーク J.バルサー (著), 株式会社テクノロジックアート (編集), 二上 貴夫 (翻訳), 長瀬 嘉秀 (翻訳), Executable UML研究会 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/41W4TWPMZBL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/479810602X/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Dependency Injection (DI) の乱用！？
BASENAME: dependency_injection_di
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/13/2004 02:10:22 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg" border="0" /></a>
</p>

<a href="http://www.kakutani.com/trans/fowler/injection.html" target="_blank" class="extlink">Dependency Injection (DI) </a>は、「依存性の注入」という言葉で最近話題になっています。「EJB は重過ぎて使えない」とか「軽量コンテナは疎結合だからすばらしい」といった声をよく聞くようになりました。

Dependency Injection (DI) はサービスコンポーネント間の関係を疎に保ったままアプリケーションを構築するというものです。「<b>設定を利用から分離する</b>」という原則が、DIの本質です。

いろんな書籍が出始めてきた中で、依存性注入の何がステキなのか、疎結合だと幸せだよねといったことは非常に良く分かるようになりました。それでも、自分の中で何かしらの引っ掛かりがあります。それをつらつら書き連ねてしまおうかと思っています。

<section>

<h4>参考</h4>

<a href="http://www.kakutani.com/trans/fowler/injection.html" target="_blank" class="extlink">Inversion of Control コンテナと Dependency Injection パターン</a>

</section>
-----
EXTENDED BODY:
<h2>感じたこと</h2>

DIコンテナの役割は、マーチン・ファウラーの言葉を借りるとこういうことです。 

<blockquote>

軽量コンテナは、異なるプロジェクトのコンポーネントをひとまとまりのアプリケーションとして組み立てることを支援する。このようなコンテナの根底には、コンポーネントの結び付け方についての共通したパターンがある。そのパターンのコンセプトは「Inversion of Control(制御の反転)」と、まことに包括的な名前で呼ばれている。《中略》 「<b>設定を利用から分離する</b>」原則こそが重要なのだ。

<cite>マーチンファウラー</cite>

</blockquote>

DIコンテナの役割は、「<b>異なるプロジェクトのコンポーネント</b>をひとまとまり」にするための糊として動くといっています。僕も非常にこの部分に同意します。異なるプロジェクトコンポーネントと言っているのが味噌です。でも、コンポーネントって何でしょうか？

<blockquote>

ソフトウェアコンポーネントは、それぞれ特定の機能を持っているが、<b>基本的に単体では使用できず、他のプログラムと組み合わせて機能を実現、ないし追加するために用いられる</b>。また、オブジェクトの一種として、特定の機能を持つが単独では意味を持たないようなオブジェクト、と言うこともできる。

<cite>『<a href="http://e-words.jp/w/E382B3E383B3E3839DE383BCE3838DE383B3E38388.html" target="_blank" class="extlink">IT用語辞典 - コンポーネント</a>』</cite>

</blockquote>

コンポーネントとは、「<b>それだけでは機能しない、正しいインターフェースを持ったソフトウェアモジュール</b>」であると言えます。DIコンテナは、「それだけでは機能しないソフトウェアモジュールを組み合わせて一つのアプリケーションにするもの」だと言うことができます。

<h3>DI のサンプルは、DIの本質をつかんでいないのではないか？</h3>

さて、DIの本質は、「コンポーネント同士を貼り付ける糊」だと言うことが一般的なようでした。しかし、DIコンテナのサンプルを見ると、ドメインモデル間の関係をDIしている例が見受けられます。これって変ですよね？

DIは異なるコンポーネント、つまり<strong>お互いに帰属関係のない概念</strong>を結合する場合に使うべきものです。ドメインモデルと言うものは、同一の概念レベルにあるものではないでしょうか？

帰属関係のない概念とは、例えば、データアクセスオブジェクトとデータソース、サーブレットコントローラとトランザクション、リソース管理とロギングの関係などです。これらはコンポーネントとしての機能を持っていますが、単体では動きません。こういうモノを組み合わせるためにDIコンテナを利用するべきではないかと考えます。

<h3>DIはいつ使うべきか？</h3>

DI自体はとてもすばらしい考えだと思います。コンポーネントの関係を疎結合にするというのは、保守を考えたとき、テストを考えたときにとても幸せになれます。ただ、ドメインモデル同士の関係に、DIを使うのはどうかと思います。ドメインモデルでは関係があるはずなのに、実装コードを見たら関係が見つからないと言うのでは、逆に保守が大変だと思います。

アプリケーションのコンフィギュレーションをリソース化する場合の基本は以下のようなものがあります。

<dl>
<dt>横断的/共通的な概念</dt><dd>データソース、データベースの名前、ユーザ名やパスワードなどは、設定ファイルとして切り出す。</dd>
<dt>外部との接点</dt><dd>既存システムとの連結部、ビジネスルール、サービスの開始部などは、インターフェースでやり取りし、カスタマイズできる部分を設定可能にする。</dd>
<dt>外部資源</dt><dd>トランザクション、ログファイル、データソースなどはカスタマイズ可能です。あちこちに分散しそうな設定は外部化しておく。</dd>
</dl>

アプリケーションのコンフィギュレーションをリソース化できる部分が、実はDependency Injection が使える重要ポイントなのではないかと考えています。コンポーネントは、コンテキストにもよりますが、それ自体が交換可能なものです。リソースもまた、交換可能なものです。それぞれが正しいインターフェースを提供することで、Dependency Injection が可能になるはずです。

「<em>コンポーネント同士の結合部分、コンフィギュレーションとして切り出せる部分、プラグイン化可能な部分</em>」こそ、Dependency Injectionを使うべきところで、それ以外のところでは、異なる概念でなければむやみに使わないほうがいいように思います。何でもかんでも疎結合にしようというのは、ちょっと考え物。

<h2>参考</h2>

+ コンポーネントとは何かを調べるときに使いました。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712636/sorehabooks-22/">オブジェクト指向とコンポーネントによるソフトウェア工学―UMLを使って</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712636/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894712636.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ペルディタ スティーブンス　ロブ プーリー　Perdita Stevens　Rob Pooley　児玉 公信<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSProductData&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894712636&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />思ったより、実践的な本でした<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向の教祖本に！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712636/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg" border="0" alt="Dependency Injection の乱用！？">
-----
KEYWORDS:
Dependency Injection,DI,IoC,Inversion of Control,依存性注入,制御の反転,乱用
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 情報技術のすべてがわかるSE教科書
BASENAME: se
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 11/17/2004 12:23:57 AM
TAGS: わかりやすい
-----
BODY:
システム開発の初心者から中級者の方を対象に、現場の開発で必要となる技術について詳細に紹介している書籍です。お客様から、「SEなら知っていて当然だ」と思われる技術はほとんどすべて載っていると思います。情報処理技術者試験の対策にも使えるほど、詳しく技術紹介されています。

<ol><li>ネットワーク技術</li><li>データベース技術</li><li>情報システム開発とオブジェクト指向</li><li>セキュリティ技術</li><li>Web系開発を例にとって</li></ol>

システム開発の現場で必要となる核の部分を網羅しています。システム屋として知らないでは済まされない必須の技術ばかり載っていますので、ピカピカの新人さんに特におすすめの一冊です。
-----
EXTENDED BODY:
<h2>特徴</h2>

特筆すべきなのは、全121のキーワードに関して、最低2ページの詳細な解説が載っていることです。全ページ数が482ページですから、1キーワード辺り、4ページほどの解説があることになります。

システム開発において、プログラミング言語の知識はもちろんのこと、ネットワークの仕組みや、データベースの考え方、セキュリティポリシーの評価方法など、必須の知識が数多くあります。

本書は、システム開発の現場に絞って、核となる技術キーワードを詳細に解説しています。長年開発に携わっている技術者であれば、知っていて普通の用語でも、新人SEにとっては聞いたこともない言葉だったりするわけです。

時間をかけてゆっくりと語彙を増やしていくのもいいですが、本書のような辞書としても使える書籍で、一気に頭に入れてしまうのも一つの方法だと思います。

新人研修のお供に、技術用語の辞書に、知識の整理用に、本書は満足して使えること間違いなしです。なんだか、本の押し売りのような感じですが、かなり実践で使える本だと思いますので、手元においておくことをおすすめします。

毎日、1キーワードずつ読んでいっても、十分満足できる質の本だと思います。非常に内容の濃い、息抜きに読める本です。

<h3>本書について (抜粋)</h3>

<h4>第１章：ネットワーク技術</h4>

ネットワークについての考え方から、各種のプロトコルについて、そしてネットワーク設計のはしりまでを説明します。特に、IPネットワークのプロトコルを中心に基礎的なプロトコルから最近のアプリケーションまでを扱います。

<h4>第２章：データベース技術</h4>

データベースの基本的な理論やRDBMS(関係データベース)、SQLに関わる理論を中心に説明します。企業のデータベースで重要となるトランザクションの保護や、大規模データベースの扱いについても詳解します。

<h4>第３章：情報システム開発とオブジェクト指向</h4>

情報システムを開発する際にシステム開発全体の流れを理解しておく必要があります。よって、計画・分析・設計・実装・テスト・運用といったさまざまな段階で何をどう行うのかを説明します。特に、近年重要であるオブジェクト指向に基づく開発については、別途取り上げます。

<h4>第４章：セキュリティ技術</h4>

セキュリティの概念、セキュリティポリシーなどのルール作りに加え、具体的なセキュリティ技術についても説明を行います。特に、昨今の不正アクセスや個人情報の流出、システム障害などの事例を鑑み、企業に必要とされるセキュリティの枠組みを中心に扱います。

<h2>参考</h2>

+ 基本情報技術者試験を受ける人におすすめの一冊

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104604/sorehabooks-22/">新人SEのための「基本情報技術者」入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104604/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798104604.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">矢沢 久雄<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798104604&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />基本情報技術者／初級シスアドにこれから取り組む方にお薦め<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />勉強したくなる！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104604/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 技術用語の次は、業務知識です。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106038/sorehabooks-22/">ITエンジニアのための【業務知識】がわかる本</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106038/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4798106038.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">三好 康之<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798106038&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />入門の入門のための書としてはＧｏｏｄ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />システム化における「業務」を幅広く俯瞰できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />コンパクトでベスト<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />ほんとうに業務知識の本？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />社内のエンジニア教育にぴったり<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106038/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798102407.09.MZZZZZZZ.jpg" border="0" alt="情報技術のすべてがわかるSE教科書">
-----
KEYWORDS:
情報技術,SE,教科書,IT,すべて
-----


-----
CF50_CF_4: 坪根 直毅 (著), 中島 尚紀 (著), 小川 創生 (著), 原田 辰彦 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/41GJ0JDRC4L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798102407/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Hibernate で O/Rマッピング してみる ： 概要編
BASENAME: hibernate_or
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/18/2004 02:00:22 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/193239415X.01.MZZZZZZZ.jpg"  border="0" /></a>
</p>

Hibernate は O/R マッピングツールと呼ばれる、リレーショナルデータベースとオブジェクトモデルとの間を埋めるフレームワークです。

Hibernate は独自のオブジェクトクエリ言語 HQL を使って、非常にハイパフォーマンスな検索を可能にしています。それだけでなく、高度なキャッシュ機構など、実行時のパフォーマンスを向上させる機能が盛りだくさんです。

ドキュメントも豊富にそろっていて、<a href="http://www.hibernate.org/hib_docs/reference/ja/html/" target="_blank" class="extlink">リファレンスマニュアル</a> (日本語翻訳済み) が非常に参考になります。マニュアルの中から、気になった部分や使えそうな部分だけを抜き出しておきます。

<section>

<h4>[参考]</h4>

+ <a href="http://www.hibernate.org/hib_docs/reference/ja/html/" target="_blank" class="extlink">Hibernate リファレンスマニュアル</a>

+ <a href="http://wiki.bmedianode.com/Hibernate/" target="_blank" class="extlink">Hibernate Pad</a>

</section>
-----
EXTENDED BODY:
<h2>Hibernate の特徴</h2>

<ol>
<li><a href="#Hibernate とは">Hibernate とは</a></li>
<li><a href="#Hibernate で使えるPOJOクラスの条件">Hibernate で使えるPOJOクラスの条件</a></li>
<li><a href="#とりあえず動かすのに必要なライブラリ">とりあえず動かすのに必要なライブラリ</a></li>
<li><a href="#Hibernate で使われる用語">Hibernate で使われる用語</a></li>
</ol>

<h2 id="Hibernate とは">Hibernate とは</h2>

Hibernate は <acronym title="Plain Old Java Object">POJO </acronym>と呼ばれる普通のJavaクラス(フレームワークの都合でインターフェースやスーパークラスを実装しなくてもよい)を扱います。<em>JDBC でアクセスするリレーショナルデータベース</em>のみを対象としています。

基本的には、POJOのクラスが一つのテーブルを表し、インスタンスが一行を表す形で表現されます。マッピング情報は、XDoclet というマークアップ言語をつかってソースコード中に書く方法と、マッピングファイルとしてリソースで定義する方法があります。

Hibernate では、オブジェクト検索のために、<em>HQL (Hibernate Query Languate)</em> というクエリ言語を提供しています。SQLのようなものです。Hibernateでは、オブジェクト検索に3つの方法が使えます。

<ol><li>HQLを使った問い合わせ</li><li>Criteria というクエリオブジェクトを使った問い合わせ</li><li>SQL 文を直接発行</li></ol>

静的な検索条件でオブジェクトを検索するときには HQL を使い、動的な検索条件がある場合には Criteria オブジェクト を使い、どうしても HQL でかけない複雑な検索文の場合には SQL 文を使います。

Hibernate は O/Rマッピングツールです。リレーショナルデータベースとオブジェクトモデルのインピーダンスミスマッチと呼ばれる考え方の違いを吸収するためのものです。

<section>

<h4>[参考]</h4>

+ <a href="http://www.arclamp.jp/blog/archives/000021.html" target="_blank" class="extlink">arclamp O/Rマッピングとは</a>

</section>

<h2 id="Hibernate で使えるPOJOクラスの条件">Hibernate で使えるPOJOクラスの条件</h2>

Hibernate はPOJOを扱います。POJOといっても、どんなJavaクラスでもよいかというとそうではありません。4つだけ制約があります。

<section>

<h3>1. 永続フィールドに対するアクセサを定義する</h3>

いわゆる getter/setter と呼ばれる、フィールドへのアクセサメソッドを定義する必要があります。JavaBean 形式のスタイルをサポートし、getFoo, isFoo, setFoo のような形のメソッド名を認識します。

<em>アクセサは、public である必要はありません</em>。private、デフォルト、protected のアクセサメソッドがあるフィールドも、永続化の対象にできます。

<h3>2. デフォルトコンストラクタを用意する</h3>

デフォルトコンストラクタを定義する必要があります。このコンストラクタも、<em>public である必要はありません</em>。

<h3>3. 識別子プロパティを用意する (オプション)</h3>

データベース中のレコードを一意に識別できるプロパティを用意します。これは、必須ではありませんが、よりよい設計のために推奨されます。

オブジェクト型 (nullを許容できる型) で、ビジネス的に意味のないものが理想的だとされています。java.lang.Long や java.lang.String が柔軟性があり推奨されています。

<h3>4. finalクラスにしない (オプション)</h3>

Hibernate のプロキシクラスは、final でない永続化クラスかインターフェースに依存します。これも必須ではありませんが、プロキシを使うとパフォーマンスチューニングのオプションが可能になるため、推奨されます。

</section>

<dl>
<dt class="notice">equals と hashCode をオーバーライドする</dt>
<dd><p>永続化対象のクラスは、識別子(主キー)を比較して等価なことを証明するべきです。つまり、識別子のみを使って equals() と hashCode() メソッドをオーバーライドするべきです。</p>

<p>識別子には、ビジネスにおける等価キー(ドメイン内で同一オブジェクトとみなせるキー)を使うことが推奨されます。</p>
</dd>
</dl>

<h2 id="とりあえず動かすのに必要なライブラリ">とりあえず動かすのに必要なライブラリ</h2>

Hibernate を動かすのに必要なクラスは、下記の通り(余分なのもあるかも)です。JTA ライブラリが必要とのこと（分散トランザクションをサポートする場合）。これらのファイルは全部、Hibernate をダウンロードすると lib フォルダの中にそろっています。

<ol><li>hibernate2.jar</li><li>cglib-full.jar</li><li>commons-collections.jar</li><li>commons-lang.jar</li><li>commons-beanutils.jar</li><li>commons-logging.jar</li><li>dom4j.jar</li><li>odmg.jar</li><li>xalan.jar</li><li>xerces.jar</li><li>xml-apis.jar</li><li>jta.jar</li></ol>

<h2 id="Hibernate で使われる用語">Hibernate で使われる用語</h2>

Hibernate で使われている用語の整理です。

<dl>
<dt>永続化エンティティ</dt>
<dd><p>独立して永続化されるクラスのこと。他のどのオブジェクトとも関係なく作成、問い合わせ、削除することができる。Hibernate では、テーブルとマッピングされるクラスのことだと考えると分かりやすいはず。</p></dd>
<dt>コンポーネント(コンポジット)</dt>
<dd><p>独立して永続化されないクラスのこと。これを所持する親クラスが永続化されるときに関連を通して永続化されるクラス。他のエンティティの従属部分としてのみデータベースに保存したり検索したりできる。テーブルの一部を利用して作られたクラス。</p></dd>
<dt>Session (net.sf.hibernate.Session)</dt>
<dd><p>アプリケーションと、永続機構との対話を行う。一つのJDBC コネクションだと考えるといいと思います。複数のトランザクションを横断することもあります。スレッドセーフではないので、複数のスレッドで共有することはできません。</p></dd>
<dt>Transaction (net.sf.hibernate.Transaction)</dt>
<dd><p>アプリケーションが使う作業の最小単位。</p></dd>
<dt>@hibernate.class (XDoclet タグ)</dt>
<dd><p>永続化エンティティだということを示すタグ。クラス宣言の JavaDoc コメントに書く。</p>

<h4>[参考]</h4>

<p><a href="http://xdoclet.sourceforge.net/xdoclet/tags/hibernate-tags.html#@hibernate_class__0__1_" target="_blank" class="extlink">XDoclet - @hibernate.class (0..1)</a></p>
</dd>
<dt>@hibernate.id (XDoclet タグ)</dt>
<dd><p>そのプロパティが識別子だということを示すタグ。メソッド宣言の JavaDoc コメントに書く。</p>

<h4>[参考]</h4>

<p><a href="http://xdoclet.sourceforge.net/xdoclet/tags/hibernate-tags.html#@hibernate_id__0__1_" target="_blank" class="extlink">XDoclet - @hibernate.id (0..1)</a></p></dd>
<dt>@hibernate.property (XDoclet タグ)</dt>
<dd><p>そのプロパティをテーブルのカラムとマッピングするときに使用するタグ。メソッド宣言の JavaDoc コメントに書く。</p>

<h4>[参考]</h4>

<p><a href="http://xdoclet.sourceforge.net/xdoclet/tags/hibernate-tags.html#@hibernate_property__0__1_" target="_blank" class="extlink">XDoclet - @hibernate.property (0..1)</a></p></dd>
<dt>カスケード (cascade)</dt>
<dd><p>操作を関連オブジェクトへ伝播させるかどうかを指定するもの。指定できる値は none, all, save-update, delete。none は伝播させない。save-update は更新系の操作 (insert, update) を伝播させる。delete は削除系の操作 (delete) を伝播させる。all は save-update と delete の両方を伝播させる。</p>

<h4>[参考]</h4>

<p>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22" target="_blank" class="extlink">WEB-DB Press 18号</a>』</p></dd>
<dt>遅延ロード</dt>
<dd><p>関連オブジェクトをコレクションで保持する場合、最初にアクセスされるまでオブジェクトのロードを遅らせること。lazy 属性に true を指定することで可能になる。リソースの節約やパフォーマンスの向上に効果がある。</p></dd>
<dt>Open Session in View</dt>
<dd><p>遅延ロードは、ロードされる際に親オブジェクトに有効な Session が関連付けれらていなければならない。Webアプリケーションでは、JSP で最初にコレクションにアクセスすることが多いため、Session の開始と終了をビューで行わなければならない。これを行うための手段の一つ。</p>

<h4>[参考]</h4>

<p><a href="http://www.hibernate.org/Documentation/OpenSessionInView/" target="_blank" class="extlink">Hibernate.org - Open Session in View</a></p></dd>
<dt>generator</dt>
<dd><p>generator は主キーの生成方法を指定する id タグ (@hibernate.id) の要素です。increment, identity, sequence, hilo, seqhilo, uuid.hex, uuid.string, native, assigned, foreigh が使えます。</p>

<ul><li>increment は単純にIDを増加させるもの</li>
<li>identity, sequence はDBMS によってサポートされている同名の ID 生成機能を使う</li>
<li>hilo, seqhilo はhi/lo アルゴリズムを使ってIDを生成する</li>
<li>uuid.hex, uuid.string はUUID アルゴリズムを使ってIDを生成する</li>
<li>native はDBMSの種類を判別して、identity, sequence, hilo を使い分けてとりあえず主キーを生成してくれる</li>
<li>assigned はアプリケーション側でIDを設定することを示す</li>
<li>foreign はone-to-one で関連付けられているオブジェクトのIDを使用する</li></ul></dd>
<dt>One-to-One 関係</dt>
<dd><p>一対一の関係のこと。継承関係のテーブルがそれにあたる。同一の主キーを持つ関係。</p></dd>
<dt>Many-to-One 関係</dt>
<dd><p>多対一の関係のこと。外部キーを持つテーブルから見た場合の関係。参照関係。</p></dd>
<dt>One-to-Many 関係</dt>
<dd><p>一対多の関係のこと。主キーを持つテーブルから、外部キーを持つテーブルを保持する関係。親子関係。</p></dd>
<dt>Many-to-Many 関係</dt>
<dd><p>多対多の関係のこと。関連テーブルを使用する場合の関係。One-to-Many と Many-to-Oneが相互に発生する場合。</p></dd>
<dt>Dialect</dt>
<dd><p>Hibernate で使われるデータベースの種類のこと。SQLの方言に対応するために使われるクラス。</p></dd>
<dt>SessionFactory (net.sf.hibernate.SessionFactory)</dt>
<dd><p>Hibernateとやり取りするための Session オブジェクトを提供する。スレッドセーフなので、アプリケーション全体で一つの SessionFactory オブジェクトをつかうようにするとよい。(正確には、データベースごとに一つあればよい)</p></dd>
<dt>LazyInitializationException(遅延初期化例外)</dt>
<dd><p>Hibernateのセッションを閉じた後で初期化されていない遅延コレクションにアクセスしようとすると投げられる例外。Hibernateは遅延ロードという仕組みを使うことができる。これは、コレクションに最初にアクセスしたときにその内容を初期化するようにする仕組み。</p></dd>
</dl>

<h2>参考</h2>

+ Hibernate のリファレンスドキュメント (日本語)
<a href="http://www.hibernate.org/hib_docs/reference/ja/html/index.html" target="_blank" class="extlink">Hibernate Reference Document</a>

+ Hibernate だけでなく、データベース設計にまで触れられていておすすめ。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22/">Hibernate in Action (In Action)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/193239415X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Christian BauerGavin King<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=193239415X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おもしろくてためになる<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 薄いながらも十分な情報量。HibernateとSpringにも触れられています。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">軽快なJava―Better,Faster,Lighter Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ブルース・A. テイトジャスティン ゲットランドBruce A. TateJustin Gehtland岩谷 宏<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311201X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />率直な筆者の経験は必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />シンプル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Hibernate の基本的な使い方が載っています。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22/">Web+DB press (Vol.18)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774119016.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">WEB+DB Press編集部<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774119016&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 開発者のための Hibernate の解説書が日本語で登場しました。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank">Hibernate</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/487311215X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">James Elliott<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311215X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />コンパクトにまとまっている良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/193239415X.01.MZZZZZZZ.jpg" border="0" alt="Hibernate で O/Rマッピング">
-----
KEYWORDS:
Hibernate,O/Rマッピング,フレームワーク,データベース,POJO
-----


PING:
TITLE: Framework改造計画
URL: http://blog.goo.ne.jp/glass-_-onion/e/5f13ced6e4b458d63baa716bd38333f6
IP: 210.165.9.64
BLOG NAME: グラスオニオン日記
DATE: 10/06/2006 06:05:16 PM
最近、Frameworkの改造を少しづつ行っています。
パッケージ構成を整理したり、無駄な継承をやめたり、足りない機能を追加したり、HTMLからXHTMLに変更したり．．．
とまぁ基本的なことを細々とやってるんですけどそれだけでも結構シンプルにうまくまとまってきてます。

...
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Hibernate で O/Rマッピング してみる ： 基本編
BASENAME: hibernate_or_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/18/2004 02:01:51 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/193239415X.01.MZZZZZZZ.jpg"   border="0" /></a>
</p>

Hibernate は O/R マッピングツールと呼ばれる、リレーショナルデータベースとオブジェクトモデルとの間を埋めるフレームワークです。

関連するテーブルのオブジェクトを管理する方法が、十数種類あります。<a href="http://www.xylax.net/hibernate/" target="_blank" class="extlink">Index of Relationships</a>< のサイトに、Hibernate でサポートされる関係の一覧が載っています。

ドキュメントも豊富にそろっていて、<a href="http://www.hibernate.org/hib_docs/reference/ja/html/" target="_blank" class="extlink">リファレンスマニュアル</a> (日本語翻訳済み) が非常に参考になります。マニュアルの中から、気になった部分や使えそうな部分だけを抜き出しておきます。

<section>

<h4>[参考]</h4>

+ <a href="http://www.hibernate.org/hib_docs/reference/ja/html/" target="_blank" class="extlink">Hibernate リファレンスマニュアル</a>

+ <a href="http://wiki.bmedianode.com/Hibernate/" target="_blank" class="extlink">Hibernate Pad</a>

</section>
-----
EXTENDED BODY:
<h2>Hibernate の基本的なこと</h2>

<ol>
<li><a href="#Hibernate で表現できる関係">Hibernate で表現できる関係</a></li>
<li><a href="#HQL 文を書くときの注意点">HQL 文を書くときの注意点</a></li>
<li><a href="#マッピングファイルについてあれこれ">マッピングファイルについてあれこれ</a></li>
<li><a href="#Spring との連携時、テストでLazyInitializationExceptionが出る場合の対処">SpringFramework との連携時、テストでLazyInitializationExceptionが出る場合の対処</a></li>
<li><a href="#org.hibernate.HibernateException: CGLIB Enhancement failed: &lt;className&gt;">org.hibernate.HibernateException: CGLIB Enhancement failed: &lt;className&gt;</a></li>
</ol>

<h2 id="Hibernate で表現できる関係">Hibernate で表現できる関係</h2>

Hibernate はリレーショナルデータベースのほとんどの関係を表現することが出来ます。その一部が下記のような関連です。

<dl><dt>1. One-to-one (一対一)</dt>
<dd>2つのオブジェクトが同一のIDを共有する場合。親子関係がこれにあたります。</dd>
<dt>2. One-to-many (一対多)</dt>
<dd>オブジェクトのプロパティがコレクションの場合。Hibernate は、コレクションに Set, List, Bag, 独自のコレクション型が使用できます。<q>
Bag は Set と似ていて、等価なものを一意に扱います。ただし、同じオブジェクトを2回以上登録できます。同じオブジェクトが何回登録されたかを管理できます。</q>
</dd>
<dt>3. Many-to-many (多対多)</dt>
<dd>双方向の関係で、多対一の関係の場合。両者のオブジェクトのプロパティに、相手のクラスのコレクションが保持されている状態。</dd>
<dt>4. Inheritance (継承)</dt>
<dd>2つのオブジェクトに is-a の関係がある場合。テーブル的には、同一のテーブルに格納される場合。もしくは、同一の主キーをもつテーブルが個々のクラスに対して存在する。</dd>
<dt>5. Component (コンポーネント)</dt>
<dd>複数のクラスを一つのテーブルにマッピングする方法の一つ。</dd>
</dl>

<section>

<h4>[参考]</h4>

+ <a href="http://www.xylax.net/hibernate/" target="_blank" class="extlink">Index of Relationships</a>

</section>

<h2 id="HQL 文を書くときの注意点">HQL 文を書くときの注意点</h2>

HQL の基本的な文法は<a href="http://www.hibernate.org/hib_docs/reference/ja/html/queryhql.html" target="_blank">リファレンスマニュアル</a> を参考にしてください。

(基本事項抜粋)

<h3>HQLはクエリの大文字・小文字を区別しない</h3>

ただし、HQL中のオブジェクト参照(プロパティ)は大文字・小文字の区別をします。

<h3>from 句に書くのは、クラス名</h3>

大文字・小文字の区別が必要です。パッケージを含めた完全クラス名を指定することもできます。マッピングファイルで auto-import=&quot;false&quot; を指定した場合は、完全クラス名を指定する必要があります。

<h3>HQL中でクラスのプロパティを指定するときは、クラス名に別名を付ける必要がある</h3>

クラスの別名は、 <i>from Worker as w</i> のように <b>as</b> を使って指定します。HQL は、結構複雑なものまで書けるので、それなりに使えるかも。

<h3>バインド変数には、名前を付ける</h3>

HQL 文には、バインド変数を使うことが出来ます。 PreparedStatement でおなじみの &quot;?&quot; と、<b>:id</b> のような、任意の名前を与える方法が使えます。&quot;?&quot; を使った場合には、インデックス順にバインド値を設定しなければなりません。名前を与えた場合には、Query オブジェクトを使って、任意の順番でバインドできます。

<pre class="code"><code>Query q = s.createQuery(<span class="literal">"from Worker as w where w.id = :id1 or w.id = :id2"</span>); 
q.setParameter(<span class="literal">"id1"</span>, <span class="keyword">new</span> Integer(1), Hibernate.INTEGER); 
q.setParameter(<span class="literal">"id2"</span>, <span class="keyword">new</span> Integer(2), Hibernate.INTEGER); 
</code></pre>

<h3>クエリの本体をマッピング文書内に定義する</h3>

クエリ文字列をJavaコードの外に定義することができます。<b>CDATAセクション</b>を使って定義します。

<section>

<h4>Worker.hbm.xml</h4>

<pre class="code"><code><span class="tag">&lt;hibernate-mapping&gt;</span> 
<span class="tag">&lt;query <span class="attr">name=</span><span class="value">&quot;com.hamasyou.hibernate.query.methodName&quot;</span>&gt;</span> 
  <span class="tag">&lt;![CDATA[ 
    from com.hamasyou.hibernate.entity.Worker as worker 
    where worker.age &lt;= :age 
  ]]&gt;</span> 
<span class="tag">&lt;/query&gt;</span> 
 
<span class="tag">&lt;/hibernate-mapping&gt;</span>
</code></pre>

</section>

呼び出すには、プログラムから、クエリ名を指定すればよいです。

<pre class="code"><code>Query q = session.getNamedQuery(<span class="literal">"com.hamasyou.hibernate.query.methodName"</span>); 
q.setInteger(<span class="literal">"age"</span>, <span class="keyword">new</span> Integer(22)); 
</code></pre>

<h2 id="マッピングファイルについてあれこれ">マッピングファイルについてあれこれ</h2>

<h3>マッピングファイルの粒度</h3>

<ul type="square">
<li>マッピングファイルは、クラス毎に作成する</li>
<li>マッピング情報は XDoclet で書く</li>
<li>XDoclet で書くことのメリットは、クラスとマッピングの対応が分かりやすいこと</li>
<li>デメリットは、マッピングファイルに手を入れたときに、上書きされてしまう可能性があること</li>
</ul>

マッピング情報は、XDoclet の形式で、ソースコード中に埋め込むのが良いような気がします。確かに、POJO のクラスに Hibernate の情報が入り込むのは、別のフレームワークを使おうとした場合に不利ではありますが、たぶんほとんどの場合そういうことはないはずです。XDoclet で定義すると、クラスとマッピングが同じ場所に存在することになるので、対応が分かりやすいというメリットがあります。

とはいえ、やっぱり XDoclet の形式で書くよりも XML で記述したほうが 保守はしやすいか・・・。

<section>

<h4>[参考]</h4>

+ <a href="http://xdoclet.sourceforge.net/xdoclet/tags/hibernate-tags.html" target="_blank" class="extlink">HIbernate XDoclet Attribute 一覧</a>

</section>

XDoclet 形式でマッピングを書いた場合問題となるのが、生成されたマッピングファイルを手で修正していた場合に、もう一回ファイルを生成すると上書きされてしまうことです。マージファイルを使って、上手く上書きされることがないようにする必要があります。

<h3>マージファイルを使う方法</h3>

Ant の Hibernate XDoclet の mergedir に設定したフォルダの下に、パッケージを作り、<b>hibernate-properties-{クラス名}.xml</b> というファイルを置いておきます。中身がそのままマージファイルとして所定の位置に埋め込まれます。XDoclet として書けない静的なプロパティなどを、このファイルに書いておきます。

ちなみに、<a href="http://www.devx.com/opensource/Article/20242" target="_blank">JBoss-IDE</a> という Eclipse のプラグインを使うと XDoclet の補完が効くようなって便利です。

<h3>Hibernate 用の XDoclet 解析 Ant スクリプト例</h3>

<pre class="code"><code><span class="rem">&lt;!-- パスの設定 --&gt;</span> 
<span class="tag">&lt;path <span class="attr">id=</span><span class="value">&quot;id.xdoclet.classpath&quot;</span>&gt;</span> 
  <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;C:\\java\\XDoclet\\xdoclet-1.2.2&quot;</span>  
      <span class="attr">includes=</span><span class="value">&quot;*.jar&quot;</span>/&gt;</span> 
<span class="tag">&lt;/path&gt;</span>   
       
<span class="rem">&lt;!-- Hibernate XDoclet の解析 --&gt;</span> 
<span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;xdoclet&quot;</span>&gt;</span> 
  <span class="tag">&lt;taskdef <span class="attr">name=</span><span class="value">&quot;hibernatedoclet&quot;</span> 
      <span class="attr">classname=</span><span class="value">&quot;xdoclet.modules.hibernate.HibernateDocletTask&quot;</span> 
      <span class="attr">classpathref=</span><span class="value">&quot;id.xdoclet.classpath&quot;</span>/&gt;</span> 
    
    <span class="tag">&lt;hibernatedoclet <span class="attr">destdir=</span><span class="value">&quot;${src.dir}&quot;</span> 
        <span class="attr">excludedtags=</span><span class="value">&quot;@version,@author,@todo&quot;</span> 
        <span class="attr">force=</span><span class="value">&quot;false&quot;</span> 
        <span class="attr">mergedir=</span><span class="value">&quot;.&quot;</span> 
        <span class="attr">verbose=</span><span class="value">&quot;false&quot;</span>&gt;</span> 
        <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;${src.dir}&quot;</span> <span class="attr">includes=</span><span class="value">&quot;**/*.java&quot;</span>/&gt;</span> 
        <span class="tag">&lt;hibernate <span class="attr">version=</span><span class="value">&quot;2.0&quot;</span>/&gt;</span> 
    <span class="tag">&lt;/hibernatedoclet&gt;</span> 
<span class="tag">&lt;/target&gt;</span>
</code></pre>

<h3>XDoclet で書くときの注意点</h3>

<b>@hibernate.id</b> タグには、主キー項目を指定します。このとき、type 属性を付けると、composite-id だと解釈されるのか、エラーがでます。type 属性は Hibernate が適切なマッピングを自動で探してくれるので、ほとんどの場合指定しなくていいようです。ちなみに、指定する場合は、 HIbernate 型で指定します。

<h3>主キーの項目の型</h3>

主キー項目の型は、null が代入できる型にしておいた方がいいみたいです。つまり、オブジェクト型にしておくといいです。Hibernate は永続化されたかどうかを判断するのに、主キー項目の値が null かどうかで判定します (デフォルトの動作)。永続化されたかどうかの判断に別の値を指定したい場合には、 @hibernate.id  unsaved-value を設定します。

<h3>ビジネスキーの同値性ってどいういこと！？</h3>

Hibernate は、テーブルの主キーとオブジェクトIDとを別々に考えるようです。

<blockquote>

なんですが，単純に ID プロパティの同値性を判断してもいけないみたい．というのもですね，永続クラスの新しいインスタンスが生成された時点では，ID プロパティの値は設定されないらしいんですね．あう，だから ID プロパティは null にできる型を推奨なのでしょうか？ そんな気がする．

そんなわけで，結局のところは 「ビジネスキー」 の同値性を使って判定しろとのことです．．． つまり Hibernate を使う際には，主キーは Hibernate 用に INTEGER とかで無意味な ID にしておいて，業務的なキーは主キーにするなってことですか？ まぁ，主キーは候補キーの一つに過ぎないというのも事実な訳ですが．．． DB屋さんに反発食らわないかなぁ？(^^;

<cite><a href="http://d.hatena.ne.jp/koichik/20040521#1085133463" target="_blank" class="extlink">Hibernate 入門記 - 永続クラス</a></cite>

</blockquote>

<h3>主キーと候補キー</h3>

候補キーというのは、エンティティを一意に識別する属性の、最小単位の集合のことです。社会保障番号や、DNA なんかは、人を特定する候補キーになります。

主キーは、候補キーから選ばれたデータベース上のレコードを一意に識別するキーのことです。つまり、候補キーから選ばれます。単に、シーケンシャルな値でもかまいません。要は NULL を含まず、レコードが一意に識別できれさえすればいいのです。

つまり、主キーとは、RDB が便宜的に使うキーなのです。Hibernate では、オブジェクトID は、RDB に格納された段階で決まります。つまり、オブジェクトID は主キーなのです。

<h3>HQL を使って外部結合</h3>

HQL を使って検索する場合、find() メソッドを使って外部結合を行うには明示的にHQL文を書く必要があるみたいです。詳しくは、「<a href="http://d.hatena.ne.jp/koichik/20040828#1093699339" target="_blank" class="extlink">Hibernate 入門記 - HSQLDB の外部結合</a>」 とか 「<a href="http://d.hatena.ne.jp/koichik/20040920#1095687899" target="_blank"  class="extlink" />Hibernate 入門記 - 外部結合まとめ</a>」 とか 「<a href="http://d.hatena.ne.jp/koichik/20041016#1097911005" target="_blank" class="extlink" />Hibernate 入門記 - HQL と outer-join 属性</a>」 を参考に。

<h2 id="Spring との連携時、テストでLazyInitializationExceptionが出る場合の対処">SpringFramework との連携時、テストでLazyInitializationExceptionが出る場合の対処</h2>

SpringFramework と Hibernate を連携させてコーディングを行う場合、SessionFactory を SpringFramework から提供してもらうようにします。これは、トランザクション管理を、コンテナに任せようという意図で、SpringFramework + Hibernate では一般的に行われる処理です。

SpringFramework + Hibernate で Web アプリケーションを作る場合、「<b>Open Session In View</b>」という手法を使って、Session オブジェクトのオープンとクローズを、View で行うという方法をとることがあります。これは、Hibernate で Lazy load（遅延ロード）を行う場合に、View で遅延ロードが行われる場合があり、Session が閉じられてしまって、<b>LazyInitializationException</b> がでてしまうことがあるからです。

Web で使う場合はいいのですが、単体テストなどで、SpringFramework + Hibernate を使いたい場合、Session のオープンとクローズを View で行うことができません（Open Session In View を使うと、Webに依存したテストになってしまうから）。そこで、TransactionSynchronizationManager というクラスを使って、テスト時に、Session 管理を行う方法が、「<a href="http://forum.hibernate.org/viewtopic.php?t=929167" target="_blank" class="extlink">Open Session in View and testing</a>」 に載っています。これで、テスト時にも、SpringFramework + Hibernate でテストできるようになります。

<h2 id="org.hibernate.HibernateException: CGLIB Enhancement failed: &lt;className&gt;">org.hibernate.HibernateException: CGLIB Enhancement failed: &lt;className&gt;</h2>

classNameで定義されているクラスのコンストラクタが <strong>private</strong> になっているのが原因かもしれません。クラスをインスタンス化できない場合にスローされます。

対処方法は、例外の出ているクラスのコンストラクタを <strong>パッケージプライベート</strong>、<strong>protected</strong>、<strong>public</strong>のいずれかに変更します。

<h2>参考</h2>

+ Hibernate のリファレンスドキュメント (日本語)
<a href="http://www.hibernate.org/hib_docs/reference/ja/html/index.html" target="_blank" class="extlink">Hibernate Reference Document</a>

+ Hibernate だけでなく、データベース設計にまで触れられていておすすめ。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22/">Hibernate in Action (In Action)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/193239415X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Christian BauerGavin King<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=193239415X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おもしろくてためになる<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 薄いながらも十分な情報量。HibernateとSpringにも触れられています。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">軽快なJava―Better,Faster,Lighter Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ブルース・A. テイトジャスティン ゲットランドBruce A. TateJustin Gehtland岩谷 宏<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311201X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />率直な筆者の経験は必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />シンプル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Hibernate の基本的な使い方が載っています。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22/">Web+DB press (Vol.18)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774119016.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">WEB+DB Press編集部<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774119016&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 開発者のための Hibernate の解説書が日本語で登場しました。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank">Hibernate</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/487311215X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">James Elliott<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311215X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />コンパクトにまとまっている良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/193239415X.01.MZZZZZZZ.jpg" border="0" alt="Hibernate で O/Rマッピング">
-----
KEYWORDS:
Hibernate,O/Rマッピング,フレームワーク,データベース,継承関係,HQL
-----


PING:
TITLE: 財布/小物
URL: http://www.lifewitheverybreath.com/
IP: 142.4.210.131
BLOG NAME: 財布/小物
DATE: 01/03/2014 04:28:19 AM
Hibernate で O/Rマッピング してみる ： 基本編 - それはBooks
-----

PING:
TITLE: クルチアーニ
URL: http://www.hermosabeachrealtycr.com/%E3%82%AF%E3%83%AB%E3%83%81%E3%82%A2%E3%83%BC%E3%83%8B-c-205.html
IP: 142.4.210.131
BLOG NAME: クルチアーニ
DATE: 01/25/2014 11:06:11 PM
Hibernate で O/Rマッピング してみる ： 基本編 - それはBooks
-----

PING:
TITLE: 財布/小物
URL: http://www.1christian-t-shirts.com/
IP: 142.4.210.131
BLOG NAME: 財布/小物
DATE: 01/28/2014 05:21:43 PM
Hibernate で O/Rマッピング してみる ： 基本編 - それはBooks
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Hibernate で O/Rマッピング してみる ： 関係編
BASENAME: hibernate_or_2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/18/2004 02:02:19 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/193239415X.01.MZZZZZZZ.jpg" border="0" /></a>
</p>

Hibernate は O/R マッピングツールと呼ばれる、リレーショナルデータベースとオブジェクトモデルとの間を埋めるフレームワークです。

関連するテーブルのオブジェクトを管理する方法が、十数種類あります。<a href="http://www.xylax.net/hibernate/" target="_blank" class="extlink">Index of Relationships</a> のサイトに、Hibernate でサポートされる関係の一覧が載っています。非常に分かりやすかったのですが、さらに理解を深めるために、車輪の再発明をしてみようと思います。

こちらのサイトでも、<a href="http://park21.wakwak.com/~fumi/hibernate/mapping/index.htm" target="_blank" class="extlink">体験記</a> と言うことで、おんなじことしていました。参考にします。さらに、「<a href="http://www.wikiroom.com/koichik/?Hibernate%20%C6%FE%CC%E7%B5%AD" target="_blank" class="extlink" />Hibernate 入門記 - koichik</a>」 はすごい ・・・ (^^;

<section>

<h4>参考</h4>

<ul>
<li><a href="http://www.hibernate.org/hib_docs/reference/ja/html/" target="_blank" class="extlink">Hibernate リファレンスマニュアル</a></li>
<li><a href="http://wiki.bmedianode.com/Hibernate/" target="_blank" class="extlink">Hibernate Pad</a></li>
<li><a href="http://park21.wakwak.com/~fumi/hibernate/mapping/index.htm" target="_blank" class="extlink">Hibernate - マッピング体験記</a></li>
<li><a href="http://www.wikiroom.com/koichik/?Hibernate%20%C6%FE%CC%E7%B5%AD" target="_blank" class="extlink">Hibernate 入門記</a></li>
</ul>

<section>
-----
EXTENDED BODY:
<h2>Hibernate がサポートする関係</h2>

<ol>
<li><a href="#One-to-One (一対一)関係">One-to-One (一対一)関係</a></li>
<li><a href="#Many-to-One (多対一)関係">Many-to-One (多対一)関係</a></li>
<li><a href="#One-to-Many (一対多)関係">One-to-Many (一対多)関係</a></li>
<li><a href="#Many-to-Many (多対多)関係">Many-to-Many (多対多)関係</a></li>
<li><a href="#Collection 単一列値 関係">Collection 単一列値 関係</a></li>
<li><a href="#継承 マッピング">継承 マッピング (table per class)</a></li>
<li><a href="#Composite マッピング">Composite マッピング</a></li>
<li><a href="#再帰的な関連">再帰的な関連</a></li>
<li><a href="#そのほかの関係">そのほかの関係</a></li>
<li><a href="#コレクションに関して">コレクションに関して</a></li>
<li><a href="#Open Session in View">Open Session in View</a></li>
</ol>

<h2 id="One-to-One (一対一)関係">One-to-One (一対一)関係</h2>

One-to-One は<strong>同一の主キー</strong>を持つテーブルの関係を表します。派生関係とも言います。同一の主キーを持つテーブル同士の関係をマッピングできます。関連元の主キーと関連先の主キーが同じものを関連にします。

<img src="http://hamasyou.com/images/hibernate/onetoone.gif" alt="One-to-Oneの関係" />

マッピングは次のように行います。

<pre class="code"><code><span class="tag">&lt;hibernate-mapping&gt;</span> 
  <span class="tag">&lt;class 
      <span class="attr">name=</span><span class="value">&quot;com.hamasyou.model.Product&quot;</span> 
      <span class="attr">table=</span><span class="value">&quot;PRODUCT&quot;</span>&gt;</span> 
          ... 
      <span class="tag">&lt;one-to-one 
          <span class="attr">name=</span><span class="value">&quot;attribute&quot;</span> 
          <span class="attr">class=</span><span class="value">&quot;com.hamasyou.model.ProductAttribute&quot;</span> 
          <span class="attr">cascade=</span><span class="value">&quot;all&quot;</span> 
          <span class="attr">outer-join=</span><span class="value">&quot;auto&quot;</span> 
          <span class="attr">constrained=</span><span class="value">&quot;false&quot;</span> /&gt;</span> 
          ... 
  <span class="tag">&lt;/class&gt;</span> 
<span class="tag">&lt;/hibernate-mapping&gt;</span>
</code></pre>

XDoclet で書くとこうなります。関連元のクラスから <strong>@hibernate.one-to-one</strong> を指定しています。

<section>

<h4>Product.java</h4>

<pre class="code"><code><span class="comment">/** 
 * 販売品目属性 
 * @return 
 * 
 * @hibernate.one-to-one  
 *      class=&quot;com.hamasyou.model.ProductAttribute&quot; 
 *      cascade=&quot;all&quot; 
 */</span>
<span class="keyword">public</span> ProductAttribute getAttribute() { 
</code></pre>

</section>

関連先の ProductAttribute クラスは特別なタグは必要ありません。通常の @hibernate.class タグでテーブルと永続化クラスのマッピングを指定して、主キーのカラムに @hibernate.id を指定するだけです。

<section>

<h4>ProductAttribute.java</h4>

<pre class="code"><code><span class="comment">/** 
 * ProductAttribute 
 * 
 * @hibernate.class 
 *      table=&quot;PRODUCT_ATTR&quot; 
 */</span>
<span class="keyword">public</span> <span class="keyword">class</span> ProductAttribute <span class="keyword">implements</span> Serializable { 
    ... 中略 ... 
    <span class="comment">/** 
     * 品目No 
     * @return 
     *  
     * @hibernate.id 
     *      column=&quot;PRODUCT_NO&quot; 
     *      generator-class=&quot;assigned&quot; 
     */</span>
    <span class="keyword">public</span> Integer getProductNo() { 
</code></pre>

</section>

品目 (Product) と 販売品目属性 (ProductAttribute) は同じ主キーを持つので、One-to-One の関係をもてます。今回は、品目のほうに One-to-One の関係を持たせたので、品目のインスタンスを取得した時点で、販売品目属性のインスタンスも検索します。

<strong>カスケード (cascade) 属性</strong>は、オブジェクトに対して行った処理を関連オブジェクトにまで伝播するかどうかを指定するものです。 all、none、save-update、delete を指定できます。 all は更新と削除の両方を、save-update は更新を、delete は削除をそれぞれ伝播させます。

<section>

<h4>[ソースコード実行後の結果画面]</h4>

<pre class="console">
[品目No:1  名前：パソコン] [品目No:1  原価：300000]
[品目No:2  名前：冷蔵庫] [品目No:2  原価：130000]
[品目No:3  名前：エアコン] [品目No:3  原価：80000]
[品目No:4  名前：テレビ] [品目No:4  原価：40000]
</pre>

</section>

<section>

<h4>[ソースコード]</h4>

<a href="http://hamasyou.com/images/hibernate/src/onetoone/Main.java" target="_blank"> Main.java </a> | <a href="http://hamasyou.com/images/hibernate/src/onetoone/Product.java" target="_blank"> Product.java </a> | <a href="http://hamasyou.com/images/hibernate/src/onetoone/ProductAttribute.java" target="_blank"> ProductAttribute.java </a> | <a href="http://hamasyou.com/images/hibernate/src/onetoone/Product.hbm.xml" target="_blank"> Product.hbm.xml </a> | <a href="http://hamasyou.com/images/hibernate/src/onetoone/ProductAttribute.hbm.xml" target="_blank"> ProductAttribute.hbm.xml </a> | <a href="http://hamasyou.com/images/hibernate/src/onetoone/hibernate.cfg.xml" target="_blank"> hibernate.cfg.xml </a>

</section>

<h2 id="Many-to-One (多対一)関係">Many-to-One (多対一)関係</h2>

Many-to-One は<strong>参照関係</strong>を持つテーブルの関係を表します。外部キーを使って参照するときに使います。<strong>外部キーを持つ側から見た場合の関係</strong>です。

<img src="http://hamasyou.com/images/hibernate/manytoone.gif" alt="Many-to-Oneの関係" />

マッピングは次のように行います。

<pre class="code"><code><span class="tag">&lt;hibernate-mapping&gt;</span> 
  <span class="tag">&lt;class 
      <span class="attr">name=</span><span class="value">&quot;com.hamasyou.model.Product&quot;</span> 
      <span class="attr">table=</span><span class="value">&quot;PRODUCT&quot;</span>&gt;</span> 
          ... 
       <span class="tag">&lt;many-to-one 
          <span class="attr">name=</span><span class="value">&quot;category&quot;</span> 
          <span class="attr">class=</span><span class="value">&quot;com.hamasyou.model.Category&quot;</span> 
          <span class="attr">cascade=</span><span class="value">&quot;all&quot;</span> 
          <span class="attr">outer-join=</span><span class="value">&quot;auto&quot;</span> 
          <span class="attr">update=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">insert=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">access=</span><span class="value">&quot;property&quot;</span> 
          <span class="attr">column=</span><span class="value">&quot;CATEGORY_NO&quot;</span> 
          <span class="attr">not-null=</span><span class="value">&quot;true&quot;</span> /&gt;</span> 
          ... 
  <span class="tag">&lt;/class&gt;</span> 
<span class="tag">&lt;/hibernate-mapping&gt;</span>
</code></pre>

XDoclet で書くとこうなります。

<section>

<h4>Product.java</h4>

<pre class="code"><code><span class="comment">/** 
 * カテゴリ 
 * @return 
 *  
 * @hibernate.many-to-one 
 *      column=&quot;CATEGORY_NO&quot; 
 *      class=&quot;com.hamasyou.model.Category&quot; 
 *      not-null=&quot;true&quot; 
 *      cascade=&quot;all&quot; 
 */</span>
<span class="keyword">public</span> Category getCategory() { 
</code></pre>

</section>

column 属性でテーブルのどのカラムが関連先の主キーと関連付けされているかを指定しています。外部キーを指定していると言ったほうが分かりやすいですね。Category クラスには、特別なタグは不要です。 @hibernate.class タグでテーブルを指定して、 @hibernate.id で主キーを指定するだけです。

Many-to-One の関係も、One-to-One と同じく、品目 (Product) オブジェクトが検索された時点で、カテゴリ (Category) オブジェクトも検索されます。カスケード設定を行うことで、外部キーの参照先 (カテゴリオブジェクト) から登録されます。

結果画面を見ると面白いことに、カテゴリオブジェクトは、同一のカテゴリの場合には、一つのインスタンスしか生成されていません。

<section>

<h4>[ソースコード実行後の結果画面]</h4>

<pre class="console">
[品目No:1名前：HibernateinAction@127fa12][カテゴリNo:1名前：本@17f409c]
[品目No:2名前：SpringinAction@1c05ffd][カテゴリNo:1名前：本@17f409c]
[品目No:3名前：パソコン@de1b8a][カテゴリNo:2名前：家電@18bbc5a]
[品目No:4名前：テレビ@1e232b5][カテゴリNo:2名前：家電@18bbc5a]
[品目No:5名前：長袖の服@16f144c][カテゴリNo:3名前：衣服@13c6a22]
</pre>

</section>

<section>

<h4>[ソースコード]</h4>

<a href="http://hamasyou.com/images/hibernate/src/manytoone/Main.java" target="_blank"> Main.java </a> | <a href="http://hamasyou.com/images/hibernate/src/manytoone/Product.java" target="_blank"> Product.java </a> | <a href="http://hamasyou.com/images/hibernate/src/manytoone/Category.java" target="_blank"> Category.java </a> | <a href="http://hamasyou.com/images/hibernate/src/manytoone/Product.hbm.xml" target="_blank"> Product.hbm.xml </a> | <a href="http://hamasyou.com/images/hibernate/src/manytoone/Category.hbm.xml" target="_blank"> Category.hbm.xml </a> | <a href="http://hamasyou.com/images/hibernate/src/manytoone/hibernate.cfg.xml" target="_blank"> hibernate.cfg.xml </a>

</section>

<h2 id="One-to-Many (一対多)関係">One-to-Many (一対多)関係</h2>

One-to-Many は<strong>親子関係</strong>を持つテーブルを表します。オブジェクトから返されるものがコレクション型になります。遅延ロードを行うことができます。コレクション型は、基本的には <strong>Set</strong> を使うのが推奨されます。Set は一意なインスタンスの集合を表すからです。

<img src="http://hamasyou.com/images/hibernate/onetomany.gif" alt="One-to-Manyの関係" />

マッピングは次のように行います。

<pre class="code"><code><span class="tag">&lt;hibernate-mapping&gt;</span> 
  <span class="tag">&lt;class 
      <span class="attr">name=</span><span class="value">&quot;com.hamasyou.model.Order&quot;</span> 
      <span class="attr">table=</span><span class="value">&quot;ORDER_HEADER&quot;</span>&gt;</span> 
          ... 
      <span class="tag">&lt;set 
          <span class="attr">name=</span><span class="value">&quot;specifics&quot;</span> 
          <span class="attr">table=</span><span class="value">&quot;ORDER_SPECIFIC&quot;</span> 
          <span class="attr">lazy=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">inverse=</span><span class="value">&quot;false&quot;</span> 
          <span class="attr">cascade=</span><span class="value">&quot;all&quot;</span> 
          <span class="attr">sort=</span><span class="value">&quot;unsorted&quot;</span>&gt;</span> 
            <span class="tag">&lt;key <span class="attr">column=</span><span class="value">&quot;ORDER_NO&quot;</span>/&gt;</span> 
            <span class="tag">&lt;one-to-many 
                <span class="attr">class=</span><span class="value">&quot;com.hamasyou.model.OrderSpecific&quot;</span> /&gt;</span> 
      <span class="tag">&lt;/set&gt;</span> 
          ... 
  <span class="tag">&lt;/class&gt;</span> 
<span class="tag">&lt;/hibernate-mapping&gt;</span>
</code></pre>

XDoclet ではこう書きます。

<section>

<h4>Order.java</h4>

<pre class="code"><code><span class="comment">/** 
 * 受注明細 
 * @return 
 *  
 * @hibernate.set 
 *      table=&quot;ORDER_SPECIFIC&quot; 
 *      cascade=&quot;all&quot; 
 *      lazy=&quot;true&quot; 
 * @hibernate.collection-key 
 *      column=&quot;ORDER_NO&quot; 
 * @hibernate.collection-one-to-many  
 *      class=&quot;com.hamasyou.model.OrderSpecific&quot; 
 */</span>
<span class="keyword">public</span> Set getSpecifics() { 
</code></pre>

</section>

今回は、受注明細クラス (OrderSpecific.java) との関係が親子関係であったので、Set を使いました。<strong>Set、Bag をコレクション型として使う場合 (@hibernate.set, @hibernate.bag) は、@hibernate.collection-key を指定する必要があります。</strong>コレクション要素が一意になることを保証するキーを指定しなければなりません。今回は、ORDER_SPECIFIC テーブルの ORDER_NO カラムをキーに指定しました。

今回のように、関連先が複数のインスタンスになる場合、遅延ロードという手法をとることが出来ます。インスタンスの生成を、最初のアクセスまで遅らせることが出来る機能です。 <strong>lazy 属性</strong> に true を指定することで、遅延ロードが出来るようになります。

<dl>
<dt class="notice">遅延ロードの注意</dt>
<dd><p>遅延ロードする場合の注意点として、遅延ロードされるオブジェクトがロードされる際には、親オブジェクトに有効なセッションが関連付けられていなければなりません。</p>

<p>Webアプリケーションにおける遅延ロードの問題点は「<a href="#Open Session in View">Open Session in View</a>」 をご覧ください。</p></dd>
</dl>

受注明細クラスに、複合キー (composite-id) というものをつかいました。これは、複数のキーをあわせて主キーにするためのものです。複合キーを使うには、<strong>複合キー用のクラスを用意する必要があります</strong>。今回は、 OrderSpecificID というクラスを複合キークラスとして使用しました。

複合キークラスに必要な特性として下記の2点があります。

<section>

<h4>複合キークラスが必要な特性</h4>

<ol><li>java.io.Serializable を実装しなければならない</li><li>equals と hashCode をオーバーライドしなければならない</li></ol>

</section>

これは、複合キーが一意な値を表現するために必要なことになります。

XDoclet で複合キーを表現するには、複合キークラスを作成し、それを @hibernate.id タグで関連付ければいいだけです。

<section>

<h4>OrderSpecific.java</h4>

<pre class="code"><code><span class="comment">/**
 * 受注明細の主キー
 * @return
 * 
 * @hibernate.id
 *      generator-class=&quot;assigned&quot;
 *      type=&quot;com.hamasyou.model.type.OrderSpecificID&quot;
 */</span>
<span class="keyword">public</span> OrderSpecificID getSpecificId() {
  <span class="keyword">return</span> specificId;
}
<span class="keyword">public</span> <span class="keyword">void</span> setSpecificId(OrderSpecificID specificId) {
  <span class="keyword">this</span>.specificId = specificId;
}
</code></pre>

</section>

OrderSpecificID クラスのプロパティには、@hibernate.property タグが指定されています。@hibernate.class タグは必要ありません。これはつまり、OrderSpecificID クラスは、OrderSpecific クラスから使われると言うことがわかっているということになります。

<section>

<h4>[ソースコード実行後の結果画面]</h4>

<pre class="console">
[受注No:1受注日：2004-08-05 00:00:00.0@16acdd1]
  └ [受注No:1受注行No：1値段：1000@149d886]
  └ [受注No:1受注行No：3値段：920@1fe88d]
  └ [受注No:1受注行No：2値段：1500@1267649]
[受注No:2受注日：2004-04-0700:00:00.0@7cbde6]
  └ [受注No:2受注行No：1値段：150@148662]
  └ [受注No:2受注行No：2値段：300@1829e6f]
[受注No:3受注日：2004-11-1800:00:00.0@1977b9b]
  └ [受注No:3受注行No：1値段：5000@180f96c]
  └ [受注No:3受注行No：2値段：3000@7736bd]
</pre>

</section>

<section>

<h4>[ソースコード]</h4>

<a href="http://hamasyou.com/images/hibernate/src/onetomany/Main.java" target="_blank"> Main.java </a> | <a href="http://hamasyou.com/images/hibernate/src/onetomany/Order.java" target="_blank"> Order.java </a> | <a href="http://hamasyou.com/images/hibernate/src/onetomany/OrderSpecific.java" target="_blank"> OrderSpecific.java </a> | <a href="http://hamasyou.com/images/hibernate/src/onetomany/OrderSpecificID.java" target="_blank"> OrderSpecificID.java </a> | <a href="http://hamasyou.com/images/hibernate/src/onetomany/Order.hbm.xml" target="_blank"> Order.hbm.xml </a> | <a href="http://hamasyou.com/images/hibernate/src/onetomany/OrderSpecific.hbm.xml" target="_blank"> OrderSpecific.hbm.xml </a> | <a href="http://hamasyou.com/images/hibernate/src/onetomany/hibernate.cfg.xml" target="_blank"> hibernate.cfg.xml </a>

<h2 id="Many-to-Many (多対多)関係">Many-to-Many (多対多)関係</h2>

Many-to-Many (多対多)関係 は<strong>関係テーブル</strong>を表します。多重度が互いに 0以上 の場合、導出されるテーブルだと言えます。ログテーブルなんかも、Many-to-Many の関係になると思います。

<img src="http://hamasyou.com/images/hibernate/manytomany.gif" alt="Many-to-Manyの関係" />

マッピングは次のように行います。

<pre class="code"><code><span class="tag">&lt;hibernate-mapping&gt;</span> 
  <span class="tag">&lt;class 
      <span class="attr">name=</span><span class="value">&quot;com.hamasyou.model.Employee&quot;</span> 
      <span class="attr">table=</span><span class="value">&quot;EMPLOYEE&quot;</span>&gt;</span> 
          ... 
      <span class="tag">&lt;set 
          <span class="attr">name=</span><span class="value">&quot;projects&quot;</span> 
          <span class="attr">table=</span><span class="value">&quot;PROJECT_ASSIGN&quot;</span> 
          <span class="attr">lazy=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">inverse=</span><span class="value">&quot;false&quot;</span> 
          <span class="attr">cascade=</span><span class="value">&quot;all&quot;</span> 
          <span class="attr">sort=</span><span class="value">&quot;unsorted&quot;</span>&gt;</span> 
            <span class="tag">&lt;key <span class="attr">column=</span><span class="value">&quot;EMP_NO&quot;</span> /&gt;</span> 
            <span class="tag">&lt;many-to-many 
                <span class="attr">class=</span><span class="value">&quot;com.hamasyou.model.Project&quot;</span> 
                <span class="attr">column=</span><span class="value">&quot;PROJECT_NO&quot;</span> 
                <span class="attr">outer-join=</span><span class="value">&quot;auto&quot;</span> /&gt;</span> 
      <span class="tag">&lt;/set&gt;</span> 
          ... 
  <span class="tag">&lt;/class&gt;</span> 
<span class="tag">&lt;/hibernate-mapping&gt;</span>
</code></pre>

多重度が、相互に多対多の場合、関連テーブルと言うものを作って管理します。しかし、オブジェクト指向設計では関連テーブルと言うのは普通は意識しません。その証拠に、今回はクラスにプロジェクト割り当て (PROJECT_ASSIGN) 用のクラスが出てきませんでした。

逆にオブジェクトモデリングにおいては、関連クラスと言うものを導出する場合があります。関連クラスは、関連に意味がある場合に導出されます。通常、関連クラスは操作を持ちます。そういう場合は、クラスとして作成されます。関連クラスを作成した場合は、関連クラスと各々のクラスとで、Many-to-One の関係を定義すればよさそうです。

One-to-Many や Many-to-Many の関係では、片方のクラスから、他方のクラスのコレクションを返すメソッド用意しました。コレクションを定義する場合のマッピングを書くときには、以下の3つの点を守ればよさそうです。

<ol<li><strong>コレクションの型を指定する</strong></li><li><strong>自分の主キーとマッピングする相手のテーブルのカラムを指定する</strong></li><li><strong>相手のクラスとの関係を指定する</strong></li></ol>

XDoclet で書くと、こんな感じになります。

<section>

<h4>Employee.java</h4>

<pre class="code"><code><span class="comment">/** 
 * 割り当てプロジェクト 
 * @return  
 *  
 * @hibernate.set 
 *      cascade=&quot;all&quot; 
 *      lazy=&quot;true&quot; 
 *      table=&quot;PROJECT_ASSIGN&quot; 
 * @hibernate.collection-key  
 *      column=&quot;EMP_NO&quot; 
 * @hibernate.collection-many-to-many  
 *      column=&quot;PROJECT_NO&quot; 
 *      class=&quot;com.hamasyou.model.Project&quot; 
 */</span>
<span class="keyword">public</span> Set getProjects() {
</code></pre>
<div class="clear"></div>

</section>

<section>

<h4>Project.java</h4>

<pre class="code"><code><span class="comment">/** 
 * 割り当てられた社員 
 *  
 * @hibernate.set 
 *      inverse=&quot;true&quot; 
 *      cascade=&quot;all&quot; 
 *      lazy=&quot;true&quot; 
 *      table=&quot;PROJECT_ASSIGN&quot; 
 * @hibernate.collection-key 
 *      column=&quot;PROJECT_NO&quot; 
 * @hibernate.collection-many-to-many 
 *      column=&quot;EMP_NO&quot; 
 *      class=&quot;com.hamasyou.model.Employee&quot; 
 */</span>
<span class="keyword">public</span> Set getEmployees() { 
</code></pre>
<div class="clear"></div>

</section>

[Employee.java]5行目がコレクション型の指定です。8行目が自クラスの主キーに対応させる関係テーブルのカラム指定です。PROJECT_ASSIGN テーブルの EMP_NO カラムと自クラスの主キーを対応させています。11行目が、相手クラスとどういう関係かをあわしています。多対多の関係ですので、many-to-many を使っています。Projectクラスの主キーを関係テーブルのどのカラムにマッピングさせるかと言うことも指定しています。

[Project.java]5行目のinverse属性がポイントです。 many-to-many の関係は双方向関連になるので、Hibernateにどちらが逆関連かを教えてやることができます。どちらの方向が逆になるかはあまり深く考えなくてもいいようです。

Many-to-Many の関係の場合、プロジェクト割り当て (PROJECT_ASSIGN) テーブル用のクラスを作っていなかったので、3行目のコレクション指定時に table 属性でテーブル名を指定しました。また、many-to-many の関係では、 相手のクラスの主キーが、関連クラスのどのカラムに対応するかと言うことも指定しなければなりません。 @hibernate.collection-many-to-many で column を指定するのはそういう理由です。

<section>

<h4>[ソースコード実行後の結果画面]</h4>

<pre class="console">
---社員からプロジェクトを検索---
[社員No:1名前：山田太郎@ee6681]
  └[プロジェクトNO：1名前：翻訳プロジェクト@147c1db]
  └[プロジェクトNO：3名前：システム開発X@82d37]
[社員No:2名前：佐藤次郎@2f0df1]
  └[プロジェクトNO：2名前：社内開発A@1f3ce5c]
  └[プロジェクトNO：1名前：翻訳プロジェクト@147c1db]
[社員No:3名前：加藤三郎@13c6a22]
  └[プロジェクトNO：3名前：システム開発X@82d37]
[社員No:4名前：榊原四郎@15c07d8]
 
---プロジェクトから社員を検索---
[プロジェクトNO：1名前：翻訳プロジェクト@147c1db]
  └[社員No:2名前：佐藤次郎@2f0df1]
  └[社員No:1名前：山田太郎@ee6681]
[プロジェクトNO：2名前：社内開発A@1f3ce5c]
  └[社員No:2名前：佐藤次郎@2f0df1]
[プロジェクトNO：3名前：システム開発X@82d37]
  └[社員No:3名前：加藤三郎@13c6a22]
  └[社員No:1名前：山田太郎@ee6681]
</pre>

</section>

<section>

<h4>[ソースコード]</h4>

<a href="http://hamasyou.com/images/hibernate/src/manytomany/Main.java" target="_blank"> Main.java </a> | <a href="http://hamasyou.com/images/hibernate/src/manytomany/Employee.java" target="_blank"> Employee.java </a> | <a href="http://hamasyou.com/images/hibernate/src/manytomany/Project.java" target="_blank"> Project.java </a> | <a href="http://hamasyou.com/images/hibernate/src/manytomany/Employee.hbm.xml" target="_blank"> Employee.hbm.xml </a> | <a href="http://hamasyou.com/images/hibernate/src/manytomany/Project.hbm.xml" target="_blank"> Project.hbm.xml </a> | <a href="http://hamasyou.com/images/hibernate/src/manytomany/hibernate.cfg.xml" target="_blank"> hibernate.cfg.xml </a>

</section>

<h2 id="Collection 単一列値 関係">Collection 単一列値 関係</h2>

Collection 単一列値 関係 は、親子関係または参照関係にあるテーブルの特定のカラムだけを保持するコレクションを扱う関係です。

<img src="http://hamasyou.com/images/hibernate/collectionrawdata.gif" alt="Collection   単一列値の関係" />

マッピングは次のように行います。

<pre class="code"><code><span class="tag">&lt;list 
      <span class="attr">name=</span><span class="value">&quot;moneys&quot;</span> 
      <span class="attr">table=</span><span class="value">&quot;ORDER_SPECIFIC&quot;</span> 
      <span class="attr">lazy=</span><span class="value">&quot;true&quot;</span> 
      <span class="attr">inverse=</span><span class="value">&quot;false&quot;</span> 
      <span class="attr">cascade=</span><span class="value">&quot;none&quot;</span>&gt;</span> 
 
      <span class="tag">&lt;key <span class="attr">column=</span><span class="value">&quot;ORDER_NO&quot;</span> /&gt;</span> 
 
      <span class="tag">&lt;index 
          <span class="attr">column=</span><span class="value">&quot;SPECIFIC_NO&quot;</span> 
          <span class="attr">type=</span><span class="value">&quot;integer&quot;</span> /&gt;</span> 
 
      <span class="tag">&lt;element 
          <span class="attr">column=</span><span class="value">&quot;MONEY&quot;</span> 
          <span class="attr">type=</span><span class="value">&quot;java.lang.Integer&quot;</span> 
          <span class="attr">not-null=</span><span class="value">&quot;false&quot;</span> 
          <span class="attr">unique=</span><span class="value">&quot;false&quot;</span> /&gt;</span> 
  <span class="tag">&lt;/list&gt;</span>
</code></pre>

XDoclet で書くと、大体こうなります。

<pre class="code"><code><span class="comment">/** 
 * 金額リスト 
 * @return 
 *  
 * @hibernate.list  
 *      lazy=&quot;true&quot; 
 *      table=&quot;ORDER_SPECIFIC&quot; 
 * @hibernate.collection-key 
 *      column=&quot;ORDER_NO&quot; 
 * @hibernate.collection-index 
 *      column=&quot;SPECIFIC_NO&quot; 
 *      type=&quot;java.lang.Integer&quot;  
 * @hibernate.collection-element  
 *      column=&quot;MONEY&quot; 
 *      type=&quot;java.lang.Integer&quot;  
 */</span>
<span class="keyword">public</span> List getMoneyList() { 
</code></pre>
<div class="clear"></div>

単一列値を生データとして取り出す関係です。MONEY 列は、ユニークではないので、コレクションに list を使いました。

コレクションを使う場合は、自クラスの主キーとマッピングする列を、key として指定します。XDoclet の場合は @hibernate.collection-key がそれにあたります。相手のクラスの外部キーの列を指定します。

コレクションに含める値を element として指定します。XDoclet では @hibernate.collection-element で指定しました。MONEY 列を java.lang.Integer として格納すると支持しています。getMoneyList() の戻り値 List には、Integer 型でコレクション要素が入ります。

<dl>
<dt class="notice">リスト型の注意点</dt>
<dd>
<p>コレクションの型を list にしたときは、index 要素 (XDoclet では @hibernate.collection-index) を指定しなければいけません。これは、Foo[i] の i の部分を保持するテーブル上のカラムです。</p>

<p>今回は、SPECIFIC_NO 列が、明細行ごとにシーケンシャルな値を振られることにしているので、この列を指定しました。<strong>シーケンシャル値は 0 から格納しなければなりません。</strong> そうしないと、シーケンス番号がない部分には null が格納されることになります。</p></dd>
</dl>

<section>

<h4>[ソースコード]</h4>

<a href="http://hamasyou.com/images/hibernate/src/collectionrawdata/Main.java" target="_blank"> Main.java </a> | <a href="http://hamasyou.com/images/hibernate/src/collectionrawdata/Order.java" target="_blank"> Order.java </a> | <a href="http://hamasyou.com/images/hibernate/src/collectionrawdata/OrderSpecific.java" target="_blank"> OrderSpecific.java </a> | <a href="http://hamasyou.com/images/hibernate/src/collectionrawdata/Order.hbm.xml" target="_blank"> Order.hbm.xml </a> | <a href="http://hamasyou.com/images/hibernate/src/collectionrawdata/OrderSpecific.hbm.xml" target="_blank"> OrderSpecific.hbm.xml </a>

</section>

<h2 id="継承 マッピング">継承 マッピング (table per class)</h2>

継承 マッピングは、テーブル内のカラム値によってサブクラスを変えるような関係です。継承関係のクラスを単一のテーブルにマッピングします。そのため、サブクラスを判断するカラムが必要になります。

<img src="http://hamasyou.com/images/hibernate/inheritance.gif" alt="継承   マッピング" />

マッピングは次のように行います。

<pre class="code"><code><span class="tag">&lt;class 
    <span class="attr">name=</span><span class="value">&quot;com.hamasyou.model.Product&quot;</span> 
    <span class="attr">table=</span><span class="value">&quot;PRODUCT&quot;</span> 
    <span class="attr">dynamic-update=</span><span class="value">&quot;false&quot;</span> 
    <span class="attr">dynamic-insert=</span><span class="value">&quot;false&quot;</span> 
    <span class="attr">select-before-update=</span><span class="value">&quot;false&quot;</span> 
    <span class="attr">optimistic-lock=</span><span class="value">&quot;version&quot;</span> 
    <span class="attr">discriminator-value=</span><span class="value">&quot;0&quot;</span>&gt;</span> 
      ... 
    <span class="tag">&lt;discriminator <span class="attr">column=</span><span class="value">&quot;CATEGORY&quot;</span> /&gt;</span> 
      ... 
    <span class="tag">&lt;subclass 
        <span class="attr">name=</span><span class="value">&quot;com.hamasyou.model.ElectricProduct&quot;</span> 
        <span class="attr">dynamic-update=</span><span class="value">&quot;false&quot;</span> 
        <span class="attr">dynamic-insert=</span><span class="value">&quot;false&quot;</span> 
        <span class="attr">discriminator-value=</span><span class="value">&quot;1&quot;</span>&gt;</span> 
    <span class="tag">&lt;/subclass&gt;</span> 
    <span class="tag">&lt;subclass 
        <span class="attr">name=</span><span class="value">&quot;com.hamasyou.model.ClothingProduct&quot;</span> 
        <span class="attr">dynamic-update=</span><span class="value">&quot;false&quot;</span> 
        <span class="attr">dynamic-insert=</span><span class="value">&quot;false&quot;</span> 
        <span class="attr">discriminator-value=</span><span class="value">&quot;2&quot;</span>&gt;</span> 
    <span class="tag">&lt;/subclass&gt;</span> 
<span class="tag">&lt;/class&gt;</span>
</code></pre>

XDoclet で書くと、大体こうなります。Product クラスが スーパークラスで、ElectricProduct と ClothingProduct がサブクラスになっています。

<section>

<h4>Product.java</h4>

<pre class="code"><code><span class="comment">/** 
 * Product 
 *  
 * @hibernate.class 
 *      table=&quot;PRODUCT&quot; 
 *      discriminator-value=&quot;0&quot; 
 * @hibernate.discriminator 
 *      column=&quot;CATEGORY&quot; 
 */</span>
<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> Product <span class="keyword">implements</span> Serializable { 
</code></pre>

</section>

サブクラスはこんな感じです。

<section>

<h4>ElectricProduct &amp; ClothingProduct</h4>

<pre class="code"><code><span class="comment">/** 
 * ElectricProduct 
 *  
 * @hibernate.subclass  
 *      discriminator-value=&quot;1&quot; 
 */</span>
<span class="keyword">public</span> <span class="keyword">class</span> ElectricProduct <span class="keyword">extends</span> Product { 
... 
<span class="comment">/** 
 * ClothingProduct 
 *  
 * @hibernate.subclass  
 *      discriminator-value=&quot;2&quot; 
 */</span>
<span class="keyword">public</span> <span class="keyword">class</span> ClothingProduct <span class="keyword">extends</span> Product { 
</code></pre>

テーブル内の特定のカラムの値によって、生成するサブクラスを切り替えることが出来ます。

特徴的なのは、 <strong>discriminator</strong> タグと <strong>subclass</strong> タグです。XDoclet では <strong>@hibernate.discriminator</strong> と <strong>@hibernate.subclass</strong> です。discriminator で指定されたカラムの値をサブクラスの切り替え材料にします。

XDoclet ではスーパークラスに @hibernate.discriminator タグを指定します。column タグで指定したカラム値を元に、@hibernate.subclass discriminator-value で指定された値と一致するサブクラスが生成されます。

<dl>
<dt class="notice">net.sf.hibernate.WrongClassException がスローされる場合</dt>
<dd>
<p>discriminator-value で指定されていない値がデータベースに格納されていた場合、エラーになります。ただし、<em>スーパークラスの @hibernate.discriminator の force 属性を true にすることで、discriminator-value で指定されていない値がデータベースに格納されていた場合は、インスタンスを復元しなくなります</em>。</p>
 
<h4>[出力される例外]</h4>

<pre>net.sf.hibernate.WrongClassException</pre></dd>
</dl>

<section>

<h4>discriminator-value</h4>

「discriminator-value が指定したもの以外はこのサブクラスを使う」といった指定は出来なさそうです。discriminator-value を複数取ることも出来ませんでした。また、discriminator-value は大文字・小文字の区別をするようです。

</section>

<section>

<h4>[ソースコード]</h4>

<a href="http://hamasyou.com/images/hibernate/src/inheritance/Main.java" target="_blank"> Main.java </a> | <a href="http://hamasyou.com/images/hibernate/src/inheritance/Product.java" target="_blank"> Product.java </a> | <a href="http://hamasyou.com/images/hibernate/src/inheritance/ElectricProduct.java" target="_blank"> ElectricProduct.java </a> | <a href="http://hamasyou.com/images/hibernate/src/inheritance/ClothingProduct.java" target="_blank"> ClothingProduct.java </a> | <a href="http://hamasyou.com/images/hibernate/src/inheritance/Product.hbm.xml" target="_blank"> Product.hbm.xml </a>

<h2 id="Composite マッピング">Composite マッピング</h2>

Composite マッピングは、コンポジションモデルを一つのテーブルにマッピングする方法です。今回の例では、住所オブジェクトは、会社オブジェクトにコンポジションされています。が、住所オブジェクト用の独立したテーブルは存在せず、会社テーブルの一部となっています。

<img src="http://hamasyou.com/images/hibernate/composite.gif" alt="Composite   マッピング" />

マッピングは次のように行います。

<pre class="code"><code><span class="tag">&lt;class 
    <span class="attr">name=</span><span class="value">&quot;com.hamasyou.model.Company&quot;</span> 
    <span class="attr">table=</span><span class="value">&quot;COMPANY&quot;</span> 
    <span class="attr">dynamic-update=</span><span class="value">&quot;false&quot;</span> 
    <span class="attr">dynamic-insert=</span><span class="value">&quot;false&quot;</span> 
    <span class="attr">select-before-update=</span><span class="value">&quot;false&quot;</span> 
    <span class="attr">optimistic-lock=</span><span class="value">&quot;version&quot;</span>&gt;</span> 
        .... 
    <span class="tag">&lt;component 
        <span class="attr">name=</span><span class="value">&quot;address&quot;</span> 
        <span class="attr">class=</span><span class="value">&quot;com.hamasyou.model.Address&quot;</span>&gt;</span> 
      <span class="tag">&lt;property 
          <span class="attr">name=</span><span class="value">&quot;city&quot;</span> 
          <span class="attr">type=</span><span class="value">&quot;java.lang.String&quot;</span> 
          <span class="attr">update=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">insert=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">access=</span><span class="value">&quot;property&quot;</span> 
          <span class="attr">column=</span><span class="value">&quot;CITY&quot;</span> 
          <span class="attr">not-null=</span><span class="value">&quot;true&quot;</span> /&gt;</span> 
 
      <span class="tag">&lt;property 
          <span class="attr">name=</span><span class="value">&quot;prefectural&quot;</span> 
          <span class="attr">type=</span><span class="value">&quot;java.lang.String&quot;</span> 
          <span class="attr">update=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">insert=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">access=</span><span class="value">&quot;property&quot;</span> 
          <span class="attr">column=</span><span class="value">&quot;PREFECTURAL&quot;</span> 
          <span class="attr">not-null=</span><span class="value">&quot;true&quot;</span> /&gt;</span> 
 
      <span class="tag">&lt;property 
          <span class="attr">name=</span><span class="value">&quot;zip&quot;</span> 
          <span class="attr">type=</span><span class="value">&quot;java.lang.String&quot;</span> 
          <span class="attr">update=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">insert=</span><span class="value">&quot;true&quot;</span> 
          <span class="attr">access=</span><span class="value">&quot;property&quot;</span> 
          <span class="attr">column=</span><span class="value">&quot;ZIP&quot;</span> 
          <span class="attr">not-null=</span><span class="value">&quot;true&quot;</span> /&gt;</span> 
    <span class="tag">&lt;/component&gt;</span> 
        .... 
<span class="tag">&lt;/class&gt;</span>
</code></pre>

XDoclet で書くと、大体こうなります。Address クラスは JavaBean で、getter / setter には @hibernate.property タグが指定されています。@hibernate.class タグは必要ありません。

<pre class="code"><code><span class="comment">/** 
 * 住所 
 * @return 
 *  
 * @hibernate.component 
 *      class=&quot;com.hamasyou.model.Address&quot; 
 */</span>
<span class="keyword">public</span> Address getAddress() { 
</code></pre>

ライフサイクルが同じオブジェクトは、コンポジションとしてモデリングされることが多いです。コンポジットマッピングはコンポジットモデルを、単一のテーブルに割り当てる場合に使われます。

特別難しいものはなく、コンポジットの親となる 会社クラスの内部に 住所オブジェクトを持たせるだけです。XDoclet の指定では、getAddress() メソッドに <strong>@hibernate.component</strong> タグを指定するだけです。

One-to-One 関係との違いは、単純にテーブルが分かれているか分かれていないかな気がします。

<section>

<h4>[ソースコード]</h4>

<a href="http://hamasyou.com/images/hibernate/src/composite/Main.java" target="_blank"> Main.java </a> | <a href="http://hamasyou.com/images/hibernate/src/composite/Company.java" target="_blank"> Company.java </a> | <a href="http://hamasyou.com/images/hibernate/src/composite/Address.java" target="_blank"> Address.java </a> | <a href="http://hamasyou.com/images/hibernate/src/composite/Company.hbm.xml" target="_blank"> Company.hbm.xml </a>

</section>

<h2 id="再帰的な関連">再帰的な関連</h2>

再帰的な関連とは自分自身への関連を持っているような場合です。ツリー型を構成するようなオブジェクトの関係がそうです。

<img src="http://hamasyou.com/images/hibernate/recursion.gif" alt="再帰的な関連" />

この関係を表すには、子要素のオブジェクトからの視点を持ってマッピングファイルを作ることで可能になります。つまり、親となるレコードのIDを持つようにすればいいのです。マッピングファイルでは <strong>many-to-one</strong> の関係になります。

<pre class="code"><code><span class="tag">&lt;hibernate-mapping&gt;</span> 
  <span class="tag">&lt;class <span class="attr">name=</span><span class="value">&quot;com.hamasyou.hibernate.Organization&quot;</span> 
      <span class="attr">table=</span><span class="value">&quot;Organization&quot;</span>&gt;</span> 
        ... 
    <span class="tag">&lt;many-to-one 
          <span class="attr">name=</span><span class="value">&quot;parentOrganization&quot;</span> 
          <span class="attr">class=</span><span class="value">&quot;com.hamasyou.hibernate.Organization&quot;</span> 
          <span class="attr">column=</span><span class="value">&quot;parent_organization_id&quot;</span>/&gt;</span> 
        ... 
  <span class="tag">&lt;/class&gt;</span> 
<span class="tag">&lt;/hibernate-mapping&gt;</span>
</code></pre>

このように、自クラスに対して many-to-one の関係を指定してあげることで、親クラスへの参照を内部に持つようになります。

<h2 id="そのほかの関係">そのほかの関係</h2>

他の関係については、『<a href="http://park21.wakwak.com/~fumi/hibernate/mapping/index.htm" target="_blank" class="extlink">Hibernate - マッピング体験記</a>』 に非常に詳しく載っているので、そっちを参考にすることにします。参考にしたい関係があれば、随時更新するつもりです。

<h2 id="コレクションに関して">コレクションに関して</h2>

基本的にコレクション型は、<strong>Set</strong>か <strong>Bag</strong> を利用するのが良いようです。Javaでよく使われる List は、Hibernate では、テーブルにインデックス用のカラム (Foo[i] の i を保持するカラム) がなければ利用不可能です。例えば、シーケンシャルなIDみたいなものを順次インクリメントする場合であれば利用できます。

Set は一意な値を保持することを保証するコレクションなので、主キーを保持するオブジェクト型を格納するときには、これを使います。Bag は複数回格納されたことを保持する Set の派生と考えればよさそうです。

List は、Foo[i] の i を保持するカラムがテーブルに存在しなければ使えません。順次インクリメントされる ID のようなカラムがあれば使用できます。その際、<strong>ID は 0から始まるようにしなければいけません</strong>。さもなければ、足らない部分に null が挿入された List が出来上がってしまいます。

コレクション要素を使用する場合は、key 属性 (XDoclet では @hibernate.collection-key) が必須項目になります。また、インデックスを使って要素にアクセスする <strong>Map</strong>, <strong>List</strong>, <strong>配列</strong> は、index属性 (XDoclet では @hibernate.collection-index) が必須になります。Set, Bag では必要ありません。コレクションが Map の場合は <strong>index-many-to-many (XDoclet では @hibernate.index-many-to-many)</strong> を使う。

<h2 id="Open Session in View">Open Session in View</h2>

<strong>Open Session in View</strong> とは、ビューで Session の開始と終了を管理するパターンです。Hibernate は<strong>遅延ロード (lazy load)</strong> をサポートしています。この遅延ロードは、 Session が開かれていなければならないと言う条件があります。JSP + Servlet + JavaBean という形で開発を行った場合、遅延ロードは多くの場合  JSP でアクセスされたときに最初にロードされるようになります。

Session の開始と終了をビューで行わなければ、JSP で最初にアクセスされた場合に例外が発生してしまいます。これを防ぐのが「<strong>Open Session in View パターン</strong>」と言われるものです。具体的なコードは、Hibernate.org にサンプルが載っています。

<section>

<h4>[参考]</h4>

+ <a href="http://www.hibernate.org/Documentation/OpenSessionInView/" target="_blank" class="extlink">Open Session in View のサンプルコード</a>

</section>

実装には、サーブレットフィルタを利用します。リクエストがきたときに Session を開き、レスポンスを返すときに Session を閉じます。HIbernate は Session にオブジェクトのキャッシュを持ちますので、リクエストの最初から最後まで同じ Session を使いまわすことはパフォーマンスの向上が期待できます。

<h2>参考</h2>

+ Hibernate のリファレンスドキュメント (日本語)
<a href="http://www.hibernate.org/hib_docs/reference/ja/html/index.html" target="_blank" class="extlink">Hibernate Reference Document</a>

+ Hibernate で使える関係を全部まとめて紹介しています。
<a href="http://park21.wakwak.com/~fumi/hibernate/mapping/index.htm" target="_blank" class="extlink">Hibernate - マッピング体験記</a>

+ Hibernate だけでなく、データベース設計にまで触れられていておすすめ。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22/">Hibernate in Action (In Action)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/193239415X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Christian BauerGavin King<iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=193239415X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><strong>おすすめ平均</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おもしろくてためになる<a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font></td></tr></table></div>

+ 薄いながらも十分な情報量。HibernateとSpringにも触れられています。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">軽快なJava―Better,Faster,Lighter Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/487311201X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ブルース・A. テイトジャスティン ゲットランドBruce A. TateJustin Gehtland岩谷 宏<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311201X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />率直な筆者の経験は必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />シンプル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Hibernate の基本的な使い方が載っています。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22/">Web+DB press (Vol.18)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4774119016.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">WEB+DB Press編集部<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774119016&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119016/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 開発者のための Hibernate の解説書が日本語で登場しました。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank">Hibernate</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/487311215X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">James Elliott<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311215X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />コンパクトにまとまっている良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/193239415X.01.MZZZZZZZ.jpg" border="0" alt="Hibernate で O/Rマッピング">
-----
KEYWORDS:
Hibernate,O/Rマッピング,フレームワーク,データベース,関係,テーブル,マッピング
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 巧みな説明ができる人できない人    知的生きかた文庫
BASENAME: post_16
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 11/25/2004 05:43:56 PM
TAGS: 説明上手
-----
BODY:
優れた「説明力」は、問題の核心をついて、相手に納得できる答えを導き出させる武器になります。巷では多くの「How to本」といわれるような、どういう風に人と話したら分かってもらえるとか、こういう風に人に接すると幸せになれるといったことを説明する本がたくさん売っています。本書もその一つだと言ってしまっていいと思います。

巧みな説明、つまり<b>相手に理解してもらえる説明</b>をするにはどういう点に気をつけて話せばよいか、相手を納得させる資料はどういう風に作ればよいのかといった事を中心に本書は構成されています。

<ol><li>あらゆる「問題」をすっきり解決する、この「説明力」！</li>
<li>「巧みな説明=いい仕事」の絶対法則！</li>
<li>複雑な問題を「簡潔に伝える」技術</li>
<li>あなたの「説明力」を格段にアップさせる七つの鉄則</li>
<li>&quot;誰でもわかり、絶対誤解されない&quot;七つの実践テクニック</li>
<li>&quot;信頼される自分&quot;を作る最高の演出法</li>
<li>この「説明力」で必ず人は動く！</li>
<li>「巧みな説明」ができる人の人生開拓法！</li></ol>

すぐに使える話術を手に入れることができます。普段、説明力がないなぁと感じている人や、人前でプレゼンをする機会が多い人におすすめです。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の特徴は、「説明の違いによる結果の差」が具体的に説明されているところです。具体的な例があり、言葉の言い回しの違いによって相手の解釈の違いが分かるようになっています。

後半は、プレゼンテーションや資料の書き方に関しての説明が多かったです。「説明力」に関しての核となることをベースに、説明における場面での原則や鉄則が解説されています。

説明力のエッセンスは3つあります。

<ol style="margin-top:0px"><li>相手にわかる表現を使う。</li>
<li>論理的に伝える (書いたり、話したりする)。</li>
<li>相手の理解のレベルに合わせる。</li></ol>

説明の目的は「<strong>離れた二つの点を一致させること</strong>」にあります。つまり、自分と相手のコミュニケーションのギャップを埋める点にその目的があります。ギャップを埋めるには2つの方法があって、一つは自分が相手に歩み寄る。もう一つは、相手を自分に引き寄せる。本書はどちらかと言えば、後者の「相手を自分に引き寄せる」ための技術を説明している本です。

自分を動かすのは簡単だが、他人を動かすのは非常に労力を必要とします。『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638015/sorehabooks-22" target="_blnak" class="extlink">7つの習慣―成功には原則があった!</a>』 などの本では、他人を動かすための技術を学ぶより、自分が相手に歩み寄りなさいということが書いてあります。本書のような「How to本」を一蹴する言葉ですが、どちらにせよ技術は知っておいて損はないと思います。

かなり分かりやすい言葉で丁寧に書いてあるので、スムーズに読めます。文庫本ですから、通勤途中などにでも手軽に読めます。説明力が必要な場面と言うのは日常生活でも多々あり、よりよい説明へのきっかけに本書がなるように思います。

あなたは、「巧みな説明ができる人？できない人？」。知識の一つとしてどうぞ。

<h2>参考</h2>

+ 説明には「質問」がついて回ります。質問力に関してはこちら

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837971601/sorehabooks-22/">巧みな質問ができる人できない人―問題の「急所」をズバリ突く技術!</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837971601/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4837971601.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">中島 孝志<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4837971601&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />巧みな質問ができる人　できない人<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />読みやすい！納得させられる！！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />抜群に面白い！　役に立つ！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   />質問の本ではない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />少々とっちらかる<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837971601/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 説明、質問ができたら、今度は提案してみるのはどうですか？

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837973264/sorehabooks-22/">巧みな提案ができる人 できない人</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837973264/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4837973264.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">中島 孝志<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4837973264&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />買いですよ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />「提案」を切り口にしたビジネスマンの行動指南書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />感謝感謝です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />使える本だ！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />久しぶりに感動した１冊！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837973264/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4837971946.09.MZZZZZZZ.jpg" border="0" alt="巧みな説明ができる人できない人    知的生きかた文庫">
-----
KEYWORDS:
巧みな説明,できる人,できない人,中島孝志,問題,核心,伝える,文庫
-----


-----
CF50_CF_4: 中島 孝志 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/513X23HDSJL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4837971946/sorehabooks-22
CF50_CF: 三笠書房
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 巧みな提案ができる人 できない人    知的生きかた文庫
BASENAME: post_13
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 12/02/2004 06:04:37 PM
TAGS: 提案上手
-----
BODY:
「<strong>提案とは、問題解決力である</strong>」。本書は、ビジネスにおける日々の問題点を、提案によって改善する方法、 ノウハウ を非常にたくさんの事例を元に解説しています。どちらかと言えば、How(どのように) の視点が多く、提案書の書き方等も載っています。

提案と聞くと、提案の話し方だと思ってしまうが、本書は話し方の実用書ではない！提案とは、工夫・改善であり、どの点に着目して工夫・改善を行うとよい結果になるのかと言う点を体系だててまとめています。

以下目次です。

<ul><li>1章 仕事に革命を起こし、自分の夢を実現させる、それが「提案力」!</li>
<li>2章 まず"何を提案するか"―この「着眼力」を鍛え上げろ!</li>
<li>3章 問題発見→アイデア展開→企画提案」これが"いい仕事"の七つ道具</li>
<li>4章 提案して"人を動かす"技術―効果的な表現術から「提案書」作成まで!</li>
<li>5章 人の10倍成果を上げる「営業マン</li></ul>

&quot;ほんの少し&quot;変化を起こすだけで、効果は十分。提案による工夫・改善は、日々の積み重ねによって効果を発揮してきます。また、ビジネスにおける問題点が、提案による改善の着眼点になってきます。本書は、仕事を画期的に変える、「仕事の魔法=提案力」を授けてくれます。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>提案力とはいったいなんなのか？</h3>

<blockquote>

提案というのは、アイデアや発想に優れた人だけができる特別な技術ではない。誰でも、いつでも、どこでも簡単にできる能力なのである。

<cite>本書</cite>

</blockquote>

提案力を発揮するには、「9つ質問」という着目点があります。

<dl>
<dt>What?</dt><dd>何をしているのか？ほかに違うことができるのではないかを考える。</dd>
<dt>Who?</dt><dd>誰がしているのか？もっとほかにできる人はいないのかを考える。</dd>
<dt>With whom?</dt><dd>誰としているのか？もっとほかによいパートナーがいるのではないのかを考える。</dd>
<dt>Why?</dt><dd>どうしてその仕事が必要なのか？なぜそうするのかを考える。</dd>
<dt>Where?</dt><dd>どうしてそこでするのか？もっとよい場所がほかにあるのではないかを考える。</dd>
<dt>When?</dt><dd>いつするのか？その時期・時間より、もっといい場合があるのではないかを考える。</dd>
<dt>How?</dt><dd>どうしてその方法でするのか？もっと他のやり方はないのかを考える。</dd>
<dt>How often?</dt><dd>その回数でいいのか？もっと頻繁に、もっと少なくしたほうがいいのではないのかを考える。</dd>
<dt>How much?</dt><dd>いくらコストがかかっているのか？もっと多く、もっと少なくしたほうがいいのではないかを考える。</dd>
</dl>

<strong>提案力というのは、一歩一歩よりよい方向へ導く「改善」を行うこと</strong>です。その提案は効果が少ないかもしれない。けれど、少しでもよくなるのであれば立派な提案力だと言えます。少しずつの提案が、大きな成果を出すきっかけになります。

<h3>おすすめポイント</h3>

本書は、「提案力」という仕事で生きる技術を学べる非常によい本だと思います。文庫本ですから、会社の行き帰りに読むことができます。仕事の効率をよくするために本書を読むことは、「改善」だと思います。

改善、改善と言って、何を改善するといいのか、どう改善するといいのかという事は、自分で発見していくのが一番体に染み付くことだと思います。しかし、<strong>すぐに成果を出したい場合や、とりあえずはじめてみたい人に、本書を強くおすすめ</strong>します。How の部分が惜しげもなく解説されているので、すぐにでも使えます。

実用書と言うのは、筆者の押し売りになりがちです。しかし、本書は事例の紹介が先行し、それに関してポイントを述べる感じで進められているので、筆者の押し売りと言うよりはむしろ、どこでも使える技術・パターン解決集のような感じでもつかえると思います。

技術は知っていて損はありません。本に書いてあることを実践し、それを改善していくことで自分の力に変えていければいいと思います。ビジネスマンにおすすめの一冊です。

<h2>参考</h2>

+ 「説明力」にポイントを置いた、実用書です。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837971946/sorehabooks-22/">巧みな説明ができる人できない人</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837971946/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4837971946.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">中島 孝志<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4837971946&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />面白くてわかりやすい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   />エピソードのオンパレードで「核」がない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />もう少しポイントを整理してほしかった<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />読み物として面白い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />わかりやすい！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837971946/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ こちらは、「質問力」にポイントを置いた実用書となっています。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837971601/sorehabooks-22/">巧みな質問ができる人できない人―問題の「急所」をズバリ突く技術!</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837971601/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4837971601.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">中島 孝志<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4837971601&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />巧みな質問ができる人　できない人<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />読みやすい！納得させられる！！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />抜群に面白い！　役に立つ！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   />質問の本ではない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />少々とっちらかる<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837971601/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4837973264.09.MZZZZZZZ.jpg" border="0" alt="巧みな提案ができる人 できない人    知的生きかた文庫">
-----
KEYWORDS:
巧み,提案,できる人,できない人,文庫,仕事,問題解決
-----


-----
CF50_CF_4: 中島 孝志 (著)
CF50_URL: http://images-jp.amazon.com/images/P/4837973264.09.MZZZZZZZ.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4837973264/sorehabooks-22
CF50_CF: 三笠書房
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: プログラマの「本懐」 ~アーキテクトという選択
BASENAME: post_28
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 12/07/2004 07:00:05 AM
TAGS: アーキテクト
-----
BODY:
「アーキテクト」という役職は、プログラマに近い場所から、ビジネスマンに歩み寄る綱渡しを行う職業です。ただ技術を極めれば良いと言うわけではなく、ビジネスだけを知っているのでもない。両方のいいところをあわせもった職業と言えます。

本書は、アーキテクトという役職を、時には美しく、時にはシビアに紹介しています。単なるプログラマで終わりたくはない。それでも、プロジェクトマネージャーになるよりは、技術を極めたい人に、読んで欲しい一冊です。

アーキテクトの役職を、仮想プロジェクトを通して説明しているため、実際の業務における仕事が分かりやすく解説されています。一つの例だとして受け取ればいいと思いますが、かなり面白そうな職業だと言うことが分かると思います。

<strong>アーキテクトは、チームプレイであるソフトウエア開発の中心で、ITスキルとヒューマンスキルを両輪に、プロジェクトを成功に導きます</strong>。そんなアーキテクトの役割を感じてもらえる一冊だと思います。プロジェクトマネージャーに関する書籍と言うのはあれど、アーキテクトに焦点を合わせた書籍と言うのはまだまだ少ないです。そんな中で「アーキテクトとはなんなのか」を身近に感じれる一冊になっています。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、「アーキテクト」と呼ばれる職業について説明した書籍になっています。プログラマやSEからステップアップする先に、プロジェクトマネージャー以外の職業があるということを認識できる、一味違った面白さをもつ本になっています。

アーキテクトの役割を、本書の中では仮想プロジェクトを用いて説明されています。その中で、プロジェクトに必要なドキュメント、メンバーに対する配慮、設計の方針、テストの仕方、アジャイル開発についてなど、実際のプロジェクトで使っている知識を整理するのにも役立ちます。また、アーキテクチャとは何か、アーキテクチャの重要性など、ソフトウェア開発における大切なことも、一緒に学べてしまう構成になっています。

アーキテクトというと、システムの分析・設計に特化した役割だと思うかもしれませんが、本書で説明されている「アーキテクト」はそれだけではありません。技術は道具であり、お客様を幸せにするシステム、ビジネスに利益をもたらすシステムにするにはどうすればよいのかを考える職業だと言えます。

システム開発という仕事を楽しくするのは、アーキテクトの腕次第です。ただのプログラマで終わりたくないが、技術を極めたい人に、本書をおすすめします。非常に分かりやすい口調で書かれているので、とても読みやすいです。読み物として楽しんでください。

<h2>覚書き</h2>

<h3>アーキテクトとは何か</h3>

<blockquote>

技術は道具です。自己満足のためだけに使う技術は、それがいくら高度なものでも、所詮はオモチャに過ぎません。「技術力を人のために活かす」ことを考えたとき、個別の「技術」とそこにかかわる「人」、そして「活かす」ということ、それはビジネスセンスであったり目的意識というような曖昧なものかもしれませんが、それらは等しく重要です。<strong>技術を人に結びつける橋渡しとなるのが、それらを高いレベルで兼ね備えたアーキテクト</strong>なのです。

<cite>本書</cite>

</blockquote>

<h3>品質のよいシステムにするために</h3>

設計・実装において、プログラマが同じ判断基準に基づいて開発することが、品質のよいシステムを作る重要なポイントです。そのためには、詳細なアーキテクチャ設計書を用意することが大切です。

アーキテクチャ設計書は、プログラマが行う設計の指針を与えるようなものを盛り込むべきです。また、前提知識となるものがある場合は、分かる形で明記しておくことが大切です。

品質のよいシステムを作るためには、アーキテクチャ設計書だけでは不十分です。設計書を見ても理解できない場合や、確実にアーキテクチャを守って開発してくれるとは限らないからです。

アーキテクチャを確実に守らせるためのルールとなるものが「フレームワーク」です。どのようなフレームワークを用意するかどうかが、アーキテクトの腕の見せ所でもあります。

<h3>トラブルプロジェクトレスキュー</h3>

<blockquote>

破綻からの脱却には、破綻した現実にとらわれずに、まず理想形を描いてみる。

<cite>本書</cite>

</blockquote>

トラブルが発生すると、目の前はその問題を解決することだけしか見えなくなってしまいます。一息ついて、全体を見渡せる余裕を持ち、理想形を思い浮かべてみます。理想形が現実に実現可能かどうかを検証して、可能であれば、何とかその形に持っていけるようにすることも、アーキテクトの仕事の一つである。

トラブルにみまわれないためにアーキテクトとしてできることは、アーキテクチャで何を解決するのか、何から解決するのかを意識して、より効果的なアーキテクチャの設計と適用を行うことです。そのためには、システムで解決すべき問題点の優先順位を明確にしておくことが大切になってきます。

<h3>ウォード・カニンガムのインタビュー（パターンについて）</h3>

<blockquote>

 私が本当に言いたいのは、<strong>全てのプログラマがアーキテクトでなくてはだめだと思う</strong>、ということなんだ。アーキテクチャは極めて大事なので、誰もがいつでも気にかけていなければならないし、アーキテクチャを良くする責任を自分も負っていると考えなくちゃいけない。そうした責任を特定の個人に集中させるのは大間違いだ。もうひとつ、アーキテクチャの練習、という点がある。本当に重要なことが起きるのは前もって予測できないことが多い。だから、開発中そうしたことが起きたときに、自分が直面しているのはアーキテクチャに関わる問題なんだと認識できること、そして、アーキテクチャに関わる問題に対処する心積もりをしておくということが、パターンムーブメントの核心にあると私は強く思っているんだ。

<cite><a href="http://www.freeml.com/message/patterns@freeml.com/0002755" target="_blank" class="extlink">[DP/ML:0002755]</a></cite>

</blockquote>

「すべてのプログラマーよ、アーキテクトたれ。」ということですね。

<h2>参考</h2>

+ 職業としてのアーキテクト。実際の開発現場ではこんな人がアーキテクトです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715651/sorehabooks-22/">職業としてのソフトウェアアーキテクト</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715651/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894715651.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">マーク スウェル　ローラ スウェル　Marc T. Swell　Laura M. Swell　倉骨 彰<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894715651&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715651/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ アーキテクトに必要なスキルの一つUML、よくまとまっています。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221105/sorehabooks-22/">UML活用の極意―SE/アーキテクトの必須スキル</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221105/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4822221105.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1"><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822221105&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />ユーザ事例とUMLのチュートリアルがよい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />きちんとした内容である。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221105/sorehabooks-22/">Amazonで詳しく見る</a></font><img src="http://www.goodpic.com/mt/images/spacer.gif"   width="30" height="1" /><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822282082.09.MZZZZZZZ.jpg" border="0" alt="プログラマの「本懐」 ~アーキテクトという選択">
-----
KEYWORDS:
アーキテクト,アーキテクチャ,プログラマ,本懐,技術,人
-----


-----
CF50_CF_4: 山本啓二 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/412XGQRPX2L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4822282082/sorehabooks-22
CF50_CF: 日経BP出版センター
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: JUnitによるテストファースト開発入門
BASENAME: junit
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 12/12/2004 08:27:45 PM
TAGS: JUnit,TDD,テストファースト
-----
BODY:
「実装を行った後のテスト」と「実装を行う前のテスト」の違いを明確にしてくれる解説が多く、非常にためになりました。本書の中で「<strong>テストファースト</strong>」とは、「実装を行う前にテスト設計を立てること」だという、非常にシンプルな定義がされていて、テストファーストをはじめて聞く人にはわかりやすいのかなと思いました。

テスト段階で考えるべきことを重点的に解説してあり、プロジェクト中のテスト管理についてまで書かれていて、現場の開発者向けのテスト実践書という感じがしました。

テスト担当者や、これからプロジェクトに参加する開発者の人向けの本です。テストツールとして、「<a href="http://www.junit.org/" target="_blank" class="extlink">JUnit</a>」以外にも、「<a href="http://maven.apache.org/" target="_blank" class="extlink">Maven</a>」、「<a href="http://ant.apache.org/" target="_blank" class="extlink">Ant</a>」、「<a href="http://dbunit.sourceforge.net/" taget="_blank" class="extlink">DBUnit</a>」などのツールにも触れられていて、本書一冊で、現場のテスト実践のベースができてしまう気がしました。

とても参考になる事が載っているので、初学者の方におすすめです。自分なりの「テストファースト論」ができている人には、知っていることばかりかもしれません。
-----
EXTENDED BODY:
<h2>特徴</h2>

テストを行う上で、気をつけなければいけない事柄、テストケースの作り方、テストツールの使い方、テスト管理の仕方と、プロジェクトで即使える情報が満載です。

従来の開発方法論からイテレーション系の開発方法論に現代のシステム開発がなっている中で、テストの位置づけを詳細に説明されていて、<b>現場の匂いがぷんぷん</b>してきます。下手に抽象度を上げずに、具体的な解説や、具体的な成果物をベースにしているので、とても分かりやすいです。

今後、プロジェクトに「テストファースト」を取り入れたいと思っている開発者の方は、本書を指針にするとスムーズに開発が行っていけるかと思います。とても分かりやすく現場主義なので、開発者におすすめです。

<h2>参考</h2>

+ テストファーストを開発方法論にした「テスト駆動開発」はどうですか。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810714X/sorehabooks-22/">バグがないプログラムのつくり方 JavaとEclipseで学ぶTDDテスト駆動開発</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810714X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/479810714X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">川端 光義　倉貫 義人　兒玉 督司<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=479810714X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />非常に読みやすいＴＤＤの解説書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />TDD入門にはうってつけ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体で感じるテストの新しい形<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />わかりやすい<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810714X/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ テスト駆動開発の長、ケントベックのバイブル本です。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/">テスト駆動開発入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894717115.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ケント ベック　Kent Beck　長瀬 嘉秀　テクノロジックアート<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894717115&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />TDDプログラマの思考過程が読める<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />想定読者レベルはバリバリの実装者・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />XPに親しみを感じているなら<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ケントとペアプロ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ほっぷ・すてっぷ・じゃんぷ<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ JUnit に関する解説書

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/">JUnitイン・アクション</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797325143.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ビンセント マソル　テッド ハスティード　Vincent Massol　Ted Husted　クイープ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797325143&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />JUnitやその派生フレームワークの使用法解説<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797325720.09.MZZZZZZZ.jpg" border="0" alt="JUnitによるテストファースト開発入門">
-----
KEYWORDS:
テストファースト,JUnit,開発,Test-First Development
-----


-----
CF50_CF_4: サイバービーンズ (著), 今野 睦 (監修)
CF50_URL: http://ec2.images-amazon.com/images/I/51MS81BY1SL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797325720/sorehabooks-22
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Webアプリケーションのセキュリティ完全対策―不正アクセスや情報漏洩を防ぐ
BASENAME: web
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 12/19/2004 04:19:19 PM
TAGS: セキュリティ
-----
BODY:
セキュリティーとか個人情報保護とか、ソフトウェア開発においても守るべきこと、気をつけるべきことがたくさんあります。特に、Webアプリケーションでは、不特定多数のクライアントから、ネットワークを通じてアプリケーションを動作させます。

クライアント側で何を行われているか、サーバーサイドからでは分からない分、スタンドアローンのアプリケーションに比べて、注意する点が多くあります。入力値のチェックから、SQLインジェクション、セッション乗っ取りなど、さまざまなことに対処しなければなりません。

本書では、Webアプリケーションに焦点を当てて、実際の攻撃方法とその予防策を例を挙げて説明しています。Webアプリケーション開発において、最低限対応しなければならないことが分かりやすく説明されています。本書に載っている予防は、ベター(better) ではなく マスト(must) の要件になります。
-----
EXTENDED BODY:
<h2>覚書き</h2>

<h3>セキュア・プログラミングの一般原則</h3>

とにかく、セキュアなシステムを作ろうと思ったら、「信用」しないことが大切。プログラム同士はもとより、クライアントから送られてきたデータは、絶対にそのまま信頼しない。セキュアなシステムを構築するには、以下の点に注意する。

<dl>
<dt>フェイルセーフ</dt><dd>不測の事態、エラーが少しでも起こったら、直ちに安全な方向に処理を誘導する。</dd>
<dt>明示的に許可されないもの以外はすべて禁止</dt><dd>許可できない文字を決めるのではなくて、許可できる文字を決めてそれ以外はすべて禁止するように処理を施す。</dd>
<dt>相互不信</dt><dd>プログラム同士はお互いに信用しない。クライアントの入力を、チェックなしで許可するようには絶対にしない。</dd>
<dt>最低限のユーザ権限</dt><dd>アプリケーションを実行するユーザの権限は、最低限のものにしておく。管理者権限で動かすようなことはしない。</dd>
</dl>

<h3>Webアプリケーションの一般原則</h3>

Webアプリケーションは特にセキュリティを意識しなければならないシステムの一つです。

<dl>
<dt>入力文字種チェック</dt><dd>アプリケーション仕様で許可された文字以外はすべて禁止するようにして、不正な文字列を入力されてもビクともしないようにする。</dd>
<dt>エスケープ処理</dt><dd>入力文字に関して、エスケープ処理を施す。Webブラウザでの特殊文字「&quot;」「&amp;」「&lt;」「&gt;」や、SQL文で使われるクウォート、コメント文字などをエスケープして、不正な処理を行えないようにする。</dd>
<dt>Webサーバの設定</dt><dd>Webサーバの設定で、公開を意図していないファイルに関して保護できるような設定を心がける。</dd>
<dt>セッション管理</dt><dd>HIddenフィールドやCookieの使い方に気をつけ、セッション乗っ取りされないようにする。</dd>
</dl>

<h3>ディレクトリ・リスティング</h3>

<h4>内容</h4>

ディレクトリ配下にあるファイルの一覧を見られてしまう。それによって、重要なファイルが置いてあったり、公開を意図していないファイルをダウンロードされてしまったりする。

<h4>原因</h4>

主な原因はWebサーバの設定にある。基本的に、ディレクトリ名で終了されたURLは、index.html/index.htm というファイルがなければ、ファイルの一覧を表示する仕組みになっている。

<h4>対策</h4>

主な対策としては、すべてのディレクトリに、「index.html」ファイルを置く。これは、ほとんどのWebサーバでデフォルトの表示ファイルが index.html になっていることに帰伏する。そのほか、Webサーバの設定で、ディレクトリ一覧を表示しないようにすることでも対応できる。

<h4>その他</h4>

ディレクトリ・リスティング以外にも、類推しやすいファイル名を付けてしまうと、URLを直接入力された場合に見つけられてしまう可能性がある。重要なファイルは、公開ディレクトリに置かないことが大切であり、一時的に公開ディレクトリにおく場合でも、類推しにくいランダムな値をファイル名にしたりする処置をとる必要がある。

<h3>SQLインジェクション</h3>

<h4>内容</h4>

ユーザの入力によって、不正なSQL文が実行されてしまい、データの改ざんや個人情報の流出、成りすましなどがおこなわれてしまう。

<h4>原因</h4>

ユーザの入力をそのままSQL文として使ってしまう。SQL文で使われるパラメータなどは、適切にエスケープする必要がある。

<h4>対策</h4>

ビジネスルールに従って、不正な入力は入力エラーとしてチェックする。不正な入力ではないが、SQLの特殊文字だった場合には、適切にエスケープする。言語に実装されている、「コンパイル済みSQL」を使って、エスケープ抜けを防ぐこともできる。

<h4>その他</h4>

SQLインジェクションの例としては、「' (シングルクウォート)」を入力される場合に起こることが多い。また、「-- (コメント)」 の入力を許可した場合にも起こる。

<h3>クロスサイト・スクリプティング (XSS)</h3>

<h4>内容</h4>

Webページに埋め込まれたリンクなどによって、不正な JavaScript や VBScript が実行され、ユーザの成りすましやCookie による個人情報の漏洩などが起こる。

<h4>原因</h4>

掲示板など、入力された文字をそのまま画面に出力してしまう場合に起こる。悪意のあるスクリプトによって、Cookie などの情報が漏洩してしまい、ユーザの成りすましやセッションハイジャックなどが起こる。

<h4>対策</h4>

HTMLタグの適切なエスケープ。「&lt;」「&gt;」「&amp;」「&quot;」などを、それぞれ「&amp;lt;」「&amp;lt;」「&amp;amp;」「&amp;quot;」にエスケープする。

<h4>その他</h4>

掲示板や、ゲストブックなどの、HTMLタグを含む文字列を入力された場合に発生する場合があるので注意。

<h3>チェックリスト</h3>

本書に書かれていることを実践して、初めて「<b>最低限のセキュリティが保たれる</b>」レベルになると思います。本書は、非常に基礎的でオーソドックスなポイントを紹介しています。ですが、これだけでは絶対に足りないと思います。セキュリティポリシーを定めたり、日ごろからログのチェックを行ったりといったことも実践していくべきです。

本書に載っている点で、心にとまった点をリストアップしておきます。

<ol><li>ファイアーウォールは、セキュリティホールに関しては無力</li>
<li>画面遷移の正当性チェックを「Referrer」のみに依存させない。Referrer は容易に書き換えられる</li>
<li>HTMLエンコードを怠ると、「<a href="http://e-words.jp/w/E382AFE383ADE382B9E382B5E382A4E38388E382B9E382AFE383AAE38397E38386E382A3E383B3E382B0.html" target="_blank">クロスサイトスクリプティング</a>」の餌食にされる</li>
<li>フェイルセーフを心がける</li>
<li>許可していないものはすべて禁止</li>
<li>プログラム同士をお互いに信用しない</li>
<li>アプリケーションは、最低限のユーザ権限で実行する</li>
<li>入力文字チェックを忘れない</li>
<li>エスケープ処理を忘れない</li>
<li>Webサーバの設定は適切か</li>
<li>Hiddenフィールドや Cookie に重要な情報を持たせない</li>
<li>ディレクトリ・リスティングされないようになっているか</li>
<li>重要なファイルのファイル名を類推しやすいものになっていないか</li>
<li>公開ディレクトリに不要なファイルが存在しないか</li>
<li>重要なページが検索エンジンに登録されないようになっているか</li>
<li>HTMLコメントに、設定情報などが書かれていないか</li>
<li>認証は、安全な方法で行われるようになっているか</li>
<li>データベースへパスワードを格納するとき、「<a href="http://e-words.jp/w/E383A1E38383E382BBE383BCE382B8E38380E382A4E382B8E382A7E382B9E38388.html" target="_blank">メッセージダイジェスト</a>」になっているか</li>
<li>セッションIDに、連番などの類推しやすい値が使われていないか</li>
<li>URLパラメータの変更で、重要なページが表示されてしまわないか</li>
<li>一覧画面から詳細画面への遷移で、再度アクセス権限チェックをおこなっているか</li>
<li>Cookie の有効期限は適切か</li>
<li>セキュアページ(SSL)の Cookie は secure  属性が付けられているか</li>
<li>Referrer 漏洩対策にリダイレクタ等の仕組みを使っているか</li>
<li>SQLインジェクション対策がなされているか</li>
<li>チェック漏れのアプリケーション例外が画面に表示されないようになっているか</li>
<li>SQLで使われる特殊文字はエスケープされているか</li>
<li>RDBMSの権限は、最小のものが付与されているか</li>
<li>ファイル名のパスを入力される場合、「パスの乗り換え」が発生しないか</li>
<li>OSコマンドを入力させる場合、安全な方法で実行できているか</li>
<li>HTMLタグが反映されるようになっていないか</li></ol>

<h4>参考</h4>

<a href="http://www.atmarkit.co.jp/fsecurity/rensai/webhole01/webhole01.html" target="_blank" class="extlink">@IT 「Webアプリケーションに潜むセキュリティホール」</a>

<h2>参考</h2>

+ @IT の記事で、Webアプリケーションのセキュリティ対策記事がありました。

<a href="http://www.atmarkit.co.jp/fsecurity/rensai/webhole01/webhole01.html" target="_blank" class="extlink">@IT 「Webアプリケーションに含むセキュリティホール」</a>

+ 「IPA ISEC セキュア・プログラミング講座」より

<a href="http://www.ipa.go.jp/security/awareness/vendor/programming/intro.html" target="_blank" class="extlink">IPA ISEC セキュア・プログラミング講座</a>

+ 「マイクロソフトでの必読書」といわれている、セキュリティ対策本です。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004460/sorehabooks-22/">Writing secure code―プログラマのためのセキュリティ対策テクニック (上)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004460/sorehabooks-22/"><img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/h_4891004460.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Michael Howard　David LeBlanc<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4891004460&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004460/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004479/sorehabooks-22/">Writing secure code―プログラマのためのセキュリティ対策テクニック (下)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004479/sorehabooks-22/"><img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/h_4891004479.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Michael Howard　David LeBlanc<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4891004479&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004479/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ セキュアなコードを書くための本です。C/C++ プログラマ向けの濃い本です。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282104/sorehabooks-22/">セキュアソフトウェア</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282104/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4822282104.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Greg Hoglund　Gary McGraw　トップスタジオ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822282104&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282104/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ オライリーから発売している、セキュアプログラミングの本です。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22/">セキュアプログラミング―失敗から学ぶ設計・実装・運用・管理</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4873111757.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">マーク・G. グラフ　ケネス・R.ヴァン ワイク　Mark G. Graff　Kenneth R.van Wyk　新井 悠　一瀬 小夜<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873111757&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />全般を学ぶには、良い本でしょうか<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />内容は良いけど、訳が悪すぎ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />「プログラミング」といいつつもその周辺に関する注意が豊富な本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822229718.09.MZZZZZZZ.jpg" border="0" alt="Webアプリケーションのセキュリティ完全対策―不正アクセスや情報漏洩を防ぐ">
-----
KEYWORDS:
Web,アプリケーション,セキュリティ,不正アクセス,情報漏洩,個人情報保護,完全対策,防ぐ
-----


-----
CF50_CF_4: 徳丸 浩 (著), 田畑 拓 (著), 三好 雅貴 (著), 園田 健太郎 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51EA0M5ZEJL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4822229718/sorehabooks-22
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: サーバーサイドJavaプログラマー養成講座―ケーススタディで実践するオブジェクト指向開発プロセス
BASENAME: java_10
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 12/24/2004 05:41:23 AM
TAGS: J2EE,Java,わかりやすい,定番,良書
-----
BODY:
「サーバーサイドJavaがはじめての人向け」の本でもなく、「J2EE技術をフルに使って複雑なアプリケーションを開発する人向け」の本でもありません。本書は、その中間「『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797314095/sorehabooks-22" target="_blank" class="extlink">はじめてのJSP&amp;サーブレット</a>』は読んだけど、次に何を読めば上達するの？」という人向けになっています。

当然、サーブレット・JSPとは？という初歩的なことは書いてありません。逆に、J2EEシステムの設計技法やアンチパターンについても書いてありません。本書に載っているのは、オーソドックスなJ2EEアプリケーションのアーキテクチャを適用した場合の開発ケースです。

企業プログラマーとしてデビューしたけど、本格的なJ2EEアプリケーションは初めてと言う人向けの書籍になっています。内容的にも、無難なところで収まっていると言う感じです。濃すぎず、薄すぎずと言ったところです。

J2EEアプリケーション開発者としてデビューした時は、「アーキテクチャ」なんて言葉を始めて聞いたし、「UML」なんて言葉は知りませんでした。DAO(Data Access Object)パターンやMVC(Model View Controller)パターンなんてのも、イメージすらわきませんでした。本書では、実際の開発プロセスを流れにそって進めているので、開発というものの雰囲気をとてもよくつかめるようになっています。
-----
EXTENDED BODY:
<h2>特徴</h2>

「UMLを使ってRUPを使って開発をします。」と言われてピンと来ないJ2EE開発者は本書が開発の全体像を照らす指針になってくれると思います。

バウンダリ・コントロール・エンティティ(BCE)と分けてWebアプリケーションを設計する「<strong>ロバストネス分析</strong>」という方法を本書では解説しています。バウンダリでは「FrontControllerパターン」を、コントローラでは、「<strong>Commandパターン</strong>」を、エンティティでは「<strong>DAOパターン</strong>」を使って実装する方法が載っています。プロジェクト全体では、テスティングに関して「<b>JUnitやCactusやMock Object</b>」を使う方法が解説されています。<strong>リファクタリング</strong>の方法やAntを使った自動デプロイ、応用アーキテクチャの説明と、実際のJ2EEアプリケーション開発(サーブレット・JSPを使った場合)を意識されています。

ケーススタディには、レコードショップのサンプルが使われています。検索・登録・更新・削除を盛り込んだ、実践的なものだと思います。

読み進めるためには、多少の予備知識(UMLの知識、サーブレット/JSPの知識)が必要となりますが、初心者にもおすすめできる内容です。「サーバーサイドの歩き方ガイドブック」の名に恥じない出来だと思います。新人研修等の参考におすすめです。

<h2>覚書き</h2>

<h3>Commandパターン</h3>

コマンドは、ユースケースにつき1クラスを定義します。コマンドクラスとユースケースを一対一で対応させることで、シンプルで理解しやすい設計になります。

コマンドクラスは、executeメソッドを持つ Commandインターフェースを実装します。ユースケースの処理は、コマンドクラスのexecuteメソッドに書くことにします。

<h3>DAOパターン</h3>

DAOは1エンティティにつき1つのDAOを対応させて定義します。状態を保持せず、追加(Create)、検索(Refer)、更新(Update)、削除(Delete)のメソッドのみを持ちます(CRUDメソッドと呼びます)。

エンティティオブジェクトとは、ユースケースで使用するデータベースのレコードと同じデータ構造を持つクラスです。ただし、<b>1テーブル=1エンティティとは限りません</b>。ユースケースの視点からエンティティを捉えるので、テーブルを結合したデータであっても1エンティティと捕らえることもあります。

<h3>応用アーキテクチャ</h3>

FrontControllerパターンと呼ばれる、一つのメインサーブレットがすべてのリクエストを受け取り、個別のコマンドクラスに処理を委譲するパターンがあります(詳しくは、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22" target="_blank" class="extlink">実践J2EE</a>』を見るとよく分かります)。最近のフレームワークではほとんどこのパターンが使われています。

メインサーブレットと個別のコマンドクラス(コントローラクラス)は、外部XMLでマッピングされるのが多いです。

例外処理に関しては、メインサーブレットで例外処理を行います。それぞれの層(レイヤー)で送出された例外を元に処理を切り分けます。こうすることで、例外処理がコマンドクラスやDAOクラスに散らばらずに管理できます。層ごとに送出する例外クラスを定義するのが普通です。

<h2>参考</h2>

+ サーブレット/JSPの仕組みを理解するならこれから。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/">サーブレット/JSP プログラミングテクニック 改訂版</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797324120.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">今野 睦　戸田 和宏　藤村 浩士　高安 厚思　西川 麗<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797324120&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 実際のJ2EE開発に慣れてきたらさらに踏み込むために本書を。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">実践J2EE システムデザイン&業務運用[仮題・予定価格]</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロッド・ジョンソン<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322888&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Spring Freamworkの作者に迫れる唯一の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />坊主にくけりゃ袈裟までにくい?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は充実、ただ経験、印象に頼るところも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに実践　まさに必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「現場主義」といったスタンスが根底に貫かれている<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ J2EE パターンを学ぶならイチオシ。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/">J2EEパターン―明暗を分ける設計の戦略</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894714345.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ディーパック・アラー　ジョン・クルーピ　ダン・マークス　ウルシステムズ株式会社　中野 明彦<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714345&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />副題の言うとおり<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これが待ち望んでいたもの<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />J2EEにとらわれず、すべてのJAVA Webアプリケーション開発者に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />総てのJ2EE開発者必携!! 持ってない?! いますぐ買いに走れ!!<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797325976.09.MZZZZZZZ.jpg" border="0" alt="サーバーサイドJavaプログラマー養成講座―ケーススタディで実践するオブジェクト指向開発プロセス">
-----
KEYWORDS:
サーバーサイド,Java,プログラマー,養成,ケーススタディ,実践,オブジェクト指向,プロセス,サーブレット,JSP,設計
-----


-----
CF50_CF_4: レッドフォックス (著), 勝又 啓太 (著), 河野 勝則 (著), 浅利 和範 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/5114lvx381L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797325976/sorehabooks-22
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Javaプログラミングの処方箋
BASENAME: java_9
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 01/02/2005 12:11:29 AM
TAGS: Java
-----
BODY:
対象読者は、「Java入門を終えて、実務や実際のアプリ開発に着手する初級者」な感じです。『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22" target="_blank" class="extlink">Effective Java プログラミング言語ガイド</a>』ほど濃い内容ではありませんでした。言語の基礎を学び終えて、Javaプログラミングの基礎を身に付ける時に有効に利用できそうです。

内容は、鉄則ということでこの場合はこうするべしという感じのことが50程載っています。「開発環境に関する鉄則」、「実装に関する鉄則」、「テスト、デバッグに関する鉄則」、「設計に関する鉄則」と、扱う範囲は結構広い感じです。そのため、内容は多少物足りない部分もあります。

言語仕様を理解した後に、実際の業務に利用できるレベルに成長するための実用本として活用できます。本書をマスターした後は、更なるステップのために『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22" target="_blank" class="extlink">Effective Java プログラミング言語ガイド</a>』を読むのをおすすめします。
-----
EXTENDED BODY:
<h2>特徴</h2>

鉄則と書いてありますが、そこまで厳格なものではなく、場合によってはこうしたほうが利点があるという程度に捕らえるといいと思います。

結構、現場でバリバリやっている人にとっては当たり前のことだけど、新人にわざわざ教えるのが時間の無駄というようなことが載っています。「本書を読め」でかなりの時間の有効活用ができそうです。

鉄則の目次です。

<ol>▼ <b class="border_bottom">開発の基本に関する鉄則</b>
<li>SDKとJRE</li>
<li>ソフトウェア開発の三種の神器</li>
<li>オープンソースの利用</li>
<li>仕様書の鉄則</li>
<li>javadoを活用しよう</li>
<li>Apache Ant を使おう</li>
▼ <b class="border_bottom">実装に関する鉄則</b>
<li>郷に入っては郷に従え</li>
<li>プリミティブ型あれこれ</li>
<li>スタックトレースを恐れるなかれ</li>
<li>byte型は符号付き</li>
<li>配列を上手に使おう</li>
<li>浮動小数点数の落とし穴</li>
<li>文字数と桁数</li>
<li>むだな文字列の生成を避ける</li>
<li>パラメータ読み込みの極意</li>
<li>書式化の極意</li>
<li>日付クラスの使い方</li>
<li>多値を返すメソッドの作成</li>
<li>賢い例外処理</li>
<li>finally の注意事項</li>
<li>static メソッドと static フィールド</li>
<li>知っておくと得する小ワザ</li>
<li>正規表現の極意</li>
<li>タイプセーフなenum</li>
<li>プロセスを呼び出す</li>
<li>スレッド処理に極意</li>
▼ <b class="border_bottom">テスト、チューニング、保守に関する鉄則</b>
<li>デバッグの極意</li>
<li>ユニットテストを作る</li>
<li>リファクタリング</li>
<li>チューニングの基本</li>
<li>アプリケーションの異常終了を検出したい</li>
<li>プログラムを作るのを嫌ってはいけない</li>
<li>既存のインターフェースを変更する前に</li>
▼ <b class="border_bottom">設計に関する鉄則</b>
<li>オブジェクト指向プログラミングをしないという選択</li>
<li>何はなくてもインターフェース</li>
<li>デザインパターンの適用</li>
<li>不適切な throws宣言</li>
<li>継承とアプリケーション例外の定義</li>
<li>例外を補足しないという選択</li>
<li>バージョン管理の考え方</li>
<li>孤高のクラス</li>
<li>親切があだとなる − インターフェースは必要最低限に</li>
<li>変更不能！</li>
<li>コンストラクタの落とし穴</li>
<li>カプセル化</li>
<li>コレクションフレームワークを活用しよう</li>
<li>仕事が終わったらお片づけ</li>
<li>内部仕様と外部仕様</li>
<li>データベースをオブジェクトとして扱う</li>
<li>AspectJとアスペクト指向</li></ol>

各鉄則には、例としてのサンプルコードが載っているため、何を言っているかが分からないということはそれほどないと思います。実装前の勉強会で使えそうなネタが詰まっています。

対象読者は「初級者〜中級者」だと思います。本書を読み終わったら『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22" target="_blank" class="extlink">Effective Java プログラミング言語ガイド</a>』を読んで、さらに深い鉄則を学ぶのがよいと思います。

現場のプログラマなら読んで損はないと思います。

<h2>参考</h2>

+ 本書を読んだ後に読むべし。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/">Effective Java プログラミング言語ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4894714361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Joshua Bloch　ジョシュア・ブロック<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Javaの鉄則に関して、もっと概念的で深いことが載っています。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22/">Javaの鉄則―エキスパートのプログラミングテクニック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/489471258X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ピーター ハガー　Peter Haggar　ドキュメントシステム<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=489471258X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Javaが少しかけるようになったら絶対読むべき。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />お勧めの１冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />是非手元に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />なかなか・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本に関するレビュー<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Javaの魂を是非見てください。かなり濃いです。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112079/sorehabooks-22/">Java魂―プログラミングを極める匠の技</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112079/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4873112079.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Robert Simmons Jr.　福龍興業　佐藤 直生　木下 哲也<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873112079&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />実力テストとしても使えるかも。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112079/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798106976.09.MZZZZZZZ.jpg" border="0" alt="Javaプログラミングの処方箋">
-----
KEYWORDS:
Java,プログラミング,処方箋,ひと味違う,コード,鉄則
-----


-----
CF50_CF_4: 宇野 るいも (著), arton (著)
CF50_URL: http://ecx.images-amazon.com/images/I/51HS71KVMEL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: ウェブユーザビリティの法則―ストレスを感じさせないナビゲーション作法とは
BASENAME: post_31
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Design
CATEGORY: Design
DATE: 01/08/2005 08:06:17 PM
TAGS: ウェブデザイン,ウェブユーザビリティ,定番,良書
-----
BODY:
企業向けウェブサイトの製作者は必読と言えるほど、非常に分かりやすく重要な点が載っていると思いました。個人向けのウェブサイトではそれほど重要視されることの少ない「<b>ユーザビリティ</b>」と言う言葉ですが、本書の内容を少しでも実践するだけで、かなり読みやすいサイトになると思います。

「ユーザに考えさせない」、「言葉を省く」、「ナビゲーションをデザインする」など、よくある目次が並んでいますが、実際に目で見て分かるように解説していたり、大胆な言い回しなど、理解しやすいのが特徴です。

主に企業サイト向けのデザインに関して解説しているが、ウェブサイトをデザインする人は、一度読むことをおすすめします。「<strong>デザイン</strong>」と「<strong>ユーザビリティ</strong>」は両立できるため、凝ったデザインでも使いやすいサイト、見やすいサイトにすることは可能です。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、オールカラーで、ページ数も200ちょっとと、すぐに読めてすぐに実践できる実用書です。

本書の中で最も重要な法則の一つに「<b>ユーザーに考えさせないように！</b>」というのがあります。ぱっと見ただけで、何があるのか一目瞭然にしておくべきであるというものです。つまり、ユーザーに考え(Think)させないというのが本書の一番の言わんとすることです。

では、どのように「ユーザーに考えさせないように」するのか？そこまで本書では扱っています。単に抽象的な解説だけで終わらないところが、本書をおすすめする理由です。

ウェブサイト製作者におすすめする、「ウェブユーザビリティの法則」を、一度読んでみてはいかがですか？

<h2>覚書き</h2>

<h3>リンクやボタンで1秒たりとも考えさせるな</h3>

<blockquote>

明らかにクリック可能で、明白な言葉でボタンやリンクは作成すべきである。

<cite>本書</cite>

</blockquote>

つぶれた画像や、ボタンに見えない画像を使うより、クリックできそうな画像を利用するべきである。また、「お仕事の館」とかいてあるより「採用情報」と書いてあるほうが、人材募集のリンクにはふさわしい。

<h3>人はページ内の文章を読まない。ざっと見るのみ</h3>

<blockquote>

サイトの利用者は、文章をざっと眺め、キーワードをやフレーズを探すのである。決して最初から最後まで読むのを期待してはならない。

<cite>本書</cite>

</blockquote>

キーワードやフレーズを目立たせて、そこに誘導するようにするのは、とても効果的な戦略である。

<h2>参考</h2>

+ 富士通のウェブ・アクセシビリティに関する指針。技術者必読！

<a href="http://jp.fujitsu.com/webaccessibility/" target="_blank" class="extlink">富士通ウェブ・アクセシビリティ指針</a>

+ ウェブにかかわらず、ユーザインターフェースに関する指南書

<a href="http://www.emptypage.jp/translations/benroe/gui.html" target="_blank"  class="extlink">使える GUI デザイン</a>

+ ユーザビリティを考えるサイトより

<a href="http://www.usability.gr.jp/whatis.html" target="_blank"  class="extlink">Usability</a>

+ 本書とだいたい同じ内容だと思います。こちらもおすすめ。

<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844315285/sorehabooks-22/">ウェブ・ユーザビリティルールブック―顧客を増やすサイト設計</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844315285/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4844315285.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ビービット<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4844315285&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />一般企業のウェブ担当者に読んでもらいたい本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />より良いウェブを作るために<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Webユーザビリティ実践の基本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Webを作る立場の人は一読した方がいいと思う。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />当たり前だろうの内容を<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844315285/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ デザイン重視のユーザビリティを考える本。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839910251/sorehabooks-22/">ウェブ・ユーザビリティ&アクセシビリティ・ガイドライン―誰もが使いやすく、アクセスしやすいウェブサイトをデザインするための80の指針</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839910251/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4839910251.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">石田 優子<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4839910251&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />使い勝手がいい使い勝手の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ユーザビリティやアクセシビリティの教科書に<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839910251/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 優れたサイトを構築するためのテクニックが満載。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844355627/sorehabooks-22/">ウェブ・ユーザビリティ―顧客を逃がさないサイトづくりの秘訣</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844355627/sorehabooks-22/"><img src="http://images-jp.amazon.com/images/P/4844355627.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ヤコブ ニールセン　Jakob Nielsen　グエル<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4844355627&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Webユーザビリティの入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Webデザイナー必須の良書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />これまでのユーザビリティ総論確認には最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />WEB構築に関わる人必見<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさにサイト立上げのバイブル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844355627/sorehabooks-22/">Amazonで詳しく見る</a></font>　　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797315970.09.MZZZZZZZ.jpg" border="0" alt="ウェブユーザビリティの法則―ストレスを感じさせないナビゲーション作法とは">
-----
KEYWORDS:
ウェブユーザビリティ,Web,ユーザビリティ,法則,ストレス,ナビゲーション,シンプル
-----


-----
CF50_CF_4: スティーブ クルーグ (著), Steve Krug (原著), 中野 恵美子 (翻訳)
CF50_URL: http://ecx.images-amazon.com/images/I/51TB1TR5G6L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797315970/sorehabooks-22
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: T字形ER データベース設計技法
BASENAME: t字形er_データベース設計技法
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 01/12/2005 04:09:00 PM
TAGS: データベース設計,定番
-----
BODY:
見た目は確かに教科書っぽい感じがします。「データベース設計技法」とタイトルにあるので、論理設計もしくは物理設計に関する書籍かと思うかもしれません。しかし本書は、教科書でもないし、DB設計の技術書でもありませんでした。

本書は、「<b>ビジネスドメインの解析手法</b>」を学ぶものです。T字形ER手法という考え方を用いて、ビジネスの現場をモデル化する手法を学べます。ページ数も140ページ少々と少なく、見開きでひとつのタイトルを解説しているため、とてもわかりやすく理解しやすいです。

T字形ER手法では、テーブルを「リソース」と「イベント」という区別で扱います。概念の違いですので、物理設計には関係ありませんが、ビジネス解析(要求分析)の段階では、とても重要になってきます。

<b>オブジェクト指向設計に通じるところもあり</b>、本書で説明している概念を理解すると、ビジネスドメインでのデータの見方というのがしっくり来ると思います。業務アプリケーション開発者は一通り読んでおくと、設計時や開発時に参考になると思います。
-----
EXTENDED BODY:
<h2>解説</h2>

T字形ER手法では、「<b>コード体系</b>」を非常に重要な概念として扱います。Identifier、Resource と Event の区別、コード体系、サブセット、みなしエンティティの 5つのキーワードを理解するだけで、ビジネスモデリングに非常に効果的に働くと思います。

見開き構成になっていて、左で文章による解説、右で図を使った解説を行っており、とても理解しやすくなっています。紙質など、教科書っぽいところもありますが、それほど硬い文章ではありません。多少難しい言葉や聴きなれない言葉もありますが、内容の理解は容易だと思います。

分析・設計を行う開発者は、一度読むことをお勧めする良書です。後半、哲学的な話も出てきますが、そこを除いても120%おつりがくると思います。かなりお勧めします。

<h2>覚書き</h2>

<h3>T字形ER手法とは</h3>

「T字形ER手法」とは、「ビジネス解析技法」であり、データ設計技法ではない。業務で使われている「<b>コード体系</b>」をグループ化しながらビジネスを逆解析する技法である。

T字形ER手法では、データの集合を形成する元となるものが「コード体系」ということになる。

参考： <a href="http://www.sdi-net.co.jp/logico-13.htm" target="_blank">Ｔ字形ＥＲ手法の概念</a>

<h3>Identifier と Master-Key の違い</h3>

<b>Identifier</b> はデータ集合(エンティティ)を生成する判断基準となる。逆に、エンティティとは、Identifier を付与された、一つ一つの違いが認識できるものということになる。

<blockquote>

マスターキーとはプライマリー・キーと呼ばれる、データアクセス用のキーであり、ビジネスにおいてのコード体系を表していないため、Identifier とは別のものと考える。データベース上においては、プライマリーキーは重複は許されないものとして扱われるが、Identifier は重複することがある。(例：ある契約において、営業所毎に契約番号が1から振られる場合、契約番号がIdentifier であるが、データベース上においては、営業所コードと契約番号でマスターキーとなる。)

<cite>本書</cite>

</blockquote>

<b class="red">Identifier はけっして複合キーでは表されない</b>。複合キーとして Identifier を表現する場合は、「結合ファイルまたは、ビュー」ということになる。

<blockquote>

<b>みなしエンティティ</b>というものがある。コード体系が存在しないが、エンティティとみなせるもののこと。　たとえば、従業員というエンティティの属性に「前会社名称」というものがあるとする。前会社名称というのは、前会社というエンティティの属性にするべきであるが、前会社コードのようなコード体系はない。こういう場合に、みなしエンティティとして、「従業員.前会社名称」のようなエンティティを導出する。

みなしエンティティは、エンティティの純度を高める上に、ゼロの多重度を利用することでヌル値を回避するサブセットとしても使える。

<cite>本書</cite>

</blockquote>

<h3>エンティティ名の付け方</h3>

T字形ER手法では「コード体系」を主眼においてエンティティを見つける。コード体系において「○○番号」や「○○コード」とよばれるものから「番号」、「コード」を取り除いた○○の部分がエンティティ名となる。(例：「受注番号」 -> 「受注」)

「番号」、「コード」を取り除いたあとに、「○○書」、「○○伝票」などという言葉になった場合、「書」、「伝票」を取り除く。(例：「請求書番号」 -> 「請求書」 -> 「請求」)

<b class="red">コード体系に表現されていないコードを勝手に使ってはいけない。</b>

<h3>Resource (リソース) と Event (イベント) の違い</h3>

リソースは、事やモノに区別されるもの。イベントは、事象や履歴、事実などのこと。

Event であるかは、タイムスタンプを設定できるかどうかによる。<b>タイムスタンプが設定できるのであれば、それは履歴や事実を表すことができる</b>。

Resource は非常に重要な概念である。Resource と Event を比べて、Resourceの数のが多ければ、Resourceを元に Event を構築することが可能になる。

Resource と Event の関係は3つのパターンになる。

<ol><li><b>Resource - Resource</b><br />　Resource - Resource の関係は、「対照表(関係テーブル)」を用いて表現する。</li>
<li><b>Resource - Event</b><br />　Event のほうに、Resource の参照キーを定義する。</li>
<li><b>Event - Event</b><br />　Event の並び順は、ビジネス上の時系列にそって並べる。このとき、「1 : 1」、「1 : 多」 であれば、時系列の遅い Event に参照キーを定義する(後ろのEvent)。「多 : 1」、「多 : 多」 の場合は、「対応表」を用いる(対応表と対照表は同じようなもの)。</li></ol>

<b>対照表(関連テーブル)は実質的には Event として扱われる</b>。例えば、顧客 (Resource) と 銀行 (Resource) と 口座 (Resource) の 対照表(関連テーブル)は <b>口座開設</b>という Event と取れる。

<blockquote>

<h4>方式の対照表</h4>

T字形ER手法では、3つ以上のエンティティを一度に接続する対照表(関連テーブル)は認めていない。上記の例の場合だと、顧客と銀行と口座を一度に接続することは認められていない。これは、ビジネス解析が難しくなるという理由からである。T字形ER手法では、2つのエンティティのみを接続する <b>Binary 方式</b>だけを認めている。

では、上記の場合どうするのかと言うと、顧客と銀行への対照表(顧客.銀行.対照表)を導出したあとで、顧客.銀行.対照表と口座との対照表を導出する。対照表とエンティティを接続した対照表を導出することは、T字形ER手法では推奨される手法の一つなのだ。

<cite>本書</cite>

</blockquote>

<h3>Attribute (属性) に ヌル値 (null値) は許可しない</h3>

例えば、契約解約日という属性があるとする。この属性は、契約が行われているときには ヌル値 を設定する(解約日が存在しないという意味)。しかし、<strong>Attribute とは本来、エンティティが存在するとき、原則としてそこに存在しなければならない</strong>(つまり、ヌル値を許さない)。

このような、ある状態の時には ヌル値 として処理したい場合、<b>サブセット</b>という概念をつかう。サブセットとは、簡単に言うと継承関係のようなもの。

<b>繰返項目</b>とは、Identifier に対して複数の関係にある属性のこと。これらの属性は、ヌル値をセットする可能性があるため、別のテーブルとして分けて管理する。

同一の Identifier を時系列にそって上書きして流用するような<b>複写伝票</b>は、サブセットを使って表す。例えば、ある受注の受注番号を、受注、出荷、請求のそれぞれの Event で使う場合である。このようなサブセットの使い方は、「状態遷移」をあらわしている。

「<b>相違のサブセット</b>」という技法を使って、ヌル値を回避することができる。

<h3>分類としてのサブセット</h3>

サブセットを使う場合、下記の前提事項が存在する。

<ul><li>サブセット(子)とスーパーセット(親)の間には「被包含・包含」の関係</li>
<li>サブセット同士は「排他」の関係</li></ul>

サブセット間に交わり(排他でない)が起こるとすると、それはサブセットではないことになる。例えば、ある取引先が、出荷先でも請求先でもあるような場合、出荷先と請求先で取引先区分コードが同じになる。

<img src="http://hamasyou.com/images/ttypedatabase/subset_intersect.gif" alt="サブセットの交わり" />

オブジェクト図で表すと以下のような感じ。同一の取引先インスタンス(取引先A)を共有している点がいけない。

<img src="http://hamasyou.com/images/ttypedatabase/subset_object.gif" alt="サブセットの交わり(オブジェクト図)" />

サブセット間に交わりが起こった場合は、サブセットとして扱うのは適切ではないので何か処理を施す必要がある。今回は、「取引先区分コード」は「<b>分類 (Resource)</b>」として機能しているので、別のエンティティとして切り出す。

<img src="http://hamasyou.com/images/ttypedatabase/subset_resource.gif" alt="別のエンティティとしてあつかう" />

<img src="http://hamasyou.com/images/ttypedatabase/subset_object2.gif" alt="別のエンティティとしてあつかう(オブジェクト図)" />

<i>※ <b>ここでは、UMLを使ってオブジェクト設計の図になっているが、実際はデータベース設計の話をしている</b>。オブジェクト指向であれば、取引先Aのインスタンスは同一のモノと判断すると思われる。が、ここではデータベースのエンティティレベルの話をしているので、別のインスタンスとして表してある。</i>

<b class="red">区分コード(種別コード)として使われるものは、サブセットとして表現する</b>。

<h2>参考</h2>

+ 著者のWebサイト。本書を保管する内容も多数。
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://www.sdi-net.co.jp/logico-index.htm" target="_blank">SDI</a>

+ テーブル設計の基礎力がつく本です。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883731340/sorehabooks-22/" target="_blank">論理データベース論考―データ設計の方法:数学の基礎とT字形ER手法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883731340/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4883731340.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">佐藤 正美<br /><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />テーブル設計の基礎学力がつく本です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />論理データベース論考―データ設計の方法:数学の基礎とT字形ER手法<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />やっぱり、ＳＥは勉強しなくちゃ。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883731340/sorehabooks-22/" target="blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>

+ 渡辺式とよばれる、データモデリング手法を解説した本。こちらもお勧め。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank">業務別データベース設計のためのデータモデリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4534032501.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">渡辺 幸三<br /><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />データモデリングの基礎から勉強できる。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />考え方だけでも理解してはいかが<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />データモデルの重要性は解ったけれど具体的にどうすればよいか解らない段階に必読の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />初心者にはきついです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />情報システムの専門家以外の人にも、使い道豊富。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>

+ わかりやすさで選ぶなら、本書もはずせない逸品です。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank">実践的データモデリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4798103853.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">真野 正<br /><br /><b>おすすめ平均　</b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />とてもわかりやすい！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />データモデリング、分かりやすい内容です<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>

+ モデリングのパターンを解説した本。おすすめ。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" target="_blank">ストリームラインオブジェクトモデリング―パターンとビジネスルールによるUML</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4894715775.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジル ニコラ　マイク アベニー　マーク メイフィールド　Jill Nicola　Mike Abney　Mark Mayfield<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894715775&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/t-type-database.jpg" border="0" alt="T字形ER データベース設計技法">
-----
KEYWORDS:
T字形,ER設計,データベース,Database,ER図,DOA,設計技法,T字形モデル
-----


-----
CF50_CF_4: 佐藤 正美 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/61DErp-wbTL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/488373109X/sorehabooks-22
CF50_CF: ソフトリサーチセンター
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 図解 ビジネス理論30分速習ノート
BASENAME: _30
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 01/16/2005 09:30:17 AM
TAGS: ビジネス理論
-----
BODY:
授業でビジネスを勉強したら、こんなノートをがまとめあがると言うような感じの本です。歴史的・経済的に重要な理論を確立した先人の知識をまとめています。ガルプレイス、ドラッカー、ポーター、コトラー、ジェームス・アレンなど、有名どころも軒を連ねています。

本書のいいところは、一ページから二ページの間で、その人の確立した理論について簡単ながら解説してあるところです。一つ一つの理論を詳しく説明しているわけではありませんが、ビジネスの現場・経営の現場でよく出てくるような言葉の意味を表面的にでも知るために使えます。

「知らないことは知れない」。本書には60もの理論がまとめられています。どの理論に興味があるかを、全体から知った上でチョイスできるので、ビジネスをかじりたい人、ビジネスを始めた人向けのノートになっています。
-----
EXTENDED BODY:
<h2>覚書き</h2>

<ol><li><a href="#ケインズの「有効需要の原理」">ケインズの「有効需要の原理」</a></li>
<li><a href="#シュンペーターの「景気循環理論」">シュンペーターの「景気循環理論」</a></li>
<li><a href="#フリードマンの「マネタリズム」">フリードマンの「マネタリズム」</a></li>
<li><a href="#ハイエクの「自生的秩序」">ハイエクの「自生的秩序」</a></li>
<li><a href="#サムエルソンの「経済学」">サムエルソンの「経済学」</a></li>
<li><a href="#ガルブレイスの「新しい産業国家」">ガルブレイスの「新しい産業国家」</a></li>
<li><a href="#ドラッカーの「ポスト資本主義社会」">ドラッカーの「ポスト資本主義社会」</a></li>
<li><a href="#ノイマンの「ゲーム理論」">ノイマンの「ゲーム理論」</a></li>
<li><a href="#リカードの「比較優位の原則」">リカードの「比較優位の原則」</a></li>
<li><a href="#コア・コンピタンス経営">コア・コンピタンス経営</a></li>
<li><a href="#ジェームス・アレンの「原因と結果の法則」">ジェームス・アレンの「原因と結果の法則」</a></li></ol>

<a name="ケインズの「有効需要の原理」"></a>
<h3>ケインズの「有効需要の原理」</h3>

<blockquote>

現在の産出量・経済の活動水準は、潜在的生産能力ではなく、需要によって規定される

<cite>本書</cite>

</blockquote>

つまり、<strong>必要とされている分だけ生産するのが現在の経済</strong>ということである。必要とされている分、つまり「<strong>有効需要</strong>」は、「貨幣的な購買力を持って実際に需要者として市場に登場する」ものとしてカウントされる。

古典派経済の、「供給が過ぎても(超過供給)、価格を減らせば需要は均衡するさ」という考え方を否定して、「価格は変えずに数量を変化させることで、需要に均衡した供給が保たれる」という考え方を打ち出した。

<dl>
<dt class="tips">キーワード</dt>
<dd>「有効需要」</dd>
</dl>

<a name="シュンペーターの「景気循環理論」"></a>
<h3>シュンペーターの「景気循環理論」</h3>

<blockquote>

景気循環の本質は、外的な要因による変化ではなく、机上課の核心による自立的変化による現象だ

<cite>本書</cite>

</blockquote>

経済の発展と言うものは、生産要素のイノベーション(革新)が発端となり、それが均衡してきて新しい価値として定着すれば、大量の生産物が世に出ることになる。これの繰返しが、経済の発展である。とした。

経済の発展のなかで、企業も発展し、衰退し、革新が起こる。これが、資本主義経済の形であるという考え方である。　

<dl>
<dt class="tips">キーワード</dt>
<dd>「景気循環理論」</dd>
</dl>

<a name="フリードマンの「マネタリズム」"></a>
<h3>フリードマンの「マネタリズム」</h3>

<blockquote>

マネタリズムは、物価や名目所得の変動をもたらす最大の要因が貨幣量の変動であることをさらに強調する。

<cite>本書</cite>

</blockquote>

世の中の市場の動きというのは、<strong>貨幣供給量(マネーサプライ)</strong>の動きに合わせられる。政府の介入がなければ、自然と完全雇用が達成されるという立場に立つものである。

<dl>
<dt class="tips">キーワード</dt>
<dd> 「貨幣供給量(マネーサプライ)」</dd>
</dl>

<h4>参考</h4>

「ケインズ主義」

<a name="ハイエクの「自生的秩序」"></a>
<h3>ハイエクの「自生的秩序」</h3>

<blockquote>

社会の重要な制度は、計画的に設計されてできたものではなく、自然な人間行為の歴史によって、非人為的に形成されてできた。

<cite>本書</cite>

</blockquote>

ハイエクは、市場の本質は、自然に形成されるもので、計画的に設計されるものではないとした。<strong>自由主義</strong>をもとにして考え出されたのが、「<strong>自生的秩序</strong>」という概念である。反対に理性的、計画的に組み立てるものを「<strong>設計主義</strong>」として、対立関係に立った。　

<dl>
<dt class="tips">キーワード</dt>
<dd>「自由的秩序(スポンテニアス・オーダー)」</dd>
</dl>

<a name="サムエルソンの「経済学」"></a>
<h3>サムエルソンの「経済学」</h3>

<blockquote>

経済学を科学として確立させた。

<cite>本書</cite>

</blockquote>

『経済学』には経済学の基本的な、命題・分析方法などがまんべんなく盛り込まれている。

<h4>参考</h4>

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4000008870/sorehabooks-22" target="_blank" class="extlink">サムエルソン 経済学(上)</a>

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4000008889/sorehabooks-22" target="_blank" class="extlink">サムエルソン 経済学(下)</a>

<dl>
<dt class="tips">キーワード</dt>
<dd>「経済学」</dd>
</dl>

<a name="ガルブレイスの「新しい産業国家」"></a>
<h3>ガルブレイスの「新しい産業国家」</h3>

<blockquote>

新しい産業国家においては、巨大企業が市場を操作し、価格を調整し、能動的に市場機能に関与する。

<cite>本書</cite>

</blockquote>

お金を持つ人よりも、知識や才能、経験を持つ人、「<strong>テクノストラクチャー</strong>」が企業の意思決定を行う。新しい産業国家は、テクノストラクチャーによる産業の管理や計画化が行われていくとした。

<h4>参考</h4>

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4061830600/sorehabooks-22" target="_blank" class="extlink">不確実性の時代(上)</a>

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4061830619/sorehabooks-22" target="_blank" class="extlink">不確実性の時代(下)</a>

<dl>
<dt class="tips">キーワード</dt>
<dd>「テクノストラクチャー」</dd>
</dl>

<a name="ドラッカーの「ポスト資本主義社会」"></a>
<h3>ドラッカーの「ポスト資本主義社会」</h3>

<blockquote>

「知識社会」では、経済が社会を規定しない。社会が経済を変えるのだ。高度に専門化された知識は、他の知識と連携したときにとてつもない力を発揮する。知識が中心となる社会は、組織の社会となるだろう。

<cite>参考</cite>

</blockquote>

<strong>ネクスト・ソサイエティ</strong>である知識社会は、「<strong>知識</strong>」が重要な資源となる。組織にとっても、一人ひとりの人間にとっても、高度に競争的な社会になる。

<dl>
<dt class="tips">キーワード</dt>
<dd>「ネクスト・ソサイエティ『知識社会』」</dd>
</dl>

<a name="ノイマンの「ゲーム理論」"></a>
<h3>ノイマンの「ゲーム理論」</h3>

<blockquote>

複数の自由・自立意思が相互依存関係にあるとき、意思決定、行動、効用は変化する。

<cite>本書</cite>

</blockquote>

囚人のジレンマに代表されるゲーム理論。自分の利得は、自分の戦略関数だけでなく、他人の戦略関数になる。これがゲームの本質であり、こういった性質を持つ現象はすべて「<strong>ゲーム理論</strong>」として表現できる。

<dl>
<dt class="tips">キーワード</dt>
<dd>「ゲーム理論」</dd>
</dl>

<a name="リカードの「比較優位の原則」"></a>
<h3>リカードの「比較優位の原則」</h3>

<blockquote>

二カ国間の貿易において、各国が相対的に低費用で生産できる財の生産に特化し、貿易を通じて相手国から輸入すれば、両国とも貿易を行わずに自給自足をしたときよりも、多くの利益を得ることができる。

<cite>本書</cite>

</blockquote>

一方の国が両部門で絶対的に優位であっても、両国が相対的に得意な分野に特化して貿易を行うほうが望ましい。

<dl>
<dt class="tips">キーワード</dt>
<dd>「比較優位の原則」</dd>
</dl>

<a name="コア・コンピタンス経営"></a>
<h3>コア・コンピタンス経営</h3>

<blockquote>

優位な分野から中核となる技術を育てることで、経営戦略を立てる。

<cite>本書</cite>

</blockquote>

独自のスキルや優位な技術を集中的に育てることで、新しい市場を開拓する経営戦略のこと。他社よりも優れている技術を持つことが生き残る手段であると考える。

<dl>
<dt class="tips">キーワード</dt>
<dd>「コア・コンピタンス」</dd>
</dl>

<a name="ジェームス・アレンの「原因と結果の法則」"></a>
<h3>ジェームス・アレンの「原因と結果の法則」</h3>

<blockquote>

強く思うことは実現する。すべては自分の内面にある。結果としての失敗も成功も、その原因は心の底にある思いに在る。原因こそがまず改善されなければならない。

<cite>本書</cite>

</blockquote>

人生に偶然はない。なるべくしてそうなったのだ。運命を決定するのは、自分自身に他ならない。

<dl>
<dt class="tips">キーワード</dt>
<dd>「強く思うことは実現する」</dd>
</dl>

<h2>参考</h2>

+ 儲ける技術のきわみ。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894511835/sorehabooks-22/" target="_blank">速効ビジネス―あなたの経験が現金に変わる!</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894511835/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4894511835.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">平 秀信<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894511835&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均　</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />すごい内容であるが、実践するのは簡単ではない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />同業者には読んでもらいたくない本です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />インフォプレナーの必読書　劇薬的即効性あり<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />同業者を儲けさせて、尚且つ自分も儲ける！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />実践者だからこそ出来るビジネス<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894511835/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ ビジネス脳をつくるには。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4062124920/sorehabooks-22/" target="_blank">考える技術</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4062124920/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4062124920.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">大前 研一<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4062124920&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均　</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />忘れていないか<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />直近のニュースを論理的思考で考える<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />わかりやすく非常にタメになりました<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />大前さんはやっぱりすごい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   />そろそろ、自分がなぜ政治進出が失敗したかを考えろ！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4062124920/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4569636268.09.MZZZZZZZ.jpg" border="0" alt="図解 ビジネス理論30分速習ノート">
-----
KEYWORDS:
ビジネス理論,図解,コトラー,ドラッカー,ラモーナ,ビジネス,カウンシル,経済,経営,速習ノート,マーケティング,理論,ビジネスマン
-----


-----
CF50_CF_4: ラモーナビジネスカウンシル (著)
CF50_URL: http://ec2.images-amazon.com/images/I/615FVZ0NV9L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4569636268/sorehabooks-22
CF50_CF: PHP研究所
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: かんたんUML
BASENAME: uml_7
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 01/18/2005 07:52:42 PM
TAGS: UML,わかりやすい,定番
-----
BODY:
本書は、「<strong>UML (Unified Modeling Language)</strong>」の書き方の本です。モデリングの本だと思って買うと、たぶん期待を裏切られると思います。<a href="http://www.umtp-japan.org/examination/index.html" target="_blank" class="extlink">モデリング技能認定試験 (旧 UML技術者認定制度)</a>のL1-T1 レベル(OOの基礎概念、UML入門的知識)を学ぶための本です。

本書は、UMLの使いどころを学ぶのにいいと思います。UML解説の本ですから、(チュートリアルの)ソフトウェア開発設計のすべての場面でUMLを使っているのは、実際の現場からしたら少し考え物ですが、どの段階でどのUML図を使うかを見極める勉強にはなると思います。

モデリング技術についてはそれほど難しいことは出てきません。純粋にUMLの書き方と使いどころを学ぶ本だと思います。UMLをまなぶ最初の本か、2冊目の本にするとちょうどよいレベルだと思います。その後は、「<strong>モデリング</strong>」を学ぶ書籍を読み進めていくといいと思います。読みやすくて好きです。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、UMLとはどんなものかという疑問に答えてくれるような書籍です。何ができて、どうすごいのかということがなんとなく分かるようになる本です。

しかし、どう使えばいいのか、こういうドメイン(問題領域)の設計はどうすると再利用性があがり効果がでるのか、と言ったような具体的な解法を学ぶための本ではありません。<strong>純粋にUMLを学ぶ。導入する。</strong>ための書籍となっています。

前半では、オブジェクト指向とUMLについての説明と、「ITマネージャのためのUML講座」としてソフトウェア開発の現場でUMLを導入するためにはどうすればいいのかを説明しています。

後半は、チュートリアル形式になり、Chen君とJun先輩の二人がオブジェクト指向分析から設計までの流れをお話形式で進めていきます。UML1.X で定義されている図をほとんど使って進められていきますので、どこでどの図を使うのかを理解するのに便利です。
参考： <a href="http://www.ogis-uml-university.com/tutorial/analysis/introduction/introduction.html" target="_blank" class="extlink">チュートリアル</a>

最後は、試験問題対策として、UMLに関する問題と解答がそれぞれ載っています。ここを利用すれば、モデリング技能認定試験(L1-T1)の試験勉強になります。

本書の対象読者は、UMLをまったく知らないか、あるいは、UMLの記法だけは知っているエンジニアです。UMLを学ぶための最初の一冊目か、二冊目に向いていると思います。

モデリング技法や、設計パターンを学ぶなら、本書より『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22" target="_blank" class="extlink">実践UML</a>』がおすすめです。非常に詳しくUMLモデリングと言うものを学べると思います。

<h2>覚書き</h2>

<h3>ユースケース</h3>

システムのユーザがシステムを利用して遂行する単位業務の一つを抽象化したもの。ユースケースをすべて集めると、システムがどう使われるかがすべて表される。

アクターは、既存のシステムやデータベースなどの外部システムもなりうる。

ユースケースの単位を見つける手っ取り早い方法は、<strong>次の処理までに時間がかかる(一息置くことができる)</strong>かを考える。

(例： 画面に検索キーワードを入力して、検索ボタンを押す。(一呼吸))

<h3>クラス図</h3>

ユースケースシナリオから、名詞や名詞句を検討すると、クラスを見つけやすくなる。<strong>システムにとって意味のある概念であるか、業務にとって重要な言葉であるか</strong>をチェックする。

(例： 物流システムであれば、「物」よりも「在庫」などとした方がよい)

アクターはクラスにはなりません。システム境界をはっきりさせて、アクター(外部システムなど)がクラス図に表れていないかをチェックします。

<h2>参考</h2>

+ UMLモデリングに一味加えたいときにおすすめ。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/" target="_blank">UMLモデリングのエッセンス―標準オブジェクトモデリング言語入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4881358642.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">マーチン ファウラー　ケンドール スコット　Martin Fowler　Kendall Scott　羽生田 栄一<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4881358642&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均　</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLエッセンスを凝縮<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />簡にして要を得た優れた解説書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />無駄がない導入書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />手元におきたい一冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />入門書ではない<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881358642/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ オブジェクト指向設計の原則が学べる、<strong>知っている中でもかなりおすすめな本</strong>。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank">実践UML―パターンによる統一プロセスガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4894713861.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">クレーグ ラーマン　Craig Larman　依田 光江　依田 智夫　今野 睦<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713861&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均　</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLの実践的な使い方を包括的に理解できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ UMLの表記法を学ぶのに最適。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4816334114/sorehabooks-22/" target="_blank">はじめて学ぶUML―オブジェクト指向の基礎からUMLの利用法まで、しっかりよくわかる!</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4816334114/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4816334114.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">竹政 昭利<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4816334114&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均　</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />UMLの文法はこれでOK<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ＵＭＬ入門者、およびＵＭＬ技術者認定制度受験者に最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />入門書としては良いかと<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />入門書の決定版<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4816334114/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ UMLとビジネスモデリングをセットで学ぶのにいいかも。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119709/sorehabooks-22/" target="_blank">これだけでわかる!初歩のUMLモデリング―基礎から各種テクニックまで第一人者が伝授!!</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119709/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774119709.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">萩本 順三<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774119709&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均　</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />今一番旬なUML解説書．<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />UMLのイメージをつかむのにはよいかも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />読みにくい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />初歩というには勿体ない<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774119709/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798105600.09.MZZZZZZZ.jpg" border="0" alt="かんたんUML">
-----
KEYWORDS:
UML,簡単,オブジェクト指向,モデリング,言語,ITマネージャ,ソフトウェア設計,オージス総研
-----


-----
CF50_CF_4: オージス総研 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51M8RS17RGL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798105600/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 思考系UMLモデリング即効エクササイズ
BASENAME: 思考系umlモデリング即効エクササイズ
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 01/22/2005 09:39:34 AM
TAGS: UML,モデリング
-----
BODY:
本書は、UMLモデリングを自主勉強するための問題集になっています。13のお題が与えられ、それに対して自由にモデリングを行うと言うものです。モデリングを行うときの視点や、よくある間違えなど、解説が丁寧なので一人でモデリングの勉強をすることができます。

本書のよい点は、解説が豊富である点です。よくある間違えや、模範解答のモデルにたどり着くための考え方が詳しく載っています。

反対に悪い点は、「<strong>コンテキストが明確になっていない</strong>」点です。ほとんどのお題に言える事ですが、単に「アイスクリームをモデリングせよ」のように問題が出されているだけです。これでは、模範解答のモデルとまったく違うモデルができてしまうこともたびたびあります。

モデリングの肝は、「<strong>コンテキストの理解</strong>」にあると思っています。本書では、これを「<strong>本質を見抜く</strong>」という言葉で表しています。本書はモデリングの本質を見抜くための問題集だと思います。確かに難しいし、唖然とするようなこともありましたが、一度体験しておくとモノの本質を考える能力が発達するのではないかと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22" target="_blank" class="extlink">アナリシスパターン</a>』や『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22" target="_blank" class="extlink">ストリームラインオブジェクトモデリング</a>』、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22" target="_blank" class="extlink">UMLモデリングの本質</a>』を読んだことがある人向けです。問題文からモデルの構造が頭に浮かんだときに、どんなパターンが使えるかを考えると、よいモデル(模範解答に近いモデル)になります。

本書の問題文からは、「<strong>コンテキストの理解</strong>」が困難になっています。なので、「<strong>モデルの本質</strong>」を見抜くのに自分の知識をフル活用しなければなりません。たぶんそういう意味で「思考系」となっているのではないかと思います。

モデリングの肝は「<strong>コンテキストの理解</strong>」にあると、僕は考えています。モデルにはそのコンテキストにあったものを表すべきだと思っています(抽象化)。僕が師と仰ぐ人の言葉で「<strong>モデリングの視点は一つに決める</strong>」と言うものがあります。そのコンテキストの中でどのモノを基準にモデリングするかということです。

本書を読み解くためには、「<strong>モデルの本質を見抜く</strong>」、「<strong>コンテキストを理解する</strong>」、「<strong>視点を一つに定める</strong>」、「<strong>モデルパターンを適用する</strong>」の4つの基本的だが一番大切なことを実践するのがいいと思います。

本書は、今まで読んできたモデリングの本の知識を試す場になると思います。問題の中にはどうかと思う部分もありますが、やって損はないと思います。

<h2>参考</h2>

+ モデリングの本質をつかむための良書。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" target="_blank">UMLモデリングの本質</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4822221180.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">児玉 公信<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822221180&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均　</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />モデリングについて説得力のある解説が多々あります。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />この本を手がかりに、自分でやってみよう！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これは「モデリング本」です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />必読です！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ モデリングパターンを学べる秀逸書。おすすめ。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" target="_blank">ストリームラインオブジェクトモデリング―パターンとビジネスルールによるUML</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4894715775.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジル ニコラ　マイク アベニー　マーク メイフィールド　Jill Nicola　Mike Abney　Mark Mayfield<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894715775&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ マーチンファウラー著：アナリシスパターンはアナリシストに必携の本です。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" target="_blank">アナリシスパターン―再利用可能なオブジェクトモデル</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4894716933.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">マーチン ファウラー　Martin Fowler　堀内 一　友野 晶夫　児玉 公信　大脇 文雄<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894716933&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均　</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />よい本ですね<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「オブジェクト」指向モデリングの導き手<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>　　<font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798107123.09.MZZZZZZZ.jpg" border="0" alt="思考系UMLモデリング即効エクササイズ">
-----
KEYWORDS:
UML,モデリング,エクササイズ,モデ力,自主トレ,勉強,思考系
-----


-----
CF50_CF_4: 渡辺 博之 (著), 芳村 美紀 (著), 桑本 茂樹 (著), 敷山 喜与彦 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51HGP5MB5DL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798107123/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: J2SE5.0 覚書き
BASENAME: j2se50
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 01/27/2005 07:03:44 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112141/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4873112141.09.MZZZZZZZ.jpg"   border="0" alt="Java 5.0 Tiger    開発者ノートシリーズ" /></a>
</p>

Javaの新バージョン「<strong>J2SE5.0 Tiger</strong>」の新機能のメモ。詳しい使い方などは、参考文献や他のサイトをご覧ください。

J2SE5.0 Tiger では、言語構文が大幅に追加されています。<strong>Generics</strong> や <strong>オートボクシング</strong>、<strong>Enum(列挙型)</strong>、<strong>可変長引数</strong>、<strong>アノテーション</strong>、<strong>拡張for ステートメント</strong>、<strong>Static インポート</strong>など、目を見張る機能がたくさん付け加わっています。

J2SE5.0 Tiger は、EoD (Easy Of Development) を行うための道具です。今後はさらに普及してきて、J2SE1.4 に確実に置き換わると思います。今のうちに概要や変わったところをチェックしておくのがいいと思います。

<section>

<h4>参考</h4>

+ <a href="http://java.sun.com/j2se/1.5.0/ja/docs/ja/api/index.html" target="_blank" class="extlink">J2SE5.0 API JavaDoc</a>

+ <a href="http://java.sun.com/j2se/1.5.0/ja/download.html" target="_blank" class="extlink">JDK5.0 Download</a>

+ <a href="http://www5.airnet.ne.jp/sakuraba/java/laboratory/J2SE1.5/contents.html" target="_blank" class="extlink">J2SE5.0 虎の穴</a>

</section>
-----
EXTENDED BODY:
<h2>覚書き一覧</h2>

<ol><li><a href="#基本クラス、コレクションクラスの変更点">基本クラス、コレクションクラスの変更点</a></li>
<li><a href="#Generics - ジェネリクス">Generics - ジェネリクス</a></li>
<li><a href="#Enum - 列挙型">Enum - 列挙型</a></li>
<li><a href="#ボクシング、アンボクシング">ボクシング、アンボクシング</a></li>
<li><a href="#可変長引数">可変長引数</a></li>
<li><a href="#アノテーション">アノテーション</a></li>
<li><a href="#拡張 for ステートメント">拡張 for ステートメント</a></li></ol>

<h2 id="基本クラス、コレクションクラスの変更点">基本クラス、コレクションクラスの変更点</h2>

<ul>
<li><a href="#java.util.Arraysの変更">java.util.Arraysの変更</a></li>
<li><a href="#java.util.Queueインターフェース">java.util.Queueインターフェース</a></li>
<li><a href="#戻り型のオーバーライド">戻り型のオーバーライド</a></li>
<li><a href="#Unicode4.0 のサポート">Unicode4.0 のサポート</a></li>
<li><a href="#StringBuilderクラスを使う">StringBuilderクラスを使う</a></li>
</ul>

<h3 id="java.util.Arraysの変更">java.util.Arrays の変更</h3>

<em>java.util.Arrays</em>クラスに toString() が付け加わりました。配列をプリントできるようになります。デバッグ時に楽になります。deepToString() は2次元配列以上の配列の中身を再帰的にプリントします。

<h3 id="java.util.Queueインターフェース">java.util.Queue インターフェース</h3>

<em>java.util.Queue</em>インターフェースが追加されました。キューは FIFO (先入れ、先出し)の性質を持ち、先に挿入した値が最初に取得できるコレクションです。キューでは、offer() と poll()、element()、peek() を利用します。

<dl>
<dt class="warn">要素がない場合の挙動に注意</dt>
<dd>キューのコレクションメソッドである add() や remove() は要素がない場合の挙動が例外をスローするようになっています。</dd>
</dl>

java.util.Queue はインターフェースで、実装クラスは <em>LinkedList</em> や他のList 実装が使えます。

<pre class="code"><code>Queue q = <span class="keyword">new</span> LinkedList();
</code></pre>

<h3 id="戻り型のオーバーライド">戻り型のオーバーライド</h3>

J2SE5.0 Tiger から<em>戻り型がオーバーライドできる</em>ようになりました。今までは、メソッドのオーバーライドはメソッドの戻り型を含めてシグネチャが一致しなければなりませんでしたが、それが変更されています。

<section>

<h4>[参考]</h4>

+ <a href="http://www5.airnet.ne.jp/sakuraba/java/laboratory/J2SE1.5/LangSpec/Generics/Generics.html" target="_blank" class="extlink">J2SE5.0 Tiger 虎の巻(Generics) - 戻り値だけ違うメソッドのオーバライド</a>

</section>

<h3 id="Unicode4.0 のサポート">Unicode4.0 のサポート</h3>

<em>Unicode4.0</em> をサポートするようになりました。これにより、Unicode が16ビットに収まらなくなり、charで表現できない文字が存在することになります。この場合 int を使うことになります。

Unicode4.0 のサポートにより、16bit に収まらない文字を扱うには、char ではなく、int を使います。

<h3 id="StringBuilderクラスを使う">StringBuilder クラスを使う</h3>

<em>StringBuilder</em> クラスが追加されました。これは StringBuffer の非同期クラスの位置づけになっています。コレクションフレームワークにより、Vector よりも ArrayList を、HashTable より HashMap を使うのが好まれるように、StringBuffer よりも StringBuilder を使うようになります。ただし、非同期処理の場合に限ります。

非同期処理ですむ場合は、StringBuffer の代わりに StringBuilder を使うようにします。

<h2 id="Generics - ジェネリクス">Generics - ジェネリクス</h2>

<ul><li><a href="#Generics 構文">Generics 構文</a></li>
<li><a href="#Iterator の型パラメータに関して">Iterator の型パラメータに関して</a></li>
<li><a href="#ワイルドカードを使用する">ワイルドカードを使用する</a></li>
</ul>

<h3 id="Generics 構文">Generics 構文</h3>

<em>Generics</em> は C++ 言語のテンプレートと同じ役割をします。主にコレクションを使うときに、型の安全性を保証するのに使います。また、Iterator を使う場合にキャストが不要になるという利点もあります。

<pre class="code"><code>List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();
</code></pre>

<em>オートボクシング</em> という機能が J2SE5.0 Tiger から追加されました。これはプリミティブ型とオブジェクト型の変換をコンパイル時に解決してくれると言う機能です。この機能を使うと、Generics を使ってプリミティブ型をコレクションに追加することができるようになっています。その場合、下記のようにします。

<pre class="code"><code>List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); 
list.add(8); 
list.add(5); 
</code></pre>

型パラメータとして指定できるのは Object型 だけですので注意が必要です。プリミティブ型は指定できません。

<em>java.util.Map</em> は型パラメータを二つとります。 key に指定する型と value に指定する型です。

<h3 id="Iterator の型パラメータに関して">Iterator の型パラメータに関して</h3>

<em>Iterator</em> とコレクションは常にペアで考える必要があります。コレクションに型パラメータが指定されていれば、Iterator にも同じ型パラメータを指定する必要があります。

<pre class="code"><code>List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); 
list.add(8); 
list.add(5); 
 
Iterator&lt;Integer&gt; iter = list.iterator(); 
<span class="keyword">while</span> (iter.hasNext()) { 
    <span class="keyword">int</span> n = iter.next(); 
} 
</code></pre>

J2SE5.0 Tiger を使って開発を行う場合、できる限り Generics を使って、型の安全性を確保するのがよい作法です。

<h3 id="ワイルドカードを使用する">ワイルドカードを使用する</h3>

型パラメータには <em>ワイルドカード (?) を使うことができる</em>。これを指定すると、どんな型でも受け入れるという事を示すことになる。ただし、ワイルドカードを使った場合、そのコレクションは<strong>読み取り専用</strong>になる。つまり、 add()、addAll()、set() などのメソッド呼び出しはコンパイルエラーになる。

<pre class="code"><code>List&lt;?&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); 
 
<span class="comment">/* ワイルドカードを使っているので、読み取り専用になっている */</span>
<span class="comment">//list.add(&quot;Hey&quot;); </span>
<span class="comment">//list.add(&quot;Good&quot;); </span>
<span class="comment">//list.add(&quot;Hello&quot;); </span>
 
<span class="keyword">for</span> (Iterator&lt;?&gt; iter = list.iterator(); iter.hasNext(); ) { 
System.out.println(iter.next()); 
} 
 
</code></pre>

<h2 id="Enum - 列挙型">Enum - 列挙型</h2>

<em>Enum (列挙型)</em> は、型のチェックが行われる、定数の範囲とでも考えればいいと思います。

<section>

<h4>Category.java</h4>

<pre class="code"><code> 
<span class="keyword">package</span> com.hamasyou; 
 
<span class="keyword">public</span> enum Category {  
    BOOK,  
    WEB,  
    COMPUTER,  
    SYSTEM 
}; 
</code></pre>

</section>

<p class="option">慣習では Enum クラス名は 単語の区切りが大文字、列挙の識別子はすべて大文字とされています。</p>

列挙型は == や equals() で比較できます。また、compareTo() を使って比較することができます。デフォルトの順序は、識別子の順番になります。

toString() と valueOf() メソッドが提供されます。

<pre>
(例： Category.SYSTEM.toString().equals(&quot;SYSTEM&quot;) )
(例： Category.BOOK&nbsp;==&nbsp;Category.valueOf(&quot;BOOK&quot;))
※ toString() をオーバーライドする場合は、 valueOf もオーバーライドしなければならない。常にペアで修正すること。
</pre>

J2SE5.0 Tiger から、列挙型による <em>switch 文の分岐</em>ができるようになりました。switch 文ではラベルに識別子を使う場合、enum クラス名を付けるとコンパイルエラーになります。

<pre class="code"><code>Category c = Category.BOOK; 
<span class="keyword">switch</span> (c) { 
    <span class="keyword">case</span> Category.SYSTEM:    <span class="comment">// コンパイルエラー </span>
        System.out.println(<span class="literal">"BOKE"</span>); 
        <span class="keyword">break</span>; 
    <span class="keyword">case</span> WEB: 
        System.out.println(<span class="literal">"BOKE"</span>); 
        <span class="keyword">break</span>; 
    <span class="keyword">case</span> BOOK: 
        System.out.println(<span class="literal">"OK"</span>); 
        <span class="keyword">break</span>;                 
} 
</code></pre>

<section>

<h4>[参考]</h4>

+ <a href="http://www5.airnet.ne.jp/sakuraba/java/laboratory/J2SE1.5/LangSpec/TypesafeEnum/TypesafeEnum.html" target="_blank">enum の詳しい説明 - (J2SE5.0 Tiger 虎の穴)</a>

</section>

<h2 id="ボクシング、アンボクシング">ボクシング、アンボクシング</h2>

プリミティブ型からオブジェクトラッパー型へ、オブジェクトラッパー型からプリミティブ型への変換を、コンパイル時に行ってくれる機能が<em>オートボクシング、アンボクシング</em> です。

<pre class="code"><code>Integer obj = 10; 
<span class="keyword">int</span> n = <span class="keyword">new</span> Integer(8); 
obj++; 
</code></pre>

上のような事ができます。例えばメソッドの引数で、int をとる場合でも、Integer インスタンスを渡すことができるようになります。

<dl>
<dt class="notice">プリミティブへの null の代入に注意</dt>
<dd><p>オブジェクトラッパー型のインスタンスには null が指定できました。しかし、アンボクシング時に null インスタンスであると、NullPointerException が発生します。</p>

<pre class="code"><code>Integer nullObj = <span class="keyword">null</span>; 
<span class="keyword">int</span> n = nullObj;    <span class="comment">// NullPointerException </span>
</code></pre></dd>
</dl>

<h2 id="可変長引数">可変長引数</h2>

<em>可変長引数</em>の機能により、同じ型の可変の引数を取ることができます。引数の数をコンパイル時または実行時に決定することができます。可変長引数は<em>省略記号(...)</em>を使います。

<pre class="code"><code><span class="keyword">public</span> Constructor(String name, String... args)
</code></pre>

可変長引数は、１メソッドにつき、１つの省略記号しか使えない。また、省略記号は最後の引数として指定しなければならない。

可変長引数には、引数を0個以上指定できる。引数に何も指定しないことも可能です。

可変長引数は、メソッドの中では配列のように使用できる。<em>引数を指定せずに呼び出すことも可能なので、プログラマはこのことを念頭に入れてメソッドを実装しなければなりません。</em>。

<h2 id="アノテーション">アノテーション</h2>

<ul><li><a href="#アノテーションとは">アノテーションとは</a></li>
<li><a href="#標準アノテーション">標準アノテーション</a></li>
<li><a href="#メタアノテーション">メタアノテーション</a></li></ul>

<h3 id="アノテーションとは">アノテーションとは</h3>

<strong>アノテーション</strong>とは、実行可能なコードではなく、コードを説明する付加情報のことです。ツールによって分析・解析される情報になります。J2SE5.0 Tiger で採択されたアノテーションは、明確に定義されたメタデータを使って、コードを補足するものと考えられます。

アノテーションは、コンパイラによってチェックされます。アノテーションの綴りが間違っている場合にはコンパイルエラーになります。<span class="border_bottom">アノテーションは、意図していることを表すための重要なものなので、使用することをお勧めします</span>。

<h3 id="標準アノテーション">標準アノテーション</h3>

<dl><dt>@Override</dt>
<dd><p>このメソッドが、スーパークラスのメソッドをオーバーライドすることを示します。</p>

<pre class="code"><code><span class="keyword">public</span> String toString() { 
... 
} 
</code></pre></dd>
<dt>@Deprecated</dt>
<dd><p>このメソッドまたは要素の使用が廃止されたことを示します。このアノテーションは、メソッド宣言と同じ行に宣言します。</p>

<pre class="code"><code>@Deprecated <span class="keyword">public</span> <span class="keyword">void</span> hoge() { 
... 
} 
</code></pre></dd>
<dt>@SuppressWarnings</dt>
<dd><p>初期化子に対するコンパイラの警告を無効にすることを示します。</p>

<pre class="code"><code>@SuppressWarnings(<span class="literal">"unchecked"</span>) 
<span class="keyword">public</span> <span class="keyword">void</span> warnMethod() { 
... 
} 
</code></pre></dd>
</dl>

<h4>[参考]</h4>

+ <a href="http://www5.airnet.ne.jp/sakuraba/java/laboratory/J2SE1.5/LangSpec/Metadata/Metadata.html" target="_blank" class="extlink">アノテーションの詳細 - J2SE5.0 Tiger 虎の穴</a>

<h3 id="メタアノテーション">メタアノテーション</h3>

<em>メタアノテーション</em>、つまりアノテーションのアノテーションには4つの標準のものが用意されています。

<dl>
<dt>@Target</dt>
<dd><p>アノテーションを定義できるプログラム要素を指定する。</p>

<ul><li>ElementType.TYPE</li><li>ElementType.FIELD</li><li>ElementType.METHOD</li><li>ElementType.PARAMETER</li><li>ElementType.CONSTRUCTOR</li><li>ElementType.LOCAL_VARIABLE</li><li>ElementType.ANNOTATION_TYPE</li><li>ElementType.PACKAGE</li></ul></dd>
<dt>@Retention</dt>
<dd><p>アノテーションの定義をどこまで残すかを指定する。コンパイル時に無視することもできるし、クラスファイルに埋め込むこともできる。</p></dd>
<dt>@Documented</dt><dd><p>アノテーションをJavaDocに表示するかどうかを指定する。第三者が書いたコードのトラブルシューティング、アップデート情報、管理を行うための情報を記載するときに使う。</p></dd>
<dt>@Inherited</dt><dd><p>アノテーションを継承先のクラスにも反映させるかどうかを指定する。</p></dd>
</dl>

<h2 id="拡張 for ステートメント">拡張 for ステートメント</h2>

<pre class="code"><code><span class="keyword">for</span> (Object element : list) { 
    element.toString(); 
}
</code></pre>

この拡張 for ステートメントにより、java.util.Iterator を使う機会がグッと減る。<span class="border_bottom">for 文に使えるクラスは、java.lang.Iterable インターフェースを実装している配列またはオブジェクト出なければならない</span>。

拡張 for ステートメントでできないことに、「現在の要素位置を特定すること。」、「ループ中で要素を削除する。」、「二つ以上の配列を同一インデックスでアクセスする。」などがあります。

<h2>参考</h2>

+ J2SEの易しい解説を求める人へ。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872834100/sorehabooks-22/" target="_blank">進化するJava J2SE5.0</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872834100/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4872834100.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Javaプログラミング同好会<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4872834100&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />J2SE5.0について非常に丁寧で分かりやすく解説<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872834100/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4873112141.09.MZZZZZZZ.jpg" border="0" alt="Java 5.0 Tiger    開発者ノートシリーズ">
-----
KEYWORDS:
J2SE5.0,J2SE1.5,Tiger,Java,新機能,覚書き,Generics,Varargs,Autoboxing
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その15:Visitorパターン
BASENAME: 実践デザパタその15visitorパターン
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 01/28/2005 03:58:00 PM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

15番目のパターンはデータ構造と振る舞いを分離して、振る舞いを実行するクラスの変更や拡張を可能にする<strong>Visitor</strong>パターンのメモです。
-----
EXTENDED BODY:
<h2>Visitorパターン</h2>

<p class="option">Visitor パターンは、データ構造と振る舞いを別々のクラスに扱わせて、振る舞いの変更や追加、拡張を可能にするパターンです。</p>

<img src="http://hamasyou.com/images/design_pattern/visitor.gif" alt="Visitorのクラス図" />

Visitorパターンは、<em>データ構造(データの階層構造)が変化しない場合に限り有効なパターンになります</em>。Visitorパターンを使う目的は一つで、<em>データ構造に対して、振る舞いが変化する可能性がある場合に対応しやすくする事です</em>。

クラス図を見ると、インターフェースVisitor には visit というメソッドが2つあります。これはデータ構造が2種類あることを示しています。振る舞いを追加する場合、インターフェースVisitorを実装したクラスを作ることで対応します。

このパターンは<strong>ダブルディスパッチ</strong>とも呼ばれます。データ構造側のポリモーフィズムを使ったディスパッチと、振る舞い側のポリモーフィズムを使ったディスパッチの2回を使っています。

<section>

<h4>mainメソッド</h4>

<pre class="code"><code>Visitor visitor = <span class="keyword">new</span> ConcreteVisitorA(); 
DataElement elementA = <span class="keyword">new</span> ConcreteDataElementA(); 
 
elementA.accept(visitor); 
</code></pre>

<section>

<h4>データ構造クラス</h4>

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">void</span> accept(Visitor visitor) { 
    visitor.visit(this); 
} 
</code></pre>

Visitorパターンの注目する点は、<em>インターフェースVisitのメソッド引数に実装クラス名が指定されていること</em>です。これによって、データ構造ごとにメソッドを実装することができ、メソッドの中身がきれいになります。ここで抽象クラス名を使ってしまうと、メソッドの内部でクラスの種類によって条件分岐の処理をしなければいけなくなります。つまり、Visitorはデータ構造に依存していると言うことです。<em>データ構造が変更になると、Visitor自体も変更する必要があることに注意です</em>。

<h3>Visitor の使いどころ</h3>

<blockquote>

Visitorパターンがよく使われるのは、「<em>大きなデータ構造を渡り歩き、レポートを出力するような場合</em>」である。そうすれば、データ構造体オブジェクト自体がレポート生成用のコードを持たなくていい。また、データ構造体のコードを変更しなくても、新しいレポート機能を追加したいときには、新しいVisitorを追加することで実現できる。このことは、レポート機能を別コンポーネントとして分離し、顧客にとって必要な機能だけを個別に配布できることを意味している。

<cite>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22" target="_blank" class="extlink">アジャイルソフトウェア開発の奥義</a>』</cite>

</blockquote>

また、Visitor パターンを使う場合として、「<em>Validation処理(妥当性チェック)</em>」が挙げれると思います。処理するデータ構造を決めてしまって、ValidationクラスをVisitor として実装すれば、必要なチェックを実行時に追加、削除できるようになると思います。

<h2>実装サンプルと参考文献</h2>

+ 日立ソフト(Visitorパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/visitor.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/Visitor/index.htm" target="_blank" class="extlink">Visitorの骸骨</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" target="_blank">増補改訂版Java言語で学ぶデザインパターン入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">結城 浩<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797327030&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />JAVA&OOPの入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラマー必見でしょう<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソースコードが読める<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" target="_blank">独習デザインパターン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">株式会社テクノロジックアート長瀬 嘉秀<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798104450&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />デザインパターンをはじめるには最適な書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />分かりやすいGoFデザインパターンの説明<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" target="_blank">デザインパターンによるJava実践プログラミング</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">スティーヴン シュテルティンオーラブ マースセンStephen SteltingOlav Maassenクイック<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756141552&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" target="_blank">UML 500の技</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Windowsプログラミング愛好会<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774116882&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">アジャイルソフトウェア開発の奥義</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロバート・C・マーチン瀬谷 啓介<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797323361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />いい本だとおもいます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「奥義」の名に恥じない内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Visitorパターン">
-----
KEYWORDS:
デザインパターン,Visitor,ビジター,GoF,Java,データ構造,振る舞い,分離,拡張,追加
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 一番やさしいJSP&サーブレット入門塾
BASENAME: 一番やさしいjspサーブレット入門塾
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 01/31/2005 09:53:05 AM
TAGS: J2EE,わかりやすい
-----
BODY:
本書は、JavaでWebアプリケーションを作る際に必要となる基礎的な知識をほとんど網羅しています。「Webアプリケーションとは何なのか？」、「サーブレットはどのように動くのか？」、「JSPとサーブレットは何が違うのか？」、「JSP + サーブレット + JavaBeans を使ったWebアプリケーションとは？」など、誰かが教えてくれそうで教えてくれなかったことについて説明してあります。

本書一冊ではWebアプリケーションを開発することはできないかもしれません。ただ、本質的な部分を網羅しているので、最終的なWebアプリケーションの質が向上すると思います。セキュリティに気をつけるにはどこをチェックすればよいかなど、はずせないポイントも満載です。

対象読者は、CGI を書いたことがある人、Webアプリケーションの動作原理を多少でも知っている人 〜 JSP & サーブレットの基本を学びたい人、質の高いWebアプリケーションを作ろうと思っている人です。

感想は、「<strong>小さいくせに内容は濃い</strong>」です。サイズが小さくちょっとした合間に読むことができる本です。JSP & サーブレットの基本動作を理解したいときに、サクッと読むのにもってこいだと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

Webアプリケーションを開発するときに、それぞれの技術(JSP、サーブレット、JavaBeans、データベース)がどのように連携するのかを理解できます。なぜこの構造がよいのかを、順を追って説明し、サンプルコードが洗練されていく様を見ると、しっかりとした知識を取得できます。

タイトルの「一番やさしい」というのは、たぶんうそです。もっと簡単に書いてあって、読者を煙に巻いたように分かった気にさせる本はたくさんあります。本書は、「分かりやすく書いているけど、しっかり理解させる」スタンスが貫かれているように思います。入門書で「<strong>セキュリティ</strong>」に関しても説明している書籍はあまり無いと思います。

新人研修などで、「本書」、「JSP + サーブレットの言語仕様を学べる本」、「Webアプリケーションにおける設計技法に関する本」 の3つを用意すれば大方のWebアプリケーション開発には間に合うかと思います。セキュリティや個人情報保護など、別途必要な知識はありますが。

かなりコストパフォーマンスに優れているので、買って損は無いと思います。通勤途中、新人研修、勉強会で利用できます。

<h2>参考</h2>

+ JSP & サーブレットの言語仕様等を学ぶのにおすすめ。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/" target="_blank">サーブレット/JSP プログラミングテクニック 改訂版</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/" target="_blank"><img src=http://images-jp.amazon.com/images/P/4797324120.09.MZZZZZZZ.jpg   border="0" /></a></td><td valign="top"><font size="-1">今野 睦 戸田 和宏 藤村 浩士 高安 厚思<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797324120&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324120/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Webアプリケーションにおける設計技法(デザインパターン)を学ぶのに超おすすめ。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" target="_blank">J2EEパターン―明暗を分ける設計の戦略</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" target="_blank"><img src=http://images-jp.amazon.com/images/P/4894714345.09.MZZZZZZZ.jpg   border="0" /></a></td><td valign="top"><font size="-1">ディーパック・アラー ジョン・クルーピ ダン・マークス ウルシステムズ株式会社<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714345&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />J2EE技術者の共通語彙集<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />副題の言うとおり<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これが待ち望んでいたもの<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />J2EEにとらわれず、すべてのJAVA Webアプリケーション開発者に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />総てのJ2EE開発者必携!! 持ってない?! いますぐ買いに走れ!!<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ J2EEの現場でもまれたロッドジョンソンによる、J2EEの本質。実践向けという感じです。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" target="_blank">実践J2EE システムデザイン&業務運用[仮題・予定価格]</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" target="_blank"><img src=http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg   border="0" /></a></td><td valign="top"><font size="-1">ロッド・ジョンソン<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322888&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに実践　まさに必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は充実、ただ経験、印象に頼るところも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Spring Freamworkの作者に迫れる唯一の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />坊主にくけりゃ袈裟までにくい?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「現場主義」といったスタンスが根底に貫かれている<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798103470.09.MZZZZZZZ.jpg" border="0" alt="一番やさしいJSP&サーブレット入門塾">
-----
KEYWORDS:
一番やさしい,JSP,サーブレット,Servlet,入門塾,サーバーサイド,樋口研究室
-----


-----
CF50_CF_4: 樋口研究室 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/510G58K9P3L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798103470/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: アジャイルモデリング―XPと統一プロセスを補完するプラクティス
BASENAME: xp
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 02/04/2005 09:03:55 AM
TAGS: アジャイル,データモデリング,定番,良書
-----
BODY:
アジャイルモデリングとは何か −

<blockquote>

アジャイルモデリング(AM)とは、効果的なモデラーになるための秘訣を説明した、プラクティスに基づくプロセスです。モデリングなんてしないという極端な状況では、ソフトウェアが十分に考えられずに作成されたことに気づいたときには、膨大な再作業が発生することがあります。もう一方の極端は、過剰にモデルや文章が作成されると言う場合で、カタツムリのようにソフトウェア開発の進行が遅れることがしばしばです。<b>AM は、そのような両極端の間で、開発対象のシステムを効果的に検討したり、文章家するために十分なレベルで、かつプロジェクトの開発を遅らせるような重荷にならない程度で、程よくモデリングを行うためのやり方を探すお手伝いをします</b>。

<cite>本書はじめにより</cite>

</blockquote>

今までのプロジェクトを振り返って、モデリングがなされなかったプロジェクトはいくつありましたか？ドキュメント地獄で、実行可能なコードを書く時間がまったく無かったプロジェクトはいくつありましたか？本書は「<strong>アジャイルモデリング</strong>」という、モデリングの方法を解説します。

本書では、モデルの表記法(ノーテーション)には触れていません。<abbr title="Unified Modeling Language">UML</abbr>を使ってもいいし、OMTを使ってもかまいません。また、開発プロセスに関しても、アジャイル開発プロセス(XP、 Scrum、FDDなど）に適用すれば効果的ですが、開発プロセスの限定はしていません。

本書は、確かにためにはなるし、勉強になります。ただ、そんなことよりも<b class="red">読んでいてワクワクする</b>気持ちのほうが強かったです。読み終わった後、何かしたい衝動に駆られること間違いなしです。

アジャイルモデリングの原則、プラクティス、実践、実際に開発プロセスに適用した場合のケーススタディ。本書は、アジャイルモデリングを余すところ無く解説しています。開発者だけでなく、プロジェクトマネージャーにも是非読んで欲しい一冊です。<b>非常に良い本</b>です。かなりおすすめです。
-----
EXTENDED BODY:
<h2>特徴</h2>

アジャイルモデリング (AM) と聞いて、最初に頭に思い浮かぶのが「モデリング技法」なのか？と言うことでした。UMLを用いたモデリング技術に関することが述べられていると思って購入しましたが、実はそういうものではありませんでした。

本書は、モデリング技術(技法)に関してはまったく触れていません。どういうことが書いてあるかというと、大体つぎのような感じです。

<ul><li>アジャイルの原則の説明(考え方)</li>
<li>アジャイルプラクティスの説明(考え方) + 実践方法</li>
<li>実際の現場でアジャイルモデリングを行うためにはどうすればよいか</li>
<li>開発プロセス(XP、統一プロセス(UP)) に適用した場合の位置づけ</li></ul>

実際のモデルやコードが出てくるわけではないので、雲をつかむような話に感じてしまいがちですが、そうではありませんでした。アジャイルモデリングと言うのは、非常に「<b>現場指向</b>」になっているからです。人のつながりを重要視し、複雑なものより簡潔さを好み、変更があることを前提に楽しみます。

<b>概念や考え方を解説した本でありながら、現場ですぐにでも使える</b>というところがとても印象的です。いつまでもCASEツールを使って不要なモデルを書くよりも、ホワイトボードに集まってみんなで検証しながらモデリングしたほうがずっと効果的です。本書はこういった点に気づかせてくれます。

2度、3度と読めてしまうほど、分かりやすくかかれています。非常におすすめの本です。 開発者のバイブルとなるでしょう。Be Agile！

<h2>参考</h2>

+ アジャイルモデリング(AM)のホームページです
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /> <a href="http://www.ogis-swe.jp/process/am-res/am/" taget="_blank">アジャイルモデリング(AM) 公式サイト</a>

+ アジャイルソフトウェア開発の奥義！これも特におすすめ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">アジャイルソフトウェア開発の奥義</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank"><img src=http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg   border="0" /></a></td><td valign="top"><font size="-1">ロバート・C・マーチン 瀬谷 啓介<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797323361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />いい本だとおもいます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「奥義」の名に恥じない内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ アジャイル開発プロセスを学びたい人におすすめ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281914/sorehabooks-22/" target="_blank">初めてのアジャイル開発　〜スクラム、XP、UP、Evoで学ぶ反復型開発の進め方〜</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281914/sorehabooks-22/" target="_blank"><img src=http://images-jp.amazon.com/images/P/4822281914.09.MZZZZZZZ.jpg   border="0" /></a></td><td valign="top"><font size="-1">クレーグ・ラーマン ウルシステムズ株式会社 児高 慎治郎 松田 直樹<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822281914&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />明解、手元におきたい<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281914/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ プロジェクトマネージャーに特におすすめしたい一冊
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798102199/sorehabooks-22/" target="_blank">適応型ソフトウエア開発-変化とスピードに挑むプロジェクトマネージメント</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798102199/sorehabooks-22/" target="_blank"><img src=http://images-jp.amazon.com/images/P/4798102199.09.MZZZZZZZ.jpg   border="0" /></a></td><td valign="top"><font size="-1">ジム・ハイスミス ウルシステムズ株式会社 山岸 耕二 原 幹<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798102199&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798102199/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798102636.09.MZZZZZZZ.jpg" border="0" alt="アジャイルモデリング―XPと統一プロセスを補完するプラクティス">
-----
KEYWORDS:
アジャイル,モデリング,アジャイルモデリング,XP,統一プロセス,UP,プラクティス,Agile,Modeling,オブジェクト指向
-----


-----
CF50_CF_4: スコット・W・アンブラー (著), 株式会社オージス総研 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/41245FAHD1L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798102636/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: プロジェクトマネージャのためのUML徹底活用術
BASENAME: uml_3
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 02/08/2005 12:47:03 AM
TAGS: UML,わかりやすい
-----
BODY:
本書で伝えたいことは一つ「<strong>UMLを使う技術</strong>」です。UMLを学び始めたときは、すべての仕様書をUMLだけで書けてしまうと思いがちです。でも、これはほとんどの場合間違いで、プロジェクトの進捗にあった適切なドキュメントを、一番コストがかからない方法で作成する方がよいのです。

本書では、「<b>UMLを読む技術</b>」、「<b>UMLを描く技術</b>」、「<b>UMLで検証する技術</b>」、「<b>UMLで進捗管理する技術</b>」を学ぶことができます。&quot;プロジェクトマネージャのための&quot; とタイトルにあるように、プロジェクト管理にUMLを使う方法を学べるのが特色です。

UMLを読む技術、UMLを描く技術と言うと、かなり濃いところまで説明されているように感じる人もいると思います。しかし、<span class="border_bottom">本書では設計段階に落とす前までの、つまり業務分析や業務モデリングの段階で使える程度の知識を学ぶところに焦点が当てられています</span>。なので、決して技術者向けということは無い感じです。

プロジェクトで、UMLを導入してみたいと思っているプロジェクトマネージャーや管理者、業務分析や業務モデリングで作られたドキュメントを読む必要の在る設計者におすすめします。とても分かりやすい言葉で書かれていて、理解しやすいです。入門書として活用するのが効果的だと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、プロジェクトの上流段階でUMLをどのように使うかを解説した本になっています。対象読者はプロジェクトマネージャや管理者になっています。

<b>UMLを読む技術</b>、<b>UMLを描く技術</b>として、業務分析や業務モデリングの段階でUMLを利用する方法について述べられています。<b>UMLで検証する技術</b>、<b>UMLで進捗管理する技術</b>として、お客様の要求をチェックしたり、現在の進捗を可視化する方法について解説してあります。

読み書きのレベルとしては、ユースケースを導出したり、クラス図やアクティビティ図を描いたり読んだりすることができるようになります。そうしてできたユースケースやクラス図を使って、要求のチェックや進捗の管理を行っていきます。

ぶっちゃけた話をすると開発者としては物足りない部分もあります。本書に書かれているUMLの使い方ではモノ(プログラム)はできないからです。しかし、プロジェクトマネージャや管理者がどうしてこういう分析結果になったのかということを理解するための知識を身に付けるにはいいと思います。

読みやすく技術書にしては安いので、読み物として購入するのがいいと思います。僕にとっては、値段と中身を比較したらプラスになったかなという感じです。

<h2>覚書き</h2>

<h3>システムに必要な情報</h3>

システムを作るために必要な情報というのは、ベンダー側ではなくユーザ側にある。足りない情報は随時ユーザから聞き出さなければならない。足りない情報を補完するために要件整理をUMLで行う。

<h3>ウォーターフォールモデルのメリットとデメリット</h3>

<blockquote>

<strong>ウォーターフォール</strong>型モデルは、各フェーズ(要件定義・分析・設計・実装・テスト)で契約をコミットするという事が前提条件となる。つまり、後戻りがしづらい。しかし、要件定義以外は、時間とパワーさえあれば後戻りは可能である。

追加案件や機能追加は、ウォーターフォールモデルではできないと考えている人も多い。しかし、実際には要件定義、分析、設計のフェーズが増えるだけで、実装とテストに組み込めばいいだけである。シンプルであるのでほとんどデメリットらしいものはない。

<cite>本書</cite>

</blockquote>

僕の考えでは、確かにプロジェクトマネージャの視点で見るとデメリットはないと思う。むしろ使いやすくていいと思う。しかし、開発者の視点で見ると、実装の段階で無理やり組み込むイメージがあり、設計が破綻してしまう可能性が高いように思う。力のある技術者がいれば何とか形になるものの、保守の段階でコストが膨らむ可能性があるように感じる。

<h3>要件定義で行うこと</h3>

システムとは、ユーザ企業の何らかの戦略の一部であることがほとんどで、要求されている機能にはそれぞれ意味があり、機能同士にはなんらかのつながりがある。まずはじめにしなければならないことは、要件に書かれている機能同士のつながりを把握することだ。

機能の把握には<strong>アクティビティ図</strong>が使える。

<h2>参考</h2>

+ UMLを使ってEAを理解するための本(PM向け)
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107581/sorehabooks-22/" target="_blank">かんたん!エンタープライズ・アーキテクチャ―UMLによる「業務と情報システムの最適化計画」の立案</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107581/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4798107581.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">加藤 正和<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798107581&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />UML?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />ＥＡって何することなの？が分かりました<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />UMLビジネスモデリングの実例を！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />未来のシステム技術のＥＡを非常に分かりやすく解説<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107581/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ オブジェクト指向でなぜ作るのか？その疑問の答えはここに(開発者向け)
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/" target="_blank">オブジェクト指向でなぜつくるのか―知っておきたいプログラミング、UML、設計の基礎知識―</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4822281957.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">平澤 章<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822281957&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />読んで損はない１冊だと思います！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Javaで仕事をしている人も必見<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />入門書の入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />レガシーからオブジェクトへの入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />オブジェクト指向の本質を的確に解説<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 要求を見逃さないための一冊(PM向け)
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106984/sorehabooks-22/" target="_blank">要求定義のチェックポイント427</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106984/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4798106984.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">本園 明史<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798106984&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />現実を書いた希少な実践本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106984/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798107565.09.MZZZZZZZ.jpg" border="0" alt="プロジェクトマネージャのためのUML徹底活用術">
-----
KEYWORDS:
UML,Unified Modeling Language,プロジェクトマネージャ,徹底活用術,見積り,検証,進捗管理
-----


-----
CF50_CF_4: 巻山 展輝 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51M10HP685L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798107565/sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Java Webサービス
BASENAME: java_web
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 02/13/2005 09:04:42 AM
TAGS: Webサービス
-----
BODY:
<strong>Webサービス</strong>、<strong>SOAP</strong>、<strong>WSDL</strong>、<strong>UDDI</strong>というキーワードをすべて網羅した実用書です。JavaでWebサービスを構築する手順、コーディング方法が詳しく載っています。

Java以外の言語を使ってWebサービスを実装する場合でも、本書を使えます。本書の半分以上は、言語によらないWebサービスの実装方法を解説しているためです。例えば、SOAPメッセージの構造はどうなっているだとか、WSDLのこの項目はどんな意味を持つのかといった感じです。

非常に分かりやすい言葉で解説していて、Webサービスを構築しようと思っている人にとっては分かりやすいと思います。逆に、興味程度の知識が欲しい人にとっては、具体的すぎてよく分からないかもしれません。
-----
EXTENDED BODY:
<h2>特徴</h2>

とにかく具体的です。SOAPメッセージの仕様、WSDLの構造、UDDIの仕組みと、動くコードを具体的な値で解説しているので、開発者にはとても分かりやすいと思います。

逆に、マネージャーやWebサービスとは何だ？という人には具体的過ぎて、良く分からないかもしれません。そういった人には、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22" target="_blank" class="extlink">図解標準 最新Webサービス マスタリングハンドブック―XML、SOAP、WSDL、UDDIの基本から開発まで</a>』がおすすめです。図入りで分かりやすくWebサービスとはどういうものかを解説しています。

半分くらいはWebサービスの標準仕様に関する解説で、残りの半分がJavaでWebサービスを構築した場合のコード例になっている感じです。Webサービスを構築しながら読むと、いっそう理解が深まると思います。

<h2>覚書き</h2>

<h3>開発者が行うアクティビティ</h3>

Webサービスの開発者は、下記のことを行う必要があります。

<ul><li>サービスのインターフェースの設計</li><li>サービスの実装コードの作成、デプロイ可能なパッケージの組み立て</li><li>サービスレジストリ(UDDIサーバ)への登録、WSDLや利用マニュアル、APIドキュメントなどの公開</li></ul>

<h3>SOAP</h3>

SOAP(Simple Object Access Protocol)は、Webサービスの標準仕様となっているプロトコルです。SOAPでは通信のすべてが、XMLで表現されます。通信自体にはHTTPやSMTPが使われることが多いです。SOAPは通信プロトコルに依存しないように、扱う文書をXMLで表現することにしています。

SOAPは、データ型の表現やリモートメソッド呼び出し、文書交換を行います。ただのXML文書ではSOAP文書にはなりません。下記の項目を満たす必要があります。

<ul><li>XMLをSOAPボディでラッピング</li><li>SOAPボディをSOAPエンベロープでラッピング</li><li>SOAPヘッダをSOAPエンベロープ内に記述</li><li>名前空間の宣言</li><li>シリアライズ用の符号化スタイルディレクティブ</li><li>全体をプロトコルにバインドする</li></ul>

<h2>参考</h2>

+ 日本ユニシスのWebサービス解説チュートリアル
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /> <a href="http://www.unisys.co.jp/EACTION2/webservices/" target="_blank">日本ユニシス</a>

+ Webサービスを理解しようと思うならこの本
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/" target="_blank">図解標準 最新Webサービス マスタリングハンドブック―XML、SOAP、WSDL、UDDIの基本から開発まで</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4798007064.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">本 俊也<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798007064&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />読みづらい、サンプルが少ない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おすすめです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おすすめです。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 何度も読めるほど易しく書かれています。理解しやすいです。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116165/sorehabooks-22/" target="_blank">SOAP/UDDI/WSDL Webサービス技術基礎と実践 徹底解説</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116165/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774116165.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">日本ユニテックDigital Xpress編集部<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774116165&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />1年後に読み直してみての感想<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />基本を押さえたいときにぴったり<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116165/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 実践で技術を磨きたいという人におすすめ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122165/sorehabooks-22/" target="_blank">エンジニア実験室試してわかるWebサービス</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122165/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774122165.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">藤田 一郎<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774122165&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122165/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4873111013.09.MZZZZZZZ.jpg" border="0" alt="Java Webサービス">
-----
KEYWORDS:
Java,Webサービス,Web Service,SOA,Service-Oriented Architectures
-----


-----
CF50_CF_4: David A.Chappell (著), Tyler Jewell (著), テクノロジックアート (著), 長瀬 嘉秀 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/5131XZ485KL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4873111013/sorehabooks-22
CF50_CF: オライリー・ジャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Java謎+落とし穴徹底解明
BASENAME: java_8
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 02/19/2005 06:32:13 PM
TAGS: Java,定番,良書
-----
BODY:
普通の入門書と違うところ。それは「なぜ？(Why)」を追求するところにあると思います。事実がこうなっている理由を説明しているので、理解できればかなりの力になると思います。

文章の言い回しなど、著者の特徴が非常によく出ているので、好き嫌いが分かれそうです。内容も「仕組み」を理解したい理工系の人向けになっています。基本的な文法などは載っていません。Javaのヒープの使い方、ガーベージコレクションの動作の仕組み、ポインタがないといううそを暴く(Javaはポインタしかない言語だ)など、一般の入門書では解説されていないような観点から本書はできています。

人によって好き嫌いが分かれると思います。人になんでと言われて意気揚々と説明してあげたくなるような技術者肌の人は本書を快く受け入れられると思います。

対象読者は初級者〜中級者。多少Javaの仕組みを知っている人が望ましいと思います。一度の読みですべてを理解するのは難しいかもしれません。何度も読んで完璧に理解すると、Java博士と呼ばれるようになる日も近くなると思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

<blockquote>

Javaは巷では「<b>ポインタがない言語</b>」だと言われている。しかしそれはうそで、実は「<b>ポインタしかない言語</b>」である。

<cite>本書</cite>

</blockquote>

こんな感じで、ものの仕組みを知りたがる理工系の技術者に、非常に興味のそそる内容がつめこめられています。たしかに、知らなくてもプログラムは組めるし、質の良いコードも書けます。でも知らないと気持ち悪いという気分もあるはずです。

例えば、「Javaのメモリモデルはどうなっているのだろうか？」という疑問が浮かんだときに、「まあいいや知らなくても」となる人は、たぶん本書とは無縁の人でしょう。「ん？どうなってるんだ？」という気持ちになった人は<b>本書を買いにいくべき</b>です。

入門書として読むのではなく、知識書として考えるといいと思います。一度の読みですべてを理解することが難しいので、何度も読んで、Javaの真髄を見極めてください。面白いと思います。

<h2>参考</h2>

+ Javaプログラミングを極めたい人に贈る
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank">Effective Java プログラミング言語ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4894714361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Joshua Bloch ジョシュア・ブロック<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />基本ライブラリの設計に興味を抱かせてくれる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />J2EE版が欲しい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />JAVA言語を理解するための効果的な実践書です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Effective C++とともに最良の書籍<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />脱初心者に必須<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Javaのスレッドの仕組みを極めたい人に贈る
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477411491X/sorehabooks-22/" target="_blank">Javaスレッド完全制覇</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477411491X/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/477411491X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">村上 列<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=477411491X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />スレッドプログラミングの勉強を始めるには最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />スレッドをしっかり理解したい人にお勧めです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />入門書の次に・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />大変分かり易いJavaスレッドプログラミングの本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477411491X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Javaのネットワークプログラミングを理解したい人の贈る
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774118389/sorehabooks-22/" target="_blank">Javaネットワーク&ストリーム完全制覇</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774118389/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774118389.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">米川 英樹<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774118389&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />ストリーム、ネットワークの基本を理解するには○<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />イマイチ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />サクサク進んで、わかりやすい<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774118389/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ JavaのGUIモデルを理解したい人に贈る
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774115517/sorehabooks-22/" target="_blank">Java GUIコンポーネント完全制覇</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774115517/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774115517.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">柏原 正三<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774115517&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />入門としては良書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />充実した内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />すばらしい本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774115517/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Javaのグラフィックス機能を理解したい人の贈る
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113484/sorehabooks-22/" target="_blank">Javaグラフィクス完全制覇</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113484/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774113484.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">芹沢 浩<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774113484&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774113484/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774113611.09.MZZZZZZZ.jpg" border="0" alt="Java謎+落とし穴徹底解明">
-----
KEYWORDS:
Java,謎,落とし穴,徹底解明,オブジェクト指向,真髄,解説書
-----


-----
CF50_CF_4: 前橋 和弥 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/511SZ24JQNL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774113611/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 実践デザパタ-その16:Commandパターン
BASENAME: -16command
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 02/22/2005 12:49:13 AM
-----
BODY:
デザインパターンとは、システム設計におけるクラスやインターフェースの関係に名前をつけたものです。
GoFの23のパターンが有名です。デザインパターンというのは、どんなパターンなのか、パターンの目的は何かということを覚えることが非常に重要なのですが、これを実際に適用しようとした場合に、いつ適用していいかが見えてこないとお話になりません。

そこで、自分の勉強も兼ねつつ、パターンの実践時における使用場所や、パターンを適用するきっかけを見つけられるようにメモしておきます。

16番目のパターンは実行可能なアクション(コマンド)をオブジェクトとして扱い、コマンドの詳細をカプセル化する<strong>Command</strong>パターンです。
-----
EXTENDED BODY:
<h2>Commandパターン</h2>

<p class="option">Commandパターンは、実行可能なアクション(コマンド)をオブジェクトとして扱い、コマンドの詳細をカプセル化するパターンです。コマンドの追加や削除に対して柔軟になります。</p>

<img src="http://hamasyou.com/images/design_pattern/command.gif" alt="Commandのクラス図" />

<h3>Commandパターンの動き</h3>

Commandパターンは、ユーザが実行する処理をCommandオブジェクトにカプセル化するところから始まります。イベントが発生すると、InvokerがCommandオブジェクトのexecuteを呼び出します。Commandオブジェクトは、アクションを実行した後、Receiverに結果を伝えます。

Commandパターンが有効に働く場面

<ul><li>UNDO、ログの記録、トランザクションをサポートしたいとき</li>
<li>非同期でアクションを実行したい場合。キューなどに入れて異なるタイミングで実行する</li>
<li>イベントとアクションを分離したい場合。Webアプリケーションの作成時に利用</li></ul>

<h3>Commandの考え方</h3>

Commandは<em>相互作用による振る舞いを分離している</em>パターンです。クラス図を見ると分かるように、<em>開放閉鎖の原則</em>(<acronym title="Open Closed Principle">OCP</acronym>) に乗っ取っています。役割(ロール)ベースで考えると、何か処理したいものがあり(Command)、イベントがどこかで起こり(Invoker)、その結果がどこかに伝わる(Receiver)がある場合、Commandパターンが使えると言うことになります。

イベント駆動型の設計を行う場合に使えると言えます。Webアプリケーション、GUIを伴ったアプリケーション、対話型のアプリケーションと利用範囲はさまざまです。バッチ処理にも使えます。Commandパターンのすごいところは、<em>処理をカプセル化しているため、イベントの起こり方には左右されない</em>点です。上記のどのアプリケーションでも、Commandの部分のロジックは変更する必要がありません。

<h3>Commandパターンの例</h3>

Commandパターンが使われている例として、JavaのWebアプリケーションフレームワークである<a href="http://www.ingrid.org/jajakarta/struts/" target="_blank" class="extlink">Struts</a>などが有名です。Webアプリケーションを作るときは、Commandパターンを知らず知らずのうちに使っていると思います。

メッセージング処理などもCommandパターンの利用例の一つです。非同期処理をキューに溜め込んで、順次処理をしていくといった方法で使われています。

<h2>実装サンプルと参考文献</h2>

+ 日立ソフト(Commandパターン)
<a href="http://www.dmz.hitachi-sk.co.jp/Java/Tech/pattern/gof/command.html" target="_blank" class="extlink">日立ソフト</a>

+ Skeleton of GOF's Design Pattern(JavaとC++のサンプルがあります)
<a href="http://www002.upp.so-net.ne.jp/ys_oota/mdp/Command/index.htm" target="_blank" class="extlink">Commandの骸骨</a>

+ デザインパターンのお勧め書籍
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" target="_blank">増補改訂版Java言語で学ぶデザインパターン入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797327030.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">結城 浩<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797327030&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />JAVA&OOPの入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラマー必見でしょう<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソースコードが読める<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />この本なしにJavaは語れない<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 独習シリーズのデザインパターン編。デザインパターンを一人でも学べます。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" target="_blank">独習デザインパターン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4798104450.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">株式会社テクノロジックアート長瀬 嘉秀<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798104450&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />デザインパターンをはじめるには最適な書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />分かりやすいGoFデザインパターンの説明<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />GoF本で挫折した人の為の本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798104450/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ Sun Microsystemのお墨付き。GoF以外のパターンも学べます。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" target="_blank">デザインパターンによるJava実践プログラミング</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4756141552.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">スティーヴン シュテルティンオーラブ マースセンStephen SteltingOlav Maassenクイック<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756141552&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />かなりの良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756141552/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ UMLを使って、オブジェクト指向のいいとこ取りができます。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" target="_blank">UML 500の技</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4774116882.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Windowsプログラミング愛好会<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774116882&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />たいした「技」は載っていません<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />私にはよかったと思います。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116882/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ デザインパターンだけではなく、ソフトウェア設計の原則やプラクティスまで学びたい人におすすめ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">アジャイルソフトウェア開発の奥義</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロバート・C・マーチン瀬谷 啓介<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797323361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均</em><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />いい本だとおもいます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「奥義」の名に恥じない内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Commandパターン">
-----
KEYWORDS:
デザインパターン,Command,コマンド,GoF,Java,データ構造,振る舞い,分離,拡張,追加,実行,トランザクション
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: SELinux覚書き-アクセス制御の仕組み
BASENAME: selinux-
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 02/23/2005 08:11:23 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221113/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/4822221113.09.MZZZZZZZ.jpg" border="0" alt="SELinux徹底ガイド" /></a>
</p>

大学で、SELinuxの講習会をうけたので、そのメモです。かなり基礎的な部分の説明で、アクセス制御の部分を集中的に教えてもらいました。

セキュアOSと呼ばれるOSの中でも、フリーで手に入るSELinuxは今後かなり注目されそうです。今日は、アクセス制御の仕組みとロールの付与の仕方について勉強しましたが、そのほかにもいろんな機能がある様子。詳しくは、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221113/sorehabooks-22" target="_blank" class="extlink">SELinux徹底ガイド</a>』を読むのが良いらしいです。(宣伝宣伝っと 笑)

セキュアOSとは何ぞやって事とSELinuxのアクセス制御(<strong>Type Enforcement</strong>)の方法、<strong>セキュリティ属性</strong>、<strong>Role-Based Access Control</strong> あたりをメモっておきます。かなり適当なメモなので、読むだけだと分からないかも・・・。『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221113/sorehabooks-22" target="_blank" class="extlink">SELinux徹底ガイド</a>』買おっかな。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>セキュアOSとは</h3>

大まかに2つの機能。強制アクセス制御機能とシステム管理権限を複数のユーザに分割する機能を持つOSのこと。

強制アクセス制御は、<strong>MAC</strong> (Mandatory Access Control)と呼ばれる。あらかじめ設定された<strong>セキュリティポリシー</strong>にしたがって、カーネルレベルでリソースへのアクセスを制御する仕組み。

システム管理権限を複数のユーザに分割するとは、<strong>RBAC</strong> (Role-Based Access Control) と呼ばれるロールベースのシステム管理方法。権限を細分化することで、root権限の分散を実現している。

<h3>これまでのLinuxOSの問題点</h3>

これまでのOSの仕組みでは、リソースへのアクセス権を<strong>DAC</strong> (Discreationary Access Control) と呼ばれる任意アクセス制御によって行っていた。これは、リソースの所有者が任意にアクセス許可を設定できる。プロセスのUID(ユーザID)とGID(グループID)、リソースの所有者とグループの比較により、アクセス権をチェックしていた。

これでは、管理者がいくらセキュリティポリシーを作っても、全ユーザにポリシーを守らせることは難しいし、root権限を奪取されてしまった場合にすべてのアクセスを許す結果になってしまう。

また、root権限は最高位権限で、あらゆる処理を行えてしまう。いったんroot権限を奪われたら、コンピュータを乗っ取られたのと同じことになる。

そこで考え出されたのが、<em>強制アクセス制御と権限の細分化</em>である。強制アクセス制御によって、セキュリティポリシーで許可されていないアクセスは、たとえrootであっても拒否される。権限の細分化により、アプリケーション管理者とシステム管理者とで行えることが違うという設定が可能になった。

<h3>セキュリティコンテキスト</h3>

SELinuxでは、<strong>セキュリティコンテキスト</strong>と呼ばれるセキュリティ属性を使ってアクセス制御や<acronym title="Role-Based Access Control">RBAC</acronym> を制御する。セキュリティ属性は、以下の3つの要素からなる。

<img src="http://hamasyou.com/images/selinux/security_context.gif" alt="セキュリティコンテキスト" />

ユーザ属性は、SELinuxがユーザを識別するのに使います。ロール属性は、RBACで設定されたアクセス権を示します。タイプ属性が、リソースへのアクセス制御に使われるものです。この、<em>タイプ属性をセキュリティポリシーと比較することで、リソースへのアクセス許可を出します</em>。

<pre>
例： hamasyou:sysadm_r:sysadm_t
ユーザ識別子： hamasyou
ロール： sysadm_r
タイプ： sysadm_t
</pre>

<h3>ドメイン遷移</h3>

<em>セキュリティポリシーが存在しない場合、親プロセスから生成された子プロセスは、親プロセスのタイプ属性を継承します</em>。これは、かなり危険で、例えば httpd デーモンをセキュリティ管理者権限を持つプロセスが実行した場合、httpd から生成される子プロセスは、セキュリティ管理者権限を持ってしまいます。

そこで、ドメイン遷移定義を設定することで、あるタイプ属性を持つプロセスが起動したプロセス(親プロセス)から割り当てられるプロセス(子プロセス)のタイプ属性を任意に設定できます。

<h3>Role-Based Access Control</h3>

<acronym title="Role-Based Access Control"><strong>RBAC</strong></acronym>は root 権限にすべての権限が集中してしまうのを改善する目的で導入されたものです。権限の細分化によって、管理者権限の厳重な管理を行います。

権限は、ロールというものに割り当てます。SELinuxでは、ロールごとにタイプ属性を付与します。作成したロールは、ユーザごとに割り振ります。ユーザに付与されたロールは、シェルの起動に使われます。シェルは、ロールに付与されたタイプ属性の権限で動きます。

<h2>参考</h2>

+ SELinuxのインストール方法
<a href="http://www.stackasterisk.jp/tech/systemConstruction/seLinux01_01.jsp" target="_blank" class="extlink">スタックアスタリスク - SELinux によるセキュアOS構築</a>

+ 国内 SELinux コミュニティーサイト
<a href="http://www.selinux.jp/" target="_blank" class="extlink">SELinux コミュニティーサイト</a>

+ SELinux を徹底的に知りたい人には、これしかないでしょう
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221113/sorehabooks-22/" target="_blank">SELinux徹底ガイド―セキュアOSによるシステム構築と運用 基本的な仕組みから高度な運用管理方法までを徹底解説</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221113/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4822221113.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">中村 雄一 水上 友宏 上野 修一 日立ソフトウェアエンジニアリング<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822221113&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均  </em><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />SELinuxを触る方には必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />徹底活用しましょう<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221113/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822221113.09.MZZZZZZZ.jpg" border="0" alt="SELinux徹底ガイド">
-----
KEYWORDS:
SELinux,セキュア,OS,セキュアOS,強制アクセス,Type Emforcement,セキュリティ属性
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Web+DB press (Vol.25)
BASENAME: webdb_press_vol25
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 02/28/2005 01:12:50 AM
TAGS: "Web+DB press"
-----
BODY:
Vol25 の注目記事は「<b>アーキテクチャ設計入門</b>」です。J2EEをアーキテクチャ設計の勘所をポイントを抑えて解説しています。最近の典型的な4層構造(プレゼンテーション層、サービス層、ドメイン層、永続化層)のそれぞれの設計ポイントがまとめられています。

「<b>開発者のためのドキュメント作成の技術</b>」も新人さんや2〜3年目の社員の方におすすめできる内容だと思います。設計書、マニュアル、議事録、提案書、報告書、メール、嘆願書、ポイント集と項目を挙げるだけでも読みたいと思えるようなものばかりだと思います。

「<b>Javaプログラミングの○と×</b>」も初心者プログラマの人には楽しめる内容だと思います。どんな点に気をつけてプログラミングを行えばいいかと言ったことが載っていました。

アーキテクチャ設計入門はプログラマ・システムエンジニアの人に是非読んでもらいたい記事です。かなり面白いことが書いてありウンウン納得しながら気持ちよく読めると思います。
-----
EXTENDED BODY:
<h2>アーキテクチャ設計入門-覚書き</h2>

<h3>コンポーネント作成のポイント</h3>

J2EEでアーキテクチャを考える単位は<strong>コンポーネント</strong>である。コンポーネントとは、「インターフェース」、「データ」、「ビジネスロジック」が最低限、集まったものです。

コンポーネントの粒度は、「処理の単位」、「DBへのアクセス頻度」、「画面表示情報」、「トランザクション処理」、「エラー処理」などを検討しつつ決める用にします。イメージ的には<b>ユースケースの似通った処理をまとめたものがコンポーネント</b>になる感じです。

コンポーネントを抽出する際に気をつける点は、各コンポーネントに対して低結合性と高凝集性を持たせるという点。他のコンポーネントに依存することがないのが理想的。同じ系統のサービスを一緒にまとめるのが基本。

<h3>オブジェクト指向でビジネス層を設計する</h3>

オブジェクト指向設計は、「データ構造」と「プロセス(処理)」をカプセル化したオブジェクトを元に設計を行っていきます。UMLのユースケースを満たすようにシステムを設計していきます。

ユースケースはビジネスの要求を表したものになります。そして、ユースケースは手続き(ビジネスフロー)を表したものになります。つまり、オブジェクト指向でユースケースを実装しようとするとミスマッチが起こります。このミスマッチをサービス層が生めることになります。

<strong><a href="http://corej2eepatterns.com/Patterns2ndEd/BusinessObject.htm" target="_blank" alt="Business Object Pattern" class="extlink">Business Object パターン</a></strong>と呼ばれるものが『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0131422464/sorehabooks-22" target="_blank" class="extlink">Core J2Ee Patterns</a>』という本に載っています。これは、<a href="http://www.ogis-ri.co.jp/otc/hiroba/technical/RobustnessAnalysis/RA1/" target="_blank" class="extlink">ロバストネス図</a>におけるエンティティに固有のロジックをカプセル化したパターンになります。

<strong>Business Object</strong> パターンのポイントは、サービスを提供するオブジェクトがエンティティ自身になるという点です。そして、粒度の細かいオブジェクト(ex. 注文明細、住所)をエンティティ内にカプセル化します。永続化の処理は、別途<a href="http://www.corej2eepatterns.com/Patterns2ndEd/DataAccessObject.htm" target="_blank" class="extlink">DAO</a>などに任せるような設計にします。このあたりは、O-Rマッピングツールの出番となるところです。

<h2>参考</h2>

+ J2EEを使った設計の極意は本書から盗め
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" target="_blank">実践J2EEシステムデザイン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロッド・ジョンソン<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322888&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Spring Freamworkの作者に迫れる唯一の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />坊主にくけりゃ袈裟までにくい?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は充実、ただ経験、印象に頼るところも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />まさに実践　まさに必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「現場主義」といったスタンスが根底に貫かれている<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ J2EEパターンをポイントポイントに使って、良い設計を心がけよう
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" target="_blank">J2EEパターン―明暗を分ける設計の戦略</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4894714345.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ディーパック・アラー ジョン・クルーピ ダン・マークス ウルシステムズ株式会社<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714345&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />J2EE技術者の共通語彙集<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />副題の言うとおり<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これが待ち望んでいたもの<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />J2EEにとらわれず、すべてのJAVA Webアプリケーション開発者に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />総てのJ2EE開発者必携!! 持ってない?! いますぐ買いに走れ!!<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ オブジェクト指向設計の極意！必読です。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">アジャイルソフトウェア開発の奥義</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797323361.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロバート・C・マーチン 瀬谷 啓介<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797323361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />いい本だとおもいます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「奥義」の名に恥じない内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />体系だてられた経験的ガイドラインか。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ アーキテクチャを考えるときに役に立つのは、優れたパターンである
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0131422464/sorehabooks-22/" target="_blank">Core J2Ee Patterns: Best Practices and Design Strategies (Core Design Series)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0131422464/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/0131422464.01.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Deepak Alur John Crupi Dan Malks<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0131422464&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0131422464/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774122645.09.MZZZZZZZ.jpg" border="0" alt="Web+DB press (Vol.25)">
-----
KEYWORDS:
WEB+DB,WEB,DB,PRESS,25,アーキテクチャ設計,Javaプログラミング,PostgreSQL,MySQL
-----


-----
CF50_CF_4: -
CF50_URL: http://ec2.images-amazon.com/images/I/6160ZDER8VL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774122645/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: AspectJによるアスペクト指向プログラミング入門
BASENAME: aspectj
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 03/10/2005 12:19:46 AM
TAGS: AOP,AspectJ
-----
BODY:
 <blockquote>

<strong>アスペクト指向</strong>を一言で表すなら、各プログラム(モジュール)から共通に利用される機能です。さらに、この機能はさまざまなモジュールにおいて横断的に利用されます。そして、モジュールの機能とは独立しています。

<cite>本書</cite>

</blockquote>

本書はアスペクト指向の概念を全体像を捕らえながら学べます。アスペクト指向の実装には色々あり、その中の一つである「<strong>AspectJ</strong>」をつかったプログラミングを行うための解説書になっています。

アスペクト指向で使われる専門用語を、例を交えて解説してあり、実際のコーディング例まで載っています。プログラマのための本だと言えます。<span class="border_bottom">説明は分かりやすいのに、かなり深いところまで解説してあり、AspectJを学ぶのに本書を読むのはかなり正解だと思います</span>。

AspectJはJava言語用のアスペクト指向実装であるので、Javaプログラミングをおこなった経験がある人向けです。AspectJを触ってみたい人、アスペクト指向がどんなものなのか知りたい人は、本書を読む事をおすすめします。
-----
EXTENDED BODY:
<h2>特徴</h2>

アスペクト指向って何なの？AspectJを使うにはどうすればいい？AspectJのリファレンスが欲しい。これらの要求にこたえてくれるのが本書です。

豊富なサンプルコード、詳しい解説、AspectJを使いこなすための要素が本書には入っていると思います。実際に業務で利用する場合や、個人の趣味で利用する場合に、ほとんど不自由しないと思います。

アスペクト指向、AspectJのリファレンスがB5サイズになってしまったので、これはかなり便利だと思います。AspectJプログラマの皆さんは、机の上に本書をおいておくことをおすすめします。

<h2>参考</h2>

+ アスペクト指向に関するWiki

<a href="http://www.oucc.org/~tail/aspectj/" target="_blank" class="extlink">アスペクト指向 Wiki</a>

+ AspectJ入門

<a href="http://dolphin.c.u-tokyo.ac.jp/~kazu0/aspectj-primer/primer-aspectjlang/" target="_blank" class="extlink">AspectJ入門</a>

+ 次世代エンジニアへのパスポートシリーズ第一弾
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325720/sorehabooks-22/" target="_blank">JUnitによるテストファースト開発入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325720/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797325720.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">サイバービーンズ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797325720&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />実行例はわかるのですが，説明文が今一つ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ソフトウェアテスト本の新スタンダードかも<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325720/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 全米ベストセラー
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" target="_blank">実践J2EEシステムデザイン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797322888.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ロッド・ジョンソン<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322888&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797326387.09.MZZZZZZZ.jpg" border="0" alt="AspectJによるアスペクト指向プログラミング入門">
-----
KEYWORDS:
AspectJ,アスペクト指向,プログラミング,Aspect-Oriented Programming,入門
-----


-----
CF50_CF_4: 長瀬 嘉秀 (著), 天野 まさひろ (著), 鷲崎 弘宜 (著), 立堀 道昭 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/51FCF7T404L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797326387/sorehabooks-22
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 省メモリプログラミング―メモリ制限のあるシステムのためのソフトウェアパターン集
BASENAME: post_14
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 03/13/2005 12:43:03 PM
TAGS: メモリ効率改善
-----
BODY:
「省メモリプログラミング」、本書はメモリを節約したプログラミングを行うためのパターン集となっています。こういう場面にはこのパターンを適用するとこうなるといったことが載っています。

タイトルには「メモリ制限のあるシステムのための〜」とありますが、実際のところプログラマとして一皮むけたい人は本書のような濃い内容の本を読むのがいいと思います。

本書は、プログラミング歴1〜2年の人ではちょっと難しい内容かもしれません。適用できる場面もすぐにはないかもしれません。しかし、内容的には面白いものが多く、メモリの使い方だけでなくプログラミングの幅が広がることは間違いないです。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、コーディングパターン集となっています。下記の5つの内容が盛り込まれています。

<ol><li>小規模アーキテクチャ</li><li>補助記憶装置</li><li>圧縮</li><li>小規模データ構造</li><li>メモリ割り当て</li></ol>

この5つのカテゴリに関して、問題別のコーディングパターンが載っています。

業務で本書の内容が有効になるのは、組み込み系が主になるとは思います。ただ、それ以外の分野でも本書の内容を理解し、プログラミングの幅がふえることで、新しい解決法がひらめくようになると思います。ある意味、アルゴリズムの勉強だとおもいます。

内容的には結構難しいことや、なれないことが書いてあるので、プログラム経験が多い人のほうが理解は早いと思います。レベルアップしたいプログラマむけの本になっています。

<h2>参考</h2>

+ プログラマなら知っておいて欲しいアルゴリズムの本質
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/" target="_blank">珠玉のプログラミング―本質を見抜いたアルゴリズムとデータ構造</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4894712369.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジョン ベントリー Jon Bentley 小林 健一郎<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894712369&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラマなら読むべき本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />アルゴリズムって何?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />視点が変わる本です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />自信をなくしそう...<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />quot;知的Programingquot;入門に最適です<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 品質と時間はトレードオフと言われていますが、プログラミングの現場でそれを両立するための本
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756102107/sorehabooks-22/" target="_blank">コードコンプリート―完全なプログラミングを目指して</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756102107/sorehabooks-22/" target="_blank"><img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/code_complete.gif"   border="0" /></a></td><td valign="top"><font size="-1">スティーブ マコネル Steve McConnell 石川 勝<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756102107&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />宗教的確信を越えて<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プロフェッショナルの必読書！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おすすめです！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756102107/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 品質の良いプログラミングは、お客様だけでなく同僚も助けることになる
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756103642/sorehabooks-22/" target="_blank">ライティングソリッドコード―バグのないプログラミングを目指して</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756103642/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4756103642.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">スティーブ マグワイア Steve Maguire 関本 健太郎<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756103642&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />決して古くないどころか、現在正に必要な内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />中級C言語プログラマにお奨めの一冊<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756103642/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894714086.09.MZZZZZZZ.jpg" border="0" alt="省メモリプログラミング">
-----
KEYWORDS:
省メモリ,プログラミング,メモリ,制限,パターン,ソフトウェア
-----


-----
CF50_CF_4: ジェイムズ ノーブル (著), チャールズ ウィアー (著), James Noble (原著), Charles Weir (原著), 安藤 慶一 (翻訳)
CF50_URL: http://ec3.images-amazon.com/images/I/51ETBY750TL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894714086/sorehabooks-22
CF50_CF: ピアソンエデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: プログラミング覚書き
BASENAME: post_29
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 03/18/2005 01:24:29 PM
-----
BODY:
設計やプログラミングを行う上で、覚えておいたほうがいいことなどをメモしておこうと思います。意見などありましたら、コメント等でご連絡ください。随時、更新予定です。

適用、引用による効能は自己責任でお願いします。
-----
EXTENDED BODY:
<h2>インデックス</h2>

<ul><li><a href="#if文の構造を考える">if文の構造を考える</a></li>
<li><a href="#実装の継承とインターフェイスの継承">実装の継承とインターフェイスの継承</a></li>
<li><a href="#エラーメッセージには対処法を表示する">エラーメッセージには対処法を表示する</a></li>
<li><a href="#デザインパターンの考え方">デザインパターンの考え方</a></li>
<li><a href="#アプリケーションサービスレイヤーの設計方法">アプリケーションサービスレイヤーの設計方法</a></li>
<li><a href="#サーブレットコンテキスト名はプログラムから取得するべし">サーブレットコンテキスト名はプログラムから取得するべし</a></li>
<li><a href="#JBuilderでカスタムserver.xmlを使う方法">JBuilderでカスタムserver.xmlを使う方法</a></li>
<li><a href="#コメントは道路標識の警告のように使う">コメントは道路標識の警告のように使う</a></li>
<li><a href="#add, set 系のメソッドの戻り値はvoid よりも 受け取ったオブジェクト">add, set 系のメソッドの戻り値はvoid よりも 受け取ったオブジェクト</a></li>
<li><a href="#Webアプリケーション内で使われるビジネスロジックはスレッドセーフにする必要がある">Webアプリケーション内で使われるビジネスロジックはスレッドセーフにする必要がある</a></li>
<li><a href="#[JSF]&lt;h:commandLink&gt;は &lt;h:form&gt;タグの中に書く">[JSF]&lt;h:commandLink&gt;は &lt;h:form&gt;タグの中に書く</a></li>
<li><a href="#[JSF] actionListenerとactionの使い分け">[JSF] actionListenerとactionの使い分け</a></li>
<li><a href="#環境に依存するものは、引数で受け取る">環境に依存するものは、引数で受け取る</a></li></ul>

<h2>ノウハウ一覧</h2>

<h3 id="if文の構造を考える">if文の構造を考える</h3>

if - then - else の構造は、<em>同等の重要さを持つ条件</em>を並べるべき。特殊な条件の場合は<strong>ガード節</strong>を用いて、特殊な条件であることが分かるようにする。つまり<em>条件の重み付け</em>を行うこと。

<pre class="code"><code><span class="keyword">if</span> (特殊な条件) {    <span class="comment">/* ガード節 */</span>
    <span class="comment">// 処理内容 </span>
    <span class="keyword">return</span> 
} 
 
<span class="keyword">if</span> (普通の条件1) { 
    <span class="comment">// 処理1 </span>
} 
<span class="keyword">else</span> <span class="keyword">if</span> (普通の条件2) { 
    <span class="comment">// 処理2 </span>
} 
<span class="keyword">else</span> {  
    <span class="comment">// その他の処理 </span>
}
</code></pre>

<h3 id="実装の継承とインターフェイスの継承">実装の継承とインターフェイスの継承</h3>

継承には、実装の継承とインターフェイスの継承とがある。実装の継承とは、Javaでいう extends を使う方法である。インターフェイスの継承とはJavaでいう implements を使う方法である。

使い分けるルールとしては

<ol><li>クラスが「もの」や「こと」の種類を表している場合は実装の継承</li><li>サービス、機能を継承する場合はインターフェイスの継承</li></ol>

<h4>[参考]</h4>

+ 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22" class="extlink" target="_blank">軽快なJava</a>』 オライリージャパン

<h3 id="エラーメッセージには対処法を表示する">エラーメッセージには対処法を表示する</h3>

エラーメッセージの表示には <strong>対処法</strong> を書くようにする。例えば、「意図しない入力です。」よりも「生年月日には数値を入力してください。」のようにしたり、「現在、要求を受理できませんでした。」よりも可能であれば「3時間以内に復帰する予定です。」のようにしたほうがよい。

<h3 id="デザインパターンの考え方">デザインパターンの考え方</h3>

<em>デザインパターンは、ロール(役割)の相互作用</em>を表している。相互作用におけるロール(役割)は、抽象クラスで定義します。

<blockquote>

ロールの考え方を突き詰めていくと、「役割場(やくわりば)とその重ね合わせによるシステムの合成」という考え方に行き着きます。<p class="source">

<cite>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822206653/sorehabooks-22" target="_blank" class="extlink">ソフトウェアの匠</a>』</cite>

</blockquote>

<h3 id="アプリケーションサービスレイヤーの設計方法">アプリケーションサービスレイヤーの設計方法</h3>

ソフトウェアアーキテクチャを設計する場合、サービスレイヤーのコンポーネントを、「<strong>チャネルサービス</strong>」、「<strong>ユースケースサービス</strong>」、「<strong>汎用サービス</strong>」の3段階に分けると良い。

チャネルサービスは、コンポーネントのクライアントに対して開かれるインターフェースを定義する段階です。HTTPクライアントやSOAPクライアントに対するインターフェース等を定義します。

ユースケースサービスは、ユースケース特有のロジックを定義する段階です。

汎用サービスは、共通のロジック例えばログの出力や帳票出力などを定義する段階です。

チャネルサービス、ユースケースサービス、汎用サービスはそれぞれ下に依存します。

<h4>[参考]</h4>

+ 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122645/sorehabooks-22" target="_blank" class="extlink">WEB+DB Press 26</a>』 

<h3 id="サーブレットコンテキスト名はプログラムから取得するべし">サーブレットコンテキスト名はプログラムから取得するべし</h3>

JSPでリンクでサーブレットに飛ばす場合に、サーブレットコンテキスト名を付けなければならない場合がある。このとき、コンテキスト名をべた書きしてしまうと、コンテキスト名が変更になった場合にすべてのJSPを変更しなければならない。

<em>&lt;%= request.getContextPath() %&gt;</em> と書くことで、コンテキスト名が取得できるので、JSPではできるだけこの方法でコンテキスト名を取得するようにする。

<h3 id="JBuilderでカスタムserver.xmlを使う方法">JBuilderでカスタムserver.xmlを使う方法</h3>

JBuilderでTomcatを使う場合、server.xmlが自動で生成され、サーバーをシャットダウンすると削除されてしまいます。カスタムserver.xmlを作るには、この自動で生成されたserver.xmlの2行目にあるコメント

<pre>&lt;!--This comment marks this file as generated, so it may be deleted and regenerated at any time. To preserve manual changes to this file, delete this comment.--&gt;</pre>

を削除すればよいとのこと。

<h4>[参考]</h4>

+ 『<a href="ftp://ftpc.borland.com/pub/jbuilder/techpubs/jbuilderx/j2eeapps.pdf" target="_blank" class="extlink">Developing Applications for J2EE&#8482; Servers (英語)</a>』 

<h3 id="コメントは道路標識の警告のように使う">コメントは道路標識の警告のように使う</h3>

プログラムに記述するコメントは、道路標識の警告(例：この先急カーブ)のように使う。コメントが多いプログラムは、そこらじゅうに注意書きがある本のように読みにくいもの。

できるだけわかりやすく書き、コメントは道路で突然の急カーブを警告するためだけに用いられる矢印標識のように使う。

<blockquote>

プログラムは、人々がそれを読むために書かれるべきである。たまたま、それが計算機(コンパイラ)で実行できるにすぎない。

<cite>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/sorehabooks-22" target="_blank" class="extlink">ハッカーと画家</a>』</cite>

</blockquote> 

<h3 id="add, set 系のメソッドの戻り値はvoid よりも 受け取ったオブジェクト">add, set 系のメソッドの戻り値はvoid よりも 受け取ったオブジェクト</h3>

add, set 系のメソッドの戻り値は void よりも、受け取ったオブジェクト(this) を返すようにすると、メソッドチェーンが行いやすい。特に<strong>Builder</strong>クラスはこの恩恵が受けやすい。

<pre class="code"><code>Processor proc = <span class="keyword">new</span> ProcessorBuilder()
                     .addOption(<span class="literal">"hoge"</span>)
                     .addOption(<span class="literal">"bar"</span>)
                     .setChild(ChildClass.class)
</code></pre>

<h3 id="Webアプリケーション内で使われるビジネスロジックはスレッドセーフにする必要がある">Webアプリケーション内で使われるビジネスロジックはスレッドセーフにする必要がある</h3>

Webアプリケーションはリクエストをスレッドで処理するようになっています。そのため、マルチスレッドを意識してプログラミングを行わなければなりません。

ビジネスロジック層のクラスにおいても、実装はマルチスレッドを意識しなければなりません。<em>特に、アプリケーションレベルで共有されるオブジェクトや、セッションに格納されるオブジェクトは特に意識しなければなりません</em>。

セッションに格納されるオブジェクトをなぜスレッドセーフにしなければならないのか？それは、同じユーザセッションを持つスレッドが複数存在する可能性があるからです。Submitボタンを二度押された場合、リクエストが二度発行されることになります。このとき、同一セッションIDを持つスレッドが複数存在することになります。

<dl>
<dt class="info">Webアプリケーションはスレッドを意識するする必要がある</dt>
<dd>
<p>Webアプリケーションと言うのは、いろんなところに注意しなければなりません。マルチスレッドもしかり、セキュリティもしかりです。マルチスレッドプログラミングをちゃんと勉強しておく必要がありそうです。</p>

<ul>
<li>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/477411491X/sorehabooks-22" target="_blank" class="extlink">Javaスレッド完全制覇標準プログラマーライブラリ</a>』</li>
<li>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756117848/sorehabooks-22" target="_blank" class="extlink">実践マルチスレッドプログラミングサンソフトプレスシリーズ</a>』</li>
<li>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22" target="_blank" class="extlink">Effective Java プログラミング言語ガイド</a>』</li>
</ul></dd>
</dl>

<h3 id="[JSF]&lt;h:commandLink&gt;は &lt;h:form&gt;タグの中に書く">[JSF]&lt;h:commandLink&gt;は &lt;h:form&gt;タグの中に書く</h3>

JSFでリンクを表現する場合、 &lt;h:outputLink&gt; と &lt;h:commandLink&gt; で表現できます。この二つの違いは前者は単純なリンクを表現するのに対して、後者はコマンドを発行するために JavaScript を使うものです。

<strong>&lt;h:commandLink&gt;を使う場合は &lt;h:form&gt;タグに囲まれるように書く</strong>必要があります。

outputLink と commandLink の使い分けは、JSF以外のページに遷移する場合は outputLink。同じアプリケーション内のJSFに遷移するときは commandLink を使うようです。

<h3 id="[JSF] actionListenerとactionの使い分け">[JSF] actionListenerとactionの使い分け</h3>

アクションリスナーはUIComponent に対して処理を行うのに都合がよい。逆に、アクションは、戻り値でページ遷移を制御できるので、ページ処理が発生するビジネスロジックを記述するのに都合がよい。

<h3 id="環境に依存するものは、引数で受け取る">環境に依存するものは、引数で受け取る</h3>

リソースや、ファイルオブジェクト、入出力ストリームなどの環境に依存するオブジェクトは、メソッドの引数で受け取るようにする。

<pre class="code"><code><span class="keyword">private</span> String[] parseFile(File file) <span class="keyword">throws</span> Exception;
<span class="keyword">private</span> String[] parseXML(InputStream is) <span class="keyword">throws</span> Exception; 
</code></pre>

<h2>参考</h2>

+ 良いプログラミングを行うためのバイブル(超おすすめ)
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756102107/sorehabooks-22/" target="_blank">コードコンプリート―完全なプログラミングを目指して</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756102107/sorehabooks-22/" target="_blank"><img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/code_complete.gif"   border="0" /></a></td><td valign="top"><font size="-1">スティーブ マコネル Steve McConnell 石川 勝<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756102107&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均  </em><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />宗教的確信を越えて<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プロフェッショナルの必読書！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />おすすめです！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756102107/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756103642/sorehabooks-22/" target="_blank">ライティングソリッドコード―バグのないプログラミングを目指して</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756103642/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4756103642.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">スティーブ マグワイア Steve Maguire 関本 健太郎<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756103642&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均  </em><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />決して古くないどころか、現在正に必要な内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />中級C言語プログラマにお奨めの一冊<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756103642/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ リファクタリング関係の情報はここから
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" target="_blank">リファクタリング―プログラムの体質改善テクニック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4894712288.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">マーチン ファウラー Martin Fowler 児玉 公信 平澤 章<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894712288&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均  </em><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向のプログラマ必読の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ファウラー本の中ではかなり読みやすいです。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />いい本です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />プログラムの資産価値を上げる。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />読んだ人だけが得をする<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797329769/sorehabooks-22/" target="_blank">プログラムの育てかた 現場で使えるリファクタリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797329769/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797329769.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">長谷川 裕一 斎川 博史<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797329769&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><em>おすすめ平均  </em><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />初心者向けなのに初心者には見せられない・・・<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797329769/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="プログラミング覚書き">
-----
KEYWORDS:
プログラミング覚書き,プログラミング,覚書き,プログラマー,構文,設計
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Code Reading―オープンソースから学ぶプログラミングテクニック
BASENAME: code_reading
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 03/20/2005 01:53:11 AM
TAGS: これは読むべき,イディオム,定番,良書
-----
BODY:
「他人の書いたソースコードを読むことは、最高のプログラミングの勉強になる」。本書の主題としては「<b>他人の書いたソースコードの読み方</b>」ですが、実際には「<b>オープンソースから学ぶプログラミングテクニック</b>」が学べる本となっています。

「読み・書き・そろばん」は昔の寺子屋で学んだ大切なことですが、この「<b>読み</b>」に焦点を当てているのが本書です。読みとは、文献を読んだり調べたりする能力のことです。今では、オープンソースとして公開されている非常に<strong>良いコード</strong>の部類に入るソースコードがあふれています。

オープンソースを本書と一緒に読み解いていくことで、プログラミング能力が向上することが実感できると思います。ソースコードはC言語で書かれているものが多いので、C言語の知識はあるに越したことはありません。読み進めるのがつらい部分もあると思います。何度も読んで、「ソースコードを小説のように読む」レベルまで達してください (笑)
-----
EXTENDED BODY:
 <h2>特徴</h2>

本書の特徴として、<strong>C言語によるプログラミングテクニック</strong>をオープンソースを例に学べる点があげられます。ソースコードを読む能力を向上させる目的の本だと思って買いましたが、実際にはプログラミングテクニックを学ぶ方が大きかったように思います。

サンプルコードのほとんどはC言語で書かれているため、C言語の知識はあったほうがいいです。プログラミングテクニックに関しても、C言語の例が主ですが、現在の高級言語のほとんどに適用できる考え方です。

プログラミングを始めたばかりの人には本書はちょっと難しいかもしれません。開発者でない人にも読み進めるのはつらいと思います。プログラミングの楽しさが分かってきた人、プログラマとしてレベルアップしたい人には是非とも読んでいただきたい本です。大学の講義でも使える代物だと思っています。

<h2>参考</h2>

+ プログラミングテクニック向上を目指せ！
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614389X/sorehabooks-22/" target="_blank">プログラミングテクニック―UNIXコマンドのソースコードにみる実践プログラミング手法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614389X/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/475614389X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">多治見 寿和<br /><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />ハッカーになる入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />本当のプログラマになるためには<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614389X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>

+ プログラミングテクニックアドバンス！
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145663/sorehabooks-22/" target="_blank">プログラミング・テクニックアドバンス</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145663/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4756145663.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">多治見 寿和<br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145663/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>

+ C言語を学ぶのにおすすめ！
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756118089/sorehabooks-22/" target="_blank">Effective C++</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756118089/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4756118089.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Scott Meyers<br /><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />半分くらいは役に立つ？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />C++プログラミングのノウハウが詰まってます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />動いてる．．．．．．でも．．．．．<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />漠然たる開発に陥ることのないように<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />C++書籍でもっともためになる本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756118089/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>

+ C++でオブジェクト指向を学ぶのにおすすめ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" target="_blank">憂鬱なプログラマのためのオブジェクト指向開発講座―C++による実践的ソフトウェア構築入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4881356194.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Tucker<br /><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />読んでいて面白いです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向の知識はこれからの常識に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向を真に理解することのできる好著<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />分かりやすい説明で、内容もまとまっているとは思いますが。。。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />C++使いには...<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4839912653.09.MZZZZZZZ.jpg" border="0" alt="Code Reading―オープンソースから学ぶプログラミングテクニック">
-----
KEYWORDS:
コード・リーディング,オープンソース,ソースコードを読む,ソフトウェア開発,プログラミング,テクニック
-----


-----
CF50_CF_4: トップスタジオ (著), まつもと ゆきひろ (著), 平林 俊一 (著), 鵜飼 文敏 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51VNQ5GGEVL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4839912653/sorehabooks-22
CF50_CF: 毎日コミュニケーションズ
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: まるごと図解 最新オブジェクト指向がわかる
BASENAME: post_24
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 03/27/2005 10:22:17 AM
TAGS: オブジェクト指向,図解シリーズ
-----
BODY:
「まるごと図解」シリーズは、とても分かりやすく技術を解説してくれます。この「<strong>オブジェクト指向がわかる</strong>」も例に漏れず、とても分かりやすくオブジェクト指向の世界をのぞかせてくれます。

本書は、オブジェクト指向を現実の世界に落として説明しています。図も多く、プログラミングコードも出てくるので、プログラマにも分かりやすいと思います。

オブジェクト指向をかじったことがある人、オブジェクト指向で飯を食っている人からすると、コレではオブジェクト指向を語っているとは言えないかもしれません。しかし、<span class="border_bottom">何も知らない人向けにオブジェクト指向を教える場合</span>、本書のような内容のほうが分かりやすいのも事実だと思います。最初に始めるなら、このレベルからやるのもいいかもしれません。逆に、<span class="border_bottom">最初からちゃんとしたオブジェクト指向を学ぶ</span>のであれば、小難しい言葉が並んだ分厚い本を選ぶのもいいと思います。

『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22" target="_blank" class="extlink">オブジェクト指向でなぜつくるのか</a>』では、本書とはまったく違うアプローチである、「<b>現実の世界との対比、オブジェクト指向と現実とは違う</b>」というところからオブジェクト指向を説明しています。
-----
EXTENDED BODY:
<h2>特徴</h2>

オブジェクト指向の考え方には、いくつかあります。「<strong>現実世界を捉えたもの</strong>」をオブジェクト指向と呼ぶのか、「<strong>メッセージの相互作用</strong>」オブジェクト指向と呼ぶのか、「<strong>コンポーネントの相互関係</strong>」をオブジェクト指向と呼ぶのか。

たぶん、一番分かりやすくて解った気になるのは「<strong>現実世界を捉えたもの</strong>」と解釈することだと思います。本書はこの切り口からオブジェクト指向を解説しています。

広く浅くの知識を与えてくれる本書です、オブジェクト指向で分析・設計を行う場合の方法(UML)や実際にオブジェクト指向プログラミングのソースコードも載せてあります。<strong>カプセル化・継承・ポリモーフィズム</strong>がオブジェクト指向プログラミングの三大要素です。

UMLの表記法や、デザインパターン、アナリシスパターン、アジャイルプロセスであるXPの解説なども盛り込まれています。いい意味で内容は薄いので、通勤途中の電車などで読めるのがうれしいです。

<h2>参考</h2>

+ オブジェクト指向でなぜ作るのか？ 超おすすめ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/" target="_blank">オブジェクト指向でなぜつくるのか―知っておきたいプログラミング、UML、設計の基礎知識―</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4822281957.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">平澤 章<br /><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />基礎がしっかりしているベテランエンジニアにこそ。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向の本質<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />読んで損はない１冊だと思います！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />やっぱり入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />オブジェクト指向の本質を的確に解説<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>

+ オブジェクト指向プログラミングを理解するのに、一番のおすすめはコレ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" target="_blank">憂鬱なプログラマのためのオブジェクト指向開発講座―C++による実践的ソフトウェア構築入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4881356194.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Tucker<br /><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />久々に分かりやすい本にめぐり会えました。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />うまくまとまっていると思う。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />誰に聞いても「名著」という本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />何をすればいいのかが分かる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />C++使いには...<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>

+ オブジェクト指向に挫折してしまった人向けの本
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477412222X/sorehabooks-22/" target="_blank">なぜ、あなたはJavaでオブジェクト指向開発ができないのか―Javaの壁を克服する実践トレーニング</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477412222X/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/477412222X.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">小森 裕介 エスエムジー株式会社<br /><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />目が覚めるかんじ。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />いままでないタイプのオブジェクト指向本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向がわからない時・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向のイメージが湧いた<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />これならオブジェクト指向を乗りこなせそうだ！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/477412222X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>

+ 広くちょっと深く学べる、リファレンスとしても使える。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798009423/sorehabooks-22/" target="_blank">最新オブジェクト指向開発マスタリングハンドブック―図解標準</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798009423/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4798009423.09.MZZZZZZZ.jpg"   border="0" /></a></td><td valign="top"><font size="-1">東海林 誠<br /><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />広く、正確に書いてあります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798009423/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/" >G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/understand_object_oriented.jpg" border="0" alt="まるごと図解 最新オブジェクト指向がわかる">
-----
KEYWORDS:
オブジェクト指向,Object Oriented,まるごと図解,最新,オブジェクト指向がわかる
-----


-----
CF50_CF_4: 河合 昭男 (著)
CF50_URL: http://www.sam.hi-ho.ne.jp/hamasyou/gallery/img/books_value/understand_object_oriented.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774113255/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: 会社に入ったらすぐ読む本―最初の一歩でつまずかない即効のゴールデン・ルール
BASENAME: post_18
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 04/03/2005 03:46:40 PM
TAGS: わかりやすい,ビジネスルール,良書
-----
BODY:
本書は、新社会人が会社に入ってどういった考えを持つと良いかをまとめたものになっています。ビジネスマナーから仕事のやり方まで、ケーススタディを使ってポイントを解説してあります。

ただ、<b>こういった場合はこうすればよいといったノウハウ本ではありません</b>。社会人になってからの常識とマナーを学ぶために、例となるケーススタディを分析し、<strong>こういう考え方をしたほうがより良い</strong>と思われる考え方や行動を示しています。

特にケーススタディが最初に例示されているので、その状況というものがとてもよく分かります。そして、その状況ではこういう判断基準を持つ方がよりベターであるという感じで進めて行きますので、とても理解がしやすいです。
-----
EXTENDED BODY:
<h2>特徴</h2>

特徴は、なんと言ってもケーススタディが載っていることです。これによって、状況判断のポイントがつかみやすくなります。また、新社会人にとってなじみのある状況が満載ですので、違和感なく理解できます。

本書のポイントは３つです。

<ol><li><strong>勉強好き</strong></li><li><strong>素直</strong></li><li><strong>プラス思考</strong></li></ol>

これは、新社会人のみならず、すべての会社員にいえることだと思います。これに後一つ私が付け加えるとしたら「<strong>謙虚</strong>」です。

常に上を目指し、先輩の話を素直を受け止め、自分で考え、何事も良い方向に考える。そして自分に自信を持ち、自分を過信せず、自分を偽らない。

新しい状況というものは、その後の人生に深く影響を与えるものが多いと思います。ノウハウではなく、自分の言葉に落とした基本というのを、本書のような本から学び取れたらいいなと思います。

<h2>参考</h2>

+ 成功法則を見つけることが、成功への近道！？
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478703035/sorehabooks-22/" target="_blank">船井幸雄の「成功塾」―仕事と人生がうまくいく、わずか6つの成功原則</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478703035/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4478703035.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">船井 幸雄<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4478703035&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ビジネスマンの基本スタイルを盗み取ろう<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />朝４時半から俺も頑張ってます！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478703035/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ デキる人と呼ばれる秘訣
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4763194984/sorehabooks-22/" target="_blank">船井幸雄の「人財塾」―"デキる人"を続々生みだす絶対法則</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4763194984/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4763194984.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">船井 幸雄<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4763194984&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />とにかく面白い一冊！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />できるということは、どういうことか。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />「人材」では無く「人財」<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4763194984/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 7つの習慣。これを習慣付けられたら最強
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638015/sorehabooks-22/" target="_blank">7つの習慣―成功には原則があった!</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638015/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4906638015.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">スティーブン・R. コヴィー ジェームス スキナー Stephen R. Covey 川西 茂<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4906638015&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />具体的で読みやすい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />現代のバイブル！？何度も読めばきっと人生の役にたつ。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />人格を磨く為には素晴らしい本です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />インサイド・アウト<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />で、どうするのか？<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638015/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4804715967.09.MZZZZZZZ.jpg" border="0" alt="会社に入ったらすぐ読む本―最初の一歩でつまずかない即効のゴールデン・ルール">
-----
KEYWORDS:
会社に入ったら,すぐ,読む,ビジネスマナー,仕事術,新社会人,新人研修,ゴールデン・ルール
-----


-----
CF50_CF_4: 船井総合研究所 (著), 船井 幸雄 (監修)
CF50_URL: http://ecx.images-amazon.com/images/I/51JDAERDGXL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4804715967/sorehabooks-22
CF50_CF: 大和出版
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: まるごと図解 最新SQLがわかる
BASENAME: _sql
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 04/10/2005 11:31:50 AM
TAGS: SQL,図解シリーズ
-----
BODY:
本書は初心者向けのSQL解説本です。SQLとは何か？データベースとは何か？と言うことをまったく知らない人が導入段階で読むレベルの内容です。

SQLはデータベース管理システム(DBMS)を扱うための言語で標準が定められています。もちろん、詳細部分では各DBMSに固有の関数などが加えられていたりしますが、本書ではDBMS固有の部分については省かれています。

SQL文でできることには非常にたくさんの数があります。文法を覚えるだけでも大変なのに、実行結果をイメージしてSQL文を見つけるのは、最初の段階では至難の業だと思います。本書は、基本的に見開きで一つの項目を解説しています。

左側のページではその項目の解説を、右側のページでは実行結果やデータ操作のイメージが図として載っています。SQL文のことだけでなくデータベースに関しての解説もあるので、本書を取っ掛かりにしてさらに詳しい書籍にチャレンジするのがいいと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

データベースに関する基本的な項目(データベースとは何か？データベースのモデルには何があるか？正規化とは？インデックスとは？ビューとは？など)が網羅されています。そして、SQLの基本的な文法と実行結果が解説される流れになっています。最後には、AccessというMicrosoftのDBMS製品を使った実際のサンプルも載っています。

非常に基本的な事項しか載っていないので、業務経験の在るエンジニアの方には物足りないと思います。本書がおすすめなのは、これからプロジェクトに配属になるような新入社員のプログラマやSEの人です。

図解シリーズは安くてわかりやすいので、非常に初心者向けです。ただし、知識を整理したい人なら、業務経験のあるエンジニアの方でも読んで損はないと思います。分かりやすいデータベースに関する書籍を探しているなら、本書はおすすめできます。

<h2>参考</h2>

+ RDBMSの仕組みをやさしく詳しく理解できます。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798108642/sorehabooks-22/" target="_blank">RDBMS解剖学 よくわかるリレーショナルデータベースの仕組み</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798108642/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798108642.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">鈴木 幸市 藤塚 勤也<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798108642&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798108642/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ SQL文を覚えるには手を動かすしかありません。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122998/sorehabooks-22/" target="_blank">SQL書き方ドリル―すらすらと手が動くようになる</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122998/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4774122998.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">羽生 章洋<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774122998&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />新人時代に巡り会いたかった本です<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122998/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ わかりやすくて理解しやすい、データベースを知るにはおすすめの一本
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534029497/sorehabooks-22/" target="_blank">図解でわかるデータベースのすべて―ファイル編成からSQLまで</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534029497/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4534029497.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">小泉 修<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4534029497&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />何度でも戻って来れる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />データベースの全般的な知識を効率的に学べそう<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />バランスが良い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />データベースの全体像把握に最良の一冊。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />わかりやすいデータベース<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534029497/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ データベースの設計を行うことになったら、本書は必読でしょう。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810566X/sorehabooks-22/" target="_blank">グラス片手にデータベース設計~販売管理システム編</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810566X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/479810566X.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">梅田 弘之<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=479810566X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />良書です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />なかなか力作！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />勉強になります。知恵がつきます。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />ひとつの解答は得られます。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />前むきなテクニカルエンジニアにお勧めします<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810566X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 偉大なる幸三先生による、データモデリングのバイブル
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank">業務別データベース設計のためのデータモデリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4534032501.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">渡辺 幸三<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4534032501&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />データモデリングの基礎から勉強できる。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />考え方だけでも理解してはいかが<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />データモデルの重要性は解ったけれど具体的にどうすればよいか解らない段階に必読の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   />初心者にはきついです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />情報システムの専門家以外の人にも、使い道豊富。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774112755.09.MZZZZZZZ.jpg" border="0" alt="まるごと図解 最新SQLがわかる">
-----
KEYWORDS:
SQL,リレーショナルデータベース,まるごと図解,最新,データベース
-----


-----
CF50_CF_4: 小野 哲 (著), 佐野 剛 (著), 天貝 伸次 (著), 鈴木 大岳 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51C87VT9KKL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774112755/sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: 攻略Jakarta Commons
BASENAME: jakarta_commons
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 04/16/2005 11:05:50 AM
TAGS: Commons,Java
-----
BODY:
<a href="http://jakarta.jp/commons/" target="_blank" class="extlink">Jakarta Commons</a> は再利用可能なJavaコンポーネントをまとめたプロジェクトです。簡単に言うと「<strong>Java の便利ライブラリ(Util)</strong>」です。

本書は、Commons パッケージに含まれるいくつかのコンポーネントを紹介したものになっています。特徴的なのは、各コンポーネントについて継承関係などを表すクラス図が載っていることです。自分のソースコードからどのクラスを呼び出せば良いのかが分かりやすくなっています。

Commonsパッケージには多数のコンポーネントがあるため、すべてのコンポーネントについて詳しい解説が載っているわけではありません。著者が利用価値が高いと判断されたものに関しては結構深く解説してあったり、使い方も色々載っていたりします。

リファレンスと言うよりは、Commonsをざっと眺めてどんなコンポーネントがあるかをインプットしておくといった読み方が正しいのかもしれません。Javaで開発を行っている人は、一度見ておくと不要なライブラリ作成の手間が省けること間違い無しです。
-----
EXTENDED BODY:
<h2>覚書き</h2>

<h3>org.apache.commons.lang.builder</h3>

<dl>
<dt><strong>CompareToBuilder</strong></dt><dd>compareToメソッドを容易に実装できる</dd>
<dt><strong>EqualsBuilder</strong></dt><dd>equalsメソッドを容易に実装できる</dd>
<dt><strong>HashCodeBuilder</strong></dt><dd>hashCodeメソッドを容易に実装できる</dd>
<dt><strong>ToStringBuilder</strong></dt><dd>toStringメソッドを容易に実装できる</dd>
</dl>

<pre class="code">
<span class="keyword">import</span> org.apache.commons.lang.builder.*;
 
<span class="keyword">public class</span> BuilderTest {
 
    <span class="keyword">private</span> Integer propA;
    <span class="keyword">private</span> String propB;
 
    <span class="keyword">public void</span> test(BuilderTest other) {
        <span class="keyword">boolean</span> euqal = <span class="keyword">new</span> EqualsBuilder()
                            .append(propA, other.propA)
                            .append(propB, other.propB)
                            .isEquals();
    }
}
</pre>

<h3>org.apache.commons.logging(Log4j)</h3>

<a href="http://www.ingrid.org/jajakarta/log4j/" target="_blank" class="extlink">Log4j</a>の主な Appender一覧

<dl>
<dt><strong>ConsoleAppender</strong></dt><dd>コンソールに出力する</dd>
<dt><strong>DailyRollingFileAppender</strong></dt><dd>日、月、週などの一定期間でファイル名を変更しながら出力する</dd>
<dt><strong>FileAppender</strong></dt><dd>ファイルに出力する</d>
<dt><strong>NullAppender</strong></dt><dd>何も出力しない</dd>
<dt><strong>RollingAppender</strong></dt><dd>設定したサイズにファイル容量が達したときにファイルを変更できる</dd>
</dl>

<h4>log4j.propertiesの例</h4>

<pre class="code">
<span class="comment"># com.hamasyou.log 以下のクラスに対しては「DEBUG」で「ALog」ロガーを使う</span>
log4j.rootLogger = WARN, ASystem 
log4j.logger.com.hamasyou.log = DEBUG, ALog 
 
<span class="comment"># 各ロガーに設定項目を与えるJavaDoc</span>
<span class="comment"># 与える項目は、JavaDocの各Appender の setterメソッドのあるもの</span>
log4j.appender.ASystem=org.apache.log4j.FileAppender 
log4j.appender.ASystem.File=C:/logs/system.log 
 
log4j.appender.ALog=org.apache.log4j.RollingFileAppender 
log4j.appender.ALog.MaxFileSize=1MB 
log4j.appender.ALog.MaxBackupIndex=0 
log4j.appender.ALog.File=C:/logs/_debug.log 
log4j.appender.ALog.Append=false 
 
<span class="comment"># ログの出力パターン</span>
log4j.appender.ASystem.layout=org.apache.log4j.PatternLayout 
log4j.appender.ASystem.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n 
 
log4j.appender.ALog.layout=org.apache.log4j.PatternLayout 
log4j.appender.ALog.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n 
</pre>

<h2>参考</h2>

+ Javaの真髄ここに極まる
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112079/sorehabooks-22/" target="_blank">Java魂―プログラミングを極める匠の技</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112079/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4873112079.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Robert Simmons Jr. 福龍興業 佐藤 直生 木下 哲也<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873112079&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />実力テストとしても使えるかも。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112079/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ ほんとにいい本です。これを読まずしてJavaを語るべからず。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank">Effective Java プログラミング言語ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894714361.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">Joshua Bloch ジョシュア・ブロック<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />翻訳が・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />基本ライブラリの設計に興味を抱かせてくれる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />一ランク上のプログラミングをするために！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />Effective C++とともに最良の書籍<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />脱初心者に必須<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ アーキテクチャの勉強になります。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/" target="_blank">軽快なJava―Better,Faster,Lighter Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/487311201X.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ブルース・A. テイト ジャスティン ゲットランド Bruce A. Tate Justin Gehtland<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311201X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />タイトルは面白そうだが<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />アーキテクチャと設計の勉強になります<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Javaの現状に対する再考のすすめ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />Javaプログラマ必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />率直な筆者の経験は必読<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797325208.09.MZZZZZZZ.jpg" border="0" alt="攻略Jakarta Commons">
-----
KEYWORDS:
Jakarta,Commons,サンプル,コンポーネント,Lang,CLI,Logging,Primitives,Codec,Pool,Collections,BeanUtils,Digester,Betwixt,Net,FileUpload,HttpClient,DBCP,DbUtils,Jelly,JXPath,JEXL
-----


-----
CF50_CF_4: たなか ひろゆき (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51FQS99GT5L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797325208/sorehabooks-22
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: Hibernate のトランザクション制御
BASENAME: hibernate_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 04/23/2005 08:24:40 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22" target="_blank"><img src="http://images-jp.amazon.com/images/P/193239415X.01.MZZZZZZZ.jpg"  border="0" /></a>
</p>

Hibernate は O/R マッピングツールと呼ばれる、リレーショナルデータベースとオブジェクトモデルとの間を埋めるフレームワークです。

O/Rマッピングを行うとトランザクション制御をあまり考えなくてもいいような気になってしまう感があります。でも、トランザクション制御って非常に大切な要素です。しかも、O/Rマッピングを行っていようと、トランザクションのことを何も考えていなければ、データの不整合が起きる可能性もあればデッドロックが起きる可能性もあります。

JDBCを直接扱う場合は、まだトランザクションを気にしながらコーディングする方なのでいいのですが、O/Rマッピングを使う場合に忘れがちなトランザクションのことを、ちょっとでも頭にとどめておくためにメモ程度に記録しておきます。(間違いを見つけたらコメントください)
+ <a href="http://www.hibernate.org/hib_docs/v3/reference/en/html/" tager="_blank" class="extlink">Hibernate Reference 3.0</a>

<section>

<h4>[参考]</h4>

『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281027/sorehabooks-22" target="_blank" class="extlink">トランザクション処理〈上〉-概念と技法</a>』

『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281035/sorehabooks-22" target="_blank" class="extlink">トランザクション処理〈下〉-概念と技法</a>』

</section>
-----
EXTENDED BODY:
<h2>Hibernateのトランザクション制御方法</h2>

<h3>SessionFactory と Session</h3>

SessionFactory クラスと Session クラスが、Hibernate の肝となる部分です。<strong>SessionFactoryはスレッドセーフ</strong>で、アプリケーションで一つのインスタンスのみを生成すればいいです。ただし、データベースとSessionFactoryが1対1で対応するので、アプリケーションで複数のデータベースにアクセスする場合(グローバルトランザクション)はその分だけ SessionFactory を生成します。

<strong>SessionFactory は データベースの数だけ生成する</strong>

次に、Sessionです。Sessionは、スレッドセーフではありません。マルチスレッド環境下でSessionオブジェクトを使用する場合は気をつける必要があります。Webアプリケーションは基本的にマルチスレッド環境です。したがって、<strong>Sessionは使い捨て</strong>で使用するべきです。

Hibernateはトランザクション管理はベースとなるデータコネクションに任せています。データコネクションがJTAに管理されていれば、Sessionが実行する処理はトランザクションの一部となります。

<h3>Sessionのフラッシュ</h3>

基本的にSessionはコネクションと思えばいいようです。Sessionの処理手順としては基本的に下のような感じになります。

<pre>
1. セッションのオープン
例）　sessionFactory.openSession()
↓
2. トランザクション開始
例）　transaction = session.beginTransaction
↓
3. トランザクション
例）　session.save()
session.update()
session.delete()
session.saveOrUpdate()
↓
4. データベースと同期
例）　session.flush()
↓
5. トランザクションコミット or ロールバック
例）　transaction.commit()
transaction.rollback()
↓
6. セッションのクローズ
例）　session.close()
</pre>

Sessionの <strong>flush</strong> は大事な概念のようです。Hibernateは永続化データをキャッシュします。実際には、データベースにはリアルタイムに処理が施されているわけで、いざ save するときにはデータベースのデータと同期が取れていない可能性があります。

これを防止するのが flush の役割です。Hibernateはいろいろな処理を行う際に flush を自動で呼び出してくれます。例えば transaction.commit() の直前などです。しかし、<strong>明示的に session.flush() を呼び出すことはよい手法</strong>となっています。

<h3>HibernateExceptionは致命的な例外</h3>

HibernateでスローされるHibernateExceptionはすべて致命的な例外ととらえます。これは、現在のSessionが整合性の取れないものになっている可能性があることを示しています。つまり、<strong>HibernateExceptionがスローされたら、トランザクションをロールバックして、session.close() を即座に呼び出す必要がある</strong>ということです。

<pre class="code"><code>Session session = factory.openSession(); 
Transaction tx = <span class="keyword">null</span>; 
 
<span class="keyword">try</span> { 
   tx = session.beginTransaction(); 
   <span class="comment">// 何らかの処理 </span>
    tx.commit(); 
} 
<span class="keyword">catch</span> (Exception e) { 
    <span class="keyword">if</span> (tx != <span class="keyword">null</span>) { 
        tx.rollback(); 
    } 
    <span class="keyword">throw</span> e; 
} 
<span class="keyword">finally</span> { 
    session.close(); 
} 
</code></pre>

<h3>楽観的同時平行性制御 (Optimisticトランザクション)</h3>

通常、データベーストランザクションがユーザとの対話に関与することは許されません。ユーザとの対話に関与(つまり、Webアプリケーションで画面をまたいでトランザクションをかけ続けること)はロングトランザクションとなり、他のデータベーストランザクションがリソースにアクセスすることができなくなります。

<em>ユーザとの対話をはさんだビジネスプロセスにおいて、データベーストランザクションを維持するのはアプリケーション層の役割になります</em>。よく使われる方法は、バージョン番号を使って、更新を管理する方法です。Hibernateは3つの方法で、Optimisticなトランザクション制御を行えます。

<ul><li><b>自動バージョン付けのロングトランザクション</b></li>
<li><b>自動バージョン付けのManyトランザクション</b></li>
<li><b>アプリケーションによるバージョンチェック</b></li></ul>

どのチェックの仕方にも共通するのが、バージョン番号を使って処理するということです。Hibernateが永続化処理する場合、バージョン番号も自動的に変更されます。

<h3>ロック制御</h3>

Hibernateは、排他ロックをサポートしています。通常、SELECT文というのは、共有ロックがかけれられます。共有ロックは、別のトランザクションから読み取りが許可されるロックです。

一連のトランザクションで見たときに、SELECTした値を変更する場合、排他ロックをかける必要があります。Hibernateではロック機構を<strong>LockMode</strong>クラスで表現しています。

<dl><dt>LockMode.WRITE</dt><dd>行の挿入・更新時に自動的に取得されるロック</dd>
<dt>LockMode.UPGRADE</dt><dd>排他ロックを取得します。SELECT ... FOR UPDATE 文が実行されます。</dd>
<dt>LockMode.UPGRADE_NOWAIT</dt><dd>SELECT ... FOR UPDATE NO WAIT を実行します。(Oracleのみ)</dd>
<dt>LockMode.READ</dt><dd>分離レベルが Repeatable Read か Serializable の場合の読み込みのときに取得されます。</dd>
<dt>LockMode.NONE</dt><dd>ロックされていないことを表します。</dd></dl>

O/Rマッピングを行う場合でも、トランザクションのことは忘れてはいけないのです。すべてをHibernateに任せることは間違っていて、トランザクションの分離レベルとロックトランザクション・Optimisticトランザクションの区別は、アプリケーション側で適切に考える必要があります。

<h2>参考</h2>

+ JSF / Spring / Hibernate を使ったアプリケーション開発
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/" target="_blank">Light weight Java―JSF/Hibernate/SpringによるフレームワークでWebアプリケーションの開発効率向上</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4839917779.01._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">岡本 隆史 吉田 英嗣 金子 崇之 権藤 夏男<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4839917779&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />システム開発のコツをまとめてあります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ 開発者ノート「Hibernate」
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank">Hibernate</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/487311215X.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">James Elliott<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311215X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />コンパクトにまとまっている良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ トランザクション処理のバイブル
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281027/sorehabooks-22/" target="_blank">トランザクション処理〈上〉―概念と技法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281027/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822281027.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジム グレイ アンドレアス ロイター Jim Gray Andreas Reuter<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822281027&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281027/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ トランザクション処理のバイブル
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281035/sorehabooks-22/" target="_blank">トランザクション処理〈下〉―概念と技法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281035/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822281035.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ジム グレイ アンドレアス ロイター Jim Gray Andreas Reuter<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822281035&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281035/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ トランザクション処理について、最初に学び始めるのにちょうど良いくらい
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822280268/sorehabooks-22/" target="_blank">トランザクション処理システム入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822280268/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822280268.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">フィリップ バーンスタイン エリック ニューカマー Philip Bernstein Eric Newcomer<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822280268&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />内容は良いが体裁がいまひとつ<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822280268/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/193239415X.01.MZZZZZZZ.jpg" border="0" alt="Hibernate で O/Rマッピング">
-----
KEYWORDS:
Hibernate,O/Rマッピング,フレームワーク,データベース,トランザクション,Transaction
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: UMLモデリングの本質
BASENAME: uml_4
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 05/03/2005 10:22:01 AM
TAGS: UML,これは読むべき,わかりやすい,モデリング,定番,良書
-----
BODY:
「モデリング」や「モデラー」と言う言葉に関心がある人は、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/249-5616384-4000348?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">アナリシスパターン―再利用可能なオブジェクトモデル</a>』を聞いたことがあると思います。アナリシスパターンは、モデルのパターンを集めたものになっていて、バックボーンがないと読み進めるのが難しいものです。

本書は、<strong>モデリング</strong>のポイントや考え方を解説する本になっています。一般には「<strong>良いモデル</strong>」と言うのは存在しない、人によってそれぞれだと言われますが、本書にとっての「良いモデル」とは「<b>モデルの存在価値があること</b>」だと私は解釈しています。「良いモデル」を書く考え方や方法を本書では解説しています。

モデリングに興味のある人は本書を読むことをおすすめします。UMLの解説書を読むだけでは本当の「<strong>モデリング</strong>」はできません。モデルには意図があり、意味があるはずです。その意図や意味を正確に相手に伝えるための方法が本書には盛り込まれています。
-----
EXTENDED BODY:
<h2>特徴</h2>

モデリングをはじめたばかりの人は、本書は難しいのかもしれません。UMLの記述法が頭に入っている人、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/249-5616384-4000348?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">アナリシスパターン</a>』に挑戦したけど、難しくて途中で挫折したひと向けだと思います。

本書は「<strong>概念モデリング</strong>」を主に解説しています。こういう場合はこんなモデルとモデルのつながりにするとよいといったことが、とても分かりやすく解説されています。本書を理解できれば、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/249-5616384-4000348?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">アナリシスパターン</a>』を読破できる力が備わったと考えられるかと思います。とても良い本ですので、本書を読みながら是非手を動かしてモデルを書いてみるといいと思います。

<h2>覚書き</h2>

<h3>概念をモデリングする</h3>

<h4>概念</h4>

モデリングとは、問題領域を本質的に理解する活動です。対象をどのように解釈するかによって概念の捉え方は複数存在します。

例えば、「私」というものがあります。「私」は実家に居るときには「息子」になるし、大学に行っているときは「大学生」、喫茶店に入れば「お客さん」になります。つまり、より抽象的なものの捉え方をして、良い概念構造を記述することが良いモデルにつながると言うことです。

<img src="http://hamasyou.com/images/umlmodeling/concept.gif" alt="概念" />

<h4>概念は集合</h4>

概念は集合です。お客さん(という概念は)「喫茶店でコーヒーを注文した人(の集合)」と定めることでお客さんとお客さんでない人が区別される(境界が引かれる)ことになります。つまり、概念は境界を持っていて、解釈するということで境界を定めることになります。

<h4>関係が概念を意味づける</h4>

<b>概念は関係をもつことで初めて意味が定まります。</b>つまり、お客さんとコーヒーの間に「注文する」という関係があることで、初めて意味をなします。

<img src="http://hamasyou.com/images/umlmodeling/order.gif" alt="注文する" />

<h3>ポイントとなる言葉</h3>

<ul><li>モデルの所有者はモデルの中に登場しない</li>
<li>集合の中には同じ要素が重複して存在することはない</li>
<li>関連の属性をクラスで表現したモデルは、インスタンスが重複してはいけない(関連クラスとして表現すれば重複は許される)</li>
<li><b>関連クラスは事象(履歴)を記録する</b></li>
<li>再帰関連には{階層}という制約を付ける</li>
<li><b>カテゴライズのために知識型(パワータイプ)を使用する</b></li>
<li>カテゴライズとは<b>種類</b>を扱うこと。実際のものは<b>物</b>である</li>
<li>予約、予定を扱う場合はカテゴリーの概念を使うのが常套手段</li>
<li>関連クラスを用いることによって事象(履歴、時間の流れ)を記録する</li></ul>

<h2>参考</h2>

+ モデラーをやる上で、アナリシスパターンははずせない気がします。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" target="_blank">アナリシスパターン―再利用可能なオブジェクトモデル</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894716933.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">マーチン ファウラー Martin Fowler 堀内 一 友野 晶夫<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894716933&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ ビジネスをモデリングパターン化した本
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714841/sorehabooks-22/" target="_blank">企業情報システムの一般モデル―UMLによるビジネス分析と情報システムの設計</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714841/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894714841.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">クリス マーシャル Chris Marshall 児玉 公信<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714841&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   />パターンで表現できてしまうビジネスって・・・<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714841/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ ソフトウェアのコンポーネント化について書かれています。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712636/sorehabooks-22/" target="_blank">オブジェクト指向とコンポーネントによるソフトウェア工学―UMLを使って</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712636/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894712636.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">ペルディタ スティーブンス ロブ プーリー Perdita Stevens Rob Pooley<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894712636&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><b>おすすめ平均  </b><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   />思ったより、実践的な本でした<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   />オブジェクト指向の教祖本に！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712636/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>

+ UMLを学ぶ上で、絶対的におすすめ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank">実践UML―パターンによる統一プロセスガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894713861.09._SCMZZZZZZZ_.jpg"   border="0" /></a></td><td valign="top"><font size="-1">クレーグ ラーマン Craig Larman 依田 光江 依田 智夫<br /><br />ピアソンエデュケーション  2003-10<br />売り上げランキング : 22,570<br />おすすめ平均<img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   /><br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713861&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font>    <font size="-2">by <a href="http://www.goodpic.com/mt/aws/">G-Tools</a></font><br /></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822221180.09.MZZZZZZZ.jpg" border="0" alt="UMLモデリングの本質">
-----
KEYWORDS:
UML, モデリング, 本質, 良いモデル, 知識, 実践, 児玉公信
-----


-----
CF50_CF_4: 児玉 公信 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51PBEJ5WG8L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/249-5616384-4000348?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: オブジェクト指向とコンポーネントによるソフトウェア工学―UMLを使って
BASENAME: uml_6
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 05/09/2005 11:25:48 PM
TAGS: UML,オブジェクト指向,良書
-----
BODY:
本書は、多少アカデミックな本ですが、上流工程の設計に焦点を当てたいい本だと思います。オブジェクト指向のなんたるかを、ソフトウェア工学の観点から納得できるようにとても平易な文章で書いています。さらっと書かれている中に、とても重要なポイントがあったりするので、マーカーでページがいっぱいになりました。

この手の書籍にしては薄く、内容がずっしり詰まった感じです。ポイントポイントを抑えているので、短時間で読めますが、確実に設計力はつくと思います。また、オブジェクト指向についての知識の整理や、気をつける点も理解できると思います。

本書は、ソフトウェア工学の観点から書かれているので、学生や研究者向きです。しかし、実践で役立つポイントも満載なので、実務で上流工程の設計をオブジェクト指向で行っている方にもおすすめできます。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、良いシステムとは何かから始まり、オブジェクト指向が良いシステムにどうかかわっていくのか、開発プロセスがもたらすもの、UMLによるクラスも出るの設計方法について書かれています。

個人的な好みですが、監訳者が児玉 公信さんと言うところからして、クラスモデルの章の期待度がとても高まります。実装コード(ソースコード)は出てきませんが、実装のポイントなど、設計段階で考える点がちりばめられており、最初から最後まで飽きずに読み進められました。

オブジェクト指向とソフトウェア工学、上流工程におけるオブジェクトモデリングに興味がある人は、本書を読んでみると面白いと思います。お勧めです。

<h2>参考</h2>

+ ソフトウェア工学をもっと詳しく勉強したい方へ(アカデミック)
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103543/sorehabooks-22/" target="_blank">ソフトウェアエンジニアリング</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103543/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798103543.09._SCMZZZZZZZ_.jpg"   style="border:none;" alt="4798103543" /></a></td><td valign="top" style="font-size: 0.9em; line-height:1.4em;" class="g-tools_body" />Eric. J. Braude 羽生田 栄一<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798103543&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103543/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a><span style="font-size: 0.7em;"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></span></td></tr></table></div>

+ 実践向けのソフトウェア工学
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4817161485/sorehabooks-22/" target="_blank">実践ソフトウェアエンジニアリング-ソフトウェアプロフェッショナルのための基本知識-</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4817161485/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4817161485.09._SCMZZZZZZZ_.jpg"   style="border:none;" alt="4817161485" /></a></td><td valign="top" style="font-size: 0.9em; line-height:1.4em;" class="g-tools_body" />ロジャーS.プレスマン 西 康晴 榊原 彰 内藤 裕史<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4817161485&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   style="border:none;" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   style="border:none;" alt="star" />読んでよかったです<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4817161485/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a><span style="font-size: 0.7em;"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></span></td></tr></table></div>

+ あの達人プログラマーの別の切り口
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614599X/sorehabooks-22/" target="_blank">達人プログラマー―ソフトウェア開発に不可欠な基礎知識</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614599X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/475614599X.01._SCMZZZZZZZ_.jpg"   style="border:none;" alt="475614599X" /></a></td><td valign="top" style="font-size: 0.9em; line-height:1.4em;" class="g-tools_body" />デビッド・トーマス アンドリュー・ハント マイク・クラーク 長瀬 嘉秀<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=475614599X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   style="border:none;" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   style="border:none;" alt="star" />プログラマーより管理者向け<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/475614599X/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a><span style="font-size: 0.7em;"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></span></td></tr></table></div>

+ より実装寄りのプログラマ向けの書籍(おすすめ)
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489100455X/sorehabooks-22/" target="_blank">コードコンプリート―完全なプログラミングを目指して (上)</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489100455X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/489100455X.01._SCMZZZZZZZ_.jpg"   style="border:none;" alt="489100455X" /></a></td><td valign="top" style="font-size: 0.9em; line-height:1.4em;" class="g-tools_body" />Steve McConnell<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=489100455X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   style="border:none;" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   style="border:none;" alt="star" />コンストラクションにおける百科全書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489100455X/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a><span style="font-size: 0.7em;"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></span></td></tr></table></div>

+ より実装寄りのプログラマ向けの書籍(おすすめ)
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004568/sorehabooks-22/" target="_blank">コードコンプリート―完全なプログラミングを目指して (下)</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004568/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4891004568.01._SCMZZZZZZZ_.jpg"   style="border:none;" alt="4891004568" /></a></td><td valign="top" style="font-size: 0.9em; line-height:1.4em;" class="g-tools_body" />Steve McConnell<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4891004568&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004568/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a><span style="font-size: 0.7em;"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></span></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894712636.09.MZZZZZZZ.jpg" border="0" alt="オブジェクト指向とコンポーネントによるソフトウェア工学―UMLを使って">
-----
KEYWORDS:
オブジェクト指向,コンポーネント,ソフトウェア工学,UML,ソフトウェアエンジニアリング
-----


-----
CF50_CF_4: ペルディタ スティーブンス (著), ロブ プーリー (著), Perdita Stevens (原著), Rob Pooley (原著), 児玉 公信 (翻訳)
CF50_URL: http://ec3.images-amazon.com/images/I/51TJA4VW1GL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894712636/sorehabooks-22/249-2361891-9485140?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: ピアソンエデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: RDBMS解剖学 よくわかるリレーショナルデータベースの仕組み
BASENAME: rdbms
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 05/11/2005 10:34:36 PM
TAGS: RDBMSの仕組み
-----
BODY:
本書を読めばリレーショナルデータベース(RDBMS)がどのように動くのか、とてもよく理解できます。RDBMSがSQL文を解析して処理するまでの道のりや、トランザクション制御、ログ、リカバリと言った、RDBMSの裏側の動きがすっきりと整理できます。

「RDBMSの仕組みなんかデータベース管理者だけが知っていれば良い！」そんなことを言われるかもしれません。確かに、データベースの仕組みなんか知らなくても、プログラムは書けるし、設計もできます。しかし、<strong class="red">データベースの仕組みを知っているのと知らないのではプログラムの質も設計の質も変わってくる</strong>のです。

なぜなら、RDBMSの仕組みを理解したプログラマは、最適なSQL文を書くことが出来るようになります。また、RDBMSの仕組みを理解したSEは、どのようにデータベースを作成し、物理テーブルを配置すればアクセス効率が良くなるかを知っているからです。

RDBMSの仕組みを理解して、最適な構成でデータベースを構築した場合、<b>数十倍のパフォーマンスの差</b>が出てくるといいます。これだけの差が出るとなると、RDBMSの仕組みに関する知識は不要とは言えません。

本書は、DB Magazineで連載されていた記事をまとめたものです。なので、図や表が随所に盛り込まれ、文章だけでは理解しにくい言葉も理解しやすくなっています。データベースを利用するすべての人に、本書を<b>おすすめ</b>します。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書で解説しているRDBMSの仕組みは、特定の製品に依存していません。どのRDBMS製品にも共通する機能や要件について説明しています。図や表を多用しているため、視覚的に理解できるのがポイントです。

データベースについての知識がほとんどない人でも分かるように配慮されています。動作原理や動きが図で説明されているため、言葉が分からない人でもイメージで理解できるようになっています。

内容的には難しい分野だと思います。データベースの仕組みなんて、専門家しか理解できないのではないかと思われるかも知れません。でも、本書は違います。とても簡単な言葉で説明していて、最後までつっかえることなく読むことが出来ます。

データベースが専門の人もそうでない人も、プログラマの人もSEの人も、管理職の人も営業の人も、皆に読んでいただきたい本です。面白いです、とっても。

<h2>参考</h2>

+ SQL文を体にしみこませる練習帳
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122998/sorehabooks-22/" target="_blank">SQL書き方ドリル―すらすらと手が動くようになる</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122998/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4774122998.09._SCMZZZZZZZ_.jpg"   border="0" alt="4774122998" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">羽生 章洋<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774122998&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />SQLをマスターするのに最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />新人時代に巡り会いたかった本です<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122998/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ データベース全体について知識がつく本
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534029497/sorehabooks-22/" target="_blank">図解でわかるデータベースのすべて―ファイル編成からSQLまで</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534029497/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4534029497.09._SCMZZZZZZZ_.jpg"   border="0" alt="4534029497" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">小泉 修<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4534029497&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />文章が読みづらい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />何度でも戻って来れる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />データベースの全般的な知識を効率的に学べそう<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />バランスが良い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />データベースの全体像把握に最良の一冊。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534029497/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ データモデリングが良く分かる
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank">実践的データモデリング入門</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798103853.09._SCMZZZZZZZ_.jpg"   border="0" alt="4798103853" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">真野 正<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798103853&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />とてもわかりやすい！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />データモデリング、分かりやすい内容です<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798108642.09.MZZZZZZZ.jpg" border="0" alt="RDBMS解剖学 よくわかるリレーショナルデータベースの仕組み">
-----
KEYWORDS:
RDBMS,解剖学,リレーショナルデータベース,仕組み,DB
-----


-----
CF50_CF_4: 鈴木 幸市 (著), 藤塚 勤也 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/413TE6PZPTL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798108642/sorehabooks-22/249-2361891-9485140?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: コミュニケーションに奇跡を起こす マインドマップ活用術
BASENAME: post_26
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 05/14/2005 03:08:39 PM
TAGS: マインドマップ
-----
BODY:
コミュニケーションとは『<strong>相手を思う心遣いである</strong>』。これが私が本書を読んで一番言いたい主張です。本書では、「<strong>相手に興味を持つ(相手を知る)</strong>」「<strong>相手に興味を持たせる(出会いと別れのテクニック)</strong>」「<strong>相手に対して肯定的な姿勢を心がける</strong>」といったことに焦点を当ててHow toを紹介しています。

書籍のタイトルに『マインドマップ』とありますが、実際にはマインドマップのことにはほとんど触れられていません。「頭の中の思考状態」という意味でのマインドマップだと考えたほうが良いです。つまり、<b>マインドマップの書き方や読み方についての解説書ではない</b>ということです。

コミュニケーションの本質は「相手にいかにいい気分になってもらうか」ということだと感じました。色々なテクニック(表現方法やプレゼントの渡し方など)を用いて、相手の印象に残りやすくするといったことにも触れられています。

人間としてのたしなみとして、「<strong>相手を思いやる心</strong>」は大切にしなければならないものだと思います。人は一人で生きているわけではないのですから。相手に拒否されるようでは、生きていけません。本書を読んで、「相手を思いやる心」に磨きがかかったような気がします(ちょっと偉そうですかね ^^;)
-----
EXTENDED BODY:
 <h2>特徴</h2>

本書は「<a href="http://www.yoshikoo.com/career/mindmap.html" tager="_blank" class="extlink">マインドマップ</a>」に関する本ではありません。マインドマップの書き方や読み方には一切触れられていません。マインドマップとは何かが知りたい人は気をつけてください。

人間力の一つであるコミュニケーション力というのは、人によって色々な解釈があると思います。本書ではコミュニケーション力とは<q>飛び切りの話し上手であり、聞き上手であり、より広い世界とうまく関わりあっていける</q>力のことだとしています。

本書の目次です。どんなことが書いてあるのか、イメージがつくと思います。

<dl>
<dt>人の心を読む</dt><dd>ボディ・ランゲージとその上手な使い方</dd>
<dt>耳は二つ口は一つ</dt><dd>聞き上手になる</dd>
<dt>人間関係を広げる</dt><dd>出会いからネットワークつくりまでのちょっとしたノウハウ</dd>
<dt>集団の中で悩まない</dt><dd>大勢の人に好印象を与える方法</dd>
<dt>態度の問題</dt><dd>常に相手に対しては肯定的な姿勢を心がける</dd>
<dt>交渉</dt><dd>味方を得て、人を動かす方法</dd>
<dt>人間関係のたしなみ</dt><dd>いつ、何をすべきか</dd>
<dt>真の成功</dt><dd>コミュニケーションの達人</dd>
<dt>複合知性の活用</dt><dd>あなたのコミュニケーション力は必ず上がる！</dd>
</dl>

コミュニケーションとは相手が居てこそ成り立つものです。一方的に話をすることでもなく、聞き役に徹するわけでもありません。そんなことを再認識するきっかけを本書からいただきました。

<h2>参考</h2>

+ マインドマップを最初に勉強するならコレ
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877710523/sorehabooks-22/" target="_blank">人生に奇跡を起こすノート術―マインド・マップ放射思考</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877710523/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4877710523.09._SCMZZZZZZZ_.jpg"   border="0" alt="4877710523" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">トニー ブザン Tony Buzan 田中 孝顕<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4877710523&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />納得だけど・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />頭の中がぐちゃぐちゃになる前に。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />おもしろいよ！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />小奇跡。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   border="0" alt="star" />マインドマップを知りたいなら・・<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877710523/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ マインドマップを使って読書をする
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478733007/sorehabooks-22/" target="_blank">マインドマップ読書術―自分ブランドを高め、人生の可能性を広げるノウハウ</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478733007/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4478733007.09._SCMZZZZZZZ_.jpg"   border="0" alt="4478733007" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">松山 真之助<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4478733007&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />マインドマップを書き続けるための参考書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />経験価値への昇華と「似て非なるもの」<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />読書を楽しくさせる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />背中を押して手もひっぱる本です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />思考を外に広げるために有用<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478733007/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ マインドマップの書き方は、本書で
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877711317/sorehabooks-22/" target="_blank">図解・マインドマップノート術</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877711317/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4877711317.09._SCMZZZZZZZ_.jpg"   border="0" alt="4877711317" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">SSIブレインストラジーセンター<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4877711317&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />マインドマップのエッセンスを概観できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />こんな本が欲しかった！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />見ても楽しいマインドマップは、こう書く<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   border="0" alt="star" />大して役に立たなかった。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4877711317/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 話上手に必須の力
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4480816380/sorehabooks-22/" target="_blank">コメント力</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4480816380/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4480816380.09._SCMZZZZZZZ_.jpg"   border="0" alt="4480816380" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">齋藤 孝<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4480816380&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />『おいしい』と言えなくなる!?<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />自分のつまらなさに気付く本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />会話で、相手に自分の意思が伝わっているかどうか意識<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />簡単にはつかないけれど<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />こんな時、どう言う？<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4480816380/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 聞き上手に必須の力
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4480816267/sorehabooks-22/" target="_blank">質問力―話し上手はここがちがう</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4480816267/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4480816267.09._SCMZZZZZZZ_.jpg"   border="0" alt="4480816267" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">齋藤 孝<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4480816267&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />対談と仕事の会話は違う<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />座標軸を使ってコミュニケーションするアイデアは面白い！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />斉藤氏のアレンジ力<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />妙技<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />例え話の妙<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4480816267/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/487771135X.09.MZZZZZZZ.jpg" border="0" alt="コミュニケーションに奇跡を起こす マインドマップ活用術">
-----
KEYWORDS:
マインドマップ,活用術,コミュニケーション,奇跡,トニー・ブザン
-----


-----
CF50_CF_4: 田中 孝顕 (翻訳)
CF50_URL: http://ecx.images-amazon.com/images/I/51C074WRPKL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/487771135X/sorehabooks-22/249-2361891-9485140?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: きこ書房
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: ソフトウェアエンジニアリング
BASENAME: post_21
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 05/21/2005 02:36:06 PM
TAGS: ソフトウェアエンジニアリング
-----
BODY:
「<strong>ソフトウェアエンジニアリング</strong>」を一言で言えと言われたら、ソフトウェア開発を定量的に見積り、計画によって管理していく学問だと答えるでしょう。ソフトウェアエンジニアリングは学問に近いところにあると私は考えています。

本書は、ソフトウェアエンジニアリング(つまり、ソフトウェア工学)をオブジェクト指向の視点で整理して解説した本です。オブジェクト指向というと、プログラミング、分析・設計、UMLが現在の代名詞となっています。本書はもっと大きな視点で、オブジェクト指向開発と言うものをとらえた本になっています。

分厚くて、教科書的で、理論と実践が織り交ざっています。教科書として使える本なので、学問的ですが、実践で使える手法や手段も載っています。技術者として経験を積んできたころに読むと一層効果的だと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

ソフトウェアエンジニアリングというと、プロセスやプロダクトに焦点をあてているものが多くあります。しかし、人間系がおろそかにされている本が多いのも事実です。本書は、人間系もカバーしていて、実際のソフトウェア開発で使えるものに仕上がっています。

<a href="http://hamasyou.com/images/software_engineering/mindmap_big.gif" target="_blank"><img src="http://hamasyou.com/images/software_engineering/mindmap.gif" alt="ソフトウェアエンジニアリングの４つのP"   border="0" /></a>

監訳者の羽生田さんもまえがきで言っている様に「<strong>ソフトウェアエンジニアリングの４つのP</strong>」が分かっている人は、ソフトウェア開発のことが良く分かっていると思えるということです。「Validation(妥当性検査)とVerification(検証)の違い」のような概念も本書では重要視されています。

ソフトウェア開発にたずさわっている人でも、ソフトウェアエンジニアリングのことを良く知らないという人は多いと思います。本書で体系的なソフトウェアエンジニアリングを勉強してみるのはいかがですか？

<h2>参考</h2>

+ ソフトウェア開発に必須の「要求」を聞く力
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4775302876/sorehabooks-22/" target="_blank">ソフトウェア要求と仕様―実践、原理、偏見の辞典</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4775302876/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4775302876.09._SCMZZZZZZZ_.jpg"   border="0" alt="4775302876" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">マイケル ジャクソン Michael Jackson 玉井 哲雄 酒匂 寛<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4775302876&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4775302876/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 読んで損はない。ソフトウェア工学の実践知識
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4817161485/sorehabooks-22/" target="_blank">実践ソフトウェアエンジニアリング-ソフトウェアプロフェッショナルのための基本知識-</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4817161485/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4817161485.09._SCMZZZZZZZ_.jpg"   border="0" alt="4817161485" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">ロジャーS.プレスマン 西 康晴 榊原 彰 内藤 裕史<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4817161485&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />読んでよかったです<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4817161485/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ソフトウェア開発の実装に視点を置いた本
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">アジャイルソフトウェア開発の奥義</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4797323361.09._SCMZZZZZZZ_.jpg"   border="0" alt="4797323361" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">ロバート・C・マーチン 瀬谷 啓介<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797323361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />いい本だとおもいます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />「奥義」の名に恥じない内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />体系だてられた経験的ガイドラインか。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798103543.09.MZZZZZZZ.jpg" border="0" alt="ソフトウェアエンジニアリング">
-----
KEYWORDS:
ソフトウェアエンジニアリング,ピープル,People,プロセス,Process,プロジェクト,Project,プロダクト,Product
-----


-----
CF50_CF_4: 羽生田 栄一 (翻訳)
CF50_URL: http://ecx.images-amazon.com/images/I/417ANXFCGSL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798103543/sorehabooks-22/250-6551846-1997067?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: 「関連」のモデリングの違いを整理する
BASENAME: post_25
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 05/22/2005 08:10:26 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/249-4688781-9575529?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank"><img src="http://images-jp.amazon.com/images/P/4822221180.09.MZZZZZZZ.jpg"   border="0" alt="UMLモデリングの本質" /></a>
</p>

概念モデリングでは、「<strong>関連</strong>」と「<strong>多重度</strong>」がモデルを読むときに大切な要素となります。

関連は、あるエンティティとエンティティを結ぶ線のことです。しかし、今回は、もう一歩進んだ関連の使い方である、「<strong>関連の属性のクラス</strong>」と「<strong>関連のクラス</strong>」の違いを整理したいと思います。

もう一つの目的として、「多重度」の見方も整理したいと思います。「<strong>種類(品目)と物(特定品目)</strong>」の多重度の違いを理解できればと思います。

<section>

<h4>参考</h4>

<a href="http://watanabek.cocolog-nifty.com/blog/2005/04/post_554e.html" target="_blank" class="extlink">設計者の発言「「関連クラス」をデータモデルで解き明かす（前編）」</a>

<a href="http://watanabek.cocolog-nifty.com/blog/2005/04/post_6405.html" target="_blank" class="extlink">設計者の発言「「関連クラス」をデータモデルで解き明かす（後編）」</a>

</section>
-----
EXTENDED BODY:
<h2>関連</h2>

「関連の属性のクラス」と「関連のクラス」の違いは2つあります。

<ol><li>表記が違う</li><li>インスタンスの制約が違う</li></ol>

<h3>関連の属性のクラス</h3>

「関連の属性のクラス」は関連に属性を持たせるために導き出したクラスのことです。

<img src="http://hamasyou.com/images/modeling/relation_class.gif" alt="関連の属性のクラス" />

この例では、新幹線と駅との間に「停車する」という関連が引かれています。「停車する」という関連に属性「発車時刻」と「停車時刻」を持たせたいために、「停車する」という関連の属性のクラスを導き出しました。

この「関連の属性のクラス」では、<em>同じ新幹線と駅の組み合わせは一つだけ</em>しか作ることができません。

<img src="http://hamasyou.com/images/modeling/relation_object.gif" alt="関連の属性のクラスのオブジェクト図" />

<h3>関連のクラス</h3>

これに対して「関連のクラス」は、いわゆる「<strong>モノ-こと-モノ</strong>」のパターンで関連をクラスとして表現したものです。

<img src="http://hamasyou.com/images/modeling/class_of_relation.gif" alt="関連のクラス" />

この「関連のクラス」は、同じモノ-モノの組み合わせをいくつも作ることができます。

<img src="http://hamasyou.com/images/modeling/class_of_relation_object.gif" alt="関連のクラスのオブジェクト図" />

この例では、同じ生徒が同じ履修項目を取ることが出来るようになります。この「関連のクラス」は<b class="red">履歴をとる場合によくつかわれます</b>。

<h2>多重度</h2>

『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/249-4688781-9575529?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">ストリームラインオブジェクトモデリング</a>』に「<strong>品目-特定品目</strong>」というパターンが載っています。これは、いわゆる「<strong>種類と物</strong>」の関係です。

品目(種類)と言うのは、例えばビデオレンタル屋のビデオのタイトルなどになります。それに対して特定品目(物)は貸し出すビデオになります。他の例では、ファーストフード店のメニュー(ハンバーガーやポテト、ドリンク)は品目、出てきた商品は特定品目(物)になります。

概念モデリングの世界では、<strong>品目(種類)なのか、特定品目(物)なのかを区別することが非常に重要</strong>です。多くの場合、高価なものは特定品目(物)として扱うことが多いようです。

<img src="http://hamasyou.com/images/modeling/barger_class.gif" alt="ファーストフード店のメニュークラス図" />

コレは、あるファーストフード店の単品メニューとセットメニューのクラス図とオブジェクト図になります。単品メニューとセットメニューの多重度は「多対多」になっています。オブジェクト図を見ると、こんな関係になります。

あれ？味噌汁のインスタンスが別々のセットメニューと関係を持っています。味噌汁は、一つのセットにしか含まれないはずでは？別々のセットメニューに味噌汁が含まれるって、どういうこと？
これは、モデリングの知識がある人は、「味噌汁は品目(種類)だから、概念上は別々のセットメニューに含められる」とわかります。

「味噌汁一つのインスタンスは、セットメニュー一つと関係を持つ」と考えると、味噌汁インスタンスは複数のメニューには含まれないような気がします。でも、ここが「<strong>品目(種類)と特定品目(物)</strong>」のややこしいところです。

特定品目(物)は確かに「このインスタンス一つにつき・・・」と考えます。しかし、品目(種類)は、「このインスタンス品目は・・・」と考えなければなりません。

品目(種類)と特定品目(物)をしっかり区別して、集合論で物を捕らえることこそ、概念モデリングの重要な点と言えるでしょう。

<h2>参考</h2>

+ 概念モデリングで良く使うパターンを学ぶのに最適
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" target="_blank">ストリームラインオブジェクトモデリング―パターンとビジネスルールによるUML</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894715775.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894715775" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">ジル ニコラ マイク アベニー マーク メイフィールド Jill Nicola<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894715775&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ドメインモデリングの方法論を明快に説明<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />モデリングの基本が身に付く<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />オブジェクト思考(指向ではない)業務分析<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ミクロな頻出モデルをたくさん紹介<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ モデリングパターンの王道。ただし、かなり難しいです。
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" target="_blank">アナリシスパターン―再利用可能なオブジェクトモデル</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894716933.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894716933" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">マーチン ファウラー Martin Fowler 堀内 一 友野 晶夫<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894716933&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />よい本ですね<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />「オブジェクト」指向モデリングの導き手<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716933/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ アナリシスパターンが読みこなせなかった人はここから始めましょう
<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" target="_blank">UMLモデリングの本質</a></td></tr><tr><td class="g-tools_img" valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822221180.09._SCMZZZZZZZ_.jpg"   border="0" alt="4822221180" /></a></td><td valign="top"  class="g-tools_body" /><font size="-1">児玉 公信<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822221180&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />チャレンジングな本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />UMLモデリングの窓から見た情報システム工学の展望<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />モデリングについて説得力のある解説が多々あります。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />この本を手がかりに、自分でやってみよう！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />これは「モデリング本」です。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822221180.09.MZZZZZZZ.jpg" border="0" alt="UMLモデリングの本質">
-----
KEYWORDS:
モデリング,概念モデリング,UML,関連,多重度,整理
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: リファクタリングワークブック
BASENAME: post_17
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/04/2005 04:58:09 PM
TAGS: リファクタリング
-----
BODY:
「リファクタリング」とは、プログラムの振る舞いを変えずに、内部設計を改善する技術です。良い設計が生み出す利益は計り知れません。最初から良い設計を行うのは、非常に難しい技術が伴います。また、時間もかかります。

リファクタリングを行いながらプログラミングを進めることで、最初から良い設計を行おうとして時間がかかってしまうのを防ぐことが出来ます。本書は、そんな<b>リファクタリングを、ワーク形式で勉強できる本</b>になっています。

『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/250-3258762-7997812?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" taget="_blank" class="extlink">リファクタリング</a>』に載っている数十個の臭いに対するリファクタリングが載っています。臭いとは、リファクタリングが必要だと思われる怪しい箇所のことです。

本書の対象読者は、プログラミングをしたことがある人だと思います。一度でもプログラミングをしたことがあれば、臭いのする場所がなんとなく理解できるのではないかと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の特徴は、実践形式つまりプログラムでリファクタリングを学べるところです。『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/250-3258762-7997812?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" taget="_blank" class="extlink">リファクタリング</a>』にも、ソースコードは載っていました。が、リファクタリングの手順に関するものがほとんどで、実際にリファクタリングの勘所をつかむには、四苦八苦する必要がありました。

本書は、一つの臭いに対して、複数の演習が用意されています。いくつもの演習を行っていくうちに、自然とリファクタリングの勘所が分かってくるように作られています。プログラミング経験の少ない人にもおすすめできる理由が、この演習が多いということです。

プログラミングの勉強に、リファクタリングの勉強に、一石二鳥の本書は、これからリファクタリングを勉強しようと思っているエンジニアの人におすすめです。

<h2>特徴</h2>

+ リファクタリングの大元
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" target="_blank">リファクタリング―プログラムの体質改善テクニック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894712288.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894712288" /></a></td><td valign="top" /><font size="-1">マーチン ファウラー Martin Fowler 児玉 公信 平澤 章<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894712288&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />オブジェクト指向のプログラマ必読の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />XPプログラミングなどで主流になってきてます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ファウラー本の中ではかなり読みやすいです。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ソフトウェアの改善に関する良書です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />コーディングが変わった<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ リファクタリングを現場で使うための本
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797329769/sorehabooks-22/" target="_blank">プログラムの育てかた 現場で使えるリファクタリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797329769/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4797329769.09._SCMZZZZZZZ_.jpg"   border="0" alt="4797329769" /></a></td><td valign="top" /><font size="-1">長谷川 裕一 斎川 博史<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797329769&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />リファクタリングについて楽しく学べる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />入門書として最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   border="0" alt="star" />初心者向けなのに初心者には見せられない・・・<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797329769/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4756145027.09.MZZZZZZZ.jpg" border="0" alt="リファクタリングワークブック">
-----
KEYWORDS:
リファクタリング,ワークブック,設計,改善,テクニック
-----


-----
CF50_CF_4: 株式会社テクノロジックアート (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51Q1T3RZ8AL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4756145027/sorehabooks-22/250-3258762-7997812?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: アスキー
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Pro Spring
BASENAME: pro_spring
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/14/2005 11:41:03 PM
TAGS: Spring,定番,洋書,良書
-----
BODY:
最初に断っておきます。本書は洋書です。ただ、この記事を執筆している現在(2005/06/14)で、<b>この本より詳しく、この本より分かりやすくSpringを解説している本はない</b>です。しかも洋書なので、下手な訳がない分逆に分かりやすいです。

本書は、<a href="http://www.springframework.org/" target="_blank" class="extlink">Spring Framework</a>(以下、Spring)について解説した本です。Springは数あるフレームワークの一つで、最近話題のDIパターンを実装しています。

本書は、DIパターンを実装しているフレームワークの中でも、アメリカで爆発的に人気の在るSpringの、仕組みや使い方を学ぶ本です。業務でSpringを使う予定がある人、Springを勉強したい人は、かなり買いの一冊です。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書の特徴は、詳しい解説と豊富なサンプルコードです。

詳しい解説とは何を意味するかと言うと、Springのコアテクノロジをほぼすべて解説していることと、使う場合に注意することが網羅されていることです。実際に業務でSpringを使う人には、非常に便利な構成になっています。

豊富なサンプルコードは、英語が読めない人でもコードを読めば動きが分かるくらいの物が多数載っています。そのまま真似できるレベルのコードが書かれています。

本書が訳されたら、大ヒットすると思います。それくらい、内容が濃く分かりやすい本になっています。業務で利用する人もそうでない人も、Springに興味があれば本書を購入することをおすすめします。

<h2>参考</h2>

+ 日本語でSpringを解説した最初の本だと思います。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774123412/sorehabooks-22/" target="_blank">Java・J2EE・オープンソース Spring入門 ~より良いWebアプリケーションの設計と実装</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774123412/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4774123412.09._SCMZZZZZZZ_.jpg"   border="0" alt="4774123412" /></a></td><td valign="top" /><font size="-1">長谷川 裕一 伊藤 清人 岩永 寿来 大野 渉<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774123412&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />タイトルどおりの内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />Springフレームワークの基本が身に付く良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774123412/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ In Action シリーズ、Spring編です。(洋書)
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1932394354/sorehabooks-22/" target="_blank">Spring In Action (In Action)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1932394354/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/1932394354.01._SCMZZZZZZZ_.jpg"   border="0" alt="1932394354" /></a></td><td valign="top" /><font size="-1">Craig Walls Ryan Breidenbach<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=1932394354&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1932394354/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Spring用の入門書です。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221431/sorehabooks-22/" target="_blank">実践Spring Framework―J2EE開発を変えるDIコンテナのすべて</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221431/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822221431.01._SCMZZZZZZZ_.jpg"   border="0" alt="4822221431" /></a></td><td valign="top" /><font size="-1">河村 嘉之 首藤 智大 竹内 祐介 吉尾 真祐<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822221431&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />全体像が分かり辛い。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221431/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Spring、JSF、Hibernateを使った実践的な入門書です。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/" target="_blank">Light weight Java―JSF/Hibernate/SpringによるフレームワークでWebアプリケーションの開発効率向上</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4839917779.09._SCMZZZZZZZ_.jpg"   border="0" alt="4839917779" /></a></td><td valign="top" /><font size="-1">岡本 隆史 吉田 英嗣 金子 崇之 権藤 夏男<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4839917779&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />Java最新技術が手っ取り早く分かる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />ＪＳＦがメインの本。HibernateやSpringには期待しないこと。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />システム開発のコツをまとめてあります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/1590594614.01.MZZZZZZZ.jpg" border="0" alt="Pro Spring">
-----
KEYWORDS:
Spring, Framework, Pro, フレームワーク, DI, コンテナ
-----

COMMENT:
AUTHOR: かけだ
EMAIL: 
IP: 218.219.149.62
URL: http://log.giantech.jp/
DATE: 07/10/2005 12:50:31 AM
Pro Springは恐らく数少ない EJB-Spring連携を「まともに」扱っている書籍でしょう。
本自体は買っていないのですが、Pro Springの著者の記事とそのサンプルに助けられた思い出があります。
-----


-----
CF50_CF_4: Jan Machacek (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51In5DSj7VL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/1590594614/sorehabooks-22/249-4890987-6855557?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: Apress
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: J2EEアンチパターン
BASENAME: j2eeアンチパターン
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 06/25/2005 08:24:12 PM
TAGS: J2EE,アンチパターン,良書
-----
BODY:
本書は、J2EE技術を使ったアプリケーション作成でおちいりやすい罠について説明されています。おちいりやすい罠とは例えば、ユースケースの一つ一つについてサービスクラスを作ってしまうようなものを言っています(Tiny Serviceアンチパターン)。

デザインパターンとは違った面白さがここにはあります。私が感じた面白さの一つは、「自分もこんな間違えやってるなー」といった敗北感や、「前にやった設計、このアンチパターンを回避してたぜ」みたいな安心感などを読みながら感じられるところです。

J2EEというと範囲がとても広いと思ってしまいます。確かに、ページ数は500ページを超える分厚い部類に入ると思います。ただ、本書のようなある種のパターン本は最初から最後まで全部読む必要はなく、必要になったとき(例えば設計やコードレビューのとき)にパラパラめくるだけでいいと思います。

サーブレット、JSP、EJB、分散、永続化、サービス層、そしてWebサービス。粒度は違えど、すべてJ2EEに関係のあるものばかりです。リファレンス感覚で、手元においておくのはどうですか？値段だけで決めるとしても、決して高くないと思いますよ。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>リファレンスとしてもっておくのがベスト</h3>

やっぱり、リファレンス用途としてもっておくのがいいと思います。本書の構成は、

<ol><li>パターン名</li><li>別名</li><li>頻出規模(例：アーキテクチャ、アプリケーション、システム)</li><li>リファクタリング(改善するときに使うリファクタリングのこと)</li><li>基本原因</li><li>挿話証拠(この言葉を聞いたら要注意)</li></ol>

でアンチパターンを定義し、「<strong>背景</strong>」、「<strong>一般形式</strong>」、「<strong>症状と結果</strong>」、「<strong>典型的な原因</strong>」、「<strong>既知の例外</strong>」、「<strong>リファクタリング</strong>」、「<strong>変種</strong>」、「<strong>例</strong>」、「<strong>関連するソリューション</strong>」の9の項目について書かれています。

面白いのは、「既知の例外」という項目があるところです。基本的にはアンチパターンなんだけどこの場合は仕方ない、もしくはこのままのがよいということが書かれています。結構勉強になります。

<h3>反面教師</h3>

アンチパターンは、「反面教師」です。こういうふうにしてはいけない、ということがまとめられています。本書ではさらに、このアンチパターンを良くするにはどうすればよいかと言うことまで言及しています。ここが一つの本書のポイントだと思います。

厚い本なので、手に取るのを躊躇するかもしれませんが、手元においておいて損はないのではないでしょうか。結構楽しめると思います。

<h2>参考</h2>

+ ソフトウェア開発のアンチパターン
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797321385/sorehabooks-22/" target="_blank">アンチパターン―ソフトウェア危篤患者の救出</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797321385/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4797321385.09._SCMZZZZZZZ_.jpg"   border="0" alt="4797321385" /></a></td><td valign="top" /><font size="-1">W.J. ブラウン 3,Hays W. McCormick Raphael C. Malveau Thomas J. Mowbray<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797321385&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />面白くて勉強になります<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />開発者〜管理者まで参考になる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />良い本だと思うけど星３つの訳<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />失敗例カタログ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />身近に置いておきたい一冊<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797321385/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ EJBのアンチパターン
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281841/sorehabooks-22/" target="_blank">EJBアンチパターン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281841/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822281841.09._SCMZZZZZZZ_.jpg"   border="0" alt="4822281841" /></a></td><td valign="top" /><font size="-1">Bruce Tate Mike Clark Bob Lee Patrick Linskey<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822281841&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />内容は最高だけど翻訳が ...<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281841/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ サーブレット、JSPのアンチパターン
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281574/sorehabooks-22/" target="_blank">サーバーサイドJavaアンチパターン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281574/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822281574.09._SCMZZZZZZZ_.jpg"   border="0" alt="4822281574" /></a></td><td valign="top" /><font size="-1">ブルース・A. テイト Bruce A. Tate トップスタジオ<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822281574&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />始めの方は良いが、最後の方が今いち<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281574/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Javaプログラミングのアンチパターン
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774114901/sorehabooks-22/" target="_blank">Java開発者のためのアンチデザインパターン―失敗を回避する秘訣</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774114901/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4774114901.09._SCMZZZZZZZ_.jpg"   border="0" alt="4774114901" /></a></td><td valign="top" /><font size="-1">安藤 利和<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774114901&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   border="0" alt="star" />間違いが多い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   border="0" alt="star" />絵が多い分内容が薄い。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   border="0" alt="star" />ソースとパターンと説明の結びつきが・・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   border="0" alt="star" />今ひとつデザインパターンを習得できませんでした<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   border="0" alt="star" />買ってはいけない<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774114901/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822281981.09._PE_SCMZZZZZZZ_.jpg" border="0" alt="J2EEアンチパターン">
-----
KEYWORDS:
J2EE,アンチパターン,デザインパターン,パターン,サーブレット,JSP,EJB,Webサービス
-----


-----
CF50_CF_4: ビル ダドニー (著), ジョセフ クロザック (著), ケビン ウィトコフ (著), スティーブン アズベリー (著), Bill Dudney (原著), Kevin Wittkopf (原著), Joseph Krozak (原著), Stephen Asbury (原著), トップスタジオ (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51C77EH6KJL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4822281981/sorehabooks-22/250-6509162-2027446?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 業務モデルとデータモデルの考え方
BASENAME: post_20
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/03/2005 05:00:19 PM
TAGS: データモデル,モデリング
-----
BODY:
僕は最初この本を読んだとき、内容をあまり理解できませんでした。それは、趣味でしかモデリングをやっていなかったからです。つまり、業務の知識がまったくなかったのです。

本書は、業務をどうデータモデルに落とすか、ER図に落とすかというところを解説しています。そこには、どんなツールを使うか、どんなフローを書けばいいのかといったことまで含まれています。

「なんだか実務をこなしているみたい」と、読後は思いました。それくらい、<strong>実践よりの本</strong>になっています。データモデリング初心者でも読みこなせる優しい文章になっていますが、<b>業務知識がないと読み進めることがつらい</b>です。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>業務プロセスの話も含まれている</h3>

データモデルの本と言うのは、実はあまり<strong>業務プロセス</strong>について触れられていなかったりします。

本書は、業務プロセス、ビジネスフローについても書かれています。ビジネスの現場でモデリングを使うには、当然ビジネスプロセスの話も必要になってきます。本書は、業務プロセスの分析とモデリングを一緒に解説しています。

<h3>ツールの解説が豊富</h3>

例えば、ビジネスフローについて解析したいとき、便利なのは「Xupper（ケン・システムコンサルティング）」であったり、IDEF0のツールとして有名なのは「All Fusion Process Modeler(コンピュータ・アソシエイツ）」であるといったことが本書では挙げられています。

モデリングの説明ばかりでなく、ツールの説明までしているところが、実際の現場で役に立ちそうだといえます。ツールだけでなく、命名規則の話や、識別子のつけかたの話など、盛りだくさんです。

<h2>参考</h2>

+ データモデリングってどうやるんだろうという人にご紹介！
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank">実践的データモデリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798103853.09._SCMZZZZZZZ_.jpg"   border="0" alt="4798103853" /></a></td><td valign="top" /><font size="-1">真野 正<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798103853&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />とてもわかりやすい！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />データモデリング、分かりやすい内容です<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ データベース設計を理解したいひとにおすすめ
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101109/sorehabooks-22/" target="_blank">データモデリング基礎講座―データベース設計を楽しもう!</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101109/sorehabooks-22/" target="_blank"><img src="http://images-jp.amazon.com/images/P/4798101109.09.MZZZZZZZ.jpg"   border="0" alt="4798101109" /></a></td><td valign="top" /><font size="-1">根本 和史<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798101109&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />「DBの設計ってどうやるんだろう」と思っている、データベースに少し関わったことのある技<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />基礎的なことがわかりやすい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />モデリング≠テーブル設計<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />モデリング＜入門者向け＞<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101109/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ データベース設計ってどうやるんだろうという人にご紹介！
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810566X/sorehabooks-22/" target="_blank">グラス片手にデータベース設計~販売管理システム編</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810566X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/479810566X.09._SCMZZZZZZZ_.jpg"   border="0" alt="479810566X" /></a></td><td valign="top" /><font size="-1">梅田 弘之<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=479810566X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />良書です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />なかなか力作！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />勉強になります。知恵がつきます。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ひとつの解答は得られます。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />前むきなテクニカルエンジニアにお勧めします<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810566X/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798106453.09._PE_SCMZZZZZZZ_.jpg" border="0" alt="業務モデルとデータモデルの考え方">
-----
KEYWORDS:
業務モデル,データモデル,モデリング,考え方,DOA
-----


-----
CF50_CF_4: 松本 聡 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51X76SS89ML._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798106453/sorehabooks-22/250-1376590-4254613?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: ワークブック形式で学ぶUMLオブジェクトモデリング―「ユースケース駆動」でソフトウェアを開発する
BASENAME: ワークブック形式で学ぶumlオブジェクトモデリングユースケース駆動でソフトウェアを開発する
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/16/2005 04:10:44 PM
TAGS: ICONIX,UML,モデリング,ユースケース
-----
BODY:
数少ない「<strong>ICONIXプロセス</strong>」について書かれている本です。ICONIXプロセスは、「<strong>ユースケース駆動</strong>」で進める軽量な開発プロセスです。UMLを用います。分析・設計・実装の各段階の前後のトレーサビリティを重要視します。

ICONIXプロセスでは、「<strong>ロバストネス分析</strong>」を行います。分析の「what」と実装の「how」のギャップを埋めるために使われます。本書はこのロバストネス分析に使われる「<strong>ロバストネス図</strong>」というUMLの拡張(ステレオタイプを使う)も解説しています。

本の作りは非常にシンプルでかつ実践的になっています。各章の最初の数ページで、その章のポイントを解説します。その後、実際に起こりやすい間違いトップ１０という形で実例を解説し、演習問題を解くという流れになっています。

実際に<strong>ICONIXプロセス</strong>を体験しながら覚えたい人、<strong>ロバストネス図</strong>って聞いたことあるけどどんなものなんだろうと思っている人。そういう人に本書はおすすめです。演習を行いながら読み進められるので、頭に残りやすいのが特徴です。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>ICONIXプロセスに関する数少ない書籍</h3>

私が知る限り、ICONIXプロセスについて書かれている本は本書と『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713772/sorehabooks-22/249-6138668-6440307?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">ユースケース入門―ユーザマニュアルからプログラムを作る</a>』くらいだと思います。(違ったらごめんなさい)　開発プロセスは理論より実践しないと身につかないと思います。

本書は、「ワークブック形式」ということで、演習が多く載っています。実際にICONIXプロセスを実体験できるので、プロジェクトで使う前に評価できるところがうれしいです。

内容的にはそれほど難しくなく、平易な日本語で書かれています。モデリング初心者の人でも読みこなせるレベルの本だと思います。

<h3>ロバストネス図ってなんだ！？</h3>

本書は「<strong>ロバストネス図</strong>」についても解説しています。ロバストネス図とは分析(what)と実装(how)のギャップを埋めるために用いられる図で、UMLで表すことができます。

ICONIXプロセスではこのロバストネス図を使った「<strong>ロバストネス分析</strong>」が重要な位置を占めます。この分析手法に関しても、実践を通して学ぶことが出来ます。

モデリング初心者からどなたでもためになる本です。おすすめの一冊です。

<h2>参考</h2>

+ ロバストネス図を描くには本書は必須
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713772/sorehabooks-22/" target="_blank">ユースケース入門―ユーザマニュアルからプログラムを作る</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713772/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894713772.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894713772" /></a></td><td valign="top" /><font size="-1">ダグ ローゼンバーグ ケンドール スコット Doug Rosenberg Kendall Scott<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713772&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ロバストネス図について知る（価値、書き方、書くタイミング、使用法）ためには必読の書。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />これなら使える<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />オブジェクトモデリング初心者には完璧にさえ見える<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ユースケースベースのシステム開発<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713772/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ユースケースを駆動する。最高レベルのユースケース記述書。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101273/sorehabooks-22/" target="_blank">ユースケース実践ガイド―効果的なユースケースの書き方</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101273/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798101273.09._SCMZZZZZZZ_.jpg"   border="0" alt="4798101273" /></a></td><td valign="top" /><font size="-1">アリスター コーバーン Alistair Cockburn ウルシステムズ株式会社 山岸 耕二<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798101273&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ユースケース作成にあたり、その精神を学ぶ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ユースケース記述を書くならこの本をまず読む<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ユースケースを書く技術を教える本の中で考えうる限り最高品質<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ユースケースという言語の"いい書き方"を学べます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />要件定義/基本設計を担当する方必見！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101273/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ユースケースを書くためのケーススタディを多く収録。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711869/sorehabooks-22/" target="_blank">ユースケースの適用:実践ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711869/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894711869.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894711869" /></a></td><td valign="top" /><font size="-1">ゲリ シュナイダー ジェイソン ウィンタース Geri Schneider Jason P. Winters<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894711869&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />オブジェクト指向の本ではない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ユースケースに特化した入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />実践的で為になります。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711869/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797320192.09._PE_SCMZZZZZZZ_.jpg" border="0" alt="ワークブック形式で学ぶUMLオブジェクトモデリング―「ユースケース駆動」でソフトウェアを開発する">
-----
KEYWORDS:
UML,モデリング,オブジェクト,ユースケース駆動,ワークブック,ソフトウェア開発,ロバストネス,ICONIX
-----


-----
CF50_CF_4: ダグ ローゼンバーグ (著), ケンドール スコット (著), Doug Rosenberg (原著), Kendall Scott (原著), 今野 睦 (翻訳), 長瀬 嘉秀 (翻訳), テクノロジックアート (翻訳)
CF50_URL: http://ec3.images-amazon.com/images/I/515A56CF3EL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797320192/sorehabooks-22/249-6138668-6440307?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: ソフトバンクパブリッシング
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: Java 5.0 Tiger    開発者ノートシリーズ
BASENAME: java_50_tiger
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 07/23/2005 11:23:39 AM
TAGS: Java,Tiger,開発者ノートシリーズ
-----
BODY:
Javaの最後の言語拡張と言われている「<strong>Java5.0</strong>」通称「<strong>Tiger</strong>」がついに登場しました。Tigerは言語仕様そのものが拡張されています。本書は、この拡張された仕様に関しての解説書になっています。

内容はさすがオライリーと言う感じです。深く説明されているし、注意する点も抜け目なく解説しています。例えばこんなものがあります。

<blockquote>

Enum を実装する場合、toString()の振る舞いを変更したらvalueOf()の振る舞いも変更する必要がある。この２つのメソッドは常にペアの鏡像になる。

<cite>本書</cite>

</blockquote>

この記事を書いている現在(2005/07/23)、本書が一番薄くて一番内容が濃いように思いました。本書の後半にあるスレッド処理の章を読んで、「なんか深いな」と感じました。

Java5.0がどんなものか知りたい人、業務でJava5.0を使う人、いろんな人におすすめです。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>サンプルコードが豊富で、実際の使い方が一目瞭然</h3>

本書は、ただ文章で説明するだけの技術書ではありません。良くあるのは、言語仕様が変わった理由はなんだとか、仕様がどう変わったかとか書かれている本です。アレでは、実際の業務で利用することはできません。ただ知識を蓄えるだけの本になってしまいます。

本書は、言語仕様が変わった理由なんか一切書いてありません。書いてあるのは、<b class="red">どうやって使うのか。何のために使うのか。どこに注意して使うのか。</b>です。非常に実践的な内容です。

どうやって使うのかについて書かれているため、実際の業務ですぐに役に立ちます。技術書にしては薄いので、一度通読したあと、リファレンスとして使うと言ったことができます。

<h2>参考</h2>

+ Java5.0についての解説書。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716879/sorehabooks-22/" target="_blank">Java 2 standard edition 5.0 Tiger―拡張された言語仕様について</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716879/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894716879.01._SCMZZZZZZZ_.jpg"   border="0" alt="4894716879" /></a></td><td valign="top" /><font size="-1">柴田 芳樹<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894716879&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />やや難解か？<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716879/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 開発者ノートシリーズ。Hibernate。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank">Hibernate</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/487311215X.09._SCMZZZZZZZ_.jpg"   border="0" alt="487311215X" /></a></td><td valign="top" /><font size="-1">James Elliott<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311215X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   border="0" alt="star" />物足りない・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />コンパクトにまとまっている良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Core Java シリーズです。超おすすめ。(洋書)
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/3827322162/sorehabooks-22/" target="_blank">Core Java 2, Band 1 Grundlagen (Zur Java 2 Standard Edition Version 5.0)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/3827322162/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/3827322162.01._SCMZZZZZZZ_.jpg"   border="0" alt="3827322162" /></a></td><td valign="top" /><font size="-1">Cay S. Horstmann Gary Cornell<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=3827322162&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/3827322162/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4873112141.09._PE_SCMZZZZZZZ_.jpg" border="0" alt="Java 5.0 Tiger    開発者ノートシリーズ">
-----
KEYWORDS:
Java5.0, Tiger, JDK5.0, 開発者, プログラミング言語, ノート
-----


-----
CF50_CF_4: ブレット マクラフリン (著), デイビッド フラナガン (著), Brett McLaughlin (原著), David Flanagan (原著), 菅野 良二 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/5112QJ9JRZL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4873112141/sorehabooks-22/249-8983933-5965136?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: オライリー・ジャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: J2EEデザインパターン
BASENAME: j2ee
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/31/2005 10:49:53 PM
TAGS: J2EE,デザインパターン,定番
-----
BODY:
『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/249-1102280-5865166?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">J2EEパターン 第２版</a>』で紹介されているパターン ＋ トランザクション、メッセージング、アンチパターン といった構成になっています。J2EEのデザインパターンに関する書籍としては、かなり上位のレベルの本です。

デザインパターンは、Javaプログラマならどこかで一度は聞いたことがある、良い設計の模範のことです。繰返しあらわれる設計に名前を付けて管理したものです。本書は、J2EEにおけるデザインパターンの解説書、リファレンスになっています。

オライリーから出版されているというだけで、かなり濃い内容で詳細に書かれていることが分かると思います。本書は、オライリー本にしては珍しく、<b class="red">とても分かりやすい</b>です。

J2EEデザインパターンを勉強したい人。良い設計について学びたい人におすすめです。実際に使う機会がまだないとしても、良い設計とはどんなものなのかということを勉強しておくことは良いことです。J2EEのデザインパターン本で迷ったら、本書を購入してみてください。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>J2EEパターンのことで書かれていないことはない！</h3>

とにかく詳しく、幅広い知識を得ることができます。すべてのパターンが書かれているというのは言いすぎかもしれませんが、本書の内容以外の情報が必要になる場合と言うのは、特殊な案件か、濃い中でも濃い分野だと思います。

<h3>ソースコードが多い</h3>

サンプルとなるソースコードが多いです。文章を読んでイメージがわかないときでも、サンプルコードを読めば何が言いたいのか理解できるでしょう。オライリー本らしく、絵はあまり多くないです。文章とソースコードで読ませていく本です。

<h2>参考</h2>

+ J2EEパターンについて分かりやすく書かれています。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/" target="_blank">J2EEパターン 第2版</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822282287.01._SCMZZZZZZZ_.jpg"   border="0" alt="4822282287" /></a></td><td valign="top" /><font size="-1">Deepak Alur John Crupi Dan Malks 近棟 稔<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822282287&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />久々に良いJ2EEの翻訳書にめぐり合えました<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />手抜きのないリファレンス書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />すきのないJavaデザインパターンの解説書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ エンタープライズ系のシステムを構築する場合のパターン集
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/" target="_blank">エンタープライズ アプリケーションアーキテクチャパターン</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798105538.01._SCMZZZZZZZ_.jpg"   border="0" alt="4798105538" /></a></td><td valign="top" /><font size="-1">マーチン・ファウラー<br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798105538&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />訳さえまとなら...<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />待望の１冊。ただし帯に偽りあり。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4873111781.09._PE_SCMZZZZZZZ_.jpg" border="0" alt="J2EEデザインパターン">
-----
KEYWORDS:
J2EEデザインパターン,デザインパターン,J2EE,パターン,オライリー,
-----


-----
CF50_CF_4: Jonathan Kaplan (著), 福龍興業 (著), 佐藤 直生 (著), 木下 哲也 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51V89RST65L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4873111781/sorehabooks-22/249-1102280-5865166?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: MDA(モデル駆動型アーキテクチャ)導入ガイド―UMLを基盤としたオブジェクト指向設計・開発手法
BASENAME: mdauml
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 08/14/2005 12:31:26 PM
TAGS: MDA,UML,オブジェクト指向
-----
BODY:
<strong>MDA（モデル駆動型アーキテクチャ）</strong>とは、UMLなどの標準モデリング技術を使ってモデルを作り、モデルをベースにソフトウェア開発を行っていくというものです。プラットフォームに依存しないモデル（PIM）からプラットフォームに依存するモデル（PSM）へ自動的に変換してくれるツールを用いて開発を行います。

本書は、MDA開発のプロセスと、モデルの変換について、現時点で使えるツールについて書かれています。MDAという考え方は、比較的あたらしく、ツールのサポートが不十分です。今の段階でMDAをプロジェクトで活用することはまだ不安があります。

対象読者は、プロジェクトマネージャ、開発者です。現時点で実務に使うのに不安があるMDAですが、そのメリットと仕組みを知っておくと今後のパラダイムシフトにすばやく対応できるでしょう。

本書にはプログラムコードはほとんど出てきません。擬似コードかモデルが出てくるだけです。つまり、本書で解説していることがMDAの概念や仕組みに特化していると言うことです。
-----
EXTENDED BODY:
<h2>特長</h2>

<h3>Platform Independent Model（PIM）とPlatform Specific Model（PSM）</h3>

MDAでは2つのモデルを定義しています。一つは、プラットフォーム独立モデル（PIM）です。もう一つはプラットフォーム特化モデル（PSM）です。PIMからPSMの変換を行うツールを用いて、MDAはソフトウェア開発を行っていきます。

PIMは、モデルが実行される環境に依存していないモデルです。つまり、WindowsでもLinuxでも、TomcatでもJBossでも、どんな環境でも動くことを保証しているモデルです。

PSMは、モデルが実行される環境に依存するモデルです。つまり、WindowsのTomcatで動くモデルと言うように、環境に特化しています。

PIMからPSMへ、PSMからプログラムコードへとモデルが変換されていくプロセスが、モデル駆動型開発と呼ばれるゆえんです。確かにモデルからプログラムコードへと自動で変換されるのはメリットが大きいと思います。しかし、現実的には現段階では、モデルを非常に厳密に書かなければならないし、制約を厳しくしておく必要があると思います。

今後、MDAがどのような発展を遂げていくのか非常に楽しみです。本書では、MDAの基本概念について主に解説しています。今後もっと実践的な書籍が増えてくると思いますが、概念を押さえるには本書のような導入ガイドを読むのがいいと思います。

<h2>参考</h2>

+ MDAの基礎知識を詳しく吸収できます。
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810602X/sorehabooks-22/" target="_blank">Executable UML MDAモデル駆動型アーキテクチャの基礎</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810602X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/479810602X.09._SCMZZZZZZZ_.jpg"   border="0" alt="479810602X" /></a></td><td valign="top" /><font size="-1">スティーブ J.メラー マーク J.バルサー 株式会社テクノロジックアート <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=479810602X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />原本は良いのだが！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />Executable UMLに関する優れた情報源<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810602X/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ MDA開発のエッセンスを解説した本です。入門書的な扱いです。
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107336/sorehabooks-22/" target="_blank">MDAのエッセンス</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107336/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798107336.09._SCMZZZZZZZ_.jpg"   border="0" alt="4798107336" /></a></td><td valign="top" /><font size="-1">スティーブ・メラー ケンドール・スコット 二上 貴夫 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798107336&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />MDAの入門的概要<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107336/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ かなり厳密にMDAを学びたい人向けです。
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434038133/sorehabooks-22/" target="_blank">MDA モデル駆動アーキテクチャ</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434038133/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4434038133.09._SCMZZZZZZZ_.jpg"   border="0" alt="4434038133" /></a></td><td valign="top" /><font size="-1">David S.Frankel 日本アイ・ビー・エム TEC-J MDA分科会 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4434038133&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ちょっと、手ごわかったですが、ためになりました<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />硬派アーキテクトの必携本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />モデル駆動型ソフトウェア開発に向けて重要となる概念やメカニズムを概説<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />MDAの入門書としては最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />難解だが有益<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434038133/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ きっちりしたモデルを書くためにOCL（オブジェクト制約言語）
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434055429/sorehabooks-22/" target="_blank">UML/MDAのためのオブジェクト制約言語OCL</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434055429/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4434055429.09._SCMZZZZZZZ_.jpg"   border="0" alt="4434055429" /></a></td><td valign="top" /><font size="-1">ヨシュ・ヴァルメル アーネク・クレッペ <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4434055429&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />簡潔明瞭で分かりやすく、後から参照するのにも便利<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434055429/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
　
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4844318691.09._PE_SCMZZZZZZZ_.jpg" border="0" alt="MDA(モデル駆動型アーキテクチャ)導入ガイド―UMLを基盤としたオブジェクト指向設計・開発手法">
-----
KEYWORDS:
MDA,モデル駆動型アーキテクチャ,導入,ガイド,UML,オブジェクト指向
-----


-----
CF50_CF_4: Anneke Kleppe (著), Wim Bast (著), Jos Warmer (著), 長瀬 嘉秀 (監修), テクノロジックアート (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51686WYZRGL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4844318691/sorehabooks-22/250-7206300-7584228?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: インプレス
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: 開発のプロが教える標準FindBugs完全解説
BASENAME: findbugs
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 08/27/2005 09:09:44 AM
TAGS: Java,わかりやすい,イディオム,定番
-----
BODY:
<strong>FindBugs</strong>はJavaのコードインスペクションツールです。コードインスペクションとは、コードが正しく書けているかをチェックすることです。コンパイルは通るけど、明らかにバグが埋め込まれているというコードを検査するのに使われます。

FindBugsは、Javaのバグパターンをチェックしてくれる優れたツールです。Eclipseのプラグインとしても提供されていて、Javaプログラマには必須のツールだと言えます。
<a href="http://findbugs.sourceforge.net/index.html" target="_blank" class="extlink">FindBugs (Eclipse Plugin)</a>

本書は、FindBugsで検知されるバグパターンが起こる原因とその対処法を記したものになっています。FindBugsのバグパターンは結構な数があり、明らかにバグだと分かるものから一見すると正しいコードに見えるが実はバグといったものまで検知してくれます。

内容的には『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/249-1540022-3818763?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">Effective Java プログラミング言語ガイド</a>』に似たものになっています。ただし、本書の方はバグパターンについて本なので、プログラミング経験者なら「覚えがある」問題が多いと思います。

プログラミング初心者から、経験者まで幅広くおすすめできる一冊です。堅牢（ロバストネス）なコードで品質のよいプログラムを作りたい人は本書を一読すべきでしょう。『Effective Java』以来の、かなりおすすめな一冊です。
-----
EXTENDED BODY:
<h2>特長</h2>

<h3>なじみのあるバグばかり</h3>

どこかで味わったことがあるバグパターンばかりが載っています。もしかしたら今でもこんな風に書いているプログラマもいるかもしれません。誰かに指摘されるか、実際にバグが発生しなければ気づかなかった「<strong>実はバグが埋め込まれている</strong>」コードを回避するために本書は使えます。

<h3>バグのサンプルコードと修正後のサンプルコードが共に載っている</h3>

バグコードについていくら文章で書かれていても、実際にサンプルがなければ自分がソースコードを書いているときにバグだと気づくことは難しいでしょう。本書は、<strong>バグになるサンプルソースコード</strong>と<strong>修正後のサンプルソースコード</strong>の両方が載っています。

バグになる原因と、その解決策についてもしっかり理解が出来るように書かれているのでプログラミング経験が少なくとも理解することは容易だと思います。

<h2>参考</h2>

+ なにはなくともEffective Java
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank">Effective Java プログラミング言語ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894714361.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894714361" /></a></td><td valign="top" /><font size="-1">Joshua Bloch ジョシュア・ブロック <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />基本ライブラリの設計に興味を抱かせてくれる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />一ランク上のプログラミングをするために！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />翻訳が・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />翻訳も良いと思う<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />中級者以上の人向け<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ リファクタリングにデザインパターンを適用する
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282384/sorehabooks-22/" target="_blank">パターン指向リファクタリング入門~ソフトウエア設計を改善する27の作法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282384/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822282384.09._SCMZZZZZZZ_.jpg"   border="0" alt="4822282384" /></a></td><td valign="top" /><font size="-1">ジョシュア・ケリーエブスキー ウルシステムズ 小黒 直樹 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822282384&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />シンプルで、読みやすいコードを。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />良い設計はデザインパターンに行き着く<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282384/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Java言語を理解するにははずせない一冊
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713438/sorehabooks-22/" target="_blank">プログラミング言語Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713438/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894713438.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894713438" /></a></td><td valign="top" /><font size="-1">ケン アーノルド デビッド ホームズ ジェームズ ゴスリン <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713438&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   border="0" alt="star" />読了不可能と思います<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />中級者へのステップに最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />レベルアップ前の基礎固めとして最適な一冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />JAVA言語の原点だがプロ向き<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />必読<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713438/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 初心者から上級者にレベルアップするための一冊
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/" target="_blank">達人プログラマー―システム開発の職人から名匠への道</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894712741.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894712741" /></a></td><td valign="top" /><font size="-1">アンドリュー ハント デビッド トーマス Andrew Hunt <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894712741&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />初級PGから上級PGになるための本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />SEの基本が書かれてます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />達人エンジニアになる方法<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />プログラマーの為の自己啓発本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />達人プログラマー<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4756146554.01._PE_SCMZZZZZZZ_.jpg" border="0" alt="開発のプロが教える標準FindBugs完全解説">
-----
KEYWORDS:
FindBugs,プログラミング,開発,Java,バグ,パターン,プロ
-----


-----
CF50_CF_4: 宇野 るいも (著), arton (著)
CF50_URL: http://ecx.images-amazon.com/images/I/51Z902AAYKL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4756146554/sorehabooks-22/249-1540022-3818763?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: アスキー
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: オブジェクト開発の神髄〜UML 2.0を使ったアジャイルモデル駆動開発のすべて
BASENAME: uml_20
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 09/03/2005 09:14:44 AM
TAGS: これは読むべき,わかりやすい,アジャイル,オブジェクト指向がわかる,定番,良書
-----
BODY:
本書は、ソフトウェア開発における<strong>上流工程から設計</strong>までをカバーした本です。アジャイルにソフトウェア開発を行う方法について書かれています。要求をユースケースにまとめ、概念モデルを書き、ビジネスプロセスをモデル化して、設計を行う。一連のソフトウェア開発の流れに沿って、アジャイルに進めるにはどうしたらよいのか、どうUMLを活用したらよいのかについて説明されている本です。

筆者の経験則が随所にちりばめられており、経験の少ない人でも理解しやすくなっています。UMLを使ったモデリングの方法について書かれている本ですが、図の書き方については書かれていません。本書は<strong>使い方の本</strong>です。

非常に読みやすい内容で、納得できる部分も多いです。重要事項についてだけ書かれている、そんな感じのする書籍になっています。このボリュームで4,200円は安いと思います。
-----
EXTENDED BODY:
<h2>特長</h2>

<h3>UMLの書き方によらない本質</h3>

タイトルには『UML2.0を使ったアジャイルモデル駆動開発のすべて』とあり、よくあるUMLの書き方についての書籍かと思われるかもしれません。

確かに、UMLの記法は使われています。しかし、本書で使われているUMLは厳密なUMLとは少し違います。それは、本書がアジャイル開発を元に書かれているからです。使わないドキュメントに力を注ぐよりも、他にやるべきことがあるはずだというスタンスです。そのため、本書で扱われているすべてのことが、必要最低限の重要な事柄なのです。

『オブジェクト開発の神髄』とは、お客様の利益を生み出すための究極の開発方法論なのかも知れません。

<h2>参考</h2>

+ さらに設計よりにUMLを使う方法について書かれています。
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank">実践UML―パターンによる統一プロセスガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894713861.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894713861" /></a></td><td valign="top" /><font size="-1">クレーグ ラーマン Craig Larman 依田 光江 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713861&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />UMLの実践的な使い方を包括的に理解できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 実装よりの本です。結合度、凝集度といったOOPのキーワードについて深く知りたい人におすすめです。
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">アジャイルソフトウェア開発の奥義</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4797323361.09._SCMZZZZZZZ_.jpg"   border="0" alt="4797323361" /></a></td><td valign="top" /><font size="-1">ロバート・C・マーチン 瀬谷 啓介 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797323361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />いい本だとおもいます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />「奥義」の名に恥じない内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />体系だてられた経験的ガイドラインか。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ UMLを使ってモデルを書くときには「エッセンス」が大切です。
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107956/sorehabooks-22/" target="_blank">UML モデリングのエッセンス 第3版</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107956/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798107956.01._SCMZZZZZZZ_.jpg"   border="0" alt="4798107956" /></a></td><td valign="top" /><font size="-1">マーチン・ファウラー 羽生田 栄一 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798107956&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />UMLを仕事で使う前に<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107956/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822282376.01._PE_SCMZZZZZZZ_.jpg" border="0" alt="オブジェクト開発の神髄〜UML 2.0を使ったアジャイルモデル駆動開発のすべて">
-----
KEYWORDS:
オブジェクト指向,オブジェクト,アジャイル,UML2.0,モデル,神髄,モデル駆動
-----


-----
CF50_CF_4: Scott W.Ambler (著), 越智 典子 (著), オージス総研 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51SE5K29G8L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4822282376/sorehabooks-22/250-7226122-5222637?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 日経BP出版センター
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: UMLによるオブジェクト指向モデリングセルフレビューノート
BASENAME: umlによるオブジェクト指向モデリングセルフレビューノート
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 09/11/2005 05:35:28 PM
TAGS: UML,モデリング,定番
-----
BODY:
本書は、モデルを検証する視点を学ぶ本です。UMLで書かれたモデルの<strong>適切さ</strong>、<strong>正しさ</strong>をどのような観点で評価すればよいか学べます。

クラス図を描いたけど、本当にコレでよいのか。シーケンス図上ではこうなっているけど、コレで上手くいくのか。こんな疑問に答えてくれるのが本書です。主に<strong>クラス図</strong>、<strong>シーケンス図</strong>、<strong>ユースケース図</strong>について書かれています。

対象読者は、初心者モデラー、設計を行うSEです。プログラマーにはあまり関係ない内容だと思います。

「<strong>設計に正解はない</strong>」と言われますが、十分に適切であるかの評価は出来ます。それは本書を読めば分かるでしょう。
-----
EXTENDED BODY:
<h2>特長</h2>

<h3>モデルを検証する基本ワザ</h3>

モデルを検証する方法が3種類取り上げられています。<strong>読んでみる</strong>、<strong>数えてみる</strong>、<strong>絵として見る</strong>

それが正しいかどうかはテストすることで分かります。プログラムが正しいことを確認するのにテストを行うように、モデルが正しいことを確認するのにテストを行う必要があります。

本書は、上記の3つのワザを使って、<strong>モデルのテスト</strong>を行います。このワザを身に付ければ、人の書いたモデルを評価できますし、自分のモデルは洗練することが出来ます。

<h2>参考</h2>

+ モデルに本質を描くために参考になる本
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107123/sorehabooks-22/" target="_blank">思考系UMLモデリング即効エクササイズ―モデ力を鍛える13の自主トレメニュー</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107123/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798107123.09._SCMZZZZZZZ_.jpg"   border="0" alt="4798107123" /></a></td><td valign="top" /><font size="-1">渡辺 博之 芳村 美紀 敷山 喜与彦 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798107123&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />モデルで描くのは、対象の本質。本質を見抜く特訓で<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />例題が面白い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />試みは評価しますが<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />モデリングの自主トレ本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107123/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ UMLを実践で使うために
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank">実践UML―パターンによる統一プロセスガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894713861.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894713861" /></a></td><td valign="top" /><font size="-1">クレーグ ラーマン Craig Larman 依田 光江 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894713861&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />UMLの実践的な使い方を包括的に理解できる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ソフトウェア開発のなかでUMLをどう使うかが良くわかります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ モデリングのエッセンス教えます
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" target="_blank">UMLモデリングの本質</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822221180.09._SCMZZZZZZZ_.jpg"   border="0" alt="4822221180" /></a></td><td valign="top" /><font size="-1">児玉 公信 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822221180&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />チャレンジングな本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />UMLモデリングの窓から見た情報システム工学の展望<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />モデリングについて説得力のある解説が多々あります。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />この本を手がかりに、自分でやってみよう！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />これは「モデリング本」です。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221180/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4886487440.09._PE_SCMZZZZZZZ_.jpg" border="0" alt="UMLによるオブジェクト指向モデリングセルフレビューノート">
-----
KEYWORDS:
オブジェクト指向,モデリング,セルフレビュー,検証,UML,オブジェクトモデル
-----


-----
CF50_CF_4: 荒井 玲子 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/412Z4MH8MQL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4886487440/sorehabooks-22/250-8959429-3159445?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: ディー・アート
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: ユースケース入門―ユーザマニュアルからプログラムを作る
BASENAME: post_15
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 09/23/2005 10:59:21 AM
TAGS: わかりやすい,ユースケース,良書
-----
BODY:
本書は、<strong>ICONIX</strong>アプローチに焦点を当て、その中で<strong>ロバストネス分析</strong>の方法について解説している数少ない書籍です。

<strong>ICONIXアプローチ</strong>とは、ユースケースからオブジェクトモデルを導き出すアプローチのことです。ユースケースは、ユーザの視点で書かれたシステムが提供するサービスを表すものです。ユースケースを中心にモデルをおこすことで（<strong>ユースケース駆動</strong>）、要求が変化した場合にどこのモデルを変更すればよいか分かりやすくなります。

<strong>ロバストネス分析</strong>とは、ICONIXアプローチにおいて、ユーザの要求（What）をモデルの実装（How）に結びつける役割を持ちます。これにより、要求から実装、実装から要求のトレーサビリティが向上します。

本書は、あまり語られることの多くないICONIXアプローチとロバストネス分析を説明するものです。非常に本質を突いた説明がされていて、ユースケースの実用的な使い方についても学べます。

薄い本ながら（140ページ弱）、その内容の濃さは読んでみればわかるでしょう。非常にためになる良い本です。対象読者は、ユースケースについては知っているが使い方がいまいちよく分からない人、ロバストネス分析に興味がある人です。
-----
EXTENDED BODY:
<h2>特長</h2>

<h3>ユースケースはユーザマニュアルだ</h3>

ユースケースは、ユーザから見たシステムの機能を表します。それは、ユースケースを読めば、ユーザはシステムの使い方が分かるからです。逆に言うと、ユースケースは、読めばシステムが使えるようなものでなければならないと言うことです。

ユーザの視点からかかれるものがユースケースである、ということは、ユースケースによる設計は、ユーザの立場からシステムを作り上げていくということになります。ユースケースには、GUIの設計が含まれています。とはいっても、ユースケースにはそれがボタンなのかリストボックスなのかという、GUIの詳細は含まれていません。あくまでGUIの本質（何をするとどうなるのか）だけが書かれているべきです。

ユースケースを中心にシステムを設計していくことを<strong>ユースケース駆動設計</strong>といいます。ユーザの視点でシステムを設計するため、最終的な納品物ぶれがでにくいです。いいことずくめのように聞こえるユースケース駆動設計にも、問題はあります。システムの実装に落としにくいのです。

ユースケースはいわば<strong>ユーザの要求（What）</strong>です。そして、システムの実装は（How）です。この<strong>WhatとHowをつなげる役割</strong>をもつのが、<strong>ロバストネス分析</strong>なのです。

ロバストネス分析について、詳しく理解したい人は、この書籍を読むか、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797320192/sorehabooks-22/250-6449154-9758645?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">ワークブック形式で学ぶUMLオブジェクトモデリング―「ユースケース駆動」でソフトウェアを開発する</a>』がおすすめです。

<h2>特長</h2>

+ ユースケース駆動でソフトウェアを開発するには！
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797320192/sorehabooks-22/" target="_blank">ワークブック形式で学ぶUMLオブジェクトモデリング―「ユースケース駆動」でソフトウェアを開発する</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797320192/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4797320192.09._SCMZZZZZZZ_.jpg"   border="0" alt="4797320192" /></a></td><td valign="top" /><font size="-1">ダグ ローゼンバーグ ケンドール スコット Doug Rosenberg <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797320192&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />初学者の演習書としておすすめします<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />サンプルとして使えそう<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />視点を広げるために有効<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797320192/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ユースケースの本質をつかむ
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101273/sorehabooks-22/" target="_blank">ユースケース実践ガイド―効果的なユースケースの書き方</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101273/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798101273.09._SCMZZZZZZZ_.jpg"   border="0" alt="4798101273" /></a></td><td valign="top" /><font size="-1">アリスター コーバーン Alistair Cockburn ウルシステムズ株式会社 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798101273&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ユースケース作成にあたり、その精神を学ぶ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ユースケース記述を書くならこの本をまず読む<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ユースケースを書く技術を教える本の中で考えうる限り最高品質<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ユースケースという言語の"いい書き方"を学べます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />要件定義/基本設計を担当する方必見！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101273/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ とても読みやすく、実践的
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711869/sorehabooks-22/" target="_blank">ユースケースの適用:実践ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711869/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894711869.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894711869" /></a></td><td valign="top" /><font size="-1">ゲリ シュナイダー ジェイソン ウィンタース Geri Schneider <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894711869&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />オブジェクト指向の本ではない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ユースケースに特化した入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />実践的で為になります。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711869/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894713772.09._PE0_SCMZZZZZZZ_.jpg" border="0" alt="ユースケース入門―ユーザマニュアルからプログラムを作る">
-----
KEYWORDS:
ユースケース,ICONIX,ロバストネス分析,UML,入門,ユーザマニュアル,ユースケース駆動
-----


-----
CF50_CF_4: ダグ ローゼンバーグ (著), ケンドール スコット (著), Doug Rosenberg (原著), Kendall Scott (原著), 長瀬 嘉秀 (翻訳), 今野 睦 (翻訳), テクノロジックアート (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51VHFAW3PBL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894713772/sorehabooks-22/250-6449154-9758645?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: ピアソンエデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 夢を実現する戦略ノート―世界一のメンターが教える
BASENAME: 夢を実現する戦略ノート世界一のメンターが教える
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 10/04/2005 07:41:54 AM
TAGS: ビジネス,夢を実現する
-----
BODY:
本書は、「<strong>成功者が心得ていた戦略</strong>」について書かれた本です。戦略というと、とっつきにくいイメージがあるかもしれませんが、言ってしまえば「<strong>成功者の金言集</strong>」です。短い言葉でずっしりと心にとどまる言葉が、成功者の背景と結果とを元に書かれています。

「<strong>人生は旅である</strong>」。目的を知り、自分自身が成長し、他人の利益のために自分を犠牲にすることが成功する旅の3大原則と書かれています。

本書に書かれている言葉はすべてとてもいい言葉、人生を成功させるために必要な言葉ですが、こうも多くの言葉が詰め込まれていると、ちょっと安っぽく聞こえてしまう感じがしました。ただ、本書で言いたいことは首尾一貫していますので、読みやすいことは確かです。

成功とはなにか？そんな疑問を解決してくれる一冊になると思います。
-----
EXTENDED BODY:
<h2>特長</h2>

<h3>成功者の金言集=夢を実現する戦略</h3>

本書の特長は、成功者の言葉を学ぶことで、成長の度合いを加速させようという試みがされていることだと思います。人生を垂れ流しで生きるのと、成功した人がどんな心構えで人生を過ごしていたかを知ることでは、成長のスピードがまったく違うのです。

本書で何より感じたのが、「<strong>他人の利益のためにがんばること</strong>」が非常に大切だと言うことです。自分だけが成長することは成功ではない。周りが同じように伸びることで成功を感じれると言うことがとても印象に残っています。

<h2>参考</h2>

+ 周りとは一味違う成功を経験するには
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837956505/sorehabooks-22/" target="_blank">その他大勢から抜け出す成功法則</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837956505/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4837956505.09._SCMZZZZZZZ_.jpg"   border="0" alt="4837956505" /></a></td><td valign="top" /><font size="-1">ジョン・C.マクスウェル <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4837956505&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />牧師さんの啓発書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />いわゆる自己啓発書ですが<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />後半から良くなる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />僕にとって、自分を高める最高の本でした。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />散漫なれども心に響く言葉もあり<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4837956505/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 思い通りの未来にするには
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478733139/sorehabooks-22/" target="_blank">「夢のリスト」で思いどおりの未来をつくる!</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478733139/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4478733139.01._SCMZZZZZZZ_.jpg"   border="0" alt="4478733139" /></a></td><td valign="top" /><font size="-1">ブライアン・トレーシー <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4478733139&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />いろんな事を網羅しようとしすぎ？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />可も無く不可も無く...1200円は微妙<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />内容が細かく中身のこい本でした。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478733139/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 人生を成功に導くための７つの原則
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638015/sorehabooks-22/" target="_blank">7つの習慣―成功には原則があった!</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638015/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4906638015.09._SCMZZZZZZZ_.jpg"   border="0" alt="4906638015" /></a></td><td valign="top" /><font size="-1">スティーブン・R. コヴィー ジェームス スキナー Stephen R. Covey <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4906638015&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />私の人生を大きく変えた名著の中の名著！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />1人生観かわりますよ。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ふかっ！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />成功の原則？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />人生のバイブルだ<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638015/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4837956602.01._PE0_SCMZZZZZZZ_.jpg" border="0" alt="夢を実現する戦略ノート―世界一のメンターが教える">
-----
KEYWORDS:
夢,実現,戦略,ノート,世界一,メンター,成功,人生,旅
-----


-----
CF50_CF_4: ジョン・C.マクスウェル (著), 齋藤 孝 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/51VS0F34H7L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4837956602/sorehabooks-22/249-5154187-6356367?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 三笠書房
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: Linuxコマンド 覚書
BASENAME: linux
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 10/04/2005 10:31:22 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311151X/sorehabooks-22/250-7698465-6388212?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank"><img src="http://images-jp.amazon.com/images/P/487311151X.09._PE0_SCMZZZZZZZ_.jpg" border="0" alt="Linuxサーバ Hacks" /></a>
</p>

Unix,Linuxで使えるコマンドラインの覚書です。使えそうなコマンドがあれば、随時更新していこうと思います。もし、間違いなどありましたら、連絡いただけると助かります。

申し訳ないですが、コマンドを実行した結果は保証しません。ご自分の責任でお願いします。 <_(_ _)_>
-----
EXTENDED BODY:
<h2>覚書</h2>

<h3>目次</h3>

<ol>
<li><a href="#アクセスログの中からトップ１０のファイル名を表示する">アクセスログの中からトップ１０のファイル名を表示する</a></li>
<li><a href="#find で検索してマッチしたファイルを cp する">find で検索してマッチしたファイルを cp する</a></li>
<li><a href="#find で検索して、条件にマッチしたファイルだけ、ファイル名を変更する">find で検索して、条件にマッチしたファイルだけ、ファイル名を変更する</a></li>
<li><a href="#正規表現で検索して、マッチした部分だけを表示する">正規表現で検索して、マッチした部分だけを表示する</a></li>
</ol>

<h3 id="アクセスログの中からトップ１０のファイル名を表示する">アクセスログの中からトップ１０のファイル名を表示する</h3>

<pre class="console">for x in `cat access_log | awk '{print $7}' | sort | uniq`; do \ 
grep $x access_log | wc -l | tr -d '\n'; \
echo &quot;  $x&quot;; \
done | sort +0 -rn | head -10</pre>

for 文は「for <i>変数</i> in <i>単語リスト</i>; do <i>コマンド</i> done」の構文で使います。 <i>変数</i>はコマンドのところで使えます。$<i>変数</i> のようにすると呼び出すことができます。

「` `」で囲まれた部分は、囲まれた中をコマンドとして実行し、その結果を返すものです。 access_log を開いて、その中の空白で区切られた単語の区切りの7番目をawkによって抽出し( awk '{print $7}')、その結果を一意なものにしています。

上記のコマンドによってできた<i>単語リスト</i>（ここでは、ファイル名のリストを取得しているつもり)を繰り返し処理していきます。最初に、取得したファイル名を含む行数を「grep $x access_log | wc -l 」で取り出します。 wc の結果には改行が含まれるので 「tr -d '\n'」で改行を削除しています。「tr」コマンドの -d オプションは、その次にくる文字を削除するオプションです。オプションをつけずに2つ渡すと置換になります。

※<i> 「tr 'GET' 'POST'」とすると、最初の引数の各文字に対応する第2引数の文字が置換されます。つまり、 文章中に HTTP とある場合、この置換をかけると HSSP と変換されてしまいます。</i>

ファイル中に現れる行数を最初に出力した後で、 echo でファイル名を出力しています。forループを抜けた後、これまで処理した結果を sort しています。 +0 オプションは、1番目の単語でソートするオプションです。 +3 とすると 4単語目でソートすることになります。 -r オプションは、逆順（降順）でソートするオプションです。 -n は、ソート項目を数字として判断するオプションです。

最後に、「head -10 」として 最初の10件を取り出しています。

<h4>[参考]</h4>

Linuxサーバ Hacks P.16

<h3 id="find で検索してマッチしたファイルを cp する">find で検索してマッチしたファイルを mv する</h3>

<pre class="console">for x in `find . | grep ".*.txt"`; do \
echo "$x" "/home/hamasyou/$x"; \
done | xargs -n2 cp</pre>

「find」コマンドで、カレントディレクトリから .txtで終わるファイルを見つけ出します。見つかったファイルを echo で 元のファイル名 移動先 というように出力します。この結果を xargs で取り込み、 -n<i>数字</i> オプションによって引数を2つとるようにします。

これを cp コマンドに引き渡すことで、echo で出力した場所にファイルをコピーすることができました。

<h3 id="find で検索して、条件にマッチしたファイルだけ、ファイル名を変更する">find で検索して、条件にマッチしたファイルだけ、ファイル名を変更する</h3>

<pre class="console">find . | grep &quot;.*.java&quot; | sed -n 's/\(.*\)\.java/mv &amp; \1.vm/p' |sh</pre>

find と grep で、拡張子が .java のファイルを検索します。マッチしたファイル名を sed に送り込み、/s 関数を使ってファイル名を置換したものを mv コマンドに見えるように出力します。その結果を パイプでつないで sh に渡します。

sed の -n オプションは読み込んだ行を表示しないというオプションです。 s//p 関数で .java 拡張子を持つファイル名を、 「mv 読み込みファイル名 マッチした部分.vm」 という出力になるように置換して、 p コマンドで出力しています。

s関数中にある &amp; は 読み込んだファイル名を返す参照変数です。

<h4>[参考]</h4>

<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116823/sorehabooks-22/250-7698465-6388212?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">新TheUNIX SuperText[上]</a>

<h3 id="正規表現で検索して、マッチした部分だけを表示する">正規表現で検索して、マッチした部分だけを表示する</h3>

<pre class="console">find . | grep '.*.java' | xargs cat | sed -n 's/.*\(キーワード\).*/\1/p'</pre>

find と grep で拡張子が .java のファイルを取得し、ファイルの中身を cat で表示します。その結果を sed に送り、キーワードのみを後方参照として取得できるようにしておきます。 s//p 関数で中で \1 を使ってマッチしたキーワードのみを出力するようにしています。
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/487311151X.09._PE0_SCMZZZZZZZ_.jpg" style="float:left; margin:15px;" border="0" alt="Linuxサーバ Hacks">
-----
KEYWORDS:
Linux,Unix,サーバ,コマンド,Hack,覚書,テクニック
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: プログラミングの心理学―または、ハイテクノロジーの人間学
BASENAME: post_30
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 10/09/2005 04:20:31 PM
TAGS: 人間学,心理学,読み物
-----
BODY:
本書は、哲学や心理学といった学問の切り口からプログラミングという作業について書かれたものです。

<ul><li><strong>プログラミング</strong>とは何か？</li>
<li><strong>プロフェッショナルとアマチュアの違い</strong>は何か？</li>
<li><strong>プログラミングの学習方法</strong>について</li>
<li><strong>プログラミング言語による設計</strong>について</li>
</ul>

といったことについて書かれています。

実際にプログラミングをしている人も、プログラミングという作業がどういうものかということを考えるきっかけを与えてくれる本です。仕事で仕方なくプログラミングをしている人も、学校の宿題だからプログラミングしなければならない人も、趣味で好きでやっている人も、読む価値のある本田と思います。

読んですぐに実践で使える本ではありませんが、本書を読むことでプログラミングという作業への思いが変わると思います。
-----
EXTENDED BODY:
<h2>特長</h2>

<h3>縦書きなのがちょっと新鮮</h3>

本書の構成は、縦書きの2割りになっています。パッと見ると小説のようにも見えなくもありません。

この構成は好き嫌いが分かれるところだと思いますが、僕はちょっと読みにくい気がしました。読みなれている技術書とは違って本当に活字ばかりです。結構ボリュームもあるので、一気に読むのはつらいと思いますが、ちょびちょび読んでいると前半の内容を忘れてしまうと言うことにもなりかねません。

結構前後の話につながりがあるので、最初から最後まで読むといったタイプの本です。

<h3>プログラミングについて書かれているが、プログラムコードは一切出てこない</h3>

本書は本当に読み物です。プログラミングについて書かれていますが、プログラミングコードは一切でてきません。

読んですぐに現場で通用するような類の本ではないため、じっくりと腰をすえて読むのがいいと思います。心構えが洗練されること間違いナシです。

<h2>参考</h2>

+ ソフトウェア開発の永遠のバイブル
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716658/sorehabooks-22/" target="_blank">人月の神話―狼人間を撃つ銀の弾はない</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716658/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894716658.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894716658" /></a></td><td valign="top" /><font size="-1">Jr.,フレデリック・P. ブルックス Frederick Phillips,Jr. Brooks 滝沢 徹 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894716658&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   border="0" alt="star" />期待はずれ！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />学生にもおすすめ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />コンピューター業界のこの40年って??<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ブルックスの法則の本質を理解する<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />温故知新<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894716658/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 本物のハッカーはコンピュータの天才という意味です。
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434046683/sorehabooks-22/" target="_blank">ハッカーのたのしみ―本物のプログラマはいかにして問題を解くか</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434046683/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4434046683.09._SCMZZZZZZZ_.jpg"   border="0" alt="4434046683" /></a></td><td valign="top" /><font size="-1">ジュニア,ヘンリー・S. ウォーレン Jr.,Henry S. Warren 滝沢 徹 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4434046683&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />最後の頑張りに効きます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />えええ？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />Hackっていうのは、こういうコトさ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />コードの体脂肪率を極限まで絞る<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />歓喜に満ちてこの本を推奨する<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434046683/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ソフトウェアエンジニアリングによるソフトウェア開発
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282155/sorehabooks-22/" target="_blank">ソフトウエア開発プロフェッショナル</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282155/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822282155.09._SCMZZZZZZZ_.jpg"   border="0" alt="4822282155" /></a></td><td valign="top" /><font size="-1">スティーブ・マコネル 松原 友夫 山浦 恒央 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822282155&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ソフトウェア関わる人すべてにお勧め<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ソフトウェアエンジニアリングとは？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />「ニセ実力主義」の組織のすべての人へ<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282155/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4839915946.09._PE0_SCMZZZZZZZ_.jpg" border="0" alt="プログラミングの心理学―または、ハイテクノロジーの人間学">
-----
KEYWORDS:
プログラミング,心理学,25周年,ハイテクノロジー,人間学,ジェラルド・M・ワインバーグ,記念版
-----


-----
CF50_CF_4: ジェラルド・M. ワインバーグ (著), 木村 泉 (翻訳), 久野 靖 (翻訳), 角田 博保 (翻訳), 白浜 律雄 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51CG691XGBL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4839915946/sorehabooks-22/250-9930731-7444239?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 毎日コミュニケーションズ
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: JSF-カスタムコンポーネント覚書き
BASENAME: jsfカスタムコンポーネント覚書き
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 10/22/2005 01:44:09 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/249-1404088-2131559?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank"><img src="http://images-jp.amazon.com/images/P/4873111978.09._OU09_PE0_SCMZZZZZZZ_.jpg"  border="0" alt="JavaServer Faces完全ガイド" /></a>
</p>

JSFでカスタムコンポーネントを作るときの覚書きです。参考にした『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/249-1404088-2131559?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">JavaServer Faces完全ガイド</a>』は、ツリーコンポーネントをカスタムコンポーネントとして作る手順が載っていました。

ここでは、カスタムコンポーネントを作るときに必要となるパーツと、注意点などをまとめておこうと思います。カスタムコンポーネントは大きく、入力用のコンポーネントと出力用のコンポーネントの2つに分けれます。入力用のコンポーネントはリクエスト間で値の保存・読み込みやデコードレンダリングなどを行わなければなりません。出力用のコンポーネントの場合は、値を保持し、エンコードレンダリングを行うことで機能を表現します。

ここでは、出力用のコンポーネントの話をしています。説明が断片的なので、上記の本を読んだほうが手っ取り早いかも・・・ ^^;

<section>

<h4>[参考]</h4>

+ <a href="http://www.wakhok.ac.jp/~tomoharu/jsf2004/text/index_c11.html" target="_blnak" class="extlink">JSFによるWebアプリケーション開発/カスタム・コンポーネント</a>

</section>
-----
EXTENDED BODY:
<h2>作るもの</h2>

<table>
<tr><th>&nbsp;</th><th>コンポーネント</th><th>レンダラー</th><th>タグハンドラ</th></tr><tr><th>継承</th><td>UIComponentBase</td><td>Renderer</td><td>UIComponentTag<br />UIComponentBodyTag</td></tr><tr><th>famiry名</th><td>任意<br />（getFamiryメソッドで返すようにする）</td><td>任意<br />（コンポーネントとあわせる必要がある。faces-context.xmlに定義する)</td><td>不要</td></tr><tr><th>タイプ</th><td>完全クラス名。定数で定義するとよい。</td><td>完全クラス名。定数で定義するとよい。</td><td>getComponentTypeで使用するコンポーネントタイプを返す。<br />getRendererTypeで使用するレンダラータイプを返す。</td></tr><tr><th>実装するメソッド</th><td>コンポーネントで使用するプロパティのget/set等</td><td>encode系メソッド</td><td>setPropertiesメソッド、タグで受け取る属性のget/set等</td></tr><tr><th>その他</th><td>faces-context.xmlにcomponentの定義を記述</td><td>faces-context.xmlにrendererの定義を記述</td><td>TLDファイルを作成する</td></tr>
</table>

<h2>コンポーネントクラス</h2>

コンポーネントクラスはjavax.faces.component.UIComponentBaseを継承して作ります。似たようなコンポーネントを継承して作ってもいいでしょう。コンポーネントが特殊で、レンダラーの責務を別クラスにする必要がない場合は、コンポーネントの encode系メソッドを実装します。

コンポーネントは、famiryを定義します。同一のfamiry名を持つコンポーネントとレンダラがセットで使われます。コンポーネントのfamiryは getFamiryメソッドで返すようにします。

ValueBindingで値を受け取らない場合は、setValueBinding(String, ValueBinding)をオーバーライドして、特定の値しかValueBindingで受け取らないことを明示するとよい。

<section>

<h4>setValueBindingのオーバーライド例</h4>

<pre class="code"><code><span class="comment">// @Overwride</span>
<span class="keyword">public</span> <span class="keyword">void</span> setValueBinding(<span class="keyword">final</span> String name, ValueBinding bind) {
  <span class="keyword">if</span> (name.equals(<span class="literal">"value"</span>)) {
    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="literal">"valueは値結合でなければなりません。"</span>);
  }        
  <span class="keyword">super</span>.setValueBinding(name, bind);
}
</code></pre>

</section>

ValueBindingで受け取る値を返すgetメソッドは、getValueBindingメソッドを使って値結合を解決しなければならない。毎回、値結合を解決するとパフォーマンスが悪くなるので、キャッシュするようにする。

<section>

<h4>ValueBindingされている値のgetメソッド例</h4>

<pre class="code"><code><span class="keyword">public</span> Object getValue() {
  <span class="keyword">if</span> (<span class="keyword">this</span>.value != <span class="keyword">null</span>) {
    <span class="keyword">return</span> <span class="keyword">this</span>.value;
  } <span class="keyword">else</span> {
    ValueBinding bind = getValueBinding(<span class="literal">"value"</span>);
    <span class="keyword">if</span> (bind != <span class="keyword">null</span>) {
      <span class="keyword">this</span>.value = bind.getValue(getFacesContext()); 
      <span class="keyword">return</span> <span class="keyword">this</span>.value;
    } <span class="keyword">else</span> {
      <span class="keyword">return</span> <span class="keyword">null</span>;
    }
  }
}
</code></pre>

</section>

<h3>レンダラー</h3>

javax.faces.render.Rendererクラスを継承して作ります。主にオーバーライドして使うのは下のメソッド。

<ul><li>encodeBegin(FacesContext, UIComponent)</li>
<li>encodeChildren(FacesContext, UIComponent)</li>
<li>encodeEnd(FacesContext, UIComponent)</li>
<li>getRendersChildren()</li></ul>

レンダラーは、基本的には自分が処理できるコンポーネントだけをレンダリングします。ただし、&lt;h:dataTable&gt;などは、子に現れる&lt;h:column&gt;などのコンポーネントも処理します。子のコンポーネントの処理も自分で行う場合は、getRendersChildren()で <code>true</code> を返す必要があります。

子のコンポーネントを処理する場合に、例えば次のようにします。

<pre class="code"><code><span class="tag">&lt;h:dataTable <span class="attr">value=</span><span class="value">&quot;#{xxx}&quot;</span> <span class="attr">var=</span><span class="value">&quot;child&quot;</span>&gt;</span> 
  <span class="tag">&lt;h:column&gt;</span> 
    <span class="tag">&lt;h:outputText <span class="attr">value=</span><span class="value">&quot;#{child.name}&quot;</span>/&gt;</span> 
  <span class="tag">&lt;/h:column&gt;</span> 
<span class="tag">&lt;/h:dataTable&gt;</span>
</code></pre>

child の部分に格納される値をセットしておかなければならない場合があります。これは、リクエストにコンポーネントのvar変数が表す名前（ここではchild)をキーとして、値をセットしておくことで対応できます。

<section>

<h4>子コンポーネントに値を受け渡す方法</h4>

<pre class="code"><code>Map requestMap = facesContext.getExternalContext().getRequestMap(); 
requestMap.put(component.getVar(), component.getVarValue());
</code></pre>

</section>

エンコードは、encodeBegin、getRendersChildrenがtrueを返すときencodeChildren、encodeEndの順で処理されます。

<h3>タグハンドラー</h3>

タグにbodyが必要ない場合はjavax.faces.webapp.UIComponentTagクラスを継承します。例えば&lt;h:outputText /&gt; のようなタグの場合です。

タグにbodyが必要な場合は javax.faces.webapp.UIComponentBodyTagクラスを継承します。このクラスの方が多少パフォーマンスが悪いようです。bodyが不要の場合はUIComponentTagを使うようにします。

実装するメソッドは次の2つです。

<ul><li>getComponentType</li><li>getRendererType</li></ul>

前者はコンポーネントのタイプ（完全クラス名にしておくことをおすすめ）を返すようにします。後者はレンダラーのタイプ（完全クラス名にしておくことをおすすめ）を返すようにします。

さらに、タグハンドラーには、タグの属性の値を保持するプロパティを実装します。

<section>

<h4>タグハンドラの例1</h4>

<pre class="code"><code><span class="keyword">import</span> javax.faces.component.UIComponent;
<span class="keyword">import</span> javax.faces.context.FacesContext;
<span class="keyword">import</span> javax.faces.el.ValueBinding;
<span class="keyword">import</span> javax.faces.webapp.UIComponentTag;
 
<span class="keyword">public</span> <span class="keyword">class</span> MyComponentTag <span class="keyword">extends</span> UIComponentTag {
    
  <span class="keyword">private</span> String value;
  <span class="keyword">private</span> String var;
  <span class="keyword">private</span> String onmouseover;
 
  <span class="keyword">protected</span> <span class="keyword">void</span> setProperties(UIComponent component) {
    <span class="keyword">super</span>.setProperties(component);
        
    FacesContext context = getFacesContext();
    MyComponent mycomp = (MyComponent) component;
    <span class="keyword">if</span> (<span class="keyword">this</span>.value != <span class="keyword">null</span>) {
      <span class="keyword">if</span> (UIComponentTag.isValueReference(<span class="keyword">this</span>.value)) {
        ValueBinding bind =
          context.getApplication().createValueBinding(<span class="keyword">this</span>.value);
        component.setValueBinding(<span class="literal">"value"</span>, bind);
      } <span class="keyword">else</span> {
        mycomp.setValue(<span class="keyword">this</span>.value);
      }
    }
    <span class="keyword">if</span> (<span class="keyword">this</span>.var != <span class="keyword">null</span>) {
      mycomp.setVar(this.var);
    }
    <span class="keyword">if</span> (<span class="keyword">this</span>.onmouseover != <span class="keyword">null</span>) {
      <span class="keyword">if</span> (UIComponentTag.isValueReference(<span class="keyword">this</span>.onmouseover)) {
        ValueBinding bind =
          context.getApplication().createValueBinding(<span class="keyword">this</span>.onmouseover);
        component.setValueBinding(<span class="literal">"onmouseover"</span>, bind);
      } <span class="keyword">else</span> {
        mycomp.setOnmouseover(<span class="keyword">this</span>.onmouseover);
      }
    }
  }
 
  <span class="keyword">public</span> String getComponentType() {
    <span class="keyword">return</span> MyComponent.COMPONENT_TYPE;
  }
 
  <span class="keyword">public</span> String getRendererType() {
    <span class="keyword">return</span> MyComponentRenderer.RENDERER_TYPE;
  }
 
  <span class="keyword">public</span> String getOnmouseover() {
    <span class="keyword">return</span> onmouseover;
  }
 
  <span class="keyword">public</span> <span class="keyword">void</span> setOnmouseover(String onmouseover) {
    <span class="keyword">this</span>.onmouseover = onmouseover;
  }
 
  <span class="keyword">public</span> String getValue() {
    <span class="keyword">return</span> value;
  }
 
  <span class="keyword">public</span> <span class="keyword">void</span> setValue(String value) {
    <span class="keyword">this</span>.value = value;
  }
 
  <span class="keyword">public</span> String getVar() {
    <span class="keyword">return</span> var;
  }
 
  <span class="keyword">public</span> <span class="keyword">void</span> setVar(String var) {
    <span class="keyword">this</span>.var = var;
  }
}
</code></pre>
<div class="clear"></div>

</section>

注目するメソッドはsetProperties(UIComponent)です。このメソッドでは、タグの属性で指定された値をコンポーネントにセットする役割があります。　ValueBinding される可能性のある属性は、18行目のように UIComponentTag.isValueReference を使ってValueBinding形式かどうかを判定します。ValueBindingの場合は、FacesContextからValueBindingインスタンスを作成し、UIComponentのsetValueBindingを使ってセットします。

ただの値の場合には、コンポーネントのsetメソッドを使って直接セットします。

<h3>faces-context.xml と タグディスクリプションファイル（TLD)の作成</h3>

faces-context.xml に、カスタムコンポーネントとレンダラーの設定を書きます。TLDファイルには、タグハンドラの設定を書きます。

<h2>参考</h2>

+ 一番詳しい解説書
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/" target="_blank">JavaServer Faces完全ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4873111978.09._SCMZZZZZZZ_.jpg"   border="0" alt="4873111978" /></a></td><td valign="top" /><font size="-1">ハンス バーグステン Hans Bergsten 岩谷 宏 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873111978&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br />おすすめ平均  <img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />結局この本が必要になります<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />JSFを理解するための希少な本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   border="0" alt="star" />だめ翻訳<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif"   border="0" alt="star" />非技術者による翻訳？<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111978/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ リファレンスとしては秀逸
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008303/sorehabooks-22/" target="_blank">JSF(JavaServer Faces)によるWebアプリケーション開発―Java徹底活用</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008303/sorehabooks-22/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4798008303.09._SCMZZZZZZZ_.jpg"   border="0" alt="4798008303" /></a></td><td valign="top" /><font size="-1">川崎 克巳 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798008303&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br />おすすめ平均  <img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />JSF1.1に対応した初めての本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008303/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 概念を学ぶにはいい本
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732096/sorehabooks-22/" target="_blank">よくわかるJavaServer Facesのしくみ</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732096/sorehabooks-22/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4883732096.09._SCMZZZZZZZ_.jpg"   border="0" alt="4883732096" /></a></td><td valign="top" /><font size="-1">吉田 裕之 松塚 貴英 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4883732096&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br />おすすめ平均  <img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />コンパクトで分かり易い<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732096/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4873111978.09._OU09_PE0_SCMZZZZZZZ_.jpg" style="float:left; margin:15px;" border="0" alt="JavaServer Faces完全ガイド">
-----
KEYWORDS:
JSF,Java Server Faces,カスタムコンポーネント,タグハンドラ,レンダラー,作り方,覚書き
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: オブジェクト指向でなぜつくるのか―知っておきたいプログラミング、UML、設計の基礎知識―
BASENAME: uml_5
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 11/03/2005 08:04:01 PM
TAGS: UML,これは読むべき,なぜシリーズ,わかりやすい,オブジェクト指向,定番,良書
-----
BODY:
『なぜシリーズ』の第5弾となるオブジェクト指向に関する書籍です。「<strong>オブジェクト指向</strong>」というキーワードは一時期Buzzwordでした。それは、オブジェクト指向を<strong>プログラミングの道具</strong>として説明したり、<strong>概念</strong>だけを説明したり、<strong>UMLを使った設計技法</strong>のことを指して説明していたりと、知らない人が聞いたら混乱してしまうような説明しかされていなかったためです。

<blockquote>

実際には「オブジェクト指向が現実世界をそのままソフトウエアに表現する技術である」という説明は間違いです。

<cite>本書</cite>

</blockquote>

この説明が示すように、オブジェクト指向を本当に理解し、使いこなすには、オブジェクト指向に関する誤解を解く必要があると思います。本書はその手助けをしてくれる、正真正銘、本物のオブジェクト指向入門書です。

オブジェクト指向のキーワードに惑わされて疲れてしまった人、オブジェクト指向って難しそうだから敬遠していた人、オブジェクト指向を理解してみたい人、おすすめの一冊です。
-----
EXTENDED BODY:
<h2>特長</h2>

<h3>オブジェクト指向の概念</h3>

オブジェクト指向を理解するには、まず2つのことを理解しなければなりません。

<ol><li><strong>オブジェクト指向が現実世界をそのまま映し出すのは間違い</strong></li><li><strong>オブジェクト指向はソフトウェア開発を楽にするためのもの</strong></li></ol>

まずは、オブジェクト指向の間違った理解や誤解を解き放つことから始まります。これまでは、混乱し、間違った理解のまま進んでしまったため、いまいちオブジェクト指向が分からなかったのだと思います。本書では、すっきり分かりやすくオブジェクト指向の概念を説明します。

<h3>プログラミング技術としてのオブジェクト指向</h3>

カプセル化、ポリモーフィズム、継承のオブジェクト指向プログラミング（OOP）の三大要素を理解します。プログラミング言語に依存しない理解をすることで、どんなオブジェクト指向言語を使うときにも役に立つはずです。

<h3>応用技術としてのオブジェクト指向</h3>

プログラミング技術からスタートしたオブジェクト指向ですが、現在ではUMLや開発プロセスと言ったところにまで発展してきています。オブジェクト指向というキーワードを本当に理解するためには、OOPだけではなく応用技術でどのようにオブジェクト指向が語られているかを理解する必要があります。

<h2>参考</h2>

+ 言語はC++。だけどOOPを学ぶためには最高の一冊。
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" target="_blank">憂鬱なプログラマのためのオブジェクト指向開発講座―C++による実践的ソフトウェア構築入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4881356194.09._SCMZZZZZZZ_.jpg"   border="0" alt="4881356194" /></a></td><td valign="top" /><font size="-1">Tucker <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4881356194&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />オブジェクト指向を学ぶ上ではずせない一冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />もやもやがスッキリ。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />"オブジェクト指向"を理解する最短の道<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />javaプログラマーにもおすすめ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />C++使いには...<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4881356194/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ オブジェクト指向開発の奥義、教えます。
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank">アジャイルソフトウェア開発の奥義</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4797323361.09._SCMZZZZZZZ_.jpg"   border="0" alt="4797323361" /></a></td><td valign="top" /><font size="-1">ロバート・C・マーチン 瀬谷 啓介 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797323361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />いい本だとおもいます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />「奥義」の名に恥じない内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />体系だてられた経験的ガイドラインか。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ オブジェクト指向の神髄。すべてがここに詰まっています。現場向き
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282376/sorehabooks-22/" target="_blank">オブジェクト開発の神髄〜UML 2.0を使ったアジャイルモデル駆動開発のすべて</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282376/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4822282376.01._SCMZZZZZZZ_.jpg"   border="0" alt="4822282376" /></a></td><td valign="top" /><font size="-1">Scott W.Ambler <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822282376&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />中級者以上は仕事の振り返りに、初心者はガイドラインに<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />UMLに魂を入れる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />とってもお得。じっくり読んでオブジェクト開発を身につけよう<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282376/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4822281957.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="オブジェクト指向でなぜつくるのか―知っておきたいプログラミング、UML、設計の基礎知識―">
-----
KEYWORDS:
オブジェクト指向,なぜシリーズ,プログラミング,UML,設計,カプセル化,ポリモーフィズム,継承
-----


-----
CF50_CF_4: 平澤 章 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/51RDV5TN36L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/250-6063157-2299434?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: できる人のモデル思考力 -データモデルはこう使え!!
BASENAME: _-
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 11/12/2005 10:44:00 AM
TAGS: モデリング
-----
BODY:
「<strong>ビジネスマンだからこそモデリングを覚えるべきだ！</strong>」本書はこう主張しています。その根拠は、システムはビジネスでやりたいこと（What）を具現化したものだから、ビジネスマンがモデリングを覚えてシステムのモデルを整理できることが一番正確で一番早いから、です。

しかし現実はそうかんたんには行きません。ビジネスマンにはモデリングを覚えることよりももっと他に優先度の高いことがあります。だからこそ、RFP（提案依頼書）作成の代行サービスが流行っているのです。

本書は、そんな<strong>時間の無いビジネスマンに、モデリングという作業を分かりやすく短時間で身に着けてもらうための本</strong>になっています。SI業務でデータベース設計をやったことがある人や、要件定義やシステム分析をバリバリにやっているコンサルタントやSEには少し物足りない内容になっています。
-----
EXTENDED BODY:
<h2>特長</h2>

<h3>ビジネスのモデル化とはビジネスルールを記述すること</h3>

モデリングという作業は、モノを整理する作業です。モデリングは別にシステム開発だけにかかわる技術ではありません。色々なものを、色々なときにモデリングという作業を通して、整理し、理解することが出来るようになります。

システム開発にスポットを当てて考えてみると、ビジネスマンは何をモデリングするべきなのでしょうか？それは、<strong>ビジネスルール</strong>なのです。システムが行うことと言うのは、このビジネスルールを実行することに他なりません。

本書では、このビジネスルールのモデリングに焦点を当てています。ビジネスルールのモデリングをさらに詳細化すると、<strong>データ</strong>、<strong>プロセス</strong>、<strong>インターフェース</strong>に分けられます。この中で、<strong>データ</strong>に重きを置いて考える方法論に<strong>DOA（データ指向アプローチ）</strong>と言うものがあります。

本書の後半は、このDOAについての説明と、DOAの考え方でデータモデリングを行っていく実際の方法を説明しています。

<h2>参考</h2>

+ データモデリングをさらに詳しく勉強したいならコレ！
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank">業務別データベース設計のためのデータモデリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4534032501.09._SCMZZZZZZZ_.jpg"   border="0" alt="4534032501" /></a></td><td valign="top" /><font size="-1">渡辺 幸三 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4534032501&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />流行より汎用スキル<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />イカす、入門書。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />データモデリングの基礎から勉強できる。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />考え方だけでも理解してはいかが<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />データモデルの重要性は解ったけれど具体的にどうすればよいか解らない段階に必読の本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ データモデリングとは何か？もっと基礎的で、もっと実践的な解説はコレ！
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank">実践的データモデリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798103853.09._SCMZZZZZZZ_.jpg"   border="0" alt="4798103853" /></a></td><td valign="top" /><font size="-1">真野 正 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798103853&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />とてもわかりやすい！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />データモデリング、分かりやすい内容です<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ DOAの権威による、彼独特の表記法で学ぶ方法論
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109851/sorehabooks-22/" target="_blank">名人椿正明が教えるデータモデリングの"技"</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109851/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798109851.01._SCMZZZZZZZ_.jpg"   border="0" alt="4798109851" /></a></td><td valign="top" /><font size="-1">椿 正明 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798109851&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109851/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ データベース設計方法論。T字形ERモデルと言えば分かる人にはわかる
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" target="_blank">データベース設計論 T字形ER―関係モデルとオジブェクト指向の統合をめざして</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4883732169.09._SCMZZZZZZZ_.jpg"   border="0" alt="4883732169" /></a></td><td valign="top" /><font size="-1">佐藤 正美 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4883732169&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774124346.01._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="できる人のモデル思考力 -データモデルはこう使え!!">
-----
KEYWORDS:
モデル,Model,思考,指向,データモデル,ビジネスモデル,ERモデル,ビジネスルール
-----


-----
CF50_CF_4: 勝藤 彰夫 (著), 石ヶ森 正樹 (著)
CF50_URL: http://ecx.images-amazon.com/images/I/519BQ7CENAL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774124346/sorehabooks-22/250-2341411-0865020?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: 独習C#
BASENAME: c_2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 11/20/2005 08:52:59 AM
TAGS: 定番,独習シリーズ
-----
BODY:
「独習」シリーズのC#版です。独習シリーズを読んだことのある人なら、大体想像はつくのではないでしょうか。本書は、<strong>プログラミング言語C#の文法書</strong>です。

基本となる文法から入って、最後はライブラリの説明で締めくくるような感じです。他の言語を知らない人でも本書一冊でC#の文法は理解できるでしょう。JavaやC++の言語を知っている人からすると、差分だけ知りたいと思うでしょうが、本書は他の言語との対比等は一切書かれていません。

Amazonの書評でも書かれているように、プログラミング初心者はまず、C#で何が出来るのか、何をしたら良いのかを学べる書籍から入るほうが無難だと思います。プログラミングの経験はあるが、一から（文法から）C#を学びたいと言う人におすすめの本です。

中身は、非常に分かりやすく解説されています。日本語がおかしくて読み進められないということは無いはずです。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>Java言語との違い</h3>

C系言語は、プログラムの実行速度を重視して設計されています。そのため、C++やC#と言った、オブジェクト指向C系言語のメソッドオーバーライドのデフォルトはOffになっています。メソッドに明示的に virtual を付けることで、オーバーライド可能というマークを付けます。

このように、Java言語とは違った思想のC#ですが、他にも違った点がいくつかあります。

<ul><li>string型が基本データ型</li>
<li>配列の種類が3種類ある（単次元配列、多次元配列、ジャグ配列）</li>
<li>foreach ループが使える</li>
<li>参照パラメータ（ref）と出力パラメータ（out）を明示的に書ける</li>
<li>可変長引数</li>
<li>演算子のオーバーロード</li>
<li>仮想メソッドにはvirtualを付ける</li>
<li>構造体が使える</li>
<li>インデクサ</li>
<li>デリゲート</li>
<li>その他...</li></ul>

このように、Java言語とは違った要素がたくさんあるC#ですので、単純に言語を乗り換えようと思ったとき、差分だけの勉強だとちょっとつらいかなと思います。

<h2>参考</h2>

+ Microsoft による公式C#解説本です。読んで損無し！
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891002921/sorehabooks-22/" target="_blank">C#によるプログラミングWindows 上</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891002921/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4891002921.09._SCMZZZZZZZ_.jpg"   border="0" alt="4891002921" /></a></td><td valign="top" /><font size="-1">Charles Petzold 豊田 孝 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4891002921&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />待望の一冊と言えます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />最高のWINDOWプログラミングの本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ソースコードがたくさんのっている<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />Windowsプログラミングのバイブル<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />GDI+グラフィックスのバイブル<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891002921/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ C#という言語を根本から理解するための一冊
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311179X/sorehabooks-22/" target="_blank">プログラミングC#言語解説 第3版</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311179X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/487311179X.09._SCMZZZZZZZ_.jpg"   border="0" alt="487311179X" /></a></td><td valign="top" /><font size="-1">ジェシー リバティ Jesse Liberty 首藤 一幸 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487311179X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />C#の基本を理解している方へ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />C#の概念について知る<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />C#という言語に関して学ぶ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311179X/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ステップアップでC#を学べる本
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/483990992X/sorehabooks-22/" target="_blank">速効!図解プログラミング Visual C#.NET</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/483990992X/sorehabooks-22/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/483990992X.09._SCMZZZZZZZ_.jpg"   border="0" alt="483990992X" /></a></td><td valign="top" /><font size="-1">きたみ あきこ <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=483990992X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />入門用にとても良いです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />プログラムが始めてのひとにはよいです<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/483990992X/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/479810146X.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="独習C#">
-----
KEYWORDS:
独習,C#,文法,プログラミング,ハーバート・シルト
-----


-----
CF50_CF_4: ハーバート シルト (著), 矢嶋 聡 (監修), Herbert Schildt (原著), スリーエーシステムズ (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/514VQ892R8L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/479810146X/sorehabooks-22/249-9385891-4151556?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 図解・標準 最新Perl/CGIハンドブック―基礎からわかるインタラクティブWebサイトプログラミング手法
BASENAME: 図解標準_最新perlcgiハンドブック基礎からわかるインタラクティブwebサイトプログラミング手法
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 11/27/2005 10:16:42 AM
TAGS: CGI,Perl,わかりやすい,図解シリーズ,定番
-----
BODY:
秀和システムの「<strong>図解標準</strong>」シリーズ、Perl/CGI編。初心者には文法を覚えるための本として使えて、上級者には忘れたときに思い出すためのリファレンスとして使える本です。

初心者向けにどこが良いのか。それは、図入りなので、初めてでも動作がイメージできるところです。オライリー本を読んだことがあれば想像がつくと思いますが、やたら詳しいけど初めてきく話だからイメージがわきにくい。本書はそんな本ではないと言うことです。

上級者向けには何が良いのか。本書は、「この通りに進めると掲示板が出来上がります」のような何かを作り上げながら覚えていくといった類の本ではありません。ですので、あの文法ってどうだっけとか、この動作ってどうなるんだっけ、といったリファレンス的に使いたいときに便利になっています。

<strong>初心者本より詳しく、上級者本よりイメージがわきやすい</strong>、図解標準シリーズの「最新Perl/CGI」は結構使える本だと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>とにかくかゆいところに手が届く</h3>

「はじめての○○」、「ここからはじめる○○」というような、200ページ弱の入門書を2冊くらい買って、「よし！Perlを勉強するぞ」と意気込んだはいいが、いまいちパッとしない。

この原因はおそらく、動作がイメージできないからモヤモヤしてしまうのが原因だと思います。本書は、「<strong>図解標準</strong>」と銘打っているだけあって、図が多いです（図と言うより、動作例といった方が適切かもしれませんが）

何かを作りたいという明確な目標があり、そのサンプル例を探していると言うのなら、そういった例が載っている本を探すほうが懸命です。そうではなく、Perlって一体どうやって書けばいいんだ〜という理論から入りたい人は、本書がおすすめです。

<h2>参考</h2>

+ 初めてのラクダ本。Perlのことをちょっと知ってる人は、ここから入るのもいいかも
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111269/sorehabooks-22/" target="_blank">初めてのPerl</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111269/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4873111269.09._SCMZZZZZZZ_.jpg"   border="0" alt="4873111269" /></a></td><td valign="top" /><font size="-1">ランダル・L. シュワルツ トム フェニックス Randal L. Schwartz <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873111269&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />初めての人には難しいと思います。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />perlの基本を覚えるならこの本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />Still using for UNIX admin<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />CGI入門本の次に読む本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />Perlが便利なツールになる（そのための入門書）<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111269/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 通称ラクダ本。Perlのバイブルです。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873110963/sorehabooks-22/" target="_blank">プログラミングPerl〈VOLUME1〉</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873110963/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4873110963.09._SCMZZZZZZZ_.jpg"   border="0" alt="4873110963" /></a></td><td valign="top" /><font size="-1">ラリー ウォール ジョン オーワント トム クリスチャンセン <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873110963&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />CGIを自在にこなす第一歩の書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />Perl文法の仕組みを詳細に知りたい人の本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ラクダが踊る<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />Perlのバイブル！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />A good reference into chaos.<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873110963/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ クックブック vol.1。アレはどうやってやるんだろう？を解決します。
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112028/sorehabooks-22/" target="_blank">Perlクックブック〈VOLUME1〉</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112028/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4873112028.09._SCMZZZZZZZ_.jpg"   border="0" alt="4873112028" /></a></td><td valign="top" /><font size="-1">トム クリスチャンセン ネイザン トーキントン Tom Christiansen <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873112028&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />Perlプログラマ必携本（ご存知でしょうけど）<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112028/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ クックブック vol.2。DBへの接続等、ちょっと異色な部分を取り扱います。
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112036/sorehabooks-22/" target="_blank">Perlクックブック〈VOLUME2〉</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112036/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4873112036.09._SCMZZZZZZZ_.jpg"   border="0" alt="4873112036" /></a></td><td valign="top" /><font size="-1">トム クリスチャンセン ネイザン トーキントン Tom Christiansen <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873112036&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />あまり使わない部分が集まってしまった下巻<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112036/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798002070.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="図解・標準 最新Perl/CGIハンドブック―基礎からわかるインタラクティブWebサイトプログラミング手法">
-----
KEYWORDS:
Perl,CGI,ハンドブック,図解,標準,基礎,Webサイト,プログラミング,秀和システム
-----


-----
CF50_CF_4: 銀座企画 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/519NB1B7B4L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798002070/sorehabooks-22/249-3277344-6893969?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 秀和システム
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: ソフトウェアパターン入門―基礎から応用へ
BASENAME: ソフトウェアパターン入門基礎から応用へ
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 12/05/2005 12:58:10 AM
TAGS: デザインパターン,パターンがいっぱい
-----
BODY:
ソフトウェアパターンと聞いて何を思い浮かべますか？デザインパターン？アナリシスパターン？アーキテクチャパターン？このどれも本書でまとめられています。『ソフトウェアパターン入門』と題されていますが、その中身は非常に広範囲にわたっています。ソフトウェア開発の組織に関するパターンもまとめられています。

本書は、ソフトウェア開発におけるパターンと名のつくもののまとめ本です。詳しく知りたい場合は本書にまとめられている別の書籍へのポインタを利用することができます。

本書の執筆はパターンワーキンググループの方たちが行っています。著者がそれぞれ違うので、章の深さや切り口が様々です。それでいて非常に上手くまとめられているため、パターンという言葉に疲れてしまった人、頭がゴチャゴチャしている人におすすめの一冊です。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>イディオム</h3>

プログラミングに関するパターンの中に「イディオム」というものがあります。こういうときにはこう書くべしと言ったものをまとめたものです。Javaもイディオムに関する本がいくつかあります。有名なところで言うと『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/249-3277344-6893969?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">Effective Java プログラミング言語ガイド</a>』があります。私は知らなかったのですが、他にも洋書で『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0130850861/sorehabooks-22/249-3277344-6893969?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">Essential Java Style</a>』という本があるそうです。

イディオムは、プログラミング初心者にとって非常に重要なものです。私は、<strong>保守性の高いコードは良いコード</strong>だと考えています。プログラミング初心者は保守性の高いコードを書くのに苦労します。その一つに、「良い書き方が分からないから」という理由があるはずです。イディオムは、「良い書き方が分からない」を解決するパターンなのです。

本書はソフトウェア開発のパターンから、イディオムまで、様々な粒度のパターンがまとめられています。本書は、読む人の立場によって役に立つ情報が違いますが、管理者からプログラマまで広く役に立つ本です。

<h2>参考</h2>

+ Javaのイディオム集です。(洋書)
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0130850861/sorehabooks-22/" target="_blank">Essential Java Style: Patterns for Implementation (Ph/Ptr Essential Series)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0130850861/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/0130850861.01._SCMZZZZZZZ_.jpg"   border="0" alt="0130850861" /></a></td><td valign="top" /><font size="-1">Jeff Langr <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0130850861&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0130850861/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Java開発者必見！本書を理解することが中級レベルへの近道。
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank">Effective Java プログラミング言語ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894714361.09._SCMZZZZZZZ_.jpg"   border="0" alt="4894714361" /></a></td><td valign="top" /><font size="-1">Joshua Bloch ジョシュア・ブロック <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />J2EE版が欲しい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />繰り返し読む覚悟<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />翻訳が・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />中級レベル以上のJava開発者へ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />上を目指す人の基礎固め<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ J2EEのEffective Java版(洋書)
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321130006/sorehabooks-22/" target="_blank">Effective Enterprise Java</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321130006/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/0321130006.01._SCMZZZZZZZ_.jpg"   border="0" alt="0321130006" /></a></td><td valign="top" /><font size="-1">Ted Neward <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0321130006&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />図が一切なく、見ずらい<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321130006/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4883732150.01._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="ソフトウェアパターン入門―基礎から応用へ">
-----
KEYWORDS:
ソフトウェアパターン,パターン,入門,デザインパターン,フレームワークパターン,パターンワーキンググループ
-----


-----
CF50_CF_4: パターンワーキンググループ (著), 羽生田 栄一 (監修)
CF50_URL: http://ec2.images-amazon.com/images/I/51DJH9CPHFL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4883732150/sorehabooks-22/249-3277344-6893969?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: ソフトリサーチセンター
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 暗号と認証    基礎から身につくネットワーク技術シリーズ
BASENAME: post_27
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 12/29/2005 01:55:07 PM
TAGS: わかりやすい,セキュリティ,復号化,暗号化
-----
BODY:
インターネットが一般に普及し、ネットワークを使う機会が増えてきました。銀行の残高を確認するのにもインターネットを使うことができるようになって、セキュリティに関する問題も多くとりだたされています。

本書は、ネットワーク技術（主にセキュリティに関する技術）の基礎を解説したものです。タイトル（『暗号と認証』）が示すとおり、<strong>暗号化と認証の仕組み</strong>に焦点を絞った解説が行われています。

暗号化の目的はたった一つ、暗号の解き方を知らない第3者に内容が分からないようにすることです。クレジットカードの番号が誰にでも分かるようにネットワークを流れたら、知らない人に勝手に使われてしまって大問題です。

もう一つの話題である認証も、目的はたったの一つです。相手に自分は本物だと認めてもらうことです。ネットワーク上では、データの送信者が本当に認められた人かどうかを判断することは難しいのです。

本書は、暗号と認証について基礎から分かりやすく解説されています。暗号化の仕組み、暗号化技術の中身を丁寧に解説しています。また、認証を正しく行う方法について、詳しく丁寧に書かれています。

ネットワークについてはあまり知識がない人に、本書はおすすめです。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>暗号化技術の説明が詳しい</h3>

暗号方式の一つであるDES（デス)やRSAの暗号化の手順や復号化の手順が詳しく説明されています。また、PGPを使ったメールの暗号化の方法も書かれています。

<blockquote>

DESの処理が面白いのは、暗号化と復号が同じ処理になること。同じ処理回路（「ファイステル構造」と呼ばれる）に暗号データを通すと必ず復号できる。実際のDESでは、鍵を使う順番だけを逆にして、暗号化と同じ処理を16回繰り返す。こうすれば、暗号データが元データに戻る。

<cite>本書</cite>

</blockquote>

<h3>安全な通信を行うための4つの条件</h3>

安全な通信を行うためには下記の4つの条件が必要になります。それぞれがどんな内容なのかは、参考リンクをご覧ください。

<dl>
<dt>機密性</dt><dd>データが第3者に漏れないこと。また、漏れたとしても解読できないこと</dd>
<dt>完全性</dt><dd>途中で改ざんされないこと。また、改ざんされたとしても検知できること</dd>
<dt>認証</dt><dd>他人へのなりすましができないこと。また、なりすましを検知できること</dd>
<dt>否認防止</dt><dd>データを送ったことを認めさせることができること。また、自己証明できること</dd>
</dl>

<h4>参考</h4>
<a href="http://c4t.jp/introduction/cryptography/cryptography01.html" class="extlink">暗号入門：暗号とは？</a>

<h2>参考</h2>

+ 暗号化の世界へようこそ！
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322977/sorehabooks-22/" target="_blank">暗号技術入門-秘密の国のアリス</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322977/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4797322977.09._SCMZZZZZZZ_.jpg"   border="0" alt="暗号技術入門-秘密の国のアリス" /></a></td><td valign="top" /><font size="-1">結城 浩 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322977&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />暗号を学ぶならこの本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />基礎教養力アップに<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />文系エンジニア必読<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />暗号化技術入門は、よくわかる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />高評価の理由<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322977/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ フリーの暗号化ライブラリについての解説書。SSLを知らずして、暗号化を語ることなかれ！？
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065731/sorehabooks-22/" target="_blank">OpenSSL―暗号・PKI・SSL/TLSライブラリの詳細―</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065731/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4274065731.09._SCMZZZZZZZ_.jpg"   border="0" alt="4274065731" /></a></td><td valign="top" /><font size="-1">John Viega Matt Messier <br /><br />オーム社  2004-08<br />売り上げランキング : 57,403<br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&Version=2004-10-04&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4274065731&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />出直してきます(^^;<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065731/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ セキュアなプログラムを書くために守らなければならないこと(言語不問)
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22/" target="_blank">セキュアプログラミング―失敗から学ぶ設計・実装・運用・管理</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4873111757.09._SCMZZZZZZZ_.jpg"   border="0" alt="セキュアプログラミング―失敗から学ぶ設計・実装・運用・管理" /></a></td><td valign="top" /><font size="-1">マーク・G. グラフ ケネス・R.ヴァン ワイク Mark G. Graff <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873111757&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />全般を学ぶには、良い本でしょうか<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />内容は良いけど、訳が悪すぎ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />「プログラミング」といいつつもその周辺に関する注意が豊富な本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111757/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 気をつけること。守るべきこと。危ないこと。良いこと。
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004460/sorehabooks-22/" target="_blank">Writing Secure Code第2版〈上〉プログラマのためのセキュリティ対策テクニック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004460/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4891004460.09._SCMZZZZZZZ_.jpg"   border="0" alt="Writing Secure Code第2版〈上〉プログラマのためのセキュリティ対策テクニック" /></a></td><td valign="top" /><font size="-1">マイケル ハワード デイビッド ルブラン Michael Howard <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4891004460&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />Windowsプログラマ以外にもおすすめ<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4891004460/sorehabooks-22/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/4822212696.gif" border="0" alt="暗号と認証    基礎から身につくネットワーク技術シリーズ">
-----
KEYWORDS:
暗号,認証,ネットワーク,セキュリティ,仕組み,基礎,IPsec
-----


-----
CF50_CF_4: 日経NET WORK (編集)
CF50_URL: http://ec2.images-amazon.com/images/I/51C-LKFzxxL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4822212696/sorehabooks-22/249-3277344-6893969?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: HIBERNATE覚書き
BASENAME: hibernate
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 12/31/2005 08:11:38 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797330805/sorehabooks-22/503-4739464-7671922?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank"><img src="http://images-jp.amazon.com/images/P/4797330805.09._OU09_PE0_SCMZZZZZZZ_.jpg"  border="0" alt="HIBERNATE イン アクション" /></a>
</p>

Hibernate は O/R マッピングツールと呼ばれる、リレーショナルデータベースとオブジェクトモデルとの間を埋めるフレームワークです。

リレーショナルデータベースとオブジェクトモデルとのミスマッチには、下記のようなものがあります。

<ul><li>オブジェクトの粒度に関する問題</li><li>サブタイプ（継承）に関する問題</li><li>オブジェクトの同一性（識別子）に関する問題</li><li>オブジェクト同士の関連に関する問題</li><li>オブジェクトの検索に関する問題</li></ul>

Hibernateは、このようなミスマッチを解決する方法を提供します。

<blockquote>

リレーショナルシステムにおけるテーブル形式のデータ表現は、オブジェクト指向のJavaアプリケーションで使用されているオブジェクトのネットワークとは根本的に異なっている。この違いが、いわゆるオブジェクト/リレーショナルパラダイムのミスマッチだ。

<cite>『Hibernate イン アクション』はじめに より</cite>

</blockquote>
-----
EXTENDED BODY:
<h2>Hibernateのアーキテクチャ</h2>

Hibernateが提供するインターフェースは、大きく分けて4つに分類できます。

<ul><li>CRUDとクエリ操作を行うためのインターフェース</li><li>Hibernateを設定するためのインターフェース</li><li>イベントをハンドリングするためのコールバックインターフェース</li><li>マッピング機能を拡張するためのインターフェース</li></ul>

<h3>CRUDとクエリ操作を行うためのインターフェース</h3>

<table>
<tr>
<th>インターフェース/クラス</th>
<th>説明</th>
</tr>
<tr>
<td>Session</td>
<td><ul><li>コネクションとトランザクションの概念を扱うもの</li><li>Sessionインスタンスの生成と破棄にはコストはかからない</li><li>通常、一度のリクエストにつきひとつのSessionを生成する</li><li><strong>スレッドセーフではない</strong></li></ul></td>
</tr>
<tr>
<td>SessionFactory</td>
<td><ul><li>Sessionインターフェースを返す</li><li>Sessionと比べ、生成にコストがかかる</li><li>通常、アプリケーション全体でひとつのインスタンスを使いまわす</li><li><strong>データベースひとつにつき、ひとつのSessionFactoryインスタンスを用意する。複数のデータベースを利用する際には、それだけのSessionFactoryインスタンスが必要</strong></li><li>マッピングファイルを保持する</li></ul></td>
</tr>
<tr>
<td>Transaction</td>
<td><ul><li>トランザクション実装を抽象化する</li></ul></td>
</tr>
<tr>
<td>Query</td>
<td><ul><li>データベースへのクエリ発行を行う</li><li>クエリはネイティブのSQLかHQLで記述される</li><li>生成したSession以外では使えない</li></ul></td>
</tr>
<tr>
<td>Criteria</td>
<td><ul><li>データベースへのクエリをオブジェクト表現を使って生成する</li></ul></td>
</tr>
</table>

<h3>Hibernateを設定するためのインターフェース</h3>

<table>
<tr>
<td>Configuration</td>
<td><ul><li>Hibernateのプロパティファイル(デフォルトはhibernate.cfg.xml)を読み込んで、SessionFactoryを生成する</li></ul></td>
</tr>
</table>

<h3>イベントをハンドリングするためのコールバックインターフェース</h3>

<table>
<tr>
<td>Lifecycle</td>
<td><ul><li>永続化オブジェクトが実装する</li><li>自身のライフサイクルイベントの通知を受け取ることができる</li><li>Hibernate特有のインターフェースのため、移植性が低下する</li></ul></td>
</tr>
<tr>
<td>Validation</td>
<td><ul><li>永続化オブジェクトが実装する</li><li>永続化オブジェクトのinsert時、update時に呼び出される</li><li>Hibernate特有のインターフェースのため、移植性が低下する</li></ul></td>
</tr>
<tr>
<td>Interceptor</td>
<td><ul><li>Hibernate特有のインターフェースだが、永続化オブジェクトには実装せずに、インタセプタ用のクラスに実装する</li><li><strong>イベントのコールバックを受け取るためには、通常はこのインターフェースを利用する</li></ul></td>
</tr>
</table>

<h3>マッピング機能を拡張するためのインターフェース</h3>

<table>
<tr>
<td>UserType</td>
<td><ul><li>ユーザ定義型を実装する場合に利用する</li></ul></td>
</tr>
<tr>
<td>CompositeUserType</td>
<td><ul><li>ユーザ定義型を実装する場合に利用する</li></ul></td>
</tr>
<tr>
<td>拡張ポイント</td>
<td><ul><li>主キーの生成時(IdentifierGenerator)</li><li>SQL方言(Dialect)</li><li>キャッシュ(Cache、CacheProvider)</li><li>JDBCコネクション管理(ConnectionProvider)</li><li>トランザクション管理(TransactionFactory、Transaction、TransactionManagerLookup)</li><li>O/Mマッピング(ClassPersister)</li><li>プロパティアクセス(PropertyAccessor)</li><li>プロキシ(ProxyFactory)</li></ul></td>
</tr>
</table>

<h2>バグ？</h2>

<h3>PostgreSQLでスキーマ指定すると...</h3>

<dl>
<dt>環境</dt>
<dd><ul><li>PostgreSQL8.0.0</li><li>Hibernate3.1</li></ul></dd>
</dl>

上記の環境で、PostgreSQLに<em>public以外</em>のスキーマでテーブルを作成したときちょっとハマったのでメモ。

<h4>現象</h4>

<ul><li>マッピングファイルにschemaを指定するだけでは、Hibernateで構築されるSQL文にスキーマが記述されない</li><li>PostgreSQL8.0でスキーマを明示した場合、PostgreSQLがテーブル名・カラム名を小文字に自動変換して解釈する</li></ul>

<h4>失敗時にHibernateが構築したSQL文</h4>

<pre>Hibernate: select max(MESSAGE_ID) from <em>MESSAGE</em>
Caused by: java.sql.SQLException: ERROR: <em>relation &quot;message&quot; does not exist</em></pre>

<h4>対策</h4>

<ul><li>hibernate.cfg.xmlにdefault_schemaを指定する</li><li>テーブル名・カラム名をダブルクウォート(&quot;&quot;)で囲む</li></ul>

Hibernateの設定ファイルにデフォルトスキーマを指定しなければいけない。また、スキーマ名を指定してSQLを実行すると(例：select * from hibernate.MESSAGE)、PostgreSQLがテーブル名・カラム名を小文字で解釈してしまう。回避するためには、ダブルクウォートで囲む必要がある。

<p class="option">Hibernateのマッピングファイルで、カラム名・テーブル名を「`（バッククウォート）」で囲むことで、SQL文生成時に Hibernate がダブルクウォートを自動で付けてくれます。</p>

Hibernate設定ファイルです。

<section>

<h4>hibernate.cfg.xml</h4>

<pre class="code"><code><span class="tag">&lt;hibernate-configuration&gt;</span> 
 <span class="tag">&lt;session-factory&gt;</span>     
  <span class="rem">&lt;!-- Database connection settings --&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;connection.driver_class&quot;</span>&gt;</span> 
   org.postgresql.Driver 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;connection.url&quot;</span>&gt;</span> 
   jdbc:postgresql://localhost:5432/hibernate_db 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;connection.username&quot;</span>&gt;</span>postgres<span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;connection.password&quot;</span>&gt;</span>postgres<span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;default_schema&quot;</span>&gt;</span>hibernate<span class="tag">&lt;/property&gt;</span> 
</code></pre>

</section>

マッピングファイルです。

<section>

<h4>マッピングファイル(*.hbm.xml)</h4>

<pre class="code"><code><span class="tag">&lt;hibernate-mapping&gt;</span> 
  <span class="tag">&lt;class <span class="attr">name=</span><span class="value">&quot;com.hamasyou.hibernate.hello.Message&quot;</span> 
    <span class="attr">schema=</span><span class="value">&quot;hibernate&quot;</span> 
    <span class="attr">table=</span><span class="value">&quot;&amp;quot;MESSAGE&amp;quot;&quot;</span>&gt;</span> 
    <span class="tag">&lt;id <span class="attr">name=</span><span class="value">&quot;id&quot;</span> <span class="attr">column=</span><span class="value">&quot;&amp;quot;MESSAGE_ID&amp;quot;&quot;</span>&gt;</span> 
      <span class="tag">&lt;generator <span class="attr">class=</span><span class="value">&quot;increment&quot;</span>/&gt;</span> 
    <span class="tag">&lt;/id&gt;</span> 
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;text&quot;</span> <span class="attr">column=</span><span class="value">&quot;&amp;quot;MESSAGE_TEXT&amp;quot;&quot;</span>/&gt;</span> 
    <span class="tag">&lt;many-to-one  
      <span class="attr">name=</span><span class="value">&quot;nextMessage&quot;</span>  
      <span class="attr">column=</span><span class="value">&quot;&amp;quot;NEXT_MESSAGE_ID&amp;quot;&quot;</span> 
      <span class="attr">cascade=</span><span class="value">&quot;all&quot;</span>/&gt;</span> 
    <span class="tag">&lt;/class&gt;</span> 
<span class="tag">&lt;/hibernate-mapping&gt;</span>
</code></pre>

</section>

&amp;quot;と書いてある部分を「`(バッククウォート）」に変更することで、Hibernate の機能で引用符を付けてくれるようになります。

Hibernateが生成したSQL文

<pre>Hibernate: select max(&quot;MESSAGE_ID&quot;) from hibernate.&quot;MESSAGE&quot;
Hibernate: insert into hibernate.&quot;MESSAGE&quot; (&quot;MESSAGE_TEXT&quot;, &quot;NEXT_MESSAGE_ID&quot;, &quot;MESSAGE_ID&quot;) values (?, ?, ?)</div>

<h2>参考</h2>

+ JSF、SpringFramework、Hibernateの3つを同時に学べる良書
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/ref=nosim/" target="_blank">Light Weight Java―JSF/Hibernate/SpringによるフレームワークでWebアプリケーションの開発効率向上</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4839917779.01._SCMZZZZZZZ_.jpg"   border="0" alt="Light Weight Java―JSF/Hibernate/SpringによるフレームワークでWebアプリケーションの開発効率向上" /></a></td><td valign="top" /><font size="-1">岡本 隆史 金子 崇之 吉田 英嗣 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars"   />Java最新技術が手っ取り早く分かる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars"   />ＪＳＦがメインの本。HibernateやSpringには期待しないこと。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars"   />システム開発のコツをまとめてあります<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 薄いながらもよくまとまっています
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/ref=nosim/" target="_blank">Hibernate</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/487311215X.09._SCMZZZZZZZ_.jpg"   border="0" alt="Hibernate" /></a></td><td valign="top" /><font size="-1">James Elliott <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif" alt="stars"   />物足りない・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars"   />コンパクトにまとまっている良書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ProシリーズのHibernate本。おそらくかなりの良書だと思われます（読んでない^^;)
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1590595114/sorehabooks-22/ref=nosim/" target="_blank">Pro Hibernate 3 (Expert's Voice)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1590595114/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/1590595114.01._SCMZZZZZZZ_.jpg"   border="0" alt="Pro Hibernate 3 (Expert's Voice)" /></a></td><td valign="top" /><font size="-1">Dave Minter Jeff Linwood <br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1590595114/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ProfessionalシリーズのHibernate本。こちらもかなりの良書だと思われます
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764576771/sorehabooks-22/ref=nosim/" target="_blank">Professional Hibernate (Programmer to Programmer)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764576771/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/0764576771.01._SCMZZZZZZZ_.jpg"   border="0" alt="Professional Hibernate (Programmer to Programmer)" /></a></td><td valign="top" /><font size="-1">Eric Pugh Joseph D. Gradecki <br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764576771/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797330805.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="HIBERNATE イン アクション">
-----
KEYWORDS:
Hibernate,O/Rマッピング,インピーダンスミスマッチ,覚え書き
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 失敗百選 41の原因から未来の失敗を予測する
BASENAME: _41
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 01/14/2006 03:50:23 PM
TAGS: 失敗から学ぶ,良書
-----
BODY:
本書は、過去いろいろな原因が元で失敗した事例を178とりあげ、失敗の原因を41個にまとめあげたものです。「人は誰でも同じような失敗を犯す。」その<strong>原因は実はたったの41個に分類できる</strong>のです。

<blockquote>

親はいつも「道を飛び出したら危ない」と子供を注意する。上司は「今はあのときの景気の潮目と似ている」と部下に警告する。なぜならば、注意する自分も同じような失敗をしたからである。それならば、その「同じような」「あの時と似ている」という失敗を列記して分類できないだろうか。分類された失敗群を暗記できれば、失敗予知能力が高まるはずである。

<cite>本書 まえがき</cite>

</blockquote>

失敗は買ってでも学べ。大先輩にこう言われたことがあります。失敗は起きないと学べない。でも、自分で失敗するのはマイナスになる。だから、人の失敗を見て自分は学べ。というのです。

本書は、過去に起こった178の失敗事例を元に、たったこんな間違いが大きな事故につながったということを説明しています。その原因は41種類に分類され、今後私たちが生活していくうえで必要な予防策になってくれるはずです。

本書は、コンピュータに関する本ではありません。単純なビジネス書というのとも違うと感じました。どちらかといえば工学系の事例が多いです。失敗の大切さを理解している人におすすめです。
-----
EXTENDED BODY:
<h2>特徴</h2>

過去起こった失敗は、41個の原因のどれかが元で引き起こされているという話です。本書は、別に41個に分類できたからすごいというような話ではなく、失敗は元をただせば同じような原因で起こっているというのを伝えようとしているのです。

例えば、「技術的な要因だが、普通は副次的に考えている使用時の設計要因  [冗長系の非動作] 待機系不良」 に挙げられている事象『東証の株式売買システムが稼動せず (1997)』 では、株の銘柄を注文取消しするプログラムにバグがあり、システムが止まってしまった。バックアップ用の予備機に切り替わったが同じプログラムを使っていたため、予備機のシステムも止まってしまったということが起こった。

このような待機系不良が原因で起こった失敗というのはかなり多いのではないでしょうか。この失敗から学べることは、正常系と予備系で同じ環境のマシンを用意しておくことは間違いなのかもしれないということです。もちろん、この予備機が正常系マシンが物理的に壊れてしまった場合に取り替えられることを意識していたのなら、同じ環境を用意することは当然正しいです。

このように、過去に起こった失敗から学べることは、非常に多いと思います。何が悪かったのか。何をどうすればよかったのか。こう考えることも出来たのではないか。こういうことが起こったらどうしようか。等

失敗から学べることは、とても多く、とても貴重な経験になります。人は失敗を犯すものなのです。

<h2>参考</h2>

+ 失敗学のすすめ。文庫本
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4062747596/sorehabooks-22/ref=nosim/" target="_blank">失敗学のすすめ</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4062747596/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4062747596.01._SCMZZZZZZZ_.jpg"   border="0" alt="失敗学のすすめ" /></a></td><td valign="top" /><font size="-1">畑村 洋太郎 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4062747596&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />失敗を繰り返さないために<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />文系人間ほど、営業マンほど役に立つ本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />とてもよかったです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />とても整理されていました<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4062747596/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 失敗学のすすめ。
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/406210346X/sorehabooks-22/ref=nosim/" target="_blank">失敗学のすすめ</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/406210346X/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/406210346X.09._SCMZZZZZZZ_.jpg"   border="0" alt="失敗学のすすめ" /></a></td><td valign="top" /><font size="-1">畑村 洋太郎 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=406210346X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />失敗を活かすために<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />読んで損はない本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />判断の根拠と、失敗の活用<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />失敗は成功の母（マザー）<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />「成功の母」から目をそらすな<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/406210346X/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 経営における失敗学を学ぶ本
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534033907/sorehabooks-22/ref=nosim/" target="_blank">社長のための失敗学</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534033907/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4534033907.09._SCMZZZZZZZ_.jpg"   border="0" alt="社長のための失敗学" /></a></td><td valign="top" /><font size="-1">畑村 洋太郎 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4534033907&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />「失敗」を読み物として楽しめる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />備えあれば、憂いなし・・という。社長ばかりでなく、会社というものに関わる人！読みまし<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534033907/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 失敗をいかにして学ぶか
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4163585303/sorehabooks-22/ref=nosim/" target="_blank">決定版 失敗学の法則</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4163585303/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4163585303.09._SCMZZZZZZZ_.jpg"   border="0" alt="決定版 失敗学の法則" /></a></td><td valign="top" /><font size="-1">畑村 洋太郎 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4163585303&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />主張も収斂してきて、記述も簡潔<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />機械工学帝国主義<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />失敗を活かすという意味が解った。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />この仕事観は、実際に役立つ！！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />若い人たちにこそ読んでほしい。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4163585303/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4627664710.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="失敗百選 41の原因から未来の失敗を予測する">
-----
KEYWORDS:
失敗百選,失敗,失敗学,原因,予測,未来
-----


-----
CF50_CF_4: 中尾 政之 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/41Q4JJT8B1L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4627664710/sorehabooks-22/249-3277344-6893969?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 森北出版株式会社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: エンタープライズ アプリケーションアーキテクチャパターン
BASENAME: post_22
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 02/05/2006 11:43:19 AM
TAGS: J2EE,これは読むべき,デザインパターン,定番,良書
-----
BODY:
本書は、業務アプリケーションのアーキテクチャパターンをカタログ化したパターン本です。アーキテクチャ設計において考えなければならない必須要素（下記箇条書き）に関して、例を示しながら説明しています。

<ul><li>レイヤ化</li><li>プレゼンテーション層の構築</li><li>ビジネスロジック層の構築</li><li>インテグレーション層（O/Rマッピング）の構築</li><li>分散環境に関するパターン</li><li>セッションステートパターン</li><li>基本パターン</li></ul>

アーキテクチャは開発者の実作業に大きな影響を与えます。良いアーキテクチャは、システムに要求されている事柄を容易に構築できる環境を提供します。悪いアーキテクチャは一つのことを成し遂げるのに苦労を伴います。

良いアーキテクチャか悪いアーキテクチャかというのは、設計の良し悪しで決まることもありますが、ほとんどはそうではないと思います。アーキテクチャの良し悪しは、そのアーキテクチャの<strong>使いどころ</strong>がぴったりはまっているかどうかだと思います。

本書は、それぞれのアーキテクチャパターンの長所・短所、使いどころ、使用上の注意などがまとめられています。初めてアーキテクチャ設計に携わるような開発者に是非とも読んでもらいたい一冊です。
-----
EXTENDED BODY:
<h2>特徴</h2>

本書は、業務アプリケーションのアーキテクチャパターンをカタログ化したものです。Amazonのカスタマーレビューにも書いてある通り、目新しいアーキテクチャは出てきません。業務アプリケーションのアーキテクチャ設計を経験した人なら誰でも考えたことがあるような設計が載っているだけです。

とはいえ、アーキテクチャ設計のパターンをカタログ化し、それぞれの長所・短所、注意点、使いどころ等がまとめられていますので、手元においておく価値は十分にあります。ただし、邦訳は日本語がちょっとアレなので（人のことは言えませんが・・・^^;）、英語が苦にならない人は原著をおすすめします。『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321127420/sorehabooks-22/250-8893783-2139434?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">Patterns of Enterprise Application Architecture</a>』

<h3>どこかで見たことあるぞ！</h3>

本書にまとめられているパターンは、アーキテクチャ設計に興味のある人ならどこかで目にしたことがあるものが多いと思います。特に目新しいパターンはありません。

レイヤ化のパターンを例にとると、プレゼンテーション層・ビジネスロジック層・データソース層に分けるということが書いてあります。3階層のアーキテクチャというのはどこかで聞いたことがあるのではないでしょうか？このパターンを使うときは、ビジネスロジック層とデータソース層はプレゼンテーション層に依存してはいけないと言う明確なルールがありますと書かれています。

こういった、各パターンについて、使い方や注意点が<strong>マーチン・ファウラー</strong>によってまとめられていると言うところに、本書の価値があるのだと思います。

<h2>参考</h2>

+ J2EEパターンの優良本
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/ref=nosim/" target="_blank">J2EEパターン 第2版</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4822282287.01._SCMZZZZZZZ_.jpg"   border="0" alt="J2EEパターン 第2版" /></a></td><td valign="top" /><font size="-1">Deepak Alur John Crupi Dan Malks <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822282287&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />久々に良いJ2EEの翻訳書にめぐり合えました<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />手抜きのないリファレンス書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />すきのないJavaデザインパターンの解説書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 業務アプリケーション開発の異端児?
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321200683/sorehabooks-22/ref=nosim/" target="_blank">Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321200683/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/0321200683.01._SCMZZZZZZZ_.jpg"   border="0" alt="Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions" /></a></td><td valign="top" /><font size="-1">Gregor Hohpe Bobby Woolf Kyle Brown <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=0321200683&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />類例のない一冊。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif"   border="0" alt="star" />表紙のデザインは住吉大社の橋<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321200683/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ パターンを使って設計をリファクタリングする本
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282384/sorehabooks-22/ref=nosim/" target="_blank">パターン指向リファクタリング入門~ソフトウエア設計を改善する27の作法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282384/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4822282384.01._SCMZZZZZZZ_.jpg"   border="0" alt="パターン指向リファクタリング入門~ソフトウエア設計を改善する27の作法" /></a></td><td valign="top" /><font size="-1">ジョシュア・ケリーエブスキー 小黒 直樹 村上 歴 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4822282384&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />解説が丁寧<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />デザインパターンに違和感を抱いてる人にはオススメ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />シンプルで、読みやすいコードを。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />良い設計はデザインパターンに行き着く<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282384/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4798105538.01._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="エンタープライズ アプリケーションアーキテクチャパターン">
-----
KEYWORDS:
Patterns of Enterprise Application Architecture,エンタープライズアプリケーションアーキテクチャパターン,マーチン・ファウラー
-----


-----
CF50_CF_4: マーチン・ファウラー (著), 長瀬 嘉秀 (監訳), 株式会社 テクノロジックアート (翻訳)
CF50_URL: http://ecx.images-amazon.com/images/I/51TVM1CFHKL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/250-8893783-2139434?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Write Great Code〈Vol.1〉ハードウェアを知り、ソフトウェアを書く
BASENAME: write_great_codevol1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 02/12/2006 12:40:51 PM
TAGS: "Write Great Codeシリーズ",定番,良書
-----
BODY:
「<strong>普通のやつらの下を行け</strong>」。最近は、プログラミング言語が発達し、低レベルな層のことを考えなくてもコーディングができるようになってきました。もちろん、アセンブラやC言語をバリバリ使いこなして、ハードウェアに近いところの制御プログラムを書いている人もいることは分かっています。でも、低レベルな層をちゃんと理解してコーディングを行える人はどれくらいいるのでしょうか？

本書は、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/1593270038/sorehabooks-22/250-8893783-2139434?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">Write Great Code-Understanding the Machine</a>』の日本語版となっていて、主にコンピュータの基礎知識、さらに言うと、プログラムがコンピュータで実行される部分、に焦点を当てた本となっています。

グレートなプログラムを書くためには、どうやってプログラムが動くのかを知っている必要があります。本書は、低レベルの層の知識を勉強したい人、コンピュータに興味があるが大学で詳しく学ばなかった人、いまさらながらコンピュータの仕組みを理解したい人におすすめです。
-----
EXTENDED BODY:
<h2>特徴（と言うか感想？）</h2>

本書は、コンピュータの基礎知識を本当に基礎から学びたい人のための本です。読んだ感想は、「本書はプログラマだけが対象の本ではないな」ということです。

この本は、基本情報処理技術者資格の勉強をしているような感じを受ける本です。なんとなく、資格試験の勉強をしている感じというのは悪い印象を受けるかもしれませんが、本書はまったく逆です。本当にコンピュータを勉強しているような気がしてきたのです。

大学で多少でもコンピュータの知識があれば、本書を読むことでさらに深い知識を得られるはずです。逆に、まったくコンピュータの知識がない人は、ちょっと読み進めるのがつらいかもしれません。それぐらい<strong>濃くて深い内容</strong>でした。

以下、本書の目次になります。

<dl>
<dt>数値表現</dt><dd>コンピュータの基礎、ビットやx進数の話、数字と文字列の変換、BCDの話など</dd>
<dt>2進数の算術演算とビット演算</dt><dd>2進数の数え方、ビット計算の方法、16進数への変換、パックとアンパックの話など</dd>
<dt>浮動小数点表現</dt><dd>浮動小数点の演算方法、丸めなど</dd>
<dt>文字表現</dt><dd>文字コード、文字セット、文字列の表現方法など</dd>
<dt>メモリの構成とアクセス</dt><dd>CPUはメモリをどう読み込むか、リトルエンディアン、ビッグエンディアン、メモリアクセスとシステムクロックなど</dd>
<dt>復号データ型とメモリオブジェクト</dt><dd>ポインタ、配列、構造体、共用体などのメモリ表現など</dd>
<dt>ブール論理とデジタル設計</dt><dd>ブール演算、電子回路とブール関数の関係、フリップフロップなど</dd>
<dt>CPUアーキテクチャ</dt><dd>命令デコードと実行、並列化の仕組み、パイプライン、キャッシュ、マルチプロセッシングなど</dd>
<dt>命令セットアーキテクチャ</dt><dd>オペコード長、命令、仮想プロセッサの設計、オペランド、エンコードなど</dd>
<dt>メモリのアーキテクチャと構成</dt><dd>メモリ階層、キャッシュアーキテクチャ、ダイレクトマップ、フルアソシエイティブキャッシュ、仮想メモリ、ページング、スラッシング、ヒープ、スタック、ガーベージコレクションなど</dd>
<dt>入力と出力（I/O）</dt><dd>メモリマップトI/O、キャッシュ、DMA、システムバス、バッファリング、ハンドシェイク、割り込み・ポーリング、デバイスドライバ、外部デバイス、ディスクドライブ、USB、ジョイスティック、サウンドカード、オーディオデバイスなど</dd>
</dl>

目次を見るだけでもかなり低レベルな層を広範囲に、深く書かれていると言うのが分かると思います。非常に勉強になる一冊です。

<h2>参考</h2>

+ コンピュータの基礎知識＆ソースコードの読み方
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839912653/sorehabooks-22/ref=nosim/" target="_blank">Code Reading―オープンソースから学ぶソフトウェア開発技法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839912653/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4839912653.09._SCMZZZZZZZ_.jpg"   border="0" alt="Code Reading―オープンソースから学ぶソフトウェア開発技法" /></a></td><td valign="top" /><font size="-1">トップスタジオ まつもと ゆきひろ 平林 俊一 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4839912653&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ホップ・ステップ・ジャンプ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />例題がわかりにくい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />サブタイトルの方が適切？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif"   border="0" alt="star" />初心者にはオススメできない<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />全てのプログラマに読んで欲しい最高の教科書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839912653/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 本物のハッカー（コンピュータのことを知り尽くした人）とはどんな人のことか
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/sorehabooks-22/ref=nosim/" target="_blank">ハッカーと画家 コンピュータ時代の創造者たち</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4274065979.09._SCMZZZZZZZ_.jpg"   border="0" alt="ハッカーと画家 コンピュータ時代の創造者たち" /></a></td><td valign="top" /><font size="-1">ポール グレアム Paul Graham 川合 史朗 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4274065979&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />共感！！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />開発疲れしたあなたに<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ハッカーの川合さんが翻訳したハッカーについての本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />単純に読むべし<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />とんがれ！とんがれ！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Hack、Hack、Hack
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434046683/sorehabooks-22/ref=nosim/" target="_blank">ハッカーのたのしみ―本物のプログラマはいかにして問題を解くか</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434046683/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4434046683.09._SCMZZZZZZZ_.jpg"   border="0" alt="ハッカーのたのしみ―本物のプログラマはいかにして問題を解くか" /></a></td><td valign="top" /><font size="-1">ジュニア,ヘンリー・S. ウォーレン Jr.,Henry S. Warren 滝沢 徹 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4434046683&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />最後の頑張りに効きます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />えええ？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />Hackっていうのは、こういうコトさ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />コードの体脂肪率を極限まで絞る<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />歓喜に満ちてこの本を推奨する<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434046683/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ソフトウェアに携わる人のための一冊
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066304/sorehabooks-22/ref=nosim/" target="_blank">Joel on Software</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066304/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4274066304.01._SCMZZZZZZZ_.jpg"   border="0" alt="Joel on Software" /></a></td><td valign="top" /><font size="-1">Joel Spolsky 青木 靖 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4274066304&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066304/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4839918201.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="Write Great Code〈Vol.1〉ハードウェアを知り、ソフトウェアを書く">
-----
KEYWORDS:
Write Greate Code,ライト・グレート・コード,ハードウェア,ソフトウェア
-----


-----
CF50_CF_4: Randall Hyde (著), 鵜飼 文敏 (翻訳), まつもと ゆきひろ (翻訳), 後藤 正徳 (翻訳), トップスタジオ (翻訳)
CF50_URL: http://ec3.images-amazon.com/images/I/61J5PGR9KGL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4839918201/sorehabooks-22/250-8893783-2139434?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 毎日コミュニケーションズ
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 超図解 C#ルールブック    超図解シリーズ
BASENAME: 超図解_cルールブック_超図解シリーズ
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 03/05/2006 11:42:36 AM
TAGS: C#,コーディングルール,図解シリーズ
-----
BODY:
C# におけるコーディングルール、コーディングスタイルをまとめた本です。

<ul><li>ネーミング全般</li>
<li>ネームスペース</li>
<li>クラス・インターフェース・構造体・列挙型・メソッド・プロパティ・デリゲート・イベント・パラメータ・変数に関するネーミングルール</li>
<li>コーディングルール全般</li>
<li>メトリクス</li>
<li>フォーマット・コメントの書き方・クラス・列挙型・メソッド・プロパティ・イベント・変数に宣言の仕方やコーディングスタイル</li>
<li>継承・演算子のオーバーロード・インスタンスメソッド・制御構造・文字列操作・数値の取り扱いルール</li>
<li>例外・ガーベージコレクション・属性・アンマネージドコード・ファイル構成・キャスト・その他に関してのコーディングルール</li>
</ul>

が解説されています。

オールカラーページで、基本的に一ページ一解説になっています。説明書にはコーディング例もついていて、理解しやすいです。C#は、C言語の流れを汲む言語で、さらに Windows の理念が含まれています。メソッド名のルールやオーバーライドの仕方もJavaとは違います。Javaとの比較という形ではかかれてはいませんが、Java言語を知っている人であれば、頭の中で比較表が簡単につくれるのではないでしょうか。
-----
EXTENDED BODY:
<h2>特徴</h2>

オールカラーで、例が豊富にあるというだけで、ルールブックはかなり見やすくなるのだなぁと関心しました。タイトルに『超図解』とありますが、図解されている部分はほとんどないのでは！？というのが感想です（笑） しかし、見やすい構成になっているし、何かの言語をやったことがある人なら、するすると理解できると思います。

ただ、ルールブック・スタイルブックにしては高いかなと思います。この手の本で 2,000円 を超えるのは、ちょっとボッタクリな気がします。それでも、分かりやすいし、何度でも読み返せると言うことで、手元に一冊あると便利だと思いました。

<h2>参考</h2>

+ Java版、スタイル・ルールブック
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872833449/sorehabooks-22/ref=nosim/" target="_blank">超図解 Javaルールブック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872833449/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4872833449.09._SCMZZZZZZZ_.jpg"   border="0" alt="超図解 Javaルールブック" /></a></td><td valign="top" /><font size="-1">電通国際情報サービス開発技術部 エクスメディア <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4872833449&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ルールは早めに身につけたほうが良い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />Ｊａｖａを再利用化しやすくする為の工夫<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />Javaプログラマ必見！！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4872833449/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ VB.Net 版、スタイル・ルールブック
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487283416X/sorehabooks-22/ref=nosim/" target="_blank">超図解 VB.NETルールブック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487283416X/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/487283416X.09._SCMZZZZZZZ_.jpg"   border="0" alt="超図解 VB.NETルールブック" /></a></td><td valign="top" /><font size="-1">電通国際情報サービス開発統括部 エクスメディア <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=487283416X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />VB.NETプロジェクトの管理テンプレート<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487283416X/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 絶対に読んでおいたほうがよい。この本を読んでからコーディングをすべし
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/sorehabooks-22/ref=nosim/" target="_blank">プログラミング作法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4756136494.09._SCMZZZZZZZ_.jpg"   border="0" alt="プログラミング作法" /></a></td><td valign="top" /><font size="-1">ブライアン カーニハン ロブ パイク Brian Kernighan <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756136494&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />プログラマ以外の人にも<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />くせは治りません・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />洗練されたソースコードに星５つ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />プログラマ必携<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />この本を読んでから、プログラムを書くべき！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4872834151.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="超図解 C#ルールブック    超図解シリーズ">
-----
KEYWORDS:
超図解,C#,ルールブック,コーディングスタイル,コーディング規約
-----


-----
CF50_CF_4: 電通国際情報サービス (著), ISID= (著), エクスメディア (編集)
CF50_URL: http://ec2.images-amazon.com/images/I/41VP0PHAMVL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4872834151/sorehabooks-22/503-1103268-4933532?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: エクスメディア
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 覚書き
BASENAME: 覚書き
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 03/12/2006 12:16:03 AM
-----
BODY:

<h5>JTA(Java Transaction API)</h5>　JTA の UserTransactionは通常JNDIから取得する必要がある。これは、JTAを使うのに、JNDIとJTAの両方を一緒に使う必要がある、ということだ。JTAが通常はアプリケーションサーバ環境でしか使えないので、グローバルトランザクションはアプリケーションコードの再利用性を制限するのは明らかだ。
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
技術,覚書き
-----


-----
--------
AUTHOR: hamasyou
TITLE: Click@J2EE Web Application Framework
BASENAME: clickj2ee_web_application_framework
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 03/12/2006 05:00:00 PM
-----
BODY:
<strong><a href="http://click.sourceforge.net/" target="_blank" class="extlink">Click</a></strong> は、J2EE Webアプリケーションのフレームワークです。<strong>ページ指向 + イベントドリブン</strong> なプログラミングスタイルでアプリケーションを開発します。<a href="http://jakarta.apache.org/velocity/" target="_blank" class="extlink">Velocity</a> を内部で使っていて、テンプレートモデルで、ページを作成します。

ここでは、Click の覚書きをしておきます。あくまで個人用なので、あてにしないようにお願いします。間違い等発見された方は、ご連絡いただけると助かります。

<dl>
<dt class="info">使用バージョン</dt>
<dd><ul><li>version Click 0.1.8</li></ul>

<p>Clickはドキュメントがしっかりできているので、ドキュメントを読むのが一番です</p></dd>
</dl>

<section>

<h4>参考</h4>

+ <a href="http://click.sourceforge.net/" target="_blank" class="extlink">[SourceForge]Click Home</a>
+ <a href="http://www3.vis.ne.jp/~asaki/p_diary/diary.cgi?Search=%5BClick%5D" target="_blank" class="extlink">新・たけぞう瀕死の日記</a>
+ <a href="http://d.hatena.ne.jp/tanigon/searchdiary?word=%2a%5bClick%5d" target="_blank" class="extlink">Click 勉強記</a>

</section>
-----
EXTENDED BODY:
<h2>覚書き</h2>

<ul><li><a href="#Clickとは">Clickとは</a></li>
<li><a href="#Page">Page</a></li>
<li><a href="#Control">Control</a></li>
<li><a href="#ページ遷移の仕組み">ページ遷移の仕組み</a></li>
<li><a href="#ClickをSpring Frameworkと一緒に使う">ClickをSpring Frameworkと一緒に使う</a></li></ul>

<h2 id="Clickとは">Clickとは</h2>

Clickはコンポーネント＆ページ指向のイベントドリブンアーキテクチャを持つ、J2EE Webアプリケーションフレームワークです。シンプルなアーキテクチャになっていて、JSFよりも直感的でわかりやすいプログラミングができます。

Clickには大きく2つのコンポーネントが用意されています。一つは、Pageです。これは、その名の通り、一つのページを表すコンポーネントです。もう一つは、Controlで、これは、ページの要素(例えばリンクやボタンなど）を表します。

ページは複数のコントロールを持つことができます。ページのレンダリング時には、これらのコントロールをVelocityテンプレートと照らし合わせてレンダリングを行います。コントロールに付けた名前が、Velocityテンプレート中で使えるモデルの名前になります。

Clickの本体は、net.sf.click.ClickServlet です。このクラスか、このクラスを継承したサブクラスをサーブレットとして使います。

Clickの慣習で、マッピングパターンは、<em>*.htm</em> にするようです。

<pre class="code"><code><span class="tag">&lt;servlet&gt;</span> 
  <span class="tag">&lt;servlet-name&gt;</span>click-servlet<span class="tag">&lt;/servlet-name&gt;</span> 
  <span class="tag">&lt;servlet-class&gt;</span>net.sf.click.ClickServlet<span class="tag">&lt;/servlet-class&gt;</span> 
  <span class="tag">&lt;load-on-startup&gt;</span>0<span class="tag">&lt;/load-on-startup&gt;</span> 
<span class="tag">&lt;/servlet&gt;</span> 
 
<span class="tag">&lt;servlet-mapping&gt;</span> 
  <span class="tag">&lt;servlet-name&gt;</span>click-servlet<span class="tag">&lt;/servlet-name&gt;</span> 
  <span class="tag">&lt;url-pattern&gt;</span>*.htm<span class="tag">&lt;/url-pattern&gt;</span> 
<span class="tag">&lt;/servlet-mapping&gt;</span>
</code></pre>

<h3 id="Page">net.sf.click.Page</h3>

一ページを表すクラスです。開発者はこのクラスを継承してページクラスを作成します。ページには、複数のControlを持たせることができます。

ページには、次の2つの種類のメソッドを定義することができます。

<ol><li>ページのライフサイクルに関するイベントハンドリングメソッド</li><li>コントロールのイベントリスナメソッド</li></ol>

<h3>ページのライフサイクルに関するイベントハンドリングメソッド</h3>

ページは、あらかじめ決められたイベントハンドリングポイントが用意されています。以下のメソッドをオーバーライドすることで、イベントハンドリングを実装できます。

<dl>
<dt>onInit()</dt><dd>サーブレットがリクエストを受けて、ページをロードしたときに呼び出されます</dd>
<dt>onSecurityCheck()</dt><dd>onInit()の後に呼び出されます。アクセス制御等のセキュリティ確認を行える場所です</dd>
<dt>onGet()</dt><dd>Getメソッドのリクエストの場合に呼び出されます。onSecurityCheck()の後に呼び出されます</dd>
<dt>onPost()</dt><dd>Postメソッドのリクエストの場合に呼び出されます。onSecurityCheck()の後に呼び出されます</dd>
<dt>onDestroy()</dt><dd>ページが廃棄されるときに呼び出されます</li></dd>
</dl>

これらのメソッドは、ページのイベントシーケンスにしたがって呼び出されます。

<h4>参考</h4>
+ <a href="http://click.sourceforge.net/docs/pages.html#page-execution" target="_blank" class="extlink">Click#Page-Execution</a>

<h3>コントロールのイベントリスナメソッド</h3>

リスナメソッドをコントロールに登録することで、コントロールに対するイベントが発生した場合にハンドリング処理ができるようになります。イベントリスナメソッドは、次の2つのルールを満たさなければなりません。

<ol><li>引数は無し</li><li>boolean もしくは java.lang.Boolean を戻り値で返す</li></ol>

イベントリスナメソッドの戻り値は、次のような意味を持ちます。

<dl>
<dt>true の場合</dt><dd><p>続けて他のコントロールの onProcess() メソッドが呼び出されます。その後、ページのonGet() メソッド または、 onPost() メソッドが呼び出されます。</p></dd>
<dt>falseの場合</dt><dd><p>他のコントロールの処理は実行されません。また、ページの onGet()、onPost() メソッドも呼び出されません。そのままページの遷移処理、またはレンダリング処理に入ります。</p></dd>
</dl>

上記の動作から分かることは、イベントハンドリング処理で、ページの遷移等を行う場合は、戻り値を false にする必要があるということです。ページ遷移を伴わないイベントハンドリング処理の場合は、true を返すようにします。

<h3>サーブレットAPIを使うには</h3>

Clickには、コンテキスト（net.sf.click.Context）と言うものがあります。ClickServletは、リクエストを受けると、要求されたページとコンテキストを結び付けます。ページ内のメソッドからは、このコンテキストを通して、通常のServletAPIを使用することができます。コンテキストを取得するには、Page#getContext() メソッドを呼び出します。

<h3>コントロールはデフォルトコンストラクタの中で追加する</h3>

ページが要求されると、ClickServletは、ページのインスタンス化を行います。このとき、引数のないデフォルトコンストラクタが呼び出されます。
※ ただし、この動作はClickServletのデフォルト実装によるもので、サブクラスでは、インスタンス化の方法をオーバーライドすることができます。

インスタンス化されたページは、そのままページの処理シーケンスに突入します。そのため、インスタンス化された時点で静的なコントロールは new しておくことが望ましいです。もちろん、処理シーケンス中で、動的にコントロールを作成することも可能です。

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">class</span> Login <span class="keyword">extends</span> Page {
  <span class="keyword">private</span> Form loginForm = <span class="keyword">new</span> Form(<span class="literal">"loginForm"</span>);
  <span class="keyword">public</span> Login() {
    <span class="keyword">this</span>.loginForm.add(<span class="keyword">new</span> TextField(<span class="literal">"userName"</span>, <span class="literal">"ユーザ名"</span>, <span class="keyword">true</span>));
    <span class="keyword">this</span>.loginForm.add(<span class="keyword">new</span> PasswordField(<span class="literal">"password"</span>, <span class="keyword">true</span>));
    <span class="keyword">this</span>.loginForm.add(<span class="keyword">new</span> Submit(<span class="literal">"login"</span>, <span class="literal">" ログイン "</span>, <span class="keyword">this</span>, <span class="literal">"onLoginClicked"</span>));
    <span class="keyword">super</span>.addControl(<span class="keyword">this</span>.loginForm);
  }
 
  <span class="comment">/* その他の実装 */</span>
}
</code></pre>

コントロールを動的に追加するには、onGet() メソッドか onPost() メソッド中で実装すると良いと思います。

<pre class="code"><code>@Override
<span class="keyword">public</span> <span class="keyword">void</span> onGet() {
  <span class="keyword">this</span>.onHandleRequest();
}
 
@Override
<span class="keyword">public</span> <span class="keyword">void</span> onPost() {        
  <span class="keyword">this</span>.onHandleRequest();
}
 
<span class="keyword">protected</span> <span class="keyword">void</span> onHandleRequest() {
  String userName = 
        <span class="keyword">super</span>.getContext().getRequestParameter(<span class="literal">"userName"</span>);
  <span class="keyword">if</span> (<span class="literal">"admin"</span>.equals(userName)) {
    <span class="keyword">super</span>.addControl(<span class="keyword">new</span> Label(<span class="literal">"menu"</span>, <span class="literal">"管理者メニュー"</span>));
  } <span class="keyword">else</span> {
    <span class="keyword">super</span>.addControl(<span class="keyword">new</span> Label(<span class="literal">"menu"</span>, <span class="literal">"一般メニュー"</span>));
  }
}
</code></pre>

<h3>モデルを画面に表示する</h3>

addModel メソッドを呼びだして、名前を指定してモデルを登録します。ここで指定した名前で Velocityテンプレートから参照することができます。

<h2 id="Control">net.sf.click.Control</h2>

ページを構成するコンポーネント（例えば、フォームやリンク、ボタン、テキストボックスなど）です。コントロールには次のような大分類に分けられます。

<dl>
<dt>ActionLink</dt><dd>リンクを表します。リスナを登録することで、コールバック（イベント）を受け取ることができます</dd>
<dt>Field</dt><dd>フォームと一緒に使われる入力フィールドです。フィールドは、自分自身をバリデーションします</dd>
<dt>Form</dt><dd>入力フォームです。自分自身とフィールドのバリデーション機能を持ちます。また、フォームは、独自のレイアウトを持ちます</dd>
</dl>

<h3>ActionLink</h3>

アンカーを持つリンクです。

リスナを登録することで、リンクがクリックされたときのイベントをハンドリングできます。

<h4>参考</h4>

+ <a href="http://click.sourceforge.net/docs/controls.html#control-callback" target="_blank" class="extlink">Control#Callback</a>

<h3>Field</h3>

フォームの入力フィールドです。様々な種類があります。フィールドは、自分自身でバリデーションを行うことができます。必須入力、最大・最小文字長等のチェックを行います。

<h4>参考</h4>

+ <a href="http://click.sourceforge.net/docs/click-api/net/sf/click/control/Field.html" target="_blank" class="extlink">Control#Field</a>

<h3>Form</h3>

フォームコントロールです。フォームに入力フィールドを追加して使います。フォームは、レイアウトフォーマットを持っています。フィールドの数等によってフォームのレイアウトが自動で設定されます。また、フォームには、入力値をオブジェクトに変換する役割もあります。

<h4>参考</h4>

+ <a href="http://click.sourceforge.net/docs/click-api/net/sf/click/control/Form.html" target="_blank" class="extlink">Control#Form</a>

<h2 id="ページ遷移の仕組み">ページ遷移の仕組み</h2>

Click には3つのページ遷移の方法があります。

<ul><li>Forward</li><li>Redirect</li><li>テンプレート置き換え</li></ul>

<h3>Forward</h3>

サーブレットの request.getRequestDispatcher を使ってページを遷移します。Fowardさせるには、Pageクラスのイベントハンドラで、setFoward() を呼び出します。

<pre class="code"><code>@Override
<span class="keyword">public</span> <span class="keyword">void</span> onPost() {
  <span class="keyword">super</span>.setForward(<span class="literal">"login.htm"</span>);
}
</code></pre>

setForward() に与えるページパスは、パスの先頭に "/" 先頭にを含めません。フォワード先にパラメータを送りたい場合は、getContext().setRequestAttribute() を呼び出します。

<h4>参考</h4>

+ <a href="http://click.sourceforge.net/docs/pages.html#page-navigation" target="_blank" class="extlink">Page#Forward Parameter Passing</a>

getContext().createPage() を呼び出して、遷移先のページを作成するというやり方もあります。この例も、上の「参考」に例があります。

<h3>Redirect</h3>

サーブレットの response.sendRedirect() を呼び出して、ページを遷移します。リダイレクトしたい場合は、Page#setRedirect() を呼び出して、リダイレクト先のパスを設定します。リダイレクト先のパスの先頭に "/" を付けると、コンテキストルートからのパスという意味になります。（つまり、パスの先頭にコンテキスト名が付与されます）

<h3>テンプレート置き換え</h3>

setForward() も setRedirect() もされていない場合は、Velocityテンプレートをレンダリングします。使われるVelocityテンプレートは、Page#getTemplate() の戻り値になります。これは、デフォルトで、パス名と同じファイルになります。getTemplate() をオーバーライドして、テンプレート名を変えることで、出力を変えることができます。

<h2 id="ClickをSpring Frameworkと一緒に使う">ClickをSpring Frameworkと一緒に使う</h2>

Clickを <a href="http://www.springframework.org/" target="_blank" class="extlink">Spring Framework</a> と一緒に使う方法です。Clickをダウンロードするとついてくる click-extras.jar を使います。このライブラリに含まれている net.sf.click.extras.spring.SpringClickServlet を ClickServlet の代わりに使います。そして、Spring Framework のアプリケーションコンテキスト定義（applicationContext.xml）のパスを与えてやります。

<pre class="code"><code><span class="tag">&lt;servlet&gt;</span>
   <span class="tag">&lt;servlet-name&gt;</span>click-servlet<span class="tag">&lt;/servlet-name&gt;</span>
   <span class="tag">&lt;servlet-class&gt;</span>net.sf.click.extras.spring.SpringClickServlet<span class="tag">&lt;/servlet-class&gt;</span>
   <span class="tag">&lt;init-param&gt;</span>
     <span class="tag">&lt;param-name&gt;</span>spring-path<span class="tag">&lt;/param-name&gt;</span>
     <span class="tag">&lt;param-value&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/param-value&gt;</span>
   <span class="tag">&lt;/init-param&gt;</span>
   <span class="tag">&lt;load-on-startup&gt;</span>0<span class="tag">&lt;/load-on-startup&gt;</span>
<span class="tag">&lt;/servlet&gt;</span>
</code></pre>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" alt="Click@J2EE Web Application Framework" border="0">
-----
KEYWORDS:
Click,click,J2EE,Web Application,Framework,フレームワーク,クリック
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: プロなら知っておきたいネットワークの重要知識
BASENAME: プロなら知っておきたいネットワークの重要知識
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 04/02/2006 12:40:07 PM
TAGS: わかりやすい,ネットワーク,電子ムック
-----
BODY:
本書は、TCP/IPの仕組み、WWWで使われている技術、ネットワーク構築のノウハウの解説を集めたムックになっています。もともと『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B000EWQSKA/sorehabooks-22/503-2767694-1914321?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">NetworkMagazin</a>』 で紹介されていた記事を集めたものになっています。

（※ ちなみに、ムックとは「雑誌(Magazine)」 + 「本(Book)」 = 「ムック(Mook)」 のことらしいです。 <a href="http://www.zasshipark.com/mook/about_mook.html" target="_blank" class="extlink">ざっしパークとは</a>）

本書のおすすめポイントは、TCP/IP の仕組みについてかなり詳しく解説されている点です。TCP/IP なんて、普段はあまり意識していないと思います。Windowsならネットワーク設定できるけど、UnixやLinuxになるとちょっと設定できませんという人もいると思います。

本書は、TCP/IP とは何かというところから、通信ではどういった情報を送っているのかをパケットレベルで解説しています。さらに、ルーティングプロトコルについてや、DNSの名前解決の仕組みなども解説されています。

WWWの技術にも触れられていて、まあ、ネットワークを知っている人なら知らないことはないというくらいの軽いものです。他には、パケットを調べるツール（Ethereal）の使い方や、進入検知システム（Snort）の解説がされています。

僕がおすすめなポイント2点目は、ネットワーク設計のノウハウがまとめられている点です。目的別ネットワーク設計のノウハウということで、近年要求されているネットワークに対する無理難題をどうやって解決するかと言うことがまとめられています。
-----
EXTENDED BODY:
<h2>特徴</h2>

TCP/IP の仕組みがパケットレベルで解説されている点、ルーティングに関して詳しく説明されている点が、本書を購入した動機です。本書を読めば、ネットワークに関する基本知識はかなり整理されると思います。

<h3>Ethernetの縁の下の力持ち ARP</h3>

Ethernetで通信先のパソコンにパケットを送信するには、相手のパソコンのMACアドレスを知らなければなりません。IPアドレスからMACアドレスを解決してくれるのが、ARP（Address Resolution Protocol）です。このプロトコルは、送信したいIPを持つMACアドレスを調べるために、ブロードキャストを行って、MACアドレスを調べます。そして、MACアドレスが分かると、無事にパケットを送信することができるようになります。

<h3>ルーティング</h3>

通信先のパソコンが同じネットワーク上にあれば、ARPでMACアドレスを解決し、パケットを送信できます。しかし、インターネットが間にいたりして、IPをMACアドレスに変更できない場合は、どうにかしなければパケットを送信できません。そこで、ルーティングの出番なわけです。

ルーティングを行ってくれる装置に、ルータと言うものがあります。こいつは、中にルーティングテーブルというものを持っていて、送信先のIPをどのネットワークに転送すればよいかを知っています。

ルーティングテーブルで解決できない宛先には、デフォルトゲートウェイが使われます。このゲートウェイを通ってパケットはネットワークに出て行きます。

<h2>参考</h2> 

+ これを読めば、TCP/IP は完璧。これまで読んだ中で、一番分かりやすいのでは？
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274064530/sorehabooks-22/ref=nosim/" target="_blank">マスタリングTCP/IP 入門編</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274064530/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4274064530.09._SCMZZZZZZZ_.jpg"   border="0" alt="マスタリングTCP/IP 入門編" /></a></td><td valign="top" /><font size="-1">竹下 隆史 村山 公保 荒井 透 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4274064530&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />ネットワークのとっかかりに最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />教科書の王道<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />図が多く説明も分かりやすい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />ネットワーク入門書のバイブル<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />すばらしい！！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274064530/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ スイッチ、ルータがすっきり分かる！
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145884/sorehabooks-22/ref=nosim/" target="_blank">すっきりわかった!スイッチ&ルータ</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145884/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4756145884.09._SCMZZZZZZZ_.jpg"   border="0" alt="すっきりわかった!スイッチ&ルータ" /></a></td><td valign="top" /><font size="-1">ネットワークマガジン編集部 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756145884&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />読み応えあり<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145884/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ TCP/IP がすっきり分かる！
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145876/sorehabooks-22/ref=nosim/" target="_blank">すっきりわかった!TCP/IP</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145876/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4756145876.09._SCMZZZZZZZ_.jpg"   border="0" alt="すっきりわかった!TCP/IP" /></a></td><td valign="top" /><font size="-1">ネットワークマガジン編集部 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756145876&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />毎日持ち歩いてます<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145876/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ DNS、メールがすっきり分かる！
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145906/sorehabooks-22/ref=nosim/" target="_blank">すっきりわかった!DNS&メール</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145906/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4756145906.09._SCMZZZZZZZ_.jpg"   border="0" alt="すっきりわかった!DNS&メール" /></a></td><td valign="top" /><font size="-1">ネットワークマガジン編集部 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756145906&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />よく分かります。でも・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif"   border="0" alt="star" />初心者にお薦め<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145906/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ VPN がすっきり分かる！
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145892/sorehabooks-22/ref=nosim/" target="_blank">すっきりわかった!VPN</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145892/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4756145892.09._SCMZZZZZZZ_.jpg"   border="0" alt="すっきりわかった!VPN" /></a></td><td valign="top" /><font size="-1">ネットワークマガジン編集部 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756145892&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />序盤を読めれば後は比較的楽です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif"   border="0" alt="star" />理解は確実に進みます！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756145892/sorehabooks-22/ref=nosim/" target="_blank" />Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ネットワーク管理がすっきり分かる！
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756146600/sorehabooks-22/ref=nosim/" target="_blank">すっきりわかった!ネットワーク管理</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756146600/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4756146600.01._SCMZZZZZZZ_.jpg"   border="0" alt="すっきりわかった!ネットワーク管理" /></a></td><td valign="top" /><font size="-1">ネットワークマガジン編集部 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756146600&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756146600/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4756147208.01._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="プロなら知っておきたいネットワークの重要知識">
-----
KEYWORDS:
プロなら知っておきたい,ネットワーク,重要知識,TCP/IP,インターネット,ムック
-----


-----
CF50_CF_4: 
CF50_URL: http://ec2.images-amazon.com/images/I/51CMQNZT16L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4756147208/sorehabooks-22/503-2767694-1914321?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: アスキー
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Apache Pluto1.1 を触ってみる その1
BASENAME: apache_pluto11_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 04/16/2006 05:52:11 PM
-----
BODY:
<p>
<a href="http://portals.apache.org/pluto/" target="_blank"><img src="http://portals.apache.org/pluto/images/banner.png"   alt="Apache Pluto" /></a>
</p>

Apache Pluto の覚書きです。Apache Pluto は、Java Portlet 仕様 のリファレンス実装です。この覚書きを書いている段階では、Java Portlet Specification (JSR-168) が Java Portlet 仕様として、まとめられています。今回は、Java Portlet Specification を読んだ覚書きを記録していこうと思います。その後で、Apache Pluto を触った覚書を記録していこうと思います。

この覚書きで使っている環境は次の通りです。

<ul><li>Eclipse 3.1.2</li><li>Java Portlet Specification Version 1.0</li><li>Pluto 1.1 (alpha release 前のもの)</li><li>Tomcat 5.5.9</li><li>J2SE 5.0</li></ul>

参考にしたリソースは次の通りです。

<ul><li><a href="http://jcp.org/aboutJava/communityprocess/final/jsr168/index.html" target="_blank" class="extlink">Java Portlet Specification Version1.0 (JSR-168)</a></li>
<li><a href="http://www.developer.com/java/web/article.php/3554396" target="_blank" class="extlink">Developing Portlets with Apache Pluto</a></li>
<li><a href="http://www.onjava.com/pub/a/onjava/2006/02/01/what-is-a-portlet-2.html?page=1" target="_blank" class="extlink">ONJava.com - What Is a Portlet, Part 2</a></li></ul>

間違い等に気づいた方は、ご連絡いただけると助かります。（英語が苦手なもので --;）
-----
EXTENDED BODY:
<h2>Java Portlet Specification (JSR-168)</h2>

<h3>目次</h3>

<ol>
<li><a href="#言葉の定義（What is ○○?）">言葉の定義（What is ○○?）</a></li>
<li><a href="#Servlet との違いは？">Servlet との違いは？</a></li>
<li><a href="#ポータルページの構成">ポータルページの構成</a></li>
<li><a href="#ポータルのリクエスト処理手順">ポータルのリクエスト処理手順</a></li>
<li><a href="#Portlet API">Portlet API</a></li>
<li><a href="#Dispatching Request to Servlet and JSPs">Dispatching Request to Servlet and JSPs</a></li>
<li><a href="#ユーザ情報">ユーザ情報</a></li>
<li><a href="#セキュリティ">セキュリティ</a></li>
<li><a href="#portlet.xmlの例">portlet.xmlの例</a></li></ol>

<h2 id="言葉の定義（What is ○○?）">言葉の定義（What is ○○?）</h2>

<h3>ポータルとは何か？</h3>

ポータルとは、Personalization（個別化）、Single Sign on（シングルサインオン）、Content aggregation（コンテンツの統合）を行うプレゼンテーション層の Webアプリケーションです。

<h3>Portlet とは何か？</h3>

Portlet とは、ポータルのための Java 技術の一つであり、Portlet コンテナによって管理される、ユーザインターフェースコンポーネントです。

<h3>Portlet コンテナとは何か？</h3>

Portlet コンテナとは、Portlet を管理する実行時環境のことです。Portlet のライフサイクルを管理します。永続化の仕組みや、Portlet の初期化、ポータルページからのリクエストを処理します。

<h3>fragment とは何か？</h3>

Portlet によって生成されるコンテンツは、fragment とよばれます。fragment とは、HTML や XHTML の破片のことです。つまり、完全な HTML ページではなく、例えば一つの div タグからなる要素だったりします。

fragment は、ポータルページに埋め込まれたときに完全なコンテンツになるように、ルールに則って作る必要があります。。このルールは、次のように決められています。

<dl>
<dt class="warn">Warning</dt>
<dd>
<p>Portlet が生成する HTML fragment は、次のタグを含んではいけません： <strong>base</strong>、<strong>body</strong>、<strong>iframe</strong>、<strong>frame</strong>、<strong>frameset</strong>、<strong>head</strong>、<strong>html</strong>、<strong>title</strong></p>

<p>Portlet が生成する XHTML や XHTML-Basic fragment は、次のタグを含んではいけません： <strong>base</strong>、<strong>body</strong>、<strong>iframe</strong>、<strong>head</strong>、<strong>html</strong>、<strong>title</strong></p>

<p>Portlet が生成する fragment がポータルページとしてなじむために、次のタグの使用に注意しなければなりません：<strong>link</strong>、<strong>meta</strong>、<strong>style</strong></p></dd>
</dl>

<h2 id="Servlet との違いは？">Servlet との違いは？</h2>

Portlet は、Servlet と次のような違いがあります。

<ul><li>Portlet の生成するコンテンツは、fragment なので、それ自体では完結したコンテンツにならない</li>
<li>そのため、Portlet と URL とは、直接的な関係を持たない</li>
<li>Web クライアントは、Portlet 単体ではなく、ポータルページとやり取りをする</li>
<li>同時に複数の Portlet がポータルページに存在する</li>
<li>Portlet は、定義されたライフサイクルを持つ</li>
<li>Portlet は、<a href="#Portlet Mode">Portlet Mode</a> と <a href="#Window State">Window State</a> という定義された状態をもつ</li></ul>

Portlet は Servlet には無い、次の機能をもちます。

<ul><li>設定情報にアクセスする機能を持つ</li>　
<li>Portlet はユーザプロファイルにアクセスできる</li>
<li>Portlet 用のURLを作成する機能を持つ</li>
<li>2つの Session スコープをもつ（<a href="#javax.portlet.PortletSession">詳細後述</a>）</li></ul>

Portlet は、Servlet の次の機能が使えません。

<ul><li>レスポンスの文字エンコードを指定できない</li>
<li>HTML レスポンスヘッダを設定できない</li>
<li>ポータルページへしかページリクエストができない（つまり、Portlet を直接呼び出せない）</li></ul>

同一Portlet アプリケーション内にある Portlet、Servlet、JSP は、ClassLoader、アプリケーションコンテキスト、セッションを共有します。

<h3>Portlet のライフサイクル</h3>

Portlet は次のライフサイクルを持ちます。これらのライフサイクルにあわせて、javax.portlet.Portlet インターフェースに定義された同名のメソッドが呼び出されます

<ol><li>init</li><li>processAction</li><li>render</li><li>destroy</li></ol>

ライフサイクルは、次のように処理されていきます。

<ul><li>Portlet コンテナが起動したとき、もしくは最初に Portlet へのリクエストが発生したときに、Portlet の init メソッドが呼び出されます</li>
<li>後述する <a href="#javax.portlet.PortletURL">ActionURL</a> がリクエストされたときに、processAction メソッドが呼び出されます</li>
<li>processAction の処理が終了した後、もしくは <a href="#javax.portlet.PortletURL">RenderURL</a> がリクエストされたときに、render メソッドが呼び出されます</li>
<li>Portlet インスタンスが不要になったときに、destroy メソッドが呼び出されます</li></ul>

init メソッドは、Portlet インスタンスが初期化される最初の一回だけ呼び出されます。destory メソッドが呼び出されたあとの Portlet インスタンスは、ガーベッジコレクションの対象になります。

<h3 id="Portlet Mode">Portlet Mode</h3>

Portlet の動作モードのことです。下記の3つが決められています。Portletは VIEW モードを必ずサポートしなければなりません。これ以外のモードは、必要に応じてサポートします。カスタムモードもつくることができます。

<dl><dt>VIEW</dt>
<dd>VIEWモードは、コンテンツを静的に画面に表示するモードのことで、一般の閲覧行為にはこのモードが使われます。</dd>
<dt>EDIT</dt>
<dd>EDITモードは、編集系のページに用意されるモードで、CMSなどのPortletは、このモードをサポートします。</dd>
<dt>HELP</dt>
<dd>HELPモードは、Portlet の説明を表示するモードです。</dd></dl>

<h3 id="Window State">Window State</h3>

ポータルページ上のPortletコンテンツは、下記のいずれかの状態を持ちます。

<dl><dt>NORMAL</dt>
<dd>NORMAL 状態はPortletが他のコンテンツと共存している状態です。ポータルページに複数の Portlet が表示されることになります。</dd>
<dt>MAXIMIZED</dt>
<dd>MAXIMIZED 状態は、自分だけがページに表示されている状態です。ポータルページには、自分の Portlet しか表示されません。</dd>
<dt>MINIMIZED</dt>
<dd>MINIMIZED 状態は、自分以外だけがページに表示されている状態です。ポータルページには、自分の Portlet は表示されません。この状態のときは、Portlet はなにもレンダリングするべきではありません。</dd></dl>

<h2 id="ポータルページの構成">ポータルページの構成</h2>

<a href="/images/portal_pluto/portal_page.gif"><img src="http://hamasyou.com/images/portal_pluto/portal_page_mini.gif" alt="ポータルページの構成" border="0" /></a>

<strong>ポータルページ</strong> は、複数の <strong>Portlet Application</strong> で構成されます。Portlet Application は、<strong>コントロール</strong>を持ちます。<a href="#Portlet Mode">Portlet Mode</a>や <a href="#Windows State">Windows State</a> を変更することができます。Portlet Application が生成するコンテンツが <strong>Portlet fragment</strong>です。

<h2 id="ポータルのリクエスト処理手順">ポータルのリクエスト処理手順</h2>

ポータルページは、次のように処理されていきます。ポータルの動作は、次の4つのプロセスに分かれます。

<ol><li>Request Handling</li><li>Action Request</li><li>Render Request</li><li>End of Service</li></ol>

<h3>Request Handling</h3>

Portlet コンテナは、クライアントからのリクエストを受けると、トリガーとなった<a href="#javax.portlet.PortletURL">PortletURL</a> の種類を判別します。 ActionURL の場合は、Portlet の processAction メソッドが呼び出されます。それ以外の場合は、Portlet の render メソッドが呼び出されます。

<a href="/images/portal_pluto/portal_seq.gif"><img src="http://hamasyou.com/images/portal_pluto/portal_seq_mini.gif" alt="シーケンス図" border="0" /></a>

<h3>Action Request</h3>

Portlet#processAction メソッドが呼び出されます。Portlet に対するリクエストを処理します。<a href="#javax.portlet.PortletURL">PortletURL</a> の種類が RenderURL ではない場合にこのプロセスが処理されます。リクエストに対して、Portlet の状態を変化させたり、ビジネスロジックを実行したりします。Struts のActionのイメージで利用すると良いと思います。ただし、Portlet は、 アクションとレンダリングを区別しているので、processAction ないでは、処理のみを行うようにします。

processAction の引数には、ActionRequest と ActionResponse オブジェクトが渡されます。これは、ServletRequest と ServletResponse とほとんど同じものと考えればよさそうです。ActionRequest には、クライアントから送信されたリクエストパラメータが含まれています。

<dl>
<dt class="notice">リクエストパラメータのライフサイクル</dt>
<dd>リクエストパラメータは、processAction メソッドを抜けると、破棄されてしまいます。つまり、render メソッド内で取得することができません。ただし、RenderURL によってリクエストが呼び出されて、processAction が呼ばれなかった場合は、render メソッド内で、リクエストパラメータを取得することができます。</dd>
</dl>

processAction 内で生成したパラメータで、Render Request に必要なパラメータは、ActionResponse#setRenderParameter メソッドを使って render メソッドまで保持しておくことができます。setRenderParameter メソッドで設定された値は、RenderRequest#getParameter メソッドで取得することができます。これにより、processAction メソッド内で設定したパラメータを render メソッドで取得することが出来ます。なお、setRenderParameter でセットする key と value は、null を許可しません。null の場合は例外がスローされます。

<h3>Render Request</h3>

このプロセスでは、Portlet は、自身の <a href="#Window State">Window State</a> にあわせたコンテンツを出力します。Portlet の render メソッドが呼び出されます。render メソッドの引数の RenderRequest オブジェクトを使って、Portlet の様々な情報にアクセスすることができます。ServletRequest と同じような使い方ができます。

コンテンツを書き出すには、render メソッドの引数に渡される RenderResponse オブジェクトを使います。直接ストリームにコンテンツを書き出す方法や、Servlet や JSP に処理をディスパッチすることもできます。ServletResponse オブジェクトと同じような使い方ができます。

<h3>End of Service</h3>

Portlet コンテナは、Portlet を長い期間ロードしたままにしておかなければならないと言うことは規定されていません。つまり、一度の処理で Portlet は破棄されるかもしれないし、されないかもしれないと言うことです。Portlet が破棄されるときには destroy メソッドが呼び出されます。

<h2 id="Portlet API">Portlet API</h2>

<h3 id="javax.portlet.Portlet">javax.portlet.Portlet</h3>

Portlet クラスが実装するインターフェースです。

<h3 id="javax.portlet.GenericPortlet">javax.portlet.GenericPortlet</h3>

Portletのデフォルト実装です。通常、このクラスを継承して、Portletクラスを作成します。このクラスには、doView、doEdit、doHelp メソッドが用意されています。これらのメソッドは、VIEW モードのときは、doView メソッドという風に、Portal Mode によってレンダリング時に呼び出されます。

<h3 id="javax.portlet.PortletURL">javax.portlet.PortletURL</h3>

Portletは、PortletURLオブジェクトを使ってPortlet のURLを表します。PortletURL オブジェクトは、<a href="#javax.portlet.RenderResponse">javax.portlet.RenderResponse </a>によって生成されます。PortletURLは、つぎの2つの種類があります。

<ul><li><strong>Action URL</strong><br />　Portlet#processAction のトリガーになるURLです。</li>
<li><strong>Render URL</strong><br />　Portlet#render のトリガーになるURLです。このURLが呼び出されたときには、Portlet の processAction は呼び出されません。</li></ul>

<h3 id="javax.portlet.PortletContext">javax.portlet.PortletContext</h3>

Portlet 版 ServletContext です。Portlet コンテナにアクセスする方法を提供します。ここに格納された情報は、同一ポートレットアプリケーション（同一のwarファイルに含まれているPortlet群）のすべてのユーザ、すべてのPortlet で共有されます。PortletContext はポートレットアプリケーションにつき、一つ用意されます。

PortletContext は、Portlet の初期パラメータにアクセスすることができます。また、ServletContext とパラメータを共有することもできます。web.xml に記述した初期化パラメータ等にも、PortletContext からアクセスできます。log メソッドを呼び出すことで Portlet ログファイルにログを書き出すことができます。

PortletContext の情報は、ServletContext の情報と共有されます。つまり、PortletContext に格納した情報は、ServletContext で取得できるし、ServletContext に格納した情報は、PortletContext で取得できます。

<h3 id="javax.portlet.PortletRequest">javax.portlet.PortletRequest</h3>

Portlet 版 HttpServletRequest です。クライアントのリクエストに含まれるパラメータを取得したり、セッションを開始したりすることができます。Portlet コンテナは、<a href="#javax.portlet.ActionRequest">javax.portlet.ActionRequest</a> と <a href="#javax.portlet.RenderRequest">javax.portlet.RenderRequest</a> を用意しています。これらは、processAction メソッド、render メソッドのそれぞれで使われます。<strong>PortletRequest、PortletResponse は、スレッドセーフではありません。</strong>

<h3 id="javax.portlet.ActionRequest">javax.portlet.ActionRequest</h3>

Portlet の processAction メソッドの引数に渡されるリクエストオブジェクトです。PortletRequest を継承していて、アクションリクエスト（<a href="#PortletURL">ActionURL </a> によるリクエスト)を処理するのに使います。ActionURL にセットされたパラメータを取得することができます。

<h3 id="javax.portlet.RenderRequest">javax.portlet.RenderRequest</h3>

Portlet の render メソッドの引数に渡されるリクエストオブジェクトです。 PortletRequest を継承していて、レンダリングリクエスト(<a href="#PortletURL">RenderURL</a> によるリクエスト）を処理するのに使います。RenderURL にセットされたパラメータを取得することができます。

<h3 id="javax.portlet.PortletResponse">javax.portlet.PortletResponse</h3>

Portlet 版 HttpServletResponse です。Portlet コンテナは、<a href="#javax.portlet.ActionResponse">javax.portlet.ActionResponse</a> と <a href="#javax.portlet.RenderResponse">javax.portlet.RenderResponse</a> の2つを用意しています。これらは、processAction メソッド、render メソッドのそれぞれで使われます。

<h3 id="javax.portlet.ActionResponse">javax.portlet.ActionResponse</h3>

processAction メソッドのレスポンスを書き込むオブジェクトです。render メソッドにパラメータを渡すには、 setRenderParameter メソッドを利用します。また、レスポンスをリダイレクトする場合には、sendRedirect メソッドを呼び出します。

<h3 id="javax.portlet.RenderResponse">javax.portlet.RenderResponse</h3>

render メソッドのレスポンスを書き込むオブジェクトです。コンテンツの書き出しや、<a href="#javax.portlet.PortletURL">PortletURL</a> の生成を行います。

<h3 id="javax.portlet.PortletPreferences">javax.portlet.PortletPreferences</h3>

Portlet のプリファレンスにアクセスするためのクラスです。PortletRequest#getPreferences メソッドを呼び出すことで取得できます。プリファレンスは、 /WEB-INF/portlet.xml ファイルに記述します。Portlet 毎に設定します。

プリファレンスの情報は、processAction メソッド中であれば、変更可能です。render メソッドで変更すると、例外がスローされます。

<h3 id="javax.portlet.PortletSession">javax.portlet.PortletSession</h3>

Portlet 版 HttpSession です。PortletSession のスコープには2つあります。

<ol><li>Application Scope</li><li>Portlet Scope</li></ol>

Application Scope は、同一ポートレットアプリケーション内で共有されるスコープです。Portlet Scope は、同一Portlet で共有されるスコープです。Portlet Scope の方が狭いスコープになります。プライベートスコープとも呼ばれるみたいです。スコープを指定するには、引数を3つとる setAttribute メソッドを呼び出します。

Portlet Scope に格納されるオブジェクトのキーは、Portlet コンテナによって、次のように決められるそうです。

<pre>javax.portlet.p.&lt;ID&gt;?&lt;ATTRIBUTE_NAME&gt;</pre>

&lt;ID&gt; は、Portlet で一意に決められる値で、'?' は含まれません。&lt;ATTRIBUTE_NAME&gt; は、setAttribute メソッドの引数に渡した名前です。

PortletSession に格納された情報は、HttpSession と共有されます。つまり、PortletSession に格納した値は、HttpSession で取得でき、HttpSession で格納した値は、PortletSession で取得できます。セッションキーに付ける名前は、パッケージ名を参考に付けるとよいようです。ただし、javax.portlet というプレフィックスは予約されているので、開発者は使わないようにしましょう。

HttpSession に保存された情報は、PortletSession の <strong>APPLICATION_SCOPE</strong> になります。逆もしかりです。

<h2 id="Dispatching Request to Servlet and JSPs">Dispatching Request to Servlet and JSPs</h2>

<h3>ディスパッチの方法</h3>

Portlet#render メソッド中で、PortletRequestDispatcher を使ってリクエストをディスパッチすることができます。PortletRequestDispatcher は、PortletContext オブジェクトから取得することができます。ディスパッチするパスは、'/' で始まる必要があります。PortletContext のルートパスからの相対パスになります。パスには、クエリストリングを付けることが出来ます。getNamedDispatcher メソッドを使うと、サーブレット名を指定して、ディスパッチャを取得することが出来ます。

PortletRequestDispacher によってディスパッチされたサーブレットや JSP には、<strong>HTTP GET</strong> がリクエストされます。

<dl>
<dt class="warn">forward してはいけない場合</dt>
<dd><p>PortletRequestDispacher によって include された Servlet や JSP からは、 RequestDispatcher#forward メソッドを呼び出してはいけません。代わりに RequestDispatcher#include メソッドを呼び出すか、Servlet 内ではアクション処理だけを行い、Portlet の render メソッドで別の Servlet や JSP を include します。</p></dd>
</dl>

<h3>ディスパッチ時に付与されるパラメータとアトリビュート</h3>

getRequestDispatcher メソッドを使って取得したディスパッチャ（getNamedDispatcher以外の方法のこと) を使ってサーブレットやJSPにリクエストをディスパッチした時、HttpServletRequest のアトリビュートに下記の属性がセットされます。

<dl><dt>javax.servlet.include.request_uri</dt><dd>サーブレットのリクエストURI。例：/PortalDemo/index.do</dd>

<dt>javax.servlet.include.context_path</dt><dd>サーブレットのコンテキストパス。例：/PortalDemo</dd>

<dt>javax.servlet.include.servlet_path</dt><dd>サーブレットパス。例：/index.do</dd>

<dt>javax.servlet.include.path_info</dt><dd>パス情報。</dd>

<dt>javax.servlet.include.query_string</dt><dd>クエリストリングの情報。例：param1=PARAM1&amp;param2=PARAM2</dd></dl>

ディスパッチの方法にかかわらず、Portlet からサーブレットやJSPにリクエストをディスパッチしたときには、HttpServletRequest に下記の属性がセットされます。

<dl><dt>javax.portlet.config</dt><dd>javax.portlet.PortletConfig クラスのオブジェクト</dd>

<dt>javax.portlet.request</dt><dd>javax.portlet.RenderRequest クラスのオブジェクト</dd>

<dt>javax.portlet.response</dt><dd>javax.portlet.RenderResponse クラスのオブジェクト</dd></dl>

その他、Portlet で設定した Parameter や Attribute が、サーブレットやJSPから取得できます。

<h3>ディスパッチされたサーブレットの制限事項</h3>

PortletRequestDispatcher を使ってリクエストをディスパッチされたサーブレットには、かなりの制限がほどこされます。

<h4>HttpServletRequest</h4>
<table>    <tr>        <th>メソッド名</th>        <th>制約</th>    </tr>    <tr>         <td><ul>            <li>getProtocolget</li>            <li>RemoteAddr</li>            <li>getRemoteHost</li>            <li>getRealPath</li>            <li>getRequestURL</li>        </ul></td>        <td>null を返す</td>    </tr>    <tr>        <td><ul>            <li>getPathInfo</li>            <li>getPathTranslated</li>            <li>getQueryString</li>            <li>getRequestURI</li>            <li>getServletPath</li>        </ul></td>        <td>PortletRequestDispatcher の情報を返す</td>    </tr>    <tr>        <td><ul>            <li>getScheme</li>            <li>getServletName</li>            <li>getServerPort</li>            <li>getAttribute</li>            <li>getAttributeNames</li>            <li>setAttribute</li>            <li>removeAttribute</li>            <li>getLocale</li>            <li>getLocales</li>            <li>isSecure</li>            <li>getAuthType</li>            <li>getContextPath</li>            <li>getRemoteUser</li>            <li>getUserPrincipal</li>            <li>getRequestedSessionId</li>            <li>isRequestedSessionIdValid</li>        </ul></td>        <td>PortletRequest の同名のメソッドと同じ処理になる</td>    </tr>    <tr>        <td><ul>            <li>getParameter</li>            <li>getParameterNames</li>            <li>getParameterValues</li>            <li>getParameterMap</li>        </ul></td>        <td>PortletRequest の同名のメソッドと同じ処理になる。Java Portlet Specification version1.0 PLT.16.1.1 Query Strings in Request Dispatcher Paths セクションに書かれている定義の通りに動作する</td>    </tr>    <tr>        <td><ul>            <li>getCharacterEncoding</li>            <li>setCharacterEncoding</li>            <li>getContextType</li>            <li>getInputStreamgetReader</li>        </ul></td>        <td>何もしない か nullを返す</td>    </tr>    <tr>        <td><ul>            <li>getContentLength</li>        </ul></td>        <td>常に 0 を返す </td>    </tr>    <tr>        <td><ul>            <li>getHeader</li>            <li>getHeaders</li>            <li>getHeaderNames</li>            <li>getCookies</li>            <li>getDateHeader</li>            <li>getIntHeader</li>        </ul>            </td>        <td><p>PortletRequest の getProperties メソッドによって提供される情報を返す</p>        </td>    </tr>    <tr>        <td><ul><li>getMethod</li></ul></td>        <td>常に GET を返す </td>    </tr></table>

<h4>HttpServletResponse</h4>

<table>    <tr>        <th>メソッド名</th>        <th>制約</th>    </tr>
<tr><td><ul>            <li>encodeRedirectURL</li>            <li>encodeRedirectUrl</li>        </ul></td>        <td>null を返す </td>    </tr>    <tr>        <td><ul>            <li>getCharacterEncoding</li>            <li>setBufferSize</li>            <li>flushBuffer</li>            <li>resetBuffer</li>            <li>reset</li>            <li>getBufferSize</li>            <li>isCommitted</li>            <li>getOutputStream</li>            <li>getWriter</li>            <li>encodeURL</li>            <li>encodeUrl</li>        </ul>            </td>        <td>RenderResponse の同名のメソッドと同じ処理になる</td>    </tr>    <tr>        <td><ul>            <li>setContentType</li>            <li>setContentLength</li>            <li>setLocale</li>            <li>addCookie</li>            <li>sendError</li>            <li>sendRedirect</li>            <li>setDateHeader</li>            <li>addDateHeader</li>            <li>setHeader</li>            <li>addHeader</li>            <li>setIntHeader</li>            <li>addIntHeader</li>            <li>setStatus</li>        </ul>            </td>        <td>何もしない</td>    </tr>    <tr>        <td><ul><li>containsHeader</li></ul></td>        <td>常に false を返す </td>    </tr>    <tr>        <td><ul><li>getLocale</li></ul></td>        <td>RenderResponse の同名のメソッドと同じ処理になる</td>    </tr></table>

<h2 id="ユーザ情報">ユーザ情報</h2>

TBD

<h2 id="セキュリティ">セキュリティ</h2>

Portlet コンテナは、ユーザの権限をチェックして、Portlet にアクセス可能かどうかを確認します。これには、Servlet 仕様で決められている、Role を使います。開発者がプログラマティックにチェックすることもできます。それには、PortletRequest クラスの次のメソッドを使用します。

<dl><dt>getRemoteUser</dt><dd>認証に使われたユーザ名を返します。</dd>
<dt>isUserInRole</dt>
<dd>指定したロール名が、セキュリティロールで許可されているかどうかを確認します。</dd>
<dt>getUserPrincipal</dt>
<dd>ログインユーザの Principal を返します。</dl>

<h2 id="portlet.xmlの例">portlet.xmlの例</h2>

+ <a href="http://www.javaworld.jp/technology_and_programming/-/15962-3.html" target="_blank" class="extlink">java World Online - 「eXo Platform」で体験するポータル・サイト開発</a>
-----
EXCERPT:
<img src="http://portals.apache.org/pluto/images/banner.png" style="float:left; margin:15px;" border="0" alt="Apache Pluto">
-----
KEYWORDS:
Portlet, Java, Portal, JSR-168, Pluto, Apache Pluto, その1
-----


PING:
TITLE: Jungle Java - Apache Pluto は Portlet 仕様 のリファレンス実装
URL: http://www.junglejava.jp/archives/2007/08/entry_375.html
IP: 72.9.234.70
BLOG NAME: Jungle Java
DATE: 08/26/2007 05:01:34 PM
Java Portlet 仕様 のリファレンス実装である 「Apache Pluto」 の最新安定板 1.1.4 GA がリリースされました。
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Apache Pluto1.1 を触ってみる その2
BASENAME: apache_pluto11_2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 04/19/2006 12:08:46 AM
-----
BODY:
<p>
<a href="http://portals.apache.org/pluto/" target="_blank"><img src="http://portals.apache.org/pluto/images/banner.png"    alt="Apache Pluto" /></a>
</p>

Apache Pluto の覚書きです。Apache Pluto は、Java Portlet 仕様 のリファレンス実装です。この覚書きを書いている段階では、Java Portlet Specification (JSR-168) が Java Portlet 仕様として、まとめられています。

この覚書きで使っている環境は次の通りです。

<ul><li>Eclipse 3.1.2</li><li>Pluto 1.1 (alpha release 以前)</li><li>Tomcat 5.5.9</li><li>J2SE 5.0</li></ul>

参考にしたリソースは次の通りです。<ul><li><a href="http://jcp.org/aboutJava/communityprocess/final/jsr168/index.html" target="_blank" class="extlink">Java Portlet Specification Version1.0 (JSR-168)</a></li><li><a href="http://www.developer.com/java/web/article.php/3554396" target="_blank" class="extlink">Developing Portlets with Apache Pluto</a></li></ul>

Pluto の中を追っていったときの覚書です。ソースコードを手元に読んでいただければ、より理解できるのではないかと思います。

間違い等に気づいた方は、ご連絡いただけると助かります。
-----
EXTENDED BODY:
<h2>Apache Pluto1.1 覚書 目次</h2>

<ul>
<li><a href="#chapter1">環境構築</a>
<ul>
<li><a href="#section1">ソースコードをダウンロードする</a></li>
<li><a href="#section2">インストールする</a></li>
</ul>
</li>
<li><a href="#chapter2">Pluto のアーキテクチャ</a>
<ul>
<li><a href="#section3">ポータルもWebアプリケーションだから、サーブレット が使われている</a></li>
<li><a href="#section4">Pluto で使われる主なクラス群</a></li>
<li><a href="#section5">ポートレットコンテナにポートレットを登録するにはどうすればいいのか？</a></li>
<li><a href="#section6">ポートレットを呼び出すぞ。（でも、URL がわからない・・・）</a></li>
<li><a href="#section7">Pluto の設定には、SpringFramework が使われている</a></li>
</ul>
</li>
<li><a href="#chapter3">まとめ</a></li>
</ul>

<h4>Pluto をもうちょっと詳しく見てみる 目次</h4>

<ul>
<li><a href="#chapter4">PortalStartupListener の動作</a>
</li>
<li><a href="#chapter5">PortletDriverServlet の動作</a>
<ul>
<li><a href="#section8">リクエスト種類によって、呼び出しが変わる</a></li>
</ul>
</li>
<li><a href="#chapter6">ポートレットコンテナの動作</a>
<ul>
<li><a href="#section9">ポートレットコンテナの呼び出しを整理しておくと</a></li>
<li><a href="#section10">ポートレットの呼び出し方法</a></li>
</ul>
</li>
<li><a href="#chapter7">エラーで困ったら</a>
<ul>
<li><a href="#section11">error.config.context.null</a></li>
</ul>
</li>
<li><a href="#chapter8">検討事項</a></li>
</ul>

<h2 id="chapter1">環境構築</h2>

今回使うのは、Apache Pluto1.1 です。2006/4/20 現在では、 Pluto のバージョンは 1.0.1 と 1.1 の二つが用意されています。バイナリで配布されているのは 1.0.1 だけなので、今回はソースコードを手に入れるところからはじめます。

Pluto 1.0.1 と Pluto 1.1 は、アーキテクチャが大きく変わったようです。1.1 のほうがよりシンプルに美しくなりました。それに伴って、設定の仕方なども色々と変わっています。 Pluto 1.0.1 を使う場合は、この覚書は参考にならないかもしれませんので注意してください。

今回使うのは、Pluto1.1 です。

<h4>ライセンス</h4>

The Apache Software License, Version 2.0

<h3 id="section1">ソースコードをダウンロードする</h3>

Apache Pluto 1.1 のソースコードは、<a href="http://subversion.tigris.org/" target="_blank" class="extlink">Subversion</a> で管理されています。下記の URL からチェックアウトできます。

<pre><a href="http://svn.apache.org/repos/asf/portals/pluto/trunk/" target="_blank" class="extlink"> http://svn.apache.org/repos/asf/portals/pluto/trunk/</a></pre>

下のコマンドを実行することでも、ソースコードがダウンロードできます。

<pre class="console">> <kbd>svn checkout http://svn.apache.org/repos/asf/portals/pluto/trunk/ pluto-site</kbd></pre>

<h3 id="sectiono2">インストールする</h3>

ソースコードをダウンロードしたら、Apache Pluto のサイトにある <a href="http://portals.apache.org/pluto/getting-started.html" target="_blank" class="extlink">Getting Started</a> を見ながら、インストールを行います。ソースコードをダウンロードしたパスに移動して

<pre class="console">> <kbd>mvn install</kbd></pre>

を実行すると、ずらずらと、ライブラリができるので、Getting Started に書いてある Step にしたがって配置していきます。

配置が終了したら、Tomcat を起動します。<a href="http://localhost:8080/pluto/portal" target="_blank">http://localhost:8080/pluto/portal</a> にアクセスすると、Pluto のポータル画面が表示されます。

<h2 id="chapter2">Pluto のアーキテクチャ</h2>

<h3 id="sectiono3">ポータルもWebアプリケーションだから、サーブレット が使われている</h3>

まず、最初に Pluto がどういう風に動作するのかを簡単にまとめて見ました。（画像をクリックすると大きな画像が表示されます。）

<a href="http://hamasyou.com/images/portal_pluto/pluto_class.gif"><img src="http://hamasyou.com/images/portal_pluto/pluto_class_mini.gif" alt="Plutoの全体クラス図" border="0" /></a>

Pluto は、Web ブラウザからリクエストを受けると次のように動作します。

<pre>
1. PortalDriverServlet がポータルに対するリクエストを受け取る
        ↓
2. サーブレットコンテキスト、サーブレットリクエスト、サーブレットレスポンスをそれぞれポートレット API でラップする
        ↓
3. ポートレットコンテナを呼び出す
        ↓
4. ポートレットコンテナは、リクエストパラメータを解析して、どのポートレットが呼び出されたのかを判断する
        ↓
5. 呼び出されたポートレットにリクエストをフォワードする
        ↓
6. ポートレットコンテナは、レンダリングリクエストを表示するページ内の全ポートレットに対して送信する
        ↓
7. ポートレットのレスポンスをマージして、画面をブラウザに返す
</pre>

ポータルアプリケーションもひとつの Web アプリケーションなので、当然サーブレットを使っています。

Tomcat を起動した際に webapp ディレクトリにできる pluto フォルダの下には、典型的な Web アプリケーションの構成ができています。

<img src="http://hamasyou.com/images/portal_pluto/pluto_dir.gif" alt="pluto   のディレクトリ構成" />

{TOMCAT_HOME}/webapps/pluto/WEB-INF/web.xml を開くと、こんな記述があると思います。

<section>

<h4>web.xml 抜粋</h4>

<pre class="code"><code><span class="tag">&lt;servlet&gt;</span>  
  <span class="tag">&lt;servlet-name&gt;</span>plutoPortalDriver<span class="tag">&lt;/servlet-name&gt;</span>  
  <span class="tag">&lt;display-name&gt;</span>Pluto Portal Driver<span class="tag">&lt;/display-name&gt;</span>  
  <span class="tag">&lt;description&gt;</span>Pluto Portal Driver Controller<span class="tag">&lt;/description&gt;</span>  
  <span class="tag">&lt;servlet-class&gt;</span>org.apache.pluto.driver.PortalDriverServlet<span class="tag">&lt;/servlet-class&gt;</span>  
<span class="tag">&lt;/servlet&gt;</span>
</code></pre>

</section>

このクラスが、ポータルアプリケーションの窓口、ポータルアプリケーションのサーブレットです。ポータルにアクセスしたいときは、このサーブレットにアクセスすることになります。web.xml の下のほうにマッピングが書かれていますので、見てみます。

<section>

<h4>web.xml 抜粋</h4>

<pre class="code"></code><span class="tag">&lt;servlet-mapping&gt;</span>  
  <span class="tag">&lt;servlet-name&gt;</span>plutoPortalDriver<span class="tag">&lt;/servlet-name&gt;</span>  
  <span class="tag">&lt;url-pattern&gt;</span>/portal/*<span class="tag">&lt;/url-pattern&gt;</span>  
<span class="tag">&lt;/servlet-mapping&gt;</span>
</code></pre>

</section>

つまり、http://localhost:8080/pluto/portal/ にアクセスすることで、このサーブレットが呼ばれ、ポートレットコンテナに格納されているポートレットが呼び出されるわけです。

なお、ポートレットの初期化は、サーブレットリスナで行われており、<code>org.apache.pluto.driver.PortalStartupListener</code> が使われていました。これについては後の節で詳しく見ることにします。

<h3 id="sectiono4">Pluto で使われる主なクラス群</h3>

Pluto のアーキテクチャを調べた中で出てきた主なクラスは次の4つです。

<dl>
<dt>org.apache.pluto.driver.PortletDriverServelt</dt>
<dd><p>このクラスは、Pluto の本体ともいえるサーブレットの実装クラスです。Web ブラウザからのアクセスは、このサーブレットが受け取ります。このクラスは、Pluto 全体の初期化やポートレットコンテナの作成と初期化を行います。</p></dd>
<dt>org.apache.pluto.PortletContainer</dt>
<dd><p>ポートレットコンテナの実装クラスです。PortletDriverServlet から呼び出されます。内部にはポートレットを格納しています。リクエストを解釈し、適切なポートレットに割り振ることを行います。</p></dd>
<dt>org.apache.pluto.core.PortletServlet</dt>
<dd><p>ポートレットアプリケーション側に配備されるクラスです。ポートレットコンテナからの呼び出しを受け、ポートレットに処理を委譲します。</p></dd>
<dt>org.apache.pluto.driver.tags.PortletRenderTag</dt>
<dd><p>ポートレットのレンダリングを呼び出すためのタグクラスです。JSP に記述され、ポートレットのレンダリングリクエストを発行します。<code>&lt;pluto:render /&gt;</code> であらわされます。</p></dd>
</dl>

<dl>
<dt class="notice">クロスコンテキストを有効にする必要がある</dt>
<dd>ポータルは、複数のWeb アプリケーションをまたがるため、クロスコンテキスト(crossContext) が可能でなければなりません。{TOMCAT_HOME}/conf/Catalina/localhost にコピーした pluto.xml には、<code>crossContext=&quot;true&quot;</code> が記述されています。</dd>
</dl>

<h3 id="sectiono5">ポートレットコンテナにポートレットを登録するにはどうすればいいのか？</h3>

{TOMCAT_HOME}/webapps/pluto/WEB-INF/web.xml を見ると、いくつかのサーブレットの設定に <code><strong>org.apache.pluto.core.PortletServlet</strong></code> というクラスが使われています。サーブレットの <code>init-param</code> 設定で、<code><strong>portlet-name</strong></code> というパラメータが設定されています。

<pre class="code"><code><span class="tag">&lt;servlet&gt;</span>  
  <span class="tag">&lt;servlet-name&gt;</span>AdminPortlet<span class="tag">&lt;/servlet-name&gt;</span>  
  <span class="tag">&lt;servlet-class&gt;</span>org.apache.pluto.core.PortletServlet<span class="tag">&lt;/servlet-class&gt;</span>  
  <span class="tag">&lt;init-param&gt;</span>  
    <span class="tag">&lt;param-name&gt;</span>portlet-name<span class="tag">&lt;/param-name&gt;</span>  
    <span class="tag">&lt;param-value&gt;</span>AdminPortlet<span class="tag">&lt;/param-value&gt;</span>  
  <span class="tag">&lt;/init-param&gt;</span>  
  <span class="tag">&lt;load-on-startup&gt;</span>1<span class="tag">&lt;/load-on-startup&gt;</span>  
<span class="tag">&lt;/servlet&gt;</span>
</code></pre>

どうやら、Pluto1.1 では、ポートレットコンテナ がこの <code>PotletServlet</code> を呼び出して、さらに <code>PortletServlet</code> が ポータルコンテンツ を呼び出す仕組みになっているようです。呼び出される ポータルコンテンツは、<code>portlet-name</code> で指定しています。

<code>portlet-name</code> で指定されているのは、あくまでポートレット名です。では、ポートレットの本体はどこで定義するのかというと、JSR-168 で決められている通り、portlet.xml に定義します。あたりまえですね。

web.xml をもう少し見ていくと、今度は、<code>servlet-mapping</code> が見つかります。

<pre class="code"><code><span class="tag">&lt;servlet-mapping&gt;</span>  
  <span class="tag">&lt;servlet-name&gt;</span>AdminPortlet<span class="tag">&lt;/servlet-name&gt;</span>  
  <span class="tag">&lt;url-pattern&gt;</span>/PlutoInvoker/AdminPortlet<span class="tag">&lt;/url-pattern&gt;</span>  
<span class="tag">&lt;/servlet-mapping&gt;</span>
</code></pre>

<code>/PlutoInvoker/</code> という記述がなんとも不思議です。Pluto 1.1 は、<code>PortletServlet</code> が呼び出される URL にプレフィックスとして、この <code>/PlutoInvoker/</code> という名前を使います。

Portlet 用のサーブレットは、マッピング URL に <code>/PlutoInvoker/</code> を記述するようにします。その後ろの名前は、ポートレット名をつけます。

ちなみに、web.xml と portal.xml の設定は、ポートレットアプリケーション（自分が作るアプリケーション）側に記述します。

<h3 id="sectiono6">ポートレットを呼び出すぞ。（でも、URL がわからない・・・）</h3>

さて、これでポートレットの設定は完了したわけですが、これだけではポートレットは呼び出せません。JSR-168 には、

<blockquote>

Portlets are not directly bound to a URL

<cite>JSR-168</cite>

</blockquote>

とあります。これはつまり、ブラウザのアドレスバーに URL を直接打ち込んでもポートレットを呼び出すことはできませんということを言っています。例えば、ブラウザのアドレスに http://localhost:8080/pluto/PortletInvoker/AdminPortal 入力してもエラーになります。

では、どうすればよいかというと、ポートレットは、ポートレットコンテナから呼び出されることが決められているので、ポートレットコンテナに呼び出しをお願いします。Pluto1.1 の場合、このお願いは {TOMCAT_HOME}/webapps/pluto/WEB-INF/pluto-portal-driver-config.xml に記述することになります。

<section>

<h4>(pluto-portal-driver-config.xml 抜粋)</h4>

<pre class="code"><code><span class="tag">&lt;pluto-portal-driver </span>  
  ...  
  <span class="tag">&lt;portlet-app&gt;</span>  
    <span class="tag">&lt;context-path&gt;</span>/pluto<span class="tag">&lt;/context-path&gt;</span>  
    <span class="tag">&lt;portlets&gt;</span>  
      <span class="tag">&lt;portlet <span class="attr">name=</span><span class="value">&quot;AboutPortlet&quot;</span> /&gt;</span>  
      <span class="tag">&lt;portlet <span class="attr">name=</span><span class="value">&quot;AdminPortlet&quot;</span> /&gt;</span>  
    <span class="tag">&lt;/portlets&gt;</span>  
  <span class="tag">&lt;/portlet-app&gt;</span>  
  ...  
  <span class="tag">&lt;render-config <span class="attr">default=</span><span class="value">&quot;Pluto Admin&quot;</span>&gt;</span>  
    <span class="tag">&lt;page <span class="attr">name=</span><span class="value">&quot;Pluto Admin&quot;</span> <span class="attr">uri=</span><span class="value">&quot;/WEB-INF/themes/pluto-default-theme.jsp&quot;</span>&gt;</span>  
      <span class="tag">&lt;portlet <span class="attr">context=</span><span class="value">&quot;/pluto&quot;</span> <span class="attr">name=</span><span class="value">&quot;AdminPortlet&quot;</span>/&gt;</span>  
    <span class="tag">&lt;/page&gt;</span>  
  <span class="tag">&lt;/render-config&gt;</span>  
<span class="tag">&lt;/pluto-portal-driver&gt;</span>
</code></pre>

</section>

<section>

<h4>portlet-app タグ</h4>

このタグでポートレットの定義を記述します。

<dl>
<dt>context-path タグ</dt><dd><p>ここに、ポートレットのコンテキストパスを記述します。ポートレットは別の Web アプリケーションとして作成できるので、コンテキストも Pluto とは別になります。コンテキスト名に使える文字は 「a-z, A-Z, 0-9, _, /」 です。'.' や '-' は使えないので注意です。</p></dd>
<dt>portlets タグ</dt><dd><p>このタグを使って、このコンテキストに含まれるポートレットの名前を定義します。ここに記述するのは、portlet.xml に定義したポートレットです。</p></dd>
</dl>

</section>

<section>

<h4>render-config タグ</h4>

このタグは、<code>PlutoPortletDriver</code> の設定を記述するところです。ここには、レンダリングに関する設定をおこないます。設定しているのは、ポータルページを呼び出すときのパス名（name 属性）と、ポータルページに使用するページ（uri 属性）、どのポートレットを使うか（portlet タグ）です。portlet タグに記述するのは、<code>portlet-app</code> で記述したコンテキストと、ポートレット名です。

name に指定した値 (ページ名) をブラウザのアドレスバーに打ち込むことで、ポータルページを開くことができます。

<pre>http://localhost:8080/pluto/portal/Pluto%20Admin</pre>

</section>

これで、Pluto を起動したときに、pluto-portal-driver-config.xml が読み込まれ、ポートレット URLを生成したページが表示できるようになります。Pluto は、この設定ファイルを解析して、URL と ポートレットアプリケーションのマッピングを行います。

http://localhost:8080/pluto/portal にアクセスして、ログインした後のページの左上にある Navigation から ページを移動してみましょう。画面が表示されるはずです。

<dl>
<dt class="notice">ポートレットID</dt>
<dd>
<p>すべてのポートレットには、一意の ID が振られます。Pluto の場合、次のようなルールによって ID が決められます。</p>

<pre>[portlet-context-name].[portlet-name]</pre>

<p><code>[portlet-context-name]</code> とは、ポートレットアプリケーションのコンテキスト名のことです。<code>[portlet-name]</code> は、文字通りポートレット名です。これらを '.' でつないだものが <strong>Portlet Definition ID</strong> と呼ばれるポートレットの一意な ID です。</p></dd>
</dl>

<h3 id="sectiono7">Pluto の設定には、SpringFramework が使われている</h3>

{TOMCAT_HOME}/webapps/pluto/WEB-INF/ を見ると、pluto-portal-driver-service-config.xml というファイルがあるのがわかります。このファイル、中を見ると実は SpringFramework の Bean 設定ファイルだったりします。

Pluto の設定が行われている部分を抜粋します。

<section>

<h4>(pluto-portal-driver-service-config.xml 抜粋)</h4>

<pre class="code"><code><span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;DriverConfiguration&quot;</span>  
  <span class="attr">class=</span><span class="value">&quot;org.apache.pluto.driver.config.impl.DriverConfigurationImpl&quot;</span>&gt;</span>  
  <span class="rem">&lt;!-- ===== Portal Services ===== --&gt;</span>  
  <span class="tag">&lt;constructor-arg&gt;</span><span class="tag">&lt;ref <span class="attr">local=</span><span class="value">&quot;PropertyConfigService&quot;</span>/&gt;</span><span class="tag">&lt;/constructor-arg&gt;</span>  
  <span class="tag">&lt;constructor-arg&gt;</span><span class="tag">&lt;ref <span class="attr">local=</span><span class="value">&quot;PortletRegistryConfig&quot;</span>/&gt;</span><span class="tag">&lt;/constructor-arg&gt;</span>  
  <span class="tag">&lt;constructor-arg&gt;</span><span class="tag">&lt;ref <span class="attr">local=</span><span class="value">&quot;RenderConfigService&quot;</span>/&gt;</span><span class="tag">&lt;/constructor-arg&gt;</span>  
 
  <span class="rem">&lt;!-- === Container Services === --&gt;</span>  
  <span class="tag">&lt;constructor-arg&gt;</span><span class="tag">&lt;ref <span class="attr">local=</span><span class="value">&quot;PortalCallbackService&quot;</span>/&gt;</span><span class="tag">&lt;/constructor-arg&gt;</span>  
 
  <span class="rem">&lt;!--  Optional Container Services --&gt;</span>  
  <span class="rem">&lt;!--  
  &lt;property name=&quot;portletPreferencesService&quot; &gt; 
    &lt;ref local=&quot;PortletPreferencesService&quot; /&gt; 
  &lt;/property&gt;  
  &lt;property name =&quot;userAttributeService&quot; &gt; 
    &lt;ref local=&quot;UserAttributeService&quot; /&gt; 
  &lt;/property&gt;  
  --&gt;</span>  
<span class="tag">&lt;/bean&gt;</span>
</code></pre>

</section>

4つのサービスクラスをインジェクションしています。Portal Services とコメントされているサービスクラスは、pluto-portal-driver-service-config.xml を読み込んで、それぞれの担当範囲の設定を返す役割を持っています。

Container Services とコメントされているサービスクラスは、ポートレットコンテナから必要に応じて呼び出されるクラスです。例えば、ポータルのタイトルを設定するときに呼び出されたり、ポートレット URL を生成するクラスの取得に使われたりします。

Pluto の実装を拡張したものに、<a href="http://portals.apache.org/jetspeed-2/" target="_blank" class="extlink">Apache Jetspeed2</a> や <a href="http://www.uportal.org/" target="_blank" class="extlink">uPortal</a> があります。これらのサービスクラスを拡張して作られています。

<h2 id="chapter3">まとめ</h2>

<ul><li>ポータルはただのWeb アプリケーション</li>
<li>ポートレットもただのWeb アプリケーション</li>
<li>ポータルアプリケーションとポートレットアプリケーションは別々に開発できる</li>
<li>ポータルアプリケーションの設定は{PORTLET_APP}/WEB-INF/portlet.xml を作成することで行う</li>
<li>ポートレットコンテナに対するポートレットの追加・変更や削除は {PLUTO_HOME}/WEB-INF/pluto-portal-driver-config.xml に記述する</li>
<li>画面デザインの変更は、{PLUTO_HOME}/WEB-INF/themes/pluto-default-theme.jsp、portlet-skin.jsp を変更することで行う</li>
<li>ポートレットコンテナの初期化に関する設定は、{PLUTO_HOME}/WEB-INF/pluto-portal-driver-service-config.xml に記述する</li>
</ul>

さらに、ポートレットアプリケーションの開発者がやらなければならないのは、次の点です。

<dl>
<dt class="info">Portlet 開発者がやる作業</dt>
<dd><ol><li>javax.portlet.GenericPortlet を継承したポートレットを作成する</li>
<li>/WEB-INF/portlet.xml を作成し、ポートレットの定義を行う</li>
<li>web.xml に org.apache.pluto.core.PortletServlet を設定し、<code>portal-name</code> を記述する</li>
<li>Pluto の pluto-portal-driver-config.xml に、ポートレットの設定を記述する</li></ol></dd>
</dl>

<h2 id="chapter4">PortalStartupListener の動作</h2>

もうちょっと突っ込んで Pluto を見てみます。といっても、<code>PortalDriverServlet</code> と <code>PortletContainer</code> の動きを追っていくだけですが。

<code>PortalStartupListener</code> の中で、Pluto で使われるいろいろな初期設定が行われます。このクラスは、Pluto がアプリケーションサーバにロードされると起動します。デフォルトの実装では、次の3つが行われます。

<section>

<h4>デフォルトの設定メソッド</h4>

<ul><li>initDriverConfiguration(servletContext);</li>
<li>initAdminConfiguration(servletContext);</li>
<li>initContainer(servletContext);</li>
</ul>

順番に見ていきます。まずは、<code>initDriverConfiguration</code> です。

このメソッドは、<code>DriverConfiguration</code> の生成と初期化を行います。

最初に <code>DriverConfigrationFactory</code> クラスが呼び出されます。 Factory の中で、SpringFramework が呼び出され、 pluto-portal-driver-service-config.xml の内容を元に <code>DriverConfigration</code> が作成されます。

あとは、<code>DriverConfiguration</code> に設定されたサービスクラスの <code>init</code> メソッドが呼び出され、pluto-portal-driver-config.xml のパースを行うという仕組みです。

生成された <code>DriverConfiguration</code> は、<code>ServletContext</code> に <code>&quot;driverConfig&quot;</code>  という名前で格納されます。

つぎに、<code>AdminConfiguration</code> の生成と初期化が行われます。

ほとんどの処理が、<code>DriverConfiguration</code> の同じです。違うのは、<code>ServletContext</code> に格納するときのキーが違うくらいです。 

&quot;driverAdminConfig&quot;</code> という値で格納されます。

<code>AdminConfiguration</code> は、ポートレットの追加や削除がシステム的に行えるものです。ポートレットを管理するツールを作るときに使えそうです。

最後に ポートレットコンテナの生成と初期化です。

ここも大したことをしていません。<code>DriverConfiguration</code> をもとに、コンテナの実装クラスを生成しているだけです。

生成したコンテナは、<code>ServletContext</code> に <code>&quot;portletContainer&quot;</code> というキーで格納されます。

これで Pluto の初期化が完了しました。あとは、<code>PortletDriverServlet</code> と <code>PortletContainer</code> の動作がわかれば、一通り Pluto の動作を追えるかなと思います。

<h2 id="chapter5">PortletDriverServlet の動作</h2>

このクラスは、何をやっているかというと、サーブレット API を ポートレット API にラップしてポートレットコンテナを呼び出すということを行っています。

ポータルは、リクエストパラメータの値によって呼び出すポートレットを判断します。リクエストパラメータとポートレットのマッピングルールは、ポータル製品ごとに決められています。

Pluto 1.1 は、<code>PortalURLParser</code> クラスの <code>parse</code> メソッドで変換ルールを規定しています。ここで、リクエスト URL をポータルで使える形に変換しています。

<h3 id="sectiono8">リクエスト種類によって、呼び出しが変わる</h3>

ポータルに対するリクエストには種類があります。一つはアクションリクエストで、ポートレットの <code>processAction</code> メソッドが呼び出されます。もう一つはレンダリングリクエストで、ポートレットの <code>render</code> メソッドが呼び出されます。

アクションリクエストの場合、ポートレットコンテナの <code>doAction</code> が呼び出されます。これは、ポートレットの呼び出しを行うメソッドになっています。

レンダリングリクエストの場合、画面の描画が行われます。このとき、{PLUTO_HOME}/WEB-INF/themes/pluto-default-theme.jsp の表示されます。

<h2 id="chapter6">ポートレットコンテナの動作</h2>

<h3 id="sectiono9">ポートレットコンテナの呼び出しを整理しておくと</h3>

JSR-168 では、アクションURL がリクエストされたときには、対応するポートレットの <code>processAction</code> メソッドの呼び出しと、ポータルページに含まれるすべてのポートレットの <code>render</code> メソッドが呼び出されるとされています。

<blockquote>

If the client request is triggered by an action URL, the portal/portlet-container must first trigger the action request by invoking the <i>processAction</i> method of the targeted portlet. &lt;中略&gt; Then, the portal/portlet-container must trigger the render request by invoking the <i>render</i> method for all the portlets in the portal page with the possible exception of portlets for which their content is being cached.

<cite>JSR-168</cite>

</blockquote>

<code>PortletDriverServlet</code> から呼び出されるのは、ポートレットコンテナの <code>doAction</code> メソッドです。この <code>doAction</code> メソッドの中でリクエストを解析し、どのポートレットを呼び出すかを決めます。ポートレットの呼び出しには、サーブレットレスポンスの <code>sendRedirect</code> を使っています。

Pluto は、Portlet のレンダリングトリガーを &lt;pluto:render/&gt; タグで行っています。

<h3 id="sectiono10">ポートレットの呼び出し方法</h3>

ポートレットコンテナが、どうやってポートレットを呼び出すかですが、上に書いたようにサーブレットレスポンスの <code>sendRedirect</code> を使っています。このリダイレクト URL のパラメータに、ポートレットコンテナが受け取ったリクエストパラメータ等の情報をエンコードして付与しています。

そして、呼び出されたポートレットプリケーション側で、待ち構えていた <code>org.apache.pluto.core.PortletServlet</code> クラスがパラメータをデコードして、サーブレットリクエストを完成させます。

これで、ポートレットの呼び出しは完了です。

<dl>
<dt class="notice">クロスコンテキストを有効にする！</dt>
<dd>ポートレットの呼び出しを行うには、クロスコンテキストを有効にしておかなければなりません。</dd>
</dl>

ポータルは、異なるコンテキスト間のポートレットを呼び出します。そのため、コンテキストをまたいだ呼び出しが可能なように設定を行う必要があります。

Tomcat の場合、これは、クロスコンテキスト（crossContext）というパラメータで行います。{TOMCAT_HOME}/conf/server.xml に記述するコンテキストの設定に <code>crossContext</code> を設定します。

<h2 id="chapter7">エラーで困ったら</h2>

<h3 id="sectiono11">error.config.context.null</h3>

<pre>org.apache.pluto.PortletContainerRuntimeException: error.config.context.null</pre>

こんなエラーで困ったら、<code>crossContext</code> を true に設定したかどうかを疑ってください。また、コンテキスト名が間違っていないか確認してください。

<h2 id="chapter8">検討事項</h2>

TBD
-----
EXCERPT:
<img src="http://portals.apache.org/pluto/images/banner.png" style="float:left; margin:15px;" border="0" alt="Apache Pluto">
-----
KEYWORDS:
Portlet, Java, Portal, JSR-168, Pluto, Apache Pluto, その2
-----


PING:
TITLE: Jungle Java - Apache Pluto は Portlet 仕様 のリファレンス実装
URL: http://www.junglejava.jp/archives/2007/08/entry_375.html
IP: 72.9.234.70
BLOG NAME: Jungle Java
DATE: 08/26/2007 05:03:36 PM
Java Portlet 仕様 のリファレンス実装である 「Apache Pluto」 の最新安定板 1.1.4 GA がリリースされました。
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Struts Bridge - Portal Bridges
BASENAME: struts_bridge_portal_bridges
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 04/19/2006 11:04:31 PM
-----
BODY:
<p>
<a href="http://portals.apache.org/pluto/" target="_blank"><img src="http://portals.apache.org/images/apache-portals.gif"   alt="Portal Bridges" /></a>
</p>

Portal Bridges は、Portlet 以外で作られた Web フレームワークと、JSR-168 に準拠した Portlet を橋渡しするライブラリです。The Apache Software Foundation によって提供されています。

今回の覚書では、Portal Bridges の中の Struts Bridges について書き留めておきます。

ちなみに、対応している Struts のバージョンは、1.2.4  と 1.2.7 だそうです。

<section>

<h4>[参考]</h4>

+ <a href="http://portals.apache.org/bridges/multiproject/portals-bridges-struts/index.html" target="_blank" class="extlink">Struts Bridge - Portal Bridges</a>

</section>
-----
EXTENDED BODY:
<h2>Struts Bridge 目次</h2>

<ul>
<li><a href="#chapter1">言葉の定義おさらい</a>
</li>
<li><a href="#chapter2">Portal Bridgesとは</a>
</li>
<li><a href="#chapter3">Struts をブリッジしてみる</a>
<ul>
<li><a href="#section1">なんか、めちゃめちゃ難しいとかいわれてますが・・・</a></li>
<li><a href="#section2">コードやJSPを変更しなくても Portlet に対応できる。ただし、条件が・・・</a></li>
</ul>
</li>
<li><a href="#chapter4">Struts Bridge が提供するもの</a>
<ul>
<li><a href="#section3">PortletURL を Struts 用のURLに変える</a></li>
<li><a href="#section4">ServletAPI にアクセスする標準の方法を提供</a></li>
<li><a href="#section5">必要ならば、ServletContextProvider を拡張できます</a></li>
<li><a href="#section6">Portlet のAction リクエストを自動的に Struts のアクションとレンダリングに分ける</a></li>
<li><a href="#section7">ActionRequest と RenderRequest の間で、アトリビュートを受け渡す</a></li>
<li><a href="#section8">Tags サポート</a></li>
<li><a href="#section9">RequestProcessor が用意されている</a></li>
<li><a href="#section10">Portal モードと、スタンドアローンモードを同時に使える</a></li>
</ul>
</li>
</ul>

<h4>Struts Bridge を使ってみる 目次</h4>

<ul>
<li><a href="#chapter5">Struts アプリケーションを Portlet に対応させる</a>
<ul>
<li><a href="#section11">web.xml を編集する</a></li>
<li><a href="#section12">struts-config.xml を編集する</a></li>
<li><a href="#section13">JSP で使っている Struts HTML Taglib を変更する</a></li>
<li><a href="#section14">struts-portlet-config.xml ファイルを作成する</a></li>
<li><a href="#section15">portlet.xml を作成する</a></li>
</ul>
</li>
</ul>

<h2 id="chapter1">言葉の定義おさらい</h2>

<dl><dt>ActionRequest</dt>
<dd>Portlet#processAction を呼び出すトリガーとなるリクエストのこと。アクションリクエスト。</dd>
<dt>RenderRequest</dt>
<dd>Portlet#render を呼び出すトリガーとなるリクエストのこと。レンダリングリクエスト</dd>
<dt>リクエストURL</dt>
<dd>HttpServletRequest#getRequestURL メソッドで取得できる URL のこと。クライアントがリクエストを行った URL。</dd>
<dt>PortletURL</dt>
<dd>Portlet を呼び出すためのURL。Portlet は、URL とは直接的な結びつきが無いため、通常 RenderResponse クラスが生成した URL を使う。</dd>
<dt>リクエストパラメータ</dt>
<dd>URL の後ろにくっつくパラメータのこと。 http://localhost/servlet/index.do?abc=hoge の場合、'?' より後ろがリクエストパラメータと呼ばれる。</dd>
</dl>

<h2 id="chapter2">Portal Bridgesとは</h2>

Portal Briges は、Portlet 以外で作られた Web フレームワークと、JSR-168 に準拠した Portlet を橋渡しするライブラリです。

Struts、JSF、PHP、Perl、Velocity をサポートしています。

<h2 id="chapter3">Struts をブリッジしてみる</h2>

<h3 id="section1">なんか、めちゃめちゃ難しいとかいわれてますが・・・</h3>

Apache の Portal Briges のページを見ると、Struts のようなひとつのリクエストを一度で解釈するようなフレームワークは、Portlet 環境に乗せにくいとかいてあります。

たしかに、Portlet はリクエストの処理と描画処理がわかれているので、この二つを同時に行うようなフレームワークとは相性が悪い気はします。

そこで、Portal Bridges はどうするかというと、

2回のリクエストをもって Servlet のリクエストが完結するような独自の実装を提供し、Struts 側には影響が少なくてすむような方法をとります。

<h3 id="section2">コードやJSPを変更しなくても Portlet に対応できる。ただし、条件が・・・</h3>

うまいこと作ってあるアプリケーションであれば、コードやJSPファイルを変更せずに Portlet に対応できるそうです。その条件とは

<section>

<h4>条件</h4>

<ol><li>Struts Action configuration にしたがって、適切な MVC アーキテクチャになっていること</li>
<li>JSP ファイルの中で、すべてのリソースへのリンクが Struts Tag を使って記述されていること</li></ol>

</section>

逃げ道として、Struts アプリケーションを単独で動かすことも可能だそうです。その場合には、Portlet の機能は使うことができません。

<h2 id="chapter4">Struts Bridge が提供するもの</h2>

<h3 id="section3">PortletURL を Struts 用のURLに変える</h3>

Struts は、リクエストURL をもとに Action を判断します。一方で、Portlet は、リクエストパラメータで Action を判断します。

ここに、ひとつの大きな差異が生まれているわけで、Struts Bridge は PortletURL （つまりリクエストパラメータ）を Struts が呼び出されたURL（リクエストURL）に変換する機能を持ちます。

何をやるかというと単純で、Portlet コンテナが渡してくれたURLをもとに Struts 側の Servlet で、HttpServletRequest をつくり直してしまうのです。

<h3 id="section4">ServletAPI にアクセスする標準の方法を提供</h3>

Portlet コンテナや Portlet は、独自の実装で ServletContext や HttpServletRequest、HttpServletResponse をラップしています。

そういう、実装に依存しない形で、ServletContext や HttpServletRequest などを使えるようにするために、ServletContextProvider という機能を提供しています。

Portlet の実装に依存しないように ServletAPI を使いたいときに、このクラスを使います。

<h3 id="section5">必要ならば、ServletContextProvider を拡張できます</h3>

ServletContextProvider の実装は、必要に応じて拡張できます。

<h3 id="section6">Portlet のAction リクエストを自動的に Struts のアクションとレンダリングに分ける</h3>

Portlet の仕様で、ActionRequest の場合は、レンダリングの処理を行ってはいけないという決まりがあります。しかし、Struts からしてみればひとつのリクエストには、アクションとレンダリングで対応するというのが普通です。

なので、Portlet コンテナは ActionrRequest のつもりで Portlet を起動したのに、Struts によってレンダリングまでされてしまっては困るのです。

そこで、Struts Bridge は、Struts の中でレンダリングがされても、RenderRequest が来るまでは、内部で保持したまま処理を続けるという機能があるわけです。

他にも色々とやってくれるみたいです。

<ul><li>ActionRequest 時のコンテキストを StrutsRenderContext に保存する</li>
<li>StrutsRenderContext には、ActionForm や ActionMessages/ActionErrors も保存される</li>
<li>RenderRequest がやってきたら、StrutsRenderContext に保存されているコンテキストを復元する</li>
<li>StrutsRenderContext は一度しか復元されない</li>
<li>StrutsRenderContext は ActionRequest 直後の RenderRequest に対して一度だけ機能する</li>
<li>ただし、例外があり、入力エラーがあったときだけ、ちょっと違う動きになる</li>
<li>ActionRequest の後に ActionErrors が見つかったときには、入力元のページに遷移するようになる</li>
<li>Redirect するときは、Web Browser で行うようにするべし</li>
<li>Redirect をStruts の中で行った場合、Portlet が予期しない動きをする可能性がある</li></ul>

<h3 id="section7">ActionRequest と RenderRequest の間で、アトリビュートを受け渡す</h3>

Struts の中では、Action 中で作ったメッセージを JSP に表示したいといったときに、HttpServletRequest#setAttribute を使います。

Struts 中でセットしたアトリビュートは、ActionRequest に格納されます。しかし、レンダリングには RenderRequest が使われるため、このままではアトリビュートの情報が消えてしまいます。

そこで、ActionRequest から RenderRequest に渡したいアトリビュートを XML に記述することで、StrutsServlet が自動で受け渡しを行ってくれる機能があります。(ActionResponse#setRenderParameter をつかいます）

ActionMessages や ActionErrors などは、受け渡すようにする必要があります。

<h3 id="section8">Tags サポート</h3>

JSP の中で使っている Tag を拡張、もしくは Portlet 仕様にあわせたものが提供されます。

JSP の中で使われている URL が ActionURL なのか、 RenderURL なのかは、Portlet からすると、すごく重要なことです。このあたりの設定を JSP を触らずに規定することができる機能が用意されています。

<h3 id="section9">RequestProcessor が用意されている</h3>

PortletRequestPorcessor というものが用意されています。struts-config.xml に、この RequestProcessor を使うように指定します。

なお、PortletTilesRequestProcessor というのも用意されています。Tiles を使うときには、こちらを使います。

<h3 id="section10">Portal モードと、スタンドアローンモードを同時に使える</h3>

Struts アプリケーションを、Portal とスタンドアローンとで、同時に動かすことができます。

<h4>[参考]</h4>

+ <a href="http://www.ja-sig.org/wiki/display/PLT/Struts+Bridge" target="_blank" class="extlink">Struts Bridge - uPortal Wiki</a>

今回は、<a href="http://www.uportal.org/" target="_blank" class="extlink">uPortal</a> という Portlet 製品に Struts アプリケーションを乗せることを考えます。

<h2 id="chapter5">Struts アプリケーションを Portlet に対応させる</h2>

変更が必要なファイル

<ul><li>JSP ファイル（一部）</li>
<li>/WEB-INF/web.xml</li>
<li>/WEB-INF/struts-config.xml</li></ul>

新しく作る必要があるファイル（追加する必要があるファイル）

<ul><li>/WEB-INF/portlet.xml</li>
<li>/WEB-INF/struts-portlet-config.xml</li>
<li>/WEB-INF/lib/portals-bridges-common-xxx-SNAPSHOT.jar</li>
<li>/WEB-INF/lib/portals-bridges-struts-xxx-SNAPSHOT.jar</li>
<li>/WEB-INF/lib/uPortalContextProvider.jar</li></ul>

<h3 id="section11">web.xml を編集する</h3>

ActionServlet の代わりに次のクラスを使うように変更します。

<div class="code">org.apache.portals.bridges.struts.PortletServlet</div>

Portlet を使うように設定を追加します。

<section>

<h4>(Portlet 設定例)</h4>

<pre class="code"><code><span class="tag">&lt;servlet&gt;</span> 
  <span class="tag">&lt;servlet-name&gt;</span>JPetstorePortlet<span class="tag">&lt;/servlet-name&gt;</span> 
  <span class="tag">&lt;display-name&gt;</span>JPetstorePortlet Wrapper<span class="tag">&lt;/display-name&gt;</span> 
  <span class="tag">&lt;description&gt;</span>Automated generated Portlet Wrapper<span class="tag">&lt;/description&gt;</span> 
  <span class="tag">&lt;servlet-class&gt;</span>org.apache.pluto.core.PortletServlet<span class="tag">&lt;/servlet-class&gt;</span> 
  <span class="tag">&lt;init-param&gt;</span> 
      <span class="tag">&lt;param-name&gt;</span>portlet-class<span class="tag">&lt;/param-name&gt;</span> 
      <span class="tag">&lt;param-value&gt;</span>org.apache.portals.bridges.struts.StrutsPortlet<span class="tag">&lt;/param-value&gt;</span> 
  <span class="tag">&lt;/init-param&gt;</span> 
  <span class="tag">&lt;init-param&gt;</span> 
      <span class="tag">&lt;param-name&gt;</span>portlet-guid<span class="tag">&lt;/param-name&gt;</span> 
      <span class="tag">&lt;param-value&gt;</span>jpetstore.JPetstorePortlet<span class="tag">&lt;/param-value&gt;</span> 
  <span class="tag">&lt;/init-param&gt;</span> 
<span class="tag">&lt;/servlet&gt;</span> 
 
<span class="tag">&lt;servlet-mapping&gt;</span> 
  <span class="tag">&lt;servlet-name&gt;</span>JPetstorePortlet<span class="tag">&lt;/servlet-name&gt;</span> 
  <span class="tag">&lt;url-pattern&gt;</span>/JPetstorePortlet/*<span class="tag">&lt;/url-pattern&gt;</span> 
<span class="tag">&lt;/servlet-mapping&gt;</span>
</code></pre>

</section>

portlet-guid パラメータは、[context-name].[portlet-name] で記述します。Pluto の Portlet Definition ID のことです。

<h3 id="section12">struts-config.xml を編集する</h3>

struts-config.xml の &lt;controller&gt; 設定に、次のように記述します。

<pre class="code"><code><span class="tag">&lt;controller <span class="attr">pagePattern=</span><span class="value">&quot;$M$P&quot;</span> <span class="attr">inputForward=</span><span class="value">&quot;false&quot;</span>  
<span class="attr">processorClass=</span><span class="value">&quot;org.apache.portals.bridges.struts.PortletRequestProcessor&quot;</span> /&gt;</span>
</code></pre>

<h3 id="section13">JSP で使っている Struts HTML Taglib を変更する</h3>

JSP 中で使っている struts-html Taglib の URI を次のように変更します。

<pre>&lt;@ taglib uri=&quot;http://portals.apache.org/bridges/struts/tags-portlet-html&quot; prefix=&quot;html&quot; %&gt;</pre>

もしくは

<pre>&lt;@ taglib uri=&quot;http://portals.apache.org/bridges/struts/tags-portlet-html-el&quot; prefix=&quot;html-el&quot; %&gt;</pre>

この変更を行うことで、<strong>html:link</strong>、<strong>html:rewrite</strong> タグが拡張され、次の3つの属性を指定することができるようになります。（true / false で指定可能。排他選択）

<ul><li>actionURL</li><li>renderURL</li><li>resourceURL</li></ul>

何も指定しない場合は、renderURL=&quot;true&quot; が指定されたものとして扱われます。

actionURL、 renderURL、 resourceURL の指定が無い場合にどの種類の URL として扱われるかというのは、次に説明する struts-portlet-config.xml で変更可能です。

struts-portlet-config.xml と Taglib で指定した URL 種類が違う場合は、Taglib の方が優先されます。

<h3 id="section14">struts-portlet-config.xml ファイルを作成する</h3>

このファイルは、taglib によって出力されるURL がどの種類の URL （actionURL、renderURL、resourceURL） かを支持するものです。

<pre class="code"><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> 
<span class="tag">&lt;config&gt;</span> 
  <span class="tag">&lt;render-context&gt;</span> 
    <span class="tag">&lt;attribute <span class="attr">name=</span><span class="value">&quot;errors&quot;</span>/&gt;</span> 
    <span class="tag">&lt;attribute <span class="attr">name=</span><span class="value">&quot;message&quot;</span> <span class="attr">keep=</span><span class="value">&quot;true&quot;</span>/&gt;</span> 
  <span class="tag">&lt;/render-context&gt;</span> 
  <span class="tag">&lt;portlet-url-type&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/add&quot;</span>/&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/switch&quot;</span>/&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/remove&quot;</span>/&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/signoff&quot;</span>/&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/viewCategory&quot;</span>/&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/viewItem&quot;</span>/&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/viewProduct&quot;</span>/&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/viewCart&quot;</span>/&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/newOrder&quot;</span>/&gt;</span> 
    <span class="tag">&lt;render <span class="attr">path=</span><span class="value">&quot;/shop/newOrderForm&quot;</span>/&gt;</span> 
    <span class="tag">&lt;action <span class="attr">path=</span><span class="value">&quot;/shop/listOrders&quot;</span>/&gt;</span> 
    <span class="tag">&lt;resource <span class="attr">path=</span><span class="value">&quot;/images/&quot;</span>/&gt;</span> 
  <span class="tag">&lt;/portlet-url-type&gt;</span> 
<span class="tag">&lt;/config&gt;</span> </pre>

<dl><dt>render-context タグ</dt>
<dd><p>Portlet では、ActionRequest で受け取ったパラメータは、RenderRequest では受け取ることができません。RenderRequest でも受け取るには、ActionRequest の処理中に setRenderParameter メソッドを呼び出す必要があります。</p>

<p>render-context に記述した属性に関しては、ブリッジによって自動的に ActionRequest から RenderRequest に引き渡してくれるようになります。keep 属性を true にすると、別リクエスト間でも保持するようになります。（つまり、セッションに格納されます）</p></dd>
<dt>portlet-url-type タグ</dt>
<dd><p>JSP 中で記述されている URL が、ActionURL なのか、RenderURL なのか、ResponseURL なのかを指定します。</p>

<p>portlet-url-type の属性の default を action とすることで、URL のデフォルトを render から action へ変更することができます。</p>

<pre class="code"><code><span class="tag">&lt;config&gt;</span> 
  <span class="tag">&lt;portlet-url-type <span class="attr">default=</span><span class="value">&quot;action&quot;</span>/&gt;</span> 
<span class="tag">&lt;config&gt;</span>
</code></pre></dd>
</dl>

<h3 id="section15">portlet.xml を作成する</h3>

portlet.xml ファイルを作成します。例を次に記述しておきます。

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> 
<span class="tag">&lt;portlet-app <span class="attr">xmlns=</span><span class="value">&quot;http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd&quot;</span> <span class="attr">version=</span><span class="value">&quot;1.0&quot;</span> 
 <span class="attr">xmlns:xsi=</span><span class="value">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> 
 <span class="attr">xsi:schemaLocation=</span><span class="value">&quot;http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd 
 http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd&quot;</span>&gt;</span> 
   <span class="tag">&lt;portlet&gt;</span> 
    <span class="tag">&lt;portlet-name&gt;</span>JPetstorePortlet<span class="tag">&lt;/portlet-name&gt;</span> 
    <span class="tag">&lt;portlet-class&gt;</span>org.apache.portals.bridges.struts.StrutsPortlet<span class="tag">&lt;/portlet-class&gt;</span> 
    <span class="tag">&lt;init-param&gt;</span> 
      <span class="tag">&lt;name&gt;</span>ServletContextProvider<span class="tag">&lt;/name&gt;</span> 
      <span class="tag">&lt;value&gt;</span>ca.mun.portal.bridges.PortalServletContextProvider<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/init-param&gt;</span> 
    <span class="tag">&lt;init-param&gt;</span> 
      <span class="tag">&lt;name&gt;</span>ViewPage<span class="tag">&lt;/name&gt;</span> 
      <span class="tag">&lt;value&gt;</span>/index.shtml<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/init-param&gt;</span> 
    <span class="tag">&lt;init-param&gt;</span> 
      <span class="tag">&lt;name&gt;</span>HelpPage<span class="tag">&lt;/name&gt;</span> 
      <span class="tag">&lt;value&gt;</span>/help.shtml<span class="tag">&lt;/value&gt;</span> 
    <span class="tag">&lt;/init-param&gt;</span> 
    <span class="tag">&lt;expiration-cache&gt;</span>-1<span class="tag">&lt;/expiration-cache&gt;</span> 
    <span class="tag">&lt;supports&gt;</span> 
      <span class="tag">&lt;mime-type&gt;</span>text/html<span class="tag">&lt;/mime-type&gt;</span> 
      <span class="tag">&lt;portlet-mode&gt;</span>VIEW<span class="tag">&lt;/portlet-mode&gt;</span> 
      <span class="tag">&lt;portlet-mode&gt;</span>HELP<span class="tag">&lt;/portlet-mode&gt;</span> 
    <span class="tag">&lt;/supports&gt;</span> 
    <span class="tag">&lt;portlet-info&gt;</span> 
      <span class="tag">&lt;title&gt;</span>JPetstore<span class="tag">&lt;/title&gt;</span> 
      <span class="tag">&lt;keywords&gt;</span>Struts<span class="tag">&lt;/keywords&gt;</span> 
    <span class="tag">&lt;/portlet-info&gt;</span> 
  <span class="tag">&lt;/portlet&gt;</span> 
<span class="tag">&lt;/portlet-app&gt;</span>
</code></pre>

ca.mun.portal.bridges.PortalServletContextProvider というクラスは、ServletContextProvider の実装クラスです。北米のほうで実装されたものがあるということで、今回はこれを使います。uPortal / pluto で使用可能です。

<section>

<h4>ca.mun.portal.bridges.PortalServletContextProvider.java</h4>

<pre class="code"><code><span class="keyword">package</span> ca.mun.portal.bridges; 
 
<span class="keyword">import</span> javax.portlet.GenericPortlet; 
<span class="keyword">import</span> javax.portlet.PortletRequest; 
<span class="keyword">import</span> javax.portlet.PortletResponse; 
<span class="keyword">import</span> javax.servlet.ServletContext; 
<span class="keyword">import</span> javax.servlet.http.HttpServletRequest; 
<span class="keyword">import</span> javax.servlet.http.HttpServletResponse; 
 
<span class="keyword">import</span> org.apache.pluto.core.impl.ActionRequestImpl; 
<span class="keyword">import</span> org.apache.pluto.core.impl.PortletContextImpl; 
<span class="keyword">import</span> org.apache.pluto.core.impl.RenderRequestImpl; 
<span class="keyword">import</span> org.apache.portals.bridges.common.ServletContextProvider; 
 
<span class="comment">/** 
 * PortalServletContextProvider supplies access to 
 * the Servlet context of uPortal Portlet. 
 *  
 * @author Satish Sekharan 
 */</span> 
<span class="keyword">public</span> <span class="keyword">class</span> PortalServletContextProvider <span class="keyword">implements</span> ServletContextProvider { 
 
  <span class="keyword">public</span> ServletContext getServletContext(GenericPortlet portlet) { 
    <span class="keyword">return</span>
  ((PortletContextImpl) portlet.getPortletContext()).getServletContext();
  }  
 
  <span class="keyword">public</span> HttpServletRequest getHttpServletRequest(GenericPortlet portlet, PortletRequest request) {         
    <span class="keyword">return</span> 
(HttpServletRequest) ((HttpServletRequestWrapper) request).getRequest();
  } 
 
  <span class="keyword">public</span> HttpServletResponse getHttpServletResponse(GenericPortlet portlet, 
        PortletResponse response) { 
    <span class="keyword">return</span>
(HttpServletResponse) ((HttpServletResponseWrapper) response).getResponse();
  }
}
</code></pre>

</section>
-----
EXCERPT:
<img src="http://portals.apache.org/images/apache-portals.gif" style="margin:15px;" border="0" alt="Portal Bridges">
-----
KEYWORDS:
Portal Bridges, Struts Bridge, Portal, Portlet, Java, 覚書
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: uPortal 覚書き
BASENAME: uportal
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 04/19/2006 11:34:36 PM
-----
BODY:
<a href="http://www.uportal.org/" target="_blank"><img src="http://www.uportal.org/images/uportal-head.gif" style="margin:15px;" border="0" alt="uPortal" /></a>
　uPortal とは、北米の方で、大学ポータルとして実績が多いポータルアプリケーション構築のためのフレームワークです。大学での利用実績が多いことから、ログイン関係の機能が実用レベルで最初から取り入れられています。

<div class="infoframe"><img src="/images/info.gif" alt="Information" /> <b>Information</b>
<div>覚書環境：<ul><li>JDK 5.0</li>
<li>Tomcat 5.5.9</li>
<li>HSQLDB 1.7</li>
<li>ant 1.6.2</li>
<li>uPortal 2.5.1 (pluto 1.0.1)</li></ul></div></div>


[参考]
+ <a href="http://www.uportal.org/" target="_blank">uPortal Home Page</a><img src="/images/linkext.gif" alt="linkext" />
+ <a href="http://www.ja-sig.org/wiki/homepage.action" target="_blank">uPortal Wiki</a><img src="/images/linkext.gif" alt="linkext" />
+ <a href="http://www.fair-portal.hull.ac.uk/downloads/uPortalGuide1.pdf" target="_blank">Beginners Guide to uPortal</a><img src="/images/linkext.gif" alt="linkext" /> (PDF)

-----
EXTENDED BODY:
 
<h2>uPortal 覚書</h2>
<h3>言葉の定義</h3><dl><dt>チャネル（channel）</dt>
<dd>単一のデータソースへの通信路のこと。uPortal はこのチャネルを通じて、ポータルコンテンツの提供元から出力データを受け取ります。</dd>

<dt>Portlet Definition ID</dt>
<dd>Portlet にふられる一意なIDのこと。uPortal は、Portlet コンテナとして Pluto を使っているため、Pluto の規約に沿った ID が振られる。
<div class="code">[portlet-context-name].[portlet-name]</div>
</dd>
</dl>


<h3>uPortal のインストール方法</h3>
<h4>前提</h4>　次の環境が入っていること（ただし、必ずしもこの製品でなければならないというわけではない）<ul><li>JDK1.4 or JDK5.0</li>
<li>ant 1.6.2</li>
<li>Tomcat 5.0.19 以上 or Tomcat 5.5 以上</li>
<li>HSQLDB 1.7 以上</li></ul>


<h4>ソースコードをダウンロードする</h4>　<a href="http://www.uportal.org/" target="_blank">uPortal</a><img src="/images/linkext.gif" /> のサイトからソースコードをダウンロードします。


<h4>build.properties を編集する</h4>　次に、uPortal をダウンロードしたフォルダ（{uPortal}とよぶ）に移動して、build.properties を編集します。何を編集するかというと、21行目あたりにある

<div class="code">server.home=C:/_workspace/uPortal/server/jakarta-tomcat-5.5.9</div>


　を、Tomcat がインストールされているディレクトリ（{TOMCAT_HOME}と呼ぶ）に合わせて変更します。もし、<strong>Tomcat 5.5 系を使っている場合</strong>は、35行目あたりにある

<div class="code">webapp.contextFile=uPortal.xml</div> 


をコメントアウトし、48行目あたりにある

<div class="code">webapp.contextFile=uPortal55.xml</div>


のコメントをはずします。


<h4>(JDK1.4 の場合のみ）JAXP をインストールする</h4>　uPortal は JAXP 1.3 を使うので、インストールします。

<ul><li>{uPortal}/lib/jaxp フォルダにある .jar ファイルを {JDK1.4}/lib/endorsed ディレクトリにコピーします</li>
<li>{uPortal}/lib/jaxp フォルダにある .jar ファイルを {TOMCAT_HOME}/common/endorsed ディレクトリにコピーします</li></ul>


<h4>データベースドライバをインストールする</h4>　{uPortal}/hsqldb.jar を、{TOMCAT_HOME}/common/lib にコピーします。


<h4>uPortal の初期化を行う</h4>　最初に、HSQLDB を起動します。{uPortal}/lib ディレクトリに移動して次のコマンドを実行します。

<div class="console">java -cp ./hsqldb.jar org.hsqldb.Server -port 8887 -database uPortalDb</div>


<div class="tipsframe"><img src="/images/tips.gif" /> <b>Tips</b>
<div>ポート番号とデータベース名は好きなものに変更することができます。ただし、変更した場合は、{uPortal}/properties/rdbm.properties の設定を変更した後、再デプロイを行う必要があります。。

HSQLDB 以外のデータベースを使う場合も、{uPortal}/properties/rdbm.properties ファイルを変更して、再デプロイを行います。</div></div>


　データベースが起動したら、ant タスクの initportal を実行します。{uPortal} ディレクトリに移動して次のコマンドを実行します。

<div class="console">ant initportal</div>


　いろいろなものがコンパイルされて、初期化されます。TOMCAT へのデプロイまで終わっているはずです。


<h4>Tomcat を起動する</h4>　データベースが起動し、初期化が完了したら、Tomcat を起動します。{TOMCAT_HOME}/bin/startup.bat を起動します。

　エラー無く起動したら、 http://localhost:8080/uPortal にアクセスします。画面が表示されれば成功です。

<img src="/images/uportal/portal_top.gif" alt="uPortal   の初期画面" />


<h4>uPortal の機能</h4>
<h3>セキュリティ</h3>　管理者は、個別やグループ単位でロールを定義することができます。このロールは、ユーザがどのカテゴリに対する閲覧権限を持つかや、どのチャネルが使用可能か、どの機能が使用可能でどのデータが閲覧可能かなどを定義します。

<div class="tipsframe"><img src="/images/tips.gif" /> <b>Tips</b>
<div>セキュリティ実装は、プラグインによって提供されます。そのため、独自で認証機能をつくり、uPortal に組み込むことができます。</div></div>




<h3>リポジトリ</h3>　ユーザプロファイルも、権限も、チャネルも、データも、すべてリポジトリで管理されます。リポジトリで管理されるオブジェクトは、次のようなプロパティを持ちます。<ol><li>型（Type） ： component、document、link、channel、その他</li>
<li>トピック（Topic） ： このオブジェクトがどのカテゴリに属するのか</li>
<li>説明（Description）</li>
<li>フォーマット（Format）</li>
<li>格納場所（Location） ： このオブジェクトがどこに格納されているか</li>
<li>ロール（Roles）</li>
<li>発行元（Publisher）</li>
<li>リリースノート（Release notes）</li></ol>

<div class="tipsframe"><img src="/images/tips.gif" /> <b>Tips</b>
<div>永続化の仕組みは規定されていません。ODB でもよいし、RDB でもよいし、もちろん XML でもかまいません。</div></div>


<h4>ユーザプロファイル</h4>　ユーザプロファイルは、次のようなプロパティを持つことが決められています。<ol><li>UserID</li><li>プロファイル（Profile）</li><li>プロパティ（Subscription property）</li></ol>


<h4>リソース</h4>　リソースは、階層構造をもつカテゴリに分類されます。複数のカテゴリを持つことができます。ひとつのカテゴリには、親のカテゴリがあり、カテゴリは階層構造を持ちます。

　リソースは、リポジトリで管理されます。


<h3>パーソナライゼーション（個別化）</h3>　ユーザは、ロールに応じたカスタマイズができます。必要なアプリケーションだけを選択して、画面に表示することができます。


<h3>発行 / 購読型</h3>　Portal コンテンツは、発行 / 購読型のスタイルをとります。Porta コンテンツをブラウザから登録することで、発行可能となります。このコンテンツが利用可能なロールをもつユーザは、必要に応じて、コンテンツの購読を行います。これにより自分だけのポータルができあがるのです。


<h4>覚書</h4>
<h3>ユーザ情報は、UP_PERSON_DIR テーブルに格納される</h3>　<div class="tipsframe"><img src="/images/tips.gif" /> <b>Tips</b>
<div>ユーザパスワードは MD5 で暗号化されて格納されます。</div></div>

　ユーザの新規登録は、ant のタスクを使います。

<div class="console">ant md5passwd -Dusername=&lt;&lt;ユーザ名&gt;&gt;</div>




<h3>ポータルの実装</h3>　uPortal はポータル実装に <a href="http://jakarta.apache.org/pluto/" target="_blank">Pluto</a><img src="/images/linkext.gif" /> を使っています。Pluto は、Servlet コンテキストのクロスコンテキストが有効でないと機能しません。

<div class="noticeframe"><img src="/images/notice.gif" /> <b>Notice</b>
<div>Servlet コンテナのクロスコンテキスト（cross Context）を有効にしましょう。</div></div>






<h3>uPortal に Portal アプリケーションを組み込む</h3>　ant のタスクをつかいます。{uPortal} ディレクトリに移動して、

<div class="console">ant deployPortletApp -DportletApp=&lt;&lt;myPortlet.war&gt;&gt;</div>


でデプロイ可能です。

<div class="tipsframe"><img src="/images/tips.gif" /> <b>Tips</b>
<div>uPortal は、同じアプリケーションサーバ上にある Web アプリケーションを監視していて、それが Portlet アプリケーションかどうかを判断しています。ポータルアプリケーションであると判断されると uPortal はアプリケーションに次のような Portlet Definition ID を付与します。</div>

<div class="code">[portlet-context-name].[portlet-name]</div>

<div>　この Portlet Definition ID は、Portlet を購読（Subscribe）するときに必要になります。</div></div>


-----
EXCERPT:
<img src="http://www.uportal.org/images/uportal-head.gif" style="margin:15px;" border="0" alt="uPortal">
-----
KEYWORDS:
uPortal, Portal, Portlet, ポータル, ポートレット, 大学, ポータルアプリケーション
-----


-----
--------
AUTHOR: hamasyou
TITLE: たのしいRuby―Rubyではじめる気軽なプログラミング
BASENAME: rubyruby
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 04/27/2006 01:21:39 AM
TAGS: Ruby,わかりやすい,定番
-----
BODY:
Ruby をはじめるなら、この本からはじめるのをお勧めします。かなりわかりやすいです。わかりづらいだろうなという部分に関しては、ちゃんと詳しく説明がされているし、ちょっと気になるなということはコラムが別に用意されているという具合です。『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274063852/sorehabooks-22/250-1891990-4739433?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">Rubyプログラミング入門</a><img src="/images/linkext.gif" alt="linkext" />』 より全然読みやすく理解しやすいです。

この本で Ruby の基本を抑えたら、あとはWeb上の Ruby リファレンスマニュアルで何とかなるのではないかと思います。

<h4>参考</h4>

+ <a href="http://www.ruby-lang.org/ja/man/?cmd=view;name=Ruby%A5%EA%A5%D5%A5%A1%A5%EC%A5%F3%A5%B9%A5%DE%A5%CB%A5%E5%A5%A2%A5%EB;navi=Ruby%A5%EA%A5%D5%A5%A1%A5%EC%A5%F3%A5%B9%A5%DE%A5%CB%A5%E5%A5%A2%A5%EB" target="_blank" class="extlink">Ruby リファレンスマニュアル</a>

+ <a href="http://d.hatena.ne.jp/brazil/20050816/1124136877" target="_blank" class="extlink">[翻訳]RubyについてJavaプログラマが知るべき10の事柄</a>
-----
EXTENDED BODY:
<h2>Ruby 覚書 目次</h2>

<ul>
<li><a href="#chapter1">基本文法</a>
</li>
<li><a href="#chapter2">基本クラス</a>
</li>
<li><a href="#chapter3">コマンドライン</a>
</li>
<li><a href="#chapter4">変数</a>
<ul>
<li><a href="#section1">組み込み変数</a></li>
</ul>
</li>
<li><a href="#chapter5">メソッド</a>
<ul>
<li><a href="#section2">組み込み関数</a></li>
</ul>
</li>
<li><a href="#chapter6">クラス</a>
<ul>
<li><a href="#section3">クラスメソッドの定義方法</a></li>
<li><a href="#section4">既存のクラスにメソッドを追加する</a></li>
<li><a href="#section5">クラスの継承</a></li>
<li><a href="#section6">メソッドの公開修飾子</a></li>
</ul>
</li>
<li><a href="#chapter7">モジュール</a>
<ul>
<li><a href="#section7">Mix-in</a></li>
</ul>
</li>
<li><a href="#chapter8">例外処理</a>
<ul>
<li><a href="#section8">例外を発生させる</a></li>
<li><a href="#section9">catch と throw</a></li>
</ul>
</li>
<li><a href="#chapter9">数値クラス (Integer)</a>
</li>
<li><a href="#chapter10">配列クラス (Array)</a>
</li>
<li><a href="#chapter11">文字列クラス (String)</a>
</li>
<li><a href="#chapter12">ハッシュクラス (Hash)</a>
</li>
<li><a href="#chapter13">正規表現クラス (Regexp)</a>
</li>
<li><a href="#chapter14">入出力クラス (I/O)</a>
</li>
<li><a href="#chapter15">File クラスと Dir クラス</a></li>
</ul>

<h2 id="chapter1">基本文法</h2>

「<code>'</code>(シングルクウォート)」 で囲まれた文字列の中は、エスケープ 「<code>\</code>(バックスラッシュ)」 記法が使えない。

<code>puts</code> メソッドは、行の終わりに改行コードが付与される。

<code>p</code> メソッドは、オブジェクトの状態に合わせた表示を行う。

コメントの表記法には、「<code>#</code> (シャープ)」 と 「<code>=begin</code>」、「<code>=end</code>」 で囲む方法の2種類がある。

<pre class="code"><code><span class="comment"># if - else 構文 </span>
<span class="keyword">if</span> 条件 
  処理 
<span class="keyword">elsif</span>  条件 
  処理 
<span class="keyword">else</span> 
  処理 
<span class="keyword">end</span> 
 
 
<span class="comment"># unless 構文 </span>
<span class="keyword">unless</span> 条件 
  処理 
<span class="keyword">end</span> 条件 
 
 
<span class="comment"># while 構文 </span>
<span class="keyword">while</span> 条件 
  処理 
<span class="keyword">end</span> 
 
 
<span class="comment"># times メソッド </span>
繰り返し回数.times { 
  処理 
} 
 
 
<span class="comment"># each メソッド </span>
オブジェクト.each {|n| 
  処理 
} 
 
 
<span class="comment"># case 構文 </span>
<span class="keyword">case</span> 比較したいオブジェクト 
<span class="keyword">when</span> 値1 
  処理 
<span class="keyword">when</span> 値2 
  処理 
<span class="keyword">when</span> 値3 
  処理 
<span class="keyword">else</span> 
  処理 
<span class="keyword">end</span> 
 
 
<span class="comment"># if 構文 の変形版 </span>
print <span class="literal">"a < b"</span> <span class="keyword">if</span> a < b 
 
 
<span class="comment"># for - in 構文 </span>
<span class="keyword">for</span> 変数 <span class="keyword">in</span> 開始値 .. 終了値 
  処理 
<span class="keyword">end</span> 
 
 
<span class="comment"># until 構文 </span>
<span class="keyword">until</span> 条件 
  処理 
<span class="keyword">end</span> 
 
 
<span class="comment"># loop 構文 (ひたすらループを行う) </span>
<span class="keyword">loop</span> { 
  処理 
} 
</code></pre>

<dl>
<dt class="tips">case 文の比較は ===</dt>
<dd>case 文の条件比較には 「 <code>===</code> 」 演算子が使われる。基本的には 「 <code>==</code> 」 と同じ意味だが、もう少しゆるい意味での一致を判断する。</dd>
</dl>

<dl>
<dt class="tips">Range オブジェクト</dt>
<dd><code>for in</code> 構文には Range オブジェクトが使える。<code>Range</code> オブジェクトは開始値と終了値を持つオブジェクトである。「 <code>..</code> 」 と 「 <code>...</code> 」 の違いは、「 <code>..</code> 」 は <code>array[n]</code> から <code>array[m]</code> までを繰り返すのに対し、「 <code>...</code> 」 は <code>array[n]</code> から <code>array[m-1]</code> までを繰り返す点。「 <code>..</code> 」 が使えるところならどこでも 「 <code>...</code> 」 が使える。<code>for in</code> 構文には、配列をとることもできる。</dd>
</dl>

<dl>
<dt class="tips">繰り返しの制御</dt>
<dd>繰り返し構文には、「 <code>break</code> (繰り返しを終了する)」、「 <code>next</code> (次の条件で繰り返しを行う continue )」、「 <code>redo</code> (同じ条件で繰り返しを行う)」 のキーワードが使える。</dd>
</dl>

条件には、<code>true / false / nil</code> で判断できる条件を記述する。<code>false と nil</code> は 偽、それ以外は 真 として処理される。

<dl>
<dt class="tips">Tips</dt>
<dd>数値の 0 も真として判定される。</dd>
</dl>

<h4>メソッド定義</h4>

<pre class="code"><code><span class="keyword">def</span> メソッド名(引数1, 引数2) 
  処理 
<span class="keyword">end</span> 
</code></pre>

他のライブラリを取り込みたいときは 「 <code><span class="keyword">require</span></code> &quot;ライブラリファイル名&quot; 」 を使う。ライブラリファイル名には拡張子 「.rb」 は不要。

<h3 id="chapter2">基本クラス</h3>

配列を生成するときには 「 <code>[obj]</code> 」 を使う。

ハッシュを生成するときは 「 <code>{key =&gt; value}</code> 」 を使う。

ハッシュオブジェクトにアクセスするときには 「 <code>オブジェクト[key]</code> 」 で行う。

配列のサイズを取得するには 「<code>size</code> 」 メソッドを使う。

<h4>ハッシュの each は、ブロック変数を2つとる</h4>

<pre class="code"><code>hash.each {|key, val| 
  処理 
<span class="keyword">end</span> 
</code></pre>

Ruby では、正規表現は、「 <code><b>/パターン/ =~ &quot;文字列&quot;</b></code> 」 のように、パターンを左側に置くのが慣習になっている。

パターンマッチングの結果は、数値で返される。マッチングしなかった場合は 「 <code><span class="keyword">nil</code></span> 」 が返される。

<h3 id="chapter3">コマンドライン</h3>

コマンドライン引数は 「 <code><b>ARGV</b></code> 」 で受け取る。これは配列オブジェクトである。

オープンしたファイルハンドルの 「 <code>read</code> 」 メソッドは、内容をテキストとして返す。一行ずつ取り出したいときは 「 <code>gets</code> 」 を使う。

ruby を起動する際に、「 <code><b>-e 'command'</b></code> 」 を指定すると、直接コマンドを実行する。

<h3 id="chapter4">変数</h3>

表記法によって変数の意味が変わる。

<table>
<caption>変数の表記法</caption>
<tr><th>種類</th><th>表記法</th><th>例</th></tr>
<tr><td>ローカル変数</td><td>先頭がアルファベットの小文字か、「_ (アンダーバー)」で始まるもの</td><td> hoge, foo, _bar</td></tr>
<tr><td>グローバル変数</td><td>先頭が 「 <code>$</code> 」 で始まるもの</td><td>$global</td></tr>
<tr><td>インスタンス変数</td><td>先頭が 「 <code>@</code> 」 で始まるもの</td><td>@name, @age</td></tr>
<tr><td>クラス変数</td><td>先頭が 「 <code>@@</code> 」 で始まるもの</td><td>@@count</td></tr>
<tr><td>定数</td><td>先頭がアルファベットの大文字で始まるもの</td><td>Parameter, RUBY_VERSION</td></tr>
</table><br />

オブジェクトの同一性 (ID) を取得するには 「 <code>id</code> 」 メソッドを使う。ID で比較するには、「 <code>equal?</code> 」 メソッドを使う。値の比較を行うときは 「 <code>==</code> 」 演算子を使う。厳密な値の比較を行いたいときは 「 <code>eql?</code> 」 メソッドを使う。

<dl>
<dt class="tips">変数の式展開</dt>
<dd>「 &quot; &quot; 」 で囲んだ文字列の中で変数を展開するには 「 <code><b>#{ }</b></code> 」 を使う。</dd>
</dl>

<dl>
<dt class="tips">Tips</dt>
<dd>Ruby では、演算子もクラスのメソッドとして定義されている。そのため、演算子のオーバーライドが可能である。</dd>
</dl>

<h4 id="section1">組み込み変数</h4>

組み込み変数に関しては、<a href="http://www.ruby-lang.org/ja/man/?cmd=view;name=%C1%C8%A4%DF%B9%FE%A4%DF%CA%D1%BF%F4" target="_blank" class="extlink">Rubyリファレンスマニュアル (組み込み変数)</a> を参照。

組み込み定数に関しては、<a href="http://www.ruby-lang.org/ja/man/?cmd=view;name=%C1%C8%A4%DF%B9%FE%A4%DF%C4%EA%BF%F4" target="_blank" class="extlink">Rubyリファレンスマニュアル (組み込み定数)</a> を参照。

<h3 id="chapter5">メソッド</h3>

Ruby では、真偽値を返すメソッドには 「 <code><b>?</b></code> 」 を慣習としてつける。例： <code>obj.equal?</code>

破壊的メソッドには 「 <code><b>!</b></code> 」 を慣習としてつける。 例： <code>&quot;&nbsp;&nbsp; 破壊的メソッド&nbsp;&nbsp; &quot;.chomp!</code>

<dl>
<dt class="tips">破壊的メソッド</dt>
<dd>メソッド名に 「 <code><b>!</b></code> 」 がついたメソッドを破壊的メソッドと呼ぶ。このメソッドは、自分自身の状態を変更する。</dd>
</dl>

引数をとらないメソッドは、「 <code>()</code> 」 をつけないのが慣習らしい。

メソッドの引数にはデフォルト値を設定することができる。「 <code>引数名 = 値</code> 」 と記述する。

メソッドの戻り値には 「 <code><span class="keyword">return</b></code></span> 」 を使う。<code>return</code> を書かないときは、メソッドの最後に評価された値が戻り値になる。<code>return</code> の引数を省略すると <code>nil</code> を返すことになる。

メソッド引数に「*」をつけると、可変引数をまとめて配列として受け取ることが出来る。

<h4>可変引数の例</h4>

<pre class="code"><code><span class="keyword">def</span> print_all(*args) 
    p args 
<span class="keyword">end</span>  
print_all(1, 2, 3, 4, 5) <span class="comment">#=> [1, 2, 3, 4, 5]</span>
</code></pre>

<h4 id="section2">組み込み関数</h4>

組み込み関数に関しては <a href="http://www.ruby-lang.org/ja/man/?cmd=view;name=%C1%C8%A4%DF%B9%FE%A4%DF%B4%D8%BF%F4" target="_blank" class="extlink">Rubyリファレンスマニュアル (組み込み関数)</a> を参照。

<h3 id="chapter6">クラス</h3>

インスタンスが何クラスのオブジェクトなのかを知るには 「 <code>class</code> 」 メソッドを使う。

インスタンスがクラスに属するかどうかを判定するには 「 <code>instance_of?</code> 」 メソッドを使う。

インスタンスがクラスに属するかどうかを、継承関係までさかのぼって判定するには 「 <code>is_a?</code> 」 メソッドを使う。

コンストラクタは 「 <code><b>initialize</b></code> 」 メソッド。

インスタンス変数のアクセサメソッドは、「 <code>attr_reader :属性</code> 」、「 <code>attr_writer :属性</code> 」、「 <code>attr_accessor :属性</code> 」 で定義する。

クラスの定数にアクセスするには 「 <code>クラス名::定数</code> 」 といった表記を使う。

<h4>アクセサメソッドの定義例</h4>

<pre class="code"><code><span class="keyword">class</span> クラス名 
 
  attr_accessor :name 
  attr_reader :age 
 
  def initialize(引数)     <span class="comment"># コンストラクタ </span>
    @name = <span class="literal">"hamasyou"</span> 
    @age = 23 
  <span class="keyword">end</span> 
<span class="keyword">end</span> 
</code></pre>

<h4 id="section3">クラスメソッドの定義方法</h4>

クラスメソッドの定義には3種類ある。「 <code>def クラス名.メソッド名 end</code> 」、「<code>class &lt;&lt; クラス名 def メソッド名 end end</code> 」、「<code>def self.メソッド名 end</code> 」。

<h4>クラスメソッド定義方法</h4>

<pre class="code"><code><span class="comment"># 定義方法1 </span>
<span class="keyword">class</span> クラス名 
  <span class="keyword">def</span> クラス名.メソッド名 
    処理 
  <span class="keyword">end</span>  
<span class="keyword">end</span>  
 
 
<span class="comment"># 定義方法2 </span>
<span class="keyword">class</span> クラスB 
<span class="keyword">end</span> 
 
<span class="keyword">class</span> << クラスB 
  <span class="keyword">def</span> メソッド名 
    処理 
  <span class="keyword">end</span>  
<span class="keyword">end</span>  
 
 
<span class="comment"># 定義方法3 </span>
<span class="keyword">class</span> クラス名 
  <span class="keyword">def</span> <span class="keyword">self</span>.メソッド名 
    処理 
  <span class="keyword">end</span>  
<span class="keyword">end</span>  
</code></pre>

<h4 id="section4">既存のクラスにメソッドを追加する</h4>

定義済みのクラスにメソッドを追加するには、同名のクラスを定義し、その中でメソッドを定義すればよい。

<h4>既存のクラスの拡張</h4>

<pre class="code"><code><span class="keyword">class</span> String 
  <span class="keyword">def</span> len 
    <span class="keyword">return</span> <span class="keyword">self</span>.length 
  <span class="keyword">end</span>  
<span class="keyword">end</span>  
</code></pre>

<dl>
<dt class="tips">self 変数</dt>
<dd>メソッドの内部から自分自身を参照するには 「 <code><b>self</b></code> 」 変数を使う。</dd>
</dl>

<h4 id="section5">クラスの継承</h4>

クラスの継承は 「 <code><b>class サブクラス &lt; スーパークラス end</b></code> 」 で行う。

<dl>
<dt class="tips">super メソッド</dt>
<dd>メソッドの内部から 「 <code><b>super</b></code> 」 メソッドを呼び出すことで、スーパークラスの同名のメソッドを呼び出すことができる。</dd>
</dl>

<h4 id="section6">メソッドの公開修飾子</h4>

「 <code><b>public</b></code> (インスタンスメソッドとして公開) 」、「 <code><b>protected</b></code> (クラスの内部と同一クラス (サブクラスを含む) 内からレシーバ経由で呼び出せる) 」、「 <code><b>private</b></code> (クラス内部からのみ呼び出せる) 」。

<h4>公開修飾子の例</h4>

<pre class="code"><code><span class="keyword">class</span> クラス名 
  <span class="keyword">def</span> パブリックメソッドA 
    処理 
  <span class="keyword">end</span>  
  public :メソッドA 
 
  <span class="keyword">def</span> プライベートメソッドA 
    処理 
  <span class="keyword">end</span>  
  private :プライベートメソッドA 
 
  public  <span class="comment"># 引数を指定しない場合は、ここ以降が  public になる  </span>
 
  <span class="keyword">def</span> パブリックメソッドB 
    処理 
  <span class="keyword">end</span> 
<span class="keyword">end</span>  
</code></pre>

<dl>
<dt class="tips">レシーバとは</dt>
<dd>「 <code>オブジェクト.メソッド（引数）</code> 」 の形式で呼び出されるオブジェクトのことを、レシーバと呼ぶ。メソッド呼び出しのメッセージを受け取るものという意味。</dd>
</dl>

<h3 id="chapter7">モジュール</h3>

モジュールは、クラスと違いインスタンス化することができない。モジュールは継承することができない。

モジュールは、名前空間を切る役割を持つ。「 <code><b>モジュール名::メソッド名</b></code> 」 といった形式でメソッドを呼び出すことになる。

「 <code><span class="keyword">include</b></code> モジュール名</span> 」 キーワードを使うと、モジュールを現在の名前空間に取り込むことができる。つまり、「 <code>メソッド名</code> 」で呼び出すことができるようになる。

<h4 id="section7">Mix-in</h4>

モジュールをクラスに取り込むことを Mix-in と呼ぶ。クラス定義の中で 「 <code>include</code> 」 を行うことでクラスにモジュールで定義されているメソッドや定数を取り込むことができる。

<h4>モジュールの作成例</h4>

<pre class="code"><code><span class="keyword">module</span> モジュール名 
  <span class="keyword">def</span> モジュールメソッドA 
    処理 
  <span class="keyword">end</span>  
 
 
  <span class="comment"># モジュールメソッドとして公開する </span>
  module_function :モジュールメソッドA
<span class="keyword">end</span>
</code></pre>

<dl>
<dt class="notice">module_function として公開しなければ使えない</dt>
<dd>モジュールで定義したメソッドは、「 <code>module_function</code> 」 キーワードを使って公開しなければ、「 <code>モジュール名::メソッド名</code> 」 の形で呼び出すことができない。「 <code>module_function</code> 」 がされていないメソッドは、同一モジュール内か、「 <code>include</code> 」 で取り込まれたときしか呼び出すことができない。</dd>
</dl>

<h3 id="chapter8">例外処理</h3>

<h4>例外処理構文</h4>

<pre class="code"><code><span class="keyword">begin</span> 
  <span class="comment"># 例外が起きる可能性のある処理 </span>
<span class="keyword">rescue</span> 例外クラスA => 変数 
  <span class="comment"># 例外クラスAが起きたときの処理 </span>
<span class="keyword">rescue</span> => 変数 
  <span class="comment"># その他の例外が起きたときの処理 </span>
<span class="keyword">ensure</span> 
  <span class="comment"># 例外が起きる起きない関わらず </span>
  <span class="comment"># 絶対に呼び出される処理 </span>
<span class="keyword">end</span>  
</code></pre>

<dl>
<dt class="tips">処理をやり直す</dt>
<dd>「 <code>rescue</code> 」 で例外を捕捉した場合、「 <code><b>retry</b></code> 」 キーワードを使うことで 「 <code>begin</code> 」 から処理をやり直しすることができる。</dd>
</dl>

<h4 id="section8">例外を発生させる</h4>

「 <code><span class="keyword">raise</b></code> メッセージ</span> 」 か 「 <code><span class="keyword">raise</b></code> 例外クラス [, メッセージ]</span> 」 で例外を発生させることができる。

<dl>
<dt class="tips">rescue 節の中で raise すると</dt>
<dd>rescue 節 の中で 「 <code>raise</code> 」 を単独で呼び出すと、最後に発生した例外 (<b>$!</b>) を再スローすることができる。</dd>
</dl>

<dl>
<dt class="info">$! と $@</dt>
<dd>「 <code><b>$!</b></code> 」 は最後に起こった例外を表す。「 <code><b>$@</b></code> 」 は例外が起こった場所に関する情報を表す。</dd>
</dl>

<h4 id="section9">catch と throw</h4>

Ruby における 「 <code><span class="keyword">catch</b></code> と <span class="keyword">throw</span></span> 」 は <code>goto</code> 文として使うことができる。「 <code>catch</code> 」 の引数に指定したシンボルが、catch 節中でスローされたら、catch 節を抜け出すことができます。

<h4>catch - throw の例</h4>

<pre class="code"><code>catch (:exit) 
  <span class="keyword">if</span> a == 10 
    <span class="keyword">if</span> b == 20 
      <span class="keyword">if</span> c == 30 
        throw :exit, <span class="literal">"catch の戻り値になる"</span> 
      <span class="keyword">end</span>  
    <span class="keyword">end</span>  
  <span class="keyword">end</span>  
<span class="keyword">end</span>  
</code></pre>

<blockquote>

<strong>シンボルとは</strong>、Ruby が内部でメソッド名などの識別に使っている数値で、任意の文字列に対して異なった値が割り当てられます。メソッド名の先頭に 「:」 をつけることで、対応するシンボルオブジェクトを得ることができます。

<cite>『たのしいRuby』 P.125</cite>

</blockquote>

<h3 id="chapter9">数値クラス (Integer)</h3>

<pre>
x.divmod(y)
x を y で割ったときの商とあまりを配列にして返す。
 
x.remainder(y)
x を y で割ったときの余りを返す。符号は、x の符号に一致する。
 
obj.to_xxx
obj を 別の型に変換する。
to_i は Integer 型、to_f は Float 型にそれぞれ変換する。
 
n.times {|i| ...}
n 回の繰り返しを行う。i には 0 .. n-1 の値が渡される。
 
from.upto(to) {|i| ...}
from から to に達するまで i を加算しながら繰り返す。
 
from.down(to) {|i| ...}
from から to に達するまで i を減算しながら繰り返す。
 
from.step(to, step) {|i| ...}
from から to に達するまで step を加算しながら繰り返す。
</pre>

<h3 id="chapter10">配列クラス (Array)</h3>

<pre>
%w(あ か さ た な)
#=&gt; [&quot;あ&quot;, &quot;か&quot;, &quot;さ&quot;, &quot;た&quot;, &quot;な&quot;]
 
&quot;あ か さ た な&quot;.split()
#=&gt; [&quot;あ&quot;, &quot;か&quot;, &quot;さ&quot;, &quot;た&quot;, &quot;な&quot;]
 
[&quot;あ&quot;, &quot;か&quot;, &quot;さ&quot;, &quot;た&quot;, &quot;な&quot; ][1 .. 3]
#=&gt; [&quot;か&quot;, &quot;さ&quot;, &quot;た&quot;]
 
[&quot;あ&quot;, &quot;か&quot;, &quot;さ&quot;, &quot;た&quot;, &quot;な&quot; ][1 ... 3]
#=&gt; [&quot;か&quot;, &quot;さ&quot;]
 
[&quot;あ&quot;, &quot;か&quot;, &quot;さ&quot;, &quot;た&quot;, &quot;な&quot; ][1, 3]
#=&gt; [&quot;か&quot;, &quot;さ&quot;, &quot;た&quot;]
 
array.slice(n .. m)
array 配列の n 番目から m 番目 までの配列を返す。
array[n .. m] と同じ処理。
 
array.slice(n, len)
array 配列の n 番目から len 要素分 の配列を返す。
arrray[n, m] と同じ処理。
 
array.value_at(n1, n2, ...)
array 配列の n1 番要素 n2 番要素 ... を集めた配列を返す。
[&quot;あ&quot;, &quot;か&quot;, &quot;さ&quot;, &quot;た&quot;, &quot;な&quot; ].value_at(0, 1, 3)
#=&gt; [&quot;あ&quot;, &quot;さ&quot;, &quot;な&quot;]
 
array.unshift(obj)
配列の先頭に obj を追加する。
 
array.shift()
配列の先頭から要素を一つ取り出し返す。配列は詰められる。
 
array.push(obj)
obj を配列の末尾に追加する。
 
array.pop()
配列の末尾の要素を一つ取り出し返す。配列からはなくなる。
 
array.uniq()
array.uniq!()
配列中の重複する要素を削除した配列を返す。
 
array.collect {|item| ...}
array.collect! {|item| ...}
配列の各要素をブロックで評価した値と入れ替える。
要素の数は変わらない。
 
array.reverse()
array.reverse!()
配列の要素を逆順に並び替える。
 
array.sort()
array.sort!()
array.sort {|a, b| ...}
array.sort! {|a, b| ...}
配列の要素を並び替える。
並び替えの方法を指定する場合はブロックを伴う方を使う。
 
array.each {|item| ...}
array.each_with_index {|item, i| ...}
配列の要素をイテレーションする。
each_with_index は、配列のインデックスがブロックに渡される。
 
array.reject {|item| ...}
array.reject! {|item| ...}
要素を評価した結果が真になったものを除いた配列を作る。
</pre>

<h3 id="chapter11">文字列クラス (String)</h3>

「 <code>&quot;</code> 」 で囲まれた文字列中で 「 <code><b>#{ }</b></code> 」 を使うと、変数を展開できる。

「 <code>%Q</code>、 <code>%q</code> 」 を使うと、「 &quot; 」 と 「 ' 」 の代わりになる。「 <code>%Q</code> 」 が 「 &quot; 」 の代わりで、「 <code>%q</code> 」 が 「 ' 」 の代わりになる。

ヒアドキュメントも使える。

<pre>
%Q, %q
%Q| 「" "」 や 「' '」の代わりに使える\n |
%q{ 区切り文字には何でも使えるみたい }
 
sprintf(format, arg, ...)
printf と同じ処理を行うが、画面表示ではなく、文字列を作る。
 
str.size
str.length
文字列のバイト数を返す。長さではないので注意すること。
 
str.chop
str.chop!
str.chomp
str.chomp!
chop は文字列の最後の一文字を切り捨てる。
chomp は文字列の最後に改行があれば切り捨てる。
 
str.index(&quot;abc&quot;)
str.rindex(&quot;abc&quot;)
文字列が最初に現れるインデックスを返す。
rindex は後ろから調べる。
 
str.include?(&quot;abc&quot;)
文字列が含まれているかどうかを返す。
 
str.sub(pattern, replace)
str.sub(pattern) {|matched| ...}
str.sub!(pattern, replace)
str.sub!(pattern) {|matched| ...}
str.gsub(pattern, replace)
str.gsub(pattern) {|matched| ...}
str.gsub!(pattern, replace)
str.gsub!(pattern) {|matched| ...}
sub は最初にパターンにマッチした部分を置き換える。
ブロックを伴う場合はブロックの戻り値で置き換える。
gsub はパターンにマッチした部分すべてを置き換える。
 
str.upcase
str.upcase!
str.downcase
str.downcase!
str.swapcase
str.swapcase!
str.capitalize
str.capitalize!
メソッドの名の通り。
</pre>

<dl>
<dt class="tips">日本語の文字列の長さを調べる</dt>
<dd>正規表現を使うと日本語も正しく文字数を調べられる。

<ul>
<li>'オブジェクト指向スクリプト言語Ruby'.split(//e).length # 文字コードが EUC-JP の場合</li>
<li>'オブジェクト指向スクリプト言語Ruby'.split(//s).length # 文字コードが Shift_JIS の場合</li>
</ul>
</dd>
</dl>

<h3 id="chapter12">ハッシュクラス (Hash)</h3>

ハッシュを作るには 「 <code>{ }</code> 」 を使う。「 <code>key =&gt; value</code> 」 の形で要素を作る。

<pre>
hash.keys
hash.each_key {|key| ...}
キーを返す。
 
hash.values
hash.each_value {|value| ...}
値を返す。
 
hash.each {|key, value| ...}
キーと値をペアで返す。
 
hash.has_key?(key)
hash.has_value?(val)
has_key? はハッシュがキーを持っているかを判定する。
has_value? はハッシュが値を持っているかを判定する。
 
hash.size
ハッシュのキーの数を返す
</pre>

<h3 id="chapter13">正規表現クラス (Regexp)</h3>

パターンマッチングは、「 <code><b>/pattern/ =~ 文字列</b></code> 」 の形で行うことができる。マッチしたときは、その位置を返す。マッチしなければ 「 <code>nil</code> 」 を返す。

「 <code>^</code> や <code>$</code> 」 は、行頭や行末にマッチする。ただし、「 <code>&quot;abc\nhoge&quot;</code> 」 のように、文字列の途中に改行がある場合に 「 <code>^</code> 」 を使うと <code>abc と hoge</code> にマッチすることになる。

文字列の先頭、末尾にマッチングさせたいときには 「 <code><b>\A</b></code> と <code><b>\Z</b></code> 」 を使う。<code>\A</code> は文字の先頭に、<code>\Z</code> は文字の末尾にそれぞれマッチする。

<dl>
<dt class="tips">%r の使い方</dt>
<dd><b>%r</b> を使うと、パターン中で 「 / 」 を使いたいときに便利。例： 「 <code>%r{this is a pattern} や %r|this is a pattern|</code> 」</dd>
</dl>

正規表現の詳しい表記法に関しては <a href="http://www.ruby-lang.org/ja/man/?cmd=view;name=%C0%B5%B5%AC%C9%BD%B8%BD" target="_blank" class="extlink">Rubyリファレンスマニュアル (正規表現)</a> を参考にすること。

<h3 id="chapter14">入出力クラス (I/O)</h3>

標準入力(STDIN) と標準出力(STDOUT) は、バッファリングされる。標準エラー出力(STDERR) はバッファリングされずにすぐにフラッシュされる。

それぞれ、<code>$stdin、$stdout、$stderr</code> のグローバル変数か、<code>STDIN、STDOUT、STDERR</code> の組み込み定数で参照できる。

<pre>
File.open(filename, &quot;r|r+|w|w+|a|a+|b&quot;) {|f| ...}
 　ファイルを開く。ブロックを抜けるとファイルが閉じられる。
 
io.readlines
I/O オブジェクトの各行を配列にして返す。一気に読み出す。
 
io.each {|line| ...}
I/O オブジェクトをイテレーションする。
 
io.lineno
現在の読み込み行数を返す。
 
io.gets
io.puts
文字列の最後に改行コードをつけて読み込む / 書き込む。
 
io.getc
io.putc
文字列を1バイト読み込む / 書き込む。
 
io.printf(format, arg1, arg2)
フォーマットして I/O オブジェクトに出力する。
 
io.write(str)
文字列を書き込む。
 
io.flush
出力バッファをフラッシュする。
</pre>

<h3 id="chapter15">File クラスと Dir クラス</h3>

ファイルを表すのが 「 <code>File</code> 」 クラス。ディレクトリを表すのが 「 <code>Dir</code> 」 クラス。

<dl>
<dt class="tips">File クラスの拡張</dt>
<dd>ファイルクラスに 「 <code>copy や move</code> 」 といったメソッドを拡張するためには、「 <code>require &quot;ftools&quot;</code> 」 を行う。</dd>
</dl>

<dl>
<dt class="tips">Find モジュール</dt>
<dd>「 <code>require &quot;find&quot;</code> 」 で取り込まれる <code><b>Find</b></code> モジュールを使うと、ファイルの検索等ができるようになる。

<pre class="code"><code>require <span class="literal">"find"</span> 
Fild::find(dir) {|path| ...} 
</code></pre>
</dd>
</dl>

<dl>
<dt class="tips">Tempfile クラス</dt>
<dd>「 <code>require &quot;tmpfile&quot;</code> 」 で使えるようになる <code><b>Tempfile</b></code> クラスは、テンポラリファイルを扱うクラス。<code>new</code> で作成したテンポラリファイルは、<code>close</code> が行われると削除される。ただし、実際に削除されるのは GC(ガーベージコレクション) が発生したとき。<code>close(true)</code> を行うことですぐに削除することもできる。</dd>
</dl>

<pre>
File.rename(before, after)
ファイル名を変更するクラスメソッド。
 
File.delete(filename)
ファイルを削除するクラスメソッド。
 
File.basename(path [, suffix])
パスの最後の &quot;/&quot; 以降を返すクラスメソッド。
suffix を与えると、その部分を取り除いて返す。
File.basename('/home/ruby.rb', '.rb')  #=&gt; ruby
 
File.dirname(path)
ディレクトリのパスを返すクラスメソッド。
File.dirname('/usr/bin/ruby')  #=&gt; /usr/bin
 
File.split(path)
パスをディレクトリとファイルに分けて配列で返すクラスメソッド。
カレントのファイルパスを与えると、ディレクトリは &quot.&quot; になる。
File.split('/home/hamasyou/ruby.rb')  
    #=&gt; ['/usr/hamasyou', 'ruby.rb']
 
Dir.pwd
現在のディレクトリを返すクラスメソッド。
 
Dir.chdir(path)
現在のディレクトリを変更するクラスメソッド。
 
Dir.glob(filename)
filename にマッチするファイル名を返すクラスメソッド。
filename にワイルドカードが使える。
&quot;*&quot; 全ファイルにマッチ
&quot;*/*.html&quot; サブディレクトリの .html ファイルにマッチ
&quot; **/*.html&quot; カレントディレクトリ以下の .html ファイルにマッチ
 
Dir.mkdir(dirname)
ディレクトリを作成するクラスメソッド。
 
Dir.rmdir(dirname)
ディレクトリを削除するクラスメソッド。
削除するディレクトリは中身が空でないといけない。
 
dir.each {|f| ...}
開いているディレクトリに含まれるコンテンツを返す。
カレントディレクトリ(.)、親ディレクトリ(..)、
その他ディレクトリ、ファイルが返される。
 
=== ftools を require すると使えるメソッド ===
File.copy(from, to)
ファイルをコピーする。
 
File.move(from, to)
ファイルを移動する。
 
File.compare(from, to)
ファイルを比較する。
 
File.makedirs(path)
深いディレクトリも再帰的に作成する。
</pre>

<h2>参考</h2>

+ たのしいRuby を読み終わったらコレ！
<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324295/sorehabooks-22/" target="_blank">Rubyレシピブック 268の技</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324295/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4797324295.09._SCMZZZZZZZ_.jpg" border="0" alt="Rubyレシピブック 268の技" /></a></td><td valign="top"><font size="-1">後藤 裕蔵 高橋 征義 まつもと ゆきひろ <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />料理の本と間違えられます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />268の発見<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />これはいい！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />ruby入門したら次に読む本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797324295/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ 達人プログラマによるRuby解説本
<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714531/sorehabooks-22/" target="_blank">プログラミングRuby―達人プログラマーガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714531/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894714531.09._SCMZZZZZZZ_.jpg" border="0" alt="プログラミングRuby―達人プログラマーガイド" /></a></td><td valign="top"><font size="-1">デビット トーマス アンドリュー ハント David Thomas <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />Ruby本の中ではNo1<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />いい本。でも、いきなりこれから入ると難しいかも。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />良書。Ruby関連の書籍では最高の一冊。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />もっともお奨めのRuby本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714531/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4797314087.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="たのしいRuby―Rubyではじめる気軽なプログラミング" />
-----
KEYWORDS:
楽しいRuby,Ruby,オブジェクト指向,スクリプト,覚書
-----


-----
CF50_CF_4: 高橋 征義 (著), 後藤 裕蔵 (著), まつもと ゆきひろ (監修)
CF50_URL: http://ec3.images-amazon.com/images/I/41BNP2WNJGL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4797314087/sorehabooks-22/250-1891990-4739433?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: ソフトバンククリエイティブ
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: Java Puzzlers 罠、落とし穴、コーナーケース
BASENAME: java_puzzlers
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 04/29/2006 04:00:49 PM
TAGS: Java,これは読むべき,イディオム,良書
-----
BODY:
パズラー(Puzzler) とタイトルがつけられていますが、この本は単なる遊びの本ではありません。見つかりにくいバグの原因になる問題ばかり載っています。なんとなくでコーディングしているとはまってしまうバグばかりが集められていて、「どうしてこんな動きをするの？」 と目を疑う問題も多くあります。

本書に載っている問題はそのほとんどが、Java の言語仕様を理解しているか？、JavaAPI をちゃんと理解しているか？ という問いかけのようなものです。バグを出さないようにするには何に気をつけたらよいのか、を考えるきっかけになる本です。

本書は、Java プログラミングの経験がそれなりにある人が対象読者です。結構歯ごたえのある問題が多いので期待して読んでみてください。
-----
EXTENDED BODY:
<h2>特徴</h2>

「まさかこんな動きするわけないよ」 と思うような問題も、実際に動作させて見るとほんとにそんな動きをする、そんな問題ばかりが 95 問も集められています。

また、ちょっと隙を見せるとあっという間にバグに包まれてしまう、そんな問題も多くあります。例えば、次の問題なんか、わかっているのに引っかかってしまうような問題ではないでしょうか？

<blockquote>

<code>Me.class.getName()</code> は、クラス <code>Me</code> の完全修飾名、すなわち <code>&quot;com.javapuzzlers.Me&quot;</code> を返します。このプログラムは何を表示しますか？

<pre class="code"><code><span class="keyword">package</span> com.javapuzzlers; 
 
<span class="keyword">public</span> <span class="keyword">class</span> Me { 
  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) { 
    System.out.println(Me.class.getName().replaceAll(<span class="literal">"."</span>, <span class="literal">"/"</span>) + <span class="literal">".class"</span>);
  } 
} 
</code></pre>

<cite>『JAVA PUZZLERS』 P.43 パズル21</cite>

</blockquote>

どうでしょう？こういうプログラムは、例えばクラスのファイル名に対応するフォルダを検索したりするときに書いたりします。このプログラムの出力結果は、次のようなものです。

<pre class="console">///////////////////.class</pre>

<code>String#replaceAll</code> メソッドは、第一引数には<strong>正規表現</strong>をとります。正規表現で &quot;.&quot; は任意の一文字にマッチする文字のため、クラスの完全修飾子すべての文字にマッチして全部が &quot;/&quot; になってしまったのです。

期待通りに処理するようにするには度売れ場よいかは、本書を読んでもらうとして (えっ？ずるい？)、『JAVA PUZZLERS』には、こんな問題がたくさん載っているのです。

本書を Java の勉強用に使うのなら、JavaAPI の JavaDoc を読みながら手を動かすことをお勧めします。本書を読み終わったときには、Java についてかなりの知識がついているでしょう。

<h2>参考</h2>

+ 良い Java のコーディングを身に着けるなら、これしかない！
<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/ref=nosim/" target="_blank">Effective Java プログラミング言語ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4894714361.09._SCMZZZZZZZ_.jpg" border="0" alt="Effective Java プログラミング言語ガイド" /></a></td><td valign="top"><font size="-1">Joshua Bloch ジョシュア・ブロック <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />J2EE版が欲しい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />繰り返し読む覚悟<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" border="0" alt="star" />翻訳が・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />中級レベル以上のJava開発者へ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />上を目指す人の基礎固め<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ Java の格言。深いです。
<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711877/sorehabooks-22/ref=nosim/" target="_blank">Javaの格言―より良いオブジェクト設計のためのパターンと定石</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711877/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4894711877.09._SCMZZZZZZZ_.jpg" border="0" alt="Javaの格言―より良いオブジェクト設計のためのパターンと定石" /></a></td><td valign="top"><font size="-1">ナイジェル ウォーレン フィリップ ビショップ Nigel Warren <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894711877&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />格言の深ーい意味<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />深い。。。何度読んでも深い。。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />お勧めです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />Effective Javaの元ネタか？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />Javaの基礎から応用まで詰まっています<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894711877/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ Java の鉄則
<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22/ref=nosim/" target="_blank">Javaの鉄則―エキスパートのプログラミングテクニック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/489471258X.09._SCMZZZZZZZ_.jpg" border="0" alt="Javaの鉄則―エキスパートのプログラミングテクニック" /></a></td><td valign="top"><font size="-1">ピーター ハガー Peter Haggar ドキュメントシステム <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=489471258X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />パフォーマンスの定石とは？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />Javaが少しかけるようになったら絶対読むべき。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />お勧めの１冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />是非手元に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />なかなか・・<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/489471258X/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4894716895.01.MZZZZZZZ.jpg" border="0" alt="Java Puzzlers 罠、落とし穴、コーナーケース" />
-----
KEYWORDS:
Java PUZZLERS, 罠, 落とし穴, コーナーケース, ジョシュア・ブロック, パズラー
-----


-----
CF50_CF_4: ジョシュア・ブロック (著), ニール・ガフター (著), 柴田 芳樹 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51T7QZ4J5ML._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4894716895/sorehabooks-22/249-0274085-1341158?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: ピアソン・エデュケーション
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 孔子とドラッカー―ハートフル・マネジメント
BASENAME: post_19
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 05/04/2006 11:50:46 AM
TAGS: マネジメント
-----
BODY:
人間通である孔子と経済通であるドラッカーの共通点を法則集という形でまとめてあるのが本書です。人としての在り方、経営者・リーダーとしての在り方、その二つをいいとこ取りしてまとめられています。

自己啓発本という位置づけにあたる本書ですが、経営者・リーダーが備えておくべき性質が満載です。もちろん、人の上に立つ人だけが読む本ではなくて、心を豊かにしたいと思う人にお薦めできる本です。

たまには、こういった本を読んで自分の中の気を高める必要があると思います。200ページくらいの薄い本ですので、さっと読めてしまいます。心が病んできたと感じたときに読んでみるといいと思います。かなりお薦めです。
-----
EXTENDED BODY:
<div class="mokuji">孔子とドラッカー おぼえがき 目次</div>

<ul>
<li><a href="#chapter1">マネジメントとは</a></li>
<li><a href="#chapter2">無限のマネジメント おぼえがき</a>
<ul>
<li><a href="#section1">仁</a></li>
<li><a href="#section2">義</a></li>
<li><a href="#section3">礼</a></li>
<li><a href="#section4">智</a></li>
<li><a href="#section5">忠</a></li>
<li><a href="#section6">信</a></li>
<li><a href="#section7">孝</a></li>
<li><a href="#section8">志</a></li>
<li><a href="#section9">夢</a></li>
<li><a href="#section10">理</a></li>
<li><a href="#section11">気</a></li>
</ul>
</li>
<li><a href="#chapter3">和合のマネジメント おぼえがき</a>
<ul>
<li><a href="#section12">和</a></li>
<li><a href="#section13">友</a></li>
<li><a href="#section14">敵</a></li>
<li><a href="#section15">育</a></li>
<li><a href="#section16">徳</a></li>
<li><a href="#section17">見</a></li>
<li><a href="#section18">言</a></li>
<li><a href="#section19">聞</a></li>
<li><a href="#section20">縁</a></li>
<li><a href="#section21">希</a></li>
<li><a href="#section22">運</a></li>
<li><a href="#section23">時</a></li>
</ul>
</li>
<li><a href="#chapter4">天心のマネジメント おぼえがき</a>
<ul>
<li><a href="#section24">喜</a></li>
<li><a href="#section25">謝</a></li>
<li><a href="#section26">満</a></li>
<li><a href="#section27">勇</a></li>
<li><a href="#section28">命</a></li>
</ul>
</li>
</ul>

<h2><a name="part1" id="part1">孔子とドラッカー おぼえがき</a></h2>

<h3><a name="chapter1" id="chapter1">マネジメントとは</a></h3>

<blockquote>

マネジメントとは、人に関わるものである。その機能は、人が共同して成果をあげることを可能とし、強みを発揮させ、弱みを無意味なものにすることである。これが組織の目的だ。また、マネジメントとは、ニーズと機会の変化に応じて、組織とそこに働く者を成長させるべきものである。

<cite>「はじめに」より</cite>

</blockquote>

<h3><a name="chapter2" id="chapter2">無限のマネジメント おぼえがき</a></h3>

<h4><a name="section1" id="section1">仁</a></h4>

愛と思いやりこそがすべての基本。経営とは、人を動かすことに他ならない。人には、思いやりを持って接すること。

<q>リーダーというものは、仁を重んじながらも、公正さと義で物事を計ることも大切である。むやみに慈愛に心を奪われてしまってはならない。</q>

<h4><a name="section2" id="section2">義</a></h4>

目的は何なのか？それを何のために行うのか？大義名分を持たないものは、功利に走ってしまい、失敗や災いにあう。

<h4><a name="section3" id="section3">礼</a></h4>

「礼」とはすなわち「人間尊重」のこと。人であるゆえに礼を行う。礼は「人の道」である。

<q>吾（われ）によって汝（なんじ）を礼す。汝によって吾を礼す。</q>

<h4><a name="section4" id="section4">智</a></h4>

　「智」とは、知識のことではない。智慧（ちえ）のことである。智慧とは、「悟る」ということで、「それが何であるか」を感じることである。

<h4><a name="section5" id="section5">忠</a></h4>

<q>およそ人ならば誰に対しても心の中心から、つまり誠から接しなければならない</q>

忠は、人に尽くすもの。経営者たるもの（もちろん、経営者以外の人も）、お客様、株主、取引先、社員、社員の家族、自分の家族、自分にかかわりのある人、すべての人に忠を持って接しなければならない。

<h4><a name="section6" id="section6">信</a></h4>

信じること。自信をもつこと。信念をもて。まず信じてみる。本物を信じ続けることは欺かれることはない。それが自分にとっての本物なのだから。確固たる信念。それが必要だ。

<q>余の辞書に不可能という文字はない <cite>「ナポレオンのことば」</cite></q>

<h4><a name="section7" id="section7">孝</a></h4>

「孝」とは、連続のことである。教えや学びを継承していくことが重要なこと。

<q>重要なことは、会社とは血液で継承するのではないということだ。思想で継承すべきものである。創業者の精神や考え方をよく学んで理解すれば、血のつながりなどなくても後継者になりうる。</q>

<h4><a name="section8" id="section8">志</a></h4>

「志」は夢とは違う。夢は私、志は公。心のベクトルを公に向けることを志を立てるという。

<q>志というのは何よりも「無私」であってこそ、その呼び名に値するのである</q>

<h4><a name="section9" id="section9">夢</a></h4>

途方もないくらいの大きな夢。それが本当の夢である。人間は、実現できない夢などみれないようになっている。不可能だといわれること。夢見ることでそれが実現できる。

<q>If you can dream it, You can do it. <cite>「ウォルト・ディズニー」</cite></q>

<dl>
<dt class="tips">夢に期限をつければ、目標になる</dt>
<dd>「夢に期限をつければ、目標になる」。この節を読んでいて、ふと思い出しました。</dd>
</dl>

<h4><a name="section10" id="section10">理</a></h4>

企業の成功に必要な条件は3つある。1. 基本理念や志が備わっていること。2. 社員一人ひとりの豊かな個性を最大限に伸ばせる環境が用意されていること。3. 戦略や戦術を駆使すること。

<blockquote>

事業というものは転地自然の理にしたがって行えば、必ず成功する。いいものをつくって、適正な値段で売り、売った代金はきちんと回収する。簡単に言えば、それが天地自然の理にかなった事業経営の姿である。そしてその通りにやれば、100% 成功するものだ。

<cite>「松下幸之助の言葉」</cite>

</blockquote>

<h4><a name="section11" id="section11">気</a></h4>

人間は、「天の気（空気）」と「地の気（食物）」を取り入れて生きている。「気」というのは、たまには充電しなければならない。良い気を体に蓄えることが、活力を生み出すのに必要なことである。

<h3><a name="chapter3" id="chapter3">和合のマネジメント おぼえがき</a></h3>

<h4><a name="section12" id="section12">和</a></h4>

組織の「和」を強めることが、企業が成功する重要なポイントである。

<q>だが、その前提として、一人ひとりの主体性がしっかりと確立されていなければならない。それがあって、初めて本物の和が生まれてくるのである。</q>

<h4><a name="section13" id="section13">友</a></h4>

本当の友とは、お互いを切磋琢磨できる関係にある者のことを言う。いつも一緒にいるからといって真の友ではないし、ほとんど会えないからといって友でないわけがない。

<q>だいたい、友人同士でいちも群れたり、つるんでいる男に一流の男はいない。本物の男とは群れないものだ。([参考] 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4569652115/sorehabooks-22/250-1891990-4739433?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">男の品格―気高く、そして潔く</a>』)</q>

<h4><a name="section14" id="section14">敵</a></h4>

敵をライバルと見立て、良いところは取り入れろ。決して敵の悪口を言うな。憎むべきは敵ではない。

<h4><a name="section15" id="section15">育</a></h4>

「叱り」、そして「褒める」。日本電産社長の永守重信氏のしかり方のルール。1. 叱ったあとは最低でも3倍はアフターケアする。2. 叱ったことはすぐに忘れる。3. 「辞めてしまえ」、「辞めます」は絶対に言わない。（人格否定はしない）。

<q>氏は、口でしかって文章で褒めるという。つまり、褒めちぎりの手紙を書くのだ。叱ったことは後に残さず、褒めたことはいつまでも残るようにしておく。（中略）本人にストレートに褒め言葉をかけるよりも、妻や親、同僚などを通じて間接的に褒めるほうが数倍の効果があるのだ。</q>

<h4><a name="section16" id="section16">徳</a></h4>

「徳」は「得」である。陰徳を積むとは、心を貯金すること。徳は、知識や技術ではない。

<h4><a name="section17" id="section17">見</a></h4>

人を見抜く。1. 人相をみる。2. 出処進退の退をみる。3. 言葉のやり取り 、態度をみる。4. 徳の人であるかをみる。

<q>人の上に立つ者は、自分の経験の範囲内で処理するのではなく、常に聖賢（せいけん）の智慧（ちえ）に耳を傾け、自己研鑽（じこけんさん）することが大切なのだ。</q>

<h4><a name="section18" id="section18">言</a></h4>

「何を語るか」ではない。「誰が語るか」である。リーダーが言ってはいけない言葉には4つある。

<ol><li>&#35414;辞（ひじ）： 自分の都合のよい理屈</li>
<li>淫辞（いんじ）： 理屈をつけて押し通そうとすること</li>
<li>邪辞（じゃじ）： よこしまな言葉</li>
<li>遁辞（とんじ）： 逃げ口</li></ol>

では、リーダーは何を語ればよいのか？それは、真実である。その言葉には、1. 意義 2. 価値観 3. 首尾一貫性 4. メリハリ が含まれていなければならない。

<h4><a name="section19" id="section19">聞</a></h4>

耳を傾けて聞くこと。リーダーは、「意見（異見）」や「諫言（かんげん）」を聞かなければならない。

<blockquote>

諫言者は、戦場の一番槍よりもむずかしい。その後の人間関係がどうもギクシャクする。正しいことを言ったのだが、言ったほうが疑心暗鬼になり、主人からにらまれたのではないか、と思うようになる。だから、そういうことを承知のうえで直言する真の諫言者は、一番槍以上の功労者である。

<cite>「徳川家康の言葉」</cite>

</blockquote>

<h4><a name="section20" id="section20">縁</a></h4>

「縁」を切ったら人は生きてはいけない。

<q>小才は縁に出会って縁に気づかず、中才は縁に出会って縁を生かさず、大才は袖擦りあうも多少の縁 <cite>「前野徹の言葉」</cite></q>

<h4><a name="section21" id="section21">希</a></h4>

<q>私たちが絶望しても、なおも私たちが人生に何を期待できるのかではなく、反対に、人生が私たちに何を期待しているのかが問われる（中略）つまるところ、人生とは、人生の意味を問う問題に正しく答えることに他ならない。</q>

<h4><a name="section22" id="section22">運</a></h4>

組織のリーダーには、「運」が必要。運とは、軍を進める力であり、戦いの中で手にするもの。

<q>運をつかむには努力が必要であり、人の倍、10倍、あるいは100倍もの努力をして勝ち取るものこそ運なのだ。</q>

<dl>
<dt class="info">「運」と「信」</dt>
<dd>運を信じることは、「信」に通じるのかも知れないと思いました。自分には運がある、自分には運が備わっているという信念、それを信じれるだけの努力をした時に、本当の運が身に付くのかなと思います。</d>
</dl>

<h4><a name="section23" id="section23">時</a></h4>

ドラッカー曰く、「汝の時間を知れ」。1. 何に時間をとられているのかを明らかにする。2. 時間を奪う不要な作業を明らかにし、それを排除する。3. 自由な時間をまとめる。

<dl>
<dt class="info">時間管理のマトリックス</dt>
<dd>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4906638015/sorehabooks-22/250-1891990-4739433?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">7つの習慣―成功には原則があった!</a>』 の一つの習慣に、「重要事項を優先する」というものがあります。時間管理は、4つのマトリックスに分けられるというのです。

<pre>
　　　緊急　　緊急でない
　┌――――┬――――┐
重│　　　　│　　　　│
要│第一領域│第二領域│
　│　　　　│　　　　│
重├――――＋――――┤
要│　　　　│　　　　│
で│第三領域│第四領域│
な│　　　　│　　　　│
い└――――┴――――┘
</pre>

<p>マトリックスの 「<strong>第二領域</strong>」 に集中することが、効果的な自己管理の目的だと述べています。</p>
</dd>
</dt>

<h3><a name="chapter4" id="chapter4">天心のマネジメント おぼえがき</a></h3>

<h4><a name="section24" id="section24">喜</a></h4>

「喜」 とは、人へのサービスのことであり、人に喜んでもらいたいという気持ちのことである。

<blockquote>

人間が苦労に耐えながら追求する喜びは、必ず正義でなければならないし、他人の犠牲を必要としてはならないし、同時に他人の喜びに通じるものでありたい。自分の喜びを追及する行為が、他人の幸福への奉仕につながるものでありたい

<cite>「本田宗一郎の言葉」</cite>

</blockquote>

<h4><a name="section25" id="section25">謝</a></h4>

「謝罪」。自分に非がある場合は、徹底的に責任を取る姿勢を示す必要がある。誠心誠意を持って謝ること。

「感謝」。謙虚であれ。すべてのことに感謝の心をもつ。感謝すべき出来事がおこるまえに、感謝してしまえ。

<h4><a name="section26" id="section26">満</a></h4>

「顧客満足」。では、顧客とは誰か？

<blockquote>

顧客は誰かの問いこそ、企業の目的と氏名を定義する上で、最初に考えるべきもっとも重要な問いである。

<cite>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478410232/sorehabooks-22/250-1891990-4739433?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">マネジメント</a>』 ドラッカー著</cite>

</blockquote>

満足とは何か？

<blockquote>

何を価値とするかは、顧客だけが答えられる複雑な問題である。推察してはならない。顧客のところへ出かけて行き、聞かなければならない。

<cite>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478410232/sorehabooks-22/250-1891990-4739433?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">マネジメント</a>』 ドラッカー著</cite>

</blockquote>

「我々が何を売りたいか」 ではなく、「顧客は何を書いたいか」。

<h4><a name="section27" id="section27">勇</a></h4>

「勇」 とは、正しいことをするということ。勇気とは、正しい行いを選択すること。たとえ窮地にいたとしてもそこを踏ん張って正しいほうを選択する。経営者はぼやいてはいけない。正直でなければならない。正しい判断を選択する勇気をもつこと。

<q>リーダーは勇将にならなければならない。勇将の下に弱卒なしは、人類普遍の真理なのである。</q>

<h4><a name="section28" id="section28">命</a></h4>

「命」 とはミッションのことであり、使命であり、それがある意味である。企業はミッションを持たなければならない。言い換えると、企業はその存在意義を明確にしなければならない。

<dl>
<dt class="info">言うは易し、行うは難し</dt>
<dd>この節を読んで、ぱっと頭に浮かんだのは、「言うは易し、行うは難し」 という言葉です。ミッションが大事、ミッションを掲げろとよく聞くのですが、そのミッションを遂行するのって、難しいよなぁと思いました。</dd>
</dl>

<h2>参考</h2>

+ 経営の教科書
<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478410232/sorehabooks-22/" target="_blank">マネジメント - 基本と原則  [エッセンシャル版]</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478410232/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4478410232.09._SCMZZZZZZZ_.jpg" border="0" alt="マネジメント - 基本と原則  [エッセンシャル版]" /></a></td><td valign="top"><font size="-1">P・F. ドラッカー 上田 惇生 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />マネジメントの原理原則を再確認！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />マネジメントの基本が書かれている本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />教科書のような本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />MBAコースで教科書になっているよ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />知りながら害をなすな<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478410232/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ マネジメントを歴史的視点から見る
<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478190453/sorehabooks-22/" target="_blank">ネクスト・ソサエティ ― 歴史が見たことのない未来がはじまる</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478190453/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4478190453.09._SCMZZZZZZZ_.jpg" border="0" alt="ネクスト・ソサエティ ― 歴史が見たことのない未来がはじまる" /></a></td><td valign="top"><font size="-1">P・F・ドラッカー 上田 惇生 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />「金持ち」に走らない高いモラルの本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />論文の寄せ集め<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />副題がよけいかも。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />そろそろお歳でしょうか？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />やっぱりそうだ<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4478190453/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ 論語を学ぶ
<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4569578136/sorehabooks-22/" target="_blank">論語に学ぶ</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4569578136/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4569578136.09._SCMZZZZZZZ_.jpg" border="0" alt="論語に学ぶ" /></a></td><td valign="top"><font size="-1">安岡 正篤 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />論語が分かる本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4569578136/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ 人間通を学ぶ
<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/483790825X/sorehabooks-22/" target="_blank">孔子―人間、どこまで大きくなれるか</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/483790825X/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/483790825X.09._SCMZZZZZZZ_.jpg" border="0" alt="孔子―人間、どこまで大きくなれるか" /></a></td><td valign="top"><font size="-1">渋沢 栄一 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />読みやすい！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />気が引き締まる、謙虚になれる1冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />とてもわかりやすいです。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />是非、手元に一冊<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />たまにはいいかもしれない<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/483790825X/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4883203476.01._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="孔子とドラッカー―ハートフル・マネジメント" />
-----
KEYWORDS:
孔子,ドラッカー,ハートフル,マネジメント,人間通,経営学,4883203476
-----


-----
CF50_CF_4: 一条 真也 (著)
CF50_URL: http://ecx.images-amazon.com/images/I/51X7A90VTFL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4883203476/sorehabooks-22/250-1891990-4739433?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 三五館
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 30日でできる! OS自作入門 覚書
BASENAME: 30_os
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 05/06/2006 10:39:37 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839919844/sorehabooks-22/250-1891990-4739433?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank"><img src="http://images-jp.amazon.com/images/P/4839919844.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="30日でできる! OS自作入門" /></a>
</p>

『30日でできる！OS自作入門』 の覚書です。

本書を読んでいて気になったこと、整理したいことをメモしていこうと思います。ちゃんとした説明は、本書を読むほうが良いと思います。

<blockquote>

プログラミングの基礎からはじめて、30日後にはウィンドウシステムを有する32bitマルチタスクOSをフルスクラッチで作り上げるという入門書。ビギナーでも無理なく作成できるようPCの仕組み・アセンブラ・Cの解説から始まり、試行錯誤を繰り返しながらアルゴリズムを学びつつ、たのしく自由な雰囲気でOSをゼロから構築していくという、他に類を見ない手法による、趣味と実用と学習を兼ね備えたOS作成の入門書です。

<cite>「Amazon 出版社コメント」</cite>

</blockquote>

<section>

<h4>[参考]</h4>

+ <a href="http://community.osdev.info/" target="_blank" class="extlink">OS Wiki</a>

</section>
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<ul>
<li><a href="#chapter0">セグメンテーション おぼえがき</a>
<ul>
<li><a href="#section0">セグメンテーションとは</a></li>
<li><a href="#section1">GDT (Global Descriptor Table) とは</a></li>
<li><a href="#section2">アセンブラからセグメントを指定する</a></li>
<li><a href="#section3">PIC の割り込み信号を命令と受け取る</a></li>
</ul>
</li>
<li><a href="#chapter1">マルチタスクのメモ</a></li>
<li><a href="#chapter2">割り込み と PIC (Programmable Interrupt Controller)</a>
<ul>
<li><a href="#section3">PIC の割り込み信号を命令と受け取る</a></li>
</ul>
</li>
<li><a href="#chapter3">PIT (Programmable Interval Timer) とは</a></li>
</ul>

<h2 id="chapter0">セグメンテーション おぼえがき</h2>

<h3 id="section0">セグメンテーションとは</h3>

セグメンテーションとは、メモリの物理アドレスをセグメントアドレスとオフセットの 2 段階で指定する方法です。8086系のインテル CPU はメモリの物理アドレスを直接指定することができないのでこの方法をつかいます。

セグメントアドレスの指定には、セグメントレジスタを使います。セグメントレジスタは 4 個用意されていて、それぞれに名前と役割が与えられています。

<dl>
<dt>CS</dt>
<dd><p>「コードセグメント」 と呼びます。このレジスタには、実行中のプログラムのアドレスが格納されます。このレジスタと命令ポインタ（EIPレジスタやIPレジスタ)を組み合わせて、命令の置かれている物理アドレスを計算します。</p></dd>
<dt>DS</dt>
<dd><p>「データセグメント」 と呼びます。このレジスタは、データをメモリから読み出すときに使われます。</p></dd>
<dt>SS</dt>
<dd><p>「スタックセグメント」 と呼びます。スタック操作に使われるセグメントです。P.133 のスタック操作の説明で使われているのが確認できます。</p></dd>
<dt>ES</dt>
<dd><p>「エクストラセグメント」 と呼びます。データセグメントの拡張として使用します。DS だけで足りない場合に使います。</p></dd>
</dl>

<h4>[参考]</h4>

<a href="http://wisdom.sakura.ne.jp/programming/asm/assembly5.html" target="_blank" class="extlink">セグメントとオフセット</a>

<h3 id="section1">GDT (Global Descriptor Table) とは</h3>

P.112 の GDT に関する説明のメモです。

セグメントアドレスの指定にはセグメントレジスタを使います。このセグメントレジスタですが、じつはセグメントの物理アドレスがそのまま格納されているわけではなく、セグメント情報の ID が格納されています。セグメント情報のことをセグメントディスクリプタ (Segument Descriptor) と呼び、セグメント ID のことをセグメントセレクタ (Segment Selector) と呼びます。

セグメント情報は次の4つの情報で構成されています。 

<ol><li>セグメントがどこから始まるのか （セグメントベース） : 32bit</li>
<li>セグメントの大きさはどれくらいか （セグメントリミット） : 20bit</li>
<li>セグメント属性 : 12bit</li></ol>

一つのセグメントに関する情報は、この 8byte の情報によって構成されています。これらセグメント情報を管理するのが <strong>GDT (Global Descriptor Table)</strong> と呼ばれるテーブルです。そして、GDT がメモリのどのアドレスに用意されているかを知らせるためのレジスタが、<strong>GDTR</strong> になります。

<img src="/images/30os/GDT.gif" alt="GDT" />

セグメントセレクタは 13bit になっています。セグメントレジスタは 16bit ですが、下位 3bit が使えません。なので、セグメントセレクタであらわせる ID の数は 2 ^ 13 = 8,192 個です。ただし、セグメント ID が 0 、つまり最初のセグメント情報はヌルセレクタと呼ばれ、使うことができません。実際はセグメント情報は全部で 8,191 個 です。

<h3 id="section2">アセンブラからセグメントを指定する</h3>

セグメントを指定するには、セグメントレジスタにセグメント情報のアドレスをセットします。セグメント情報のアドレスは、GDT 内の相対アドレスで指定します。つまり、セグメント情報は 8byte なので、「8 * (セグメントID)」 をセグメントレジスタにセットしてやればよいことになります。これで、GDTR のアドレスとセグメントセレクタのアドレスを計算して、セグメントが指定できます。

<h4>[参考]</h4>

<a href="http://www-06.ibm.com/jp/developerworks/linux/060217/j_l-memmod.shtml" target="_blank" class="extlink">Linux メモリー・モデルの探求</a>

<h2 id="chapter1">マルチタスクのメモ</h2>

ここから、P.295 のマルチタスクのメモです。

<blockquote>

CPU はいつでもセグメント番号を扱う命令を実行するたびに GDT の設定を確認しにいくので、今回も JMP 命令を実行するときに普通の far-JMP なのか タスクスイッチなのかを判断しています。

<cite>本書 P.294 より</cite>

</blockquote>

つまり、GDT に設定しておくセグメントの情報には 2種類あって、実行可能なセグメント（プログラムのこと？） と タスク状態セグメントがあるということらしいです。タスク状態セグメントは、全部で 104byte からなる情報の塊で、これが見つかるとタスクスイッチされます。

<h2 id="chapter2">割り込み と PIC (Programmable Interrupt Controller)</h2>

P.127 の割り込みに関する説明のメモです。

CPU は、割り込み信号 （IRQ: Interrupt Request） を一つしか処理することができません。そこで、複数の割り込みを処理できるように CPU の外部に <strong>PIC (Programmable Interrupt Controller)</strong> という装置が用意されています。

1つの PIC は同時に 8つの割り込みを監視することができます。Intel 製の CPU には、PIC が 2つ付いています。

<pre>
┌―――┐　　　┌――――――――┐
│ＣＰＵ│―――│ＰＩＣ（マスタ）│
└―――┘　　　└――――――――┘
├ＩＲＱ０
├ＩＲＱ１　　　┌―――――――――┐
├ＩＲＱ２ ―― │ＰＩＣ（スレーブ）│
├ＩＲＱ３　　　└―――――――――┘
├ＩＲＱ４　　　　　　　├ＩＲＱ８
├ＩＲＱ５　　　　　　　├ＩＲＱ９
├ＩＲＱ６　　　　　　　├ＩＲＱ１０
└ＩＲＱ７　　　　　　　├ＩＲＱ１１
├ＩＲＱ１２
├ＩＲＱ１３
├ＩＲＱ１４
└ＩＲＱ１５
</pre>

<h3 id="section3">PIC の割り込み信号を命令と受け取る</h3>

CPU は、PIC の割り込み信号を、INT 命令として実行するように作られています。PIC は、IRQ それぞれに割り込み信号を設定し、割り込みが発生すると、割り込み信号を INT 命令一緒に CPU に送信します。

CPU は、IDT （Interrupt Descriptor Table） を見て割り込み信号に対応する関数の呼び出しを行います。これが割り込み処理です。IDT は、割り込み信号と割り込み処理関数を対応付けたテーブルです。

<img src="/images/30os/pic.gif" alt="PICの割り込み処理" />

<h2 id="chapter3">PIT (Programmable Interval Timer) とは</h2>

P.232 のタイマーに関する説明のメモです。

PC でタイマーを利用するときには、<strong>PIT (Programmable Interval Timer)</strong> を設定します。これは、一定期間ごとに割り込みを発生させる装置です。

PC では、PIT は IRQ0 につながっています。設定方法は、キーボードやマウスの割り込みを設定するのと同じ方法です。

<h4>[参考]</h4>

+ <a href="http://community.osdev.info/?(PIT)8254" target="_blank" class="extlink">PIT 8254 のページ</a>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4839919844.09._OU09_PE0_SCMZZZZZZZ_.jpg"   style="float:left; margin:15px;" border="0" alt="30日でできる! OS自作入門" />
-----
KEYWORDS:
30日,OS,自作,Operating System,覚書,4839919844
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: データベース実践講義―エンジニアのためのリレーショナル理論
BASENAME: post_32
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 05/23/2006 07:08:50 AM
TAGS: RDBMS,データベース
-----
BODY:
この本は、RDB (リレーショナルデータベース) とは何か？ を理解するためのものです。RDB を学ぶ上で理解しておきたい用語 （<strong>関係と型</strong>、<strong>タプルと関係</strong>、<strong>関係変数</strong>、<strong>リレーショナル代数</strong>、<strong>整合性制約</strong>など) を説明し、RDB の概念を解説しています。

実践派と理論派のどっちよりの本かというと、本書はかなり理論に片寄った本です。用語も正確に書いてあるためか、一度の読みで理解することが難しかったです。

RDB の基礎概念を、理論的にしっかりと身に着けたい人に本書はおすすめです。かなり正確に書かれているような印象を受けました。ただし、それなりに読みづらいですが・・・。なお、特定の DBMS に依存した内容には触れられていません。
-----
EXTENDED BODY:
<h2>感想</h2>

読んでいて一番に感じたのは、良い意味で硬い文章だなというものです。理論的な本なので、それなりに硬い文章だとは覚悟していましたが、それにしても硬いです。

その文、用語の説明や定義は正確だという印象を受けました。たぶん、書かれている内容自体はそんなに難しいものでもないし、変なことでもないと思います。ただ、読んで理解するには集中できる環境が必要だったというだけです。

本書を読んでいてふと、識別子と主キーって何が違うんだったっけ？ と疑問がわいてきました。本書の中に答えがあったはずですが、僕は別の本を取り出して読み返しました。 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/488373109X/sorehabooks-22/249-7560247-3533949?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" target="_blank" class="extlink">T字形ER データベース設計技法 (佐藤 正美:著)</a>』

理論系の本を読むと別のいろんな本にリンクしますね。

とにかく、「硬い文章、正確な用語の定義、理論」 と、3拍子そろった読みにくそうな本ですが、<strong>リレーショナル理論</strong> に関する正確な知識を得たい人にはおすすめの本です。内容的には悪くありませんでした。

<h2>参考</h2>

+ T字形ER に関するデータベース設計理論
<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" target="_blank">データベース設計論 T字形ER―関係モデルとオジブェクト指向の統合をめざして</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4883732169.09._SCMZZZZZZZ_.jpg" border="0" alt="データベース設計論 T字形ER―関係モデルとオジブェクト指向の統合をめざして" /></a></td><td valign="top"><font size="-1">佐藤 正美 <br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ データモデリングの技を鍛える
<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109851/sorehabooks-22/" target="_blank">名人椿正明が教えるデータモデリングの"技"</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109851/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798109851.01._SCMZZZZZZZ_.jpg" border="0" alt="名人椿正明が教えるデータモデリングの"技"" /></a></td><td valign="top"><font size="-1">椿 正明 <br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109851/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ 実践的データモデリング
<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank">実践的データモデリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798103853.09._SCMZZZZZZZ_.jpg" border="0" alt="4798103853" /></a></td><td valign="top"><font size="-1">真野 正 <br /><br />翔泳社  2003-03<br />売り上げランキング : 15,098<br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&Version=2004-10-04&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798103853&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均</strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />とてもわかりやすい！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />データモデリング、分かりやすい内容です<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://images.amazon.com/images/P/4873112753.01._PE00_OU09_SCMZZZZZZZ_V55130882_.jpg" border="0" alt="データベース実践講義―エンジニアのためのリレーショナル理論" />
-----
KEYWORDS:
データベース,RDB,実践講義,リレーショナル,理論,基本原理,タプル,関係,4873112753
-----


-----
CF50_CF_4: C.J.Date (著), 株式会社クイープ (翻訳)
CF50_URL: http://ec3.images-amazon.com/images/I/51FC57MJ0HL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4873112753/sorehabooks-22/249-7560247-3533949?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: Web2.0 BOOK
BASENAME: web20_book
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 06/04/2006 05:12:07 PM
TAGS: Web2.0,バズワード？
-----
BODY:
今が旬(?) の Web2.0（うぇぶニーテンゼロやうぇぶツーポイントオーと発音する)  とはなんなのか？Web2.0 企業とは、Web2.0 っぽいってどいうもののことを言うのかなど、Web2.0 っていったいなんなんだということが(なんとなく)わかる本です。Web2.0 っぽいサービスや Web2.0 的な企業がどこなのかをしるのにはよい本です。

「Web2.0 とは何か」 から説明し、技術的な観点から Web2.0 を説明し、日本国内や海外のサービスで Web2.0 に分類されるサービスを説明しています。具体的な説明が多く理解しやすい本です。

Web2.0 をバズワード（Buzzword) にしないように、こういった解説本がたくさん世に出回るといいと思います。

<h4>参考</h4>

+ <a href="http://jp.sun.com/web2.0/" target="_blank" class="extlink">サン・マイクロシステムズ - テクノロジー Web2.0</a>
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<h3>Web2.0 とは</h3>

Web2.0 とは 「Web の使われ方、方向性、トレンドなどの変化」 のことをいう。今までの Web はただ情報が乱雑に散らばっているだけの環境だったが、だんだんと環境が変化してきて大きなデータベースのようになってきた。こういった Web の環境の変化のことを Web2.0 という。

<blockquote>

セマンティックWebは、言ってみればデータベースとして完全体の Web と言えます。それに対して Web2.0 は、ある程度自然発生的な、完全体に近い Web ということができると思います。セマンティック Web と Web2.0 は必ずしも同じではないのですが、両者は方向性としては次第に接近している、と言っても間違いではないでしょう。

<cite>本書 P.23 より</cite>

</blockquote>

<h3>ロングテール</h3>

たとえば、「売り上げの 80% は全商品の 20% で構成されている」 といった 80-20の法則 (パレートの法則) が現実世界には多く見られる。しかし、Web の世界ではこの法則が当てはまらない現象が見られるようになってきている。

Web の世界では 「よく売れる商品 20% の売り上げよりも、そのほかの 80% の商品の売り上げ合計の方がはるかに大きくなっている」 という現象が見られる。これを<storng>ロングテール現象</strong> という。

<h3>マッシュアップ</h3>

複数のサービスやコンテンツを組み合わせてつくる Web アプリケーションのこと。

<h3>Web2.0 的なサービスの必須機能</h3>

<ol><li>情報の受信</li><li>情報の発信</li><li>情報の検索</li><li>情報の共有</li></ol>

<h2>参考</h2>

+ 非常によくまとめられている。まとめて買うと Web2.0 が見えてくる
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4480062858/sorehabooks-22/ref=nosim/" target="_blank">ウェブ進化論 本当の大変化はこれから始まる</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4480062858/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4480062858.09._SCMZZZZZZZ_.jpg" border="0" alt="ウェブ進化論 本当の大変化はこれから始まる" /></a></td><td valign="top"><font size="-1">梅田 望夫 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4480062858&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4480062858/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ この本を読めば、人の集まりとしての Web を理解できるかもしれない
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4047915068/sorehabooks-22/ref=nosim/" target="_blank">「みんなの意見」は案外正しい</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4047915068/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4047915068.09._SCMZZZZZZZ_.jpg" border="0" alt="「みんなの意見」は案外正しい" /></a></td><td valign="top"><font size="-1">ジェームズ・スロウィッキー <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4047915068&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4047915068/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Web2.0 をざっくりと理解したい人のための本
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844322524/sorehabooks-22/ref=nosim/" target="_blank">Web2.0への道</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844322524/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4844322524.01._SCMZZZZZZZ_.jpg" border="0" alt="Web2.0への道" /></a></td><td valign="top"><font size="-1"><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4844322524&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844322524/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4844322265.09.MZZZZZZZ.jpg" border="0" alt="Web2.0 BOOK" />
-----
KEYWORDS:
Web2.0,インターネット,サービス,テクノロジ,マッシュアップ,4844322265
-----


-----
CF50_CF_4: 小川 浩 (著), 後藤 康成 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/41AT0HDZG7L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4844322265/sorehabooks-22/503-4941145-4624716?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: インプレス
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Webアプリセキュリティ対策入門
BASENAME: webアプリセキュリティ対策入門
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/02/2006 10:44:20 AM
TAGS: わかりやすい,セキュリティ
-----
BODY:
Webアプリケーションのセキュリティを高めるために使える本です。セキュリティ対策とは何をすることかということから始まり、Webアプリケーションが狙われる手法などを解説しています。固有の名称を持つWebサイト攻撃法を紹介し、それに対する防御手段を解説しているところが実用的なところだと思います。

Webアプリケーションに特化したセキュリティ対策本ですが、Webアプリケーションだけでもこんなにたくさんの攻撃方法があるのかとちょっと怖さも感じました。

<blockquote>

物理的なセキュリティ対策と比べ、ソフトウェアセキュリティ対策に漏れがないか検証することのほうが難しいです。プログラムのソースコードがない場合、安全性の検証はさらに難しくなります。ソフトウェアのセキュリティ対策は非常にもろいものであることがほとんどです。このため、使用中のソフトウェアが安全であるか情報を収集し、安全性が保たれているか継続的に確認することが重要であるとともに、複数の安全対策を実施することが重要です。

<cite>本書「セキュリティ対策の基礎知識」より</cite>

</blockquote>

本書の対象読者は、Webアプリケーションの開発者やそのマネージャ、管理者です。Webアプリケーションのセキュリティは、仕組みをよく理解して適切な対策を行わなければ意味がありません。さらには、その対策を複数行わなければ安全性を確保することが難しいです。本書を何度も読み直して、セキュリティ向上に役立てられるといいと思います。
-----
EXTENDED BODY:
<h2>Webサイトの攻撃法まとめ</h2>

<h3>クロスサイトスクリプティング （XSS）</h3>

脆弱なサイト上で第三者による任意の JavaScript を実行できてしまうことにより、そのサイトにアクセスしたユーザに被害を及ぼすもの。Cookie を盗み出したりすることができるため、セッション乗っ取りが行われる危険性がある。対策は、Webサイトの出力にHTMLタグのエスケープ処理等を行うこと。

<h3>XXXインジェクション</h3>

SQLインジェクション、LDAPインジェクション、XMLインジェクション、コマンドインジェクションなど第三者による任意のコマンドが実行されてしまう脆弱性。対策は、適切なエスケープを行うこと。

<h3>クロスサイトリクエストフォージェリ　（CSRF）</h3>

ログインが必要なサイトですでにログイン済みのユーザが、攻撃用のURLをクリックすることで意図していないフォーム送信（たとえば、データの削除など）が行われてしまう脆弱性。対策にはサーバ側でリファラのチェックを行うことやPOSTのみを受け付けるようにする。もちろん、リファラを送信しない環境もありえるので、完全な対策にはならないし、JavaScript を使って POST 送信にすることもできるので抜け道はある。　

<h4>参考</h4>

+ <a href="http://kaede.to/~canada/doc/anti-csrf-method-and-effect" target="_blank" class="extlink">おさかなラボ 「CSRF対策法と効果」</a>

<h3>ディレクトリトラバーサル</h3>

ユーザにファイルパスを入力させたり、選択させたりする場合に、「.」 や 「..」 などのパス指定文字列が含まれていて、予期せぬディレクトリのファイルが開かれてしまう脆弱性。対策は、入力値の確認を行い、不正な文字列が入力されていないかチェックする。（ . 、 .. 、 / , \ ） などがチェック対象。また、閲覧可能なディレクトリを制限しておく。

<h3>セッションハイジャック</h3>

セッションID が盗まれてしまい、成りすまされてしまう脆弱性。セッションID が盗まれるのは、クロスサイトスクリプティングやネットワーク盗聴、セッションID の推測、セッションID の固定化などが原因になる。対策は、セッションID には予測不可能な文字列をつかい、セッションID に有効期限を設定する。ネットワーク盗聴には SSL/TLS を用いて通信経路を暗号化し、セッションID は必ずサーバ側で作成する。（クライアントから送られてきた有効でないセッションID は使用しない）

<h2>参考</h2>

+ 不正アクセス対策をはじめる前の基礎知識
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810938X/sorehabooks-22/ref=nosim/" target="_blank">これならわかる不正アクセス対策 入門の入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810938X/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/479810938X.09._SCMZZZZZZZ_.jpg" border="0" alt="これならわかる不正アクセス対策 入門の入門" /></a></td><td valign="top"><font size="-1">萩原 佳明 山田 祥寛 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=479810938X&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />おもしろい<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810938X/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 暗号化についてののバイブル
<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322977/sorehabooks-22/ref=nosim/" target="_blank">暗号技術入門-秘密の国のアリス</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322977/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4797322977.09._SCMZZZZZZZ_.jpg" border="0" alt="暗号技術入門-秘密の国のアリス" /></a></td><td valign="top"><font size="-1">結城 浩 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4797322977&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />わかりやすい暗号の参考書です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />欠点は内容ではなく本の大きさ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />買ってよかったです<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />暗号っておもしろい？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />高評価の理由<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322977/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ クラッカーによるクラッキング方法を知っていれば、セキュリティ対策にも身が入る!?
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112303/sorehabooks-22/ref=nosim/" target="_blank">Hacking:美しき策謀―脆弱性攻撃の理論と実際</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112303/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4873112303.01._SCMZZZZZZZ_.jpg" border="0" alt="Hacking:美しき策謀―脆弱性攻撃の理論と実際" /></a></td><td valign="top"><font size="-1">ジョン エリクソン Jon Erickson 村上 雅章 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4873112303&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />技術背景がわかります<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />真のハッカーとは<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873112303/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images-jp.amazon.com/images/P/4774127027.09._OU09_PE0_SCMZZZZZZZ_.jpg" border="0" alt="Webアプリセキュリティ対策入門" />
-----
KEYWORDS:
Webアプリケーション,セキュリティ,対策,PHP,実践,脆弱性,4774127027
-----


-----
CF50_CF_4: 大垣 靖男 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51DKBYKNQZL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4774127027/sorehabooks-22/503-1794092-6355915?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 楽々ERDレッスン
BASENAME: erd
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Design
CATEGORY: Design
DATE: 07/17/2006 08:36:16 AM
TAGS: わかりやすい,データベース設計,定番,良書
-----
BODY:
本書は、著者である羽生 章洋さんのご自分の経験を元に、データベース設計を行う底力を教えてくれる教科書です。テーブル設計のやり方や、コード体系の考え方、経営資産としてのデータベース、RDBMSを資産活用するためのSQLの書き方など、筆者の経験を惜しみなく公開されているという感じです。

最近はデータモデリングという言葉がもてはやされています。データモデリングにも色々な流派があり、コード体系、識別子、主キーの扱い、関係の扱いなど考え方がさまざまです。僕が読んできたデータモデリングの本で、これまでで一番共感が持てる考えが本書の考え方でした。もちろん、これまで読んできた本に書かれていることも多く、同じ考えをしているところも多々あります。ただ、本書はそういった部分を筆者の経験を元に解説しているので、非常にわかりやすいのです。

本書はデータモデリングとは何か、RDBの設計の練習がしたい人、ER設計に興味がある人が読者対象です。プログラマからSE、コンサルタントまで読んでおくと必ず為になる一冊だと思います。おすすめです。
-----
EXTENDED BODY:
<h2>覚書</h2>

<h3>エンティティの候補</h3>

データベースを設計する上で、もっとも重要なことは 「<strong>何を記録するか</strong>」 です。記録しないもの、記録したくないものはデータベース設計は行いません。この、記録したいものを2つの種類に分類すると次のようになります。

<blockquote>

「モノ」 に関する記録のことを 「リソース（資源）系エンティティ」、「出来事」 についての記録のことを 「イベント系エンティティ」 と読んだりします。

<cite>本書 p.25 「エンティティ名の決め方」 より抜粋</cite>

</blockquote>

出てきたエンティティは、業務上のモデルと <strong>6W3H</strong> で照らし合わせて確認することができます。

<blockquote>

「リソース系」

<ul><li>誰に （Whom）</li>
<li>誰が （Who）</li>
<li>何を （What）</li>
<li>どこへ （Where）</li></ul>

「イベント系」

<ul><li>どのように （How）</li></ul>

「属性の候補」

<ul><li>いつ （When）</li>
<li>どれくらい （How many）</li>
<li>いくら （How much）</li></ul>

「ビジネス上の正規化の対象となってくるもの」

<ul><li>なぜ （Why）</li></ul>

<cite>本書 P.25 「エンティティ名の決め方」 より抜粋</cite>

</blockquote>

<h3>コードとキーの違い</h3>

<h4>キーの種類</h4>

データベース上で扱われるキーには大きく3つに分けられます。

<ol><li>主キー</li><li>外部キー</li><li>ユニークキー</li></ol>

主キーは、「候補キー」 の中から選ばれ、レコードを一意に識別することができるキーのことです。外部キーは、他のレコードを参照する際のキーのことです。ユニークキーは、他のレコードと重複が無い一意な値をもつキーのことです。

「候補キー」 は、レコードを一意に識別することができるキーの集まりのことです。例えば、シーケンシャル番号や社会保障番号、名前と生年月日の組み合わせも候補キーとして使えるかもしれません（業務による）。業務で使っている 「<strong>コード</strong>」 も候補キーの一つといえます。

<h4>コードとキーの違い</h4>

<blockquote>

<ul style="margin-top:0px; margin-bottom: 0px"><li>コード体系は、ユーザがレコードに容易に到達するためのユーザインターフェースである</li>
<li>コード体系は、システムの都合ではなくビジネスの都合によって決定されるものである</li></ul>

<cite>本書 P.30</cite>

</blockquote>

つまり、コードはユニークキー、さらに言えば候補キーになるということです。しかし、コードはビジネスの都合によって変えられることがあるので、主キーとしてはふさわしくありません。主キーを考えることは、レコードのID （アイデンティファイア） を考えることと同じことなのです。

<blockquote>

アイデンティファイアは、インスタンスのライフサイクル （一般にデータライフサイクル：DLCとも呼ばれます。） を表現していると考えればいいでしょう。その集合中に属してから消滅するまでの間、特定のインスタンスであることを示す座標として機能しているわけです。

<cite>本書 P.33</cite>

</blockquote>

コードは、ビジネスに合わせて柔軟に変更できるべきであるが、アイデンティファイア はそのレコードが存在する間は変更されてはいけないのです。

<h2>参考</h2>

+ データモデリングの一つの流派。リソースとイベントとというエンティティの分け方についてよくわかります。
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" target="_blank">データベース設計論 T字形ER―関係モデルとオジブェクト指向の統合をめざして</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4883732169.09._SCMZZZZZZZ_.jpg" border="0" alt="データベース設計論 T字形ER―関係モデルとオジブェクト指向の統合をめざして" /></a></td><td valign="top"><font size="-1">佐藤 正美 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4883732169&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ データモデリングを学ぶならはずせない一冊
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank">業務別データベース設計のためのデータモデリング入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4534032501.09._SCMZZZZZZZ_.jpg" border="0" alt="業務別データベース設計のためのデータモデリング入門" /></a></td><td valign="top"><font size="-1">渡辺 幸三 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4534032501&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />分かり易い業務系の入門書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />流行より汎用スキル<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />イカす、入門書。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />データモデリングの基礎から勉強できる。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" border="0" alt="star" />考え方だけでも理解してはいかが<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 業務知識と共にDB設計を
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109274/sorehabooks-22/" target="_blank">グラス片手にデータベース設計 ~会計システム編</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109274/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4798109274.01._SCMZZZZZZZ_.jpg" border="0" alt="グラス片手にデータベース設計 ~会計システム編" /></a></td><td valign="top"><font size="-1">梅田 弘之 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4798109274&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />もう少しデータベース設計についての解説が欲しかった<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />会計業務のシステム設計に役に立つ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />読みやすく、勉強になりました。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />初心者にもおすすめできます<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109274/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images.amazon.com/images/P/4798110663.01._PE00_OU09_SCMZZZZZZZ_V55963923_.jpg" border="0" alt="楽々ERDレッスン" />
-----
KEYWORDS:
楽々ERD,ERD,CodeZine,RDBMS,モデリング,4798110663
-----

COMMENT:
AUTHOR: ko-zu
EMAIL: 
IP: 218.113.252.55
URL: 
DATE: 09/29/2006 10:57:02 PM
ときどきブックレビュー等参考にしています。
ありがたいです。

-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 210.229.150.131
URL: 
DATE: 10/02/2006 06:40:49 PM
> ko-zu さん
ありがとうございます。
そう言ってもらえると、とてもうれしいです。

今後ともよろしくお願いします。
-----


-----
CF50_CF_4: (株)スターロジック 羽生 章洋 (著)
CF50_URL: http://ec3.images-amazon.com/images/I/513Y4RJ7R8L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4798110663/sorehabooks-22/249-7560247-3533949?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: プレファクタリング―リファクタリング軽減のための新設計
BASENAME: プレファクタリングリファクタリング軽減のための新設計
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Design
CATEGORY: Design
DATE: 08/19/2006 01:34:13 PM
TAGS: これは読むべき,リファクタリング,良書
-----
BODY:
<blockquote>

「プレファクタリング」（Prefactoring）とは、pre（事前に） + refactoring（リファクタリング）という意味の新造語です。リファクタリングとは、コーディング中にコードの動きを変えずにコードを改善する手法のこと。そして、プレファクタリングは、コーディング前にリファクタリングを行うことで、リファクタリングの効率をさらに上げようというもので、... （略）

<cite>本書裏表紙のコメントより抜粋</cite>

</blockquote>

プレファクタリングは、自分のこれまでの経験や知識さらには他人の経験や知識を元に、リファクタリングの効率を上げるような設計を行うというものです。かなり簡単に言ってしまうと、設計や実装時のイディオムを覚えるということになると思います。例えば、「コンポーネントは、どのように機能するのかよりもどう役に立つのかを考えることで、インターフェースに意識を集中し、抽象化を行うようにする」といった具合です。

これまで、コーディングにおけるイディオム、良い設計への指針などについて書かれた本はいくつかありました。それらをまとめたものが本書です。全体で250ページ強のボリュームながら、良いことが書かれているなーという印象を受けました。

コーディングに携わるプログラマや、クラス設計に携わる人にぜひお勧めする一冊です。オライリーの本なので、品質の高さは保証つきです。
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<h3>すべての状況に対して効果があるものは存在しない</h3>

ある原則を適用するかどうかは、その状況（コンテキスト）により異なります。それは例えば、医療システムのようにシステムのバグが人の命に関わるような状況であれば、どれだけ冗長な例外チェックも必要とされるかもしれないということです。

<h3>名前の意味</h3>

あるものを表す言葉に、適切な名前をつけなければ後々混乱することになります。例えば、「ポテトチップス」という名前は、「一袋のポテトチップス」を表すのか（物）、「レシートに印字されるポテトチップス」を表すのか（種類）、どちらのことを言っているのかがわかるようにしなければなりません。

<h3>ほとんどの String は 単なる String 以上のものである</h3>

String は単なる文字列を表します。それ以上でもそれ以下でもありません。つまり、String は基本データ型なのです。人の属性を表す「名前」には、String ではなく、Name という抽象データ型を使いましょう。

<h2>参考</h2>

+ 変な癖がつく前に読むべし！
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/sorehabooks-22/" target="_blank">プログラミング作法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/sorehabooks-22/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4756136494.09._SCMZZZZZZZ_.jpg" border="0" alt="プログラミング作法" /></a></td><td valign="top"><font size="-1">ブライアン カーニハン ロブ パイク Brian Kernighan <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4756136494&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />プログラミングのよき習慣を!!<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />バグの相談はテディベア（熊のぬいぐるみ）にまず最初に<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />この本を読んでから、プログラムを書くべき！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />「癖」がつく前に読んでほしい本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />くせは治りません・・・<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ リファクタリングはいまや標準
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" target="_blank">リファクタリング―プログラムの体質改善テクニック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4894712288.09._SCMZZZZZZZ_.jpg" border="0" alt="リファクタリング―プログラムの体質改善テクニック" /></a></td><td valign="top"><font size="-1">マーチン ファウラー Martin Fowler 児玉 公信 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894712288&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />オブジェクト指向がなんでいいの。その回答がここにある。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />体質改善の処方箋<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />可読性向上の特効薬<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />コーディングが変わった<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />コーディングが変わった<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Javaを使うなら、絶対に読んでおくべき一冊
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank">Effective Java プログラミング言語ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4894714361.09._SCMZZZZZZZ_.jpg" border="0" alt="Effective Java プログラミング言語ガイド" /></a></td><td valign="top"><font size="-1">Joshua Bloch ジョシュア・ブロック <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4894714361&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />上を目指す人の基礎固め<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />脱初心者に必須<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />Effective C++とともに最良の書籍<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />JAVA言語を理解するための効果的な実践書です。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />翻訳も良いと思う<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images.amazon.com/images/P/4873112729.01._SCMZZZZZZZ_V55130882_.jpg" border="0" alt="プレファクタリング―リファクタリング軽減のための新設計" />
-----
KEYWORDS:
プレファクタリング,リファクタリング,設計,コーディング,開発手法,オライリー,4873112729
-----


-----
CF50_CF_4: Ken Pugh (著), 木下 哲也 (翻訳), 有限会社 福龍興業 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51NKHRBZ9CL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/exec/obidos/ASIN/4873112729/sorehabooks-22/503-7320201-1826359?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2
CF50_CF: オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: Ajaxイン・アクション
BASENAME: ajax
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 09/18/2006 02:00:59 AM
TAGS: Ajax,充実の厚さ,定番,良書
-----
BODY:
本書は、Ajax（エイジャックス : Asynchronous JavaScript + XML）の実践本です。Ajax とは何か？Ajax を使って何ができるのか？Ajax と呼べるアプリケーションを構築したい！Ajax ブームに乗っかりたい！という人のための本になっています。

本書は Ajax に関する4つの話題について書かれています。

<ul><li>Ajax とは何か？Ajax を使う理由</li>
<li>Ajax アプリケーションを取り巻くコア技術</li>
<li>Ajax アプリケーションを実際に使えるようにするには、どういう点に気をつけるべきか</li>
<li>Ajax アプリケーションを実際に作りながら、実践的なアプローチの仕方を学ぶ</li></ul>

<blockquote>

Ajax では、よく知られているいくつかのウェブ技術を組み合わせ、それらを新しい興味深い方法で使用します。&lt;中略&gt; Ajax 技術そのものはすべてクライアントサイドの話であるものの、その特徴はサーバーサイドにも及びます。

<cite>本書 序章 「本書の内容」 より抜粋</cite>

</blockquote>

本書の対象読者は、Ajax に興味のある人ですが、それなりにヘビーな内容になっています。本書を隅々まで読むには、Web の仕組み（HTTP 通信）を理解してることと、JavaScript が読める必要があります。Ajax とは何か？だけが知りたい人は別の書籍を当たったほうがよいと思います。本書は、Ajax 開発者向けの本になっています。
-----
EXTENDED BODY:
<h2>Ajax とは</h2>

<h3>Asynchronous JavaScript + XML</h3>

Ajax（エイジャックス）とは、Asynchronous JavaScript + XML のことで、古くからの Web 技術を組み合わせたものをあらわします。Ajax という技術があるわけではなく、Ajax は<strong>方法論</strong>のことです。Ajax は次のような技術がの集まりです。

<ul><li>JavaScript</li><li>XHTML</li><li>XML</li><li>XSLT</li><li>Document Object Model（DOM）</li><li>XMLHttpRequestオブジェクト</li></ul>

<h3>Ajax の目的</h3>

Ajax を使う目的は、Web 用のリッチユーザインターフェースを構築することにあります。「リッチ」 とは、色とりどりな装飾がされたという意味ではありません。Ajax におけるリッチとは、クライアントとの快適な対話モデルを指します。それは、入力手段に対する直感的な操作と反応があるというものです。クライアントが何かを入力したら、それに対する反応が即座に起こる。スタンドアローンのアプリケーションと変わらないユーザインターフェースを Web アプリケーションでも提供しようというのが Ajax の目的となります。

<h3>Ajax アプリケーションの例</h3>

<ul><li><a href="http://labs.cybozu.co.jp/blog/akky/archives/2005/09/ajax_10.html" target="_blank" class="extlink">Ajax アプリケーショントップ10</a></li>
<li><a href="http://maps.google.co.jp/" class="extlink" target="_blank">Google マップ</a></li>
</ul>

<h2>Ajax の特徴</h2>

<h3>ブラウザが扱うのはコンテンツではなくアプリケーションである</h3>

<blockquote>

従来型のページベースのアプリケーションでは、ブラウザは事実上、ダム端末です。<strong>ブラウザは、ユーザーが現在ワークフローのどの位置にいるのかについて何も知りません。</strong>通常は、その情報はすべて、ウェブサーバー上のユーザーセッションに保持されています。

<cite>本書 P.17 「Ajaxの特徴となる4つの原則」より</cite>

</blockquote>

つまり、従来型のアプリケーションでは、ブラウザはサーバが送ってくるコンテンツをただ表示するだけに過ぎなかったというわけです。サーバサイドでページ遷移の情報を管理し、データの管理を行っていました。Ajax を使うとこのモデルが次のようになります。

<blockquote>

<strong>Ajax アプリケーションでは、アプリケーションロジックの一部をブラウザに移します</strong>。ユーザがログインすると、非常に複雑なドキュメントがブラウザに送られます。その大部分は JavaScript コードです。このドキュメントはセッション中ずっとユーザー側にとどまりますが、ユーザーがそのドキュメントと対話している間にその見た目を変化させることになります。

また、このドキュメントはユーザー入力に対する応答の方法を知っており、ユーザー入力自身で処理するか、ウェブサーバー（システムデータベースなどのリソースへのアクセスが可能）にリクエストとして渡すか、その両方を組み合わせるかを判断することができます。

<cite>本書 P.18 「Ajaxの特徴となる4つの原則」より</cite>

</blockquote>

Ajax アプリケーションでは、サーバサイドでしか管理していなかったビジネスロジックやワークフロー情報の一部を、クライアントサイドに移すことを考えます。こうすることで、ユーザとのリッチな対話モデルを実装しやすくなります。

<dl>
<dt class="info">Information</dt>
<dd>サーバサイドからクライアントサイドへ、ビジネスロジックやワークフローの一部を移動する。</dd>
</dl>

<h3>サーバが配信するのはコンテンツではなくデータである</h3>

従来型の Web アプリケーションは、一度のリクエスト/レスポンスでやり取りされる情報に、コンテンツとデータの両方が含まれていました（コンテンツとは画像や広告やページレイアウトなど、データはショッピングカートの中身など）。

Ajax アプリケーションでは、コンテンツ部分のやり取りは最初の一度のみで、後は必要なデータのやり取りだけを行うという形をとります。これにより通信データ量を抑えることができ、パフォーマンスがよくなります。

<blockquote>

Ajax アプリケーションでは、ユーザのログ印字に大規模で複雑なクライアントが一度に配信されるので、トラフィックは最初の負荷が大きくなります。しかし、その後のサーバーとの通信ははるかに効率がよくなります。短期滞在的アプリケーションの場合、累積トラフィックは従来のウェブページアプリケーションの方が少ないものの、対話時間が長くなるにつれて、Ajax アプリケーションの大域幅コストは従来のアプリケーションよりも少なくなります。

<cite>本書 P.20  「Ajaxの特徴となる4つの原則」より</cite>

</blockquote>

<dl>
<dt class="info">Information</dt>
<dd>ページ全体をやり取りするのではなく、データだけをやり取りする。</dd>
</dl>

<h3>ユーザーとの対話は滑らかで継続的である</h3>

Ajax の A（Asynchronous） と DHTML によって、ページ全体をリフレッシュすることなく滑らかな反応を行うことができます。また、ユーザのブラウザに対するさまざまなイベントにフックできるため、洗練されたユーザインターフェース（ドラッグアンドドロップなど）を実現することができます。

<blockquote>

ただし、ユーザビリティの観点からすると、このような自由度の高さはそれほど重要ではありません。私たちの想像力を活かせるという利点はありますが、その一方で、ユーザーとの対話とサーバーサイドリクエストを一緒くたにすることにもなるからです。

<cite>本書 P.22  「Ajaxの特徴となる4つの原則」より</cite>

</blockquote>

<dl>
<dt class="info">Information</dt>
<dd>ユーザをイライラさせない。</dd>
</dl>

<h3>真のコーディングには規律が必要である</h3>

Ajax アプリケーションで使われる JavaScript は、従来型のアプリケーションで使われる JavaScript とは少し違ったものになります。従来型のアプリケーションでは、単に入力確認やページに少し装飾を行う程度の使い方でした。

Ajax アプリケーションにおける JavaScript は、ビジネスロジックの一部であったり、ワークフローの一部を担う複雑なものになります。そのため、アプリケーションを閉じるまでの間動作し続けるものでなければなりません。メモリリークや低速化が行われないように注意してコーディングを行う必要があります。

<dl>
<dt class="info">Information</dt>
<dd>やっつけ言語としての JavaScript ではなく、通常のコーディングと同じように規律を守ったコーディングを行う。</dd>
</dl>

<h2>CSS セレクタ</h2>

<h3>スタイルクラスの定義</h3>

HTML タグの種類と関係ないスタイリングのためのクラスを定義するには、「.（ドット）」をつけて定義する。

<pre class="code"><code>.info { border: solid blue 1px; backgournd-color: cyan }</code></pre>

クラスをネストすることもできる。

<pre class="code"><code>.info .help { font-size: small }
span.highlight { background-color: red }
</code></pre>

HTML 内で id 属性によって指定されたものだけに適用されるようなスタイルクラスを定義するには、「#」を使う。

<pre class="code"><code>#close { color: red }</code></pre>

擬似セレクタに基づいてスタイルを定義することもできる。

<a href="http://msugai.fc2web.com/web/CSS/pseudo.html" class="extlink" target="_blank">CSS概説 | 5. 擬似クラスと擬似要素</a>

次は、任意の要素の一文字目を 500% の文字サイズで表示する。

<pre class="code"><code>*:first-letter { font-size: 500% }</code></pre>

<h3>JSON</h3>

書けたら書く・・・

<h2>参考</h2>

+ Ajax アプリケーションを書けるようになる本
<div class="rakuten"><table size="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127728/sorehabooks-22/" target="_blank">実例で学ぶ! [入門と実践] Ajax+XML [CD-ROM付き]</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127728/sorehabooks-22/" target="_blank"><img src="http://images.amazon.com/images/P/4774127728.01._SCMZZZZZZZ_.jpg" border="0" alt="実例で学ぶ! [入門と実践] Ajax+XML [CD-ROM付き]" /></a></td><td valign="top"><font size="-1">川俣 晶 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774127728&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />説明が丁寧です．<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />実践Ajax：Ebookビューア<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />中途半端な人にお勧め？<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127728/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ Ajax の基礎に適しています
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774125792/sorehabooks-22/" target="_blank">Ajax 実装のための基礎テクニック</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774125792/sorehabooks-22/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4774125792.09._SCMZZZZZZZ_.jpg" border="0" alt="Ajax 実装のための基礎テクニック" /></a></td><td valign="top"><font size="-1">増井 雄一郎 深津 貴之 川崎 有亮 <br /><br /><iframe scrolling="no" frameborder="0" width="200" height="40" hspace="0" vspace="0" marginheight="0" marginwidth="0" src="http://webservices.amazon.co.jp/onca/xml?Service=AWSECommerceService&SubscriptionId=0G91FPYVW6ZGWBH4Y9G2&AssociateTag=goodpic-22&Operation=ItemLookup&IdType=ASIN&ContentType=text/html&Page=1&ResponseGroup=Offers&ItemId=4774125792&Version=2004-10-04&Style=http://www.g-tools.net/xsl/priceFFFFFF.xsl"></iframe><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" border="0" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />読物としても<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" border="0" alt="star" />基礎をしっかり据えられる<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" border="0" alt="star" />Ajaxに関するわかりやすい本<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774125792/sorehabooks-22/" target="_blank">Amazonで詳しく見る</a></font><font size="-2">by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://ec1.images-amazon.com/images/P/4844322222.01._SCMZZZZZZZ_V65930018_.jpg" border="0" alt="Ajaxイン・アクション" />
-----
KEYWORDS:
Ajax,インアクション,IN Action,はてな,Web2.0,4844322222
-----


-----
CF50_CF_4: Dave Crane (著), Eric Pascarello (著), Darren James (著), 柏原 正三 (著), 株式会社はてな (著), 網代 淳 (著), 星 睦 (著)
CF50_URL: http://ecx.images-amazon.com/images/I/51XH9AM41XL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4844322222/250-4907152-7500259?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4844322222
CF50_CF: インプレス
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: EJB3.0 プログラミング 覚書
BASENAME: ejb30_プログラミング_覚書
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 09/18/2006 09:44:17 PM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/gp/product/4797333367/250-5903137-8246621?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4797333367" target="_blank"><img src="http://images.amazon.com/images/P/4797333367.01._SCMZZZZZZZ_V60780079_.jpg" border="0" alt="標準EJB 3.0プログラミング" /></a>
</p>

EJB3.0 を使ったプログラミング覚書です。EJB3.0は <a href="http://www.hibernate.org/" target="_blank" class="extlink">Hibernate</a>、<a href="http://www.oracle.com/technology/products/ias/toplink/" target="_blank" class="extlink">TopLink</a>、<a href="http://www.springframework.org/" target="_blank" class="extlink">SpringFramework</a> の良いところを取り入れた、次期バージョンのの EJB です。

EJB3.0 は、EJB2.1 の問題点をいろいろと改善し、ほぼデフェクトスタンダードと言える Hibernate や SpringFramework などのフレームワークを参考にした機能を、標準化しています。

また、POJO の採用によるテストの効率化アップなど、 Ease of Development（EoD : 易しい開発）を追求しています。

Ejb3.0 は、次のような特徴を持っています。

<ul><li>Java Persistence API（JPA : 永続化 API ）による永続化フレームワークの標準化</li>
<li>アノテーションの採用</li>
<li>デフォルト値の多用</li>
<li>POJO のサポート、EJB インターフェースからの開放</li>
<li>Dependency Injection（DI : 依存性の注入）の採用</li></ul>

Ejb3.0 の覚書をチョコチョコと書いていこうと思います。
-----
EXTENDED BODY:
<h2>覚書</h2>

<h3>環境</h3>

<ul><li>JDK1.5.0_06</li>
<li>JBoss-4.0.4.GA-Patch1</li>
<li>HSQLDB1.8.0</li></ul>

<h2>ハマった点</h2>

<h3>JBoss4.0.4RC1 で NullPointerException が出る</h3>

JBoss4.0.4RC1 で JPA を使ったサンプルを動かそうとしたら、下のような例外がでました。

<pre>[java]&nbsp;21:38:11,820&nbsp;INFO&nbsp;&nbsp;[Environment]&nbsp;Hibernate&nbsp;3.1.2
[java]&nbsp;21:38:11,836&nbsp;INFO&nbsp;&nbsp;[Environment]&nbsp;hibernate.properties&nbsp;not&nbsp;found
[java]&nbsp;21:38:11,836&nbsp;INFO&nbsp;&nbsp;[Environment]&nbsp;using&nbsp;CGLIB&nbsp;reflection&nbsp;optimizer
[java]&nbsp;21:38:11,852&nbsp;INFO&nbsp;&nbsp;[Environment]&nbsp;using&nbsp;JDK&nbsp;1.4&nbsp;java.sql.Timestamp&nbsp;handling
[java]&nbsp;21:38:12,070&nbsp;DEBUG&nbsp;[Ejb3Configuration]&nbsp;Trying&nbsp;to&nbsp;find&nbsp;persistence&nbsp;unit:&nbsp;SamplePersistenceUnit
[java]&nbsp;21:38:12,102&nbsp;FATAL&nbsp;[PersistenceXmlLoader]&nbsp;SamplePersistenceUnit&nbsp;RESOURCE_LOCAL
[java]&nbsp;javax.persistence.PersistenceException:&nbsp;java.lang.NullPointerException
[java]&nbsp;at&nbsp;org.hibernate.ejb.Ejb3Configuration.createEntityManagerFactory(Ejb3Configuration.java:173)
[java]&nbsp;at&nbsp;org.hibernate.ejb.HibernatePersistence.createEntityManagerFactory(HibernatePersistence.java:103)
[java]&nbsp;at&nbsp;javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:37)
[java]&nbsp;at&nbsp;javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:27)
[java]&nbsp;at&nbsp;com.hamasyou.ejb3.client.Client.execute(Client.java:40)
[java]&nbsp;at&nbsp;com.hamasyou.ejb3.client.Client.main(Client.java:31)
[java]&nbsp;Caused&nbsp;by:&nbsp;java.lang.NullPointerException
[java]&nbsp;at&nbsp;org.hibernate.ejb.packaging.PersistenceXmlLoader.deploy(PersistenceXmlLoader.java:68)
[java]&nbsp;at&nbsp;org.hibernate.ejb.Ejb3Configuration.createEntityManagerFactory(Ejb3Configuration.java:139)
[java]&nbsp;...&nbsp;5&nbsp;more</pre>

Persistence-Unit のルックアップのところで <code>NullPointerException</code> が出てしまいました。原因はよくわかりませんが、JBoss4.0.4-RC1 は ejb3.deployer が無いそうなので、そのあたりが原因なのかなぁと・・・。

対処方法は、JBoss をアップグレードすること。JBoss-4.0.4.GA-Patch1 に入れ替えたら動くようになりました。
-----
EXCERPT:
<img src="http://images.amazon.com/images/P/4797333367.01._SCMZZZZZZZ_V60780079_.jpg" style="float:left; margin:15px;" border="0" alt="標準EJB 3.0プログラミング" />
-----
KEYWORDS:
EJB3.0,プログラミング,覚書
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: JUnitと単体テスト技法―JUnit4対応
BASENAME: junitjunit4
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 10/09/2006 01:19:42 PM
TAGS: JUnit,テスト技法
-----
BODY:
本書は、JUnit の使い方と単体テストについての知識を得られるものになっています。JUnit を使ったテストファーストの流れを説明し、テストとは何か（単体テスト、結合テスト、システムテスト）ということを解説しています。

対象読者は次のような人です。

<ul><li>JUnit を使ったテストファーストを学んでみたい</li>
<li>単体テストでどんなテストを行えばよいのか迷っている</li>
<li>テスト技法に関してさらっと基礎をつかんでおきたい</li>
</ul>

<h4>テストファーストに関してさらに学びたい人にはこちらがお勧めです</h4>

『<a href="http://www.amazon.co.jp/gp/product/479810714X/503-3688169-6412757?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=479810714X" target="_blank" class="extlink">バグがないプログラムのつくり方 JavaとEclipseで学ぶTDDテスト駆動開発</a>』 

<dl>
<dt class="info">Information</dt>
<dd>本書で説明されている JUnit のバージョンは 3.8.1 です。付録に JUnit4 の説明が20数ページ割かれています。</dd>
</dl>
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>単体テストがターゲット</h3>

本書は単体テストをターゲットにした本になっています。単体テストには JUnit を使います。

<a href="http://www.techscore.com/tech/Others/JUnit/1.html" target="_blank" class="extlink">単体テストとJUnit-TECHSCORE</a>

<h4>単体テストとは</h4>

<blockquote>

単体テストは、モジュールを単位としたテストです。Java の場合、クラス、メソッドが単体テスト対象となります。&lt;中略&gt; 単体テストとは、開発者（プログラマ）が自分で作ったプログラムが「ちゃんと動くか」調べる作業です。

<cite>本書 P.59 「単体テストの技法」より</cite>

</blockquote>

単体テストは、プログラマが自分の作ったプログラムをテストすることを指します。単体テストでは、テスト対象だけでテストが実行できることがベストです。そのためには、外部に依存する部分をモックオブジェク（Mock Object）などを使ってテストしやすくする必要があります。

<a href="http://bobchin.ddo.jp/simpletest/mock_objects_documentation.html" target="_blank" class="extlink">モックオブジェクトとは - SimpleTest for PHP</a>

<h4>単体テスト項目</h4>

単体テストでは、次のような項目をテストします。

<ul><li>境界値</li>
<li>条件分岐</li>
<li>網羅性（カバレッジ）</li>
<li>例外ケース</li>
<li>エラーが出そうな値（マイナス値、巨大な値、0、NULL）</li>
<li>パフォーマンス</li></ul>

上記のテストを、正常系とエラー系に分けてそれぞれテストを行います。

<h3>テストファーストを体験できる</h3>

本書は、単体テストをテストファーストという開発手法で行う手順を解説しています。テストファーストとは、テストを最初に行う開発手法のことです。

<dl>
<dt class="tips">Tips</dt>
<dd>ここでいうテストとは、プログラムを書いた後に記述するテストとは少し意味合いが異なると僕は考えています。テストファーストで記述するテストは、動くことの確認という意味合いよりも、こう動かなければいけないという仕様を強くあらわしていると考えています。そのため、仕様が決まっていなければテストファーストを実行することができません。これにより、「仕様は決まってないんだけど、とりあえずコーディングする」という悪行が防げます。</dd>
</dl>

<h3>テスト技法のおさらいができる</h3>

本書で上げられているテスト技法には次のものがあります。

<ul><li>ブラックボックステスト</li><li>ホワイトボックステスト</li></ul>

<h4>ブラックボックステスト</h4>

ブラックボックステストは、プログラムの仕様を元にテストを行うものです。プログラムの内部構造は考慮せず、入出力の仕様に注力します。ブラックボックステストとして、次の4つのテストがあげられています。

<ul><li>同値クラステスト</li><li>境界値テスト</li><li>デシジョンテーブルテスト</li><li>強制エラーテスト</li><li>グレーボックステスト</li></ul>

<h4>ホワイトボックステスト</h4>

ホワイトボックステストは、プログラムの内部構造を元にテストを行うものです。条件分岐、データ構造、実装方法などのプログラムの内部を熟知した上でですとを行います。JUnit を用いた単体テストは、主にこのホワイトボックステストを行います。

<ul><li>制御フローテスト</li><li>データフローテスト</li></ul>

<h3>テストの種類がまとまっている</h3>

単体テスト以外にも、結合テスト、システムテストといったテストの説明がされています。

<h4>結合テスト</h4>

単体テストが完了したモジュールを組み合わせて行うテストのことです。テストシナリオを考えてテストを行います。

<ul><li>トップダウンテスト</li><li>ボトムアップテスト</li><li>サンドイッチテスト</li><li>ビックバンテスト</li></ul>

<h4>システムテスト</h4>

システム全体のテストを行います。

<ul><li>性能テスト（パフォーマンステスト）</li><li>負荷テスト</li><li>例外処理テスト</li><li>操作性テスト</li></ul>

<h2>覚書</h2>

JUnit4 についてすごくよくまとまっているサイトを見つけたので参考に。

<a href="http://www.okisoft.co.jp/esc/testing/JUnit4-TestNG.html" target="_blank" class="extlink">JUnit 4 &amp; TestNG</a>

<h2>参考</h2>

+ ソフトウェアテストのバイブル
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282511/sorehabooks-22/ref=nosim/" target="_blank">はじめて学ぶソフトウェアのテスト技法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282511/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4822282511.09._SCMZZZZZZZ_V1131699820_.jpg" border="0" alt="はじめて学ぶソフトウェアのテスト技法" /></a></td><td valign="top"><font size="-1">リー・コープランド 宗 雅彦 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />改めてソフトウェアテストを知りたい方へ<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282511/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ソフトウェアテストのバイブル その二
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281132/sorehabooks-22/ref=nosim/" target="_blank">基本から学ぶソフトウェアテスト―テストの「プロ」を目指す人のために</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281132/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4822281132.09._SCMZZZZZZZ_V1056615793_.jpg" border="0" alt="基本から学ぶソフトウェアテスト―テストの「プロ」を目指す人のために" /></a></td><td valign="top"><font size="-1">Cem Kaner Hung Quoc Nguyen Jack Falk <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />ソフトウェア技術者　必読の書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />とりあえず開発者も含めて目を通しておけば役に立つ部分がある<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif" alt="stars" />英語版の資料が古いか？？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif" alt="stars" />どうでしょうか？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />ソフトウェア開発に携わるすべての人に読んで欲しい!<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281132/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ バイブルからよいとこ取りした鉄則書
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/482228154X/sorehabooks-22/ref=nosim/" target="_blank">ソフトウェアテスト293の鉄則</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/482228154X/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/482228154X.09._SCMZZZZZZZ_V1057206251_.jpg" border="0" alt="ソフトウェアテスト293の鉄則" /></a></td><td valign="top"><font size="-1">Cem Kaner James Bach Bret Pettichord <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />大爆笑の教訓書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif" alt="stars" />テスト屋の業界話に終始<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />テスト関係者だけでなくソフトウェア開発に関わる人に読んで欲しい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />プログラマーに負けないテスターになるために...<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />現場主義からの強力な支援ツールと成り得る一冊<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/482228154X/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ TDD（テスト駆動開発）の発案者による本
<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/ref=nosim/" target="_blank">テスト駆動開発入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4894717115.01._SCMZZZZZZZ_V53339020_.jpg" border="0" alt="テスト駆動開発入門" /></a></td><td valign="top"><font size="-1">ケント ベック Kent Beck 長瀬 嘉秀 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />何のプログラムを作っているのかがキー<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif" alt="stars" />翻訳がひどい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />表現と翻訳に問題<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />TDDプログラマの思考過程が読める<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />想定読者レベルはバリバリの実装者・・・<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images.amazon.com/images/P/4883732304.01._SCMZZZZZZZ_V59355889_.jpg" border="0" alt="JUnitと単体テスト技法" />
-----
KEYWORDS:
JUnit,JUnit4対応,単体テスト,技法,4883732304
-----

COMMENT:
AUTHOR: softest
EMAIL: softestmaster@gmail.com
IP: 202.248.88.141
URL: http://softest.cocolog-nifty.com/blog/
DATE: 11/29/2006 12:03:36 PM
はじめまして。トラックバックさせていただきました。
いろいろな書籍の紹介があって、参考にさせていただきます！
-----


PING:
TITLE: &#33521;&#35821;&#23398;&#20064;&#26041;&#27861;
URL: http://www.51ynw.net
IP: 174.143.242.154
BLOG NAME: &#33521;&#35821;&#23398;&#20064;&#26041;&#27861;
DATE: 02/23/2011 02:48:19 AM
&#31361;&#30772;&#20256;&#32479;&#26041;&#27861;&#65292;&#33521;&#35821;&#277...
-----

-----
CF50_CF_4: 福島 竜 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51WDKXDA6AL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4883732304/503-3688169-6412757?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4883732304
CF50_CF: ソフトリサーチセンター
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: [自分用] Eclipse 開発環境
BASENAME: _eclipse
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 10/27/2006 12:14:17 AM
-----
BODY:
<p>
<a href="http://www.amazon.co.jp/gp/product/4774129313/503-7529252-6625510?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774129313" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4774129313.01._SCMZZZZZZZ_V38454789_.jpg" border="0" alt="WEB+DB PRESS Vol.35" /></a>
</p>

自分用の Eclipse 開発環境メモ。『Web+DB Press vol.35 の実演テスト駆動開発』 を読んで、自分用の開発環境テンプレートを作ろうとやっと決心したので ( ..)φメモメモ （といっても、ほとんど記事の内容そのままだけど）

ちなみに、TDD（Test Driven Development: テスト駆動開発） の利点は、「テスト可能なコードになる」、「コード利用者の視点を得る事ができる」、「インターフェースと実装を分けて考えることができる」。 2番目のコード利用者の視点を得ることができるというのに特に共感できる。自分の中で、インターフェースはユーザ（コードの利用者）が決めるものだ！というポリシーがあるので。t-wadaさんには、一度だけお会いしたことがある（名刺交換だけだけど）。
-----
EXTENDED BODY:
<h2>Eclipse 環境</h2>

<h3>ライブラリ</h3>

<ul><li><a href="http://www.meisei-u.ac.jp/mirror/apache/dist/maven/binaries/" target="_blank" class="extlink">Maven2</a></li>
<li><a href="http://db.apache.org/derby/" target="_blank" class="extlink">Apache Derby</a></li></ul>

<h3>Eclipse プラグイン</h3>

<ul><li><a href="http://m2eclipse.codehaus.org/" target="_blank" class="extlink">Maven 2.x Plug-in for Eclipse (m2eclipse)</a></li>
<li><a href="http://subclipse.tigris.org/" target="_blank" class="extlink">Subclipse</a></li>
<li><a href="http://www.geocities.com/uwe_ewald/dbedit.html" target="_blank" class="extlink">DbEdit Plugin for Eclipse (http://dbedit.sourceforge.net/update)</a></li>
<li><a href="http://www.xmlbuddy.com/" target="_blank" class="extlink">XMLBuddy</a></li></ul>

<h3>キーバインド</h3>

<ul><li>Ctrl + U  （Linu Up）</li><li>Ctrl + L  （Next Column）</li><li>Ctrl + N  （Line Down）</li><li>Ctrl + H  （Prev Column）</li></ul>

<h2>Web アプリケーション用のディレクトリ構成</h2>

<h3>1. Web アプリケーション用のディレクトリを作成する</h3>

Eclipse のワークスペースで下記のコマンドを実行する

<pre class="console">> <kbd>mvn archetype:create -DgroupId=&lt;&lt;プロジェクトのパッケージ 例：com.hamasyou.webapp&gt;&gt; -DartifactId=&lt;&lt;プロジェクト名（アプリケーションコンテキスト名）&gt;&gt; -DarchetypeArtifactId=maven-archetype-webapp</kbd>
</pre>

<h3>2. Eclipse プロジェクトに変換する</h3>

作成されたディレクトリに移動して下記のコマンドを実行する。
<pre class="console">> <kbd>mvn eclipse:eclipse</kbd></pre>

<h3>3. Eclipse にインポートする</h3>

「ファイル」-「インポート」-「既存プロジェクトをワークスペースへ」

<h3>4. ソースディレクトリの作成する</h3>

「新規」-「ソースフォルダ」で下記のソースフォルダを作成する。

<ul><li>src/main/java</li><li>src/test/java</li><li>src/test/resources</li></ul>

<h3>5. Maven2 の pom.xml にソースディレクトリを要素を記述する</h3>

<pre class="code"><code><span class="tag">&lt;project <span class="attr">xmlns=</span><span class="value">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi=</span><span class="value">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> 
  <span class="attr">xsi:schemaLocation=</span><span class="value">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span> 
  <span class="tag">&lt;modelVersion&gt;</span>4.0.0<span class="tag">&lt;/modelVersion&gt;</span> 
  <span class="tag">&lt;groupId&gt;</span>com.hamasyou.todocal<span class="tag">&lt;/groupId&gt;</span> 
  <span class="tag">&lt;artifactId&gt;</span>todocal<span class="tag">&lt;/artifactId&gt;</span> 
  <span class="tag">&lt;packaging&gt;</span>war<span class="tag">&lt;/packaging&gt;</span> 
  <span class="tag">&lt;version&gt;</span>1.0<span class="tag">&lt;/version&gt;</span> 
  <span class="tag">&lt;name&gt;</span>TODO Calendar<span class="tag">&lt;/name&gt;</span> 
 
  <span class="tag">&lt;dependencies&gt;</span> 
    <span class="tag">&lt;dependency&gt;</span> 
      <span class="tag">&lt;groupId&gt;</span>junit<span class="tag">&lt;/groupId&gt;</span> 
      <span class="tag">&lt;artifactId&gt;</span>junit<span class="tag">&lt;/artifactId&gt;</span> 
      <span class="tag">&lt;version&gt;</span>4.1<span class="tag">&lt;/version&gt;</span> 
      <span class="tag">&lt;scope&gt;</span>test<span class="tag">&lt;/scope&gt;</span> 
    <span class="tag">&lt;/dependency&gt;</span> 
  <span class="tag">&lt;/dependencies&gt;</span> 
 
  <span class="tag">&lt;build&gt;</span> 
    <span class="tag">&lt;finalName&gt;</span>todocal<span class="tag">&lt;/finalName&gt;</span> 
    <span class="tag">&lt;sourceDirectory&gt;</span>src/main/java<span class="tag">&lt;/sourceDirectory&gt;</span> 
    <span class="tag">&lt;testSourceDirectory&gt;</span>src/test/java<span class="tag">&lt;/testSourceDirectory&gt;</span> 
  <span class="tag">&lt;/build&gt;</span> 
<span class="tag">&lt;/project&gt;</span>
</code></pre>

<h3>6. Eclipse の出力フォルダを変更する</h3>

パッケージエクスプローラのプロジェクトのプロパティで 「ビルドパス」-「「出力フォルダ」 を選択して、「特定の出力フォルダ」を有効にして src/test/java と src/test/resources の出力フォルダを 「target/test-classes」 等にする。

<h3>7. m2eclipse プラグイン環境変数を削除する</h3>

パッケージエクスプローラのプロジェクトのプロパティの 「ビルドパス」-「ビルドパスの構成」 から M2_REPO の行を除去する。
※ m2eclipse を使う場合は M2_REPO の参照は不要らしい。

<h3>8. Eclipse の m2eclipse プラグインを有効にする</h3>

パッケージエクスプローラのプロジェクトを右クリックし、「Maven2」-「Enable」 をクリックする。

<h3>9. Maven2 がライブラリをダウンロードするときに一緒にソースコードもダウンロードする</h3>

メニューの 「ウィンドウ」-「設定」 の Maven2 の設定から 「Download Artifact Sources」 にチェックを入れる。

<h2>テスト環境を整える</h2>

<h3>1. jetty プラグインを設定する</h3>

pom.xml に下記を記述する

<pre class="code"><code><span class="rem">&lt;!--中略--&gt;</span>
  <span class="tag">&lt;build&gt;</span>
    <span class="tag">&lt;finalName&gt;</span>todocal<span class="tag">&lt;/finalName&gt;</span>
    <span class="tag">&lt;sourceDirectory&gt;</span>src/main/java<span class="tag">&lt;/sourceDirectory&gt;</span>
    <span class="tag">&lt;testSourceDirectory&gt;</span>src/test/java<span class="tag">&lt;/testSourceDirectory&gt;</span>
    <span class="tag">&lt;plugins&gt;</span>
      <span class="tag">&lt;plugin&gt;</span>
        <span class="tag">&lt;groupId&gt;</span>org.mortbay.jetty<span class="tag">&lt;/groupId&gt;</span>
        <span class="tag">&lt;artifactId&gt;</span>maven-jetty-plugin<span class="tag">&lt;/artifactId&gt;</span>
        <span class="tag">&lt;configuration&gt;</span>
          <span class="tag">&lt;contextPath&gt;</span>/todocal<span class="tag">&lt;/contextPath&gt;</span>
          <span class="tag">&lt;scanIntervalSeconds&gt;</span>10<span class="tag">&lt;/scanIntervalSeconds&gt;</span>
          <span class="tag">&lt;connectors&gt;</span>
            <span class="tag">&lt;connector <span class="attr">implementation=</span><span class="value">&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;</span>&gt;</span>
              <span class="tag">&lt;port&gt;</span>8080<span class="tag">&lt;/port&gt;</span>
              <span class="tag">&lt;maxIdleTime&gt;</span>6000<span class="tag">&lt;/maxIdleTime&gt;</span>
            <span class="tag">&lt;/connector&gt;</span>
          <span class="tag">&lt;/connectors&gt;</span>
        <span class="tag">&lt;/configuration&gt;</span>
      <span class="tag">&lt;/plugin&gt;</span>
    <span class="tag">&lt;/plugins&gt;</span>
  <span class="tag">&lt;/build&gt;</span>
<span class="tag">&lt;/project&gt;</span>
</code></pre>

<h3>2. jetty サーバを起動する</h3>

プロジェクトディレクトリに移動して、下記のコマンドを実行する。
<pre class="console">> <kbd>mvn jetty:run</kbd></pre>

jetty はクラスファイルの更新検知機能があるので、クラスファイルが更新されると自動で再起動される。

<h3>3. HttpUnit と Apache Geronimo をインストールする</h3>

pom.xml に下記を記述する

<pre class="code"><code><span class="rem">&lt;!--中略--&gt;</span>
  <span class="tag">&lt;dependencies&gt;</span>
    <span class="tag">&lt;dependency&gt;</span>
      <span class="tag">&lt;groupId&gt;</span>junit<span class="tag">&lt;/groupId&gt;</span>
      <span class="tag">&lt;artifactId&gt;</span>junit<span class="tag">&lt;/artifactId&gt;</span>
      <span class="tag">&lt;version&gt;</span>4.1<span class="tag">&lt;/version&gt;</span>
      <span class="tag">&lt;scope&gt;</span>test<span class="tag">&lt;/scope&gt;</span>
    <span class="tag">&lt;/dependency&gt;</span>
    <span class="tag">&lt;dependency&gt;</span>
      <span class="tag">&lt;groupId&gt;</span>httpunit<span class="tag">&lt;/groupId&gt;</span>
      <span class="tag">&lt;artifactId&gt;</span>httpunit<span class="tag">&lt;/artifactId&gt;</span>
      <span class="tag">&lt;version&gt;</span>1.6.1<span class="tag">&lt;/version&gt;</span>
      <span class="tag">&lt;scope&gt;</span>test<span class="tag">&lt;/scope&gt;</span>      
    <span class="tag">&lt;/dependency&gt;</span>
    <span class="tag">&lt;dependency&gt;</span>
      <span class="tag">&lt;groupId&gt;</span>geronimo-spec<span class="tag">&lt;/groupId&gt;</span>      
      <span class="tag">&lt;artifactId&gt;</span>geronimo-spec-servlet<span class="tag">&lt;/artifactId&gt;</span>
      <span class="tag">&lt;version&gt;</span>2.4-rc4<span class="tag">&lt;/version&gt;</span>
      <span class="tag">&lt;scope&gt;</span>provided<span class="tag">&lt;/scope&gt;</span>
    <span class="tag">&lt;/dependency&gt;</span>
  <span class="tag">&lt;/dependencies&gt;</span>
<span class="rem">&lt;!--中略--&gt;</span>
</code></pre>

<h2>その他</h2>

maven2 のプラグインで、アプリケーションがアプリケーションサーバにロードされたタイミングで Apache Derby も起動するようなのがないかなぁ・・・。HSQLDB はそういうことがができたんだけど。

<a href="http://amateras.sourceforge.jp/cgi-bin/fswiki/wiki.cgi/free?page=hsqldb" target="_blank" class="extlink">Web アプリケーション起動時に HSQLDB を起動する</a>
-----
EXCERPT:
<img src="http://ec1.images-amazon.com/images/P/4774129313.01._SCMZZZZZZZ_V38454789_.jpg" border="0" alt="WEB+DB PRESS Vol.35" />
-----
KEYWORDS:
Eclipse,開発環境,自分用,4774129313
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Ship It! ソフトウェアプロジェクト 成功のための達人式ガイドブック
BASENAME: ship_it
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 10/28/2006 12:49:55 PM
TAGS: "The Pragmatic Programmersシリーズ",達人プログラマ
-----
BODY:
The Pragmatic Programmers シリーズの本です。ソフトウェア開発の日々の進め方の具体的なアドバイスが満載です。『<a href="http://www.amazon.co.jp/gp/product/4894712741/503-7529252-6625510?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4894712741" target="_blank" class="extlink">達人プログラマー―システム開発の職人から名匠への道</a>』、『<a href="http://www.amazon.co.jp/gp/product/475614599X/503-7529252-6625510?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=475614599X" target="_blank" class="extlink">達人プログラマー―ソフトウェア開発に不可欠な基礎知識 バージョン管理/ユニットテスト/自動化</a>』で説明されている達人プログラマーの偉大な習慣を、具体的にどう実践するかについて書かれています。

今日からでも実践できる内容にまで落とされているので、読んですぐに理解できるし、わかりやすいです。今までもこういう本を読んできたけどうまく実践できなかったという人にお勧めです。

本書は、すばらしいプロジェクトにするための、「インフラストラクチャ」、「テクニック」、「プロセス」 について書かれています。インフラストラクチャでは、チームが仕事をより楽に進めるための各種ツールを、テクニックでは、苦労してではなく賢く仕事を進めるために毎日使える習慣を、プロセスでは、曳光弾（えいこうだん）開発とよばれる開発プロセスの方法論を紹介しています。

この本は、偉大な習慣を学ぶ本です。

<q>「僕は、偉大なプログラマなんかじゃない。偉大な習慣を身につけたプログラマなんだ。」<cite>Kent Beck</cite></q>

-----
EXTENDED BODY:
<h2>覚書</h2>

<h3>すばらしいプロジェクトを作るために</h3>

<h4>インフラストラクチャ</h4>

チーム全員の仕事をより楽に進めるための各種ソフトウェア。

<ul>
<li>バージョン管理</li>
<li>ビルドスクリプト</li>
<li>継続的なビルド</li>
<li>問題の追跡</li>
<li>機能の追跡</li>
<li>テストの自動実行</li></ul>

<h4>テクニック</h4>

苦労してではなく賢く仕事を進めるために毎日使える手法。

<ul>
<li>技術主任</li>
<li>リスト</li>
<li>コードレビュー</li>
<li>コード変更の通知</li>
<li>ミーティング</li></ul>

<h4>プロセス</h4>

曳光弾（えいこうだん）開発。

<ul>
<li>システムオブジェクトの提案</li>
<li>インターフェースの提案</li>
<li>インターフェースを接続</li>
<li>機能の追加</li>
<li>リファクタリング</li></ul>

<h3>インフラストラクチャ</h3>

<h4>サンドボックス開発</h4>

他の開発者の影響を受けないような環境を構築して開発を行う。

<h4>SCM には製品のビルドに必要なものすべてをいれる</h4>

サードパティライブラリ、ビルドスクリプト、ソースコード、マニュアルなど、製品のビルドに必要なものはすべて SCM （Source Configuration Management：ソースコード管理）に保存しておく。

例外は、自分で作り出せるファイル（中間コードやコンパイル後のコード）だけ。

<h4>最初にビルドスクリプトを作る</h4>

IDE 以外でビルドができるように、ビルドスクリプトを最初に作成する。そして、ソースコードに変更があるたびにビルドスクリプトを実行するようにする。

<h4>問題の追跡</h4>

次のような項目を問題追跡のために記録する。

<ul>
<li>製品のバージョン</li>
<li>誰が遭遇したか</li>
<li>深刻度</li>
<li>再現性</li>
<li>環境（OS、DBなどのバージョン）</li>
<li>修正バージョン</li>
<li>修正担当者</li>
<li>修正の確認者</li></ul>

<h3>テクニック</h3>

<h4>作業リストに基づいた作業</h4>

作業リスト（TODOリスト）を作成し、それにしたがって作業を行っていく。作業リスト駆動の仕事の進め方は、『<a href="http://www.amazon.co.jp/gp/product/4873113075/503-7529252-6625510?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4873113075" target="_blank" class="extlink">エンジニアのための時間管理術（オライリー）</a>』 がお奨めです。

<h4>すべてのソースコードをレビューする</h4>

レビュー目的のためのペアプログラミング。技術主任（アーキテクト）を専任でアサインし、その人にすべてのソースコードをみてもらう。レビューは細かく多く。大きく少なくだと、技術主任がつらい。

ゴム製のアヒルちゃん（『<a href="http://www.amazon.co.jp/gp/product/4894712741/503-7529252-6625510?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4894712741" target="_blank" class="extlink">達人プログラマー</a>』より）を用意するのもよい。何か問題があれば、まずはアヒルちゃんに聞いてもらう。人に話すとほとんどの問題は自分で答えがだせる。

<h2>参考</h2>

+ 時間管理術（TODOリストの活用）
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/sorehabooks-22/ref=nosim/" target="_blank">エンジニアのための時間管理術</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4873113075.01._SCMZZZZZZZ_V38768744_.jpg" border="0" alt="エンジニアのための時間管理術" /></a></td><td valign="top"><font size="-1">Thomas A. Limoncelli 株式会社クイープ <br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 達人プログラマを読んでない人は、すぐによむべし！
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/ref=nosim/" target="_blank">達人プログラマー―システム開発の職人から名匠への道</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4894712741.09._SCMZZZZZZZ_V1122560456_.jpg" border="0" alt="達人プログラマー―システム開発の職人から名匠への道" /></a></td><td valign="top"><font size="-1">アンドリュー ハント デビッド トーマス Andrew Hunt <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />初級PGから上級PGになるための本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />SEの基本が書かれてます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />達人エンジニアになる方法<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />プログラマーの為の自己啓発本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />達人プログラマー<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ SCM には Subversion がおすすめです。
<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066134/sorehabooks-22/ref=nosim/" target="_blank">Subversion実践入門&#8212;達人プログラマに学ぶバージョン管理</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066134/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4274066134.01._SCMZZZZZZZ_V1125478891_.jpg" border="0" alt="Subversion実践入門&#8212;達人プログラマに学ぶバージョン管理" /></a></td><td valign="top"><font size="-1">Mike Mason でびあんぐる <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />バージョン管理を知るためにも......<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />文字どうり実践の入門<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />良い本だが、Tortoiseにフォーカスした本も欲しい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />「Subversion解説書」との比較<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066134/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ 達人プログラマとして持つべき思想
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066304/sorehabooks-22/ref=nosim/" target="_blank">Joel on Software</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066304/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4274066304.01._SCMZZZZZZZ_V1135234747_.jpg" border="0" alt="Joel on Software" /></a></td><td valign="top"><font size="-1">Joel Spolsky 青木 靖 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />プログラミングチームを率いるときに<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />優秀な開発者がいつも考えていること<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />批判的精神を持って読むべし<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />地に足が着いています<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />マネージャは空気嫁ということなのでしょう。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274066304/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>

+ ハッカーとして持つべき思想
<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/sorehabooks-22/ref=nosim/" target="_blank">ハッカーと画家 コンピュータ時代の創造者たち</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://images.amazon.com/images/P/4274065979.09._SCMZZZZZZZ_V1107494886_.jpg" border="0" alt="ハッカーと画家 コンピュータ時代の創造者たち" /></a></td><td valign="top"><font size="-1">ポール グレアム Paul Graham 川合 史朗 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />エンジニアを組織、管理している立場の人間にぜひ読んでもらいたい。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />共感！！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />開発疲れしたあなたに<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />ハッカーの川合さんが翻訳したハッカーについての本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />単純に読むべし<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table></div>
-----
EXCERPT:
<img src="http://images.amazon.com/images/P/4274066568.01._SCMZZZZZZZ_V59128961_.jpg" border="0" alt="Ship It! ソフトウェアプロジェクト 成功のための達人式ガイドブック" />
-----
KEYWORDS:
開発環境,Ship It!, Pragmatic Programmers, 達人プログラマ,ソフトウェア,プロジェクト,ガイドブック,開発方法,4274066568
-----


-----
CF50_CF_4: Jared Richardson (著), William Gwaltney Jr. (著), でびあんぐる (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51VF38AXB2L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4274066568/503-7529252-6625510?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4274066568
CF50_CF: オーム社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: エンジニアのための時間管理術
BASENAME: post_33
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
DATE: 01/27/2007 01:01:27 PM
TAGS: "Life Hack",時間管理
-----
BODY:
本書は【システム管理者】向けの時間・タスク・スケジュール管理のテクニックを説明した書籍です。タイトルにはエンジニアと書いてあるのに本文ではシステム管理者と説明されていて、ちょっと混乱するかもしれません。

今までタイムマネージメント本と違うところは、システム管理者のためだけに書かれているという点です。本書の各章でシステム管理者特有の問題がまとめられていて、システム管理者のライフサイクルをどのように変化させればよいかという点について書かれています。

以下が本書の目次です。

<ul><li>タイムマネージメントの原則</li>
<li>集中と割り込み</li>
<li>ルーチン</li>
<li>サイクルシステム</li>
<li>サイクルシステム：作業リストとスケジュール</li>
<li>サイクルシステム：カレンダーの管理</li>
<li>サイクルシステム：人生の目標</li>
<li>優先順位</li>
<li>ストレスの管理</li>
<li>電子メールの管理</li>
<li>時間の浪費</li>
<li>文章化</li>
<li>自動化</li></ul>

本書の対象読者は、いつも時間に追われているシステム管理者、タスクリスト（TODOリスト）をうまく使いたいエンジニアです。テクニック本なので気軽に読み進めて、簡単なものから真似していくのがよいと思います。
-----
EXTENDED BODY:
<h2>特徴</h2>

<h3>システム管理者のタイムマネジメントの原則</h3>

本書は、システム管理者の時間管理に関して書かれています。他の職種、例えば営業職や販売職や事務職、とは違ったシステム管理者特有の問題に関しての HowTo 本です。本書で紹介されている手法は次の6つの原則に基づいています。

<ol><li>時間に関する情報をひとつにまとめる</li>
<li>自分の頭は重要な作業のために温存する（どうでもよいことに頭を使わない）</li>
<li>日課（ルーチン）を決める（日常的な作業を日課にする）</li>
<li>習慣やモットーを養う（決まりきったプロセスを大事にし、頭を使わない）</li>
<li>日常生活も仕事も同じツールを使用する</li></ol>

時間管理が必要な理由は、もっと重要な作業に頭と時間を使うためです。そのための原則がこれらになるわけです。

<h3>格言・名言・行動指針・アドバイス・テクニック</h3>

本書は How To 本ですので、いろいろなテクニックが説明されています。格言であったり行動指針として説明されています。例えば、自分の作業机を整理するために次のような行動指針が説明されています。

<blockquote>

<strong>迷ったときは捨てる</strong>

<ol><li>ファイルに閉じれるものは閉じる</li>
<li>未処理の仕事はすぐに取り掛かれるように準備する</li>
<li>処理できない仕事・資料は、3ヶ月たっても処理されなかった場合は捨てると決めたボックスに入れる</li></ol>

<cite>本書 P.16 「集中しやすい環境」より</cite>

</blockquote>

他にも仕事をする上での次のようなアドバイスが書かれています。

<dl>
  <dt>計測は二度、切断は一度</dt>
    <dd>元に戻せない変更を行うときは注意深く行うこと</dd>
  <dt>ファイルを変更する前にバックアップを取る</dt>
    <dd>変更に失敗したときにすぐに戻せるようにバックアップを取ってお</dd>
  <dt>マニュアルを読む</dt>
    <dd>どうしようもなくなったら、資料を読んでみる</dd>
  <dt>デバッグの変更は一度に一つ</dt>
    <dd>わけがわからなくなるほど壊れる前に、一つずつ手順を踏むこと</dd>
  <dt>常に作業をテストする</dt>
    <dd>ミスしないように注意を向けるためにテストを考える。それでも失敗することはあるが...</dd>
  <dt>顧客がテストするまで完了しない</dt>
    <dd>依頼人、お客さんがO.K.を出すまでは作業は終わらない</dd>
  <dt>どうしてもダメなときは時間を置いてみる</dt>
    <dd>何か別のところでの問題が原因でうまくできないのかもしれない。ネットワークが切断されていたりとか...</dd>
</dl>

<h3>システム管理者のための本</h3>

本書はシステム管理者のために書かれています。タイトルには「エンジニアのための」と銘打っているのに、中身はシステム管理者向け。僕がエンジニアときくとシステムエンジニアを思い浮かべてしまいます。

なので、本書を見かけたときには、プログラマや SE のための時間管理術が書かれているのかとちょっと期待しました。まあ、とはいえ、システムエンジニアの方にも普通に当てはまることも多く素直に学べる点もたくさん書かれています。

時間管理がうまくいかない人はぜひ読んでみてください。

<h2>参考</h2>

+ Life Hack （最近の流行）
<table  border="0" width="400" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127280/sorehabooks-22/ref=nosim/" target="_blank">Life Hacks PRESS ~デジタル世代の「カイゼン」術~</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127280/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4774127280.09._SCMZZZZZZZ_V57557422_.jpg" border="0" alt="Life Hacks PRESS ~デジタル世代の「カイゼン」術~" /></a></td><td valign="top"><font size="-1">田口 元 安藤 幸央 平林 純 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />忙しい人こそ読んでみて<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />GTDのとっかかりとしては良い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />ＧＴＤの基礎を知るには最適、でも余計な情報も多い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />流行っているだけのことはあります<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />かなりオススメ<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127280/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>

+ 仕事術
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4576060732/sorehabooks-22/ref=nosim/" target="_blank">ストレスフリーの仕事術―仕事と人生をコントロールする52の法則</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4576060732/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ec1.images-amazon.com/images/P/4576060732.01._SCMZZZZZZZ_V52114571_.jpg" border="0" alt="ストレスフリーの仕事術―仕事と人生をコントロールする52の法則" /></a></td><td valign="top"><font size="-1">デビッド アレン David Allen 田口 元 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />本編（仕事を成し遂げる技術）を読む前に読むべし。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />実践したら<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />この本は素晴らしい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />私にはこの本は役立たなかったな。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />監訳者の田口さんに★5つ！<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4576060732/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
-----
EXCERPT:
<img src="http://ec2.images-amazon.com/images/P/4873113075.01._AA240_SCLZZZZZZZ_V38768744_.jpg" border="0" alt="エンジニアのための時間管理術" />
-----
KEYWORDS:
時間管理術,エンジニア,オライリー,ライフスタイル,Life Hack,4873113075
-----


-----
CF50_CF_4: Thomas A. Limoncelli (著), 株式会社クイープ (翻訳)
CF50_URL: http://ec3.images-amazon.com/images/I/51jWtxU0sAL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4873113075/249-1493364-6977169?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4873113075
CF50_CF: オライリー・ジャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 技術者の宝石箱
BASENAME: post_23
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 04/20/2007 11:35:01 PM
-----
BODY:
技術者として、気づいたこと、感じたこと、困ったことなどを書き連ねていこうと思います。この先気づいたことがあれば増やしていきたいとおもいます。

間違いなどあると思います。業務で利用する場合、そのまま鵜呑みにしないようにお願いします。できるだけ責任のある情報を載せたいと思います。訂正等ありましたら、ご連絡いただけると幸いです。

<a href="http://hamasyou.com/archives/000337">技術メモ</a> もあります。
-----
EXTENDED BODY:
<h2>インデックス</h2>

<ul><li><a href="#DBで日付を扱う時の操作">DBで日付を扱う時の操作</a></li>
<li><a href="#LINUXでファイルの一覧から特定文字を含むファイルを表示する">LINUXでファイルの一覧から特定文字を含むファイルを表示する</a></li>
<li><a href="#コマンドプロンプトで画面をクリアする方法">コマンドプロンプトで画面をクリアする方法</a></li>
<li><a href="#Oracleで表示件数を絞り込む方法">Oracleで表示件数を絞り込む方法</a></li>
<li><a href="#ファイルダウンロード">ファイルダウンロード</a></li>
<li><a href="#JavaScriptからテキスト文字を取得する">JavaScriptからテキスト文字を取得する</a></li>
<li><a href="#エンコード">エンコード</a></li>
<li><a href="#SQL文のチューニング">SQL文のチューニング</a></li>
<li><a href="#ORACLE IMP ツール">ORACLE IMP ツール</a></li>
<li><a href="#JBuilderでTomcat使うときに sun/tools/javac/Main が見つかりませんエラーの対応">JBuilderでTomcat使うときに sun/tools/javac/Main が見つかりませんエラーの対応</a></li>
<li><a href="#文字化けする文字一覧">文字化けする文字一覧</a></li>
<li><a href="#トークンの導入">トークンの導入</a></li>
<li><a href="#Shift_JISとWindows-31Jの相違点">Shift_JISとWindows-31Jの相違点</a></li>
<li><a href="#マテリアライズドビューの作り方">マテリアライズドビューの作り方</a></li>
<li><a href="#マテリアライズドビューの更新(リフレッシュ)">マテリアライズドビューの更新(リフレッシュ)</a></li>
<li><a href="#マテリアライズドビューの自動更新">マテリアライズドビューの自動更新</a></li>
<li><a href="#Oracleのデータベース文字コード">Oracleのデータベース文字コード</a></li>
<li><a href="#AccessからOracleへのエクスポート">AccessからOracleへのエクスポート</a></li>
<li><a href="#DB2で抽出データ件数を指定する方法">DB2で抽出データ件数を指定する方法</a></li>
<li><a href="#DBの型がDecimal型の場合は BigDecimal 型で受けよう">DBの型がDecimal型の場合は BigDecimal 型で受けよう</a></li>
<li><a href="#行ロックをかける">行ロックをかける</a></li>
<li><a href="#java.lang.String の replaceAll">java.lang.String の replaceAll</a></li> <li><a href="#ブラウザのキャッシュ戦略をぶっこわせ">ブラウザのキャッシュ戦略をぶっこわせ</a></li>
<li><a href="#DB2でカナのソートについて">DB2でカナのソートについて</a></li>
<li><a href="#みんなに使われるクラス">みんなに使われるクラス</a></li>
<li><a href="#DBのMAX_LENGTH とWEBのMAX_LENGTHは違う">DBのMAX_LENGTH とWEBのMAX_LENGTHは違う</a></li>
<li><a href="#BigDecimal の double を引数にとるコンストラクタに注意">BigDecimal の double を引数にとるコンストラクタに注意</a></li>
<li><a href="#HTMLのフォームエレメントを動的に作成する">HTMLのフォームエレメントを動的に作成する</a></li>
<li><a href="#Jakarta Commons">Jakarta Commons</a></li> <li><a href="#FTPバッチの作り方">FTPバッチの作り方</a></li>
<li><a href="#&lt;%@ include %&gt; と &lt;jsp:include &gt; の違い">&lt;%@ include %&gt; と &lt;jsp:include &gt; の違い</a></li>
<li><a href="#フォームの属性を囲むクォートはにするべし">フォームの属性を囲むクォートは「"」にするべし</a></li>
<li><a href="#HTMLリファレンス文字列一覧">HTMLリファレンス文字列一覧</a></li>
<li><a href="#Command パターン">Command パターン</a></li>
<li><a href="#検証(verification)と妥当性(validation)">検証(verification)と妥当性(validation)</a></li>
<li><a href="#Exception クラスの派生">Exception クラスの派生</a></li>
<li><a href="#不正チェック">不正チェック</a></li>
<li><a href="#Excel のエスケープシーケンス">Excel のエスケープシーケンス</a></li>
<li><a href="#Windowsで名前解決する方法">Windowsで名前解決する方法</a></li>
<li><a href="#日付型の配列を使う場合 long型の配列で保持する">日付型の配列を使う場合 long型の配列で保持する</a></li>
<li><a href="#ファイルのパスとリソースのパスの違い">ファイルのパスとリソースのパスの違い</a></li>
<li><a href="#SQL文の動的条件追加">SQL文の動的条件追加</a></li>
<li><a href="#表の結合順序と効率">表の結合順序と効率</a></li>
<li><a href="#SessionBeanの賢い使い方">SessionBeanの賢い使い方</a></li>
<li><a href="#EJBの設計">EJBの設計</a></li>
<li><a href="#Oracleの空文字の扱い">Oracleの空文字の扱い</a> 2004/7/14追加</li>
<li><a href="#依存関係逆転の法則">依存関係逆転の法則</a> 2004/7/15追加</li>
<li><a href="#String.replaceメソッドでString index out of rangeがでる">String.replaceメソッドでString index out of rangeがでる</a> 2004/8/23追加</li>
<li><a href="#実装の継承とインターフェイスの継承">実装の継承とインターフェイスの継承</a> 2004/10/1追加</li>
<li><a href="#linuxで変なファイル名が出来ちゃったときに消す方法">linuxで変なファイル名が出来ちゃったときに消す方法</a> 2004/10/21追加</li>
<li><a href="#メールアドレスの@より前に使える文字">メールアドレスの@より前に使える文字</a> 2004/10/26追加</li>
<li><a href="#行ロックとマルチスレッドとトランザクションを考える">行ロックとマルチスレッドとトランザクションを考える</a> 2004/10/27追加</li>
<li><a href="#Tomcat で lib に xdoclet 関連のライブラリがあると例外">Tomcat で lib に xdoclet 関連のライブラリがあると例外</a> 2004/11/05追加</li>
<li><a href="#JavaBeanの定義">JavaBeanの定義</a> 2004/11/09追加</li>
<li><a href="#JSP2.0 の web.xml 定義">JSP2.0 の web.xml 定義</a> 2004/11/10追加</li>
<li><a href="#WinSCP でログイン時にリストの取得でエラーが起こる">WinSCP でログイン時にリストの取得でエラーが起こる</a> 2004/12/04追加</li>
<li><a href="#SSH接続で公開鍵認証を使うときに、公開鍵を authorized_keys にコピーし忘れないようにしましょう">SSH接続で公開鍵認証を使うときに、公開鍵を authorized_keys にコピーし忘れないようにしましょう</a> 2004/12/04追加</li>
<li><a href="#要求モデリングのポイント">要求モデリングのポイント</a> 2004/12/10追加</li>
<li><a href="#マウス右クリックしたフォルダからコマンドプロンプトを開く">マウス右クリックしたフォルダからコマンドプロンプトを開く</a> 2004/12/13追加</li>
<li><a href="#プロジェクト管理における7つの鉄則">プロジェクト管理における7つの鉄則</a> 2005/1/13追加</li>
<li><a href="#Authorization(承認) と Authentication(認証)">Authorization(承認) と Authentication(認証)</a> 2005/1/16追加</li>
<li><a href="#ホームページ・Flashのテンプレート、テンプレートモンスター">ホームページ・Flashのテンプレート、テンプレートモンスター</a> 2005/1/24追加</li>
<li><a href="#JDBCドライバのタイプの違い">JDBCドライバのタイプの違い</a>2005/2/9追加</li>
<li><a href="#Linuxでファイルの文字コードを調べる方法">Linuxでファイルの文字コードを調べる方法</a> 2005/2/10追加</li>
<li><a href="#モデリング共通パターン">モデリング共通パターン</a> 2005/2/28追加</li>
<li><a href="#find, grep, nkf を使って、ファイルの中身を検索">find, grep, nkf を使って、ファイルの中身を検索</a></li>
<li><a href="#メールの件名で日本語を使うと文字化けする">メールの件名で日本語を使うと文字化けする</a> 2005/8/16追加</li>
<li><a href="#ログイン後にすぐにセッションが切れてしまう">ログイン後にすぐにセッションが切れてしまう</a> 2006/2/9追加</li>
<li><a href="#XML Schema の SchemaLocation">XML Schema の SchemaLocation</a> 2006/6/6追加</li>
<li><a href="#ラジオボタンのチェックを文字をクリックでも行えるようにする">ラジオボタンのチェックを文字をクリックでも行えるようにする</a> 2006/7/14追加
<li><a href="#IEでSSLでのファイルダウンロードに失敗する">IEでSSLでのファイルダウンロードに失敗する</a> 2007/3/1追加</li>
<li><a href="#マウス右クリックしたフォルダからCygwinを開く">マウス右クリックしたフォルダからCygwinを開く</a> 2007/4/20追加</li>
</ul>

<h2>ノウハウ一覧</h2>

<h3 id="DBで日付を扱う時の操作">DBで日付を扱う時の操作</h3>

<pre class="code"><code>GregorianCalendar cal = <span class="keyword">new</span> GregorianCalendar(2002, 9 - 1, 27, 15, 15, 15); 
java.util.Date date = cal.getTime(); 
<span class="keyword">long</span> time = date.getTime(); 
Timestamp timestamp = <span class="keyword">new</span> Timestamp(time); </code></pre>

<h3 id="LINUXでファイルの一覧から特定文字を含むファイルを表示する">LINUXでファイルの一覧から特定文字を含むファイルを表示する</h3>

<pre class="console">> <kbd>find . -type f -name "*.jsp" -exec grep -l 検索文字 {} \;</kbd></pre>

<h3 id="コマンドプロンプトで画面をクリアする方法">コマンドプロンプトで画面をクリアする方法</h3>

<ul><li>windows: clsコマンド</li>
<li>unix,linux: Ctrl + L</li>
</ul>

<h3 id="Oracleで表示件数を絞り込む方法">Oracleで表示件数を絞り込む方法</h3>

<h4>結果の最初から10件のみ表示する</h4>

<pre>SELECT * FROM DUAL WHERE ROWNUM &lt;= 10;</pre>

<em>検索結果の10件目から15件目をとりたい場合は、ROWNUMは使えません。</em>どうするのかというと、<strong>row_number()</strong>という問い合わせ関数を使います。(Oracle 9i 以上)

<pre>SELECT 受注数, 受注者名, 型番 FROM (SELECT <em>row_number() over (ORDER BY 受注数) rn</em>, 受注数, 受注者名, 型番 FROM 受注テーブル ) WHERE 10 <= rn and rn <= 15</pre>

<h4>[参考URL]</h4>

+ <a href="http://homepage2.nifty.com/sak/w_sak3/doc/sysbrd/sq_kj04_2.htm" target="_blank" class="extlink">SQL 問い合わせ - スカラー副問い合わせ、cursor、row_number、over、with</a>

<h3 id="ファイルダウンロード">ファイルダウンロード</h3>

<pre class="code"><code>response.setContentType(<span class="str">&quot;application/octet-stream&quot;</span>); 
response.setHeader(<span class="str">&quot;Content-Disposition&quot;</span>, <span class="str">&quot;inline; filename=\&quot;&quot;</span> + filename + <span class="str">&quot;\&quot;&quot;</span>);
</code></pre>

<h3 id="JavaScriptからテキスト文字を取得する">JavaScriptからテキスト文字を取得する</h3>

span タグに id をつけて、 id.innerHTML で、spanタグに囲まれたテキストが取得できる

<pre>document.all("fieldName").innerHTML;</pre>

<h3 id="エンコード">エンコード</h3>

Javaでは文字を格納するデータ型として char と byte を使います。Unicode文字の場合には char型を、Unicode文字以外のエンコーディングの場合には byte型を使用します。

EUCで byte配列に格納していた文字列をStringに直すときは new String(byte[], "EUC-JP");

String文字列をEUC-JPのbyte配列として取得するには String.getBytes("EUC-JP");

ファイルダウンロードなどでエンコードするときは PrintWriter を使わない。PrintWriter はデフォルトのエンコーディングを使っている。InputStream OutputStream を使用する

<h3 id="SQL文のチューニング">SQL文のチューニング</h3>

SQL*PLUS で set autotrace on とするとインデックスが使用されているかされていないかをチェック出来る。

SQLの発行にかかった時間を取得するには set timing on とする。

<h3 id="ORACLE IMP ツール">ORACLE IMP ツール</h3>

ダンプファイルのインポートをする場合 IMP を使う。一件ずつコミットする場合 imp system/manager@dbname commit=y とする。

<h3 id="JBuilderでTomcat使うときに sun/tools/javac/Main が見つかりませんエラーの対応">JBuilderでTomcat使うときに sun/tools/javac/Main が見つかりませんエラーの対応</h3>

C:\JBuilder8\jdk1.4\ の下に lib フォルダが有り、 tools.jar があるかを確認

<h3 id="文字化けする文字一覧">文字化けする文字一覧</h3>

<pre>ソ噂浬欺圭構蚕十申曾箪貼能表暴予禄兔喀媾彌拿杤歃濬畚秉綵臀藹觸軆鐔饅鷭</pre>

<h3 id="トークンの導入">トークンの導入</h3>

Webで問題となる２度押しやブックマークなどの問題に トークン を導入する。

<h4>[参考]</h4>

+ <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756143075/sorehabooks-22" target="_blank" class="extlink">Strutsプログラミング講座(トランザクショントークン)</a>

<h3 id="Shift_JISとWindows-31Jの相違点">Shift_JISとWindows-31Jの相違点</h3>

<section>

<h4>参考</h4>

<a href="http://www.ingrid.org/java/i18n/encoding/shift_jis.html" target="_blank" class="extlink">Shift_JISのエイリアスの変更について</a>

</section>

"Shift_JIS"と"Windows-31J"は，IANAに正式に登録されている文字集合の名称であり，前者はJIS X 0208で定められており，後者はMicrosoftのコードページ932に相当します．この2つの文字集合には，次のような重要な違いがあります．

<pre>１．収録されている文字が異なります．たとえば，Windows-31JはNEC特殊文字，IBM特殊文字を含んでいますが，Shift_JISは含んでいません． 
２．Windows-31Jは，MS-DOSにおけるNECやIBMの拡張した文字群を収録していますが，一部の重複している文字は，Unicodeの同じコードポイントに割り当てられています．このために，一度読み込んでUnicodeに変換してしまうと，元のファイルに戻すことができないことがあります． 
３．一部の文字に対して，Unicodeに変換する際のコードポイントが違います(〜, ‖, −, ¢, £, ¬など)． </pre>

特に最後の違いがあるために，JavaのようなUnicodeベースの環境では，単純にWindows-31JをShift_JISのスーパーセットとして扱うことはできないことに注意してください．

<h4>「今回の修正の影響範囲と対処方法」</h4>

今回の修正の影響範囲と対処方法は，次の通りです．

<pre>1, プログラムやデータ，通信で"Shift_JIS"と明示的に指定していない/されない場合 
プログラムの実行に影響はありません． 
2, プログラムやデータ，通信で"Shift_JIS"と明示的に指定している/される場合 
ほとんどがWindows-31Jを用いたデータを扱っているにもかかわらず，
誤って"Shift_JIS"と指定していた場合だと思いますが，
拡張された文字や一部の記号類(〜, ‖, −)が'?'に文字化けしますので，
正しく"Windows-31J"と指定してください．なお，この修正は1.4.1bを待つ必要はありません． 
a) Servletの場合
res.setContentType("text/html; charset=Windows-31J");
PrintWriter out = res.getWriter();
 
b) JSPの場合
&lt;%@ page contentType="text/html; charset=Windows-31J" %&gt;
 
3, "MS932"と明示的に指定していた場合 
プログラムの実行に影響はありません．
ただし，"Windows-31J"に書き換えることを薦めます．なお，この修正は1.4.1bを待つ必要はありません． 
4, "SJIS"と明示的に指定していた場合 
プログラムの実行に影響はありません． 
1.4.1b以降では，"Shift_JIS"でも正しく動作するようになりますので，"Shift_JIS"に書き換えてください．</pre>

<h3 id="マテリアライズドビューの作り方">マテリアライズドビューの作り方</h3>

<pre>CREATE MATERIALIZED VIEW m_view　←ビュー名
AS SELECT deptno,AVG(sal) FROM emp GROUP　BY deptno　←元データのSELECT文</pre>

<h3 id="マテリアライズドビューの更新(リフレッシュ)">マテリアライズドビューの更新(リフレッシュ)</h3>

手動で単一のスナップショットをリフレッシュする

<pre>execute dbms_snapshot.refresh('XXXX','?');</pre>

注）XXXXはスナップショット名

<h4>オプションの種類</h4>

<dl><dt>'f'</dt><dd>高速リフレッシュ</dd><dt>'c'</dt><dd>完全リフレッシュ</dd><dt>'?'</dt><dd>デフォルトのリフレッシュ</dd></dl>

<h3 id="マテリアライズドビューの自動更新">マテリアライズドビューの自動更新</h3>

<pre>CREATE MATERIALIZED VIEW m_view　←ビュー名
REFRESH FORCE ON COMMIT</pre>

ただし、 distinct を指定した SELECT 文の時は指定できない。

<h3 id="Oracleのデータベース文字コード">Oracleのデータベース文字コード</h3>

Oracleデータベースを作る際は、Shift_JIS の文字コード + '〜' を登録可能とする。文字コード、 SJISTIRDA と言うものがある。

<h3 id="AccessからOracleへのエクスポート">AccessからOracleへのエクスポート</h3>

最初に、Oracle Net Manager にサービス・ネーミングを作成し、その名前でAccessからエクスポートする。Oracle Net Manager で作成しない場合、 Enterprise Manager で接続を作成すると XXX_192.168.0.X というサービス・ネーミングが作成される。この名前でも Access からエクスポートできる。
エクスポートする前に、 ODBC の接続を作成しておく必要がある。「管理ツール」のデータソースでデータソースを作成し、それを上で作ったサービスに結びつける。
あとは、Access からエクスポートを選ぶだけ。

<h3 id="DB2で抽出データ件数を指定する方法">DB2で抽出データ件数を指定する方法</h3>

<pre>SELECT * FROM XXX fetch first 10 rows only</pre>

<h3 id="DBの型がDecimal型の場合は BigDecimal 型で受けよう">DBの型がDecimal型の場合は BigDecimal 型で受けよう</h3>

DBの型が Decimal 型の場合は Java 側では BigDecimal 型で受けるべし。

<h3 id="行ロックをかける">行ロックをかける</h3>

問い合わせで行ロックする方法として、for update 句がある。for update nowait は、ロック解除を待たずにエラーを返す。次の例は、ロックされていたら待って問い合わせる。

<pre>select * from testm where key = 'a001' for update;</pre>

nowait はエラー構文となった。

<pre>select * from testm where key = 'a001' for update nowait;</pre>

<a name="java.lang.String の replaceAll"></a> <h4>java.lang.String の replaceAll</h4>

replaceAll の リプレース文字列(第二引数)に $ が付くとエラーになる。対応は $ を \$ にする。 プログラムで $ を \$ に直すには以下のようにする。

<pre class="code"><code>str.replaceAll(<span class="literal">"\\$"</span>, <span class="literal">"\\\\\\$"</span>);
</code></pre>

<h3 id="ブラウザのキャッシュ戦略をぶっこわせ">ブラウザのキャッシュ戦略をぶっこわせ</h3>

<pre>&lt;meta http-equiv="Pragma" content="no-cache"&gt;
&lt;meta http-equiv="Cache-Control" content="no-cache"&gt; 
&lt;meta http-equiv="expires" content="Sun, 10 Jan 1990 01:01:01 GMT"&gt;</pre>

<h3 id="DB2でカナのソートについて">DB2でカナのソートについて</h3>

カナのソート(SELECT)の方法（単純にorder byにすると一部並びがおかしくなる。） 

<pre>ORDER BY HEX(SUBSTR(項目名,スタート位置,桁数))
例 order by hex(substr(kaisha_kana,1,20))</pre>

<h3 id="みんなに使われるクラス">みんなに使われるクラス</h3>

意図しない使われ方をしないように作りましょう。たとえば、コンストラクタの公開キーワードを private にするとか。

<h3 id="DBのMAX_LENGTH とWEBのMAX_LENGTHは違う">DBのMAX_LENGTH とWEBのMAX_LENGTHは違う</h3>

DBのMAX_LENGTH はバイトで計られることが多い -&gt; 10バイト(日本語は5文字)

WEBのフォームのMAX_LENGTH は文字数 -&gt; 10文字(日本語10文字入る)

<h3 id="BigDecimal の double を引数にとるコンストラクタに注意">BigDecimal の double を引数にとるコンストラクタに注意</h3>

このコンストラクタの結果は予想外である可能性があります。new BigDecimal(.1) は正確に .1 と等しいと思われるかもしれませんが、実際には .1000000000000000055511151231257827021181583404541015625 となります。

これは .1 を double (または有限長 2 進小数) として正確に表現できないためです。したがって、コンストラクタに渡されている long 値は正確に .1 と等しいわけではありません。 

一方、String を引数とするコンストラクタは予測可能です。new BigDecimal(".1") は、「正確に」 .1 と等しくなります。

そのため、通常は、double を引数とするコンストラクタの代わりにString を引数とするコンストラクタを使用することをお勧めします。 

<h3 id="HTMLのフォームエレメントを動的に作成する">HTMLのフォームエレメントを動的に作成する</h3>

<pre>document.all.span_id.insertAdjacentHTML('afterBegin', '&lt;INPUT type="text" name="ero" value="hoge"&gt;');
&lt;span id="span_id"&gt;&lt;/span&gt;</pre>

上記JavaScriptで span タグの後ろにフォームエレメントができる!

<h3 id="Jakarta Commons">Jakarta Commons</h3>

訳すと関数インターフェイスでしょうか。コレクションの各要素に対して、f(x)の処理を行うインターフェイス群です。以下のようなものがあります。

<dl>
<dt>Factory  Object create()</dt><dd>作る</dd>
<dt>Predicate  boolean evaluate(Object input)</dt><dd>判定する</dd>
<dt>Closure  void execute(Object input)</dt><dd>実行する</dd>
<dt>Transformer  Object transform(Object input)</dt><dd>変換する</dd>
</dl>

<h3 id="FTPバッチの作り方">FTPバッチの作り方</h3>

<pre>ftp -s:test.scr    &lt;- バッチ1 でこのように書く
 
guest				&lt;- test.scr ファイルにこのように書く（ユーザID)
guest 				&lt;- (パスワード)
put file1 			&lt;- コマンド
quit</pre>

<h3 id="&lt;%@ include %&gt; と &lt;jsp:include &gt; の違い">&lt;%@ include %&gt; と &lt;jsp:include &gt; の違い</h3>

<h4>&lt;%@ include %&gt;</h4>

このタグによって指定されたファイルは、JSPがサーブレットのファイルに変換される前に、JSPの一部としてインクルードされます。そして、インクルードされたものを含めてサーブレットに変換されてから実行されます。このタグでインクルードされたファイルが更新されても、JSP自体が更新されなければJSPに更新は反映されません。

<h4>&lt;jsp:include &gt;</h4>

このタグは、指定されたファイルをJSPの一部としてインクルードするのではなく、指定されたURLにリクエストを送信し、その応答内容を動的にリクエスト元に挿入して表示します。インクルードされるページとインクルードを行うJSPとは独立したページとして存在するため、インクルードされたファイルが更新されれば、元のJSP自体が更新されていなくても、動的に更新内容が結果に反映されます。

<h3 id="フォームの属性を囲むクォートはにするべし">フォームの属性を囲むクォートは「"」にするべし</h3>

&lt;input type="text"&gt; 等の属性を囲むクォートは「"」にしたほうがよい。なぜなら、初期値として「"」を含むような値を表示したい場合「&amp;quot;」を使用して「"」を表示すればよい。シングルクウォート「'」を表示する場合「&amp;#39;」を使用する。

<h3 id="HTMLリファレンス文字列一覧">HTMLリファレンス文字列一覧</h3>

<pre>"  -&gt; &amp;quot;
&lt;  -&gt; &amp;lt;
&gt;  -&gt; &amp;gt;
&amp;  -> &amp;amp;
空白文字-> &amp;nbsp;
the letter "a" with a small circle above it -> &amp;#229; the Cyrillic capital letter "I". -> &amp;#1048; the Chinese character for water -> &amp;#x6C34;</pre>

<h3 id="Command パターン">Commandパターン</h3>

<q>One important purpose of the Command pattern is to keep the program and user interface objects completely separate from the actions that they initiate.</q>

コマンドパターンの重要な目的の一つに、プログラムとユーザインターフェースオブジェクトをコマンドの起動者から完全に切り離すということがある。・・・つまりコマンドの起動者はコマンドがどのように動くかということは知らなくてよくなる。（コマンドが何をするかは知る必要があると思うが）

<h3 id="検証(verification)と妥当性(validation)">検証(verification)と妥当性(validation)</h3>

知識の「正しさ」を知る方法には実は2種類ある（「正しさ」に2種類あるといってもいい）。

1つは検証（verification）と呼ばれるもの、もう1つは妥当性確認（validation）と呼ばれるものだ。この使い分けは微妙で難しいが（分野によっても違うかもしれない）、大ざっぱにいうと

<ul><li>検証とは自分たちがこういうものを作ろうと決めたとおりにできているかどうかを確かめること、</li>
<li>妥当性確認とはできたものが本当に欲しかったものかどうかを確かめることだ</li></ul>

例えばテスト仕様書を書き、テスト仕様に従ってソフトウェアを実行したときにどのような答えが出るかをチェックする。これが検証。検証できたからといって、そのソフトウェアが「本当に」正しいとは限らない。

だって仕様書にすべての場合を列挙することはできないし、そもそも仕様書が顧客の意図したものになっているとは限らない。それに対してユーザーや顧客が欲しかったソフトウェアになっているかどうかをチェックするのが妥当性確認。

<h3 id="Exception クラスの派生">Exception クラスの派生</h3>

Exception クラスを派生させてエラーオブジェクトを作るときは、エラーコードを持たせられるといいかも。ってか、エラー処理機構をアーキテクチャ的に考えよう！

<h3 id="不正チェック">不正チェック</h3>

<blockquote>

「不正な」データ値をチェックするのは間違いなのです。それよりも、何が「正しい 」のかをきちんと決め、データがその定義に合致しているかをチェックし、その定義に合致しないデータはどんなものでも拒否するようにすべきなのです。

通常表現を使って一致をチェックする場合には必ず、データの最初（通常、^記号が付きます）と最後（通常、$が付きます）が一致することをチェックするようにしてください。

理想的にはユーザーにファイル名を選ばせないようにするか、それができなければ文字を小さなパターン、例えば

<pre>^[A-Za-z0-9][A-Za-z0-9._\-]*$</pre>

に限定するようにします。

ユーザーが攻撃者かも知れないので、ロケール値を検証する必要があります。私はロケールが次のパターンに一致するかどうかを確認するようにお勧めしたいと思います。

<pre>^[A-Za-z][A-Za-z0-9_,+@\-\.=]*$</pre>

<cite>出典不明</cite>

</blockquote>

<h4>クッキー</h4>

Webアプリケーションではよく、重要なデータにクッキーの値を使います。後ほど説明しますが、ユーザーがクッキーの値やフォームのデータをリセットして、ユーザーの好きなように設定できることは重要ですので良く覚えておいてください。

それとは別に、ここで言っておいた方が良い検証のトリックがあるのです。もしクッキーの値を受け付ける場合には、そのドメイン値が想定したもの（つまりあなたのサイトの一つ）に
なっていることをチェックしてください。そうしないと、（おそらく改変された）関連のサイトが、変なクッキーを挿入できてしまうかも知れないのです。

この攻撃がどのように動作するかに興味があれば、IETF RFC 2965に詳細が説明されています（参考文献にリンクがあります）。

<h4>[参考]</h4>

+ <a href="http://www-6.ibm.com/jp/developerworks/linux/040326/j_l-sp2.html" target="_blank" class="extlink">セキュアなプログラマー：入力を検証する</a>

<h3 id="Excel のエスケープシーケンス">Excel のエスケープシーケンス ~</h3>

Excel のエスケープシーケンスは ~（チルダ)

<h3 id="Windowsで名前解決する方法">Windowsで名前解決する方法</h3>

<pre>C:\Windows\system32\drivers\etc\hosts</pre>

に IP と 名前 を書くと、そのWindowsでDNSの名前解決ができる。

<h3 id="日付型の配列を使う場合 long型の配列で保持する">日付型の配列を使う場合 long型の配列で保持する</h3>

Date型の配列で日付を保持するより、long型で日付を保持したほうがパフォーマンスも良いし、何かと便利。

<h3 id="ファイルのパスとリソースのパスの違い">ファイルのパスとリソースのパスの違い</h3>

ファイルのパスは、現在の場所からの相対・絶対パスになる。リソースのパスは、クラスパスが通ったところからの相対・絶対パスになる。

<pre>Javaの実装例：
FileInputStream#FileInputStream();
Class#getResourceAsStream();</pre>

<h3 id="SQL文の動的条件追加">SQL文の動的条件追加</h3>

(2004/6/27追加)

動的条件を付け足すときに、最初から 「1=1」のような条件を WHERE 句につけておくと便利。

<pre class="code"><code>StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="literal">"SELECT * FROM TABLE_NAME WHERE <em>1=1</em>"</span>); 
<span class="keyword">if</span> (isInput()) { 
  sql.append(<span class="literal">" AND COLUMN = 'hoge' "</span>); 
} 
 
<span class="keyword">if</span> (isInput2()) { 
  sql.append(<span class="literal">" AND COLUMN2 = 'foo' "</span>); 
} 
</code></pre>

上記のように、どの条件が最初に来るかわからない場合でも、「AND」から条件を付け始められる。

<h3 id="表の結合順序と効率">表の結合順序と効率</h3>

(2004/6/30追加)(oracleにて)

ネストされたループ結合では、「処理対象件数の少ない表を外部表にする」「結合列に索引が存在し、その索引によって効率的にアクセス可能な表を内部表とする」「外部表に件数が少ないほうが効率がよい。」

ソート・マージ結合では、それぞれの表をソートし、双方のソート済みのデータを上から順番に付き合わせて、一致する行同士を結合します。

ハッシュ結合では、「結合する２つの表でデータ量の少ない表の結合列にハッシュ関数を適用」「データ量の多いほうの結合列にもハッシュ関数を適用」「ハッシュと結合」ハッシュ結合は等結合(=)を指定している場合のみ、利用できる

結合順序は、ルールベースの場合、FROM句に指定した表の打ち、後ろに記述した表から順に結合される。CBOでは、オプティマイザによって順序がきめられる。ヒント句を指定できる。

<h3 id="SessionBeanの賢い使い方">SessionBeanの賢い使い方</h3>

(2004/7/7追加)

EJBで使用する<em>Session Beanは、システムの分析時に作成したユースケースの単位で作成すると良い。</em>システムの構成がシンプルになり、保守しやすくなる。

Session BeanからSession Beanを呼び出す場合はリモートインターフェースを使うと分散環境を構築しやすくなる。ただし、リモート呼び出しになるため、パフォーマンスなどのコストがかかるので、Session BeanからSession Beanを呼び出す処理を多用するのは避ける。

EJBのクライアントからSession Beanを直接呼び出すと、密結合となりシステムの柔軟性が落ちる。解決策として、EJBクライアントからのリクエストを受け取り、Session Beanを呼び出すクラスを作る。このクラスはPOJI(Plain Old Java Object)として作成すればよい。

このように、Session Beanを呼び出す処理を委譲する設計を「Business Delegateパターン」という。プレゼンテーション層とサービス層を分離できるので、保守が容易になる。MVCパターンでいう、C(コントローラ)を作るイメージです)

<h4>[参考]</h4>

+ <a href="http://direct.idg.co.jp/detail_1.msp?id=1055&class=10005&n=2" class="extlink" target="_blank">Java World 2004年6月号</a>

<h3 id="EntityBeanの設計">EntityBeanの設計</h3>

(2004/7/7追加)

Entity Beanは本来、オブジェクト指向の観点からドメインモデルを作成しそれに沿って作るのが望ましい。が、従来のデータベース設計からはじめた場合は、ER図をベースにドメインモデルを作り、Entity Bean を作る方が設計は上手くいくと思う。

Entity Beanはローカルインターフェースを実装し、EJBクライアントから直接呼び出せないようにする。これによって、呼び出しによるパフォーマンスが向上するほか、プレゼンテーション層とインテグレーション層を確実に分離できる。

Entity Beanにローカルインターフェースを実装させた場合、呼び出しは同一マシン上に配置したSession Beanから呼び出すようにする。

<h3 id="EJBの設計">EJBの設計</h3>

(2004/7/7追加)

Enterprise Beanを作る際に、コールバックメソッド(ejbCreateやejbActivateなどのメソッド)を実装する必要があるが、コールバックメソッドを実装したAdapterクラスを作ると便利である。

各Enterprise Beanは、Adapterクラスを継承するようにすることで、個別にコールバックメソッドを実装sるう必要がなくなる。

<h3 id="Oracleの空文字の扱い">Oracleの空文字の扱い</h3>

(2004/7/14追加)

Oracleでは、空文字と null の区別がない。insertで空文字を登録しても実際は null として登録される。DB2やSQL Serverはきちんと空文字と null とを区別する。

<h4>[参考]</h4>

+ <a href="http://www.db2.jp/online/apl/apl05.html" class="extlink" target="_blank">Oracleからのアプリケーション移植 長さ0の文字列の扱いの違い</a>

<h3 id="依存関係逆転の法則">依存関係逆転の法則</h3>

(2004/7/15追加)

<blockquote>

上位のモジュールは下位のモジュールに依存してはならない。どちらのモジュールも「抽象」に依存すべきである。

「抽象」は実装の詳細に依存してはならない。実装の詳細が「抽象」に依存すべきである。

<cite>出典不明</cite>
</blockquote>

<img src="http://hamasyou.com/images/engineer_soul/layer.gif" />

上記の図は、上位モジュールであるPolicy層が下位モジュールのService層やUtility層に依存してしまっている。この依存関係を反転させたのが下記の図である。

<img src="http://hamasyou.com/images/engineer_soul/new_layer.gif" />

上位のモジュールは、下位のモジュールに依存しなくなっている。注目なのは、下位のモジュールが、上位モジュールと同レベルの「抽象」に依存した点である。このように、<em>上位のモジュールがインターフェースを宣言し、下位のレベルのモジュールはそれに従った実装を請け負うのが、真のオブジェクト指向である。</em>

<h4>[参考]</h4>

+ <a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22" target="_blank" class="extlink">アジャイルソフトウェア開発の奥義</a>

<h3 id="String.replaceメソッドでString index out of rangeがでる">String.replaceメソッドでString index out of rangeがでる</h3>

(2004/8/23追加)

String.replaceFirst や String.replaceAll メソッドで、正規表現で使われるエスケープ文字が使われると、String index out of range エラーが発生します。これを回避するには、下記の様に正規表現エスケープ文字をエスケープする必要があります。

<pre class="code"><code><span class="rem">/** 
 * target 文字列の pattern にマッチする最初の文字列を replace 文字列で置き換える。 
 * java.lang.String の replaceAll で '$' が replace に含まれていると 
 * エラーが出るものに対応 
 * @param target        変換対象文字列 
 * @param pattern       変換パターン 
 * @param replace       変換文字列 
 * @return 変換後の文字列を返します。 
 * @author Syougo Hamada 
 */</span> 
<span class="keyword">public</span> <span class="keyword">static</span> String replaceFirst(String target, String pattern, String replace) { 
  String escape = replace.replaceAll(<span class="str">&quot;\\\\&quot;</span>, <span class="str">&quot;\\\\\\\\&quot;</span>); <span class="rem">// エスケープ文字のエスケープ </span>
  <span class="keyword">return</span> target.replaceFirst(pattern, escape.replaceAll(<span class="str">&quot;\\$&quot;</span>, <span class="str">&quot;\\\\\\$&quot;</span>)); 
}
</code></pre>

<h3 id="実装の継承とインターフェイスの継承">実装の継承とインターフェイスの継承</h3>

(2004/10/1追加)

継承には、実装の継承とインターフェイスの継承とがある。実装の継承とは、Javaでいう extends を使う方法である。インターフェイスの継承とはJavaでいう implements を使う方法である。

使い分けるルールとしては

<ol><li>クラスが「もの」や「こと」の種類を表している場合は実装の継承</li><li>サービス、機能を継承する場合はインターフェイスの継承</li></ol>

<h4>[参考]</h4>

+ 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22" class="extlink" target="_blank">軽快なJava</a>』 オライリージャパン

<h3 id="linuxで変なファイル名が出来ちゃったときに消す方法">linuxで変なファイル名が出来ちゃったときに消す方法</h3>

(2004/10/21追加)

Linuxを使っていて、たまに変なファイル名を付けちゃったときに消す方法です。変なファイル名というのは、例えば「スペース」「\」「-」「*」とか入れちゃった場合です。

<h4>【ファイル名を「' (シングルクウォート)」で囲む方法】</h4>

<pre>消せるファイル種類
・「スペース」が入っているファイル名　　 例： rm 'Program Files'
・「#」で囲まれているファイル名　　　　　例： rm '#back_file#'
・「\」だけのファイル名　　　　　　　　　　例： rm '\'
・「*」の入ったファイル名　　　　　　　　　例： rm '****'
・「~ユーザ名」と同じファイル名　　　　　例： rm '~hamasyou'</pre>

<h4>【「'」(シングルクウォート)を\(エスケープ)する方法】</h4>

<pre>消せるファイル種類
・「'」が入っているファイル名　　　　　　　例： rm \'\'</pre>

<h4>【「--」でオプションを無効化する方法】</h4>

<pre>消せるファイル種類
・「-」が先頭にあるファイル　　　　　　　　例： rm -- -exclude</pre>

<h4>[参考]</h4>

+ <a href="http://www.u-waza.org/linux-tips/magazine/linux-tips-0009.html" target="_blank" class="extlink">このファイル消せますか？(rm, bash, シェル)</a>
+ <a href="http://www.u-waza.org/linux-tips/magazine/linux-tips-0011.html" target="_blank" class="extlink">このファイル消せますか？(rm, bash, シェル) その２</a>
+ <a href="http://www.u-waza.org/linux-tips/magazine/linux-tips-0013.html" target="_blank" class="extlink">このファイル消せますか？(rm, bash, シェル) その3</a>

<h3 id="メールアドレスの@より前に使える文字">メールアドレスの@より前に使える文字</h3>

(2004/10/26追加)

メールアドレスの「@」よりも前につかえる文字の一覧です。

<ul><li>英数字</li><li>! (エクスクラメーションマーク)</li><li># (いげた)</li><li>$ (ドルマーク)</li><li>% (パーセント)</li><li>&amp; (アンパサンド)</li><li>' (シングルクウォート)</li><li>+ (プラス)</li><li>- (マイナス)</li><li>/ (スラッシュ)</li><li>? (クエスチョンマーク)</li><li>^ (カレット)</li>_ (アンダーバー)</li><li>` (バッククウォート)</li><li> { (中括弧開く)</li><li>| (パイプライン)</li><li>} (中括弧閉じる)</li><li>~ (チルダ)</li><li>. (ピリオド)</li></ul>

` (バッククウォート) や $ (ドルマーク） が使えるとは、結構びっくりでした。<b class="red">サーバ側でメールアドレスの処理をするときは、<a href="http://www.hotfix.jp/archives/word/2004/word04-17.html" target="_blank" class="extlink">サニタイジング</a> を忘れないようにしましょう。</b>

なお、使用にはいくつか制約があるので注意。例えば &quot;.(ピリオド)&quot; はテキスト文字に囲まれているときのみ利用可能で、ピリオドの連続や、@の直前のピリオドは無効となります。詳しくは、参考リンクを参照のこと。

<h4>[参考]</h4>

+ <a href="http://www.faqs.org/rfcs/rfc2822.html" target="_blank" class="extlink">RFC 2822</a>
+ <a href="http://hxxk.jp/2004/10/10/1539" target="_blank" class="extlink">メールアドレスに使える文字</a>

<h3 id="行ロックとマルチスレッドとトランザクションを考える">行ロックとマルチスレッドとトランザクションを考える</h3>

(2004/10/27追加)

業務ロジックで、「DBに登録してあるIDをインクリメントして使う」という処理があるとします。例えば、下記のようなテーブル構成があるとします(テーブルの中身についてはつっこみはなしでお願いします・・・)

<img src="http://hamasyou.com/images/engineer_soul/emp_table_rel.gif" alt="従業員テーブルとIDとの関連" />

このテーブルでは、「従業員テーブルのEMP_ID」と「従業員IDテーブルのEMP_ID」が参照関係にあります。ここでは、下記のルールを元に考えます。

<pre>1. 従業員テーブル(以下EMPT)のEMP_IDは、従業員IDテーブル(以下IDT)のEMP_IDを元に決められる。
2. 一度使われたIDTのEMP_IDはインクリメントされる</pre>

ここで考えられる処理としては、

<p class="option">IDTから現在の最大EMP_IDを取り出して、インクリメントしたものをもとに、EMPTのEMP_IDを決めてインサート処理を行う。その後、IDTのEMP_IDを更新する。</p>

というのがあります。ソースコードにすると、こんな感じですか。

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">void</span> insertNewEmployee(<span class="keyword">long</span> companyID) { 
  <span class="keyword">long</span> currentEmpID = getLastEmpID(companyID); 
  Employee newEmp = <span class="keyword">new</span> Employee(companyID, currentEmpID + 1); 
  newEmp.save(); 
  saveLastEmpID(companyID, currentEmpID + 1); 
} 
 
<span class="keyword">private</span> <span class="keyword">long</span> getLastEmpID(<span class="keyword">long</span> companyID) { 
    <span class="comment">// select EMP_ID from EMP_ID_TABLE where COMPANY_ID = x </span>
    <span class="keyword">return</span> 現在の最後の従業員IDをかえす 
} 
 
<span class="keyword">private</span> <span class="keyword">void</span> saveLastEmpID(<span class="keyword">long</span> companyID, <span class="keyword">long</span> empID) {         
    <span class="comment">// update EMP_ID_TABLE set EMP_ID = x where COMPANY_ID = y  </span>
} 
</code></pre>
<div class="clear"></div>

細かい処理は省いています。この処理には、<em>かなり致命的だけど、実際に起こってみるまでわかりにくいバグ</em>が潜んでいます。

<h4>問題点は？</h4>

上記処理の問題点は2つあります。一つ目に、<em>insertNewEmployee メソッドがマルチスレッド環境化では登録者IDが重複してしまう可能性がある</em>という点です。二つ目に、<em>getLastEmpID メソッド内の select文 が、排他ロックになっていない</em>ことです。

マルチスレッド環境化で実行されて2行目と3行目の間で割り込みが発生すると、同じ従業員IDが割り振られる可能性があります。また、select文が排他ロックになっていないので、2行目が実行された後に、他のアプリケーションから従業員IDを変更されてしまう可能性があります。

<section>

<h4>問題点改善後のソースコード</h4>

<pre class="code"><code><span class="keyword">public</span> synchronized <span class="keyword">void</span> insertNewEmployee(<span class="keyword">long</span> companyID) { 
  <span class="comment">// 後は同じ </span>
} 
 
<span class="keyword">public</span> <span class="keyword">long</span> getLastEmpID(<span class="keyword">long</span> companyID) { 
  <span class="comment">// 排他的ロックをかけて、他から更新されないようにする </span>
  <span class="comment">// select EMP_ID from EMP_ID_TABLE where COMPANY_ID = x </span>
  <span class="comment">// for update </span>
  <span class="keyword">return</span> 現在の最後の従業員IDを返す 
} 
 
<span class="keyword">private</span> <span class="keyword">void</span> saveLastEmpID(<span class="keyword">long</span> companyID, <span class="keyword">long</span> empID) { 
  <span class="comment">// 同じ </span>
} 
</code></pre>
<div class="clear"></div>

</section>

insertNewEmployee メソッドを <em>synchronized</em> にして、7行目の select文に<em>排他ロック</em>をかけました。

結局　結局言いたいことは、主キーとなるIDを生成する場合は、DBMSの機能を使うか、確実に一つの値しか生成されないように工夫する(今回のように select for update文を使うとか)ようにしましょう。

免責： 上記のソースコードを利用したいかなる問題も責任は負いかねます。 (^^;

<h3 id="Tomcat で lib に xdoclet 関連のライブラリがあると例外">Tomcat で lib に xdoclet 関連のライブラリがあると例外</h3>

Tomcat を動かすときに、 Webアプリケーションで XDoclet 関連のライブラリ (xdoclet-1.2.jar, xdoclet-ojb-module-1.2.jar, xdoclet-xdoclet-module-1.2.jar and xjavadoc-1.0.2.jar) があると下記の例外が発生する可能性がある。

<pre class="console">情報: Starting Servlet Engine: Apache Tomcat/5.0.19 
2004/11/05 12:04:29 org.apache.catalina.core.StandardHost start 
情報: XML検証は無効です 
java.lang.reflect.InvocationTargetException 
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 
 at java.lang.reflect.Method.invoke(Method.java:324) 
 at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:297) 
 at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:398) 
Caused by: java.lang.IllegalArgumentException: <em>javacc,ant,commons-collections,commons-logging,log4j,junit-Extension-Name</em> 
 at java.util.jar.Attributes$Name.&lt;init&gt;(Attributes.java:434) 
 at java.util.jar.Attributes.getValue(Attributes.java:97) 
 at org.apache.catalina.util.ManifestResource.getRequiredExtensions(ManifestResource.java:243) 
 at org.apache.catalina.util.ManifestResource.processManifest(ManifestResource.java:212) 
 at org.apache.catalina.util.ManifestResource.&lt;init&gt;(ManifestResource.java:96) 
 at org.apache.catalina.util.ExtensionValidator.validateApplication(ExtensionValidator.java:250) 
 at org.apache.catalina.core.StandardContext.start(StandardContext.java:4133) 
 at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1126) 
 at org.apache.catalina.core.StandardHost.start(StandardHost.java:832) 
 at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1126) 
 at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:521) 
 at org.apache.catalina.core.StandardService.start(StandardService.java:519) 
 at org.apache.catalina.core.StandardServer.start(StandardServer.java:2345) 
 at org.apache.catalina.startup.Catalina.start(Catalina.java:594) 
 ... 6 more </pre>

対処法は、XDoclet 関連のライブラリを含めないことかな？

<h4>[参考]</h4>

+ <a href="http://www.mail-archive.com/xdoclet-user@lists.sourceforge.net/msg08148.html" target="_blank" class="extlink">AW: [Xdoclet-user] XDoclet + Tomcat = LifecycleException</a>

<h3 id="JavaBeanの定義">JavaBeanの定義</h3>

(2004/11/09追加)

JavaBean とは 「<em>再利用可能なソフトウェアコンポーネント</em>」です。

<dl>
<dt>プロパティ</dt><dd><p>設定可能な内部状態のこと。読み取り専用のプロパティもあるが、通常は、「読み書きの出来るフィールド」だと思えばよい。</p></dd>
<dt>イベント</dt><dd><p>内部状態に変化があったことを通知するもの。なんらかの処理が行われた場合に起こる。</p></dd>
<dt>メソッド</dt><dd><p>コンポーネントに対して行わせたい処理を呼び出す手段。例えば、計算や画面表示など。</p></dd>
</dl>

<h4>JavaBean の特性</h4>

<dl>
<dt>Simple 特性</dt><dd><p>一つのプロパティに対して対となる get/set メソッドが用意されている。</p></dd>
<dt>Indexed 特性</dt><dd><p>配列やリストを取るプロパティに対して、全体を get/set できるメソッドが用意されている。また、個別の要素に対して、インデックスでアクセスできる get/set が用意されている。</p></dd>
<dt>Bound 特性</dt><dd><p>コンポーネントの内部状態に変更が起こった場合、適切なイベントが発生する。例えば、コンポーネントの状態が変更された場合、それに紐付くコンポーネントや、バインドされたコンポーネントにも、変更が通知される。</p></dd>
<dt>Constrained 特性</dt><dd><p>コンポーネントの内部状態に変化が起こった場合、それに関連するオブジェクトの状態も適切に変化させる。</p></dd>
</dl>

プログラム中で JavaBean を表現するときには、デフォルトコンストラクタと、プロパティに対する get/set メソッドを定義しておけば、標準の JavaBean として扱えると思います。

<h4>[参考]</h4>

+ <a href="http://www.seto.nanzan-u.ac.jp/~amikio/NISE/member-niit/mashima/JavaBeans/JavaBeans.html" target="_blank" class="extlink">JavaBeans</a>
+ <a href="http://blog.csdn.net/arielxp/archive/2004/10/05/125020.aspx" target="_blank" class="extlink">JavaBean的属性</a>

<h3 id="JSP2.0 の web.xml 定義">JSP2.0 の web.xml 定義</h3>

JSP 2.0 から web.xml の書き方が変わったようです。

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; ?&gt;</span> 
<span class="tag">&lt;web-app <span class="attr">xmlns=</span><span class="value">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> 
    <span class="attr">xmlns:xsi=</span><span class="value">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> 
    <span class="attr">xsi:schemaLocation=</span><span class="value">&quot;http://java.sun.com/xml/ns/j2ee http:// 
java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span> 
    <span class="attr">version=</span><span class="value">&quot;2.4&quot;</span>&gt;</span> 
<span class="rem">&lt;!-- xsi:schemaLocation は本当は一行で書く --&gt;</span>
</code></pre>

タグリブの定義の仕方も少し変わったみたいです。「<em>jsp-config</em>」というタグで囲む必要があります。(囲まないでも大丈夫!?)

<pre class="code"><code><span class="tag">&lt;jsp-config&gt;</span>     
  <span class="tag">&lt;taglib&gt;</span> 
    <span class="tag">&lt;taglib-uri&gt;</span>/spring<span class="tag">&lt;/taglib-uri&gt;</span> 
    <span class="tag">&lt;taglib-location&gt;</span> 
      /WEB-INF/lib/spring.tld 
    <span class="tag">&lt;/taglib-location&gt;</span> 
  <span class="tag">&lt;/taglib&gt;</span> 
<span class="tag">&lt;/jsp-config&gt;</span>
</code></pre>

<h4>ELバージョンのJSTL coreライブラリー用taglib指示子</h4>

&lt;%@&nbsp;taglib&nbsp;<span style="color:#993300;">uri</span>=<span style="color:#3399CC;">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>&nbsp;<span style="color:#993300;">prefix</span>=<span style="color:#3399CC;">&quot;c&quot;</span>&nbsp;%&gt;

<h4>formatライブラリ用のtaglib指示子</h4>

&lt;%@&nbsp;taglib&nbsp;<span style="color:#993300;">uri</span>=<span style="color:#3399CC;">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span>&nbsp;<span style="color:#993300;">prefix</span>=<span style="color:#3399CC;">&quot;fmt&quot;</span>&nbsp;%&gt;

<h4>[参考]</h4>

+ <a href="http://www.limy.org/program/tomcat/jsp2_0.html" target="_blank" class="extlink">JSP2.0</a>

<h3 id="WinSCP でログイン時にリストの取得でエラーが起こる">WinSCP でログイン時にリストの取得でエラーが起こる</h3>

<h4>[参考]</h4>

+ <a href="http://www.geocities.jp/winscp_jp/" target="_blank" class="extlink">WinSCP 日本語化</a>

これは接続先のlsのエイリアス設定やLANGなどの環境変数によって生じるエラーです。 WinSCPのオプション(「エイリアスのクリア」や「環境変数のクリア」)で解決できる場合もありますが、 できない場合には以下の方法から1つ選んで対応してください。 

<ol><li>WinSCPのログイン画面→[環境]→[SCP]のシェルで[入力]を選択し、"/bin/bash" と入力する。 </li>
<li>サーバ側の ~/.login ファイルに次のように記述する(csh系の場合)。<pre>if ($?SSH_CLIENT && ! $?SSH_TTY) setenv LANG C </pre></li></ol>

<h3 id="SSH接続で公開鍵認証を使うときに、公開鍵を authorized_keys にコピーし忘れないようにしましょう">SSH接続で公開鍵認証を使うときに、公開鍵を authorized_keys にコピーし忘れないようにしましょう</h3>

SSHで接続するときに、公開鍵認証方式を使って接続する場合に、 サーバーにOpenSSH を使っている場合の注意点。

公開鍵と秘密鍵をクライアントマシンで作ったあと、公開鍵をサーバーにアップしなければなりません。その際、ファイル名は適当でいいのですが、authorized_keys ファイルに公開鍵の内容を書き写さないと、公開鍵を見つけてもらえませんでした。

<h3 id="要求モデリングのポイント">要求モデリングのポイント</h3>

要求モデリング (概念モデリング)を行う際に、どんな点に気をつけたらいいかのメモ。

<ol><li>コンテキストを理解する。(システムに名前をつける)</li>
<li>システムのアクターを知る (システムを使う人を聞いていく)</li>
<li>どんな機能が必要かを聞き出し、大まかにグルーピング(例：顧客管理、在庫管理、会計)</li>
<li>他機能と関係が多くなりそうな部分からモデリングをはじめる。</li>
<li>顧客からの情報 + 他のシステム(amazonとか)で使われている機能の情報などをあわせて、モデリングしていく</li></ol>

<em>モデリングの視点を一つに決める</em>ことが重要。例えば、機能として「顧客管理」と「在庫管理」があった場合、主システムが「在庫管理」であれば、「在庫の注文」より「在庫の受注」として、在庫管理システムからの視点で記述する。

<em>モデル化対象のシステムが、モデルに現れたらおかしくないか疑う</em>べし。自社システムを開発している場合、モデル中に「自社」というエンティティが出てきたら、おかしい。

<em>履歴を管理したい場合は、「期間」を限定子としてモデリングする</em>。また、<strong>同一の時間軸でモデリングする</strong>こと。ばらばらの時間軸で登場するモデルが存在すると、混乱する。

与えられたインスタンスを基に概念（型）を発見したり発明したりするのがモデリングだ。

<h3 id="マウス右クリックしたフォルダからコマンドプロンプトを開く">マウス右クリックしたフォルダからコマンドプロンプトを開く</h3>

エクスプローラで、このフォルダから「コマンドプロンプト」を開きたい！と思うときありませんか？レジストリをいじると、フォルダを右クリックしてコマンドプロンプトを開くことができるようになります。以下手順です。

<ol><li>「スタート」-&gt;「ファイル名を指定して実行」で「<em>regedit</em>」と入力する</li>
<li>「HKEY_CLASSES_ROOT」 - 「Folder」 - 「shell」の下に、新規キーで適当なキーを作成する</li>
<li>作成したキーの「既定」をダブルクリックして、マウス右クリック時に表示される文言を入力する(例：ここからcmdを開く)</li>
<li>作成したキーにさらにサブキーとして、「<em>command</em>」というキーを作成する</li>
<li>commandキーの「既定」をダブルクリックして、「cmd.exe」のパス + 「/k」 + 「cd &quot;%L&quot;」を設定する(例：「C:\WINDOWS\system32\cmd.exe /k cd &quot;%L&quot;」)</li></ol>

<h4>図1. 2,3番を実行した結果</h4>

<img src="http://hamasyou.com/images/engineer_soul/regedit1.gif" alt="2,3番を実行した結果" />

<h4>図2. 4,5番を実行した結果</h4>

<img src="http://hamasyou.com/images/engineer_soul/regedit2.gif" alt="4,5番を実行した結果" />

<h4>[参考]</h4>

+ <a href="http://www.microsoft.com/japan/technet/prodtechnol/windows2000serv/tips/regtweak.asp" target="_blank" class="extlink">Windows 2000 レジストリの調整</a>

<em>※ レジストリをいじるので、自己責任で行ってください。</em>

<h3 id="プロジェクト管理における7つの鉄則">プロジェクト管理における7つの鉄則</h3>

<dl><dt>ドキュメンテーションよりもコミュニケーション</dt><dd>ドキュメントは、コミュニケーションの手段にするべきです。ドキュメントは、メンテナンスコストがかかるので、本当に必要な場合以外は作成しないほうがよい。</dd>
<dt>ファースト・トラッキング</dt><dd>「ファースト・トラッキング」と「クラッシング」を活用せよ</dd></dl>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="技術者の宝石箱">
-----
KEYWORDS:
技術者,玉手箱,ノウハウ
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: ソースコードリーディングから学ぶ Javaの設計と実装
BASENAME: _java
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 04/28/2007 12:15:59 PM
TAGS: これは読むべき,わかりやすい,コードリーディング,良書
-----
BODY:
本書の対象読者は、アーキテクトを目指す人、技術者としてさらに設計技術を高めたい人、フレームワークの設計に興味がある人です。かなり幅広い設計技法について紹介しているので、内容自体はそこまで濃いものではありませんが勉強になります。

おすすめです。
-----
EXTENDED BODY:
<h2>感想</h2>

久々に満足した一冊です。対象がオープンソースプロダクトなので、時間があれば実際にソースコードを読みながら設計を理解していくということもできますが、一冊の本にまとめてくれて入り口まで案内してくれるということが、とてもよいことだと思いました。

少し技術に興味があるプログラマやアーキテクト見習いの人に、おすすめしたい一冊です。

<h2>参考</h2>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/ref=nosim/" target="_blank">増補改訂版Java言語で学ぶデザインパターン入門</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/513RDBB65YL._SL160_.jpg" border="0" alt="増補改訂版Java言語で学ぶデザインパターン入門" /></a></td><td valign="top"><font size="-1">結城 浩 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />Java開発におけるオブジェクト指向の良いお手本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />最初の何章かを繰り返し読む<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />すばらしいです、当然★５つです。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />良い本やと思います<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />最高のDP入門書<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/ref=nosim/" target="_blank">アジャイルソフトウェア開発の奥義</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51YANQY595L._SL160_.jpg" border="0" alt="アジャイルソフトウェア開発の奥義" /></a></td><td valign="top"><font size="-1">ロバート・C・マーチン 瀬谷 啓介 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />オブジェクト指向の本質を体系的に記述<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />いい本だとおもいます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />「奥義」の名に恥じない内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />体系だてられた経験的ガイドラインか。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://g-ec2.images-amazon.com/images/I/4169CSHV2AL._AA240_.jpg" border="0" alt="ソースコードリーディングから学ぶ Javaの設計と実装" />
-----
KEYWORDS:
ソースコード,リーディング,Java,設計,実装,オープンデザイン,オープンソース,4-7741-2950-X
-----


-----
CF50_CF_4: WINGSプロジェクト 佐藤 匡剛 (著), 山田 祥寛 (監修)
CF50_URL: http://ec2.images-amazon.com/images/I/4169CSHV2AL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/477412950X/250-0450217-6192202?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=477412950X
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: オブジェクト指向入門 第2版 原則・コンセプト
BASENAME: _2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 07/16/2007 11:15:05 AM
TAGS: オブジェクト指向,定番,良書
-----
BODY:
元祖オブジェクト本の第2版です。原則・コンセプトで構成された本書と、方法論・実践で構成される別冊の二冊をあわせて『オブジェクト指向入門 完全版』になります。

本書は、オブジェクト技術の核となる4つのアイデア、<strong>構造化手法</strong>、<strong>信頼性の規律</strong>、<strong>認識論上の原則</strong>、<strong>分類の技法</strong>をソフトウェア工学からの立場で解説している言わばエンジニアリング本です。

結構小難しい言葉で書かれている部分があり、またページ数が多いため結構読むのが大変でした。その分本来のオブジェクト指向の考え方や良いプログラミングにつながる考え方が深くまで解説されていたりして、とても為になりました。

本書の対象読者は、オブジェクト指向技術に興味のある技術者や良い作法のプログラムを書きたいプログラマです。読むのは大変ですが損はない、むしろ読まないと損するくらいの本です。おすすめです。
-----
EXTENDED BODY:
<h2>真のモジュール性</h2>

プログラミングの世界でモジュールと言うと一連のサブルーチンのまとまりを指します。このモジュールを再利用し、モジュールの組み合わせでプログラムを組み立てるモジュール・プログラミングという考えがあります。再利用可能なモジュールは独立性が高く、異なるアーキテクチャに組み込んでも安定して稼動することが求められます。

モジュールに再利用可能という性質を組み込むための5つの基準（criteria）、5つの規則（rule）、5つの原則（principle）が存在します。そして、これらを満たしたものが<strong>クラス</strong>の基礎となります。

<dl>
<dt class="tips">サブルーチンの内訳</dt> 
<dd>サブルーチンは結果として戻り値を返すものと返さないものの二種類に分けられます。戻り値を返すものを<strong>関数（function）</strong>と呼びます。戻り値を返さない手続きを<strong>プロシージャ（procedure）</strong>と呼びます。</dd> 
</dl> 

<h3>5つの基準</h3>

次の5つの基準を満たす設計手法は価値のあるモジュールを生み出す最低条件を満たします。

<dl>
<dt>分解しやすさ</dt><dd>他システムへの依存性を低く抑えることができる</d>
<dt>組み合わせやすさ</dt><dd>異なる環境においても自由に組み合わせることができる</dd>
<dt>分かりやすさ</dt><dd>独立性が高く、他のモジュールの知識を必要としない</dd>
<dt>連続性</dt><dd>変更の局所化が行えている</dd>
<dt>保護性</dt><dd>モジュールの内部で発生したエラーの影響を閉じ込めることができる</dd>
</dl>

<table>
<caption>5つの基準の例</caption>
<tr><th>基準</th><th>例</th></tr>
<tr><td>分解しやすさ</td><td>分解しやすさを満たす設計手法の有名な例はトップダウン設計（サブシステム分割）</td></tr>
<tr><td>組み合わせやすさ</td><td>Unix の シェルコマンド（ls や more など）</td></tr>
<tr><td>分かりやすさ</td><td>悪い例として、順序に依存するような呼び出しを想定しているモジュールがある</td></tr>
<tr><td>連続性</td><td>シンボリック定数、動的配列</td></tr>
<tr><td>保護性</td><td>モジュールの入り口で他システムからの入力をチェックする</td></tr>
</table> 

<h3>5つの規則</h3>

5つの基準から、モジュール性を保障するための次の規則が導き出されます。

<dl>
<dt>直接的な写像</dt><dd>解こうとしている問題領域のモデルとモジュールの構造が写像（マッピング）されている</dd>
<dt>少ないインターフェース</dt><dd>他のモジュールとの連携を行う際できる限り少ない数のモジュールとのやり取りで済ませる</dd>
<dt>小さいインターフェース</dt><dd>他のモジュールと通信する場合、最小限の情報のみをやり取りすること</dd>
<dt>明示的なインターフェース</dt><dd>他のモジュールと通信する場合、そのことがインターフェースから明らかに分かること</dd>
<dt>情報隠蔽</dt><dd>適切な情報のみを公開すること。不要な情報は隠蔽しておくこと</dd>
</dl>

<h3>5つの原則</h3>

基準、規則から次の5つの原則が導かれる。

<dl>
<dt>言語としてのモジュール単位</dt><dd>モジュールは言語の構文構造に対応していなければならない</dd>
<dt>自己文書化</dt><dd>モジュールについての情報をモジュールの一部として作成する</dd>
<dt>統一形式アクセス</dt><dd>統一された表記によってアクセスできなければならない</dd>
<dt>開放/閉鎖の原則（Open-Closed Principle）</dt><dd>拡張に対して開き、修正に対して閉じている</dd>
<dt>単一責任の原則（Single Responsibility Principle）</dt><dd>ひとつの役割だけをもつこと。変更の理由はただひとつでなければならない</dd>
</dl>

<h3>再利用</h3>

再利用と一言で言っても、何を再利用するのか？ 何が再利用できるのか？ を考える必要があります。本書では次の7つの What への再利用の考えが述べられています。

<ul>
<li>人材</li>
<li>仕様</li>
<li>設計</li>
<li>パターン</li>
<li>ソースコード</li>
<li>専用の部品</li>
<li>抽象化されたモジュール</li>
</ul>

<dl>
<dt class="info">車輪の再発明は悪なのか？</dt>
<dd>
<p>よく「車輪の再発明は悪」といわれますが「車輪」って何のことを指しているのでしょうか？ 本書で述べられている「仕様」のことなのか、「設計」のことなのかそれとも「ソースコード」のことなのか。</p>

<p>僕は「車輪」とは「仕様」のことだと理解しています。「走行抵抗を低くして対象に駆動力を与える」という「仕様」を再発明する必要はありません。でも、それを「車輪を円形で作成し、エンジンと連携させてコロコロ回るようにする」という設計や「空気によって地面に設置しなくても動く」という設計、設計を変えてつくることは全然良いことだと思っています。また、同じ円形の車輪でも「ゴムで作る」のと「木で作る」、実装を変えて作るのも全然良いことだと思います。</p></dd> 
</dl>

<h4>多重定義の役割</h4>

<blockquote>

ルーチンの多重定義は顧客のための機能である。ある1つの概念を表す異なる実装を使うとき、顧客は1つの記述で済ませることができる。

<cite>P.120 第4章 再利用性へのアプローチ「多重定義の役割」より</cite>

</blockquote>

つまり、意味は同じだけど実装を隠蔽する場合に多重定義（<strong>オーバーロード</strong>）を使うということです。

<h4>総称性の役割</h4>

<blockquote>

総称性は供給者モジュールの作者のための機能である。ある特定の概念を表す1つの実装を異なる種類のオブジェクトに適用するときに、同じ供給者モジュールテキストを書くことが可能になる。

<cite>P.125 第4章 再利用性へのアプローチ「総称性の役割」より</cite>

</blockquote>

総称性（C++ のテンプレートや Java のジェネリクス）は開発者が楽するものという位置づけです。

<h2>抽象データ型</h2>

<blockquote>

抽象とは、物体についての認知可能な性質を、そのほかの性質から、あるいは、その性質が当てはまる物体から分離することにほかなりません。

<cite>P.157 第6章 抽象データ型より</cite>

</blockquote>

オブジェクトを抽象のまま扱うには、そのオブジェクトの概念に対する操作や概念の属性に注意を向けるようにします。操作がデータ構造を定義するものとして操作を定義すると良い抽象データ構造が定義できるようになります。

オブジェクト操作として考えなければならない概念として、モジュールの供給者（supplier）、モジュールの顧客（client）そしてプロトコル（契約）があります。モジュールはプロトコル（契約）を基本とした相互動作を行います。

<h2>契約による設計（Design by Contract）</h2>

すべてのモジュールにおいてお互いの権利と義務を明確に定義することで信頼性の高い大規模システムが実現できます。このような考えを「<strong>契約による設計（Design by Contract）</strong>」と言います。

契約による設計では表明（assertion）を使ってモジュールの仕様を表します。

<dl>
<dt>事前条件</dt><dd>ルーチン（メソッド）が呼び出される時に顧客が満たされなければならない条件</dd>
<dt>事後条件</dt><dd>事前条件を満たした状態でルーチンが呼び出された場合に供給者が満たさなければならない条件</dd>
<dt>不変条件</dt><dd>ルーチン呼び出しによって変わらないオブジェクトの条件</dd>
</dl>

<h3>事前条件</h3>

<h4>事前条件はルーチンの顧客が満たす</h4>

事前条件は、ルーチン（メソッド）の呼び出し側、つまり顧客（Client）が満たさなければならない条件です。呼び出し側はルーチンの事前条件を満たしているかどうかを確認してからルーチンを呼び出します。

<h4>ルーチンの供給側は事前条件を確認できる操作を公開する</h4>

ルーチンの供給側は顧客が事前条件を満たしているかどうかを判断できる操作を公開しなければなりません。公開されている操作で顧客が事前条件を確認できない場合には、事前条件がおかしいか公開している操作が足りません。

<h4>事前条件は人間の入力、システム連携には使用しない</h4>

契約はルーチン間（供給者と顧客）で取り交わすものです。<strong>ここでいう供給者と顧客とはソフトウェア同士のこと</strong>です。ソフトウェアと人間、ソフトウェアと外界の間には契約は成り立ちません。

人間や外界のシステムが相手の場合には入力検査の仕組みを導入しなければなりません。たとえば、入力チェックモジュールによるフィルタなどが考えられます。

<h3>事後条件</h3>

<h4>事前条件が満たされない場合の事後条件は保証されない</h4>

事前条件が満たされないでルーチンが呼び出された場合、ルーチンの事後条件は保証されません。つまり供給者側はそれをエラーにしても良いし、でたらめな値を返してもよいということです。

<h4>事前条件が満たされたのに事後条件を満たせない場合</h4>

事前条件が満たされているのに、事後条件が満たせない場合には、供給側は例外をスローします。

<h3>表明違反の規則</h3>

<blockquote>

<ul>
<li>実行時の表明違反は、そのソフトウェアにバグがある証拠である。</li>
<li>事前条件違反は顧客側にバグがある証拠である。</li>
<li>事後条件違反は供給側にバグがある証拠である。</li>
</ul>

<cite>本書</cite>

</blockquote>

<h2>参考</h2>

<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/ref=nosim/" target="_blank">アジャイルソフトウェア開発の奥義</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51YANQY595L._SL160_.jpg" border="0" alt="アジャイルソフトウェア開発の奥義" /></a></td><td valign="top"><font size="-1">ロバート・C・マーチン 瀬谷 啓介 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />オブジェクト指向の本質を体系的に記述<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />いい本だとおもいます<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />「奥義」の名に恥じない内容<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />体系だてられた経験的ガイドラインか。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

<div class="rakuten">
<table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282376/sorehabooks-22/ref=nosim/" target="_blank">オブジェクト開発の神髄〜UML 2.0を使ったアジャイルモデル駆動開発のすべて</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282376/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51SE5K29G8L._SL160_.jpg" border="0" alt="オブジェクト開発の神髄〜UML 2.0を使ったアジャイルモデル駆動開発のすべて" /></a></td><td valign="top"><font size="-1">Scott W.Ambler 越智 典子 オージス総研 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />導入レベルです。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />学生向けではないのですが<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />中級者以上は仕事の振り返りに、初心者はガイドラインに<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />UMLに魂を入れる本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />とってもお得。じっくり読んでオブジェクト開発を身につけよう<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282376/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://ec1.images-amazon.com/images/I/51Y4DWH4N3L._AA240_.jpg" border="0" alt="オブジェクト指向入門 第2版 原則・コンセプト" />
-----
KEYWORDS:
オブジェクト指向,入門,原則,コンセプト,978-4-7981-1111-7,バートランド・メイヤー
-----


-----
CF50_CF_4: バートランド・メイヤー (著), 酒匂 寛 (翻訳)
CF50_URL: http://ec3.images-amazon.com/images/I/51Y4DWH4N3L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4798111112/249-0097330-2149158?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4798111112
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: Lifehacker インターネット時代のワークスタイル改善術!
BASENAME: lifehacker_インターネット時代のワークスタイル改善術
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Business
CATEGORY: Business
DATE: 10/16/2007 11:55:37 PM
TAGS: "Life Hack",良書
-----
BODY:
<strong>ライフハック</strong>とは、仕事や生活を快適にし、生産性をあげ、人生をハッピーにする技術のことです。本書はインターネット時代の現代におけるライフハックのノウハウ本です。

本書では、メールやネット上のツールを使ったハック術を取り上げて、実際の利用方法やTipsを解説しています。全88のハック術を説明しています。ひとつのハックが大体3〜5ページくらいに収まっているので、テンポ良く読み進められます。

対象読者は、今の自分の仕事環境や生活環境をよりよくしたいと考えている技術者の方です。簡単に導入できるものばかりなので、読んですぐ実践できるのが本書の良いところです。それぞれのハックに、導入レベル、プラットフォーム、導入コストが記されているので、自分の環境に合わせてハックを実践できるようになっています。
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<h3>未来の自分にe-mailしよう</h3>

たくさんのタスクに追われる毎日、ちょっとした予定や重大な予定を覚えておくために、メールのリマインダ機能を活用する。Google Calendar やYahoo! カレンダーは、リマインダ機能がついている。

<h3>自分専用のWikipediaをインストールしよう</h3>

Wikipedia のような、独自編集可能な自分専用の百科事典をつくる。Wiki は Web 上でページの追加・編集・削除が出来る機能を持つコンテンツ管理システムです。これを使って、いつでもどこでもインターネットがつながっている環境であれば自分の百科事典に知識や知恵を追加していくことが出来る。

<h3>自宅の使い勝手をよくしよう</h3>

いつも使うものはいつもの場所に、忘れてはいけないものはドア付近にそれようのスペースをつくり置いておく。使わないものはしまう。使うものは手の届くところに置く。

紙やペンはいろいろなところにおいておき、ちょっとしたアイデアが浮かんだらすぐに記録できるようにしておく。腰リールなんか最高。

<h2>参考</h2>

+ もっとライフハックを知りたいなら
<div class="rakuten">
<table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127280/sorehabooks-22/ref=nosim/" target="_blank">Life Hacks PRESS ~デジタル世代の「カイゼン」術~</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127280/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51ZAZJT1WDL._SL160_.jpg" border="0" alt="Life Hacks PRESS ~デジタル世代の「カイゼン」術~" /></a></td><td valign="top"><font size="-1">田口 元 安藤 幸央 平林 純 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />GTDに若干興醒め<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />LifeHacksの取っ掛かりに最適<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />忙しい人こそ読んでみて<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />GTDのとっかかりとしては良い<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />ＧＴＤの基礎を知るには最適、でも余計な情報も多い<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127280/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ 時間管理術を重点的に学ぶ
<div class="rakuten">
<table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/sorehabooks-22/ref=nosim/" target="_blank">エンジニアのための時間管理術</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51jWtxU0sAL._SL160_.jpg" border="0" alt="エンジニアのための時間管理術" /></a></td><td valign="top"><font size="-1">Thomas A. Limoncelli 株式会社クイープ <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />真面目すぎ・・・<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />時間に追われるのではなく、時間を積極的に管理するための良書♪<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />「普通のエンジニア、プログラマ、SE」を脱皮し始めた人へ<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />システム管理者は一度は読んでおきましょう<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873113075/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

+ 海外のライフハック系サイトでは有名な GTD(Getting Things Done) の邦訳
<div class="rakuten">
<table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4893613332/sorehabooks-22/ref=nosim/" target="_blank">仕事を成し遂げる技術―ストレスなく生産性を発揮する方法</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4893613332/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51VRF4WM8NL._SL160_.jpg" border="0" alt="仕事を成し遂げる技術―ストレスなく生産性を発揮する方法" /></a></td><td valign="top"><font size="-1">デビッド・アレン <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-3-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />本当にこの翻訳は「迷訳」だろうか？<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-1-0.gif" alt="stars" />翻訳がひどいですね<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />内容はもちろん良いのですが<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />翻訳などどうでもいい！！<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />まずは実践あるのみ。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4893613332/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://ec2.images-amazon.com/images/I/410WgZ%2BuPYL._AA240_.jpg" border="0" alt="Lifehacker インターネット時代のワークスタイル改善術!" />
-----
KEYWORDS:
Lifehacker,インターネット時代,ワークスタイル,改善,ライフハック,9784756149497
-----


-----
CF50_CF_4: Gina Trapani (著), 新丈 径 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/410WgZ%2BuPYL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4756149499/249-4832151-2409112?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4756149499
CF50_CF: アスキー
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: WebLogic でカスタムキーストアを使って SSL 通信を行うおぼえがき
BASENAME: weblogic_ssl
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 10/27/2007 11:03:49 PM
-----
BODY:
WebLogic9.2J でカスタムキーストアを使ってSSL通信を行うおぼえがきです。

使用した WebLogic は、下記のサイトからダウンロードしました。

<a href="http://www.beasys.co.jp/evaluation/index.html" target="_blank" class="extlink">日本BEAシステムズ株式会社 Evaluation Center</a>

<section>

<h4>環境</h4>

使用した環境は以下のとおりです。

<ul>
<li>Red Hat</li>
<li>WebLogic Server 9.2J & MP</li>
<li>OpenSSL</li>
</ul>

</section>
-----
EXTENDED BODY:
<h2>WebLogic と キーストア</h2>

<h3>キーストアとは</h3>

キーストアとは、暗号化に必要な鍵や証明書をエントリとして保管する箱です。それぞれのエントリをエイリアスをつけて管理します。キーストアを操作するツールに、Java の keytool があります。

<a href="http://sdc.sun.co.jp/java/docs/j2se/1.4/ja/docs/ja/tooldocs/solaris/keytool.html" target="_blank" class="extlink">keytool - 鍵と証明書の管理ツール</a>

<h3>WebLogic のキーストア</h3>

WebLogic は ID キーストアと信頼キーストアの2つのキーストアをセキュリティのために使い分けています。

ID キーストアは、主に秘密鍵を格納するのに使います。信頼キーストアはサーバ証明書を格納するのに使います。

秘密鍵は公開鍵暗号を行うサーバにとってとても重要なものになります。逆にサーバ証明書は複数のユーザで共有することができます。そのため、ID キーストアは root 権限での読み取りのみ、信頼キーストアは他からアクセス可能なパーミッションというような使い分けを行います。

WebLogic はデフォルトで「デモ ID とデモ信頼」という2つのキーストアを用意しています。

この2つのキーストアは <code>$WL_HOME/server/lib</code> の下にあります。

<dl>
<dt>デモ ID キーストア</dt>
<dd>DemoIdentity.jks</dd>
<dt>デモ信頼キーストア</dt>
<dd>DemoTrust.jks</dd>
</dl>

<p class="option">デモ用のキーストアのパスワードはそれぞれ「<strong>DemoIdentityKeyStorePassPhrase</strong>」「<strong>DemoTrustKeyStorePassPhrase</strong>」に設定されています。</p>

それぞれ、次のような秘密鍵エントリと証明書が入っています。

<pre class="console">[weblogic@localhost]# > <kbd>keytool -list -keystore DemoIdentity.jks -storepass DemoIdentityKeyStorePassPhrase</kbd>
 
キーストアのタイプ: jks
キーストアのプロバイダ: SUN
 
キーストアには 1 エントリが含まれます。
 
demoidentity, 2007/10/27, keyEntry,
証明書のフィンガープリント (MD5): 46:EA:6B:F9:D5:5D:CC:36:78:B3:E0:C1:41:30:CC:9E
</pre>

<pre class="console">[weblogic@localhost]# > <kbd>keytool -list -keystore DemoTrust.jks -storepass DemoTrustKeyStorePassPhrase</kbd>
 
キーストアのタイプ: jks
キーストアのプロバイダ: SUN
 
キーストアには 4 エントリが含まれます。
 
certgenca, 2002/03/23, trustedCertEntry,
証明書のフィンガープリント (MD5): 8E:AB:55:50:A4:BC:06:F3:FE:C6:A9:72:1F:4F:D3:89
wlsdemocanew2, 2003/01/25, trustedCertEntry,
証明書のフィンガープリント (MD5): 5B:10:D5:3C:C8:53:ED:75:43:58:BF:D5:E5:96:1A:CF
wlsdemocanew1, 2003/01/25, trustedCertEntry,
証明書のフィンガープリント (MD5): A1:17:A1:73:9B:70:21:B9:72:85:4D:83:01:69:C8:37
wlscertgencab, 2003/01/25, trustedCertEntry,
証明書のフィンガープリント (MD5): A2:18:4C:E0:1C:AB:82:A7:65:86:86:03:D0:B3:D8:FE
</pre>

<h3>カスタムキーストアとサーバ証明書</h3>

WebLogic サーバを一般公開しSSL通信を行う場合、デモ証明書では不十分です。きちんとした CA 局（認証機関）が発行したサーバ証明書を使う必要があります。

そういうときには、カスタムキーストアを作成し、信頼できる CA 局が発行したサーバ証明書を保存し、利用する必要があります。

<dl>
<dt class="info">オレオレ証明書</dt>
<dd><p>keytool でキーストアを作成すると秘密鍵と公開鍵のペアと公開鍵を自己署名証明書でサインした証明書が作成されます。いわゆるオレオレ証明書です。</p>

<p>オレオレ証明書では、ユーザにサーバを信頼してもらうことはできません。そのため、公開鍵を信頼されている CA 局の証明書でサインしてもらいます。</p>

<p>ブラウザにはあらかじめ信頼されている CA 局の証明書がインストールされています。ブラウザにインストールされていない CA 局の証明書でサインされているサーバの公開鍵は、警告が表示されますが、CA 局の証明書をブラウザに手動でインストールすれば警告はでなくなります。</p></dd>
</dl>

<h2>カスタムキーストアをつくる</h2>

今回はオレオレ CA 局に OpenSSL で作成したものを使います。

<h3>キーストアを作成する</h3>

keytool を使ってキーストアを作成します。

<pre class="console">[weblogic@localhost]# > <kbd>keytool -genkey -alias myserver -keyalg RSA -keystore myKeystore.jks</kbd>
キーストアのパスワードを入力してください:  <kbd>weblogic</kbd>
姓名を入力してください。
   [Unknown]:  <kbd>myserver</kbd>
組織単位名を入力してください。
   [Unknown]:  <kbd>hamasyou</kbd>
組織名を入力してください。
   [Unknown]:  <kbd>hamasyou</kbd>
都市名または地域名を入力してください。
   [Unknown]:  <kbd>tokyo</kbd>
州名または地方名を入力してください。
   [Unknown]:  <kbd>tokyo</kbd>
この単位に該当する 2 文字の国番号を入力してください。
   [Unknown]:  <kbd>jp</kbd>
CN=myserver, OU=hamasyou, O=hamasyou, L=tokyo, ST=tokyo, C=jp でよろしいですか? 
   [no]:  <kbd>yes</kbd>
 
&lt;myserver&gt; の鍵パスワードを入力してください。
        (キーストアのパスワードと同じ場合は RETURN を押してください): <kbd>[Enter]</kbd>
 
[weblogic@localhost]# > <kbd>ls</kbd>
myKeystore.jks   
</pre>

<dl>
<dt class="notice">姓名の入力に注意</dt>
<dd><p>「姓名」のところには、サーバのホスト名を入力します。今回は myserver とつけました。この場合、クライアント（ブラウザ）からは https://myserver/ のようにアクセスします。</p>

<p>「姓名」で設定した値と、ホスト名が違うと、ブラウザには次のような警告が表示されます。</p>

<img src="http://hamasyou.com/images/WebLogicSSL/warn_ssl_hostname.gif" alt="SSL 証明書のホスト名が違う" />

<p>ホスト名ごとにサーバ証明書は作る必要があるので注意が必要です。</p></dd>
</dl>

<dl>
<dt>-keysotre</dt>
<dd><p>指定されたキーストアが存在しない場合は新たにキーストアが作成されます。</p></dd>
<dt>-alias</dt>
<dd><p>このキーストアに作成される秘密鍵と公開鍵のペアに名前（エイリアス）をつけます。キーのペアはこのエイリアスを用いてアクセスされます。</p></dd>
<dt>-keyalg</dt>
<dd><p>暗号化アルゴリズムを指定します。指定しない場合は <strong>DSA</strong> になります。<em>WebLogic Server 9.2J の試用版では DSA アルゴリズムはサポートされていないので、明示的に <strong>RSA</strong> を指定します。</em></p>

<p><a href="http://www.hi-sv.com/e-docs/wls/docs92/client/security.html#wp1077561" target="_blank" class="extlink">WebLogic ドキュメント - SSL を使用するクライアントの開発</a></p></dd>
</dl>

<h3>サーバ証明書発行要求を作成する</h3>

キーストアを作っただけだと、自己署名によるサーバ証明書しかありません。CA 局にサーバ証明書を作ってもらうために、サーバ証明書発行要求をつくります。

<pre class="console">[weblogic@localhost]# > <kbd>keytool -certreq -alias myserver -keystore myKeystore.jks -file myserver_certreq.csr</kbd>
キーストアのパスワードを入力してください:  <kbd>weblogic</kbd>
 
[weblogic@localhost]# > <kbd>ls</kbd>
myKeystore.jks  myserver_certreq.csr
</pre>

ここで作成したサーバ証明書発行要求は、CA 局がサーバ証明書をつくる元になります。

<h3>オレオレ CA 局を作成する</h3>

OpenSSL の CA 作成スクリプトを CA 局を作成します。自分の環境では openssl の CA 作成スクリプトは <code>/usr/share/ssl/misc</code> にありました。

これを、適当なディレクトリにコピーして利用します。

<pre class="console">[weblogic@localhost]# > <kbd>./CA -newca</kbd>
 
CA certificate filename (or enter to create) <kbd>[Enter]</kbd>
 
Making CA certificate ...
Generating a 1024 bit RSA private key
..........++++++
...........................++++++
writing new private key to './demoCA/private/./cakey.pem'
Enter PEM pass phrase: <kbd>weblogic</kbd>
Verifying - Enter PEM pass phrase: <kbd>weblogic</kbd>
----- 
You are about to be asked to enter information that will be incorporated 
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [GB]:<kbd>jp</kbd>
State or Province Name (full name) [Berkshire]:<kbd>tokyo</kbd>
Locality Name (eg, city) [Newbury]:<kbd>tokyo</kbd>
Organization Name (eg, company) [My Company Ltd]:<kbd>hamasyou</kbd>
Organizational Unit Name (eg, section) []:<kbd>hamasyou</kbd>
Common Name (eg, your name or your server's hostname) []:<kbd>oreoreca</kbd>
Email Address []:<kbd>xxxxxx@hamasyou.com</kbd>
</pre>

<dl>
<dt class="warn">Organization Name と 組織名に注意</dt>
<dd><p>CA の「Organization Name」とサーバの「組織名」（keytool -genkey で指定したもの）が違うと、エラーが発生します。</p>

<pre class="console">[weblogic@localhost]# > <kbd>openssl ca -keyfile demoCA/private/cakey.pem -cert demoCA/cacert.pem -in myserver_certreq.csr -out myserver_cert.csr</kbd>
Using configuration from /usr/share/ssl/openssl.cnf
Enter pass phrase for demoCA/private/cakey.pem:
Check that the request matches the signature
Signature ok
The organizationName field needed to be the same in the
CA certificate (hamasyou) and the request (xxxxx)
</pre></dd>
</dl>

CA スクリプトを実行したディレクトリの配下に次のようなディレクトリが作成されているはずです。

<pre class="console">[weblogic@localhost]# > <kbd>tree demoCA</kbd>
demoCA/
    |-- cacert.pem
    |-- certs
    |-- crl
    |-- index.txt
    |-- newcerts
    |-- private
    |   `-- cakey.pem
    `-- serial
</pre>

<dl>
<dt>demoCA/cacert.pem</dt>
<dd><p>このファイルが CA 局のサーバ証明書です。今回はオレオレCA 局なので、このサーバ証明書もキーストアに保存しなければなりません。</p></dd>
<dt>demoCA/private/cakey.pem</dt>
<dd><p>CA 局の秘密鍵です。この CA 局からサーバ証明書を発行してもらうときに使います。</p></dd>
</dl>

<h3>オレオレ CA 局にサーバ証明書を発行してもらう</h3>

今作った CA 局のサーバ証明書を使って、サーバ証明書を発行します。

<pre class="console">[weblogic@localhost]# > <kbd>openssl ca -keyfile demoCA/private/cakey.pem -cert demoCA/cacert.pem -in myserver_certreq.csr -out myserver_cert.csr</kbd>
 
Using configuration from /usr/share/ssl/openssl.cnf
Enter pass phrase for demoCA/private/cakey.pem: weblogic
Check that the request matches the signature
Signature ok
Certificate Details:
        Serial Number: 1 (0x1)
        Validity
            Not Before: Oct 27 12:11:19 2007 GMT
            Not After : Oct 26 12:11:19 2008 GMT
        Subject:
            countryName               = jp
            stateOrProvinceName       = tokyo
            organizationName          = hamasyou
            organizationalUnitName    = hamasyou
            commonName                = myserver
        X509v3 extensions:
            X509v3 Basic Constraints:
            CA:FALSE
            Netscape Comment:
            OpenSSL Generated Certificate
            X509v3 Subject Key Identifier:
            16:2F:BB:44:06:C5:A1:20:8F:D1:70:0D:70:6B:07:54:D2:13:6B:9C
            X509v3 Authority Key Identifier:
            keyid:BE:04:55:2E:63:2E:37:FC:94:1B:D6:9D:09:96:78:7A:B1:BF:A9:F6
            DirName:/C=jp/ST=tokyo/L=tokyo/O=hamasyou/OU=hamasyou
/CN=oreoreca/emailAddress=xxxxx@hamasyou.com
            serial:00
 
Certificate is to be certified until Oct 26 12:11:19 2008 GMT (365 days)
Sign the certificate? [y/n]:<kbd>y</kbd>
 
 
1 out of 1 certificate requests certified, commit? [y/n]<kbd>y</kbd>
Write out database with 1 new entries
Data Base Updated
 
[weblogic@localhost]# > <kbd>ls -F</kbd>
CA*  demoCA/  myKeystore.jks  myserver_cert.csr  myserver_certreq.csr 
</pre>

作成されたサーバ証明書を見てみると、証明データ以外にヘッダーがついています。キーストアに保存する際にはヘッダー部は不要なので削除します。

「<code>-----BEGIN CERTIFICATE-----</code>」から「<code>-----END CERTIFICATE-----</code>」までを残して、他は削除します。

<h4>編集前</h4>

<pre class="console">[weblogic@localhost]# > <kbd>cat myserver_cert.csr</kbd>
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1 (0x1)
        Signature Algorithm: md5WithRSAEncryption
        Issuer: C=jp, ST=tokyo, L=tokyo, O=hamasyou, OU=hamasyou, CN=oreoreca/emailAddress=xxxxx@hamasyou.com
        Validity
            Not Before: Oct 27 12:11:19 2007 GMT
            Not After : Oct 26 12:11:19 2008 GMT
        Subject: C=jp, ST=tokyo, O=hamasyou, OU=hamasyou, CN=myserver
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (1024 bit)
                Modulus (1024 bit):
                    00:9d:61:fa:c1:92:ab:74:a5:cd:ec:bc:01:55:eb:
                    6c:9d:67:92:b6:cf:1c:de:f0:65:ba:82:7f:8b:a4:
                    9d:d6:0a:17:41:69:7b:86:41:3e:aa:8b:47:80:0e:
                    8c:0a:89:30:04:75:d1:34:46:6d:21:97:46:db:0b:
                    11:2c:2f:15:b5:05:48:d0:a9:db:1f:1b:7a:40:6b:
                    4f:44:89:f7:ea:3b:ae:c8:3f:6b:1c:c2:fa:9d:74:
                    16:32:f8:25:95:b4:24:76:18:52:97:8b:0e:ba:77:
                    a9:34:51:ae:89:4a:2e:1c:37:a8:78:73:8c:03:25:
                    4f:66:77:55:d5:6f:91:bd:a5
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints:
            CA:FALSE
            Netscape Comment:
            OpenSSL Generated Certificate
            X509v3 Subject Key Identifier:
            16:2F:BB:44:06:C5:A1:20:8F:D1:70:0D:70:6B:07:54:D2:13:6B:9C
            X509v3 Authority Key Identifier:
            keyid:BE:04:55:2E:63:2E:37:FC:94:1B:D6:9D:09:96:78:7A:B1:BF:A9:F6
            DirName:/C=jp/ST=tokyo/L=tokyo/O=hamasyou/OU=hamasyou
/CN=oreoreca/emailAddress=xxxxx@hamasyou.com
            serial:00
 
    Signature Algorithm: md5WithRSAEncryption
        42:fb:ee:73:5b:03:e5:60:95:b6:eb:72:ac:bd:6a:c1:37:17:
        8b:2f:e6:6b:d1:28:e8:73:2d:d6:1b:d9:cd:cb:34:93:5d:4c:
        dd:4d:5a:b3:89:47:9e:dc:81:ca:d4:d0:e1:79:68:2a:5a:d6:
        fe:30:25:56:e8:3c:b2:18:fc:65:35:e4:19:0c:94:67:36:59:
        66:f4:ae:28:6b:66:7d:5a:be:50:0f:8a:cb:a3:72:af:3b:c7:
        v04:52:5e:c7:29:b0:79:3b:a6:4d:22:f7:5d:73:25:26:53:46:
        94:b2:e6:d0:50:5f:37:00:f0:5b:fc:7b:3c:20:76:f7:37:c5:
        f6:a4
-----BEGIN CERTIFICATE-----
MIIDbTCCAtagAwIBAgIBATANBgkqhkiG9w0BAQQFADCBiTELMAkGA1UEBhMCanAx
DjAMBgNVBAgTBXRva3lvMQ4wDAYDVQQHEwV0b2t5bzERMA8GA1UEChMIaGFtYXN5
b3UxETAPBgNVBAsTCGhhbWFzeW91MREwDwYDVQQDEwhvcmVvcmVjYTEhMB8GCSqG
SIb3DQEJARYSeHh4eHhAaGFtYXN5b3UuY29tMB4XDTA3MTAyNzEyMTExOVoXDTA4
MTAyNjEyMTExOVowVjELMAkGA1UEBhMCanAxDjAMBgNVBAgTBXRva3lvMREwDwYD
VQQKEwhoYW1hc3lvdTERMA8GA1UECxMIaGFtYXN5b3UxETAPBgNVBAMTCG15c2Vy
dmVyMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCdYfrBkqt0pc3svAFV62yd
Z5K2zxze8GW6gn+LpJ3WChdBaXuGQT6qi0eADowKiTAEddE0Rm0hl0bbCxEsLxW1
BUjQqdsfG3pAa09EiffqO67IP2scwvqddBYy+CWVtCR2GFKXiw66d6k0Ua6JSi4c
N6h4c4wDJU9md1XVb5G9pQIDAQABo4IBFTCCAREwCQYDVR0TBAIwADAsBglghkgB
hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE
FBYvu0QGxaEgj9FwDXBrB1TSE2ucMIG2BgNVHSMEga4wgauAFL4EVS5jLjf8lBvW
nQmWeHqxv6n2oYGPpIGMMIGJMQswCQYDVQQGEwJqcDEOMAwGA1UECBMFdG9reW8x
DjAMBgNVBAcTBXRva3lvMREwDwYDVQQKEwhoYW1hc3lvdTERMA8GA1UECxMIaGFt
YXN5b3UxETAPBgNVBAMTCG9yZW9yZWNhMSEwHwYJKoZIhvcNAQkBFhJ4eHh4eEBo
YW1hc3lvdS5jb22CAQAwDQYJKoZIhvcNAQEEBQADgYEAQvvuc1sD5WCVtutyrL1q
wTcXiy/ma9Eo6HMt1hvZzcs0k11M3U1as4lHntyBytTQ4XloKlrW/jAlVug8shj8
ZTXkGQyUZzZZZvSuKGtmfVq+UA+Ky6NyrzvHBFJexymweTumTSL3XXMlJlNGlLLm
0FBfNwDwW/x7PCB29zfF9qQ=
-----END CERTIFICATE-----
</pre>

<h4>編集後</h4>

<pre class="console">[weblogic@localhost]# > <kbd>cat myserver_cert_after.csr</kbd>
-----BEGIN CERTIFICATE-----
MIIDbTCCAtagAwIBAgIBATANBgkqhkiG9w0BAQQFADCBiTELMAkGA1UEBhMCanAx
DjAMBgNVBAgTBXRva3lvMQ4wDAYDVQQHEwV0b2t5bzERMA8GA1UEChMIaGFtYXN5
b3UxETAPBgNVBAsTCGhhbWFzeW91MREwDwYDVQQDEwhvcmVvcmVjYTEhMB8GCSqG
SIb3DQEJARYSeHh4eHhAaGFtYXN5b3UuY29tMB4XDTA3MTAyNzEyMTExOVoXDTA4
MTAyNjEyMTExOVowVjELMAkGA1UEBhMCanAxDjAMBgNVBAgTBXRva3lvMREwDwYD
VQQKEwhoYW1hc3lvdTERMA8GA1UECxMIaGFtYXN5b3UxETAPBgNVBAMTCG15c2Vy
dmVyMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCdYfrBkqt0pc3svAFV62yd
Z5K2zxze8GW6gn+LpJ3WChdBaXuGQT6qi0eADowKiTAEddE0Rm0hl0bbCxEsLxW1
BUjQqdsfG3pAa09EiffqO67IP2scwvqddBYy+CWVtCR2GFKXiw66d6k0Ua6JSi4c
N6h4c4wDJU9md1XVb5G9pQIDAQABo4IBFTCCAREwCQYDVR0TBAIwADAsBglghkgB
hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE
FBYvu0QGxaEgj9FwDXBrB1TSE2ucMIG2BgNVHSMEga4wgauAFL4EVS5jLjf8lBvW
nQmWeHqxv6n2oYGPpIGMMIGJMQswCQYDVQQGEwJqcDEOMAwGA1UECBMFdG9reW8x
DjAMBgNVBAcTBXRva3lvMREwDwYDVQQKEwhoYW1hc3lvdTERMA8GA1UECxMIaGFt
YXN5b3UxETAPBgNVBAMTCG9yZW9yZWNhMSEwHwYJKoZIhvcNAQkBFhJ4eHh4eEBo
YW1hc3lvdS5jb22CAQAwDQYJKoZIhvcNAQEEBQADgYEAQvvuc1sD5WCVtutyrL1q
wTcXiy/ma9Eo6HMt1hvZzcs0k11M3U1as4lHntyBytTQ4XloKlrW/jAlVug8shj8
ZTXkGQyUZzZZZvSuKGtmfVq+UA+Ky6NyrzvHBFJexymweTumTSL3XXMlJlNGlLLm
0FBfNwDwW/x7PCB29zfF9qQ=
-----END CERTIFICATE-----
</pre>

<h3>オレオレ CA 局サーバ証明書をキーストアに保存する</h3>

サーバ証明書を発行した CA 局のサーバ証明書をキーストアに保存します。キーストアにサーバ証明書にサインした CA のサーバ証明書がない場合にはエラーになります。

<pre class="console">[weblogic@localhost]# > <kbd>keytool -import -noprompt -trustcacerts -alias oreoreca -file demoCA/cacert.pem -keystore myKeystore.jks -storepass weblogic</kbd>
証明書がキーストアに追加されました。
</pre>

<dl>
<dt class="warn">証明書の登録順に注意</dt>
<dd><p>CA 局のサーバ証明書を先にキーストアに保存していない場合、証明連鎖できずにエラーになります。</p>

<pre class="console">[weblogic@localhost]# > <kbd>keytool -import -noprompt -alias myserver -file myserver_cert_after.csr -keystore myKeystore.jks -storepass weblogic</kbd>
keytool エラー: java.lang.Exception: 応答から連鎖を確立できませんでした。
</pre></dd>
</dl>

<h3>サーバ証明書をキーストアに保存する</h3>

CA 局に発行されたサーバ証明書を保存します。このとき、最初に keytool -genkey で指定したエイリアスと同じ値を指定した場合は証明連鎖（CA 局と自己署名）になります。

<pre class="console">[weblogic@localhost]# > <kbd>keytool -import -noprompt -alias myserver -file myserver_cert_after.csr -keystore myKeystore.jks -storepass weblogic</kbd>
証明書応答がキーストアにインストールされました。 
</pre>

<img src="http://hamasyou.com/images/WebLogicSSL/certchain.gif" alt="証明連鎖" />

<dl>
<dt class="notice">証明書のエイリアスに注意</dt>
<dd><p>最初に keytool -genkey で作成したときのエイリアスと別のエイリアスでサーバ証明書を保存した場合、CA 局による署名が使われず自己署名が使われます。</p>

<img src="http://hamasyou.com/images/WebLogicSSL/oreorecert.gif" alt="自己署名" /></dd>
</dl>

<h2>WebLogic でカスタムキーストアを設定する</h2>

<h3>WebLogic のカスタムキーストアの設定</h3>

WebLogic に先ほど作成したキーストアを設定します。WebLogic の管理サーバの管理画面を開き、[サーバ]-[コンフィグレーション]-[キーストア]を開きます。

キーストアに「カスタム ID とカスタム信頼」を選択します。

今回は、秘密鍵、サーバ証明書ともに同じキーストアに入れているので、両方とも同じ設定を行います。

<a href="http://hamasyou.com/images/WebLogicSSL/weblogic_keystore.jpg" target="_blank"><img src="http://hamasyou.com/images/WebLogicSSL/weblogic_keystore.jpg" width="600" alt="キーストアの設定" /></a>

<h3>WebLogic の SSL の設定</h3>

WebLogic の SSL の設定を行います。WebLogic の管理サーバの管理画面を開き、[サーバ]-[コンフィグレーション]-[SSL]を開きます。

ID キーストアに指定したキーストアの中から秘密鍵エントリのエントリを指定します。

<a href="http://hamasyou.com/images/WebLogicSSL/weblogic_ssl.jpg" target="_blank"><img src="http://hamasyou.com/images/WebLogicSSL/weblogic_ssl.jpg" width="600" alt="SSL の設定" /></a>

<dl>
<dt class="warn">公開鍵暗号アルゴリズムに注意</dt>
<dd><p>WebLogic Server 9.2J MP2 の試用版では、公開鍵暗号に DSA はサポートされていません。秘密鍵は keytool -genkey の -keyalg で <strong>RSA</strong> を指定したものを指定します。</p>

<p><a href="http://www.hi-sv.com/e-docs/wls/docs92/client/security.html#wp1077561" target="_blank" class="extlink">WebLogic ドキュメント - SSL を使用するクライアントの開発</a></p></dd>
</dl>

<h2>クライアント（ブラウザ）に CA 局の証明書をインストールする</h2>

ブラウザで WebLogic サーバにアクセスすると、今回作成した SSL 証明書が使われるわけですが、次のような警告が出ると思います。

「このセキュリティ証明書は、信頼する会社から発行されていません。証明書を表示して、この証明機関を信頼するかどうかを決定してください。」

<img src="http://hamasyou.com/images/WebLogicSSL/warn_cert.gif" alt="セキュリティ証明書エラー" />

今回、オレオレ CA 局を作りましたが、この CA 局の CA 証明書はクライアント（ブラウザ）に信頼されていません。

<section>
<h4>参考</h4>

<a href="http://maruyama-mitsuhiko.cocolog-nifty.com/security/2005/01/ie.html" target="_blank" class="extlink">IEが表示する「信頼する会社」とは・・・</a>

</section>

今回作った CA 局を証明機関として正しくクライアントに認識してもらうために、CA局の証明書をクライアント（ブラウザ）にインストールします。

<h3>CA 局のサーバ証明書をブラウザにインポートする</h3>

CA 局のサーバ証明書は <code>demoCA/cacert.pem</code> になります。これをブラウザにインストールします。

ブラウザの [ツール]-[インターネット オプション] の [コンテンツ] タブにある [証明書...] を開きます。

<img src="http://hamasyou.com/images/WebLogicSSL/ie_option.gif" alt="インターネット オプション" />


[信頼されたルート証明機関] タブを開き、[インポート(I)...] を開きます。

<img src="http://hamasyou.com/images/WebLogicSSL/cert_import.gif" alt="証明書のインポート" />

<img src="http://hamasyou.com/images/WebLogicSSL/import1.gif" alt="証明書インポート 手順1" />

[参照...] を選択して [ファイルの種類] を「すべて」にし、CA 局のサーバ証明書を選択します。

<img src="http://hamasyou.com/images/WebLogicSSL/import2.gif" alt="証明書インポート 手順2" />

証明書のストア場所を、「信頼されたルート証明機関」を選択します。

<img src="http://hamasyou.com/images/WebLogicSSL/import3.gif" alt="証明書インポート 手順3" />

<img src="http://hamasyou.com/images/WebLogicSSL/import4.gif" alt="証明書インポート 手順4" />

<img src="http://hamasyou.com/images/WebLogicSSL/import5.gif" alt="証明書インポート 手順5" />

「はい」を選択すると、CA 局の証明書が「ルート証明機関」として認識されるようになります。

<img src="http://hamasyou.com/images/WebLogicSSL/import6.gif" alt="証明書インポート 手順6" />

CA 局のサーバ証明書は安全な方法（改ざんされない方法）で取得する必要があります。また、本当に信頼する CA 局のサーバ証明書のみをクライアントにはインストールするようにします。

良くわからない CA 局のサーバ証明書はインストールしてはいけません。

<h2>参考</h2>

<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798113328/sorehabooks-22/ref=nosim/" target="_blank">BEA WebLogic Server 9.x/10 構築・運用ガイド</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798113328/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51W3GF2aETL._SL160_.jpg" border="0" alt="BEA WebLogic Server 9.x/10 構築・運用ガイド" /></a></td><td valign="top"><font size="-1">伊藤忠テクノソリューションズ株式会社 日本BEAシステムズ株式会社 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />前作と同様わかりやすいつくり<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798113328/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="WebLogic でカスタムキーストアを使って SSL 通信を行うおぼえがき" />
-----
KEYWORDS:
WebLogic Server 9.2J,WebLogic,おぼえがき,キーストア,SSL
-----

COMMENT:
AUTHOR: ユン
EMAIL: yun2030@gmail.com
IP: 124.102.76.2
URL: 
DATE: 10/30/2007 03:27:42 PM
こんにちわ、上記の内容は大変参考になりました。
ありがとうございました。

上の内容で一点質問させてもらいませんか。
クライアントでの証明書インストールはいらないでしょうか？
（ブラウザからmyserver_cert_after.csrファイルをインポート後、https://adress:7002/console　へ接続してみましたが、接続されませんでしたので　TT。）


-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 219.126.182.86
URL: 
DATE: 10/30/2007 06:57:49 PM
ユンさん、ご指摘ありがとうございます。
ブラウザでアクセスする場合、ブラウザのルート証明機関にCA 局のサーバ証明書をインストールする必要があります。

記事、追記しておきました。
また、何か気になる点があればご指摘ください。
-----

COMMENT:
AUTHOR: tandem2k5
EMAIL: tandem2k5@gmail.com
IP: 15.211.169.107
URL: 
DATE: 11/28/2007 02:22:12 AM
こんにちわ。
私も同様のことを試行しており、大変参考になりました。

ところで、こちらの内容は管理サーバと管理対象サーバを同じにしているケースでしょうか。
私は、これらを別インスタンスで起動しようと思っており、また、そこの通信をt3sでやりたい（管理対象サーバの起動スクリプトに記載する管理サーバのURLにt3s）のですが、うまくSSL通信ができずに困っています。
もしノウハウをお持ちでしたら、お教え下さい。

-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 150.29.51.170
URL: 
DATE: 12/06/2007 01:14:48 PM
tandem2k5 さん、コメントありがとうございます。

管理サーバと管理対象サーバは別々で試しました。

推測ですが、tandem2k5 さんの環境だと、
管理対象サーバの方がクライアント（ブラウザ役）、管理サーバがサーバという構成だと思います。

管理対象サーバの keystore に管理サーバの証明書（CAの証明）が入っていないのではないでしょうか？

HTTPS も t3s も、SSL 通信の仕組み自体は同じなはずなので。。。

休日、時間が取れたら試してみたいと思います。
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Struts2 おぼえがき
BASENAME: struts2_おぼえがき
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 11/27/2007 11:24:45 PM
-----
BODY:
Struts2 は WebWorks2 をベースとした MVC フレームワークです。Struts1 と変わらずコマンドパターンのフレームワークになっています。

コマンドパターンの実装部分では、OPENSYMHONY の XWork が使われています。

<h3>Struts2の特徴</h3>

<ul>
<li>WebWorks の後継となる WebWorks2 がベースの MVC フレームワーク</li>
<li>コマンドパターンが使われている（XWork が使われている）</li>
<li>アノテーションと XML ファイルによる設定</li>
<li>ActionForm がない。代わりにアクションにフォームデータを格納する</li>
<li>アクションは POJO で作成できる</li>
<li>アクションがスレッドセーフ</li>
<li>設定ファイルに OGNL 式が書ける</li>
<li>View に JSP、Freemaker、Velocity、XSLT が使える</li>
<li>SpringFramework との連携が考慮されている</li>
<li>Ajax をサポートしている</li>
<li>プラグインによりフレームワークの拡張が行える</li>
</ul>

情報が正確ではない可能性が大いにあるので（ドキュメント読まずにソース見ながら書いているので・・・）、鵜呑みにしないでください。

随時更新予定です。

<section>

<h4>執筆時の環境</h4>

<ul>
<li>JDK1.5.12</li>
<li><a href="http://struts.apache.org/2.x/" target="_blank" class="extlink">Struts2 2.0.11</a></li>
</ul>

</section>
-----
EXTENDED BODY:
<h2>目次</h2>

<ol>
<li><a href="#アーキテクチャ">アーキテクチャ</a>
<ol>
    <li><a href="#アーキテクチャ概要図">アーキテクチャ概要図</a></li>
    <li><a href="#主なクラス">主なクラス</a></li>
    <li><a href="#概要クラス図とシーケンス図">概要クラス図とシーケンス図</a></li>
</ol>
</li>
<li><a href="#Struts2 の主な機能">Struts2 の主な機能</a>
<ol>
    <li><a href="#コンフィグレーションファイルの指定">コンフィグレーションファイルの指定</a></li>    
    <li><a href="#Zero コンフィグレーション">Zero コンフィグレーション</a></li>
    <li><a href="#カスタム設定読み込み">カスタム設定読み込み</a></li>
    <li><a href="#Dependency Injection">Dependency Injection</a></li>
    <li><a href="#インターセプタ">インターセプタ</a></li>
    <li><a href="#アクションの作成">アクションの作成</a></li>
    <li><a href="#Result について">Result について</a></li>
</ol>
</li>
</ol>

<h2 id="アーキテクチャ">アーキテクチャ</h2>

<h3 id="アーキテクチャ概要図">アーキテクチャ概要図</h3>

<img src="http://hamasyou.com/images/Struts2/archtecture.jpg" alt="Struts2のアーキテクチャ" />

<h2 id="主なクラス">主なクラス（Struts2、XWork）</h2>

<h3>org.apache.struts2.dispatcher.FilterDispatcher</h3>

Struts2 のリクエストはすべてこのフィルタが受け付け、適切なクラスに処理をディスパッチします。

ディスパッチする先の Dispatcher クラスは、FilterDispatcher#init(FilterConfig) で作成、初期化されます。

<dl>
<dt class="info">URLパターン</dt>
<dd><p>フィルタの url-pattern は「/*」にすることが推奨（JavaDoc によると MUST）されています。</p>

<pre class="code"><code><span class="tag">&lt;filter-mapping&gt;</span> 
  <span class="tag">&lt;filter-name&gt;</span>struts2<span class="tag">&lt;/filter-name&gt;</span> 
  <span class="tag">&lt;url-pattern&gt;</span>/*<span class="tag">&lt;/url-pattern&gt;</span> 
<span class="tag">&lt;/filter-mapping&gt;</span>
</code></pre></dd>
</dl>

「/struts/」で始まるパスがリクエストされると、FilterDispatcher は静的リソースを検索します。

たとえば「http://localhost:8080/struts2/struts/ajax/dojoRequire.js」のようにアクセスされた場合「/struts/」以下のパスをクラスパスから検索します。

デフォルトでは、

<ul>
<li>org.apache.struts2.static</li>
<li>template</li>
<li>org.apache.struts2.interceptor.debugging</li>
</ul>

のクラスパスが指定されていますので、上記URLにアクセスされた場合は「/org/apache/struts2/static/ajax/dojoRequire.js」「/template/ajax/dojoRequire.js」「/org/apache/struts2/interceptor/debugging/dojoRequire.js」からマッチする静的コンテンツを返すようになります。

<h3>org.apache.struts2.dispatcher.mapper.ActionMapper</h3>

Httpリクエストとアクションのマッピングを管理します。リクエストに対応する適切なアクション情報を <code>ActionMapping</code> オブジェクトとして返します。

<h3>org.apache.struts2.dispatcher.Dispatcher</h3>

Dispatcher クラスは Struts2 の設定情報を保持し、 FilterDispatcher から呼び出され実際にリクエストをディスパッチします。

Dispatcher インスタンスはすべてのリクエストで共有されます。

<h3>com.opensymphony.xwork2.config.ConfigurationManager</h3>

設定情報を司るクラスです。複数の <code>ConfigurationProvider</code> を持ち、<code>ConfigurationProvider</code> から情報を受け取り <code>Configuration</code> インスタンスを作成します。

<h3>com.opensymphony.xwork2.config.ConfigurationProvider</h3>

設定情報を提供するクラスです。設定情報ごとにクラスを用意します。たとえば、struts.xml ファイルの設定情報を読み込み、<code>Configuration</code> に設定するのは <code>org.apache.struts2.config.StrutsXmlConfigurationProvider</code> クラスになります。

<h3>com.opensymphony.xwork2.config.Configuration</h3>

設定情報を表すクラスです。

<h3>com.opensymphony.xwork2.ActionProxy</h3>

アクションのプロキシとなるクラスです。アクションの呼び出しを <code>ActionInvocation</code> に委譲します。

<code>ActionProxy</code> の内部では、<code>ActionInvocation</code> が呼び出されます。

<h3>com.opensymphony.xwork2.ActionInvocation</h3>

アクションの呼び出しを行います。アクションの実体とインタセプタを保持しています。

<code>ActionProxy</code> によって初期化され、起動されます。<code>ActionProxy</code> によって invoke() メソッドが呼び出された後は、インタセプタによって invoke() が再帰呼び出しされます。

すべてのインタセプタの呼び出しが完了した後アクションが呼び出されます。その後、Result の呼び出しが行われます。

<a href="http://hamasyou.com/images/Struts2/invoke.gif"><img src="http://hamasyou.com/images/Struts2/invoke.gif" width="500" alt="invoke()の再帰呼び出し" /></a>

Result の実装として、<code>ServletDispatcherResult</code> などがあります。Result は View の実装（ユーザへのレスポンス）に結び付けられています。

<h3>com.opensymphony.xwork2.interceptor.Interceptor</h3>

アクションの処理を実行する前や後に処理を追加します。

インターセプタはステートレスなクラスとして作成しなければなりません。

<h3>Action</h3>

<code>ActionInvocation</code> から呼び出されるアクションクラスです。

デフォルトでは、<code>ActionInvocation</code> から <code>execute</code> メソッドが呼び出されます。

<pre class="code"><code><span class="keyword">public</span> String execute() <span class="keyword">throws</span> Exception
</code></pre>

<h2 id="概要クラス図とシーケンス図">概要クラス図とシーケンス図</h2>

<a href="http://hamasyou.com/images/Struts2/action_class_diagram.gif"><img src="http://hamasyou.com/images/Struts2/action_class_diagram_mini.gif" alt="コマンドパターンのクラス図"  /></a>

<a href="http://hamasyou.com/images/Struts2/action_sequence.gif"><img src="http://hamasyou.com/images/Struts2/action_sequence_mini.gif" alt="アクション実行のシーケンス図" /></a>

Struts2 では、すべてのリクエストが <code><strong>org.apache.struts2.dispatcher.FilterDispatcher</strong></code> を通して処理されます。

<code>FilterDispatcher</code> はリクエストパスからどのアクションを呼び出すかを解決し、<code><strong>org.apache.struts2.dispatcher.Dispatcher</strong></code> の <code>serviceAction</code> を呼び出します。

<code>Dispatcher</code> は <code>serviceAction</code> の中で、<code>ActionProxyFactory</code> を使って <code><strong>ActionProxy</strong></code> を作成して

実際にアクションを実行するのは、<code>ActionInvocation</code> の役割になります。

<h2 id="Struts2 の主な機能">Struts2 の主な機能</h2>

<h3 id="コンフィグレーションファイルの指定">コンフィグレーションファイルの指定</h3>

web.xml の Filter の設定で init-param に <strong>config</strong> というパラメータを設定すると、Struts2 の設定ファイルを指定できます。

デフォルトは「struts-default.xml,struts-plugin.xml,struts.xml」になっています。このファイルは、クラスパス上から検索されます。

<pre class="code"><code><span class="tag">&lt;filter&gt;</span> 
  <span class="tag">&lt;filter-name&gt;</span>struts2<span class="tag">&lt;/filter-name&gt;</span> 
  <span class="tag">&lt;filter-class&gt;</span>org.apache.struts2.dispatcher.FilterDispatcher<span class="tag">&lt;/filter-class&gt;</span> 
  <span class="tag">&lt;init-param&gt;</span> 
    <span class="tag">&lt;param-name&gt;</span>config<span class="tag">&lt;/param-name&gt;</span> 
    <span class="tag">&lt;param-value&gt;</span> 
    struts-default.xml,struts.xml,my-struts.xml 
    <span class="tag">&lt;/param-value&gt;</span> 
  <span class="tag">&lt;/init-param&gt;</span> 
<span class="tag">&lt;/filter&gt;</span>
</code></pre>

<h3 id="Zero コンフィグレーション">Zero コンフィグレーション</h3>

web.xml の Filter の設定で init-param に <strong>actionPackages</strong> というパラメータを設定すると、Struts2 はこのパッケージにあるクラスで、com.opensymphony.xwork2.Action インターフェースを実装したクラスか、「Action」で終わるクラス名を持つクラスを自動で Action クラスとして認識してくれます。

「,」で区切ることで、複数パッケージ指定することもできます。

<pre class="code"><code><span class="tag">&lt;filter&gt;</span> 
  <span class="tag">&lt;filter-name&gt;</span>struts2<span class="tag">&lt;/filter-name&gt;</span> 
  <span class="tag">&lt;filter-class&gt;</span>org.apache.struts2.dispatcher.FilterDispatcher<span class="tag">&lt;/filter-class&gt;</span> 
  <span class="tag">&lt;init-param&gt;</span> 
    <span class="tag">&lt;param-name&gt;</span>actionPackages<span class="tag">&lt;/param-name&gt;</span> 
    <span class="tag">&lt;param-value&gt;</span> 
    com.hamasyou.struts2.webapp 
    <span class="tag">&lt;/param-value&gt;</span> 
  <span class="tag">&lt;/init-param&gt;</span> 
<span class="tag">&lt;/filter&gt;</span>
</code></pre>

上記のように設定した場合、

<img src="http://hamasyou.com/images/Struts2/zero_config.gif" alt="Zeroコンフィグレーション" />

「/usecase1/itemSearch.action」にアクセスすると「com.hamasyou.struts2.webapp.usecase1.ItemRegisterAction」が呼び出されます。

「/usecase2/admin/itemRegister.action」にアクセスすると「com.hamasyou.struts2.webapp.usecase2.admin.ItemRegisterAction」が呼び出されます。

また、「/usecase1/itemSearch!allSearch.action」のように「!メソッド名」でアクションを呼び出すと、指定されたメソッド名が呼び出されます。!メソッド名を指定しない場合は execute メソッドが呼び出されています。

Struts2 のアクションの呼び出しは「*.action」という形になります。（Struts1のときは *.do でした。）

<h3 id="カスタム設定読み込み">カスタム設定読み込み</h3>

Struts2 の起動時に、カスタムプロパティを読み込むことが出来る。

web.xml の init-param に <strong>configProviders</strong> というパラメータを設定すると、Struts2 はこのパラメータに指定されたクラスからカスタムプロパティの読み込みを行うようになります。

指定するクラスは、<strong>com.opensymphony.xwork2.config.ConfigurationProvider</strong> を実装する必要があります。

「,」で区切ることで、クラスを複数指定できます。

<pre class="code"><code><span class="tag">&lt;filter&gt;</span> 
  <span class="tag">&lt;filter-name&gt;</span>struts2<span class="tag">&lt;/filter-name&gt;</span> 
  <span class="tag">&lt;filter-class&gt;</span>org.apache.struts2.dispatcher.FilterDispatcher<span class="tag">&lt;/filter-class&gt;</span> 
  <span class="tag">&lt;init-param&gt;</span> 
    <span class="tag">&lt;param-name&gt;</span>configProviders<span class="tag">&lt;/param-name&gt;</span> 
    <span class="tag">&lt;param-value&gt;</span> 
    com.hamasyou.struts2.webapp.config.MyCustomeConfigurationProvider 
    <span class="tag">&lt;/param-value&gt;</span> 
  <span class="tag">&lt;/init-param&gt;</span> 
<span class="tag">&lt;/filter&gt;</span> 
</code></pre>

<h3 id="Dependency Injection">Dependency Injection</h3>

メソッドかフィールドに <strong>@Inject</strong> を指定することで、型によるインジェクションが行われます。

<section>

<h4>@Inject の例</h4>

<pre class="code"><code>@Inject 
<span class="keyword">private</span> MyObject myObject; 
 
<span class="keyword">private</span> MyObject2 myObject2; 
 
@Inject 
<span class="keyword">public</span> <span class="keyword">void</span> setMyObject2(MyObject2 myObject2) { 
  <span class="keyword">this</span>.myObject2 = myObject2; 
} 
 
<span class="keyword">public</span> String execute() <span class="keyword">throws</span> Exception { 
  System.out.println(<span class="literal">"myObject:"</span> + <span class="keyword">this</span>.myObject); 
  System.out.println(<span class="literal">"myObject2:"</span> + <span class="keyword">this</span>.myObject2); 
  <span class="keyword">return</span> <span class="literal">"success"</span>; 
}
</code></pre>

</section>

インジェクションするオブジェクトの設定は、struts.xml に記述します。

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> 
<span class="tag">&lt;!DOCTYPE struts PUBLIC 
  &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; 
  &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt;</span> 
 
<span class="tag">&lt;struts&gt;</span> 
  <span class="tag">&lt;bean <span class="attr">class=</span><span class="value">&quot;com.hamasyou.struts2.webapp.MyObject&quot;</span> /&gt;</span> 
  <span class="tag">&lt;bean <span class="attr">class=</span><span class="value">&quot;com.hamasyou.struts2.webapp.MyObject2&quot;</span> /&gt;</span>   
<span class="tag">&lt;/struts&gt;</span>
</code></pre>

<pre class="console">myObject:com.hamasyou.struts2.webapp.MyObject@135d18b
myObject2:com.hamasyou.struts2.webapp.MyObject2@50078e</pre>

<h3 id="インターセプタ">インターセプタ</h3>

アクションの呼び出しの前に、<code>ActionInvocation</code> によってインタセプタが呼び出されます。

struts-default.xml を見ると、デフォルトのインターセプタとして以下の設定がされているのがわかります。

<section>

<h4>struts-default.xml のインターセプタの設定</h4>

<pre class="code"><code><span class="tag">&lt;interceptors&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;alias&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.AliasInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;autowiring&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;chain&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.ChainingInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;conversionError&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.StrutsConversionErrorInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;cookie&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.CookieInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;createSession&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.CreateSessionInterceptor&quot;</span> /&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;debugging&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.debugging.DebuggingInterceptor&quot;</span> /&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;externalRef&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.ExternalReferencesInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;execAndWait&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.ExecuteAndWaitInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;exception&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;fileUpload&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.FileUploadInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;i18n&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.I18nInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;logger&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.LoggingInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;modelDriven&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;scopedModelDriven&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.ScopedModelDrivenInterceptor&quot;</span>/&gt;</span>
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;params&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.ParametersInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;prepare&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.PrepareInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;staticParams&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.StaticParametersInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;scope&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.ScopeInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;servletConfig&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.ServletConfigInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;sessionAutowiring&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.spring.interceptor.SessionContextAutowiringInterceptor&quot;</span>/&gt;</span>
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;timer&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.TimerInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;token&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.TokenInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;tokenSession&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.TokenSessionStoreInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;validation&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.validation.AnnotationValidationInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;workflow&quot;</span> <span class="attr">class=</span><span class="value">&quot;com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor&quot;</span>/&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;store&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.MessageStoreInterceptor&quot;</span> /&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;checkbox&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.CheckboxInterceptor&quot;</span> /&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;profiling&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.ProfilingActivationInterceptor&quot;</span> /&gt;</span> 
  <span class="tag">&lt;interceptor <span class="attr">name=</span><span class="value">&quot;roles&quot;</span> <span class="attr">class=</span><span class="value">&quot;org.apache.struts2.interceptor.RolesInterceptor&quot;</span> /&gt;</span>
</code></pre>

</h4>

インターセプタは、塊ごとに名前をつけて管理することが出来ます。それが、インターセプタスタックと呼ばれるものです。

struts-default.xml には、以下のような設定がされています。

<pre class="code"><code><span class="rem">&lt;!-- Basic stack --&gt;</span> 
<span class="tag">&lt;interceptor-stack <span class="attr">name=</span><span class="value">&quot;basicStack&quot;</span>&gt;</span> 
    <span class="tag">&lt;interceptor-ref <span class="attr">name=</span><span class="value">&quot;exception&quot;</span>/&gt;</span> 
    <span class="tag">&lt;interceptor-ref <span class="attr">name=</span><span class="value">&quot;servletConfig&quot;</span>/&gt;</span> 
    <span class="tag">&lt;interceptor-ref <span class="attr">name=</span><span class="value">&quot;prepare&quot;</span>/&gt;</span> 
    <span class="tag">&lt;interceptor-ref <span class="attr">name=</span><span class="value">&quot;checkbox&quot;</span>/&gt;</span> 
    <span class="tag">&lt;interceptor-ref <span class="attr">name=</span><span class="value">&quot;params&quot;</span>/&gt;</span> 
    <span class="tag">&lt;interceptor-ref <span class="attr">name=</span><span class="value">&quot;conversionError&quot;</span>/&gt;</span> 
<span class="tag">&lt;/interceptor-stack&gt;</span>
</code></pre>

アクションは、次のインターセプタスタックがデフォルトで適用されるようになっています。

<pre class="code"><code><span class="tag">&lt;default-interceptor-ref <span class="attr">name=</span><span class="value">&quot;defaultStack&quot;</span>/&gt;</span></code></pre>

struts-default.xml を見るとわかりますが、これらのインターセプタの設定はパッケージごとに行うようです。上記のインターセプタ、インターセプタスタックは、「<strong>struts-default</strong>」というパッケージに定義されています。

自分たちのアクションを struts.xml に登録した際のパッケージは、struts-default を継承する必要がありそうです。

<section>

<h4>struts.xml の例</h4>

<pre class="code"><code><span class="tag">&lt;package <span class="attr">name=</span><span class="value">&quot;mypackage&quot;</span> <span class="attr">namespace=</span><span class="value">&quot;/mypackage&quot;</span> <span class="attr">extends=</span><span class="value">&quot;struts-default&quot;</span>&gt;</span> 
     
    <span class="tag">&lt;action  
      <span class="attr">name=</span><span class="value">&quot;itemSearch&quot;</span>  
      <span class="attr">class=</span><span class="value">&quot;com.hamasyou.struts2.webapp.usecase1.ItemSearchAction&quot;</span>&gt;</span> 
      <span class="tag">&lt;result <span class="attr">name=</span><span class="value">&quot;success&quot;</span>&gt;</span>/WEB-INF/jsp/top/top.jsp<span class="tag">&lt;/result&gt;</span> 
      <span class="tag">&lt;interceptor-ref <span class="attr">name=</span><span class="value">&quot;debugging&quot;</span> /&gt;</span> 
    <span class="tag">&lt;/action&gt;</span> 
     
    <span class="tag">&lt;action  
      <span class="attr">name=</span><span class="value">&quot;itemRegister&quot;</span>  
      <span class="attr">class=</span><span class="value">&quot;com.hamasyou.struts2.webapp.usecase2.admin.ItemRegisterAction&quot;</span>&gt;</span> 
      <span class="tag">&lt;result <span class="attr">name=</span><span class="value">&quot;success&quot;</span>&gt;</span>/WEB-INF/jsp/top/top.jsp<span class="tag">&lt;/result&gt;</span> 
      <span class="tag">&lt;interceptor-ref <span class="attr">name=</span><span class="value">&quot;executeAndWaitStack&quot;</span> /&gt;</span> 
    <span class="tag">&lt;/action&gt;</span>     
         
  <span class="tag">&lt;/package&gt;</span>
</code></pre>

</section>

ここでは、インターセプタを指定しているので、デフォルトのインターセプタ（defaultStack）は使われません。

<h3 id="アクションの作成">アクションの作成</h3>

Struts2 のアクションクラスは POJO で作成することができます。デフォルトでは、execute メソッドを持つクラスを作成すればアクションとして実行することができます。

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">class</span> MyAction { 
  <span class="keyword">public</span> String execute() <span class="keyword">throws</span> Exception { 
    <span class="keyword">return</span> <span class="literal">"success"</span>; 
  } 
}
</code></pre>

アクションの呼び出しは、通常、「struts.xml に記述した &lt;action&gt; の名前 + &quot;.action&quot;」ですが、「struts.xml に記述した &lg;action&gt; の名前 + &quot;!メソッド名.action&quot;」とすることで、execute 以外のメソッドを呼び出すことができます。

また、struts.xml の &lt;action&gt; の設定で、method プロパティを設定することで、execute 以外のメソッドを呼び出すこともできます。

<pre class="code"><code><span class="tag">&lt;action  
    <span class="attr">name=</span><span class="value">&quot;itemRegister&quot;</span>  
    <span class="attr">method=</span><span class="value">&quot;hoge&quot;</span> 
    <span class="attr">class=</span><span class="value">&quot;com.hamasyou.struts2.webapp.usecase2.admin.ItemRegisterAction&quot;</span>&gt;</span> 
    <span class="tag">&lt;result <span class="attr">name=</span><span class="value">&quot;success&quot;</span>&gt;</span>/WEB-INF/jsp/top/top.jsp<span class="tag">&lt;/result&gt;</span> 
<span class="tag">&lt;/action&gt;</span>
</code></pre>

<dl>
<dt class="info">Zero コンフィグレーション</dt>
<dd>クラス名を「Action」で終わる名前にしておくことで、Zero コンフィグレーションを利用して、無設定で Action クラスとして実行することができます。</dd> 
</dl>

<h3 id="Result について">Result について</h3>

以下、後で書く
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="Struts2 おぼえがき">
-----
KEYWORDS:
Struts2, おぼえがき, XWork
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: RESTful Webサービス
BASENAME: restful_webサービス
STATUS: Publish
ALLOW COMMENTS: 0
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 12/28/2007 02:04:15 AM
TAGS: REST,Webサービス,定番
-----
BODY:
<strong>REST</strong> とは リソースの状態を表す「何か」を転送するということを表した、Webアーキテクチャスタイルです。REST はアーキテクチャではなく、アーキテクチャのスタイルであり、実際に REST スタイルのアーキテクチャとして、ROA（リソース指向アーキテクチャ）などがあります。

本書は、この REST と ROA に関して解説されたもので、RESTful なシステム（REST スタイルに則ったシステム）の設計方針、ROA の考え方などが解説されています。

Web アプリケーション開発をこれまでしてきた中で、RESTful や ROA な考えでシステムを設計したことがない人には、新しい発見があり、とてもわくわくして読むことが出来ます。

本書は、特に、Web アプリケーションの設計者、アーキテクトの方が読むと良いと思います。最近話題の REST の詳細を理解したい人、RESTful システムを構築したい人、ROA の考え方を取り入れたい人に本書はお勧めです。

オライリーっぽいちょっとお堅い文章ですが、楽しく読めると思います。『<a href="http://www.amazon.co.jp/gp/product/4774133310?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774133310" target="_blank" class="extlink">WEB+DB PRESS vol.42</a>』の現場で使える REST の記事を読んで、REST とは何か？ ROA とは何か？の概要を抑えてから読むと、理解が早いと思います。

お勧めです。

<h4>参考</h4>

<a href="http://yohei-y.blogspot.com/2005/04/rest_23.html" target="_blank" class="extlink">yohei-y:weblog</a>
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<h3>RESTとは</h3>

REST とは、リソースの状態を表した「何か」を転送するということを表した、Web アーキテクチャスタイルです。REST は Representational State Transfer の略で「表現可能な状態」を「転送する」という意味を表しています。

<blockquote>

たとえば、商品在庫一覧.htmlというファイルがあるとします。これは商品という「リソース」が在庫であるという「状態」を、HTML形式で「表現」していると見なせます。このHTMLファイルをサーバからブラウザに「転送」するから、「表現可能な状態」を「転送」している、つまり Representational State Transfer なのです。

<cite>『<a href="http://www.amazon.co.jp/gp/product/4774133310?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774133310" target="_blank" class="extlink">WEB+DB PRESS vol.42 RESTとはなにか</a>』</cite>

</blockquote>

REST はアーキテクチャのスタイルであり、REST というアーキテクチャがあるわけではありません。REST スタイルのアーキテクチャの一つに、ROA（Resource Oriented Architecture:リソース指向アーキテクチャ）というものがあります。

<h3>ROA（リソース指向アーキテクチャ）とは</h3>

ROA とは、リソースを主体として考えていくアーキテクチャのことです。

<h4>リソースとは</h4>

ROA におけるリソースとは、参照（認識）するに値する重要性を持つものとして定義されています。

<blockquote>

「それに対してハイパーテキストリンクを作成する、それに対して意見または反論する、その表現を取得またはキャッシュする、あるいはその他の操作を実行する」ことがある場合は、それをリソースにすべきである。

<cite>『本書 P.85 リソースとは何か』</cite>

</blockquote>

<h4>URI</h4>

リソースがリソースであるための条件として、リソースは少なくとも一つの URI を持っていることがあげられます。

<dl>
<dt class="tips">Tips</dt>
<dd><p>URL と URI の違いですが、現在では同じ意味で使われているようです。URL（Uniform Resource Locator）は、インターネット上の情報資源を指し示すもので、ホスト名、ポート名、フォルダ名、ファイル名などが含まれています。しかし、同じ情報資源であっても、ホスト名が変更になると URL は変化してしまうという問題があったため、ホスト名とか場所とか変わっても同じものを指し示すものが必要ということで URN（Uniform Resource Name）というものが定義されました。これら URL と URN をあわせたものが URI と呼ばれるものです。なお、URI（Uniform Resource Identifier）もインターネット上の情報資源を指し示すもので、包括的な概念として定義されています。URI の具体的な仕様が URL に当たります。</p></dd>
</dl>

<blockquote>

URI は構造的でなければならない。それらの構造は予測可能な方法で区別されなければならない。&lt;中略&gt; これは REST な絶対的なルールではない。厳密には、URI が構造的である、あるいは予測可能である必要はないが、筆者はそうあるべきだと思っている。

<cite>『本書 P.87 URI は記述的であるべき』</cite>

</blockquote>

<h3>ROA の特徴</h3>

ROA には次の特徴があります。

<ul>
<li><a href="#アドレス可能性">アドレス可能性</a></li>
<li><a href="#ステートレス性">ステートレス性</a></li>
<li><a href="#接続性">接続性</a></li>
<li><a href="#統一インターフェース">統一インターフェース</a></li>
</ul>

<h4><a id="アドレス可能性" name="アドレス可能性">アドレス可能性</a></h4>

公開されているリソースは、URI を通じてアクセスすることができます。このとき、この URI を本に掲載することが出来るのであればそれはアドレス可能であるといえます。

たとえば Ajax アプリケーションやGmailなどは、同一の URL （ブラウザのアドレス）から変化せずにアプリケーションの各機能を実行することが出来ます。これらは、アドレス可能ではない例になります。

<blockquote>

HTTPがアドレス可能ではなかったら、あるいはGoogle検索がアドレス可能なWebアプリケーションではなかったら、そのURIを本に掲載することは出来ない。「google.com への Web 接続を開き、検索ボックスに「jellyfish」と入力し、[Google 検索]ボタンをクリックする」と指示しなければならないだろう。

<cite>『本書 P.89 アドレス可能性』</cite>

</blockquote>

<h4><a id="ステートレス性" name="ステートレス性">ステートレス性</a></h4>

すべての HTTP リクエストが完全に分離していることです。サーバの処理が以前の HTTP リクエストに依存せずに実行できるような場合、ステートレス性が保たれているといえます。

<blockquote>

ステートレス性は、サーバーが<strong>取り得る状態</strong>もリソースであり、独自のURIが割り当てられるべきであることを意味する。

<cite>『本書 P.91 ステートレス性』</cite>

</blockquote>

これはつまり、URI によってサーバの状態が判断できるようにするべきだということです。特定のリクエストを送るために、あらかじめ別のリクエストを送って、サーバ側の状態を変更しておく必要がないような設計でなければならないということになります。

ステート（状態）には二種類あり、一つはクライアント側で維持される<strong>アプリケーション状態</strong>と呼ばれる状態で、もう一つは、サーバ上で維持される<strong>リソース状態</strong>です。

アプリケーション状態とは、アプリケーションのユーザが今どのような状況にいるのか（ログインしているのか？検索結果の3ページ目を表示しているのか？）というものを表したものです。リソース状態とは、各ユーザがどのような状況にいても変わらない情報のことで、これらはサーバ側に格納します。

サーバは、クライアントからアプリケーション状態を受け取ると、受け取ったリクエスト情報を元にアプリケーションの状態を復帰します。以前のリクエスト状態を覚えておくというようなことはしません。

ただし、クライアントから受け取ったリクエストだけを信頼すると嘘の情報を渡される可能性があります。そのため、セッションの仕組みを使い、（仕方なく）サーバ側にユーザ情報を保持しておくという実装が現在では行われています。

繰り返しますが、アプリケーションに関する状態情報はクライアント側で保持し、サーバにはリソースの情報しか保持しないというのがステートレス性の特徴になります。

<blockquote>

HTTPセッションの現在の状態はリソース状態としてサーバーに格納されないが、アプリケーション状態としてクライアントによって追跡され、クライアントがWebでたどるパスから作成される。サーバーは、ハイパーメディア（ハイパーテキスト表現内のリンクとフォーム）を提供することにより、クライアントのパスを導く。

<cite>『本書 P.100 リンクと接続性』</cite>

</blockquote>

<h4><a id="接続性" name="接続性">接続性</a></h4>

ステートレス性のところの最後の引用に記述されている、「サーバーは、ハイパーメディア（ハイパーテキスト表現内のリンクとフォーム）を提供することにより、クライアントのパスを導く。」これが、接続性というものです。

ユーザがすべての URI を知っている必要はなく、この接続性（ハイパーリンク）によって、次のリソースや次のサーバ状態に移行できることが重要です。

<blockquote>

そう、次はこっちの状態かこっちの常態化どちらかがありますよというサーバの提案がアプリケーションを構成しているので、リンクっていうのはすごい重要なんです。

ただ、現状の Web API とか Web サービスではなかなかリンクは出てこないですね。XML を返してくれても、その XML の中に URL が入っていないので、接続されているとは言いがたいサービスが多いんですが、本当は HTML でみんながすでにやっていること、Web UI でやっていることなので、それをそのまま API でもやると、実はさらに良いシステムを作っていけるんじゃないのかなと思います。

<cite>『<a href="http://www.amazon.co.jp/gp/product/4774133310?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774133310" target="_blank" class="extlink">WEB+DB PRESS vol.42 RESTfulなサービスとアプリケーション作成の心得</a>』</cite>

</blockquote>

<h4><a id="統一インターフェース" name="統一インターフェース">統一インターフェース</a></h4>

Web サービスを使う場合、起動するメソッド名の情報をリクエストに含めたりします。しかしこの方法では、利用する Web サービスごとに呼び出すメソッドが違ってしまい、Web 全体を考えた際にリソースに対する処理インターフェースが統一できません。（もちろん、命名規約で縛ることも可能ですが。。。）

そこで、ROA では、Web 全体でリソースに対する操作を行うインターフェースを統一しようというスタイルが提案されました。

ここで提案された統一インターフェースが HTTP のメソッド（GET、PUT、POST、DELETE）になります。

<dl>
<dt>GET</dt>
<dd>リソースを取得するメソッドです。GET メソッドはサーバの状態を変更しない用途で使用します。（厳密には副作用があってもよいとされています。たとえば、GET アクセスごとにインクリメントされるカウンタなどは、GET による副作用がありますが、クライアントに責任はなく、甚大な被害があるわけではないので問題ないとされています。）</dd>
<dt>PUT</dt>
<dd>主に、リソースの状態を変更する際に使うメソッドです。リソースの新規作成にも使われることがあります。PUTはべき等性を持ちます。

<dl>
<dt class="info">Information</dt>
<dd>べき等性とは、何度同じリクエストを繰り返し実行しても同じ結果であることを意味する数学用語です。</dd>
</dl> 
</dd>
<dt>POST</dt>
<dd>リソースの新規作成の際に使うメソッドです。多くの Web アプリケーションでは、GET と POSTのみが有効なメソッドとして処理されています。GETはリソースの取得、POSTは新規作成、更新、削除など汎用的な処理として使われることが多くあります。ROA 的には POST はリソースの新規作成でのみ使うことがよいとされています。

<dl>
<dt class="info">Information</dt>
<dd>とはいえ、現在のHTMLフォームでは、GET と POST しかサポートされていないため、このような現状は仕方ないといえるかと思います。POST に新規作成以外の意味を持たせて使うことを、<strong>オーバーロードPOST</strong>と呼びます。</dd>
</dl> 

PUT でも POST でもリソースを新規作成することができますが、PUT と POST には次のような違いがあります。

<dl>
<dt>PUT でリソースを新規作成する場合</dt>
<dd>クライアントが指定した URI のリソースが新規作成される </dd>
<dt>POST でリソースを新規作成する場合 </dt>
<dd>クライアントが指定する URI はリソースを新規作成するリソースの URI。新規作成されたリソースの URI はサーバが決定する</dd>
</dl>
</dd>
<dt>DELETE</dt>
<dd>リソースの削除を行う際に使うメソッドです。DELETEもべき等性を持ちます。</dd>
</dl>

<strong>ここからは後で書く</strong>
-----
EXCERPT:
<img src="http://ec2.images-amazon.com/images/I/51ojIhXBP3L._AA240_.jpg" border="0" alt="RESTful Webサービス" />
-----
KEYWORDS:
RESTful,Webサービス,REST,ROA,リソース指向アーキテクチャ,978-4-87311-353-1
-----


PING:
TITLE: 認証が必要な API を REST っぽく作るときのメモ
URL: http://hamasyou.com/blog/archives/000392
IP: 210.172.144.214
BLOG NAME: それはBlog
DATE: 11/18/2010 10:46:06 PM
REST で Web サービスを構築する場合に、いつも認証が必要なリソースの URI の設計で悩むので、今までの経験上こうしたら上手くいったというのをメモ...
-----

-----
CF50_CF_4: Leonard Richardson (著), Sam Ruby (著), 山本 陽平 (監修), 株式会社クイープ (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51ojIhXBP3L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4873113539?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4873113539
CF50_CF: オライリー・ジャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 技術メモ
BASENAME: post_34
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/19/2008 11:59:03 AM
-----
BODY:
技術メモ用のエントリ

<a href="http://hamasyou.com/archives/000247">技術者の宝石箱</a>の続きエントリ
-----
EXTENDED BODY:
<h2>インデックス</h2>

<ul>
<li><a href="#DOM で複数選択可能なリストボックスを作成する（IE）">DOM で複数選択可能なリストボックスを作成する（IE）</a> 2007/4/28追加</li>
<li><a href="#要求と要件の違い">要求と要件の違い</a> 2007/5/22追加</li>
<li><a href="#Maven2のpom.xmlのXMLスキーマ">Maven2のpom.xmlのXMLスキーマ</a> 2007/10/23追加</li>
<li><a href="#Excelでファイルの最終更新日を取得する">Excelでファイルの最終更新日を取得する</a> 2007/10/24追加</li>
<li><a href="#Ruby on Rails2.0で、NoMethodError in AdminController#index">Ruby on Rails2.0で、NoMethodError in AdminController#index</a> 2007/12/30追加</li>
<li><a href="#WebLogicでAPP-INFを使って共通Jarを配置するときは、ClassLoaderに注意する">WebLogicでAPP-INFを使って共通Jarを配置するときは、ClassLoaderに注意する</a> 2008/5/27追加</li>
<li><a href="#WebLogicが発行するSession Cookieのパスはデフォルトで/（スラッシュ）">WebLogicが発行するSession Cookieのパスはデフォルトで / （スラッシュ）</a> 2008/6/19追加</li>
<li><a href="#FFFTPでシンボリックリンクを削除する方法">FFFTPでシンボリックリンクを削除する方法</a> 2008/6/24追加</li>
<li><a href="#Railsをやってて気になったこと">Railsをやってて気になったこと</a> 2008/7/24追加</li>
<li><a href="#Commons HttpClient のマルチパートで日本語ファイル名が文字化けする">Commons HttpClient のマルチパートで日本語ファイル名が文字化けする</a> 2008/8/14追加</li>
<li><a href="#JBoss Seamでログイン後にセッションIDを変更する">JBoss Seamでログイン後にセッションIDを変更する</a> 2008/11/20追加</li>
</ul>

<h2>一覧</h2>

<h3 id="DOM で複数選択可能なリストボックスを作成する（IE）">DOM で複数選択可能なリストボックスを作成する（IE）</h3>

Internet Explorer（IE）で DOM を使って複数選択可能なリストボックスを作成する方法です。

<pre class="code"><code><span class="keyword">var</span> select = <span class="keyword">null</span>;
<span class="keyword">if</span> (navigator.appName.match(/Internet Explorer/)) {
    select = document.createElement(<span class="str">&quot;&lt;select multiple&gt;&quot;</span>);
} <span class="keyword">else</span> {
    select = document.createElement(<span class="str">&quot;select&quot;</span>);
    select.multiple = <span class="keyword">true</span>;
}
</code></pre>

<h3 id="要求と要件の違い">要求と要件の違い</h3>

<dl><dt>要求</dt>
<dd>お客さんのこんなことをしたい、こんなことができるといいなという望み</dd>
<dt>要件</dt>
<dd>要求をシステム化「する」と決めたもの</dd>
</dl>

お客さんは、自分がどんなことをしたいのかとか、どんなものが欲しいのかということをうまく説明できないことが多い。だから、要求は「開発する」（掘り起こす）もの。

うまく要求が掘り起こせたら、今度はシステム開発者がじゃあどういう仕様でどういうシステムを作ろうかと考える。だから、要件は「定義する」もの。

<h3 id="Maven2のpom.xmlのXMLスキーマ">Maven2のpom.xmlのXMLスキーマ</h3>

Maven2 の pom.xml の XMLスキーマおぼえがき

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> 
<span class="tag">&lt;project <span class="attr">xmlns=</span><span class="value">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>  
         <span class="attr">xmlns:xsi=</span><span class="value">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  
         <span class="attr">xsi:schemaLocation=</span><span class="value">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span> 
<span class="tag">&lt;/project&gt;</span>
</code></pre>

<h3 id="Excelでファイルの最終更新日を取得する">Excelでファイルの最終更新日を取得する</h3>

Excel でファイルの最終更新日を自動で再計算する方法。

<h4>参考</h4>

<a href="http://www.relief.jp/itnote/archives/000271.php" target="_blank" class="extlink">インストラクターのネタ帳：ファイルの最終更新日時を取得したい−ユーザー定義関数</a>

<h3 id="Ruby on Rails2.0で、NoMethodError in AdminController#index">Ruby on Rails2.0で、NoMethodError in AdminController#index</h3>

書籍『<a href="http://www.amazon.co.jp/gp/product/4274066401?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4274066401" target="_blank" class="extlink">RailsによるアジャイルWebアプリケーション開発</a>』を Rails2.0 で作業していくと、<strong>scaffold :product</strong> のところで次のようなエラーが発生する。

<pre>NoMethodError in AdminController#index
undefined method `scaffold' for AdminController:Class</pre>

これは、Rails2.0 からは各種ライブラリ類がプラグインとして切り出されたためだそうだ。ということで、必要なプラグインを入れるとよい。

まずは、scaffolding プラグインから。

<pre class="console">\workspace\depot><kbd>ruby script/plugin install scaffolding</kbd>
+ ./MIT-LICENSE
+ ./README
+ ./Rakefile
+ ./init.rb
+ ./lib/scaffolding.rb
+ ./lib/templates/edit.erb
+ ./lib/templates/layout.erb
+ ./lib/templates/list.erb
+ ./lib/templates/new.erb
+ ./lib/templates/show.erb
+ ./test/scaffolding_test.rb
</pre>

つぎに、paginate というプラグインを入れなければならない。scaffold だけ入れた状態だと次のようなエラーが発生する。

<pre>NoMethodError (undefined method `paginate' for #<EntriesController:0x4829610>):</pre>

ということで、paginate プラグインをインストールする。

<pre class="console">\workspace\depot><kbd>ruby script/plugin install http://tools.assembla.com/svn/breakout/breakout/vendor/plugins/classic_pagination/</kbd>
+ ./CHANGELOG
+ ./README
+ ./Rakefile
+ ./init.rb
+ ./install.rb
+ ./lib/pagination.rb
+ ./lib/pagination_helper.rb
+ ./test/fixtures/companies.yml
+ ./test/fixtures/company.rb
+ ./test/fixtures/developer.rb
+ ./test/fixtures/developers.yml
+ ./test/fixtures/developers_projects.yml
+ ./test/fixtures/project.rb
+ ./test/fixtures/projects.yml
+ ./test/fixtures/replies.yml
+ ./test/fixtures/reply.rb
+ ./test/fixtures/schema.sql
+ ./test/fixtures/topic.rb
+ ./test/fixtures/topics.yml
+ ./test/helper.rb
+ ./test/pagination_helper_test.rb
+ ./test/pagination_test.rb
 
 
Pagination
==========
 
To install:
 
  script/plugin install svn://errtheblog.com/svn/plugins/classic_pagination
 
This code was extracted from Rails trunk after the release 1.2.3.
WARNING: this code is dead. It is unmaintained, untested and full of cruft.
 
There is a much better pagination plugin called will_paginate.
Install it like this and glance through the README:
 
  script/plugin install svn://errtheblog.com/svn/plugins/will_paginate
 
It doesn't have the same API, but is in fact much nicer. You can
have both plugins installed until you change your controller/view code that
handles pagination. Then, simply uninstall classic_pagination.
</pre>

インストールすると、will_paginate を使ったほうが良いという警告がでる。なので、will_paginate も一緒にいれる。

<pre class="console">\workspace\depot><kbd>ruby script/plugin install http://tools.assembla.com/svn/breakout/breakout/vendor/plugins/will_paginate/</kbd>
+ ./README
+ ./Rakefile
+ ./init.rb
+ ./lib/will_paginate/collection.rb
+ ./lib/will_paginate/finder.rb
+ ./lib/will_paginate/view_helpers.rb
+ ./test/boot.rb
+ ./test/console
+ ./test/finder_test.rb
+ ./test/fixtures/admin.rb
+ ./test/fixtures/companies.yml
+ ./test/fixtures/company.rb
+ ./test/fixtures/developer.rb
+ ./test/fixtures/developers_projects.yml
+ ./test/fixtures/project.rb
+ ./test/fixtures/projects.yml
+ ./test/fixtures/replies.yml
+ ./test/fixtures/reply.rb
+ ./test/fixtures/schema.sql
+ ./test/fixtures/topic.rb
+ ./test/fixtures/topics.yml
+ ./test/fixtures/user.rb
+ ./test/fixtures/users.yml
+ ./test/helper.rb
+ ./test/lib/activerecord_test_connector.rb
+ ./test/lib/load_fixtures.rb
+ ./test/pagination_test.rb
</pre>

これで、正常に動くようになる。

<h3 id="WebLogicでAPP-INFを使って共通Jarを配置するときは、ClassLoaderに注意する">WebLogicでAPP-INFを使って共通Jarを配置するときは、ClassLoaderに注意する</h3>

WebLogic8.1 から EAR 直下の APP-INF/lib、APP-INF/classes に各モジュール（WAR）から利用される共通ライブラリ（JAR）やクラスを配置できます。これは WebLogic の独自仕様のようですが。

このとき、APP-INF 以下に置いたライブラリやクラスは各モジュール（WAR）とは別のクラスローダでロードされます。

<section>
<h4>参考</h4>

<a href="http://www-06.ibm.com/jp/software/websphere/developer/j2ee/strategy/" target="_blnak" class="extlink">IBM: クラスローダーとJ2EEパッケージング戦略を理解する</a>

</section>

<pre>EAR ルート
├ APP-INF　　　　← EAR クラスローダ（親）
│  ├ classes
│　└ lib
├ WAR1　　　　　 ← WAR1 クラスローダ（子）
│　└ WEB-INF
└ WAR2　　　　　 ← WAR2 クラスローダ（子）
└ WEB-INF
</pre>

親のクラスローダで読み込んだクラスは子のクラスローダからは見つけることができますが、子で読み込んだクラスは親のクラスローダからは見つけることができません。

EAR クラスローダで読み込まれたクラスは各モジュールで共有されるため、static 領域のインスタンスや値も共有されます。

また、親と子のどちらで見つけたクラスを先に読み込むかによってシングルトンクラスの動作に影響が出たりすることがあります。

<h4>参考</h4>

<a href="http://www-06.ibm.com/jp/software/websphere/developer/j2ee/strategy/2.html" target="_blank" class="extlink">IBM: クラスローダーを理解する - シングルトンがシングルトンでなくなる日</a>

<h3 id="WebLogicが発行するSession Cookieのパスはデフォルトで/（スラッシュ）">WebLogicが発行するSession Cookieのパスはデフォルトで / （スラッシュ）</h3>

WebLogic のデフォルト設定でのセッション Cookieのルールは以下の通り。

<table>
<tr><th>要素名</th><th>デフォルト値</th><th>説明</th></tr>
<tr><th>cookie-name</th><td>JSESSIONID</td><td>セッションIDの長さは52文字</td></tr>
<tr><th>cookie-path</th><td>null</td><td>デフォルトは / (スラッシュ)<a href="#※1">※1</a>。デフォルト値では、ブラウザは、<em>WebLogic Server で指定されているすべての URL にクッキーを送信する</em>。</td></tr>
<tr><th>cookie-domain</th><td>null</td><td>デフォルトは、クッキーを発行した<em>サーバのドメイン</em><a href="#※2">※2</a></td></tr>
<tr><th>cookie-secure</th><td>false</td><td>Cookie を https 接続のときのみブラウザから送り出すか。</td></tr>
<tr><th>cookie-max-age-secs</th><td>-1</td><td>無期限。ブラウザを閉じると削除される。</td></tr>
<tr><th>timeout-secs</th><td>3600</td><td>セッションタイムアウト時間。デフォルトで3600秒。</td></tr>
</table>

同一ホスト名でいくつものアプリケーションを管理している場合、WebLogic はデフォルトで、cookie-path を / にしてしまうため、セッションCookieの上書き（セッションIDの上書き）がされることがあります。きちんと path 属性をコンテキストパス、domain 属性を ホスト名に設定しましょう。はまりそうなので注意！

<section>

<h4>参考</h4>

<a href="http://edocs.beasys.co.jp/e-docs/wls/docs92/webapp/weblogic_xml.html#wp1071982" target="_blank" class="extlink">BEA：weblogic.xml デプロイメント記述子の要素</a>

</section>

<a name="※1"></a>
※1 Cookieパスは /（スラッシュ）：Cookie の仕様では、Cookie を送出するリクエストヘッダに含まれている要求したドキュメントのパスと同じになります。
<a name="※2"></a>
※2 サーバのドメイン：ホスト名ではないことに注意。Cookie の仕様では、domain を指定しない場合はサーバのホスト名になります。

<h3 id="FFFTPでシンボリックリンクを削除する方法">FFFTPでシンボリックリンクを削除する方法</h3>

FFFTP でシンボリックリンクを削除する方法。

<pre>[コマンド(C)] -> [任意のコマンド(C)...]</pre>

を選択して、

<pre>DELE ファイル名</pre>

でOK。シンボリックリンクをプログラムから作っちゃったけど、削除できない〜ってなったのでメモ。サーバアカウントが発行されていて、コンソールにつなげる場合は、コマンドラインから削除すればOK。ロリポップは、FTP しかあいてなかったのであせった。

<h3 id="Railsをやってて気になったこと">Railsをやってて気になったこと</h3>

<h4>Rest ちっくな URL で更新画面みたいなのの定義の仕方</h4>

/comment/new/preview 見たいな感じで定義する。

<pre class="code"><code>routes.rb map.resources :comment, :new =&gt; {:preview =&gt; :post}
</code></pre>

<h4>Rest ちっくなアプリで Ajax によるサーバサイドバリデーションするURL</h4>

/comment/new/validate 見たいな感じでいいのかな。

<pre class="code"><code>routes.rb map.resources :comment, :new =&gt; {:validate =&gt; :post}
</code></pre>

<h4>確認画面を挟む登録で、ファイルアップロードがある場合</h4>

attachement_fu を使ってうまくやる方法がわからなかったので、仕方ないから自分で一時ファイルの仕組みを作った。

※ そのうち追加するかも

<h3 id="Commons HttpClient のマルチパートで日本語ファイル名が文字化けする">Commons HttpClient のマルチパートで日本語ファイル名が文字化けする</h3>

Commons HttpClient を使って、日本語ファイル名のファイルをマルチパートでアップロードすると、ファイル名が文字化けします。
これ、ソースを追っていくと驚愕の事実が・・・。

<section>

<h4>org.apache.commons.httpclient.methods.multipart.FilePart#sendDispositionHeader</h4>

<pre class="code"><code><span class="rem">/**
 * Write the disposition header to the output stream
 * @param out The output stream
 * @throws IOException If an IO problem occurs
 * @see Part#sendDispositionHeader(OutputStream)
 */</span>
<span class="keyword">protected</span> <span class="keyword">void</span> sendDispositionHeader(OutputStream out) 
    <span class="keyword">throws</span> IOException {
  LOG.trace(<span class="str">&quot;enter sendDispositionHeader(OutputStream out)&quot;</span>);
  <span class="keyword">super</span>.sendDispositionHeader(out);
  String filename = <span class="keyword">this</span>.source.getFileName();
  <span class="keyword">if</span> (filename != null) {
    out.write(FILE_NAME_BYTES);
    out.write(QUOTE_BYTES);
    out.write(EncodingUtil.getAsciiBytes(filename));
    out.write(QUOTE_BYTES);
  }
}
</code></pre>

</section>

ファイル名のエンコーディングを ASCII でやってる・・・。 Orz...

日本語ファイル名の文字化けを回避する方法ですが、私は FilePart を継承して sendDispositionHeader をオーバーライドして、Encoding を自分で指定できるようにしました。他にも、URLEncoding して、サーバ側で Decode するという方法もあります。

<h4>参考</h4>

<a href="http://d.hatena.ne.jp/w650/20080324/p1" target="_blank" class="extlink">HttpClientでの日本語ファイルのアップロード</a>

<h3 id="JBoss Seamでログイン後にセッションIDを変更する">JBoss Seamでログイン後にセッションIDを変更する</h3>

JBoss で<code>Session#invalidate()</code> した後に、<code>HttpServletRequest#getSession(true)</code> しても、セッションIDが新しくならい問題の解決方法。

JBoss サーバの $JBOSS_SERVER/deploy/jboss-web.deployer/server.xml の emptySessionPath 箇所を false に変更する。

<pre class="code"><code><span class="tag">&lt;Connector <span class="attr">port=</span><span class="value">&quot;8080&quot;</span> <span class="attr">address=</span><span class="value">&quot;${jboss.bind.address}&quot;</span>    
         <span class="attr">maxThreads=</span><span class="value">&quot;250&quot;</span> <span class="attr">maxHttpHeaderSize=</span><span class="value">&quot;8192&quot;</span>
         <span class="attr">emptySessionPath=</span><span class="value">&quot;false&quot;</span> <span class="attr">protocol=</span><span class="value">&quot;HTTP/1.1&quot;</span>
         <span class="attr">enableLookups=</span><span class="value">&quot;false&quot;</span> <span class="attr">redirectPort=</span><span class="value">&quot;8443&quot;</span> <span class="attr">acceptCount=</span><span class="value">&quot;100&quot;</span>
         <span class="attr">connectionTimeout=</span><span class="value">&quot;20000&quot;</span> <span class="attr">disableUploadTimeout=</span><span class="value">&quot;true&quot;</span> /&gt;</span>
</code></pre>

emptySessionPath は、セッションCookie のパスを &amp;/&amp; にする設定のようで、ポータルなどの別コンテキスト間でセッションを継続したい場合などに使う設定のようです。これが false でないと、JBoss で <code>Session#invalidate</code> しても、セッションIDが新しくならないっぽいです。

この値を設定したところ、JBoss Seam で <code>Seam#invalidateSession</code> を呼び出した後、新しくセッションIDが発行されるようになりました。

ということで、JBoss Seamのログイン後処理（PostLoginEvent）で一度セッションを新しくすると良いかもです。<em>ただし、セッションを新しくした後、ログイン状態を保持する方法がわかりません。。。</em>中身入れ替えるとかすればいいのかもですが、<code>Seam#invalidateSession</code> は、Seam の処理を抜けるときにセッションを破棄するので、その場では新しいセッションIDがとれません＞＜；
やり方、確認中です。誰かわかる人教えてください。。
-----
EXCERPT:
<img src="http://hamasyou.com/images/soul.gif" border="0" alt="技術メモ">
-----
KEYWORDS:
技術,メモ
-----

COMMENT:
AUTHOR: kjirou
EMAIL: 
IP: 221.112.108.194
URL: 
DATE: 05/18/2007 02:30:46 PM
この記事でとても助かりました！
ありがとうございます。

にしてもIEは・・・。
-----


PING:
TITLE: taking effexor during pregnancy
URL: http://generic-online-pharmacy.org/products/effexor-xr.htm
IP: 94.75.209.148
BLOG NAME: taking effexor during pregnancy
DATE: 10/11/2010 08:58:59 AM
effexor xr fatigue. taking effexor during pregnancy. effexor xr fatigue. taki...
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: ドメイン駆動
BASENAME: ドメイン駆動
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 06/29/2008 10:46:22 PM
TAGS: これは読むべき,ドメイン駆動,定番,良書
-----
BODY:
本書は、<strong>ドメイン駆動設計（DDD:Domain Driven Design）</strong>について書かれているで、<strong>ドメインモデル</strong>、エンタープライズアプリケーションアーキテクチャ、アーキテクチャパターン、テスト駆動開発を勉強する本です。

この本のお勧めの点の一つが、筆者の経験をもとにした生きたサンプルにあります。「システム開発は○○の理由でドメイン駆動設計を行ったほうがよい。こういう背景があって、こういうアーキテクチャパターンの適用を考えていく。」こういった生きた経験が本書にちりばめられています。

対象読者は業務アプリケーション開発に携わるアーキテクチャ、システムエンジニア、開発者さん達です。最近は定着したドメイン駆動設計（ドメイン駆動開発）という言葉ですが、現場で実際に使われているのは実は少ないのではないでしょうか。ドメイン駆動で設計するとはどういったことなのか？本書を読めば、新しい視点が学べると思います。お薦めの一冊です。
-----
EXTENDED BODY:
<h2>ドメイン駆動設計とは</h2>

<blockquote>

この本の最大のテーマは、ドメインモデルをクリーンに作りつつ、永続記憶とも仲良くする方法である。ドメインモデルのようなもののための永続記憶はどのように構成されるかを示し、ドメインモデルとデータベースの間に橋をかける。

<cite>本書:序章より</cite>

</blockquote>

<h3>ユースケースとトランザクションスクリプト</h3>

ユースケースとはシステムの一つの機能（振る舞い）をユーザの視点から記述するものです。著者の Jimmy Nilsson は、かつてはユースケース一つにつき一つのクラスを作って機能を設計していたそうです。おそらく、いわゆる「3階層アーキテクチャのビジネスロジック層における<strong>サービスクラス</strong>」のことだと思われます。

この方法で設計を行うと、機能を呼び出して結果を得るのに一つのサービスクラスの一つのメソッドを呼び出すだけという構造になります。これが手続き型のトランザクションスクリプトというアーキテクチャパターンです。ユースケースを一つにつきサービスクラスを一つ作ると、一つの機能がそのクラスにカプセル化され処理の見通しはよくなります。

<h3>ドメイン駆動設計（Domain Driven Design）を重視する理由</h3>

ユースケースは確かに顧客との話し合いにはとても有効なものです。しかし、システムを設計するのにユースケースにとらわれる必要はないというのが筆者らの主張のようです。ユースケースでシステムの外観（インターフェース）を設計し、モデルによってドメインの主要コンセプト、業務のコアを定義し設計していくというのが効率的なシステム開発につながるのではないかと考えています。

最近の技術の発達のおかげで、顧客とモデルをベースに議論を行うことも不可能ではなくなってきました。

<h3>オブジェクト指向とドメインモデル</h3>

モデルを重視してシステムを設計すればおのずとオブジェクト指向でシステムを開発することになります。これをすんなり実装に落とすとなれば、当然ドメインモデルパターンのアーキテクチャを適用するのが自然の流れです。

ドメインをモデリングし、それをすんなり実装に落とすためにビジネスロジックにドメインモデルパターンを適用するのがドメイン駆動設計のコアの考え方です。

<h2>ドメインモデルとデータベース</h2>

<h3>データベースの設計方針</h3>

ドメインモデルで設計を進めていくと、当然データベースの設計をドメインモデル寄りにする必要が出てきます。しかしここで問題がでてくることになります。

データベースは今でもリレーショナルデータベースが一般的に使われています。リレーショナルデータベースは集合を基礎としたものになっています。ドメインモデルも集合を基礎としているのは変わりません。しかしドメインモデル（オブジェクト指向）はオブジェクトのデータ構造を出来るだけカプセル化し、振る舞いをオブジェクトに持たせようとするためデータベースのモデルと集合の粒度が異なるのです。

<blockquote>

設計ということでは、粒度が大きく異なる。例を使ってこの点を明らかにしよう。特定の人物について、家庭用電話番号ひとつと仕事用電話番号ひとつを管理したいとする。（中略）

ここで重要なのは、1:1でもすべてのカラムが通常一つのテーブルで定義されていることである。オブジェクト指向モデルでは、Person と PhoneNumber の2つのクラスを作るのが普通だろう。そして Person のインスタンスは 2つの PhoneNumber インスタンスを組み合わせたものになる。リレーショナルモデルでも同じようなことができなわけではないが、通常は無意味である。<b>リレーショナルモデルでは、テーブルの定義に動作を結び付けたりはしないので、定義を再利用しようなどとは考えない。これはオブジェクト指向モデルの逆である。</b>

<cite>本書:第1章「尊重すべき価値」P.19より</cite>

</blockquote>

もう一つあるのは、データベースは継承をサポートしないことです。つまり、ポリモーフィズムが実現できないのです。オブジェクト指向では継承（ポリモーフィズム）は重要な概念です。

<h3>データマッパー（O/Rマッパー）</h3>

上で述べたようなデータベースモデルとオブジェクト指向モデルの乖離（かいり）のことを<strong>インピーダンスミスマッチ</strong>と呼びます。そして、このインピーダンスミスマッチを埋める目的で導入されるものに、データマッパー（O/Rマッパー）があります。Java では Hibernate が有名です。

<h2>本書に書いてあること</h2>

<ul>
<li>ドメイン駆動設計</li>
<li>ドメインモデルが重要な理由</li>
<li>アーキテクチャパターンとしてのドメインモデルの有効性</li>
<li>テスト駆動開発によるモデルの見つけ方</li>
<li>ドメインモデルに対するルール</li>
<li>永続化方針</li>
<li>PoEAA の応用としてのインフラパターン</li>
<li>NHibernate（.Net ようのO/Rマッパー）の導入</li>
<li>設計テクニック：SOA、DI、AOP</li>
<li>UIに関する設計</li>
<li>ドメインモデルパターン再考</li>
</ul>

ドメインモデルを現場にどうやって適用するか、なぜドメインモデルなのか、ドメインモデルを使った実際の設計例などが知りたい人は、ぜひ本書を読んでください。440ページ近くありますが、すんなり読めてしまうくらいどっぷりはまれます。

<h2>参考</h2>

<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/ref=nosim/" target="_blank">エンタープライズ アプリケーションアーキテクチャパターン (Object Oriented Selection)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51TVM1CFHKL._SL160_.jpg" border="0" alt="エンタープライズ アプリケーションアーキテクチャパターン (Object Oriented Selection)" /></a></td><td valign="top"><font size="-1">長瀬 嘉秀 株式会社 テクノロジックアート <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />　.NETについての考察は不要<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />この本の読み方<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />原書を読むべきだった。。。<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="stars" />訳さえまとなら...<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />待望の１冊。ただし帯に偽りあり。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321125215/sorehabooks-22/ref=nosim/" target="_blank">Domain-Driven Design: Tackling Complexity in the Heart of Software</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321125215/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51QQidWjIQL._SL160_.jpg" border="0" alt="Domain-Driven Design: Tackling Complexity in the Heart of Software" /></a></td><td valign="top"><font size="-1">Martin Fowler <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />ドメインモデルの必読書<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />ドメインモデル構築方法の決定版<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />For Software Projects<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321125215/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109037/sorehabooks-22/ref=nosim/" target="_blank">オブジェクトデザイン (Object Oriented SELECTION) (Object Oriented SELECTION)</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109037/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/31fUI6yM-0L._SL160_.jpg" border="0" alt="オブジェクトデザイン (Object Oriented SELECTION) (Object Oriented SELECTION)" /></a></td><td valign="top"><font size="-1">株式会社オージス総研 藤井 拓 辻 博靖 井藤 晶子 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-5.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />オブジェクトの役割、責務、コラボレーションに着目した設計法を明快に解説<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />設計の参考書。設計の考え方の勉強に最適。<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109037/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://ec2.images-amazon.com/images/I/51zwGP-zLyL._SL500_AA240_.jpg" border="0" alt="ドメイン駆動" />
-----
KEYWORDS:
ドメイン駆動,ドメインモデル,デザインパターン,DDD,エンタープライズアーキテクチャ,テスト駆動開発,9784798116174
-----


-----
CF50_CF_4: Jimmy Nilsson (著), 尾島 良司 (監修), 株式会社ロングテール 長尾 高弘 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51zwGP-zLyL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4798116173/250-9582265-5494630?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4798116173
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: インターフェイス指向設計 アジャイル手法によるオブジェクト指向設計の実践
BASENAME: インターフェイス指向設計_アジャイル手法によるオブジェクト指向設計の実践
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 07/05/2008 10:40:18 AM
TAGS: これは読むべき,インターフェース設計,オブジェクト指向,良書
-----
BODY:
本書は、プログラムにおけるインターフェース設計へアドバイスを与えるものです。GUIやデザインの話ではありません。高凝集度で疎結合な設計を行うためにインタフェース設計をどのように進めたらよいか、どのように考えてインターフェースを作れば良いかなどを説明しています。

システム開発というのは複雑な作業です。その複雑さを少しでも解消するために<strong>分割して統治せよ（Divide and Conquer）</strong>という理論を用いることが良いことだとされています。このときに大切になってくるのが「<strong>凝集度</strong>」と「<strong>結合度</strong>」になります。

凝集度は高いほど良い、つまり責任範囲が明確でが軸ぶれないほどよいです。結合度は低いほど、つまりそっちはそっちで勝手にやっててねとできるほどよいです。高凝集で低結合（英語で言うと「High Cohesion and Low Coupling!」）なプログラム部品にするために必要なのが「<strong>良いインターフェース</strong>」なのです。本書は、この良いインターフェースとは何か？どうやって良いインターフェースを設計するか？を解説するものです。

本書の対象読者は、プログラム経験があり設計に興味がある人、DI（Dependency Injection）って流行ってたけど未だに何が良いのかわからない人、テスト容易性が大事って聞くけどどうやって設計したらいいかわからない人です。

200ページくらいしかなく、かなり薄い本になっていますのでサクサク読めると思いますが、実はあまり詳しい説明というのが載っていません。内容が薄いのではなく、説明が薄いのです。「こんな場合こういう考えでインターフェースを切ると良いよ。作り方は二種類ある。長所はこれで、短所はこれ」みたいな説明が多いように思えました。

それでもかなりの良書の部類に入ると思います。さらっと読んで、良く理解できなかった部分は先輩に聞いたり、Webで質問したりして、自分なりに噛み砕いていく。そういう読み方をする本かなと思います。
-----
EXTENDED BODY:
<h2>本書に出てくるキーワード</h2>

<h3>インターフェイスの三原則</h3>

<ol>
<li>インターフェイス実装は、そのメソッド名が示す通りの処理をしなければならない</li>
<li>インターフェイス実装は他に危害を加えてはならない</li>
<li>インターフェイス実装は、責務を果たせない場合にそれを呼び出し元に伝えねばならない</li>
</ol>

つまり、「名前どおりの処理をし」、「後始末は自分でする、自分がエラーでも他に迷惑をかけない」、「自分で処理できないときは、呼び出し元に誤りをいれる」ということ。

<h3>契約（Contract）、契約による設計（Design By Contract）</h3>

インターフェイスの呼び出し元とインターフェイスとの間で交わされる約束のこと。事前条件、事後条件、不変表明の3つからなる。

<strong>事前条件</strong>はインターフェイスの呼び出し元が守らなければならない条件で、事前条件を満たない状態でインターフェイスを呼び出すと正しく動作しない。

<strong>事後条件</strong>はインターフェイスが守らなければならない条件で、事前条件を満たした状態で呼び出しが行われた場合に満たさなければならないもの。事後条件を満たせない場合は Java であれば例外をスローしたりする（原則3）

<strong>不変表明</strong>はインターフェイスのインスタンスが満たさなければいけない内部状態を表すもの。

<h3>データインターフェイスとサービスインターフェイス</h3>

データインターフェイスとは、属性の設定や取得のメソッドで構成されるインターフェイスのこと。JavaBeans などが該当する。

サービスインターフェイスとは、処理を行うメソッドで構成されるインターフェイスのこと。よくある3階層アーキテクチャのサービス層を司るものや、GUIのボタン押下で呼び出されるメソッドなどを持つもの。

<h3>エンティティ、バウンダリ、コントロール</h3>

<strong>エンティティ</strong>は、データインターフェイスに相当する。

<strong>バウンダリ</strong>は、サービスインターフェイスに相当する。主に GUI やユーザインターフェイスとして動作する種類のサービスインターフェイス。

<strong>コントロール</strong>も、サービスインターフェイスに相当する。主にビジネスロジックやビジネスルール、サービスを処理する種類のサービスインターフェイス。

<h3>ステートフルインターフェイスとステートレスインターフェイス</h3>

インターフェイスも状態を持つことができる。

<strong>ステートフルインターフェイス</strong>は、メソッドの呼び出しに順序があり、呼び出し順で状態が変わるもの。

<strong>ステートレスインターフェイス</strong>は、メソッドの呼び出しに順序がなく振る舞いが変わらないもの。

<h3>凝集度</h3>

責務の似具合のこと。共通のコンセプトに基づいたメソッドばかりで構成されたインターフェイスは凝集度が高いといえる。

<h3>結合度</h3>

相手がいないと動作できない具合のこと。相手のモジュールの処理に依存していない場合には結合度が低いといえる。

<h3>継承とインターフェイス</h3>

継承は機能の連鎖。is_a （である）や is_kind_of （の一種である） で表されることが多い。共通の処理や属性をまとめる際に使える。

インターフェイスはロールの連鎖。インターフェイスの継承は provides-a （提供する）で表されることが多い。

（適当に書いてみたけど、説明が難しいというか感覚的な感じなので、本書を読んでください。。。）

<h3>手続き型インターフェイスとドキュメント型インターフェイス</h3>

リモートインターフェイスとしてのインターフェイスを考える際の種類。

<strong>手続き型インターフェイス</strong>は、メソッドの処理を定義するタイプのインターフェイス。CORBA や RMI なんかがそれ。

<strong>ドキュメント型インターフェイス</strong>は、データメッセージをやり取りするタイプのインターフェイス。JSON や XML なんかがこれに当たる。

<h2>感想</h2>

良書だと思いました。ただし、インターフェイスってこういうものだっていう考えがある人が読まないと、頭が混乱してくる気がしました。それは、インターフェイスという言葉がいろいろな意味で使われているからです。Java のインターフェイスを表していることもあれば、相手とのやり取りそのものをインターフェイスといったり、メソッド定義もインターフェイス定義だよねというような、広い意味でインターフェイスといったりと。

インターフェイス設計の総おさらいのような感じで読むこともできるし、おお！こんな考え方があったのか！という新しい発見もあるしという感じです。

<h3>本書には書いてなかった気がするもの</h3>

<h4>インターフェイスの定義は呼び出し元がするべし！</h4>

これは私の持論（？）ですが、インターフェイスの定義というものは、使う側が指定するべきだと思っています。哲学とか入ってきてしまいますが、「自分が今ここにいるのは、他人がそう認識しているから」というイメージです。

「<a href="http://blog.goo.ne.jp/glass-_-onion/e/91d51585d966f1a005f957eacacc01de" target="_blank" class="extlink">依存関係逆転の法則</a>」的な考え方ともいえると思います。

<dl>
<dt class="tips">Tips</dt>
<dd>「<strong>インターフェイスが変わるときは、ユーザの要求が変わったときである。</strong>」</dd> 
</dl>

<h2>参考</h2>

<div class="rakuten">
<table  width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797347783/sorehabooks-22/ref=nosim/" target="_blank">アジャイルソフトウェア開発の奥義 第2版 オブジェクト指向開発の神髄と匠の技</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797347783/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51oH3DfWY4L._SL160_.jpg" border="0" alt="アジャイルソフトウェア開発の奥義 第2版 オブジェクト指向開発の神髄と匠の技" /></a></td><td valign="top"><font size="-1">瀬谷 啓介 <br /><br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797347783/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/ref=nosim/" target="_blank">達人プログラマー―システム開発の職人から名匠への道</a></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/ref=nosim/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41HTQ8ZP3AL._SL160_.jpg" border="0" alt="達人プログラマー―システム開発の職人から名匠への道" /></a></td><td valign="top"><font size="-1">Andrew Hunt David Thomas 村上 雅章 <br /><br /><strong>おすすめ平均</strong> <img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />素人から玄人への道<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />知らないと恥ずかしい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />新人プログラマに読ませたい<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="stars" />初級PGから上級PGになるための本<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="stars" />SEの基本が書かれてます<br /><br /><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/ref=nosim/" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://ec2.images-amazon.com/images/I/51b8oJcFWdL._SL500_AA240_.jpg" border="0" alt="インターフェイス指向設計 アジャイル手法によるオブジェクト指向設計の実践" />
-----
KEYWORDS:
インターフェース,interface,アジャイル,オブジェクト指向,凝集度,978-4-87311-366-1
-----


-----
CF50_CF_4: Ken Pugh (著), 角谷 信太郎(監訳) (翻訳), 児島 修 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51b8oJcFWdL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4873113660/250-9582265-5494630?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4873113660
CF50_CF: オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: まつもとゆきひろ コードの世界~スーパー・プログラマになる14の思考法
BASENAME: _14
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 04/06/2010 01:38:10 AM
TAGS: Ruby,これは読むべき,イディオム,定番,良書
-----
BODY:
本書は、まつもとゆきひろさんによる、プログラミングのいろいろな技術の考え方や考え方が生まれた経緯、目的などが解説されているプログラマ向けの本です。この本のすばらしいところは、Rubyの開発者である<strong>まつもとゆきひろ</strong>さんの言葉で各種技術が説明されているところです。

コーディングのあり方や、こういう考えを持って取り組むとよりよりコードが書けるようになる、こういうことを意識するとよいプログラマになれるという秘伝の極意が満載です。特に、Rubyの開発者という立場から話されている『第3章 ブロックについて』や『第14章 関数型プログラミングについて など』はタイトルだけ見てもヨダレが出そうになるくらいです。

本書のターゲットはよりよりプログラムを書きたいと思っている開発者、技術者の方々です。技術のうんちくや裏話、トリビアなどが好きな人におすすめの一冊です。
-----
EXTENDED BODY:
<h2>目次</h2>

<ul>
<li>第1章 私はなぜRubyを開発したのか</li>
<li>第2章 オブジェクトについて</li>
<li>第3章 ブロックについて</li>
<li>第4章 デザイン・パターンについて</li>
<li>第5章 Ajaxについて</li>
<li>第6章 Ruby on Railsについて</li>
<li>第7章 文字コードについて</li>
<li>第8章 正規表現について</li>
<li>第9章 整数と浮動小数について</li>
<li>第10章 プログラムの高速化と並列化について</li>
<li>第11章 プログラムのセキュリティについて</li>
<li>第12章 時間を扱うプログラムについて</li>
<li>第13章 データの永続性について</li>
<li>第14章 関数型プログラミングについて など</li>
</ul>

<h2>おぼえがき</h2>

<h3>関数を引数に取る高階関数</h3>

<strong>高階関数</strong>とは、関数を引数にとる関数のことで関数型言語などで使用されます。高階関数をつかうメリットは、小さな関数の組み合わせによって多種多様な処理に対応できることです。テキスト処理でつかうパーサなどの変換処理で使用されたりします。

Rubyという言語ではブロックという機能を使って高階関数と同等のことを実現しています。

<blockquote>

高階関数を実現するためには、関数あるいは手続きをデータとして取り扱えるようなプログラミング言語が必要です。

<cite>『第3章 ブロックのパワー』より</cite>

</blockquote>

高階関数をつかう際には、関数が呼び出されたときの実行時の環境（コンテキスト）を保持しておくことができるかというポイントがあります。この実行時の環境を保持しておく機能をクロージャと呼びますが、Rubyではこれをブロックをつかって実現しています。

C言語のような言語自体が高階関数をサポートしていない言語では、実行時の環境を保持しておくのに引数でわたすかグローバル変数をつかうかの2つしか手段がありません。これではカプセル化が崩れてしまい保守性が悪いコードになってしまいます。

<h3>ブロックのパワー</h3>

Rubyはこの実行時の環境を保持する手段としてブロックをつかいますが、コードの塊をメソッドの引数にわたすことが出来る点やメソッドの呼び出しの制御がブロックに引き渡される点が優秀な点として上げられます。これによって、繰り返し処理などの実行時環境をブロックに閉じ込め保守性の高いコードが書けるようになります。

また、コールバックや決まりきった処理をブロックとして変数に保持して持ち回ることが出来たりと、ブロックをつかった時の利点ははかりしれません。Javaを経験してRubyを経験すると、このブロックのパワーに最初に驚かされると思います。そしてなぜJavaにブロックがないのかむずがゆくなってきます（Java7で正式にクロージャがサポートされるのでJavaでもRubyのブロックのような使い方ができる日がくるのも近いかもしれません）

<h3>プログラムでの文字コードの扱い</h3>

<blockquote>

コンピュータは「文字」そのものを扱うことができません。このため、各文字に番号を対応させて処理します。文字に対応した番号を「文字コード」と呼びます。

<cite>『第7章 文字コードについて』より</cite>

</blockquote>

<blockquote>

コンピュータは、先に述べたように、各文字に番号を対応させて処理します。逆に言うと番号が割り当てられた文字だけを扱います。この、番号が割り当てられた文字の集まりを「文字集合（Character Set）」と呼びます。

<cite>『第7章 文字コードについて』より</cite>

</blockquote>

<blockquote>

文字集合が決まれば、各文字に対応する番号を順番に並べることで、文字の並びであるテキストを表現できます。文字集合で用いる文字コード番号の最大値が255以下であれば（たとえばASCII）、各番号をバイト列として表現すればよいので話はこれでおしまいです。しかし、もっと大きな文字集合ではメモリー効率や処理効率なども考慮して、どのようにコンピュータ上で取り扱うかを決めなければなりません。取り扱い方法、言い換えれば文字コード列の表現方法を「文字符号化方式（Character Encoding Scheme）」と呼びます。

<cite>『第7章 文字コードについて』より</cite>

</blockquote>

<h3>関数型プログラミングとオブジェクト指向プログラミング</h3>

関数型プログラミングの利点は、「<strong>副作用のない</strong>」関数というものの組み合わせでコーディングができるところです。これによって安全にコーディング出来るようになります。

一方のオブジェクト指向プログラミングの利点は、概念をオブジェクトとして捉え、カプセル化、継承、ポリモーフィズム、メッセージパッシングによる構造化プログラミングが行えるところです。

大規模な業務向けのシステムのように、特定のデータをデータベースで管理するためのシステムを作り場合には、関数型プログラミングよりもオブジェクト指向プログラミングのほうが便利です。逆に、関数型プログラミングは状態を持たない文字列処理やパーサなどの変換処理、解析アプリケーションなどが向いています。

Rubyが人気なのは、日本人が開発した言語というだけではなく、この関数型プログラミングとオブジェクト指向プログラミングの良いとこ取りをしたというところが大きいと思います。

業務システムには相性の悪い関数型プログラミングでも、ブロックやクロージャなどの考えはコーディングにおいては便利です。プログラミング言語の進化に伴って気持ちいいコーディングが出来るようになってきたなぁとしみじみ思う今日この頃です（日記みたい。。。）

<h2>参考</h2>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797316462%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797316462" target="_blank">Java言語で学ぶデザインパターン入門</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797316462%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797316462" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41XMDFXX4GL._SL160_.jpg" border="0" alt="Java言語で学ぶデザインパターン入門" /></a></td><td valign="top"><font size="-1"><br />ソフトバンククリエイティブ  2001-06<br />売り上げランキング : 175360<br /><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" />設計型紙<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" />すばらしい本です<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" />Java以外でも使えます。<br /><br /><a href="http://www.amazon.co.jp/Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797316462%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797316462" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>


<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Scala%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E3%83%87%E3%82%A4%E3%83%93%E3%83%83%E3%83%89%E3%83%BB%E3%83%9D%E3%83%A9%E3%83%83%E3%82%AF/dp/4822284239%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822284239" target="_blank">Scalaプログラミング入門</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/Scala%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E3%83%87%E3%82%A4%E3%83%93%E3%83%83%E3%83%89%E3%83%BB%E3%83%9D%E3%83%A9%E3%83%83%E3%82%AF/dp/4822284239%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822284239" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41rRKEKAdiL._SL160_.jpg" border="0" alt="Scalaプログラミング入門" /></a></td><td valign="top"><font size="-1">大塚庸史 <br /><br />日経BP社  2010-03-18<br />売り上げランキング : 6035<br /><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" />Scalaでアプリケーション／ライブラリ開発を考えている方は是非どうぞ<br /><br /><a href="http://www.amazon.co.jp/Scala%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E3%83%87%E3%82%A4%E3%83%93%E3%83%83%E3%83%89%E3%83%BB%E3%83%9D%E3%83%A9%E3%83%83%E3%82%AF/dp/4822284239%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822284239" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>


<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/%E3%81%9F%E3%81%AE%E3%81%97%E3%81%84Ruby-%E7%AC%AC3%E7%89%88-%E9%AB%98%E6%A9%8B-%E5%BE%81%E7%BE%A9/dp/4797357401%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797357401" target="_blank">たのしいRuby 第3版</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/%E3%81%9F%E3%81%AE%E3%81%97%E3%81%84Ruby-%E7%AC%AC3%E7%89%88-%E9%AB%98%E6%A9%8B-%E5%BE%81%E7%BE%A9/dp/4797357401%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797357401" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41aNbddsxFL._SL160_.jpg" border="0" alt="たのしいRuby 第3版" /></a></td><td valign="top"><font size="-1">まつもと ゆきひろ <br /><br />ソフトバンククリエイティブ  2010-03-31<br />売り上げランキング : 16871<br /><br /><br /><a href="http://www.amazon.co.jp/%E3%81%9F%E3%81%AE%E3%81%97%E3%81%84Ruby-%E7%AC%AC3%E7%89%88-%E9%AB%98%E6%A9%8B-%E5%BE%81%E7%BE%A9/dp/4797357401%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797357401" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>


<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Ruby%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Gregory-Brown/dp/4873114454%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114454" target="_blank">Rubyベストプラクティス -プロフェッショナルによるコードとテクニック</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/Ruby%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Gregory-Brown/dp/4873114454%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114454" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51IV0ZuH%2BhL._SL160_.jpg" border="0" alt="Rubyベストプラクティス -プロフェッショナルによるコードとテクニック" /></a></td><td valign="top"><font size="-1">高橋 征義(監訳) <br /><br />オライリージャパン  2010-03-26<br />売り上げランキング : 4623<br /><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="star" />入門書に物足りなさを感じ出した人向け<br /><br /><a href="http://www.amazon.co.jp/Ruby%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Gregory-Brown/dp/4873114454%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114454" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://ec3.images-amazon.com/images/I/41y65zf27LL._SL500_AA240_.jpg" border="0" alt="まつもとゆきひろ コードの世界~スーパー・プログラマになる14の思考法" />
-----
KEYWORDS:
4822234312,978-4822234317,Ruby,スーパープログラマ
-----


-----
CF50_CF_4: まつもとゆきひろ (著), 日経Linux (編集)
CF50_URL: http://ec2.images-amazon.com/images/I/41y65zf27LL._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4822234312?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4822234312
CF50_CF: 日経BP出版センター
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: Webを支える技術 -HTTP、URI、HTML、そしてREST
BASENAME: webを支える技術_httpurihtmlそしてrest
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 05/31/2010 06:31:22 PM
TAGS: REST,これは読むべき,わかりやすい,定番,良書
-----
BODY:
Webで成功するサービスを作る究極の指針は「シンプルであること」だと思います。これは別にWebに限らずそうだと思います。例えば、AppleやSONYやDELLなどの起業が成功したのは、シンプルな製品、サービスを作り出したからではないかと思います。Googleの検索窓なんかは、究極のシンプルだと思います（だんだんといろんなものがつき始めましたが。。。）

業務で使用するWebサービス、コンシューマ向けのWebアプリケーションAPIなどもこの設計指針が当てはまると思いますし、本書はこのことだけが追求されて書かれている良書です。

Webの成り立ち、ここまで成長してきたのは何故か、Webをより良く使うための設計方針が本書には詰まっています。Web開発の初心者にはもちろん、Web開発をバンバンにやってきた人にも、一度は目を通して欲しい本です。かなりオススメですし、読めば必ず目から鱗間違いなしです。
-----
EXTENDED BODY:
RESTについては、<a href="http://hamasyou.com/archives/000343">RESTful Webサービス</a>の記事も参考にしてください。

<h2>Webを支える技術</h2>

<dl>
  <dt>HTTP、URI、HTML</dt>
  <dd><p>HTTPというシンプルなプロトコルの上で、リソースを一意に特定するURIを用いて、HTMLで記述されたメディアを読む。Webはそんなシンプルな技術によって成り立っています。</p></dd>
  <dt>ハイパーメディア</dt>
  <dd><p>テキスト、画像、音声、動画などをハイパーリンクで結びつけたシステムをハイパーメディアと呼びます。Webで最も重要なのはこのハイパーリンクによってメディアがリンクしているということです。</p></dd>  
  <dt>分散システム</dt>
  <dd><p>Webはひとつのシステムで成り立っているわけではなく、大量のコンピュータが組み合わさっています。ネットワーク上に散らばったこれらのコンピュータが相互動作するのは、シンプルなプロトコルだからこそと言えるでしょう。</p></dd>
</dl>

<h2>REST-Webのアーキテクチャスタイル</h2>

RESTとはアーキテクチャスタイルでRESTアーキテクチャスタイルなアーキテクチャのことをRESTfulアーキテクチャと呼びます。

<blockquote>

RESTはWeb全体のアーキテクチャスタイルでもあり、個別のWebサービスやWeb APIのアーキテクチャスタイルでもあります。一人一人が作る個別のWebサービスやWeb APIでも、RESTの約束を守ることが重要です。個別のWebサービスが全体の調和を乱しては、全体が統一したアーキテクチャスタイルを守れないからです。

<cite>本書 P.27</cite>

</blockquote>

<h3>リソース</h3>

RESTの重要な概念の一つにリソースがあります。<strong>リソースとはWeb上に存在する名前を持った情報</strong>の事をいいます。WebではこれをURIで表します。

RESTfulアーキテクチャではこのリソースを「アドレス可能な状態」にしておくことで、システムとして綺麗な形（シンプルなプログラムが可能）になります。

<blockquote>

URIが備える、リソースを簡単に指し示せる性質のことを「アドレス可能性」（Addressability）と呼びます。リソースをアドレス可能な状態、すなわちきちんと名前が付いており適切な手段でアクセスできる状態にすると、プログラムをとても作りやすくなります。

<cite>本書 P.29</cite>

</blockquote>

リソースは複数のURIを持つことができます。例えば、

<pre>
http://www.hamasyou.com/reports/newest
</pre>

<pre>
http://www.hamasyou.com/reports/system/2010-05-31/1
</pre>

は同じリソースを指すことができます。ただし、一つ目のURIは時間の経過とともに指し示すリソースが変わってしまうことがあります。常に同じリソースを表したい場合には、パーマネントリンクなどを参考にすると良いでしょう。

<h3>クールなURIは変わらない</h3>

良いURIやきれいなURIの事を「<strong>クールURI</strong>」と呼ぶそうです。「URIが変わらないべきである。変わらないURIこそが最上のURIである。」

クールURIにするためには、次のことに気をつければ良さそうです。

<ul>
  <li>プログラミング言語に依存した拡張子やパスを含めない</li>
  <li>メソッド名やセッションIDを含めない</li>
  <li>URIはリソースを表現する名詞にする</li>
</ul>

<h4>プログラミング言語に依存した拡張子やパスを含めない</h4>

例えば、JavaのStrutsを使うと、スタンダードなURIは「.do」という拡張子がつけることが多くあります。また、CGIなどの場合には、スクリプト言語の拡張子（.pl、.rb、.cgi など）をそのまま使うことがあります。

また、CGIなどの場合、「cgi-bin」などのディレクトリ名をパスに含めることがあります。これもプログラミング言語に依存したパスを含めていることになります。

こういった、プログラミング言語のデファクト、パス情報、ファイル拡張子などをURIに含めないようにすると、URIが変わりにくくなります。

<h4>メソッド名やセッションIDを含めない</h4>

リソースに対する処理メソッド名をURIに含めると、使っているフレームワークや仕様変更によりURIが変わりやすくなってしまいます。また、セッションIDなどをURIに含めるとアクセスする度にURIが変わってしまいかねないという状況になってしまいます。

<pre>
http://www.hamasyou.com/sample/execute?cmdName=showPage&page=3;jssessionid=1234567890
</pre>

URIにはメソッド名やセッションIDを含めないようにすると良いです。RESTfulアーキテクチャでは、統一インターフェースとしてHTTPのメソッド（GET, POST, PUT, DELETE）を使用すると良いでしょう。

<h4>URIはリソースを表現する名詞にする</h4>

URIにはメソッド名を含めずに、HTTPメソッドを使用して処理を分けると良いです。

<pre>
悪い（×）： http://www.hamasyou.com/show/articles?id=10 （POSTでアクセスする）
</pre>

<pre>
良い（◯）： http://www.hamasyou.com/articles/10  (GETでアクセスする）
</pre>

<h2>URI設計のテクニック</h2>

<h3>拡張子で表現を指定する</h3>

<blockquote>

ここまで、拡張子はURIの設計にとって悪であると述べてきました。しかし、悪いのは「.cgi」や「.pl」など実装に依存した拡張子です。実装に依存していない拡張子は良い側面を持つ場合もあります。

<cite>本書 P.60</cite>

</blockquote>

<dl>
  <dt>言語を指定する拡張子</dt>
  <dd>言語を指定する拡張子「.ja」「.en」をリソースに含める。</dd>
  <dt>フォーマットを指定する拡張子</dt>
  <dd>「.html」「.atom」「.xml」「.json」などの表現フォーマットを指定する拡張子をリソースに含める。</dd>
</dl>

<h2>その他</h2>

<h3>統一インターフェース</h3>

<dl>
  <dt>GET</dt>
  <dd>リソースを取得する場合に使う。冪等（べきとう）。</dd>
  <dt>POST</dt>
  <dd>リソースを作成するときに使う。レスポンスとしてリソースのURIを返してくれることを希望する（新規作成の場合など）。新しいリソースのURIはLocationヘッダで返される（POST後はリダイレクトされる）。冪等ではない。</dd>
  <dt>PUT</dt>
  <dd>リソースを更新するときに使う。リソースのURIは変わらない。冪等だがリソースの状態は変わる。</dd>
  <dt>DELETE</dt>
  <dd>リソースを削除する時に使う。リソースのURIがわかっている場合に使い、なんど呼び出しても結果は変わらないべき。つまり、存在しないリソースに対してのDELETEは何もいわずに成功するし、DELETEによって他のリソースのURI表現が変わることはないようにする。冪等。</dd>
</dl>

<h3>検索結果にリソース表現</h3>

<pre>
http://www.hamasyou.com/articles/search?q={query}
</pre>

searchというメソッド名をURIを含めているじゃないかと思うが、そうではなく、これは検索結果というリソースを表している（searchは名詞の方の検索）。

<h3>オブジェクトモデルにおける関連のリソース表現</h3>

関連のどちらがトップレベルリソース（上にくるリソース）かを考え、URIの階層構造でURIを表す。

記事群-設計カテゴリ-最新記事の場合。

<pre>
http://www.hamasyou.com/articles/system/newest
</pre>

設計カテゴリ-記事群-最新記事の場合。

<pre>
http://www.hamasyou.com/system/articles/newest
</pre>

<h3>ロック機構をリソースで表す</h3>

Web APIによってはロック機構を組み込みたい場合があります。この場合は、ロックを表す子リソースを作ることで対応できます。

リソースに対して、ロックリソースを作成し、そのロックリソースをDELETEすることでロック解除を表す。

本書 P.289より抜粋。

<pre>
POST /1120034 HTTP/1.1
Host: zip.ricollab.jp
Content-Type: application/x-www-form-urlencoded
Authorization: Basic ...
 
scope=exclusive&timeout=300
</pre>

ロック用のパラメータをリソースに対して送信し、ロックリソースを作成する。

<pre>
HTTP/1.1 201 Created
Location: http://zip.ricollab.jp/1120034/lock
Content-Type: application/json
 
{
 "locktype": "exclusive",
 "timeout": "2010-09-07T10:00:30Z",
 "owner": "yohei"
}
</pre>

ロック解除は、POSTで作成された子リソース（lock）を削除することで行う。

<pre>
DELETE /1120034/lock HTTP/1.1
Host: zip.ricollab.jp
Authorization: Basic ... 
</pre>

<pre>
HTTP/1.1 200 OK
</pre>

<h2>参考</h2>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/RESTful-Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-Leonard-Richardson/dp/4873113539%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113539" target="_blank">RESTful Webサービス</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/RESTful-Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-Leonard-Richardson/dp/4873113539%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113539" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51ojIhXBP3L._SL160_.jpg" border="0" alt="RESTful Webサービス" /></a></td><td valign="top"><font size="-1">山本 陽平 <br /><br />オライリー・ジャパン  2007-12-21<br />売り上げランキング : 128194<br /><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif" alt="star" />結構、難しい - RESTのバイブル<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="star" />webサービスを設計する人向け<br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-2-0.gif" alt="star" />特に面白い話題がない<br /><br /><a href="http://www.amazon.co.jp/RESTful-Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-Leonard-Richardson/dp/4873113539%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113539" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3-Sanjiva-Weerawarana/dp/4434073435%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4434073435" target="_blank">Webサービスプラットフォームアーキテクチャ</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3-Sanjiva-Weerawarana/dp/4434073435%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4434073435" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51CK4NW3P6L._SL160_.jpg" border="0" alt="Webサービスプラットフォームアーキテクチャ" /></a></td><td valign="top"><font size="-1">丸山 宏 <br /><br />エスアイビーアクセス  2006-02<br />売り上げランキング : 212405<br /><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" />Webサービスの全体の把握をしたい人にはおすすめ！<br /><br /><a href="http://www.amazon.co.jp/Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3-Sanjiva-Weerawarana/dp/4434073435%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4434073435" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>
-----
EXCERPT:
<img src="http://ec2.images-amazon.com/images/I/51RHg6crGFL._SL500_AA240_.jpg" border="0" alt="Webを支える技術 -HTTP、URI、HTML、そしてREST" />
-----
KEYWORDS:
4774142042,978-4774142043,REST,RESTfulアーキテクチャ,Webサービス,設計
-----


PING:
TITLE: 認証が必要な API を REST っぽく作るときのメモ
URL: http://hamasyou.com/blog/archives/000392
IP: 210.172.144.214
BLOG NAME: それはBlog
DATE: 11/18/2010 10:46:46 PM
REST で Web サービスを構築する場合に、いつも認証が必要なリソースの URI の設計で悩むので、今までの経験上こうしたら上手くいったというのをメモ...
-----

-----
CF50_CF_4: 山本 陽平 (著)
CF50_URL: http://ecx.images-amazon.com/images/I/51RHg6crGFL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4774142042?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774142042
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: HerokuでRuby1.9とRails3を使う
BASENAME: herokuでruby19とrails3を使う
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Engineer-Soul
CATEGORY: Engineer-Soul
DATE: 06/02/2010 10:44:40 AM
TAGS: Rails3,Ruby1.9
-----
BODY:
<p id="heroku-logo" style="background-color: #29264d;">
<a href="http://heroku.com" style="display: block; text-indent: -9999px; width: 177px; height: 56px; overflow: hidden; background-image: url(http://nav.heroku.com/images/logos/logo.png); background-repeat: no-repeat;">Heroku</a>
</p>

<a href="http://heroku.com/" target="_blank" class="extlink">Heroku</a> はRubyで作成したWebアプリケーションをホスティングしてくれるサービスで、Ruby On Railsを無料で動作させることができます。

Heroku上に作成したGitのリポジトリに対してcommitを行うと、Heroku側で処理がフックされRailsがデプロイされるようになります。

2010年6月1日現在、Heroku上ではRuby1.8.6、Ruby1.8.7(beta)、Ruby1.9.1(beta)を使用することができます。また、Rails3で作成したWebアプリケーションを動作させることができるようになっています。

この記事では、Heroku上でRuby1.9.1(beta)を使用し、Rails3をデプロイするところまでの手順をメモしておきます。

※ Heroku 上で動くサンプルアプリ作りました。 <a href="http://kaffetter.heroku.com/" target="_blank" class="extlink">Kaffetter（カフェッター） http://kaffetter.heroku.com/</a>

<h4>Heroku でアプリを動かす手順</h4>

<ul>
<li>Herokuでアカウントを作成する</li>
<li>gemでheroku managment APIをインストールする</li>
<li>ローカルにRails環境を構築する</li>
<li>gitでHeroku上のリポジトリにコミットする</li>
</ul>

<dl>
<dt class="note">この記事を書くのに使った環境</dt>
<dd>
<ul><li>Mac OSX 10.6.3 Snow Leopard</li><li>Git 1.7.0.3</li><li>Ruby1.9.1</li><li>Rails 3.0.0 beta3</li><li>gem 1.3.6</li></ul></dd>
</dl>
-----
EXTENDED BODY:
<h2>あらかじめ用意しておくもの</h2>

<dl>
  <dt>Git</dt>
  <dd>Heroku上のリポジトリにコミットするためにGitを使用します。</dd>  
  <dt>SSL接続用の公開鍵</dt>
  <dd>GitでHeroku上のリポジトリにコミットする際に、ホームディレクトリの.sshフォルダにid_rsa.pubという名前で公開鍵が必要になります（$HOME/.ssh/id_rsa.pub）。あらかじめ<code>ssh-keygen</code>コマンド等を使用して作成しておきます。</dd>
</dl>

<h2>Heroku上にRails3のWebアプリを公開する</h2>

<h3>Herokuでアカウントを作成する</h3>

<a href="http://heroku.com/" target="_blank" class="extlink">http://heroku.com/</a> にアクセスし、画面上にある「Sign Up」からアカウントを作成します。

<img src="http://hamasyou.com/images/heroku/sc1.png" width="673px" alt="Sign Up" />

メールアドレスを入力すると確認メールが届くので、メール上の認証リンクをたどるとアカウントが作成されます。

<h3>gemでheroku managment APIをインストールする</h3>

gemを使ってHeroku管理用のAPIをインストールします。

<pre class="console">
> <kbd>sudo gem install heroku</kbd>
Successfully installed heroku-1.9.9
1 gem installed
Installing ri documentation for heroku-1.9.9...
Installing RDoc documentation for heroku-1.9.9...
</pre>

<h3>ローカルにRails環境を構築する</h3>

railsコマンドを使用して、Railsの開発環境を作成します。

<pre class="console">
> <kbd>rails new heroku-demo</kbd>
      <span style="color:Lime">create</span>
      <span style="color:Lime">create</span> README
      <span style="color:Lime">create</span> .gitignore
      <span style="color:Lime">create</span> Rakefile
      <span style="color:Lime">create</span> config.ru
      <span style="color:Lime">create</span> Gemfile
      <span style="color:Lime">create</span> app
      <span style="color:Lime">create</span> app/controllers/application_controller.rb
      <span style="color:Lime">create</span> app/helpers/application_helper.rb
      <span style="color:Lime">create</span> app/views/layouts/application.html.erb
      <span style="color:Lime">create</span> app/models
      <span style="color:Lime">create</span> config
      <span style="color:Lime">create</span> config/routes.rb
      <span style="color:Lime">create</span> config/application.rb
      <span style="color:Lime">create</span> config/environment.rb
      <span style="color:Lime">create</span> config/environments
      <span style="color:Lime">create</span> config/environments/development.rb
      <span style="color:Lime">create</span> config/environments/production.rb
      <span style="color:Lime">create</span> config/environments/test.rb
      <span style="color:Lime">create</span> config/initializers
      <span style="color:Lime">create</span> config/initializers/backtrace_silencers.rb
      <span style="color:Lime">create</span> config/initializers/inflections.rb
      <span style="color:Lime">create</span> config/initializers/mime_types.rb
      <span style="color:Lime">create</span> config/initializers/secret_token.rb
      <span style="color:Lime">create</span> config/initializers/session_store.rb
      <span style="color:Lime">create</span> config/locales
      <span style="color:Lime">create</span> config/locales/en.yml
      <span style="color:Lime">create</span> config/boot.rb
      <span style="color:Lime">create</span> config/database.yml
      <span style="color:Lime">create</span> db
      <span style="color:Lime">create</span> db/seeds.rb
      <span style="color:Lime">create</span> doc
      <span style="color:Lime">create</span> doc/README_FOR_APP
      <span style="color:Lime">create</span> lib
      <span style="color:Lime">create</span> lib/tasks
      <span style="color:Lime">create</span> lib/tasks/.gitkeep
      <span style="color:Lime">create</span> log
      <span style="color:Lime">create</span> log/server.log
      <span style="color:Lime">create</span> log/production.log
      <span style="color:Lime">create</span> log/development.log
      <span style="color:Lime">create</span> log/test.log
      <span style="color:Lime">create</span> public
      <span style="color:Lime">create</span> public/404.html
      <span style="color:Lime">create</span> public/422.html
      <span style="color:Lime">create</span> public/500.html
      <span style="color:Lime">create</span> public/favicon.ico
      <span style="color:Lime">create</span> public/index.html
      <span style="color:Lime">create</span> public/robots.txt
      <span style="color:Lime">create</span> public/images
      <span style="color:Lime">create</span> public/images/rails.png
      <span style="color:Lime">create</span> public/stylesheets
      <span style="color:Lime">create</span> public/stylesheets/.gitkeep
      <span style="color:Lime">create</span> public/javascripts
      <span style="color:Lime">create</span> public/javascripts/application.js
      <span style="color:Lime">create</span> public/javascripts/controls.js
      <span style="color:Lime">create</span> public/javascripts/dragdrop.js
      <span style="color:Lime">create</span> public/javascripts/effects.js
      <span style="color:Lime">create</span> public/javascripts/prototype.js
      <span style="color:Lime">create</span> public/javascripts/rails.js
      <span style="color:Lime">create</span> script
      <span style="color:Lime">create</span> script/rails
      <span style="color:Lime">create</span> test
      <span style="color:Lime">create</span> test/performance/browsing_test.rb
      <span style="color:Lime">create</span> test/test_helper.rb
      <span style="color:Lime">create</span> test/fixtures
      <span style="color:Lime">create</span> test/functional
      <span style="color:Lime">create</span> test/integration
      <span style="color:Lime">create</span> test/unit
      <span style="color:Lime">create</span> tmp
      <span style="color:Lime">create</span> tmp/sessions
      <span style="color:Lime">create</span> tmp/sockets
      <span style="color:Lime">create</span> tmp/cache
      <span style="color:Lime">create</span> tmp/pids
      <span style="color:Lime">create</span> vendor/plugins
      <span style="color:Lime">create</span> vendor/plugins/.gitkeep
> <kbd>cd heroku-demo</kbd>
</pre>

<h3>gitでHeroku上のリポジトリにコミットする</h3>

<code>git init</code>コマンドを使って、Rails環境をgitで管理し、Heroku上のリポジトリにコミットします。

まずは、<code>git init</code> で開発環境をgitで管理します。

<pre class="console">
> <kbd>git init</kbd>
Initialized empty Git repository in /Users/hamasyou/Documents/Works/work/heroku-demo/.git/
</pre>

次に、作ったばかりのRails環境をすべてローカルのgitリポジトリにコミットします。

<pre class="console">
> <kbd>git add .</kbd>
> <kbd>git commit -m "new app"</kbd>
[master (root-commit) 7b21637] new app
 39 files changed, 9038 insertions(+), 0 deletions(-)
 create mode 100644 .gitignore
 create mode 100644 Gemfile
 create mode 100644 README
 create mode 100644 Rakefile
 create mode 100644 app/controllers/application_controller.rb
 create mode 100644 app/helpers/application_helper.rb
 create mode 100644 app/views/layouts/application.html.erb
 create mode 100644 config.ru
 create mode 100644 config/application.rb
 create mode 100644 config/boot.rb
 create mode 100644 config/database.yml
 create mode 100644 config/environment.rb
 create mode 100644 config/environments/development.rb
 create mode 100644 config/environments/production.rb
 create mode 100644 config/environments/test.rb
 create mode 100644 config/initializers/backtrace_silencers.rb
 create mode 100644 config/initializers/inflections.rb
 create mode 100644 config/initializers/mime_types.rb
 create mode 100644 config/initializers/secret_token.rb
 create mode 100644 config/initializers/session_store.rb
 create mode 100644 config/locales/en.yml
 create mode 100644 config/routes.rb
 create mode 100644 db/seeds.rb
 create mode 100644 doc/README_FOR_APP
 create mode 100644 lib/tasks/.gitkeep
 create mode 100644 public/404.html
 create mode 100644 public/422.html
 create mode 100644 public/500.html
 create mode 100644 public/favicon.ico
 create mode 100644 public/images/rails.png
 create mode 100644 public/index.html
 create mode 100644 public/javascripts/application.js
 create mode 100644 public/javascripts/controls.js
 create mode 100644 public/javascripts/dragdrop.js
 create mode 100644 public/javascripts/effects.js
 create mode 100644 public/javascripts/prototype.js
 create mode 100644 public/javascripts/rails.js
 create mode 100644 public/robots.txt
 create mode 100644 public/stylesheets/.gitkeep
 create mode 100755 script/rails
 create mode 100644 test/performance/browsing_test.rb
 create mode 100644 test/test_helper.rb
 create mode 100644 vendor/plugins/.gitkeep
</pre>

次に、<code>heroku create</code>コマンドを使って、Heroku上にリポジトリを作成します。

<pre class="console">
> <kbd>heroku create heroku-demo</kbd>
Creating heroku-demo...... done
Created http://heroku-demo.heroku.com/ | git@heroku.com:heroku-demo.git
Git remote heroku added
</pre>

<dl>
<dt class="notice">Notice</dt>
<dd>最初に<code>heroku create</code>コマンドを実行すると、SSLで接続する旨のメッセージが表示されることがあります。ここであらかじめ用意しておいた$HOME/.ssh/id_rsa.pubが使われます。</dd>
</dd>
</dl>

最後にHeroku上のリポジトリにローカルのコミットを反映させるのですが、その前に、Heroku上で使用するRubyのバージョンを変更しなければいけません。

<code>heroku stack</code>コマンドを実行すると現在Heroku上でどのRubyのバージョンが使われているのかがわかります。

<pre class="console">
> <kbd>heroku stack</kbd>
* aspen-mri-1.8.6
  bamboo-ree-1.8.7 (beta)
  bamboo-mri-1.9.1 (beta)
</pre>

Rails3はRuby1.9.1で動かしますので、<code>heroku stack:migrate bamboo-mri-1.9.1</code>と入力してHeroku上のRubyの動作バージョンを変更します。

<pre class="console">
> <kbd>heroku stack:migrate bamboo-mri-1.9.1</kbd>
-----> Preparing to migrate heroku-demo
       aspen-mri-1.8.6 -> bamboo-mri-1.9.1
 
       NOTE: You must specify ALL gems (including Rails) in manifest
 
       Please read the migration guide:        http://docs.heroku.com/bamboo
 
-----> Migration prepared.
       Run 'git push heroku master' to execute migration.
</pre>

最後に、<code>git push heroku master</code>コマンドで、Herokuにローカルのコミットを反映させます。

<pre class="console">
> <kbd>git push heroku master</kbd>
Warning: Permanently added the RSA host key for IP address 'xx.xxx.xxx.xx' to the list of known hosts.
Counting objects: 62, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (47/47), done.
Writing objects: 100% (62/62), 80.12 KiB, done.
Total 62 (delta 2), reused 0 (delta 0)
 
-----> Heroku receiving push
-----> Migrating from aspen-mri-1.8.6 to bamboo-mri-1.9.1
 
-----> Gemfile detected, running Bundler
       Unresolved dependencies detected; Installing...
       Fetching source index from http://rubygems.org/
       Using rake (0.8.7) from system gems
       Installing abstract (1.0.0) from rubygems repository at http://rubygems.org/
       Installing builder (2.1.2) from rubygems repository at http://rubygems.org/
       Installing i18n (0.3.7) from rubygems repository at http://rubygems.org/
       Installing memcache-client (1.8.3) from rubygems repository at http://rubygems.org/
       Installing tzinfo (0.3.22) from rubygems repository at http://rubygems.org/
       Installing activesupport (3.0.0.beta3) from rubygems repository at http://rubygems.org/
       Installing activemodel (3.0.0.beta3) from rubygems repository at http://rubygems.org/
       Installing erubis (2.6.5) from rubygems repository at http://rubygems.org/
       Installing rack (1.1.0) from rubygems repository at http://rubygems.org/
       Installing rack-mount (0.6.3) from rubygems repository at http://rubygems.org/
       Installing rack-test (0.5.4) from rubygems repository at http://rubygems.org/
       Installing actionpack (3.0.0.beta3) from rubygems repository at http://rubygems.org/
       Using mime-types (1.16) from system gems
       Installing polyglot (0.3.1) from rubygems repository at http://rubygems.org/
       Installing treetop (1.4.8) from rubygems repository at http://rubygems.org/
       Installing mail (2.2.1) from rubygems repository at http://rubygems.org/
       Installing text-hyphen (1.0.0) from rubygems repository at http://rubygems.org/
       Installing text-format (1.0.0) from rubygems repository at http://rubygems.org/
       Installing actionmailer (3.0.0.beta3) from rubygems repository at http://rubygems.org/
       Installing arel (0.3.3) from rubygems repository at http://rubygems.org/
       Installing activerecord (3.0.0.beta3) from rubygems repository at http://rubygems.org/
       Installing activeresource (3.0.0.beta3) from rubygems repository at http://rubygems.org/
       Installing bundler (0.9.25) from rubygems repository at http://rubygems.org/
       Installing thor (0.13.6) from rubygems repository at http://rubygems.org/
       Installing railties (3.0.0.beta3) from rubygems repository at http://rubygems.org/
       Installing rails (3.0.0.beta3) from rubygems repository at http://rubygems.org/
       Installing sqlite3-ruby (1.2.5) from rubygems repository at http://rubygems.org/
       with native extensions <span style="color:Lime">Your bundle is complete! Use `bundle show gemname` to see where a bundled gem is installed.</span>
       Locking environment
-----> Rails app detected
-----> Detected Rails is not set to serve static_assets
       Installing rails3_serve_static_assets... done
       Compiled slug size is 3.9MB
-----> Launching........... done
       http://heroku-demo.heroku.com deployed to Heroku
 
-----> Migration complete, your app is now running on bamboo-mri-1.9.1
 
To git@heroku.com:heroku-demo.git
* [new branch]      master -> master
</pre>

<a href="http://heroku-demo.heroku.com/" target="_blank" class="extlink">http://heroku-demo.heroku.com/</a>にアクセスして、Railsの画面が表示されれば完了です。あとは、ローカルで開発して、<code>git push heroku master</code>でHeroku上にコミットを反映するたびにRailsがデプロイされます。
-----
EXCERPT:
<img src="http://hamasyou.com/images/heroku/heroku.png" width="20%" height="20%"  border="0" alt="Heroku" />
-----
KEYWORDS:
Ruby, Ruby on Rails, Heroku
-----


PING:
TITLE: herokuでgit pushした時のエラーの対処
URL: http://tech.gowest.co.jp/?p=117
IP: 210.48.230.75
BLOG NAME: GoWest Lab
DATE: 09/15/2010 11:05:40 PM
Rails3のアプリケーションをクラウドサービスの&lt;a href=&#8221;http://www.heroku.com&#8221;&gt;He...
-----

PING:
TITLE: [ruby]Herokuを使って1日1回名言をツイートするTwitter Botの作り方
URL: http://d.hatena.ne.jp/ruedap/20110209/ruby_heroku_twitter_bot
IP: 59.106.108.66
BLOG NAME: アインシュタインの電話番号&#9742;
DATE: 02/09/2011 09:15:16 AM
 ここ最近、Google App EngineやHerokuを使ってTwitter Botを作ろうと、いろいろ実験していた。以下はその関連記事。 Goog...
-----

PING:
TITLE: バッグ
URL: http://www.robotswillkillus.com/
IP: 142.4.210.78
BLOG NAME: バッグ
DATE: 12/26/2013 10:50:52 PM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: バッグ
URL: http://www.robotswillkillus.com/%E3%82%B7%E3%83%BC%E3%83%90%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%A8-%E3%83%90%E3%83%83%E3%82%B0-c-223_225.html
IP: 142.4.210.78
BLOG NAME: バッグ
DATE: 12/27/2013 02:39:11 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: クラッチバッグ
URL: http://www.thailandmfr.com/%E3%83%90%E3%83%83%E3%82%B0-%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%83%90%E3%83%83%E3%82%B0-c-10_12.html
IP: 142.4.210.78
BLOG NAME: クラッチバッグ
DATE: 12/28/2013 10:29:48 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: バッグ
URL: http://www.lifewitheverybreath.com/chloe-%E3%83%90%E3%83%83%E3%82%B0-c-223_225.html
IP: 142.4.210.78
BLOG NAME: バッグ
DATE: 12/28/2013 04:16:17 PM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: 人気 バッグ
URL: http://www.heartlandfootball.org/
IP: 142.4.210.78
BLOG NAME: 人気 バッグ
DATE: 12/31/2013 05:09:58 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: バッグ
URL: http://www.thailandmfr.com/%E3%83%90%E3%83%83%E3%82%B0-c-10.html
IP: 142.4.210.78
BLOG NAME: バッグ
DATE: 01/03/2014 09:06:06 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: ショルダーバッグ
URL: http://www.heartlandfootball.org/%E3%83%90%E3%83%83%E3%82%B0-%E3%82%B7%E3%83%A7%E3%83%AB%E3%83%80%E3%83%BC%E3%83%90%E3%83%83%E3%82%B0-c-10_17.html
IP: 142.4.210.78
BLOG NAME: ショルダーバッグ
DATE: 01/04/2014 03:09:13 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: 財布/小物
URL: http://www.naplestransportationjobs.com/%E3%82%B7%E3%83%BC%E3%83%90%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%A8-%E8%B2%A1%E5%B8%83%E5%B0%8F%E7%89%A9-c-223_224.html
IP: 142.4.210.78
BLOG NAME: 財布/小物
DATE: 01/04/2014 11:39:58 PM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: 財布/小物
URL: http://www.lifewitheverybreath.com/burberry-%E8%B2%A1%E5%B8%83%E5%B0%8F%E7%89%A9-c-175_176.html
IP: 142.4.210.78
BLOG NAME: 財布/小物
DATE: 01/05/2014 07:42:39 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: シャネル ボストンバッグ
URL: http://www.robotswillkillus.com/%E3%82%B7%E3%83%A3%E3%83%8D%E3%83%AB-%E3%82%B7%E3%83%A3%E3%83%8D%E3%83%AB-%E3%83%9C%E3%82%B9%E3%83%88%E3%83%B3%E3%83%90%E3%83%83%E3%82%B0-c-13_109.html
IP: 142.4.210.78
BLOG NAME: シャネル ボストンバッグ
DATE: 01/06/2014 10:17:38 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: シャネル ピアス　イヤリング
URL: http://www.naplestransportationjobs.com/%E3%82%B7%E3%83%A3%E3%83%8D%E3%83%AB-%E3%82%B7%E3%83%A3%E3%83%8D%E3%83%AB-%E3%83%94%E3%82%A2%E3%82%B9%E3%80%80%E3%82%A4%E3%83%A4%E3%83%AA%E3%83%B3%E3%82%B0-c-13_67.html
IP: 142.4.210.78
BLOG NAME: シャネル ピアス　イヤリング
DATE: 01/19/2014 11:59:46 PM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: ルイ ヴィトン
URL: http://www.robotswillkillus.com/%E3%83%AB%E3%82%A4-%E3%83%B4%E3%82%A3%E3%83%88%E3%83%B3-c-4.html
IP: 142.4.210.78
BLOG NAME: ルイ ヴィトン
DATE: 01/21/2014 05:12:01 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: トートバッグ
URL: http://www.thailandmfr.com/%E3%83%88%E3%83%BC%E3%83%88%E3%83%90%E3%83%83%E3%82%B0-c-6.html
IP: 142.4.210.78
BLOG NAME: トートバッグ
DATE: 01/22/2014 04:21:31 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: 財布/小物
URL: http://www.gbasecrets.com/%E3%82%AF%E3%83%AD%E3%82%A8-%E8%B2%A1%E5%B8%83%E5%B0%8F%E7%89%A9-c-186_187.html
IP: 142.4.210.78
BLOG NAME: 財布/小物
DATE: 01/23/2014 12:13:01 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: グッチ KIDS&BABY
URL: http://www.dannisblog.com/%E3%82%B0%E3%83%83%E3%83%81-kidsbaby-c-27.html
IP: 142.4.210.131
BLOG NAME: グッチ KIDS&BABY
DATE: 01/29/2014 04:11:32 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: シャネル 長財布
URL: http://www.midi-cable.net/
IP: 142.4.210.131
BLOG NAME: シャネル 長財布
DATE: 01/30/2014 05:35:19 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: UGG ベイリーボタン Kids
URL: http://www.activelinkdirectory.com/
IP: 142.4.210.131
BLOG NAME: UGG ベイリーボタン Kids
DATE: 02/01/2014 02:01:13 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: 財布/小物
URL: http://www.1christian-t-shirts.com/%E3%83%AD%E3%82%A8%E3%83%99-%E8%B2%A1%E5%B8%83%E5%B0%8F%E7%89%A9-c-200_201.html
IP: 142.4.210.131
BLOG NAME: 財布/小物
DATE: 02/01/2014 09:51:18 PM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

PING:
TITLE: 長財布
URL: http://www.thailandmfr.com/%E8%B2%A1%E5%B8%83-%E9%95%B7%E8%B2%A1%E5%B8%83-c-1_2.html
IP: 142.4.210.131
BLOG NAME: 長財布
DATE: 02/04/2014 10:43:43 AM
HerokuでRuby1.9とRails3を使う - それはBooks
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: mixiアプリをつくろう!OpenSocialで学ぶソーシャルアプリ
BASENAME: mixiアプリをつくろうopensocialで学ぶソーシャルアプリ
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/21/2010 01:58:56 PM
TAGS: mixi,OpenSocial,ソーシャルアプリ
-----
BODY:
本書は、mixiアプリを作りながら <strong>OpenSocial</strong> プラットフォームを学ぶ入門書です。日本でソーシャルアプリといえば、mixi、モバゲー、GREE などが挙がりますが本書ではその中でも mixi アプリ開発の手順や作り方、作る際のポイントなどを解説しています。

ソーシャルアプリ開発というとまずは SNS (ソーシャル・ネットワーキング・サービス)を立ち上げ無ければならないと考えがちですが、mixi、モバゲー、GREE などの SNS ですでに成功しているところから、これらの SNS で動くアプリケーションを開発するための API や開発環境などが提供されています。

本書は、ソーシャルアプリケーション開発が初めての人やソーシャルアプリって何ができるの？という人向けになっています。そこそこボリュームのあるサンプルを作りながら、ソーシャルアプリってこんなことができるんだ！？ということを学んでいける用になっています。
-----
EXTENDED BODY:
<h2>mixiアプリ</h2>

本書は、mixi アプリを作りながらソーシャルアプリケーションとは何か、どんなものを作れるのかを学んでいけるように成っています。SNS 上で実行されるアプリケーションは簡単に何百、何千、何万という PV が予想されます。そういった実行環境ですので、各 SNS 提供会社によっアプリケーション開発の登録申請の仕方がことなります。mixi はその中でも個人デベロッパーでも開発を許していて、手軽にソーシャルアプリの開発を行うことができるようになっています。

<h3>ソーシャルアプリケーション開発の用語</h3>

<dl>
<dt>ソーシャルネットワーキング</dt>
<dd>
人同士のつながりを組み合わせていくシステムのこと。人と人とのつながりをウェブ上に持ち込んだものの成功例の一つが SNS （ソーシャル・ネットワーキング・システム）と呼ばれる。
</dd>
<dt>OpenSocial</dt>
<dd>
どんな SNS でもソーシャルアプリを作れるように裏側の仕組みを共通化しようという試み。OpenSocial 仕様のアプリケーションのことを OpenSocial アプリという。mixi アプリもそのひとつ。
</dd>
<dt>OpenID</dt>
<dd>
Web 上のいろいろなサービスを利用する際には各サービス毎のアカウント（ログインIDとパスワードの組み）が必要になる。しかし、利用するサービスが多くなってくるとアカウントの管理が大変になってしまう。そこで、OpenID という信頼できる保証元となるサービスが発行するアカウント一つで各サービスを利用できるようにする仕組みが考え出された。<a href="http://mixi.jp/" target="_blank" class="extlink">ミクシィ</a> も保証元の一つ。
</dd>
<dt>OAuth</dt>
<dd>
サービスのなかには、自分に成り代わって自分の日記やメールなどを処理してくれるものがある。それらのサービスでは、自分のアカウント情報を教える必要があります。しかし、サービスの中には悪意のあるサービスがあり、入力されたログインIDとパスワードを不正に利用されてしまう可能性があるため、自分のアカウント情報は教えたくない。その際に利用できるものとして OAuth がある。OAuth を使えば、サービスに対して自分のログインID、パスワードを教えることなくアカウント情報を利用させることができる。
</dd>
</dl>

<h2>目次</h2>

技術の入門書なので中身のおぼえがきよりも目次をみて内容を判断してもらえればと思います。こんなことが知りたかった！っというものがあれば、たぶんそれはこの本を読むと良いと思います。入門書としては良書だと思います。

<ol>
  <li>OpenSocialの基本を理解し、アプリを企画しよう
    <ol>
    <li>はじめに</li>
    <li>どんなアプリを企画し、何をつくるか</li>
    <li>ソーシャル化するウェブ</li>
    <li>ソーシャル化のムーブメントとそれを支える技術</li>
    <li>国内・海外で人気のソーシャルサービス</li>
    </ol>
  </li>
  <li>開発環境を整えよう
    <ol>
    <li>開発にあたって</li>
    <li>開発に必要な知識</li>
    <li>開発に便利なツール（クライアント編）</li>
    <li>開発に必要な環境（サーバ編）</li>
    <li>mixiアプリ固有の機能を使ったアプリ開発</li>
    <li>パートナー登録、デベロッパー登録</li>
    </ol>
  </li>
  <li>基本構成の理解とアレンジ
    <ol>
    <li>Gadget XMLの構成</li>
    <li>OpenSocial JavaScript APIとその利用</li>
    <li>もっとも簡単なmixiアプリ</li>
    <li>ファイルの分離とopensocial-jqueryのトッピング</li>
    <li>コンテナからプロフィール情報を取得する</li>
    <li>永続化データの保存</li>
    <li>アクティビティの送信、マイミクの招待</li>
    <li>mixiアプリ固有のAPIを利用する</li>
    <li>アプリ開発お勧めテンプレート</li>
    </ol>
  </li>
  <li>SNSと融合したアプリ作り
    <ol>
    <li>ソーシャルアプリのレイアウト</li>
    <li>HTMLを用いたレイアウトとイベントの割り付け</li>
    <li>Flashを用いたレイアウトとムービの組み込み</li>
    <li>canvasビューの様々な活用方法</li>
    <li>アプリの画面遷移を見直そう</li>
    <li>友達間での利用を想定してアプリをテストしよう</li>
    </ol>
  </li>
  <li>外部サーバを利用しよう
    <ol>
    <li>なぜ外部サーバが必要なのか</li>
    <li>外部サーバへのリクエスト方法</li>
    <li>安全な外部リクエストを実行するには</li>
    <li>OAuthを活用した外部サービス連携</li>
    <li>外部サーバの選択肢</li>
    <li>開発時のキャッシュコントロール</li>
    </ol>
  </li>
  <li>ソーシャルグラフの活用
    <ol>
    <li>ソーシャルグラフとは</li>
    <li>コンテナごとのソーシャルグラフの考え方</li>
    <li>ソーシャルグラフからマイミク一覧を取得する</li>
    <li>マイミクをアプリに招待する</li>
    <li>アクティビティの実例、ルールと対策</li>
    <li>アプリ体験を共有してクチコミを喚起する</li>
    </ol>
  </li>
  <li>外部サービスと連携したマッシュアップ
    <ol>
    <li>アプリにウェブ検索機能を埋め込む</li>
    <li>YouTubeやニコニコ動画との連携</li>
    <li>Amazon.comや食ログとの連携</li>
    <li>Google Maps APIとの連携</li>
    <li>アプリの情報をTwitterに投稿する</li>
    <li>Web APIの負荷とチューニング</li>
    </ol>
  </li>
  <li>ソーシャルゲームの開発
    <ol>
    <li>ソーシャルゲームの特性</li>
    <li>ソーシャル性を活かしたゲームアプリ企画</li>
    <li>1人であそぶ「じゃんけんゲーム」を作ろう</li>
    <li>友達と競う「アプリマーケット」を作ろう</li>
    <li>アプリにランキングを導入しよう</li>
    <li>ライフサイクルイベントによるインセンティブの付与</li>
    <li>仮想通貨の導入・PayPallによるポイント決済</li>
    </ol>
  </li>
  <li>モバイル版mixiアプリの開発
    <ol>
    <li>モバイル版OpenSocial環境の登場</li>
    <li>モバイル版mixiアプリの作り方</li>
    <li>モバイル版アプリの注意点</li>
    <li>RESTful Data APIを使ったPC版アプリの作成</li>
    </ol>
  </li>
  <li>実践アプリ運用
    <ol>
    <li>アプリの開発体制とマネタイズ</li>
    <li>アプリ開発・運営のリスクを知ろう</li>
    <li>アプリ公開に先駆けてのチェックリスト</li>
    <li>アプリをPRしよう</li>
    <li>アクセス解析を導入しよう</li>
    <li>データベースの運用とバックアップ</li>
    <li>アプリのアップデートと複数アプリの運営</li>
    <li>ユーザとコミュニケーションしよう</li>
    </ol>
  </li>
</ol>

<h2>参考</h2>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/%E3%82%BD%E3%83%BC%E3%82%B7%E3%83%A3%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E5%85%A5%E9%96%80-SNS%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%81%AE%E4%BC%81%E7%94%BB%E3%83%BB%E9%96%8B%E7%99%BA%E3%83%BB%E9%81%8B%E5%96%B6%E3%82%AC%E3%82%A4%E3%83%89-%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE%E3%82%AF%E3%82%B9%E3%83%BC%E3%83%AB/dp/4798121339%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798121339" target="_blank">ソーシャルアプリ入門 SNSプラットフォームビジネスの企画・開発・運営ガイド</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/%E3%82%BD%E3%83%BC%E3%82%B7%E3%83%A3%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E5%85%A5%E9%96%80-SNS%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%81%AE%E4%BC%81%E7%94%BB%E3%83%BB%E9%96%8B%E7%99%BA%E3%83%BB%E9%81%8B%E5%96%B6%E3%82%AC%E3%82%A4%E3%83%89-%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE%E3%82%AF%E3%82%B9%E3%83%BC%E3%83%AB/dp/4798121339%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798121339" target="_blank"><img src="http://ecx.images-amazon.com/images/I/5116dsr-wAL._SL160_.jpg" border="0" alt="ソーシャルアプリ入門 SNSプラットフォームビジネスの企画・開発・運営ガイド" /></a></td><td valign="top"><font size="-1">株式会社クスール 株式会社dango 株式会社クレイ 株式会社マイクロアド 富川 真也 新井 隆祥 <br /><br />翔泳社  2010-05-29<br />売り上げランキング : 7796<br /><br /><br /><a href="http://www.amazon.co.jp/%E3%82%BD%E3%83%BC%E3%82%B7%E3%83%A3%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E5%85%A5%E9%96%80-SNS%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%81%AE%E4%BC%81%E7%94%BB%E3%83%BB%E9%96%8B%E7%99%BA%E3%83%BB%E9%81%8B%E5%96%B6%E3%82%AC%E3%82%A4%E3%83%89-%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE%E3%82%AF%E3%82%B9%E3%83%BC%E3%83%AB/dp/4798121339%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798121339" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/OpenSocial%E5%85%A5%E9%96%80-%7E%E3%82%BD%E3%83%BC%E3%82%B7%E3%83%A3%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9F%E8%B7%B5%E9%96%8B%E7%99%BA-%E7%94%B0%E4%B8%AD-%E6%B4%8B%E4%B8%80%E9%83%8E/dp/4774137480%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774137480" target="_blank">OpenSocial入門 ~ソーシャルアプリケーションの実践開発</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/OpenSocial%E5%85%A5%E9%96%80-%7E%E3%82%BD%E3%83%BC%E3%82%B7%E3%83%A3%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9F%E8%B7%B5%E9%96%8B%E7%99%BA-%E7%94%B0%E4%B8%AD-%E6%B4%8B%E4%B8%80%E9%83%8E/dp/4774137480%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774137480" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61fB3GEbkrL._SL160_.jpg" border="0" alt="OpenSocial入門 ~ソーシャルアプリケーションの実践開発" /></a></td><td valign="top"><font size="-1">田中 洋一郎 <br /><br />技術評論社  2009-01-24<br />売り上げランキング : 70350<br /><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif" alt="star" />内容の濃い良書<br /><br /><a href="http://www.amazon.co.jp/OpenSocial%E5%85%A5%E9%96%80-%7E%E3%82%BD%E3%83%BC%E3%82%B7%E3%83%A3%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9F%E8%B7%B5%E9%96%8B%E7%99%BA-%E7%94%B0%E4%B8%AD-%E6%B4%8B%E4%B8%80%E9%83%8E/dp/4774137480%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774137480" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A8%E3%81%A4%E3%81%AA%E3%81%8C%E3%82%8Bmixi%E3%82%A2%E3%83%97%E3%83%AA%E3%83%91%E3%83%BC%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%AC%E3%82%A4%E3%83%89-SAKURA%E3%83%BBMOOK-51/dp/4773015365%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4773015365" target="_blank">みんなとつながるmixiアプリパーフェクトガイド (SAKURA・MOOK 51)</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A8%E3%81%A4%E3%81%AA%E3%81%8C%E3%82%8Bmixi%E3%82%A2%E3%83%97%E3%83%AA%E3%83%91%E3%83%BC%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%AC%E3%82%A4%E3%83%89-SAKURA%E3%83%BBMOOK-51/dp/4773015365%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4773015365" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61qU7n2dAAL._SL160_.jpg" border="0" alt="みんなとつながるmixiアプリパーフェクトガイド (SAKURA・MOOK 51)" /></a></td><td valign="top"><font size="-1"><br />笠倉出版社  2010-02-24<br />売り上げランキング : 215063<br /><br /><strong>おすすめ平均  </strong><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" /><br /><img src="http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif" alt="star" />mixiアプリに始めたばかり人にはオススメ<br /><br /><a href="http://www.amazon.co.jp/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%A8%E3%81%A4%E3%81%AA%E3%81%8C%E3%82%8Bmixi%E3%82%A2%E3%83%97%E3%83%AA%E3%83%91%E3%83%BC%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%AC%E3%82%A4%E3%83%89-SAKURA%E3%83%BBMOOK-51/dp/4773015365%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4773015365" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Ruby-Rails%E6%90%BA%E5%B8%AF%E3%82%B5%E3%82%A4%E3%83%88%E9%96%8B%E7%99%BA%E6%8A%80%E6%B3%95-%E4%BC%8A%E8%97%A4-%E7%A5%90%E7%AD%96/dp/4797358785%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797358785" target="_blank">Ruby on Rails携帯サイト開発技法</a><img src="http://www.assoc-amazon.jp/e/ir?t=sorehabooks-22&l=ur2&o=9" width="1" height="1" style="border: none;" alt="" /></td></tr><tr><td valign="top"><a href="http://www.amazon.co.jp/Ruby-Rails%E6%90%BA%E5%B8%AF%E3%82%B5%E3%82%A4%E3%83%88%E9%96%8B%E7%99%BA%E6%8A%80%E6%B3%95-%E4%BC%8A%E8%97%A4-%E7%A5%90%E7%AD%96/dp/4797358785%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797358785" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51JwLD%2BqNiL._SL160_.jpg" border="0" alt="Ruby on Rails携帯サイト開発技法" /></a></td><td valign="top"><font size="-1">伊藤 祐策 富田 陽介 三上 喜之 <br /><br />ソフトバンククリエイティブ  2010-04-30<br />売り上げランキング : 160501<br /><br /><br /><a href="http://www.amazon.co.jp/Ruby-Rails%E6%90%BA%E5%B8%AF%E3%82%B5%E3%82%A4%E3%83%88%E9%96%8B%E7%99%BA%E6%8A%80%E6%B3%95-%E4%BC%8A%E8%97%A4-%E7%A5%90%E7%AD%96/dp/4797358785%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797358785" target="_blank">Amazonで詳しく見る</a></font><font size="-2"> by <a href="http://www.goodpic.com/mt/aws/index.html" >G-Tools</a></font></td></tr></table>
</div>

-----
EXCERPT:
<img src="http://ec2.images-amazon.com/images/I/512JkXBS6AL._SL500_AA300_.jpg" border="0" alt="mixiアプリをつくろう!OpenSocialで学ぶソーシャルアプリ" />
-----
KEYWORDS:
4881667327,978-4881667323,mixi,mixiアプリ,ソーシャル,OpenSocial,ソーシャルアプリ
-----


-----
CF50_CF_4: 神部 竜二 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/512JkXBS6AL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4881667327?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4881667327
CF50_CF: ソーテック社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: メタプログラミングRuby
BASENAME: ruby_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 09/06/2010 08:17:00 PM
TAGS: Ruby,メタプログラミング
-----
BODY:
<strong>Ruby</strong> が人気のあるプログラミング言語である理由のひとつに、強力なメタプログラミングがあると思います。Ruby の本当の力を知るのは、このメタプログラミングを理解したときだとも思います。

本書は、Ruby の内部動作をきちんと説明した上で、メタプログラミングの説明をしてくれます。とても丁寧な説明で、少しでもプログラミングの知識があれば理解できる文章になっています。

プログラミング能力を高めるひとつの方法に、良いソースコードを読むことというのがあります。Ruby で書かれたフレームワークやライブラリのソースコードを読むと、なんでこんな動作になるんだろう？という疑問や、どうしてこんな風に書けるのだろう？という疑問が湧いてきます。

本書を読むと、そういった疑問の一つ一つが本当に紐を解くように理解できるようになります。Ruby の基礎を勉強した初級者が中級者になろうと思ったときに、ぜひ読むべき本だと思います。
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

本書のおぼえがきです。

<h2>本書のまとめ</h2>

<h3>クラスはオブジェクト</h3>

オブジェクトにクラスがあるように、クラスにもクラスがあります。クラスのクラスは Class クラスです。

<h3>インスタンス変数はインスタンス、メソッドはクラスの持ち物</h3>

インスタンス変数はインスタンスごとにもっていますが、メソッドはインスタンスのクラスに定義されます。

<h3>class キーワードはクラスを定義するのではなくクラスをオープンする</h3>

class キーワードはクラスをオープンします。既存のクラスに対して使えば再オープンできて、メソッドの追加やモンキーパッチができるし、新規のクラスに対して使えば、そのクラスを定義することになります。

<h3>カレントオブジェクトとカレントクラス</h3>

Ruby のプログラムは常にカレントオブジェクト self とカレントクラスを持っています。

<h3>self が何を指すかに注意する</h3>

Ruby はクラスもオブジェクトなので、class キーワードでクラスをオープンすると self はクラスを指し示します。

<h3>メソッドを定義するとカレントクラスのインスタンスメソッドになる</h3>

def で定義されたすべてのメソッドはカレントクラスのインスタンスメソッドになります。

また、メソッドはインスタンスメソッドになるので、メソッドの中では self はメソッドを呼び出したインスタンス自身を指すことになります。

<h3>クラスのインスタンスの特異メソッドとクラスメソッドは同じ仕組み</h3>

クラスのインスタンスに特異メソッドを定義するには、def obj.my_method のようにします。

クラスもオブジェクトなので、同じように特異メソッドを定義できます。def MyClass.my_method というのは MyClass で指し示しているオブジェクト（つまりクラス）に特異メソッドを定義していることになります。

class キーワードでクラスをオープンすると、クラス定義のスコープでは、self はカレントクラスを指すので、

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> <span class="keyword">self</span>.my_method
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

と 

<pre class="code"><span class="keyword">def</span> MyClass.my_method
<span class="keyword">end</span></pre>

は同じことをしていることになります。

<h3>特異メソッドは特異クラスに定義される</h3>

メソッドを定義するとクラスのインスタンスメソッドになります。特異メソッドも例外ではなく、クラスのインスタンスメソッドとして定義されます。

では、特異メソッドはどのクラスのインスタンスメソッドになるかというと、特異メソッドは特異クラスという特別なクラスのインスタンスメソッドとして定義されます。

<h3>クラスの特異クラスにメソッドを定義することは、クラスメソッドを定義すること</h3>

クラスメソッドはクラスのインスタンスに特異メソッドを定義するのと同じ方法で定義されることは、上にもまとめました。

つまり、クラスメソッドはクラスの特異クラスにメソッドを定義することと同じなので、特異クラスにインスタンスメソッドを定義することはクラスメソッドを定義することになります。

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">class</span> &lt;&lt; <span class="keyword">self</span>
    <span class="keyword">def</span> hello
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

で、MyClass.hello が定義できます。

<h3>特異クラスのスコープに入るには class &lt;&lt; obj 構文を使う</h3>

特異クラスのスコープに入るには class &lt;&lt; obj 構文をつかいます。特異クラスはインスタンスをひとつしかもてません。そのため、<strong>シングルトン</strong>とも呼ばれます。

<h3>private メソッドのルール</h3>

private メソッドは明示的なレシーバをつけて呼び出すことができないというものです。

Ruby のルールでは他のオブジェクトのメソッドを呼び出すにはレシーバを明示しなければいけないので、private メソッドは他のオブジェクトからは呼び出せません。

<h2>オープンクラス</h2>

Ruby は、既存のクラスを再オープンしていつでもクラスを修正することができる、<strong>オープンクラス</strong>という技術があります。このオープンクラスを使って、既存のクラスのバグを修正したり、既存のクラスにメソッドを追加したりすることを<strong>モンキーパッチ</strong>と呼びます。

<h3>オープンクラスの使い方</h3>

<blockquote>

Ruby の <em>class</em> キーワードは、クラス宣言というよりもスコープ演算子のようなものである。もちろん、存在しないクラスは作成する。しかしそれは、副作用と言ってもいいかもしれない。<em>class</em> の主な仕事は、あなたをクラスのコンテキストにつれていくことである。そのコンテキストであなたがメソッドを定義する。

<cite>クラス定義の中身 - 本書P.41</cite>

</blockquote>

Ruby でクラスの再オープンをするには、次のように通常のクラス宣言のように書きます。

<pre class="code"><code><span class="keyword">class</span> String
  <span class="keyword">def</span> hoge
    <span class="comment"># 追加したいメソッドの中身</span>
  <span class="keyword">end</span>
  
  <span class="keyword">def</span> replace   <span class="comment"># &lt;-- すでに String クラスに定義されている</span>
    <span class="comment"># モンキーパッチしたい中身</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></code></pre>
<div class="clear"></div>

1行目で String クラスを再オープンして、 2行目で hoge メソッドを String クラスに追加しています。また、6行目で既存のメソッド replace を再オープンしてモンキーパッチしています。

<h2>インスタンス変数、メソッド、クラス、定数、モジュール</h2>

<h3>インスタンス変数</h3>

インスタンス変数とは、クラスのインスタンスがもつ変数のことです。オブジェクトに対して、<em>instance_variables()</em> を呼び出すことで、そのオブジェクトが持つインスタンス変数の一覧を取得できます。<em>インスタンス変数はインスタンスに所属します。</em>

<h3>メソッド</h3>

メソッドには、インスタンスメソッドとクラスメソッドがあります。<strong>Ruby ではメソッドはクラスに所属します。</strong>そのため、クラスには <em>Object.instance_methods</em> と <em>Object.methods</em> という2つのメソッドが用意されています。

<pre class="code">String.instance_methods == <span class="str">&quot;hoge&quot;</span>.methods  <span class="rem"># true</span></pre>

メソッドはクラスに所属するのでインスタンス間で共有されますが、インスタンス変数はインスタンスごとに割り当てられるため値がごっちゃになることはありません。

<h3>クラス</h3>

<blockquote>

クラスはオブジェクトである。だから、オブジェクトに当てはまるものはクラスにも当てはまる。オブジェクトと同じように、クラスにもクラスがある。クラスは Class クラスのインスタンスなのだ。

<pre class="code"><code><span class="str">&quot;hello&quot;</span>.<span class="keyword">class</span>    <span class="rem"># String</span>
String.<span class="keyword">class</span>     <span class="rem"># Class</span></code></pre>

<cite>クラス再訪 - 本書P.47</cite>

</blockquote>

クラスはオブジェクトで、<strong>クラス名は定数</strong>です。

<h3>定数</h3>

<blockquote>

Ruby では大文字で始まる参照は、クラス名やモジュール名も含めて、すべて<em>定数</em>である。定数のスコープには、変数のスコープとは異なるルールがある。

<cite>定数 - 本書P.49</cite>

</blockquote>

定数はディレクトリのようにツリー上にならんでいて、モジュールを使うことで <em>MyModule::MyClass::MyConst</em> のように書くことができるようになります。このように使うモジュールのことを<strong>ネームスペース</strong>と呼んでいます。

既存のクラスやモジュール名と同名の参照を定義するとオープンクラスになってしまうので、ネームスペースを使って自分のクラスを判別できるようにすると行儀の良いプログラムになります。

<h3>メソッド探索</h3>

メソッドを呼び出すことは、<strong>レシーバに対してメッセージを送ること</strong>と言われます。レシーバとは、メソッドを呼び出したオブジェクトのことです。Ruby はメソッドを呼び出すと次の二つのことを行ないます。

<ol><li>呼び出すメソッドを探す。これを<strong>メソッド探索</strong>と呼びます。</li>
<li>メソッドを呼び出す。これには <em>self</em> が必要になります。</li></ol>

Ruby はメソッドを呼び出す際に、レシーバの継承チェーンをたどってメソッドを見つけ出します。継承チェーンをたどる、とはクラスの親クラスを上にたどっていくことです。

<h3>モジュールはクラスをラップする</h3>

<blockquote>

モジュールをクラスに（あるいは別のモジュールに）インクルードするとき、Ruby はちょっとしたトリックを使う。無名クラスを作ってモジュールをラップし、継承チェーンに挿入するのだ。それはインクルードするクラスの真上に入る。

<pre class="code"><code><span class="keyword">module</span> M
  <span class="keyword">def</span> my_method
    <span class="str">&quot;M#my_method()&quot;</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">class</span> C
  include M
<span class="keyword">end</span>
 
<span class="keyword">class</span> D &lt; C; <span class="keyword">end</span>
 
D.ancestors <span class="rem"># =&gt; [D, C, M, Object, Kernel, BasicObject]</span></code></pre>

<cite>モジュールとメソッド探索 - 本書P.60</cite>

</blockquote>

Ruby には print() のようなどこからでも呼び出せるメソッドがあります。これは、<em>Kernel</em> モジュールのプライベートメソッドとして定義されているからです。

Ruby はすべてのクラスのスーパークラスとして Object クラスをセットします。この Object クラスの中で Kernel モジュールがインクルードされているため、すべてのクラスの中で Kernel メソッドのプライベートメソッドが呼び出せるのです。

これを利用すると、Kernel モジュールを再オープンしてメソッドを追加すれば、どこからでも呼び出せるメソッドが定義できます。

<h3>self</h3>

<blockquote>

Ruby のコードはオブジェクト（カレントオブジェクト）の内部で実行される。カレントオブジェクトは <em>self</em> とも呼ばれる。<em>self</em> キーワードでアクセスできるからだ。

<em>self</em> の役割を担うオブジェクトは同時には複数存在しない。長時間その役割を担うオブジェクトも存在しない。メソッドを呼び出すときは、レシーバが <em>self</em> になる。その時点で、すべてのインスタンス変数は <em>self</em> のインスタンス変数になる。レシーバを明示せずにメソッドを呼び出すと、すべて <em>self</em> に対するメソッド呼び出しになる。他のオブジェクトを明示してメソッドを呼び出すと、そのオブジェクトが <em>self</em> になる。

<cite>self の発見 - 本書P.63</cite>

</blockquote>

メソッドを呼び出さない時の self 、つまりトップレベルコンテキスト（スクリプトが実行されたときの一番最初のスコープ）では、self は main という Ruby インタプリタが作成したオブジェクトの内部にいます。

<h3>private メソッドのルール</h3>

Ruby の private メソッドは他の言語と少しルールが違います。Ruby の private メソッドは次の二つのルールにしたがって実行されます。

<ol><li>Ruby は、自分以外のオブジェクトのメソッドを呼び出すには、レシーバを明示的に指定する必要がある。</li>
<li>private のついたメソッドを呼び出すときは、レシーバを指定できない。</li></ol>

つまり、private メソッドを呼び出すには、自分自身（self）にしかできないことになります。

厳密には、Ruby1.9 以前は send メソッド, Ruby1.9 からは instance_eval を使えば呼び出すことができます。

<pre class="code"><code><span class="keyword">class</span> MyClass
  private
  <span class="keyword">def</span> hoge
    <span class="str">&quot;private called&quot;</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
obj = MyClass.new
obj.send(:hoge)                 <span class="rem"># &lt;-- Ruby1.8</span>
obj.instance_eval {|o| hoge }   <span class="rem"># &lt;-- Ruby1.9</span></code></pre>

<h2>動的ディスパッチ</h2>

Ruby は、<em>send()</em> メソッドを使って呼び出したいメソッドをコードの実行時に決めることができます。これを <strong>動的ディスパッチ</strong>と呼びます。send() メソッドにはシンボルを渡すことが適当とされています。

<blockquote>

シンボルと文字列の使い分けは、基本的には慣習なのである。多くの場合、シンボルは「物」の名前に使う。特にメタプログラミングに関するメソッドのような物である。

<cite>シンボル - 本書P.76</cite>

</blockquote>

<h3>メソッドを動的に生成する</h3>

Ruby はメソッド呼び出しを動的に決めることができることの他に、<em>メソッドを動的に定義することができます。</em>メソッドを定義するには、Module#define_method() を使います。

<pre class="code"><code><span class="keyword">class</span> MyClass
  define_method :myMethod <span class="keyword">do</span> |args|
    args * <span class="num">5</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></code></pre>

define_method をつかった例を本書から抜粋し次に示します。

<section>

<h4>メソッドを動的に生成する - 本書P.81</h4>

<pre class="code"><code><span class="keyword">class</span> Computer
  <span class="keyword">def</span> initialize(computer_id, data_source)
    <span class="instance">@id</span> = computer_id
    <span class="instance">@data_source</span> = data_source
  <span class="keyword">end</span>
 
  <span class="keyword">def</span> <span class="keyword">self</span>.define_component(name)
    define_method(name) {
      info = <span class="instance">@data_source</span>.send <span class="str">&quot;get_#{name}_info&quot;</span>, <span class="instance">@id</span>
      price = <span class="instance">@data_source</span>.send <span class="str">&quot;get_#{name}_price&quot;</span>, <span class="instance">@id</span>
      result = <span class="str">&quot;#{name.to_s.capitalize}: #{info} ($#{price})&quot;</span>
      <span class="keyword">return</span> <span class="str">&quot;* #{result}&quot;</span> <span class="keyword">if</span> price &gt;= <span class="num">100</span>
      result
    }
  <span class="keyword">end</span>
 
  define_component :mouse
  define_component :cpu
  define_component :keyboard
<span class="keyword">end</span></code></pre>

</section>

<h2>method_missing</h2>

Ruby はレシーバに対して呼び出されたメソッドを継承チェーンをたどって探します。この時、Object や BasicObject までたどってもメソッド定義が見つからない場合、Ruby インタプリタは <em>method_missing</em> を呼び出します。

動的ディスパッチでは呼び出すメソッド名を動的に作り出し、<em>send()</em> メソッドで呼び出していましたが、<em>method_missing()</em> をオーバーライドすることで、呼び出したいメソッドが定義されていない場合の動作を変更して、あたかもそこにメソッドがあるかのように振舞うことができます。

<h3>responde_to? のオーバーライド</h3>

method_missing の中で呼び出したメソッドは、<strong>ゴーストメソッド</strong> と呼ばれ、実際のメソッド定義はそこにはないものとして扱われます。しかし、これでは、Object#methods の一覧に含まれません。そこで、ゴーストメソッドがあたかもそこに本当にあるかのように振舞うように、<em>respond_to?</em> をオーバーライドするようにします。

<pre class="code"><code><span class="keyword">class</span> Computer
  <span class="keyword">def</span> respond_to?(method)
    <span class="instance">@data_source</span>.respond_to?(<span class="str">&quot;get_#{method}_info&quot;</span>) || <span class="keyword">super</span>
  <span class="keyword">end</span>
  <span class="rem">#...</span>
<span class="keyword">end</span></code></pre>

<h2>ブランクスレート</h2>

動的ディスパッチやゴーストメソッドであたかもそこにメソッドがあるかのように振舞うことができますが、同名のメソッドが既存のクラスに存在するような場合は、既存のクラスのメソッドが優先的に呼び出されてしまいます。せっかく動的ディスパッチやゴーストメソッドを意図していたのに、同名のメソッドがあることによりこの前提が崩れてしまうような場合、<em>Module#undef_method()</em> または、<em>Module#remove_method()</em> を使って既存のメソッドを削除することができます。

必要なメソッド以外何も無いことを、<strong>ブランクスレート（blank slate）</strong>、白紙の状態といいます。Ruby1.9 では BasicObject を継承することでブランクスレートなクラスをつくることができます。

<h3>Module#undef_method と Module#remove_method</h3>

undef_method は継承したメソッドも含めてすべてのメソッドを削除します。remove_method はレシーバのメソッドは削除しますが、継承したメソッドはそのまま残ります。

<h4>__で始まるメソッドは削除してはいけない</h4>

Ruby には <em>__</em> で始まるメソッドが用意されています。例えば、send() メソッドに対して <em>__send__()</em> メソッド、id() メソッドに対して <em>__id__()</em> メソッドです。この __ で始まるメソッドは Ruby 内部から使われるメソッドとして予約されているため、undef_method や remove_method で削除するべきではありません。

<h2>スコープ</h2>

<h3>ブロック</h3>

<blockquote>

ブロックは単体では実行できない。コードを実行するには、ローカル変数、インスタンス変数、<em>self</em> といった環境が必要になる。これらはオブジェクトにひもづけられた名前のことで、<em>束縛</em>とも呼ばれる。ブロックとは、これらをまとめて実行するためのものである。ブロックはコードと束縛の集まりで構成される。

<cite>クロージャ - 本書P.110</cite>

</blockquote>

ブロックを定義すると、そのとき、その場所にある束縛（<em>binding</em>）を取得できます。ブロックを実行する時、この束縛も一緒にメソッドに渡されます。これにより、メソッドを実行するスコープでブロックを呼び出す変数を宣言することや設定することができるようになります。

<section>

<h4>ブロックの変数スコープの例</h4>

下の例では、メソッド定義の中で変数 msg を定義していますがメソッド定義の内部の msg は使われません。メソッドの呼び出し時にブロックを定義した際に束縛されたローカル変数 msg が使われます。

<pre class="code"><span class="keyword">def</span> greet
  msg = <span class="str">&quot;Hi &quot;</span>
  p <span class="keyword">yield</span>(<span class="str">&quot;hamasyou&quot;</span>)
<span class="keyword">end</span>
 
msg = <span class="str">&quot;Hello&quot;</span>
greet {|name| <span class="str">&quot;#{msg} #{name}&quot;</span> }</pre>

</section>

<h3>ローカル変数のスコープ</h3>

Ruby には Java や C# のような内部のスコープから外部のスコープの変数を参照できる入れ子は存在しません。外部のスコープと内部のスコープは区別されています。

<section>

<h4>変数の束縛が切り替わる例</h4>

<pre class="code">v1 = <span class="num">1</span>
 
<span class="keyword">class</span> MyClass
  v2 = <span class="num">2</span>
  local_variables
 
  <span class="keyword">def</span> my_method
    v3 = <span class="num">3</span>
    local_variables
  <span class="keyword">end</span>
 
  local_variables
<span class="keyword">end</span>
<span class="rem"># =&gt; [:v2]</span>
obj = MyClass.new
obj.my_method    <span class="rem"># =&gt; [:v3]</span>
obj.my_method    <span class="rem"># =&gt; [:v3]</span>
local_variables  <span class="rem"># =&gt; [:obj, :v1, :_]</span></pre>

トップレベルコンテキストで定義した v1 変数が MyClass の中で見えなくなっています。また、MyClass のクラススコープで定義した v2 も、my_method の中で見えなくなっています。

</section>

<h3>スコープゲート</h3>

プログラムがスコープを切り替える場所は次の3つあります。

<ul>
<li>クラス定義（<em>class</em>）</li>
<li>モジュール定義（<em>module</em>）</li>
<li>メソッド呼び出し（<em>def</em>）</li>
</ul>

これらの<strong>スコープゲート</strong>を超えて束縛をわたすには、キーワードではなくメソッドを使います。

<pre>class => Class.new
module => Module.new
def => Module#define_method()</pre>

<pre class="code">my_var = <span class="str">&quot;Hello&quot;</span>
 
MyClass = Class.new <span class="keyword">do</span>
  p <span class="str">&quot;#{my_var}&quot;</span>
 
  define_method :my_method do
    p <span class="str">&quot;#{my_var}&quot;</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

レキシカルスコープを入れ子で参照できるようにすることを、<strong>フラットスコープ</strong>と呼びます。

<h3>instance_eval()</h3>

Object#instance_eval() を使うと、オブジェクトのコンテキストでブロックを評価することができます。instance_eval() はフラットスコープで評価されるので、ローカル変数にアクセスすることができます。

<pre class="code">my_var = <span class="num">13</span>
obj.instance_eval { <span class="instance">@v</span> = my_var }
obj.instance_eval { <span class="instance">@v</span> }
<span class="rem"># =&gt; 13</span></pre>

<h2>クラス定義</h2>

<h3>メソッド定義の意味</h3>

Ruby のプログラムは常に<em>カレントオブジェクト</em> self と、<strong>カレントクラス</strong>を持っています。そして、<em>メソッドを定義すると、カレントクラスのインスタンスメソッドになります。</em>

プログラム中で、カレントオブジェクトを参照するには self を使いますが、カレントクラスを参照するキーワードはありません。

では、どうやってカレントクラスを判断すればよいかというと、<em>class</em> キーワードを見ればよいです。（目視で確認ですｗ）

class でオープンされたカレントクラスにメソッドを定義すると、そのカレントクラスのインスタンスメソッドを定義することになります。

<h3>カレントクラス</h3>

既存のクラスのコンテキストでブロックを評価する <em>Object#class_eval</em> というメソッドがあります。これを使ってクラスのオープンをすることもできます。

class キーワードを使ってクラスをオープンするにはクラス名が必要ですが、class_eval() は変数としてクラスを受け取った場合にも使うことができます。

<pre class="code"><span class="keyword">class</span> MyClass; <span class="keyword">end</span>
 
<span class="keyword">def</span> add_hello_to(a_class)
  a_class.class_eval <span class="keyword">do</span>
    <span class="keyword">def</span> hello; <span class="str">&quot;Hello&quot;</span> <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
add_hello_to MyClass
obj = MyClass.new
obj.hello
<span class="rem"># =&gt; "Hello"</span></pre>

class_eval を使うと、<em>self</em> と<em>カレントクラス</em>に変更が加えられます。instance_eval は <em>self</em> のみに変更を加えます。

<blockquote>

<em>instance_eval()</em> と <em>class_eval()</em> はどちらを使う？

「このオブジェクトをオープンしたいが、クラスのことは気にしない」ならば、instance_eval() がいい。「ここで<em>オープンクラス</em>を使いたい」ならば、class_eval() がいい。

<cite>instance_eval() と class_eval() はどちらを使う？ - 本書P.143</cite>

</blockquote>

<h3>クラスインスタンス変数とクラス変数</h3>

<strong>クラスインスタンス変数</strong>とは、クラスのインスタンス変数のことでクラスに属しています。

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="instance">@my_var</span> = <span class="num">1</span>
<span class="keyword">end</span></pre>

クラスインスタンス変数は、<em>クラスのオブジェクトのインスタンス変数</em>とは別物です。

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="instance">@v</span> = <span class="num">1</span>
  <span class="keyword">def</span> my_method
    <span class="instance">@v</span> = <span class="num">2</span>
  <span class="keyword">end</span>
  <span class="keyword">def</span> <span class="keyword">self</span>.my_method
    <span class="instance">@v</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
MyClass.my_method    <span class="rem"># =&gt; 1</span>
obj = MyClass.new
obj.my_method    <span class="rem"># =&gt; 2</span>
MyClass.my_method    <span class="rem"># =&gt; 1</span></pre>

<strong>クラス変数</strong>とは、<em>@@</em>プレフィックスを付けた変数で、<em>クラスの階層に属しています。</em>

<pre class="code"><span class="keyword">class</span> C
  <span class="instance">@@v</span> = <span class="num">1</span>
<span class="keyword">end</span>
 
<span class="keyword">class</span> D &lt; C
  <span class="keyword">def</span> my_method
    <span class="instance">@@v</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
D.new.my_method    <span class="rem"># =&gt; 1</span></pre>

クラス変数は、サブクラスからもアクセスできます。

<h2>特異メソッド</h2>

Ruby では、特定のオブジェクトにのみメソッドを追加することができます。これを<strong>特異メソッド</strong>と呼びます。

<pre class="code">msg = <span class="str">&quot;hello, my name is hamasyou&quot;</span>
 
<span class="keyword">def</span> msg.hello
  <span class="keyword">self</span>.upcase
<span class="keyword">end</span>
 
msg.hello    <span class="rem"># =&gt; "HELLO, MY NAME IS HAMASYOU"</span></pre>

<h3>特異クラスのスコープ</h3>

Ruby には class キーワードを使った特別な構文があり、これを使うことで特異クラスのスコープに入ることができます。

<pre class="code"><span class="keyword">class</span> &lt;&lt; an_object
  <span class="rem"># 特異スコープの中</span>
<span class="keyword">end</span></pre>

<section>

<h4>クラスメソッドの構文</h4>

クラスメソッドは実は、クラスの特異メソッドとなっています。つまり、クラスメソッドを定義するには、次のいずれかの方法を使うことができます。

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> <span class="keyword">self</span>.my_method; <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">def</span> MyClass.my_method; <span class="keyword">end</span>
 
<span class="keyword">class</span> MyClass
  <span class="keyword">class</span> &lt;&lt; <span class="keyword">self</span>
    <span class="keyword">def</span> my_method; <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

</section>

<h3>インスタンスに特異メソッドを動的に追加するには特異クラスにメソッドを定義する</h3>

メソッドはクラスの持ち物なので、特異メソッドを動的にインスタンスに定義するにはインスタンスの特異クラスに対してメソッドを定義してやる必要があります。

特異メソッドを動的に定義するのに、<em>instance_eval()</em> メソッドを使うことができます。

じつは、<em>instance_eval()</em> メソッドを使うとレシーバのカレントクラスを特異クラスに変更しているのです。instance_eval() メソッドを使って特異クラスをオープンすることで、特異クラスに対してメソッドを定義することができるようになります。

<pre class="code"><span class="keyword">class</span> MyClass
<span class="keyword">end</span>
 
obj = MyClass.new
 
obj.instance_eval(<span class="str">&quot;def hello; 'Hello World'; end&quot;</span>)
obj.hello
<span class="rem"># =&gt; &quot;Hello World&quot;</span>
 
obj2 = MyClass.new
obj2.hello
<span class="rem"># =&gt; NoMethodError: undefined method `hello' for #&lt;MyClass:0x0xxxxx&gt;</span></pre>

または、特異クラスのオブジェクトを class &lt;&lt; obj 構文を使って取得し、そのオブジェクトに対して define_method でメソッドを定義します。

<pre class="code"><span class="keyword">class</span> MyClass
<span class="keyword">end</span>
 
obj = MyClass.new
singleton = <span class="keyword">class</span> &lt;&lt; obj; <span class="keyword">self</span>; <span class="keyword">end</span>
singleton.send(:define_method, :hello) { <span class="str">&quot;Hello World&quot;</span> }
 
obj.hello
<span class="rem"># =&gt; &quot;Hello World&quot;</span></pre>

<h2>モジュールをインクルードしてクラスメソッドを定義する</h2>

<blockquote>

「来る日も来る日も世界のどこかで、Rubyプログラマがモジュールをインクルードしてクラスメソッドを定義しょうとしている。私もかつてはそうだった。しかし、これではうまくいかない。」

<cite>モジュールの不具合 - 本書P.167</cite>

</blockquote>

モジュールの中にクラスメソッドを定義して、モジュールをインクルードしたクラスにだけクラスメソッドを定義したいという場合、下のようにしがちですがこれは間違った例です。

<section>

<h4>モジュールをインクルードしてクラスメソッドを定義する間違った例</h4>

<pre class="code"><span class="keyword">module</span> MyModule
  <span class="keyword">def</span> <span class="keyword">self</span>.my_method; <span class="str">&quot;Hello&quot;</span>; <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">class</span> MyClass
  include MyModule
<span class="keyword">end</span>
 
MyClass.my_method
<span class="rem"># =&gt; NoMethodError: undefined method `my_method' for MyClass:Class</span></pre>

</section>

モジュールをインクルードすると、<em>モジュールのインスタンスメソッドが手に入ります。クラスメソッドではありません。</em>すなわち、モジュールをインクルードしてクラスメソッドを手に入れるためには、モジュールにはインスタンスメソッドとして定義して、include する場所をクラスメソッドが定義される場所（つまり、<em>特異クラス</em>）で行うようにします。

<pre class="code"><span class="keyword">module</span> MyModule
  <span class="keyword">def</span> my_method; <span class="str">&quot;Hello&quot;</span>; <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">class</span> MyClass
  <span class="keyword">class</span> &lt;&lt; <span class="keyword">self</span>
    include MyModule
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
MyClass.my_method    <span class="rem"># =&gt; "Hello"</span></pre>

クラスメソッドは特異クラスのメソッドなので、特異クラスにメソッドを定義すればクラスメソッドになります。

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">class</span> &lt;&lt; <span class="keyword">self</span>
    <span class="keyword">def</span> my_method; <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

モジュールを特異クラスのメソッドに追加する方法、モジュールをオブジェクトに追加して特異メソッドとする方法は、Ruby がそのためのメソッドを用意しています。それが <em>Object#extend()</em> です。

<pre class="code"><span class="keyword">module</span> MyModule
  <span class="keyword">def</span> my_method; <span class="str">&quot;Hello&quot;</span>; <span class="keyword">end</span>
<span class="keyword">end</span>
 
obj = Object.new
obj.extend MyModule
obj.my_method
<span class="rem"># =&gt; "Hello"</span>
<span class="keyword">class</span> MyClass
  extend MyModule
<span class="keyword">end</span>
 
MyClass.my_method    <span class="rem"># =&gt; "Hello"</span></pre>

<h2>エイリアス</h2>

<em>alias</em> キーワードを使うと、Ruby のメソッドにエイリアスをつけることができます。

<pre>alias :new_method :old_method</pre>

alias された時点で、Ruby は古いメソッドを新しいメソッドとして再定義（コピー）します。したがって、次のような動作となります。

<pre class="code"><span class="keyword">class</span> String
  <span class="keyword">alias</span> :real_length :length
 
  <span class="keyword">def</span> length
    real_length &gt; <span class="num">5</span> ? <span class="str">&quot;long&quot;</span> : <span class="str">&quot;short&quot;</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="str">&quot;War and Peace&quot;</span>.length    <span class="rem"># =&gt; "long"</span>
<span class="str">&quot;War and Peace&quot;</span>.real_length    <span class="rem"># =&gt; 13</span></pre>

オープンクラスを使って、length() メソッドを再定義していますが、alias を使って real_length として再定義（コピー）しているので、real_length を呼び出すことで元の動作を呼び出すことができています。

<h2>Kernel#eval</h2>

eval() メソッドは引数で指定されたコード文字列（Ruby のコード）を処理します。

<pre class="code">array = [<span class="num">10</span>, <span class="num">20</span>]
element = <span class="num">30</span>
eval(<span class="str">&quot;array &lt;&lt; element&quot;</span>)  <span class="rem"># =&gt; [10, 20, 30]</span></pre>

eval()、instance_eval()、class_eval() に渡すコード文字列の中は、ローカル変数にアクセスできます。

<pre class="code">array = [<span class="str">&quot;a&quot;</span>, <span class="str">&quot;b&quot;</span>, <span class="str">&quot;c&quot;</span>]
x = <span class="str">&quot;x&quot;</span>
array.instance_eval <span class="str">&quot;self[1] = x&quot;</span>
array    <span class="rem"># =&gt; [&quot;a&quot;, &quot;x&quot;, &quot;c&quot;]</span></pre>

<h3>Binding オブジェクト</h3>

<strong>Binding</strong> はスコープをオブジェクトにまとめたものです。eval()、instance_eval()、class_eval() に Binding を渡すことでそのスコープでコードを実行できます。

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> my_method
    <span class="instance">@x</span> = <span class="num">1</span>
    binding
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
b = MyClass.new.my_method
eval <span class="str">&quot;@x&quot;</span>, b    <span class="rem"># =&gt; 1</span></pre>

<h2>フックメソッド</h2>

Ruby には様々なイベントへのフックメソッドが用意されています。よく使われるのが、Module#included() で、モジュールが include された時に呼び出されます。次のようにすることで、Module で定義されたインスタンスメソッドをクラスメソッドに追加することができます。

<pre class="code"><span class="keyword">module</span> MyMixin
  <span class="keyword">def</span> <span class="keyword">self</span>.included(base)
    base.extend(MyClassMethods)
  <span class="keyword">end</span>
 
  <span class="keyword">module</span> MyClassMethods
    <span class="keyword">def</span> hoge
      <span class="str">&quot;hoge()&quot;</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">class</span> MyClass
  include MyMixin
<span class="keyword">end</span>
 
MyClass.hoge    <span class="rem"># =&gt; &quot;hoge()&quot;</span></pre>
-----
EXCERPT:

-----
KEYWORDS:
4048687158,978-4048687157,メタプログラミング,Ruby
-----

COMMENT:
AUTHOR: kdmsnr
EMAIL: 
IP: 125.2.99.23
URL: 
DATE: 09/02/2010 04:26:51 PM
ご紹介ありがとうございます :-)
-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 114.185.110.165
URL: 
DATE: 09/03/2010 10:20:31 AM
> kdmsnr さん
訳者の方がいらっしゃるとは！
この本、とても良い本で、訳もすごく分かりやすくてすごくよかったので、是非みんなに読んでほしいと思います。
-----


-----
CF50_CF_4: Paolo Perrotta (著), 角征典 (翻訳) 
CF50_URL: http://ec2.images-amazon.com/images/I/61X-b8TBh5L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4048687158?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4048687158
CF50_CF: アスキー・メディアワークス
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: Rubyベストプラクティス -プロフェッショナルによるコードとテクニック
BASENAME: ruby_-
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 09/17/2010 10:12:15 PM
TAGS: Ruby,コーディングテクニック,ベストプラクティス,良書
-----
BODY:
本書は、Ruby プログラミングの中級者向け指南書のようなものです。様々なコーディングテクニック（例えば、順序付き引数の使いどころ、ブロックの使い方、メソッド名のつけ方、メタプログラミング、関数型プログラミングテクニック、プロジェクトでRubyを使う際の慣習などなど）が満載です。

さすがオライリーといえる深い内容になっていて、Ruby を始めたばかりの人よりは、<em>一通り Ruby でプログラミングをしたことがある人、Ruby を使いこなせているのか不安な人が読むと良い</em>と思います。

今すぐ使えるテクニック！とはちょっと違うかもしれませんが、Ruby の動的な振る舞いや柔軟な拡張性を理解してさらに Ruby を使いこなすための一冊になると思います。

なお、<strong>Ruby1.9に対応</strong>していますので、サンプルコードは Ruby1.9で動きますし、最新 Ruby ではどうするの？を一発で解決できるようになっています。
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

<h2>目次</h2>

<ul class="none">
<li>１章 テストでコードを駆動する</li>
<li>２章 美しい API を設計する</li>
<li>３章 動的な機能を使いこなす</li>
<li>４章 テキスト処理とファイル管理</li>
<li>５章 関数型プログラミングのテクニック</li>
<li>６章 うまういかないとき</li>
<li>７章 文化の壁を取り払う</li>
<li>８章 上手なプロジェクトメンテナンス</li>
<li>付録Ａ 後方互換性のあるコードを書く</li>
<li>付録Ｂ Ruby の標準ライブラリを活用する</li>
<li>付録Ｃ Ruby ワーストプラクティス</li>
</ul>

<h2>２章 美しい API を設計する - 覚書</h2>

<h3>メソッドの引数にデフォルト値を持つパラメータが複数ある場合は擬似キーワード引数を使う</h3>

デフォルト値をもつパラメータが複数ある場合は、Ruby の「メソッドの引数の末尾に要素がひとつ以上のハッシュを渡す際は中括弧（{,}）を省略できる」という仕様を利用して、<strong>擬似キーワード引数</strong>が使えます。

<pre class="code"><span class="keyword">def</span> hello(name, options = {})
  options = { nickname: <span class="str">&quot;hamasyou&quot;</span>, age: <span class="num">28</span> }.merge(options)
  p <span class="str">&quot;Hello #{name}! &quot;</span> + options.to_s
<span class="keyword">end</span>
 
hello(<span class="str">&quot;Syougo&quot;</span>)
<span class="rem"># =&gt; &quot;Hello Syougo! {:nickname=>&quot;hamasyou&quot;, :age=>28}&quot;</span>
hello(<span class="str">&quot;Syougo&quot;</span>, age: <span class="num">27</span>)
<span class="rem"># =&gt; &quot;Hello Syougo! {:nickname=>&quot;hamasyou&quot;, :age=>27}&quot;</span></pre>

<h3>インターフェースをシンプルにするためのブロック</h3>

Rails の Configuration に使われているオブジェクトショートカットのことです。次のようなコードを

<pre class="code">server = Server.new
 
server.handle(/hello/i) { <span class="str">&quot;Hello from server at #{Time.now}&quot;</span> }
server.handle(/goodby/i) { <span class="str">&quot;Goodby from server at #{Time.now}&quot;</span> }
server.handle(/name is (\w+)/) {|m| <span class="str">&quot;Nice to meet you #{m[1]}!&quot;</span> }
 
server.run</pre>

次のように書けるようにします。

<pre class="code">Server.run <span class="keyword">do</span>
  handle(/hello/i) { <span class="str">&quot;Hello from server at #{Time.now}&quot;</span> }
  handle(/goodby/i) { <span class="str">&quot;Goodby from server at #{Time.now}&quot;</span> }
  handle(/name is (\w+)/) {|m| <span class="str">&quot;Nice to meet you #{m[1]}!&quot;</span> }
<span class="keyword">end</span></pre>

これを実現するには、次のようなコードになります。

<pre class="code"><span class="keyword">class</span> Server
  <span class="keyword">def</span> <span class="keyword">self</span>.run(port, &amp;block)
    server = Server.new(port)
    server.instance_eval(&amp;block)
    server.run
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

インスタンス化したオブジェクトの <em>instance_eval()</em> メソッドにブロックを渡すことで、ブロックをそのインスタンスのコンテキストで実行しています。

この方法を使うと、ブロックはインスタンス化したオブジェクトのコンテキストで実行されるため、ブロックのスコープ内で定義されたローカル変数にしかアクセスできません。つまり、次のコードは<em>動きません</em>。

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> nickname
    <span class="str">&quot;hamasyou&quot;</span>
  <span class="keyword">end</span>
  
  <span class="keyword">def</span> my_method
    Server.run <span class="keyword">do</span>
      p <span class="str">&quot;Hello #{nickname}&quot;</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
MyClass.new.my_method
<span class="rem"># =&gt; NameError: undefined local variable or method `nickname' for #&lt;Server:0x000001020478a8&gt;</span></pre>

この問題を解決するには、ブロックをインスタンスのコンテキストで評価するのではなく、クロージャとして実行すればよいです。

<pre class="code"><span class="keyword">class</span> Server
  <span class="keyword">def</span> <span class="keyword">self</span>.run(&amp;block)
    server = Server.new
    block.arity &lt; <span class="num">1</span> ? server.instance_eval(&amp;block) : block.call(server)
    server.run
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> nickname
    <span class="str">&quot;hamasyou&quot;</span>
  <span class="keyword">end</span>
  
  <span class="keyword">def</span> my_method
    Server.run <span class="keyword">do</span> |server|
      p <span class="str">&quot;Hello #{nickname}&quot;</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
MyClass.new.my_method
<span class="rem"># =&gt; &quot;Hello hamasyou&quot;</span></pre>

block.arity を使ってコードブロックに引数がいくつあるかを調べて、引数がひとつ以上あればブロックをクロージャとして呼び出すようにしています。　

<h3>method? と method! の意味</h3>

<section>

<h4>method? 疑問符</h4>

<em>method?</em> のようにメソッド名の末尾に疑問符（?）をつけるのは目的は、<strong>オブジェクトに何かを問い合わせる</strong>ことになります。条件分岐などにメソッドを利用する際に使えます。

疑問符をつけたメソッドの戻り値は、<em>true</em> か <em>false or nil</em> を返すようにします。

</section>

<section>

<h4>method! 感嘆符</h4>

<em>method!</em> のようにメソッド名の末尾に感嘆符（!）をつける目的は、<strong>このメソッドは特別だ、「注意しろ！」</strong>になります。

<blockquote>

よくある誤解は、受け取ったオブジェクトを変更することを知らせたいときに感嘆符を使う、というものだ。たいていの場合、感嘆符は私たちに何か警告をするものだからだろう。

<cite>method?とmethod!が何を意味しているか理解しよう - 本書 P.57</cite>

</blockquote>

Ruby の組み込みクラスのメソッドには破壊的メソッドでも感嘆符がついているのとついていないものがあります。

これはすなわち、メソッドに感嘆符をつける目的はこのメソッドが特別であることを知らせるのであって、破壊的であるとか危険であることを知らせるのではないということです。

<blockquote>

したがって、同じようなことをする　foo() メソッドがないのに foo!() メソッドだけがあるのは、あまり意味のないことだ。（中略）感嘆符は必ずしもそのメソッドが<em>破壊的な操作</em>をすることを意味するわけではないと考えると、...

<cite>本書 P.59</cite>

</blockquote>

</section>

<h3>２章のポイント</h3>

<h4>引数</h4>

<ul>
<li>options ハッシュによる擬似キーワード引数が使えないか検討する</li>
<li>順序付き引数と options ハッシュを組み合わせて使うときは、配列 splat 演算子（*）は使わない</li>
<li>必須パラメータは、options ハッシュには入れないこと。必須パラメータは順序付き引数として扱う</li>
</ul>

<h4>ブロック</h4>

<ul>
<li>前処理後処理の間に、ブロックを yield するようなヘルパメソッドを検討する</li>
<li>&amp;block と instance_eval() を組み合わせると任意のオブジェクトのコンテキストでブロックを実行できる</li>
<li>yield と block.call の戻り値は、与えられた戻り値と同じにする</li>
</ul>

<h2>３章 動的な機能を使いこなす - 覚書</h2>

<h3>define_method() を使って動的にインスタンスメソッドを定義する</h3>

メソッドを定義するというのは、クラスのインスタンスメソッドを定義するということなので、動的にインスタンスメソッドを定義するにはクラスのスコープで define_method() を呼び出します。

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> <span class="keyword">self</span>.define(method_name, &amp;block)
    define_method(method_name, &amp;block)
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
obj = MyClass.new
obj.hello
<span class="rem"># =&gt; NoMethodError: undefined method `hello'</span>
 
MyClass.define(:hello) <span class="keyword">do</span>
  <span class="str">&quot;Hello World&quot;</span>
<span class="keyword">end</span>
 
obj.hello
<span class="rem"># =&gt; &quot;Hello World&quot;</span></pre>

<h3>define_method() を使って動的にクラスメソッドを定義する</h3>

クラスメソッドを定義するには、クラスの特異クラスにメソッドを定義する必要があります。特異クラスをオープンするには、class &lt;&lt; obj 構文を使います。

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> <span class="keyword">self</span>.define(method_name, &amp;block)
    obj = <span class="keyword">class</span> &lt;&lt; <span class="keyword">self</span>; <span class="keyword">self</span>; <span class="keyword">end</span>
    obj.send(:define_method, method_name, &amp;block)
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
MyClass.define(:hello) <span class="keyword">do</span>
  <span class="str">&quot;Hello World&quot;</span>
<span class="keyword">end</span>
 
MyClass.hello
<span class="rem"># =&gt; &quot;Hello World&quot;</span></pre>

<section>

<h4>define_method() は private メソッド</h4>

define_method() は特異クラス上でプライベートになっているため、レシーバを指定して呼び出すには send() メソッドを使う必要があります。

</section>

<h3>モジュールのメソッドをモジュールのクラスメソッドにする</h3>

<pre>extend self</pre>

extend self を使うと、自信のインスタンスメソッドを特異クラスに定義することになりクラスメソッド化することができます。

<pre class="code"><span class="keyword">module</span> MyModule
  extend <span class="keyword">self</span>
 
  <span class="keyword">def</span> hello
    <span class="str">&quot;Hello World&quot;</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
MyModule.hello
<span class="rem"># =&gt; &quot;Hello World&quot;</span></pre>

<h3>３章のポイント</h3>

<ul>
<li>Ruby ではすべてのクラスがオープン。振る舞いを実行時に変更することができる</li>
<li>オブジェクト毎の振る舞いは、class &lt;&lt; obj 構文を使ってオブジェクトの特異クラスにアクセスすることで実装できる</li>
<li>拡張するときはできるだけオブジェクトごとの振る舞いを拡張するほうがよい。obj.extend() を使うようにする</li>
<li>クラスもモジュールも動的につくることができる。メソッドを定義するためのブロックを受け付けるようにする</li>
<li>モジュールをクラスに混ぜるとき、include を使うとインスタンスレベルで利用可能になり、extend を使うとクラスレベルで利用可能になる</li>
<li>フックは特定のクラスやモジュールに実装することができ、それより下位のすべてを捕捉する</li>
</ul>

<h3>３章のまとめ</h3>

３章で学習したことが詰まったコードの読み解きです。

<pre class="code"><span class="keyword">module</span> NativeCampingRoutes
  
  extend <span class="keyword">self</span>
  
  <span class="keyword">def</span> R(url)
    route_lookup = routes
    
    klass = Class.new
    meta = <span class="keyword">class</span> &lt;&lt; klass; <span class="keyword">self</span>; <span class="keyword">end</span>
    meta.send(:define_method, :inherited) <span class="keyword">do</span> |base|
      raise <span class="str">&quot;Already defined&quot;</span> <span class="keyword">if</span> route_lookup[url]
      route_lookup[url] = base
    <span class="keyword">end</span>
    klass
  <span class="keyword">end</span>
  
  <span class="keyword">def</span> routes
    @routes ||= {}
  <span class="keyword">end</span>
  
  <span class="keyword">def</span> process(url, params = {})
    routes[url].new.get(params)
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">module</span> NativeCampingRoutes
  <span class="keyword">class</span> Hello &lt; R <span class="str">'/hello'</span>
    <span class="keyword">def</span> get(params)
      puts <span class="str">&quot;hello #{params[:name]}&quot;</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
 
  <span class="keyword">class</span> Goodbye &lt; R <span class="str">'/goodbye'</span>
    <span class="keyword">def</span> get(params)
      puts <span class="str">&quot;goodbye #{params[:name]}&quot;</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
NativeCampingRoutes.process(<span class="str">'/hello'</span>, name: <span class="str">&quot;greg&quot;</span>)
<span class="rem"># =&gt; hello greg</span>
NativeCampingRoutes.process(<span class="str">'/goodbye'</span>, name: <span class="str">&quot;joe&quot;</span>)
<span class="rem"># =&gt; goodbye joe</span>
</pre>

<h4>3行目 extend self</h4>

Object#extend は引数で渡されたモジュールのインスタンスメソッドを特異クラスのメソッド（つまり、クラスメソッド）として追加します。

すなわち、この後に続く def で定義されたモジュールのインスタンスメソッドを自身のクラスメソッドに再定義しています。

<h4>6行目 route_lookup = routes</h4>

10行目で呼び出している define_method() メソッドに渡すブロックはクロージャなので、ローカル変数にアクセスできます。define_method() メソッド内で @routes にアクセスしたいので、ローカル変数に格納しています。

<h4>9行目 meta = class &lt;&lt; klass; self; end</h4>

10行目で定義する Class#inherited メソッドは、継承されるクラス（klass）のクラスメソッドとして定義します。クラスメソッドは特異クラスのメソッドとして定義する必要があるので、特異クラスを取り出しています。

<h4>10行目 meta.send(:define_method, :inherited) do |base|</h4>

define_method() メソッドは private メソッドなので、meta.define_method() という呼出はできません。

そこで、send() メソッドを使って private メソッドを呼び出しています。特異クラスである meta に対して inherited メソッド（クラスが継承された際に呼び出されるフックメソッド）を定義しています。

inherited メソッドは、呼び出される際に引数として継承先の子クラス（NativeCampingRoutes::Hello、NativeCampingRoutes::Goodbye）が渡されるので、ブロック引数の base として受け取っています。

<h4>14行目 klass</h4>

R() メソッドは継承元として使うことを想定しているので、クラスを返しています。

<h4>22行目 routes[url].new.get(params)</h4>

routes メソッドで返される @routes ハッシュに対して url をキーにアクセスします。

R() メソッドで @routes[url] に継承先クラスが格納されているので、Class#new を使ってインスタンス化し、get() メソッドを呼び出しています。

<h4>27, 28行目 class Hello &lt; R '/hello'</h4>

定義した NativeCamppingRoutes モジュールのサブクラスとして Hello を定義し、R() メソッドで返される無名クラスを継承しています。

クラスに get() メソッドを定義して、21行目の process メソッドでインスタンス化したオブジェクトから呼び出せるようにしています。

<h2>６章 うまくいかないとき - 覚書</h2>

<h3>データ構造を確認するのに YAML がつかえる</h3>

YAML というデータシリアライゼーションのための標準ライブラリを使うと、データ構造をプリントしてくれる y() メソッドが使えるようになる。

<pre class="code">require <span class="str">&quot;yaml&quot;</span>
 
data = { name: <span class="str">&quot;hamasyou&quot;</span>, age: <span class="num">28</span>, address: { zip: <span class="str">&quot;272-0000&quot;</span>, pref: <span class="str">&quot;Chiba&quot;</span>, city: <span class="str">&quot;Ichikawa&quot;</span> } }
y data
<span class="rem">#--- </span>
<span class="rem">#:name: hamasyou</span>
<span class="rem">#:age: 28</span>
<span class="rem">#:address: </span>
<span class="rem">#  :zip: 272-0000</span>
<span class="rem">#  :pref: Chiba</span>
<span class="rem">#  :city: Ichikawa</span></pre>

<h3>テストデータ生成用ライブラリ faker</h3>

テスト用のデータ生成に、Faker というライブラリが使えます。gem install faker でインストールできます。

<pre class="console">[hamasyou]$ <kbd>sudo gem install faker</kbd></pre>

次のように使います。

<pre class="code">require <span class="str">&quot;faker&quot;</span>
require <span class="str">&quot;pp&quot;</span>
 
data = <span class="num">5</span>.times.map <span class="keyword">do</span>
  { name: Faker::Name.name, phone: Faker::PhoneNumber.phone_number }
<span class="keyword">end</span>
 
pp data
<span class="rem">#[{:name=&gt;&quot;Johnathan Lowe III&quot;, :phone=&gt;&quot;(859)707-2471 x1926&quot;},</span>
<span class="rem"># {:name=&gt;&quot;Lucius Murray&quot;, :phone=&gt;&quot;(760)338-6980&quot;},</span>
<span class="rem"># {:name=&gt;&quot;Queen Beahan II&quot;, :phone=&gt;&quot;1-085-613-9274 x52563&quot;},</span>
<span class="rem"># {:name=&gt;&quot;Daniela Boyle&quot;, :phone=&gt;&quot;956.964.3848&quot;},</span>
<span class="rem"># {:name=&gt;&quot;Mrs. Jarret Wisozk&quot;, :phone=&gt;&quot;(760)687-0168 x68429&quot;}]</span></pre>

Faker で作れるダミーデータには次のようなものがあります。

<table>
  <tr><th>クラス</th><th>作れるデータ</th><th>サンプル</th></tr>
  <tr><td>Faker::Address</td><td>住所データ</td><td><ul class="none"><li>zip_code<br/>"15832-6995"</li><li>city<br/>"South Verlie"</li></ul></td></tr>
  <tr><td>Faker::Company</td><td>会社データ</td><td><ul class="none"><li>name<br/>"Carroll, Kuhlman and Glover"</li><li>bs<br/>"orchestrate vertical action-items"</li></ul></td></tr>
  <tr><td>Faker::Internet</td><td>ネットワークデータ</td><td><ul class="none"><li>email<br/>"wiley@andersoncrist.us"</li><li>free_email<br/>"aubree.waters@gmail.com"</li><li>domain_name<br/>"littel.com"</li></ul></td></tr>
  <tr><td>Faker::Lorem</td><td>文章データ</td><td><ul class="none"><li>words<br/>["quaerat", "blanditiis", "qui"]</li><li>sentences<br/>["Maiores dicta sed voluptas corrupti repudiandae eos aliquam eligendi.", "Dolorem eius ut nam esse nihil illum.", "Non sapiente accusamus maiores neque eum est ea."]</li></ul></td></tr>
  <tr><td>Faker::Name</td><td>名前データ</td><td><ul class="none"><li>name<br/>"Nicklaus Swift"</li><li>first_name<br/>"Angus"</li><li>last_name<br/>"Morissette"</li></ul></td></tr>
  <tr><td>Faker::PhoneNumber</td><td>電話番号</td><td><ul class="none"><li>phone_number<br/>"024-597-6027 x86091"</li></ul></td></tr>
</table>

Faker::PhoneNumber::Formats に phone_number() メソッドで返される電話番号のフォーマットの一覧が入っています。テスト時にフォーマットをいじることで、phone_number() メソッドの戻り値の形式を変更できます。

<pre class="code">Faker::PhoneNumber::Formats = [<span class="str">&quot;(###)##-####&quot;</span>, <span class="str">&quot;###-####-####&quot;</span>]
Faker::PhoneNumber::phone_number
<span class="rem"># =&gt; &quot;(109)29-6592&quot;</span></pre>

<h2>７章 文化の壁を取り払う - 覚書</h2>

<h3>ソースコードのエンコーディングを明示する</h3>

Ruby1.9 から多言語対応に注意を払わなければいけなくなりました。<em>M17N（MultilingualizatioN）</em> です。

M17N 可能なプロジェクトで作成するソースコードには、ソースコード中に<strong>マジックコメント</strong>を埋め込む必要があります。

Ruby ソースコード中に #! がない限り、マジックコメントはファイルの一行目に書きます。#! がある場合は2行目に書きます。

マジックコメントのフォーマットは次のとおりです。

<pre># coding: UTF-8</pre>

<pre># -*- coding: utf-8 -*-</pre>

<h3>ファイルを扱う場合</h3>

例えば、EUC-JP で書かれたファイルを UTF-8 で書かれた Ruby のソースコード上で処理したい場合、次のようにします。

<pre class="code">File.open(<span class="str">&quot;euc.txt&quot;</span>, encoding: <span class="str">&quot;EUC-JP:UTF-8&quot;</span>).each <span class="keyword">do</span> |line|
  p line
<span class="keyword">end</span></pre>

<em>encoding:</em> パラメータを指定してファイルを開きます。encoding パラメータは &quot;&lt;ファイルのエンコード&gt;:&lt;処理するソースコードのエンコード&gt;&quot; のように書きます。

例の場合、EUC-JP で書かれた euc.txt ファイルを UTF-8 のソースコードで処理するので、encoding:&quot;EUC-JP:UTF-8&quot; としています。

なお、ファイルのエンコーディングがソースコードのエンコーディングと同じ場合は、encoding: &quot;UTF-8&quot; と書くことができます。

<p class="option">encodingオプションを指定しない場合、Ruby は Encoding#default_external で指定されているエンコーディングでファイルを解釈しようとします。</p>

<h3>バイナリファイルを扱う場合</h3>

<pre>img = File.read("hoge.png");</pre>

上記のようにバイナリデータを読み込んでいる場合は注意が必要です。Ruby1.9 からは encoding が指定されない場合、<em>Encoding#default_external</em> の値がエンコーディングとして使われます。

そのため、read() メソッドで encoding を指定しないと、中身がバイナリデータであっても default_external のエンコーディングだと解釈されてしまいます。

バイナリデータを読み込む際は、<em>File#binread()</em> メソッドを使うようにします。

<h3>閑話休題</h3>

７章の P.223 に L10N の話題が載っています。そこで見つけたソースコード。

<pre class="code">data = { given_name: <span class="str">&quot;姉ヶ崎&quot;</span>, surname: <span class="str">&quot;寧々&quot;</span> }
Gibberish::Simple.use_language(:ja) <span class="keyword">do</span>
  p T(<span class="str">&quot;{given_name}{surname}&quot;</span>, [:name, data]) <span class="rem">#=&gt; &quot;姉ヶ崎寧々&quot;</span>
<span class="keyword">end</span></pre>

ね、寧々さん！！？

<h2>８章 プロジェクトメンテナンス - 覚書</h2>

<h3>README ファイルに書くとよいこと</h3>

<dl>
<dt>Description（説明）</dt>
<dd>なんのためのプロジェクトなのか、何を解決するものなのか、1〜2段落程度で説明する。</dd>
<dt>Documentation（ドキュメント）</dt>
<dd>プロジェクトの公開 API となっている主要なクラスを2〜3個紹介するとよい。</dd>
<dt>Examples（サンプル）</dt>
<dd>基本的な使い方、何が出来るのか？どうやってクラスを使うのか？の概要を説明するとよい</dd>
<dt>Install（インストール方法）</dt>
<dd>インストール手順が簡単であれば、README にインストール手順を書いておくとよい。</dd>
<dt>Q&amp;A（質問の宛先）</dt>
<dd>自分たちへの質問の方法を記述する。Eメール、電話、会社の住所などなど。</dd>
</dl>

<h3>ライブラリのレイアウト</h3>

<h4>ライブラリディレクトリ</h4>

lib フォルダを作り、ひとつのファイルとひとつのサブディレクトリを用意します。

ひとつのファイルとは、プロジェクト名と同じファイルになっており、依存関係のあるライブラリなどをロードするための出発点としての役割を果たすものになります。

ひとつのサブディレクトリには、プロジェクト名と同じディレクトリ名にしておき、必要なライブラリやソースコードをすべてこの中に閉じ込める。

<pre>
- lib
  - csvparser/
    - ...ライブラリ群...
  - csvparser.rb
</pre>

クラス名とファイル名の対応等は、<a href="http://shugo.net/ruby-codeconv/codeconv.html" target="_blank" class="extlink">Ruby コーディング規約 - Shugo.net</a> 等を参考にする。

<h4>実行ファイル</h4>

実行ファイルは bin ディレクトリに置く。

<h4>テストコード</h4>

テストコードは、test ディレクトリに置く。

<h4>サンプルコード</h4>

サンプルコードがあれば、examples ディレクトリに置く。

<h4>ここまでをまとめると</h4>

次のようなディレクトリ構成になる。

<pre>-Projectルート/
  - README
  - bin/
  - examples/
  - lib/
    - csvparser/
      - ...ソースコード...
    - csvparser.rb
  - test</pre>
-----
EXCERPT:

-----
KEYWORDS:
978-4873114453,4873114454,Ruby,ベストプラクティス,コーディングテクニック
-----


-----
CF50_CF_4: Gregory Brown (著), 高橋 征義 (監訳), 笹井 崇司 (翻訳)
CF50_URL: http://ec3.images-amazon.com/images/I/51IV0ZuH%2BhL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4873114454?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4873114454
CF50_CF: オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: iPhoneのオモチャ箱 iPhone SDKプログラミング
BASENAME: iphone_iphone_s
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 10/28/2010 11:06:02 PM
TAGS: iPhone,クックブック,チュートリアル
-----
BODY:
本書は、iPhone アプリを実際に作っている著者の方が、実体験やノウハウをもとに執筆されたものが集まっています。

iPhone とはなんなのか、iPhone アプリはどういうもので、どうあると面白いのか、自分たちはどう考えるのか、こういう機能をもったアプリを作るときはこうやって自分たちは作った。そういう話がたくさん載っています。

実際に iPhone アプリを始めて見たい人は、本書の姉妹本である『<a href="http://www.amazon.co.jp/gp/product/486267058X?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=486267058X" target="_blank" class="extlink">ユメみるiPhone ―クリエイターのためのiPhone SDKプログラミング</a>』から読み始めると良いと思います。それから実際に自分で手を動かしてみて、「アレ？こういう機能ってどうやって実装したらいいのかな？」という疑問が湧いてきたら本書を読むと良いと思います。

章ごとに筆者が違うし、紹介している技術やライブラリも違うので、iPhone アプリ開発を体系的に学ぶのには適していませんが、こういうことがしたい！という目的がある人は、本書に解決の糸口を見出しすことができるかもしれません。

読みやすいですし、チュートリアル的に書かれているところもあり理解しやすいです。なかなかオススメの一冊です。

-----
EXTENDED BODY:
<h2>もくじ</h2>

<ol>
<li>INTRODUCTION
  <ol>
  <li>Why iPhone?</li>
  <li>Designing iPhone Apps</li>
  <li>Making of TiltShift Generator</li>
  </ol>
</li>
<li>Sample
  <ol>
  <li>Web APIの使い方とMapKitを用いた地図の表示</li>
  <li>Nビル.app-OpenCVを使ったリアルタイムの画像処理とAR</li>
  <li>HTML+CSS+JavaScriptで作るWebアプリ</li>
  <li>cocos2dでゲームを作ろう[基礎編]</li>
  <li>cocos2dでゲームを作ろう[Box2D編]</li>
  <li>カメラとCore Animationを使用した画像の描画とアニメーション</li>
  <li>目的に特化したテーブルビューの使い方</li>
  <li>カメラを使った音のエフェクターの開発</li>
  <li>ピアツーピア接続を使ったアプリケーションの開発</li>
  <li>AudioVisual Mixer for INTO INFINITYのダウンロードのしくみ</li>
  </ol>
</li>
<li>RECIPE
  <ol>
  <li>AudioIOクラス</li>
  <li>MPMoviePlayerControllerを自由に扱う</li>
  <li>CustomFontLabelクラス</li>
  <li>テーブルビューレシピ1-もう1つの追加ボタンUI</li>
  <li>テーブルビューレシピ2-データの保存</li>
  <li>テーブルビューレシピ3-WebKitを使う</li>
  <li>テーブルビューレシピ4-セルの再利用</li>
  <li>テーブルビューレシピ5-グループテーブルビュー</li>
  <li>テーブルビューレシピ6-セルのカスタマイズとパフォーマンス</li>
  </ol>
</li>
<li>APPENDIX
  <ol>
  <li>iPhoneアプリを実機で動かす</li>
  <li>iPad用に変換する</li>
  </ol>
</li>
</ol>

<h2>おぼえがき</h2>

<h3>iPhone の特徴</h3>

おもしろい iPhone アプリを開発するためには、きちんと iPhone の特徴をつかんでおくことが大事です。

<table>
  <tr>
    <th>特徴</th><th>説明</th>
  </tr>
  <tr>
    <td class="nowrap">3G回線による常時接続</td><td>第三世代通信方式（3G）による高速通信がいつでもどこでも行えます。ネットワークを意識した設計、ネットワークにつながらないときにどう振舞うかを考える必要があります。</td>
  </tr>
  <tr>
    <td class="nowrap">加速度センサー</td><td>iPhone が今どのくらい傾けられているか、どれくらい振られたか、そういった情報を入力にすることができます。</td>
  </tr>
  <tr>
    <td class="nowrap">電子コンパス</td><td>iPhone が今どの向きを向いているか、向きを入力にすることができます。</td>
  </tr>
  <tr>
    <td class="nowrap">GPS</td><td>ユーザの現在位置を取得することができます。位置に合わせた情報やどこからどこに移動したか、どういう経路をたどったかなどの情報を利用した設計ができます。</td>
  </tr>
  <tr>
    <td class="nowrap">オーディオ</td><td>スピーカーとマイクを利用することができます。音や声による入力出力を組み合わせてアプリを設計できます。</td>
  </tr>
  <tr>
    <td class="nowrap">タッチスクリーン</td><td>マルチタッチ可能なタッチスクリーンは、iPhone への入力の大きなものです。この入力方式をどのように利用出来るか、利用の仕方次第でおもしろいことができそうです。</td>
  </tr>
  <tr>
    <td class="nowrap">カメラ</td><td>オートフォーカス可能なカメラは、写真を取ってその場で加工したり、物を写すことでその対象を別の入力にしたり、現実と仮想を組み合わせたり（AR）、色々とおもしろい使い方ができます。</td>
  </tr>
</table>

おもしろい iPhone アプリをつくるコツは

<ul>
<li>機能のかけ算</li>
<li>ユーザの好奇心、想像力、創造力をつっつく</li>
<li>アプリケーションを立ち上げるたびに新しいことが起こる/なにが起こるかわからないを提供する</li>
<li>こだわりを持つ</li>
</ul>

このあたりに尽きると思います。

<h3>カメラ画像の取得</h3>

現実環境（カメラで写した世界）に情報や映像を付加提示する技術のことを拡張現実（Augmented Reality:AR）といいます。iPhone ではこの AR を簡単に実現できます。

カメラ画像をリアルタイムに解析する方法のひとつに、<em>UIGetScreenImage()</em> メソッドがあります。このメソッドは SDK のドキュメントに載っていないため Apple からいつ使用が制限されるかわかりませんが、カメラで表示している画面を画像として取得して処理することができるメソッドになっています。

ここで取得した画像を利用してリアルタイム処理を行うことが出来ます。

オープンソースの画像解析用のライブラリに <a href="http://opencv.jp/" target="_blank" class="extlink">OpenCV</a> があり、このライブラリを使った画像処理のチュートリアルが、本書には載っています。

<h3>cocos2d</h3>

cocos2d は OpenGL を手軽に扱えるように設計されたライブラリで、画像の読み込み、描画、アニメーションなどを手軽に実装することができるようになります。

OpenGL を使うため、処理速度が必要なゲームなどで使用すると良いと思います。本当に簡単につかえるライブラリなので、iPhone でゲームを作りたいと考えている人は利用していると良いと思います。

また、Box2D という物理演算エンジンと cocos2d を使ったゲームを作るチュートリアルも本書に載っているので、このあたりの日本語の情報が欲しい人は参考になるかと思います。

<a href="http://www.cocos2d-iphone.org/" target="_blank" class="extlink">cocos2d for iPhone</a>

<a href="http://www.box2d.org/" target="_blank" class="extlink">Box2D</a>

<h3>テーブルビュー</h3>

ユーティリティアプリをつくろうと考えている人は、テーブルビューを使う機会が出てくると思います。本書では、テーブルビューを使った様々な機能の実現方法をサンプルを交えて解説しています。

<ul>
<li>行の追加・編集・削除</li>
<li>大量のデータを効率よく表示する方法</li>
<li>グルーピングの方法</li>
<li>行の表示をカスタマイズする方法</li>
</ul>

<h3>オーディオ処理</h3>

本書ではリアルタイムに音を処理するサンプルが載っています。iPhone にはオーディオをあつかう API がいくつかありますが、本書では Audio Unit を使用したサンプルが載っています。

iPhone で利用できるオーディオ API の一覧を本書から引用です。

<table>
  <tr>
    <th>API（およびそれを含むフレームワーク）</th><th>概要</th>
  </tr>
  <tr>
    <td>AVAudioPlayer, AVAudioRecorder (AV Foundation Framework)</td><td>音のファイルを再生・録音できる</td>
  </tr>
  <tr>
    <td>System Sound Services (Audio Toolbox Framework)</td><td>短い音のファイルを再生できる</td>
  </tr>
  <tr>
    <td>Audio Queue Services (Audio Toolbox Framework)</td><td>音をリアルタイムに再生・録音できる</td>
  </tr>
  <tr>
    <td>Audio Unit Framework</td><td>Remote IO Audio Unitを使って音をリアルタイムに再生・録音できる</td>
  </tr>
  <tr>
    <td>OpenAL</td><td>3Dの空間の中で音を再生できる</td>
  </tr>
</table>

<h3>Bluetooth を使った P2P の実現</h3>

本書では、Bluetooth を使った Peer to Peer アプリのサンプルが載っています。Game Kit フレームワークの GKPeerPickerController を使って基本的な通信を行うところから、Picker を使わずにピアツーピアを実現するところまで載っています。

-----
EXCERPT:

-----
KEYWORDS:
978-4862670854,4862670857,iPhone,チュートリアル,iPhone SDK,MapKit,OpenCV,cocos2d,Core Animation,
-----


-----
CF50_CF_4: 徳井 直生 (著), 岡村 浩志 (著), 笠谷 真也 (著), 深津 貴之 (著), 青木 太臣 (著), 大宮 聡之 (著), 瀬尾 浩二郎 (著), バスケ (著), 宮川 義之 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/617nfdGrMrL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4862670857?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4862670857
CF50_CF: ワークスコーポレーション
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: [Web開発者のための]大規模サービス技術入門 ―データ構造、メモリ、OS、DB、サーバ/インフラ
BASENAME: web_osdb
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 11/20/2010 07:32:20 PM
TAGS: これは読むべき,アルゴリズム,インフラ,システム設計,良書,規模サービス
-----
BODY:
大規模サービスの運営、大変だということは分かっていても、じゃあ実際にどういうふうに大変なのか。実際に体験してみないとこの大変さはわからないと思います。

でも、実際に大規模サービスの開発・運営に携わることになったら！？

本書は、はてなで実際に運用されているサービスを元に、大規模サービス技術のノウハウを解説しています。実際にはてなのインターンシップで講義資料として使われているものがベースになっているので、分かりやすくかつ、実用的です。

Web サービスはいつユーザ数が爆発するかわからないという面白さがある一方、きちんとサービスのノウハウがないとシステムダウンにすぐに繋がってしまうという怖さがあります。

すべてのWeb サービス開発エンジニアにおすすめです。本書で本質的な知識を得て、準備万端にしておくと良いと思います。
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script> 

<h2>本書の目次</h2>

<ol>
<li>大規模Webサービスの開発オリエンテーション - <span class="fontSmall">全体像を把握する</span>
  <ol>
  <li>本書の源 - <span class="fontSmall">本書で説明すること、しないこと</span></li>
  <li>大規模なサービスと小規模なサービス</li>
  <li>成長し続けるサービスと、大規模化の壁</li>
  <li>サービス開発の現場</li>
  </ol>
</li>
<li>大規模データ処理入門 - <span class="fontSmall">メモリとディスク、Webアプリケーションと負荷</span>
  <ol>
  <li>はてなブックマークのデータ規模 - <span class="fontSmall">データが大きいと処理に時間がかかる</span></li>
  <li>大規模データ処理の難所 - <span class="fontSmall">メモリとディスク</span></li>
  <li>スケーリングの要所</li>
  <li>大規模データを扱うための基礎知識</li>
  </ol>
</li>
<li>OSのキャッシュと分散 - <span class="fontSmall">大きなデータを効率良く扱うしくみ</span>
  <ol>
  <li>OSのキャッシュ機構</li>
  <li>I/O負荷の軽減策</li>
  <li>局所性を活かす分散</li>
  </ol>
</li>
<li>DBのスケールアウト戦略 - <span class="fontSmall">分散を考慮したMySQLの運用</span>
  <ol>
  <li>インデックスを正しく運用する - <span class="fontSmall">分散を考慮したMySQL運用の大前提</span></li>
  <li>MySQLの分散 - <span class="fontSmall">スケーリング前提のシステム設計</span></li>
  <li>MySQLのスケールアウトとパーティショニング</li>
  </ol>
</li>
<li>大規模データ処理[実践]入門 - <span class="fontSmall">アプリケーション開発の勘所</span>
  <ol>
  <li>用途特化型インデクシング - <span class="fontSmall">大規模データを捌く</span></li>
  <li>理論と実践の両側から取り組む</li>
  </ol>
</li>
<li>[課題]圧縮プログラミング - <span class="fontSmall">データサイズ、I/O高速化との関係を意識する</span>
  <ol>
  <li>[課題]整数データをコンパクトに持つ</li>
  <li>VB Codeと速度感覚</li>
  <li>課題の詳細と回答例</li>
  </ol>  
</li>
<li>アルゴリズムの実用化 - <span class="fontSmall">身近な例で見る理論・研究の実戦投入</span>
  <ol>
  <li>アルゴリズムと評価</li>
  <li>はてなダイアリーのキーワードリンク</li>
  <li>はてなブックマークの記事カテゴライズ</li>
  </ol>
</li>
<li>[課題]はてなキーワードリンクの実装 - <span class="fontSmall">応用への道筋を知る</span>
  <ol>
  <li>[課題]はてなキーワードリンクを作る</li>
  <li>回答例と考え方</li>
  </ol>
</li>
<li>全文検索技術に挑戦 - <span class="fontSmall">大規模データ処理のノウハウ満載</span>
  <ol>
  <li>全文検索技術の応用範囲</li>
  <li>検索システムのアーキテクチャ</li>
  <li>検索エンジンの内部構造</li>
  </ol>
</li>
<li>[課題]全文検索エンジンの作成 - <span class="fontSmall">基本部分、作り込み、速度と精度の追求</span>
  <ol>
  <li>[課題]はてなブックマーク全文検索を作る</li>
  <li>回答例と考え方</li>
  </ol>
</li>
<li>大規模データ処理を支えるサーバ/インフラ入門 - <span class="fontSmall">Webサービスのバックエンド</span>
  <ol>
  <li>エンタープライズ vs. Webサービス</li>
  <li>クラウド vs. 自前インフラ</li>
  </ol>
</li>
<li>スケーラビリティの確保に必要な考え方 - <span class="fontSmall">規模の増大とシステムの拡張</span>
  <ol>
  <li>レイヤとスケーラビリティ</li>
  <li>負荷の把握、チューニング</li>
  </ol>
</li>
<li>冗長性の確保、システムの安定化 - <span class="fontSmall">ほぼ100%の稼働率を実現するしくみ</span>
  <ol>
  <li>冗長性の確保</li>
  <li>システムの安定化</li>
  <li>システムの安定化対策</li>
  </ol>
</li>
<li>効率向上作戦 - <span class="fontSmall">ハードウェアのリソースの使用率を上げる</span>
  <ol>
  <li>仮想化技術</li>
  <li>ハードウェアと効率向上 - <span class="fontSmall">低コストを実現する要素技術</span></li>
  </ol>
</li>
<li>Webサービスとネットワーク - <span class="fontSmall">ネットワークで見えてくるサービスの成長</span>
  <ol>
  <li>ネットワークの分岐点</li>
  <li>さらなる上限へ</li>
  </ol>
</li>
<li>いまどきのWebサービス構築に求められる実践技術 - <span class="fontSmall">大規模サービスに対応するために</span>
  <ol>
  <li>ジョブキューシステム - <span class="fontSmall">TheSchwartz, Gearman</span></li>
  <li>ストレージの選択 - <span class="fontSmall">RDBMSかkey-valueストアか</span></li>
  <li>キャッシュシステム - <span class="fontSmall">Squid、Varnish</span></li>
  <li>計算クラスタ - <span class="fontSmall">Hadoop</span></li>
  </ol>
</li>
</ol>

<h2>おぼえがき</h2>

<h3>小規模サービスと大規模サービスの違い</h3>

<h4>スケーラビリティの確保と負荷分散</h4>

大量のアクセスのある大規模サービスでは、<strong>スケーラビリティの確保</strong>と<strong>負荷分散</strong>が重要な問題になります。

<blockquote><p>大量のアクセスがあるサービスでは、サーバ1台では処理しきれない負荷を同処理するかが一番の問題です。ここ10年のトレンドとしてはいわゆる「スケールアウト」がこの問題に対する戦略の基礎になります。</p>

<p><cite>本書より</cite></p></blockquote>

ハードウェアが安くなってきた最近では、高価なハードウェアを購入するよりもコストを削減できます。ただその代わりに考えないといけないことも増えます。

複数のハードウェアを効率良く使うための負荷分散のしくみや、データの同期の問題、ネットワークのレイテンシ（遅延時間）をどうするか。

<h4>冗長性</h4>

スケールアウトでサーバを複数台用意すると、サーバの故障率は高くなります。どこかのサーバが1台故障したからといって、サービスが停止してしまうことは避けなければなりません。

<h4>省力運用</h4>

サーバ台数が増えてくると、それぞれのサーバの状況を把握することが困難になってきます。セキュリティ設定、ソフトウェアのバージョンなど、管理しなければならないことも増えてきます。

監視用ソフトウェアを使って自動化を行ったとしても実際に確認するのは人間の役目になります。いかに手間を掛けずに健康状態を維持するか。

<h4>開発方法の統制</h4>

大規模サービスになると、当然そのサービスに携わる人は増えてきます。効率化を図るための標準化や標準ツールの策定、教育やマネージメントなどの必要性が出てきます。

<h3>大規模データの処理</h3>

<blockquote><p>大規模Webアプリケーションを運用するにあたっての苦労の多くは、この大規模データの扱いに集約されます。</p>

<p>データが小さいうちは、とくに工夫をしなくてもすべてメモリで処理できますし、複雑なアルゴリズムを使うよりもナイーブなアルゴリズムのほうがオーバーヘッドがないため早い、なんてこともままあって、I/O負荷などはまず問題となりません。しかし、サービスがある程度以上の規模になるとデータは増加します。このデータ量が分水域を超えたところで問題が顕在化します。そしてその対策は、応急処置ではなかなかに難しい。ここが大規模サービスの難所です。</p>

<p><cite>本書「大規模データ量への対処」より</cite></p></blockquote>

<h3>ミニマムスタートと、変化を見込んだ管理と設計</h3>

サービスが小規模の時には、あれこれ考えて早過ぎる最適化を行うのはよくありません。かといって、何も考えずにシステムを設計するのもまたよくありません。

サービス設計時にある程度のキャパシティ管理とデータが莫大に増加してしまわないような設計を行った上で、ミニマムスタートをきる。それがサービスを開始するときのコツです。

<h3>大規模データ処理の難所</h3>

大規模データ処理の難しいポイントは、<strong>メモリ内で計算ができない</strong>ことです。

コンピュータはメモリとディスクとで、10<sup>5</sup>〜10<sup>6</sup>倍以上の探索速度の差があります。また、メモリとディスクの転送速度では、メモリが約7.5GB/秒ほど出るのに対して、ディスクは58MB/秒ほどしかでません。

SSD(Solid State Drive) などの記憶装置が出てきたことで探索速度の差は縮まってきていますが、転送速度の差は埋めることがまだ出来ていない状況です。

<h4>単一ホストの負荷</h4>

<blockquote><p>「負荷分散」と言う言葉から思い浮かべるのは、多くの場合、複数のホストに処理を担当させる文字通りの「分散」です。しかし、そもそも1台で処理できるはずの負荷をサーバ10数台で分散するのは本末転倒です。単一のサーバの性能を十分に引き出すことができてはじめて、複数サーバでの負荷分散が意味をなします。</p>

<p><cite>本書「Column - Linux単一ホストの負荷」より</cite></p></blockquote>

<h4>ボトルネック見極め作業の基本的な流れ</h4>

<p class="option"><em>推測するな、計測せよ</em></p>

<ul><li>ロードアベレージを見る</li>
<li>CPU、I/Oのいずれがボトルネックかを探る</li>
<li>CPUの場合、ディスクやメモリはボトルネックになっていないかを確認。プログラムのバグも確認する</li>
<li>I/Oの場合、スワップが発生していないかを確認。メモリの使い方が適切か、足りているかを確認する</li></ul>

<div class="bookInfoBody">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/4774135666?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4774135666" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51uK4ACymiL._SL160_.jpg" height="120" title="[24時間365日] サーバ/インフラを支える技術 ~スケーラビリティ、ハイパフォーマンス、省力運用" alt="[24時間365日] サーバ/インフラを支える技術 ~スケーラビリティ、ハイパフォーマンス、省力運用" /></a>
</div>
<ul><li>『<em><a href="http://www.amazon.co.jp/gp/product/4774135666?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4774135666" target="_blank" class="extlink">[24時間365日] サーバ/インフラを支える技術 ~スケーラビリティ、ハイパフォーマンス、省力運用</a></em>』</li><li>著者: 安井 真伸, 横川 和哉, ひろせ まさあき, 伊藤 直也, 田中 慎司, 勝見 祐己</li><li>出版社: 技術評論社</li></ul>
</div>
<div class="clear"></div>

<h3>大規模データを扱う勘所</h3>

<h4>プログラミングの3つの勘所</h4>

<ol><li>いかにメモリで済ませるか</li>
<li>データ量の増加に強いアルゴリズムを使う</li>
<li>データ圧縮や検索技術を駆使する</li></ol>

<h4>3つの基礎知識</h4>

<ol><li>OSのキャッシュ</li>
<li>分散を考慮したRDBMSの運用</li>
<li>アルゴリズムとデータ構造</li></ol>

<h3>OSのキャッシュのしくみ</h3>

<section>

<h4>参考</h4>

<ul><li><a href="http://d.hatena.ne.jp/naoya/20070521/1179754203" target="_blank" class="extlink">Linux のページキャッシュ - Hatena::Diary::naoya</a></li></ul>

</section>

キャッシュを前提に I/O を軽減するというのが、I/O 対策の基本です。扱うデータ規模に対して十分な物理メモリを用意しておくことで、データがすべてキャッシュにのるので I/O が軽減できます。

また、データを圧縮することによって、そのままではキャッシュに全部のらなかったものがのるようになって、効率化ができるようになります。

<h3>分散のポイント</h3>

CPU が追いついていないときにサーバを増やす分には単純に増やせばよいですが、<em>ディスクアクセスによる負荷を軽減する場合は単純に増やすことはできません。</em>

OS のキャッシュによって I/O を軽減する目的でサーバを増設する場合には、アクセスパターンを考慮して十分にデータがキャッシュにのるようにサーバを増やす必要があります。つまり、<em>単純に同じサーバを増やすというのでは効果がないことがあります。</em>

特に、データベースがボトルネックになっているときには、データ量が多いテーブルをメモリが潤沢なサーバに移すなどのアクセスパターンによってサーバを分散させるようにする必要があります。

<h3>局所性を考慮した分散</h3>

いかにしてデータをキャッシュにのせた状態で処理するかを考えて、分散を行う必要があります。例えば、データベースの分散の手法には様々ありますが、主なものには次のものがあります。

<dl><dt>テーブル単位での分割</dt>
<dd><p>1台のサーバのメモリ上にのるように、テーブル単位でサーバを分割する方法。アプリケーション側の変更も必要になる</p></dd>
<dt>データの途中で分割</dt>
<dd><p>テーブル単位で分割ではなくデータの途中から別のサーバに分割する方法。たとえば、イニシャルがA〜M、N〜Zでサーバを分ける。これも、アプリケーション側の変更が必要になる</p></dd>
<dt>リクエストパターンによって分割する</dt>
<dd><p>最近のデータ、過去のデータなどといった感じでリクエストのパターンによってデータを分割し、サーバを分散する方法。API からのリクエスト、検索エンジンからのリクエストなどで分けたりもする</p></dd>
</dl>

<em>テーブルを分散させるときには、アプリケーション側で JOIN を極力使わないようにする必要があります。</em>多くの RDBMS では別サーバにあるテーブルどうしを JOIN することができません。

<h3>サーバ再起動時には一度データをリードする</h3>

<blockquote><p>MySQLなどのDBサーバを運用するにあたって、大規模なデータを扱う場合にはここに注意が必要です。たとえば、メンテナンスなどでサーバを再起動した場合、それまでにメモリにキャッシュされていたページキャッシュは、すべてフラッシュされてしまいます。(中略）。一度必要なデータ全体に読み込みをかけてから、プロダクション環境に戻すといった工夫が必要になります。</p>

<p><cite>本書「Column - ページキャッシュは一度readしてから」より</cite></p></blockquote>

<h3>Bツリーインデックスはハードディスクのアクセスと相性がいい</h3>

<section>

<h4>参考</h4>

<ul><li><a href="http://www.atmarkit.co.jp/fdb/rensai/oraobstacle03/oraobstacle03_1.html" target="_blank" class="extlink">Bツリーインデックスに最高のパフォーマンスを - @IT</a></li></ul>

</section>

Bツリーはそのデータ構造上、ページキャッシュと相性がいいです。なので、データベースでインデックスを貼る際にはBツリーインデックスを使うことが多いです。また、Bツリーをさらに最適化したものに、<a href="http://www.atmarkit.co.jp/icd/root/24/21256624.html" class="extlink" target="_blank">B+ツリー</a>というものもあります。

<h4>MySQLのインデックスの癖</h4>

<blockquote><p>複数のカラムがインデックス利用の対象になった場合です。(中略)。<strong>MySQLは1回のクエリでインデックスを1つしか使わない</strong>、という癖を持っているのが原因です。</p>

<p><cite>本書より</cite></p></blockquote>

<div class="bookInfoBody">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/4873114268?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4873114268" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/51s%2Bp62hCgL._SL160_.jpg" height="120" title="実践ハイパフォーマンスMySQL 第2版" alt="実践ハイパフォーマンスMySQL 第2版" /></a>
</div>
<ul><li>『<em><a href="http://www.amazon.co.jp/gp/product/4873114268?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4873114268" target="_blank" class="extlink">実践ハイパフォーマンスMySQL 第2版</a></em>』</li><li>著者: Baron Schwartz (著), Peter Zaitsev (著), Vadim Tkachenko (著), Jeremy D. Zawodny (著), Arjen Lentz (著), Derek J. Balling (著), 伊藤 直也 (監訳) (翻訳), 田中 慎司 (監訳) (翻訳), 吉川 英興 (監訳) (翻訳), 株式会社クイープ (翻訳)</li><li>出版社: オライリージャパン</li></ul>
</div>
<div class="clear"></div>

インデックスが効くかどうかは、explain コマンドを使うと確認できます。

<ul><li><a href="http://nippondanji.blogspot.com/2009/03/mysqlexplain.html" class="extlink" target="_blank">MySQLのEXPLAINを徹底解説!! - 漢のコンピュータ道</a></li></ul>

<h3>更新系のデータベースでもスケールしやすい kye-value ストア</h3>

RDBMS を使っていると、参照系のクエリに関しては、キャッシュに注意すればサーバを増設するだけなのでスケールしやすいです。しかし、更新系のクエリとなるとサーバの増設はとたんに難しくなります。

そこで、そもそも RDBMS を使わないという選択肢をとることも考えられます。単に値を書きこんで取り出すだけで、RDBMS の統計処理やソートなどが不要なのであれば、key-value ストアを使用するという方法を考えるといいです。

<blockquote><p>単に値を保存して取り出すだけで、RDBが持つ複雑な統計処理や汎用的なソート処理が必要ないなら、key-valueストアはオーバーヘッドも少なく圧倒的に速いし、スケールしやすいんです。</p>

<p><cite>本書より</cite></p></blockquote>

<h3>圧縮アルゴリズム</h3>

<ul><li><a href="http://d.hatena.ne.jp/naoya/20090804/1249380645" target="_blank" class="extlink">γ符号、δ符号、ゴロム符号による圧縮効果 - Hatena::Diary::naoya</a></li></ul>

<h3>アルゴリズムのオーダー表記</h3>

右に行くほど計算量が多くなります。

<pre>O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) ... O(n<sup>k</sup>) &lt; O(2<sup>n</sup>)</pre>

<h3>はてなで使っている（使っていたいた）マッチングアルゴリズムやデータ構造</h3>

<ul><li>パターンマッチング: <a href="http://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%82%A4%E6%9C%A8" target="_blank" class="extlink">Trie(トライ木)</a></li>
<li>パターンマッチング: <a href="http://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%A4%E3%83%9B-%E3%82%B3%E3%83%A9%E3%82%B7%E3%83%83%E3%82%AF%E6%B3%95" target="_blank" class="extlink">Aho-Corasick法(AC法)</a></li>
<li>カテゴリ判定: <a href="http://ja.wikipedia.org/wiki/%E3%83%99%E3%82%A4%E3%82%B8%E3%82%A2%E3%83%B3%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF" target="_blank" class="extlink">ベイジアンフィルタ</a></li>
</ul>

<h3>検索システムの6つのステージ</h3>

全文検索システムを作る上で、大まかに作業を分けると、6つのステージに分解できます。

<dl><dt>クロール</dt>
<dd><p>検索する対象のドキュメントを見つける</p></dd>
<dt>格納</dt>
<dd><p>ドキュメントを保存・格納する</p></dd>
<dt>インデクシング</dt>
<dd><p>ドキュメントからインデックスを構築する</p></dd>
<dt>検索</dt>
<dd><p>インデックスを元にクエリを含むドキュメントを検索する</p></dd>
<dt>スコアリング/ランキング</dt>
<dd><p>検索結果をどのような順番で表示するかを決める</p></dd>
<dt>結果表示</dt>
<dd><p>結果を表示する</p></dd>
</dl>

<div class="bookInfoBody">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/0521865719?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=0521865719" target="_blank"><img src="https://images-na.ssl-images-amazon.com/images/I/41xVx99-4yL._SL160_.jpg" height="120" title="Introduction to Information Retrieval" alt="Introduction to Information Retrieval" /></a>
</div>
<ul><li>『<em><a href="http://www.amazon.co.jp/gp/product/0521865719?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=0521865719" target="_blank" class="extlink">Introduction to Information Retrieval</a></em>』</li><li>著者: Christopher D. Manning (著), Prabhakar Raghavan (著), Hinrich Schuetze (著)</li><li>出版社: Cambridge University Press; Anniversary</li></ul>
</div>
<div class="clear"></div>

<h3>仮想化のデメリット</h3>

はてなでの経験則だそうですが、だいたい、

<ul><li>CPUで2〜3%</li>
<li>メモリの性能も1割くらい</li>
<li>ネットワークの性能は半分くらい</li>
<li>I/O性能が5%くらい</li></ul>

落ちるようです。

<h3>SSDの寿命</h3>

<blockquote><p>SSDを扱う上で一番気になるのは、いつどのように壊れるのか、ということです。HDDが時間と共に消耗して壊れるのは周知の事実なのですが、SSDも時間とともに消耗して壊れる、と考えるのが自然です。</p>

<p><cite>本書より</cite></p></blockquote>

フラッシュメモリも書き込みの消耗で壊れてしまうようです。新しいメディアを使うときは、それがどのように壊れるのかをきちんと確認して、監視する仕組みを整えておくことが必要です。

<h3>ネットワークの限界</h3>

1つのサブネットは500ホストくらいが限界のようです。サブネット内にホストがたくさんあると、ブロードキャストパケットの受信だけでも結構 CPU を食うようです。

<h3>ジョブキュー、ストレージ、キャッシュシステム、計算クラスタ</h3>

<section>

<h4>いまどきのWebサービスに求められる実践技術</h4>

<ul><li>ジョブキューシステム -- TheSchwartz, Gearman</li>
<li>ストレージ -- RDBMS, key-valueストア</li>
<li>キャッシュシステム -- Squid, Varnish</li>
<li>計算クラスタ -- Hadoop</li></ul>

</section>

<h4>ストレージ選択のフローチャート</h4>

本書より

<img alt="flowchart.png" src="http://hamasyou.com/archives/images/flowchart.png" width="558" height="474" class="mt-image-none" style="" />
-----
EXCERPT:

-----
KEYWORDS:
大規模サービス,データ構造,メモリ,OS,DB,サーバ,インフラ, 4774143073, 978-4774143071
-----


-----
CF50_CF_4: 伊藤 直也 (著), 田中 慎司 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/51GW5jxmdvL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4774143073?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774143073
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: WEB+DB PRESS Vol.61
BASENAME: webdb_press_vol_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 02/16/2011 09:49:35 PM
TAGS: Android,iPhone,Titanium
-----
BODY:
<a href="http://www.appcelerator.com/products/titanium-mobile-application-development/" class="extlink" target="_blank"><strong>Titanium Mobile</strong></a> で始める、iPhone / Android アプリ開発！

<a href="http://d.hatena.ne.jp/r_kurain/" target="_blank" class="extlink">はてなの倉井さん(r_kurain）</a>と<a href="http://mountposition.co.jp/" target="_blank" class="extlink">マウントポジション</a>とで特集『<em>実践！Titanium JavaScriptでiPhone/Android本格アプリ開発</em>』を書かせていただきました。Titanium の特集です。

iPhone / Android でアプリを作りたいけど二の足を踏んでいた方、最近 <strong>Titanium</strong> という言葉をよく聞くけど何なんだろう？と思っていた方、おすすめです！

-----
EXTENDED BODY:
サンプルアプリも豊富に載っていますので、参考にしてみてください。（バグ情報ありましたらご連絡ください。。。）

<p class="option">サンプルアプリのソースコードは github で公開しています。</p>

<ul><li><a href="http://gihyo.jp/magazine/wdpress/archive/2011/vol61/support" target="_blank" class="extlink">WEB+DB PRESS Vol.61 サポートページ - gihyo.jp<a></li>
<li><a href="https://github.com/mountposition/wdbv61" target="_blank" class="extlink">WEB+DB PRESS Vol.61 特集1 サンプルソースコード（4-6章）- github</a></li>
<li><a href="https://github.com/kurain/HaikuSample" target="_blank" class="extlink">WEB+DB PRESS Vol.61 特集1 サンプルソースコード（7章）- github</a></li></ul>
-----
EXCERPT:

-----
KEYWORDS:
Titanium, iPhone, Android
-----


-----
CF50_CF_4: WEB+DB PRESS編集部
CF50_URL: http://ec2.images-amazon.com/images/I/61UC3cgqGyL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4774145440?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774145440
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 俺のコードのどこが悪い?―コードレビューを攻略する40のルール
BASENAME: 40
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/06/2011 12:01:31 AM
TAGS: コードレビュー
-----
BODY:
本書は、プログラミング後のコードレビューを行う視点で、どういった点を確認すれば良いのかを教えてくれるものです。

ソースコードレビューの目的については本書では触れられていませんが、僕が考えるソースコードレビューの目的は、<strong>コードの品質を高める</strong>ためです。

テストではソースコードの品質は高められません。単体テストはあくまでも、コードが意図したどおりに書かれているかを確認するものになります。<b>品質は、ソースコードを書くこと（書き直すこと）でしか高められません。</b>

<dl><dt>他人の目から見ることで複雑なところがわかる</dt>
<dd><p>自分でコーディングしているときは気づきにくい、処理の複雑な部分が他人の目によって明らかになる</p></dd>
<dt>他人の経験を生かせる</dt>
<dd><p>リファクタリングが必要な部分や、もっとシンプルで効率のよいコードに直せるところを指摘してもらえる</p></dd></dl>

本書では、こういった他人の目から見たコードの注意点を勉強できるものになっています。
-----
EXTENDED BODY:
本書で項目に挙げられているレビュー観点は、プログラミングの基本的なところでありながら、きちんと教育を受けてこなかったプログラマには気づきにくい点が多くあると思いました。

本書でレビュー観点を学ぶとともに、自分がコーディングするときにはこう言ったところに注意してコードを書いていくことで、品質の高いコードがかけるようになると思います。

初心者プログラマ、社会人でプログラマとしてデビューした人におすすめです。
-----
EXCERPT:

-----
KEYWORDS:
コードレビュー,978-4-7980-2918-4
-----


-----
CF50_CF_4: 藤原 克則
CF50_URL: http://ec2.images-amazon.com/images/I/31vNF0LY76L._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4798029181?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4798029181
CF50_CF: 秀和システム
-----
CF50_CF_5:

-----
CF50_CF_3: 3
--------
AUTHOR: hamasyou
TITLE: Titanium Mobileで開発するiPhone/Androidアプリ (Smart Mobile Developer)
BASENAME: titanium_mobile
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 06/18/2011 10:01:15 AM
TAGS: Android,iPhone,JavaScript,Ti,Titanium,スマートフォンアプリ,開発
-----
BODY:
本書は、スマートフォンアプリ開発に使う開発ツールを探している人、<strong>Titanium Mobile</strong> という名前を聞いたことがあるけど実際にどういうものかを知りたい人、Titanium Mobile を使って開発を始めたけどこういう書き方で合っているのか不安な人向けの、概要書兼リファレンスブック的な位置づけにあたります。

<section>

<h4>Titanium Mobile</h4>

<a href="http://www.appcelerator.com/products/titanium-mobile-application-development/" target="_blank" class="extlink">Titanium Mobile - Appcelerator</a>

</section>

Titanium Mobile を開発、提供している Appcelerator が用意してくれている Web 上のドキュメントは、Titanium Mobile を始めたばかりの人には分かりづらく、「こういうことがしたいんだけどどう書けばいいの？」という時には使いづらいのです。

本書は、そんな Titanium Mobile のドキュメントの弱さを補い、Titanium Mobile とはどういうふうに動作しているのか、こういうことをするときはどう書けばいいのかを学ぶのに最適な本です。

iPhone、Android 向けスマートフォンアプリとはいえ、プラットフォーム SDK が備える機能はとても豊富です。これらの SDK を JavaScript から扱えてしまう Titanium Mobile をよくここまでまとめたなぁという印象の良書です。

<div class="option"><p>スマートフォン開発は、Windows や Mac などの GUI アプリケーションと同様、イベントドリブンモデルの開発になります。そのため、GUI アプリ開発の経験がない人には Titanium Mobile を使って JavaScript で開発を行うと、どうしても戸惑うことが出てくると思います。</p>

<p>本書をとりあえず読んでみて、<em>Titanium Mobile 上で JavaScript で GUI 開発（スマートフォンアプリ開発）ってこういうふうにするんだ</em>というのを体感してもらい、リファレンスとしてのお供にされるといいと思います。</p></div>

本書の対象者は、<em>Titanium Mobile を使って開発を始めたい人、実際に開発を始めたがまとまった情報がほしい人</em>です。Titanium Mobile を使ってとにかく何か作ってみたいひとは、本書内のサンプルを写経してみるといいと思います。

Titanium Mobile を使って開発をしてみたものの、不安が残っている人に最適な一冊です。
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

<h2>本書の目次</h2>

<ol>
<li>Appcelerator Titanium Mobile について
  <ol>
  <li>Appcelerator 社と Titanium シリーズ</li>
  <li>Titanium Mobile について
    <ol class="fontSmall">
    <li>Titanium Mobile が提供する機能</li>
    <li>Titanium Mobile の動作原理</li>
    <li>オープンソース開発されている Titanium Mobile </li>
    <li>日本で注目を集める Titanium Mobile</li>
    <li>今後のロードマップ</li>
    </ol>
  </li>
  <li>価格体系／ライセンス</li>
  <li>Titanium Mobile を利用するのに必要な環境
    <ol class="fontSmall">
      <li>iOS には Mac OS X 環境が必要</li>
      <li>Android 開発について</li>
    </ol>      
   </li>
   <li>ネイティブアプリケーション開発で代替手段を選択するリスク</li>
   </ol>
</li>
<li>開発環境導入とアプリケーションの第一歩
  <ol>
  <li>iOS 用開発環境の構築
    <ol class="fontSmall">
      <li>iOS SDK と Xcode</li>
      <li>IOS Developer Program の登録</li>
    </ol>
  </li>
  <li>Android 用開発環境の構築
    <ol class="fontSmall">
      <li>JDK の確認と Android SDK の入手</li>
      <li>Mac OS への導入</li>
      <li>Windows7 へのインストール</li>
    </ol>
  </li>
  <li>Titanium Developer のインストール
    <ol class="fontSmall">
      <li>Mac OS X の場合</li>
      <li>Windows7 の場合</li>
      <li>Titanium Developer の起動とサインアップ</li>
    </ol>
  </li>
  <li>Titanium Developer の画面解説
    <ol class="fontSmall">
      <li>パースペクティブ</li>
      <li>最新版 SDK のアップデート</li>
    </ol>
  </li>
  <li>Hello World プロジェクトの作成
    <ol class="fontSmall">
      <li>プロジェクトの新規作成</li>
      <li>iPhone(iPod touch)の場合</li>
      <li>Andorid の場合</li>
      <li>iPad の場合</li>
    </ol>
  </li>
  <li>Hello World プロジェクトを実機で動かす
    <ol class="fontSmall">
      <li>iOS(iPhone/iPad/iPod touch)の場合</li>
      <li>Android の場合</li>
    </ol>
  </li>
  <li>プロジェクトの中を探索する
    <ol class="fontSmall">
      <li>プロジェクトのフォルダ構成</li>
      <li>app.js の解説</li>
      <li>プラットフォームによる UI の違い</li>
    </ol>
  </li>
  <li>ネイティブ UI の部品紹介と KitchenSink
    <ol class="fontSmall">
      <li>ネイティブ UI の部品カタログ</li>
      <li>KitchenSink とは何か？</li>
    </ol>
  </li>
  <li>Hello World の中身をいじってみる
    <ol class="fontSmall">
      <li>win1 に機能を追加する</li>
      <li>win2 に機能を追加する</li>
      <li>Tab を使わない画面デザイン</li>
      <li>WebView を用いた HTML5 アプリケーション</li>
    </ol>
  </li>
  <li>アプリケーションアイコン／スプラッシュスクリーンを変更
    <ol class="fontSmall">
      <li>アプリケーションアイコン</li>
      <li>スプラッシュスクリーン（起動時画像）</li>
    </ol>
  </li>
  <li>アプリケーションの設定と拡張
    <ol class="fontSmall">
      <li>tiapp.xml</li>
      <li>iOS プラットフォームに依存したビルド</li>
      <li>Android プラットフォームに依存したビルド</li>
    </ol>
  </li>
  </ol>
</li>
<li>実践！ Twitter クライアントアプリ開発
  <ol>
  <li>TiTweets の目標</li>
  <li>プロジェクト作成</li>
  <li>タイムラインの表示
    <ol class="fontSmall">
      <li>HTTP クライアントとネットワークの状態の取得</li>
      <li>ログ出力メソッド</li>
      <li>TableView への表示</li>
      <li>TableViewRow の使用</li>
    </ol>
  </li>
  <li>app.js からスクリプトファイルの分割
    <ol class="fontSmall">
      <li>Titanium.include によるファイル分割</li>
      <li>Titanium.UI.createWindow の url 指定での分割</li>
      <li>ファイル分割と実行コンテキスト</li>
      <li>コンテキスト間の値の受け渡し</li>
      <li>アプリケーションプロパティを用いて実行コンテキストの違いを回避する</li>
    </ol>
  </li>
  <li>プラットフォームごとの再読込 UI の実装
    <ol class="fontSmall">
      <li>iPhoen の場合：ナビゲーションボタンを利用する</li>
      <li>Android の場合：メニューを利用する</li>
      <li>プラットフォームの違いを吸収する</li>
      <li>再読込処理を実装する</li>
    </ol>
  </li>
  <li>検索結果の表示を行う
    <ol class="fontSmall">
      <li>固定したハッシュタグの検索</li>
      <li>任意の検索文字列に基づく検索</li>
      <li>前回検索値の保存</li>
    </ol>
  </li>
  <li>共通ソースのオブジェクト化
    <ol class="fontSmall">
      <li>オブジェクトのひな形</li>
      <li>titwitter.js を実装する</li>
      <li>アプリケーション連携（OpenURL とインテント）</li>
    </ol>
  </li>
  <li>国際化対応（i18N）
    <ol class="fontSmall">
      <li>メッセージ定義ファイルの準備</li>
      <li>メッセージ定義ファイルの使用</li>
      <li>メッセージ中の文字列置き換え</li>
    </ol>
  </li>
  <li>もうすこし機能拡張
    <ol class="fontSmall">
      <li>タブの整理</li>
      <li>Tweet の単独表示</li>
      <li>Read it Later 連携</li>
    </ol>
  </li>
  <li>AppStore / Android Market への公開
    <ol class="fontSmall">
      <li>iOS の場合（Ad Hoc 配布／App Store 公開）</li>
      <li>Android Market への公開</li>
    </ol>
  </li>
  </ol>
</li>
<li>ライブラリやデバイスの活用 <span class="fontSmall">〜続・Twitter クライアントアプリ開発〜</span>
  <ol>
  <li>TinyTweet の目標</li>
  <li>OAuth 認証の設定をする
    <ol class="fontSmall">
      <li>アプリケーションを登録する</li>
      <li>OAuth 認証の動作検証を行う</li>
      <li>ホームタイムラインを取得する</li>
    </ol>
  </li>
  <li>Tweet を Post する
    <ol class="fontSmall">
      <li>TextArea を配置する</li>
      <li>キーボードツールバー（iOS のみ）</li>
      <li>返信機能などに対応する</li>
    </ol>
  </li>
  <li>カメラ撮影／フォトギャラリーの活用
    <ol class="fontSmall">
      <li>カメラ撮影の呼び出し</li>
      <li>撮影済みの写真データの取得</li>
      <li>TwitPic へのアップロード</li>
      <li>画像ファイルのリサイズ（iOS のみ）</li>
      <li>Andriod の場所のキーボードツールバー実現方法</li>
    </ol>
  </li>
  <li>アプリケーションの完成
    <ol class="fontSmall">
      <li>カメラ処理部分をソース分割する（require の活用）</li>
      <li>設定画面を作成する</li>
    </ol>
  </li>
  </ol>
</li>
<li>GPS 活用アプリケーション「食べナビ」
  <ol>
  <li>「食べナビ」における目標</li>
  <li>食べログ API に基づきデータを表示する
    <ol class="fontSmall">
      <li>API の動作検証</li>
      <li>テスト用モックデータ取得処理</li>
      <li>「もっと読む」機能</li>
      <li>店舗情報の出力</li>
    </ol>
  </li>
  <li>位置情報に基づいて地図を表示する
    <ol class="fontSmall">
      <li>地図表示部品 MapView の利用</li>
      <li>tiapps.xml への設定（Android のみ）</li>
      <li>latitudeDelta と longitudeDelta</li>
      <li>Annotation（マーカー／ピンの表示）</li>
    </ol>
  </li>
  <li>GPS で現在地の位置情報を取得する
    <ol class="fontSmall">
      <li>位置情報を取得する GPS 関連 API の利用</li>
      <li>軽遺族的な位置情報の取得</li>
    </ol>
  </li>
  <li>カバーフローによる写真一覧表示（iOSのみ）
    <ol class="fontSmall">
      <li>CoverFlowView</li>
      <li>問い合せ結果との組み合わせ</li>
    </ol>
  </li>
  <li>取得したデータをデータベースに保存する
    <ol class="fontSmall">
      <li>テーブルレイアウトと検証</li>
      <li>データの追加と更新</li>
      <li>お気に入りの表示</li>
      <li>データの削除</li>
    </ol>
  </li>
  </ol>
</li>
<li>Titanium Mobile API 簡易リファレンス
  <ol>
  <li>簡易リファレンスの読み方</li>
  <li>Window と View</li>
  <li>コントロール</li>
  <li>デバイス</li>
  <li>プラットフォーム</li>
  <li>通信</li>
  <li>その他</li>
  </ol>
</li>
<li>Appendix
  <ol style="list-style-type: none;margin-left: 0">
  <li>付録1  モダンな JavaScript コーディングの第一歩</li>
  <li>付録2  自動レイアウトと JSS 機能</li>
  <li>付録3  2DMatrix アニメーション</li>
  <li>付録4  Xib2js による UI 作成</li>
  <li>付録5  開発版ビルド（Continuous Build）を活用する</li>
  <li>付録6  モジュールを使う</li>
  <li>付録7  Titanium Studio</li>
  <li>付録8  Titanium Mobile 困ったときの情報源</li>
  </ol>
</li>
</ol>

<h2>覚書</h2>

<h3>Titanium Mobile の動作原理</h3>

Titanium Mobile は JavaScript でソースコードを記述しますが、動作時には<em>Titanium Mobile の JS インタプリタ上で解釈されて動作します。</em>

よく、JavaScript のコードがコンパイルされてネイティブコードに変換されているという誤解をしそうになりますが、そうではありません。

なので、ゲームなどのアニメーションをゴリゴリするようなアプリには、Titanium Mobile の利用は考えたほうが良いです。

Titanium Mobile が向いている分野としては

<ul><li>Web上のサービスをクライアントから利用するアプリ</li>
<li>ちょっとしたユーティリティアプリ</li></ul>

だと思います。（<a href="http://mogsnap.jp/" target="_blank" class="extlink">MogSnap</a> のようなここまで Titanium で出来るのか！？っていうものもありますが）

<h3>Appcelerator 社提供のアイコンリソース</h3>

自分でアプリをつくろうと思ったときに「アイコン画像とか、俺つくれねーーー！！」ってなることがあります。。そんなときに利用出来るのがこれ！

Appcelerator から提供されているアイコンのリソースです。是非ご利用ください。

<a href="http://developer.appcelerator.com/blog/2010/12/festivus-celebration-day-two-airing-of-grievances.html" target="_blank" class="extlink">Festivus Celebration Day Two - Airing of Grievances - Appcelerator Developer Blog</a>

<h3>実行コンテキスト</h3>

Titanium Mobilde で開発する際、Window ごとの処理を別々のソースコードに切り出すことができます。

このとき、実行コンテキストが分かれます。簡単に言うと、変数のスコープが分かれるというものです。

<a href="http://developer.appcelerator.com/blog/2010/08/execution-contexts.html" target="_blank" class="extlink">Understanding Execution Contexts - Appcelerator Developer Blog</a>

<h2>本書に書いていないこと</h2>

<h3>モジュールの開発</h3>

Titanium Mobile は、プラットフォーム SDK のネイティブ機能へのラッパーを数多く提供してくれているので、ほとんどのことが Titanium Mobile のコンポーネントの組み合わせだけで行えます。

ただ、たまに、もうちょっとこの部分がこうなっていればいいのに！という、コンポーネントを拡張したい場合があります。

Titanium Mobile にはモジュールという形で、SDK を使って直接ネイティブコードを書いて、それを JavaScript から呼び出すということができます。

モジュールのインターフェースは、Titanium Mobile 上の呼び出し規約に沿った形で作成する必要があります。

モジュールの詳しい作り方は、公式のドキュメントを読むのが手っ取り早いと思います。そんなに難しい英語ではないのですんなり理解できるかと思います。

<a href="http://developer.appcelerator.com/doc/mobile/guides" class="extlink" target="_blank">Titanium Mobile Programming Guides - Appcelerator</a>

<h3>テスト</h3>

Titanium Mobile での開発は JavaScript で記述したアプリケーションコードが Titanium のインタプリタ上で動くというアーキテクチャになっているため、GUI の実際の動作を確認するのは実機かエミュレータ（シミュレータ）を使う必要があります。

ただ、毎回実行してコードが意図したとおりに動いているかを確認するのは時間がかかります。

そういうことで、実装時には GUI の動作とロジックの部分をできるだけ分けて実装しておいて、下に挙げるようなテストフレームワークを使うよいと思います。

<h4>テストフレームワーク</h4>

<dl><dt>drillbit</dt>
<dd><a href="http://d.hatena.ne.jp/Ehren/20110329/1301417692" class="extlink" target="_blank">Titanium mobile で drillbit動いた - Ehrenの日記</a></dd>
<dt>QUnit</dt>
<dd><a href="http://higelog.brassworks.jp/?p=692" class="extlink" target="_blank">Titaniumでユニットテスト - ひげろぐ</a></dd></dl>

<h3>同期処理のための Deferred</h3>

JavaScript はシングルスレッドアーキテクチャなので、割り込みをコールバックという形で実装しています。

スマートフォンアプリのようなイベントドリブンモデルのプラットフォームでは、ユーザの反応をイベントとして発火し、リスナがそのイベントを処理するというモデルで実装していきます。

つまり、JavaScript で実装すると、イベントリスナをコールバック関数として実装して、イベントハンドラ（GUIコンポーネント）に登録しておくという書き方になります。

<pre class="code"><span class="keyword">var</span> button = Titanium.UI.createButton({...});
button.addEventListener(<span class="keyword">function</span>(e) {
  <span class="rem">// 処理</span>
});</pre>

Titanium Mobile で開発をしているとコールバックを多用するため、処理が非同期に進んでしまって、何かのイベントの結果で処理を分岐するという事をしたいときに悩むことがあります。

そんなときは、Deferred を使って非同期処理の待ち合わせを行うとよいです。

<a href="http://hamasyou.com/blog/archives/000398" target="_blank">[Titanium] JSDeferred を使って現在位置の取得を順次処理する - それはBlog</a>

<h2>追記</h2>

<h3>Titanium Mobile 1.7ならびにTitanium Studio 1.0対応について</h3>

Titanium Mobile1.7、Titanium Studio1.0 がリリースされたことで、本書の2章の内容が現実と合わなくなっています。

著者の方がフォローしてくれていますので、活用してみてください。

<a href="http://code.google.com/p/titanium-mobile-doc-ja/downloads/detail?name=TMINTRO_ch02Plus.pdf" target="_blank" class="extlink">Titanium Mobileで開発するiPhone/Androidアプリ 第二章 補完稿 - 	
titanium-mobile-doc-ja</a>

-----
EXCERPT:

-----
KEYWORDS:
Titanium Mobile, iPhone, Android, JavaScript, スマートフォンアプリ
-----


-----
CF50_CF_4: 北尾 雅人
CF50_URL: http://ec2.images-amazon.com/images/I/51VpBVSMufL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4798123986?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4798123986
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: プログラマが知るべき97のこと
BASENAME: 97
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 08/16/2011 09:45:04 AM
TAGS: これは読むべき,良書
-----
BODY:
本書は、「プログラマ」の、「プログラマ」による、「プログラマ」のための本です。

<ul><li>プログラマとして成功したい！</li>
<li>プログラミングの腕を上達させたい！</li>
<li>ソースコードの質を向上させたい！</li>
<li>メンバーと上手くやりたい！</li></ul>

こういった願いを持つ人のために、世界中でよく知られた著者陣のエッセイがまとめられています。

何か壁にぶち当たっている人、成功したプログラマはどんなことを考えていたのか知りたい人、どういうことを考えてプログラムを書けば質が上がるのか知りたい人。

すべての「プログラマ」におすすめの一冊です。

<section>

<h4 class="note">参考</h4>

<a href="http://ja.wikisource.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%8C%E7%9F%A5%E3%82%8B%E3%81%B9%E3%81%8D97%E3%81%AE%E3%81%93%E3%81%A8" target="_blank" class="extlink">プログラマが知るべき97のこと - Wikisource</a>

</section>
-----
EXTENDED BODY:
<h2>カテゴリ別目次</h2>

<ul>
<li>バグとその修正</li>
<li>ビルドとデプロイメント</li>
<li>コーディングガイドラインとコードレイアウト</li>
<li>設計原則とコーディングテクニック</li>
<li>ドメインの考慮</li>
<li>エラー、例外とその処理</li>
<li>技術、知識の習得</li>
<li>夜と魔法</li>
<li>パフォーマンス向上、最適化、その具体策</li>
<li>プロとしての心構え、態度</li>
<li>プログラミング言語とパラダイム</li>
<li>リファクタリングと保守</li>
<li>再利用と重複</li>
<li>スケジュールと納期、見積もり</li>
<li>シンプルさ</li>
<li>チームワークと強調</li>
<li>テストとその実践、テスター</li>
<li>ツール、自動化、開発環境</li>
<li>コードと顧客</li>
</ul>

<h2>おぼえがき</h2>

本書は、良いことばかり書いてあり、おぼえがきを真面目に書こうとすると全部抜き出すことになっちゃうので適当に抜き出しました。

すごくいいことがいっぱい書いてあるので、一度本屋で立ち読みしてみるといいと思います。

<h3>コードの再利用</h3>

コードの再利用をするときは、<em>コンテキスト</em>が同じかどうかを確認すること。システム内に同じことをするコードが二つあったとしてもそれぞれが違う役割をしていたら、それはコンテキストが違うから再利用のメリットは少ない。

<blockquote>

「再利用」は一般に良いこととされており、確かに基本的には良いことだからです。コンテキストさえ適切なら、間違いなく有効です。しかし、コンテキストが不適切だと、メリットよりもコストのほうが大きくなるのです。

<cite>本書-共有は慎重により</cite>

</blockquote>

<h3>DRY原則</h3>

「<strong>DRY（Don't Repeat Yourself:繰り返しを避ける）原則</strong>」とは「すべての<em>知識</em>はシステム内において、単一、かつ明確な、そして信頼できる表現になっていなければならない」という条件をみたすこと。

「知識」が唯一であるということがポイントで、その知識を取り出すコードの重複は DRY 原則違反ではない。その知識を取り出すコードの重複を一箇所にまとめることは、<strong>OAOO（Once and Only Once）</strong>と呼ぶ。

<h3>技術的例外とビジネス例外を明確に区別する</h3>

技術的例外、たとえばネットワークに繋がらない、データベースに繋がらない、配列のインデックスを超えてアクセスしたなどの例外と、預金額を超える額のお金を口座から引き出そうとしたというようなビジネス例外は、明確に別れた例外階層を使うべき。

<h3>良いインターフェース仕様の条件は「正しい使い方を簡単に、誤った使い方を困難に」</h3>

良いインターフェースは、<em>正しく使用することが操作ミスをするよりも簡単</em>である。良い API を設計するときに考えることは「<strong>それが一番自然かどうか</strong>」

<h3>名前重要</h3>

「<em>すべての人物・事物には真の名前があり、その名前を知るものはそれを支配することができる</em>」本当にしっくりくる名前を選択することは、とても重要なことで、適切な名前を選択できたら8割は設計が完成したと考えても大げさではない。
-----
EXCERPT:

-----
KEYWORDS:
プログラマ,知るべき,97のこと
-----


-----
CF50_CF_4: 和田 卓人 (監修), Kevlin Henney (編集), 夏目 大 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/511RPej0BNL.-76_SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4873114799?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4873114799
CF50_CF: オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: cocos2dで作る iPhone＆iPadゲームプログラミング
BASENAME: cocos2d_iphonei
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 08/17/2011 10:16:21 AM
TAGS: cocos2d,iPhone,Objective-C,ゲーム,良書
-----
BODY:
待望の、<strong>cocos2d</strong> 詳細解説本がでました！ 本書を読めば、cocos2d のすべてが分かると言ってもいいんじゃないかというぐらい幅広く詳しく cocos2d のことが書いてあります。

本書は、cocos2d を使ってゲームアプリをつくりながら、cocos2d の機能や cocos2d を使ってゲームアプリを開発する際の手順、こういうふうに設計したら cocos2d ではうまくいくというような事を解説しています。

cocos2d は Objective-C で書かれていて、ゲームアプリも Objective-C を使って作ります。cocos2d が内部に OpenGL-ES を隠してくれているので、すごく簡単に 2D ゲームを作ることができるようになります。

iPhone 用のゲームアプリを作ってみたいがどうやって作ればいいのかわからない人、どのフレームワークを使えばいいか迷っている人に、特におすすめです。

僕の持っている版は cocos2d のバージョン 0.99.5 が解説されています。

<section>

<h4 class="note">参考</h4>

<a href="http://www.cocos2d-iphone.org/" target="_blank" class="extlink">cocos2d for iPhone</a>

</section>
-----
EXTENDED BODY:
<h2>各章の紹介</h2>

本書第1章の概要から、各章の紹介の抜粋です。（一部、誤訳や説明の抜けがあったので補足しています）

<dl><dt>第２章　プログラミングを始めるための準備</dt>
<dd><p>cocos2d を使って開発を行うための準備、プロジェクトテンプレートのインストール、最初の「Hello World」プロジェクトの作成について説明します。ここでは、<em>シーンやノードといった cocos2d の基礎</em>を学びます。</p></dd>
<dt>第３章　基礎</dt>
<dd><p><em>Sprite、Transition、Action など、最もよく使われる cocos2d の基本クラス</em>と、そしてもちろん、それらの使用法について説明します。</p></dd>
<dt>第４章　初めてのゲーム</dt>
<dd><p>これは、あなたが初めて作るゲームとなります。ゲーム内容は、画面上から降ってくる敵をデバイスを傾けてかわします。<em>傾きを加速度センサーから取得する方法</em>についても学びます。</p></dd>
<dt>第５章　ゲームの構成要素</dt>
<dd><p>ゲームの規模が大きくなればなるほど、よりしっかりとしたコード構成が必要になります。心の準備はできているでしょうか。ここでは、<em>シーンとノードが階層化される仕組み</em>と、<em>ゲームオブジェクトの間で情報を交換するためのさまざまな方法</em>を取り上げます。</p></dd>
<dt>第６章　スプライトの詳細</dt>
<dd><p><em>テクスチャアトラスとは何</em>か、それを次のゲームに使うのはなぜかについて説明し、Zwoptex ツールを使ってテクスチャアトラスを作成する方法を紹介します。</p></dd>
<dt>第７章　スクロールを使った処理</dt>
<dd><p>テクスチャアトラスの準備ができたところで、<em>タッチ入力によって制御されるパララックススクロール対応</em>のシューティングゲームの実装方法を紹介します。</p></dd>
<dt>第８章　アクションとアニメーションの処理</dt>
<dd><p>シューティングゲームを作る際には、敵がいないとゲームとして成立しません。この章では、<em>敵の大軍を生成するコードとともに、移動、攻撃、アニメーションの作成を行うためのゲームプレイコードを追加する方法</em>を紹介します。</p></dd>
<dt>第９章　パーティクル効果</dt>
<dd><p>ParticleDesigner ツールを使って、横にスクロールするゲームに<em>パーティクル効果を追加</em>します。</p></dd>
<dt>第１０章　タイルマップの処理</dt>
<dd><p>ここで一気に弾みをつけましょう。横にスクロールするゲームから学んだことを<em>横向きモードに応用</em>し、これも人気の高い iOS ゲームジャンルのゲームを作成します。</p></dd>
<dt>第１１章　等角タイルマップ</dt>
<dd><p><em>cocos2d は TMX ファイルフォーマットをサポートしている</em>ため、ここでは Tiled エディタを使ってタイルベースのゲームを作成する方法について見ていきます。</p></dd>
<dt>第１２章　物理エンジン</dt>
<dd><p>指先の動きで目的の場所を指し示す --- ここでは、この機能がどのようにして実現されるのかを示します。<em>Chipmunk と Box2D の2つの物理エンジンを紹介</em>し、それらを驚きの手法で実装します。</p></dd>
<dt>第１３章　ピンボールゲーム</dt>
<dd><p>重力のない宇宙空間で惑星が跳ね返るボールシューティングに実際の物理学を応用します。ゲームの内容は非現実的ですが、この章で扱う物理計算は、公式そのものです。難しい箇所がありますが、面白いので是非読んでください。</p></dd>
<dt>第１４章　Game Center</dt>
<dd><p><em>Game Center と Game Kit API を利用してプレイヤーの認証、スコアの記録、Leaderboard の表示を行う方法</em>について見ていきます。</p></dd>
<dt>第１５章　非凡であれ</dt>
<dd><p>以上が本書の内容ですが、ご心配なく。あなたの旅はここで終わりません。ここからどこへ進めばよいかのヒントがここにあります。</p><dd>
</dl>

<h2>本書の感想</h2>

僕は、Objective-C を使ってゲームを作りたいと思っていたときに cocos2d に出会いました。当時は cocos2d の公式HPくらいしか cocos2d に関する情報が載っておらず、プログラミングをしていて cocos2d の使い方はこれでいいのかな？というようなところが結構ありました。

当時、試行錯誤してたどり着いたコードが、今手元の本のサンプルに書いてあり、どうしてこういうコードを書くのかという説明がされています。あの時、この本が欲しかった！！ほんとにそう思える、cocos2d の詳細解説本になっています。

cocos2d に興味がある人、ちょっと触ってみてみようかなという人は、是非本書を呼んでみてください。
-----
EXCERPT:

-----
KEYWORDS:
cocos2d,ゲーム,iPhone,Objective-C
-----


-----
CF50_CF_4: Steffen Itterheim (著), 畑 圭輔 (監修), 坂本 一樹 (監修), 加藤 寛人 (監修), 高丘 知央 (監修), 株式会社 クイープ (翻訳)
CF50_URL: https://images-na.ssl-images-amazon.com/images/I/51gwqeWV-FL._SL500_AA300.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4844330411?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4844330411
CF50_CF: インプレスジャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: The Art of Multiprocessor Programming 並行プログラミングの原理から実践まで
BASENAME: the_art_of_mult
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 08/24/2011 12:13:56 PM
TAGS: これは読むべき,並行プログラミング,良書
-----
BODY:

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
並行プログラミング,並列,共有,メモリ,ロック,スレッド,プロセス
-----


-----
CF50_CF_4: Maurice Herlihy (著), Nir Shavit (著), 株式会社クイープ (翻訳) 
CF50_URL: http://ec2.images-amazon.com/images/I/51I1tXDVosL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4048679880?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4048679880
CF50_CF: アスキー・メディアワークス
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: ７つの言語 ７つの世界
BASENAME: post_35
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 08/27/2011 10:11:24 PM
TAGS: これは読むべき,良書,言語入門
-----
BODY:
本書は、はじめてプログラミングを知ったときに楽しさを思い出させてくれるものです。紹介されているプログラミング言語は7つ。

<ul><li>Ruby</li>
<li>Io</li>
<li>Prolog</li>
<li>Scala</li>
<li>Erlang</li>
<li>Clojure</li>
<li>Haskell</li></ul>

単なる言語紹介の本ではなく、<strong>言語を知る</strong>本です。

本書を読むことで、各言語の長所、短所、原理、思想を知ることができます。プログラマとして一皮向けたい人に、おすすめです。

<blockquote>

禅の指導者は、数学ができるようになりたければラテン語を勉強せよと言うだろう。プログラミングでも同じだ。オブジェクト指向プログラミングの本質を深く理解するには、論理プログラミングや関数型プログラミング（FP）を勉強する必要がある。関数型プログラミングに上達したければ、アセンブラを勉強する必要がある。

<cite>本書序文より</cite>

</blockquote>

<blockquote>

プログラミングとは結局、理解することであり、理解できるかどうかはどれだけアイデアの引き出しがあるかにかかっている。したがって、新しい言語を直接体験することは、プログラミングが何たるかをより深く理解するために欠かせない。

<cite>本書序文より</cite>

</blockquote>
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

<h2>おぼえがき</h2>

<h2>Ruby</h2>

<strong>Ruby</strong> は純粋なオブジェクト指向言語である。オブジェクト指向の設計哲学において重要な、実装ではなくインターフェースに合わせてコーディングを行うというのを、Ruby では<em>ダックタイピング</em>によって実現する。

Ruby には多くのシンタックスシュガーが用意されており、開発者の生産性を高める工夫が数多く用意されている。

<section>

<h4>参考</h4>

<a href="http://ja.wikipedia.org/wiki/Ruby" target="_blank" class="extlink">Ruby - Wikipedia</a>

</section>

<blockquote>

スプーン一杯の砂糖があるだけで、苦い薬も飲めるのよ。

<cite>メリー・ポピンズ</cite>

</blockquote>

<h2>Io</h2>

<strong>Io</strong>（イオ）は<em>プロトタイプ言語</em>であり、すべてのオブジェクトは別のオブジェクトのクローンである。

Io はオブジェクト指向言語で、シンタックスは単純にメッセージをチェーン接続したものになる。各メッセージはオブジェクトを返す。すべてのものは別のレシーバを返すメッセージである。

Io にはキーワードはない。ただし、キーワードのように振る舞う文字がいくつかある。

クラスとオブジェクトの両方を意識する必要はなく、もっぱらオブジェクトだけを扱えばよい。必要に応じてオブジェクトを複製する。これらのクローンは<em>プロトタイプ</em>と呼ばれる。

プロトタイプベースの言語では、すべてのオブジェクトが既存のオブジェクトのクローンとなる。

<section>

<h4>参考</h4>

<a href="http://ja.wikipedia.org/wiki/Io_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E)" target="_blank" class="extlink">Io（プログラミング言語） - Wikipedia</a>

</section>

<section>

<h3>オブジェクト、タイプ、インスタンス</h3>

<pre class="code"><span class="comment"># ルートオブジェクトである Object を複製して Person オブジェクトを生成する</span>
<span class="class">Person</span> := <span class="class">Object</span> clone
<span class="comment"># Person オブジェクトを複製して hamasyou というスロットを作成する</span>
hamasyou := <span class="class">Person</span> clone</pre>

慣習上、Io ではタイプの先頭文字に大文字を使う。先頭が大文字のオブジェクトを Io はタイプとして認識する。

</section>

<section>

<h3>メソッド</h3>

Io ではメソッドは次のように定義する。

<pre class="code"><span class="keyword">method</span>(name, writeln(<span class="literal">&quot;Hello &quot;</span>, name))</pre>

メソッドもオブジェクトなので、スロットに代入できる。

<pre class="code">Person greet := <span class="keyword">method</span>(name, writeln(<span class="literal">&quot;Hello &quot;</span>, name))</pre>

</section>

<section>

<h3>プロトタイプ・プログラミングのパラダイム</h3>

<blockquote>

<ul><li>すべてのモノはオブジェクトである。</li>
<li>オブジェクトとのすべてのやり取りはメッセージを介して行う。</li>
<li>クラスをインスタンス化するのではなく、他のオブジェクト（プロトタイプという）を複製する（クローンを作成する）。</li>
<li>オブジェクトは自身のプロトタイプを記憶している。</li>
<li>オブジェクトにはスロットがある。</li>
<li>スロットにはオブジェクト（メソッドオブジェクトを含む）が格納される。</li>
<li>メッセージはスロットが保持している値を返したり、スロットに格納されているメソッドを呼び出したりする。</li>
<li>オブジェクトは、自分が応答できないメッセージを自分のプロトタイプに送信する。</li>
</ul>

<cite>本書P.48より</cite>

</blockquote>

</section>

<section>

<h3>コレクション</h3>

Io には List と Map の二つのコレクションが用意されている。

<pre class="code">myList := list(<span class="literal">&quot;Hello&quot;</span>, <span class="literal">&quot;Good bye&quot;</span>)
myMap := <span class="class">Map</span> clone</pre>

list は List プロトタイプを作成するメソッドである。Map を作成する方法はクローンしかない。

</section>

<section>

<h3>true, false, nil, シングルトン</h3>

true, false, nil はシングルトンとして定義されている。自分のクラスをシングルトンとして定義するには次のようにする。

<pre class="code"><span class="class">MySingleton</span> := <span class="class">Object</span> clone
<span class="class">MySingleton</span> clone := <span class="class">MySingleton</span></pre>

</section>

<section>

<h3>メッセージ</h3>

Io ではほとんどすべてのものがメッセージになる。メッセージは <em>sender（送信元、呼び出し元）</em>、<em>target（送信先、宛先、呼び出し先）</em>、<em>arguments（引数）</em>のコンポーネントからなる。

call メソッドを使うと、任意のメッセージに関するメタ情報を参照できる。

<pre class="code">objA := <span class="class">Object</span> clone
<span class="comment"># =&gt; Object_0x000000aa</span>
objA myMethod := <span class="keyword">method</span>(call sender)
 
objB := <span class="class">Object</span> clone
<span class="comment"># =&gt; Object_0x000000bb</span>
objB myMethod := <span class="keyword">method</span>(objA myMethod)
 
objB myMethod
<span class="comment"># =&gt; Object_0x000000bb</span></pre>

objA の myMethod スロットは、メソッドの呼び出し元の情報を表示する call sender が定義されている。これを、objB の myMethod スロットが呼び出すことによって、sender は objB が参照されるため、objB のメタ情報が表示される。

</section>

（Io を Mac OS X にインストールしようとしたところ、make でエラーが出てしまってインストール出来なかったため、おぼえがきはここまで。。）

<h2>Prolog</h2>

<em>ルールベース言語</em>である <strong>Prolog</strong> を使えば、論理を表現したり質問をしたりできる。Prolog もデータベースを扱うが、論理ルールと関係から成り、データを表現する部分とデータに質問する部分で構成される。

Prolog は次の構成要素からなる。

<dl><dt>事実</dt>
<dd><p>特定の世界についての基本的な表明</p></dd>
<dt>ルール</dt>
<dd><p>その世界の事実に関する推論</p></dd>
<dt>質問</dt>
<dd><p>その世界に関する質問</p></dd>
</dl>

Prolog では、答えに至る道筋をコーディングするのではなく、純粋な論理を使って知識をコーディングする。あとは Prolog がその知識を組み合わせて答えを見つけてくれる。我々プログラマは、知識ベースに論理を組み込んで、それに対して質問をするという形になる。

<section>

<h4>参考</h4>

<a href="http://ja.wikipedia.org/wiki/Prolog" target="_blank" class="extlink">Prolog - Wikipedia</a>

</section>

<h3>アトムと変数</h3>

Prolog では小文字で始まる単語を<em>アトム</em>と呼び、固定値の定義になる。大文字かアンダースコアで始まる単語は変数である。

<h3>知識ベース（事実、ルール）</h3>

Prolog のプログラムの例

<pre class="code">likes(hamasyou, udon).
likes(taro, udon).
likes(jiro, ramen).
 
friend(X, Y) :- ＼+(X = Y), likes(X, Z), likes(Y, Z).</pre>

likes(.., ..) の部分が事実になり、 friend(.., ..) の部分がルールになる。＼+ は否定なので、friend のルールは、X と Y が一致せず、X が Z を好きで、Y が Z を好きな場合となる。

<h3>地図の塗り分け問題の例</h3>

本書より抜粋

<img alt="map.gif" src="http://hamasyou.com/archives/images/map.gif" width="320" height="360" class="mt-image-none" style="" />

<pre class="code">different(red, green).
different(red, blue).
different(green, red).
different(green, blue).
different(blue, red).
different(blue, green).
 
coloring(Alabama, Mississippi, Georgia, Tennessee, Florida) :-
  different(Mississippi, Tennessee),
  different(Mississippi, Alabama),
  different(Alabama, Tennessee),
  different(Alabama, Mississippi),
  different(Alabama, Georgia),
  different(Alabama, Florida),
  different(Georgia, Florida),
  different(Georgia, Tennessee).</pre>

隣接する州を同じ色にぬらないように色を決めるというコーディングが、たったこれだけでかけてしまう。

Prolog では、事実と推論でロジックを表現し、利用者に質問させる。手順を追った解法を作る必要はない。

<h3>Prolog の得意とする問題</h3>

<blockquote>

Prolog では問題の解法を記述する必要はない。問題を記述するだけでよい。そして、問題を記述するための言語は純粋な論理だけだ。事実と推論から始めれば、あとは Prolog がやってくれる。Prolog のプログラムは高レベルの抽象化を実現する。この事例のスケジュール作成と行動パターンは、Prolog が得意とする問題だ。

<cite>本書P.84</cite>

</blockquote>

<h3>再帰処理のメモリ不足</h3>

ルールをネストする場合、繰り返しか再帰を使う必要がある。宣言型言語である Prolog ではこの問題の場合、再帰を使う。

宣言型言語は、再帰によるスタック領域の消費にともなるメモリ不足への対応として、<em>末尾再帰最適化</em>という手法で解決していることが多い。Prolog は再帰部分がサブゴールの最後にある場合、最適化を行うため、メモリ不足に対処することができる。

<h3>リストとタプル</h3>

リストは、[1, 2, 3]、タプルは (1, 2, 3) のように宣言する。リストは可変長、タプルは固定長である。

リストには、[Head|Tail] という構文でリストを分割する機能がある。_（アンダースコア）はワイルドカードで、何にでもマッチングすることを表す。

<pre class="code">(1, 2, 3) = (1, 2, 3).
[1, 2, 3] = [1, 2, 3].
[1, 2, 3] = [Head|Tail].
<span class="comment"># =&gt; Head = 1</span>
<span class="comment"># =&gt; Tail = [2,3]</span>
[a, b, c, d, e] = [_, _|[Head|_]].
<span class="comment"># =&gt; Head = c</span></pre>

<h3>リストと数値計算</h3>

Prolog でリストの合計値を計算する sum を処理するには、次のようにする。

<pre class="code">sum(0, []).
sum(Total, [Head|Tail]) :- sum(Sum, Tail), Total is Head + Sum.
 
| ?- <kbd>sum(What, [2, 4, 6])</kbd>
<span class="comment">What is 12 ?</span></pre>

合計のルールとして、「空のリストの合計は0であり、Tail の合計（Sum）と Head を足したものが Total になる」ということを与えてやるだけで、Prolog が合計の出してくれる。

<h3>Prolog が活躍する場面</h3>

Prolog によるプログラミングはまず知識ベースを構築し、その問題領域に関する質問をすることで行う。一部の質問は表明であり、yes、no で答える。変数を含む質問を行うことで、その変数に入る値の組み合わせを求めることができる。

単純な代入はなく、<em>ユニフィケーション</em>と<em>バックトラック</em>という技法を使用して、変数のとりうる値の推論を行っていく。

<ul><li>自然言語処理</li><li>ゲームの解法</li><li>セマンティックWeb</li><li>人工知能</li><li>スケジューリング</li></ul>

知識ベース、ルールが与えられ解を求めるといったようなコンテキストに置いて、Prolog は力を発揮する。

<h2>Scala</h2>

<strong>Scala</strong> は異なるプログラミングパラダイム間の橋渡しをする言語である。主に Java との橋渡しをする。

<ul><li>Java 仮想マシン上で動作するため、既存の環境で共存できる。</li>
<li>Java のライブラリを使用できる。また、Java のフレームワークも利用出来る。</li>
<li>静的に型付けされた言語である。<strong>オブジェクト指向と関数型プログラミング言語のパラダイム</strong>を持つ、マルチパラダイム言語。</li>
</ul>

<section>

<h4>参考</h4>

<a href="http://ja.wikipedia.org/wiki/Scala" target="_blank" class="extlink">Scala - Wikipedia</a>

</section>

<h3>Scala の特徴</h3>

<dl><dt>型推論</dt>
<dd><p>Scala は出来る限り変数の型を推論する。</p></dd>
<dt>関数型概念</dt>
<dd><p>既存の関数をさまざまな方法で用いて新しい関数を作ることができる。</p></dd>
<dt>変更不能な変数</dt>
<dd><p>Scala は、変数は変更不可能な <em>val</em> と変更可能な <em>var</em> を使い分ける。</p></dd>
<dt>アクター理論</dt>
<dd><p>マルチコア時代に対応した並行処理の仕組みを持つ。</p></dd>
</dl>

<h3>Scala の型</h3>

Scala では全てはクラスのインスタンスであり、Java のプリミティブ型も Scala ではオブジェクトとして扱う。ただし、メソッドはオブジェクトではない。関数はクラスのインスタンスであるのでオブジェクトである。

Scala は型推論によってほとんどの変数の型を自動的に解決する。これはコンパイル時に行われる。

Scala には<em>タプル</em>が用意されている。タプルは固定長のオブジェクトリストのことで、それぞれのオブジェクトは型が違っていても構わない。純粋な関数型言語ではオブジェクトとその属性をタプルで表すことが多い。

Scala のルートクラスには <em>Any</em> という型がある。Scala のすべてのクラスは Any を継承している。Scala にはすべてのクラスのサブクラスである <em>Nothing</em> 型もある。

<h3>クラス定義</h3>

Scala でクラスを定義する場合は次のように記述する。

<pre class="code"><span class="keyword">class</span> <span class="class">Person</span>(firstName: <span class="class">String</span>, lastName: <span class="class">String</span>) {
  <span class="keyword">val</span> fullName = firstName + <span class="literal">&quot; &quot;</span> + lastName
 
  <span class="keyword">def</span> name():<span class="class">String</span> = {
    <span class="keyword">return</span> fullName
  }
}
 
<span class="keyword">val</span> person = new <span class="class">Person</span>(<span class="literal">&quot;syougo&quot;</span>, <span class="literal">&quot;hamada&quot;</span>)
println(person.name)
<span class="comment">// =&gt; syougo hamada</span></pre>

クラスの定義はコンストラクタになる。クラス名に続いてコンストラクタに渡す引数を記述する。

<h3>クラスメソッドの定義</h3>

Java ではクラスメソッドを定義するのに static を利用するが、Scala ではクラスメソッドはシングルトンオブジェクトのインスタンスメソッドとして定義する。

インスタンスを一つしか持たないシングルトンクラスを定義するには <em>object</em> キーワードを使う。

<pre class="code"><span class="keyword">object</span> <span class="class">Configuration</span> {
 <span class="keyword">def</span> config = ...
}</pre>

Scala では <em>class 定義と object 定義に同じ名前を使うことができる</em>。クラスメソッドを定義したいときは class 定義で使った名前と同じクラス名を object で使い、クラスメソッドを object 定義内に記述する。

このような class と object で同名のクラスを持つようなオブジェクトを<em>コンパニオンオブジェクト</em>と呼ぶ。

<h3>トレイト</h3>

Java のインターフェースを Scala では<em>トレイト</em>と呼ぶ。トレイトには実装も記述することができる。

トレイトはクラスを部分的に実装したものと考えることができ、単一の関心事を実装するのに使うのがよい。

<pre class="code"><span class="keyword">trait</span> <span class="class">Nice</span> {
  <span class="keyword">def</span> greet() = println(<span class="literal">&quot;Hello!&quot;</span>)
}</pre>

<h3>変更不可能な変数</h3>

Scala は並行プログラミングを重視しているため、変更不可能な変数の定義が簡単に行える。Java では final を付けて変数を宣言するが、Scala では <em>val</em> キーワードで変数を定義する。

Scala では可変状態は有害であり、変数は衝突状態をさけるために変更不能（immutable:イミュータブル）にすることが推奨される。

オブジェクト指向プログラミングでは状態はオブジェクトにカプセル化されており、可変であることが多いが、<em>関数型プログラミングの設計哲学では可変状態は並行性を制限するため有害である</em>としている。

<h3>nil の扱い</h3>

Scala では Null はトレイトであり null は Null のインスタンスである。Nil は空のリストになっている。

<h3>高階関数</h3>

高階関数とは、他の関数を入力として受け取る関数、または出力として関数を返す関数のこと。

Scala のコレクションには foreach という関数を引数にとり繰り返し処理するメソッドが用意されている。

<pre class="code"><span class="keyword">def</span> foreach[<span class="class">U</span>](f: <span class="class">Elem</span> =&gt; <span class="class">U</span>): <span class="class">Unit</span> = {
  <span class="keyword">val</span> it = iterator
  <span class="keyword">while</span> (it.hasNext) f(it.next())
}</pre>

foreach の引数 <code>(f: Elem =&gt; U)</code> の部分が関数を受け取ることを表している。Scala では関数の入力を 入力の型 =&gt; 出力の型 という形で表す。

上記の場合、Elem 型のオブジェクトを引数にとり型パラメータ U を返す関数を表す。foreach は例えば次のように利用する。

<pre class="code"><span class="keyword">val</span> list = <span class="class">List</span>(<span class="literal">&quot;hoge&quot;</span>, <span class="literal">&quot;foo&quot;</span>, <span class="literal">&quot;bar&quot;</span>)
list.foreach(elem =&gt; println(elem))
<span class="comment">// =&gt; hoge</span>
<span class="comment">// =&gt; foo</span>
<span class="comment">// =&gt; bar</span></pre>

foreach に、無名関数を作成して渡している。無名関数のコードブロックは 変数名 =&gt; コード の形で作成する。ここでは、引数 elem に String 型のオブジェクト（list の要素）が渡され、コードの部分が実行される。

<h3>アクターとメッセージパッシング</h3>

Scala は並行性を実現するのに<em>アクター</em>と<em>メッセージパッシング</em>を利用する。アクターは厳密に管理されたキューで構成され、状態を更新したりアクセスしたりするときには必ずメッセージ交換に寄って通信する。

Scala でアクターを利用する場合は react または receive メソッドを loop でラップした形をしている。

<section>

<h4>参考</h4>

<a href="http://www.ibm.com/developerworks/jp/java/library/j-scala04109.html" target="_blank" class="extlink">多忙な Java 開発者のための Scala ガイド: Scala の並行性を掘り下げる - developerWorks</a>

</section>

<h2>Erlang</h2>

<strong>Erlang</strong>（アーラン）は、並行処理指向言語で、スケーラブルな並行性と信頼性を備えている。Erlang は<em>関数型言語</em>で、最大の特徴はプロセスをできるだけ軽量にするという軽量プロセスによる、並行処理である。

Erlang には魅力的な機能が備わっている。

<ul><li>エラー処理機構</li>
<li>動的なコード更新メカニズム</li>
<li>ビットレベルのパターンマッチング</li>
</ul>

Erlang のモットーは「非防御的」プログラミングと「クラッシュさせろ」である。

Erlang は<em>難しいことを簡単にし、簡単なことを難しくする</em>言語であり。「普通」のプログラムを書くのは簡単ではない。

<section>

<h4>参考</h4>

<a href="http://ja.wikipedia.org/wiki/Erlang" target="_blank" class="extlink">Erlang - Wikipedia</a>

<a href="http://erlangworld.web.fc2.com/" target="_blank" class="extlink">Erlang World</a>

</section>

<h3>関数型言語</h3>

<ul><li>プログラムはすべて関数で作成する。オブジェクトは登場しない。</li>
<li>関数は通常、入力が同じであれば出力が同じになる。</li>
<li>関数は通常、副作用を持たない。</li>
<li>すべての変数への代入は1回に限られる。</li>
</ul>

Erlang は<em>純粋な関数型言語ではない</em>。例外が幾つかある。

<h3>軽量プロセス</h3>

Erlang は<em>軽量プロセス</em>という考え方を採用している。Erlang もアクターを用いて並行処理を実現している。

Scala ではアクターはオブジェクトでありスレッドプールが動作基盤になっていたが、Erlang では<em>アクターは軽量プロセス</em>である。

<h3>信頼性</h3>

Erlang の哲学は「クラッシュさせろ」であり、何かエラーがあればすぐにプロセスを強制終了させ新しいプロセスを作成することができる。

Erlang はコードのホットスワップ（停止させずにアプリケーションの一部を取り替えること）ができる。

Erlang にはメッセージパッシング、プロセスの生成、プロセスの監視の機能が備わっているため、並行処理を行うのがとても容易になっている。

<h3>変数とアトム</h3>

Erlang では変数は大文字で始める必要がある。小文字で始めた場合はアトム（定数、シンボル）になる。

<pre class="code">apple.
<span class="comment">% =&gt; apple</span>
Fluit = banana.
<span class="comment">% =&gt; banana</span></pre>

<h3>パターンマッチング</h3>

Erlang では、データ構造をマッチングすることで、変数をタプル内の各値に代入する。

<pre class="code">Person = {person, {name, <span class="literal">&quot;Syougo Hamada&quot;</span>}, {age, <span class="literal">29</span>}}.
{person, {name, Name}, {age, Age} = Person.
Name.
<span class="comment">% =&gt; Syougo Hamada</span>
Age.
<span class="comment">% =&gt; 29</span></pre>

Erlang では複数のマッチング文と複数の種類のタプルを使うことがよくあるので、上記のように、タプルの先頭にデータ構造を表すアトムを入れておくデータ構造をよく使う。

<h3>関数</h3>

Erlang は、関数を .erl という拡張子を持つファイルに格納する。ファイルを実行するにはコンパイルが必要になる。コンパイルを行うと .beam という実行ファイルが生成される。コンパイル済みのモジュールは beam という仮想マシン内で動作する。

<section>

<h4 class="note">basic.erl</h4>

<pre class="code">-<span class="keyword">module</span>(basic).
-<span class="keyword">export</span>([mirror/1]).
 
mirror(Arg) -> Arg.</pre>

basic モジュール内に mirror という関数を定義した。<code>mirror/1</code> は一つの引数を取るという意味。export で外部に公開する関数を指定する。実行するにはコンパイルを行い、次のように呼び出す。

<pre class="code">c(basic).
basic:mirror(hamasyou).
<span class="comment">% =&gt; hamasyou</span></pre>

関数は、モジュール名を修飾して呼び出す必要がある。

</section>

<section>

<h4 class="note">matching_number.erl</h4>

<pre class="code">-<span class="keyword">module</span>(matching_number).
-<span class="keyword">export</span>([number/1]).
 
number(one) -> 1;
number(two) -> 2;
number(three) -> 3.</pre>

<pre class="code">c(matching_number).
matching_number:number(one).
<span class="comment">% =&gt; 1</span>
matching_number:number(two).
<span class="comment">% =&gt; 2</span>
matching_number:number(three).
<span class="comment">% =&gt; 3</span></pre>

関数のコードは Prolog のように記述できる。つまり、マッチングである。複数のマッチングの可能性があるコードは終端を ; で終える。最後のケースは . で終わる。

</section>

<h3>無名関数</h3>

<pre class="code">Negate = <span class="keyword">fun</span>(I) -> -I end.
Negate(1).
<span class="comment">% =&gt; -1</span></pre>

無名関数は fun というキーワードで定義する。関数は変数に代入することができる。

<h3>リスト内包表記</h3>

関数型言語で最も重要な関数の一つは map である。map はリスト要素に何かを適用しリストを変形させる。

<pre class="code">List = [1, 2, 3, 4, 5].
Double = <span class="keyword">fun</span>(X) -&gt; X * 2 end.
lists:map(Double, List).
<span class="comment">% =&gt; [2, 4, 6, 8, 10]</span></pre>

Erlang は、これと同じことをリスト内包表記と呼ぶ構文で用意している。

<pre class="code">[Double(X) || X &lt;- List].</pre>

リスト内包表記の完全な形式は次のとおり。

<ul><li>リスト内包表記は [式 || 節1, 節2, ..., 節N] という形式を持つ。</li>
<li>リスト内包表記には任意の数の節を含めることができる。</li>
<li>節には、ジェネレータまたはフィルタを指定できる。</li>
<li>フィルタには、ブール式またはブール値を返す関数を指定できる。</li>
<li><code>Match &lt;- List</code> という形式のジェネレータは、左辺のパターンを右辺のリストの各要素とマッチングする。</li>
</ul>

<pre class="code">[{X, Y} || X &lt;- [1, 2, 3, 4, 5], X &lt; 3, Y &lt;- [5, 6]].
<span class="comment">% =&gt; [{1,5},{1,6},{2,5},{2,6}]</span></pre>

<h3>並行性を実現するプリミティブ</h3>

Erlang では並行性を実現する基本プリミティブは、<em>メッセージの送信（!を使用）</em>、<em>プロセスの生成（spawn を使用）</em>、<em>メッセージの受信（receive）</em>の3つになる。

<h3>非同期通信</h3>

非同期プロセス側の受信ロジックの例を次に示す。

<pre class="code">-<span class="keyword">module</span>(mymodule).
-<span class="keyword">export</span>([loop/0]).
 
loop() -&gt;
  <span class="keyword">receive</span>
    <span class="literal">&quot;hoge&quot;</span> -&gt;
      io:format(<span class="literal">&quot;hoge&quot;</span>),
      loop();
    
    <span class="literal">&quot;foo&quot;</span> -&gt;
      io:format(<span class="literal">&quot;foo&quot;</span>),
      loop();
    
    _ -&gt;
      io:format(<span class="literal">&quot;don't understand&quot;</span>),
      loop()
end.</pre>

受信は receive で行う。無限ループを実行しているが、Erlang も末尾再帰が最適化されるため loop() がreceive 節の最後の処理である限りオーバーヘッドはない。これが Erlang で無限ループを書く際のイディオムの一つである。

次に、非同期プロセスを生成する側のコードを示す。

<pre class="code">c(mymodule).
Pid = <span class="keyword">spawn</span>(<span class="keyword">fun</span> mymodule:loop/0).</pre>

プロセスの生成は spawn で行う。spawn は関数を引数に取る関数である。

最後に、生成したプロセスに対してメッセージを送るコード例を示す。

<pre class="code">Pid ! <span class="literal">&quot;hoge&quot;</span>.</pre>

プロセスへのメッセージ送信は ! を使う。

<h3>同期プロセス</h3>

同期プロセスを使う場合は、receive でプロセスのIDと受け取ったメッセージが対となるタプルをマッチさせる。このIDにメッセージを送ることで応答を返す。

<pre class="code"><span class="keyword">receive</span>
  {Pid, <span class="literal">&quot;hoge&quot;</span>} -&gt;
    Pid ! <span class="literal">&quot;Received&quot;</span>,
    loop();
    ...</pre>
    
送信側は、応答を待つようにする必要がある。

<pre class="code">Pid ! <span class="literal">&quot;hoge&quot;</span>,
  <span class="keyword">receive</span>
    Message -&gt; do_something_with(Message)
  end.</pre>

送信側も、receive を使って応答を待つようにする。

<h3>OTP ライブラリ</h3>

Erlang は電話会社で開発されたため、主要なライブラリ OTP(Open Telecom Platform)が用意されている。耐障害性、スケーラビリティ、トランザクション整合性、ホットスワップなどの機能が組み込まれている。

<h3>（おまけ）処理系のインストール</h3>

Erlang を公式サイトからダウンロードしてきて make を行うと下のようなエラーがでた。

<pre class="console">make[3]: *** No rule to make target `erl_alloc_types.h', needed by `obj/i386-apple-darwin10.8.0/opt/plain/atom.o'.  Stop.</pre>

Makefile.in に erl_alloc_types のコンパイル方法が書かれていないせいらしい。github にパッチが上がっていたので、Makefile.in を書き換えると上手くコンパイルができた。

<a href="https://github.com/erlang/otp/blob/dev/erts/emulator/Makefile.in" target="_blank" class="extlink">Erlang Makefile.in patch</a>

<h2>Clojure</h2>

<strong>Clojure</strong> は JVM 上で動く Lisp である。

<ul><li>Lisp はリストの言語である。関数呼び出しでは、<em>リストの最初の要素を関数</em>として、<em>残りの要素を引数</em>として用いる。</li>
<li>Lisp は自分自身のデータ構造を用いてコードを表現する。「<em>データとしてのコード</em>」(code as data)の思想で設計されておりマクロ機構をもつ。</li></ul>

<section>

<h4>参考</h4>

<a href="http://ja.wikipedia.org/wiki/Clojure" class="extlink" target="_blank">Clojure - Wikipedia</a>

</section>

<h3>関数の呼び出し</h3>

Clojure は関数呼び出し全体を括弧で囲む。最初の要素は関数名、残りが引数になる。

<pre class="code">(println <span class="literal">&quot;Hello Clojure&quot;</span>)
(+ 1 1)
<span class="comment">; =&gt; 2</span></pre>

<h3>リスト、マップ、セット、ベクタ、シーケンス</h3>

Clojure では慣用的に、<em>コードにはリスト</em>を、<em>データにはベクタ</em>を使用する。

<section>

<h4>リスト</h4>

<em>リスト</em>は関数として評価されるため、リストでデータを扱う場合は次のようにする。

<pre class="code">(list 1 2 3)</pre>

</section>

<section>

<h4>ベクタ</h4>

<em>ベクタ</em>は各カッコ（[]）で表す。ベクタは順序付きのコレクション。

<pre class="code">[:hoge :foo :bar]</pre>

ベクタも関数であるため、引数にインデックスを取ることができる。

<pre class="code">([:hoge :foo :bar] 0)
<span class="comment">; =&gt; :hoge</span></pre>

</section>

<section>

<h4>セット</h4>

<em>セット</em>は順序なしのコレクション。#{} で囲んで定義する。

<pre class="code">#{:foo :hoge :bar}
<span class="comment">; =&gt; #{:hoge :foo :bar}</span></pre>

</section>

<section>

<h4>マップ</h4>

<em>マップ</em>はキーと値のセットで {} で囲んで定義する。

<pre class="code">{:key1 :hoge, :key2 :foo}</pre>

<em>Clojure ではカンマを空白として扱う</em>ため、空白の代わりにカンマを使ってもいい。

</section>

<section>

<h4>シーケンス</h4>

<em>シーケンス</em>は Clojure のコンテナを実装に依存しない形で抽象化したもの。シーケンスを使うとすべてのコレクションを総称的に扱うことができる。

</section>

Clojure では先頭に : が付いている単語は<em>キーワード</em>として扱われる。Clojure のキーワードは Ruby のシンボル、Prolog や Erlang のアトムと同じものである。

<h3>変数の定義</h3>

Clojure で変数を定義するのには <em>def</em> を使う。

<pre class="code">(def mentors {:dearth-vader <span class="literal">&quot;obi wan&quot;</span>, :luke <span class="literal">&quot;yoda&quot;</span>})</pre>

<h3>関数の定義</h3>

Clojure で関数を定義するには <em>defn</em> を使う。形式は <em><code>(defn name [params] body)</code></em> である。

<pre class="code">(defn greet [] (println <span class="literal">&quot;Hello&quot;</span>))</pre>

関数には説明文を指定することもできる。

<pre class="code">(defn greet
      <span class="literal">&quot;This function greet 'Hello'&quot;</span>
      []
      (println <span class="literal">&quot;Hello&quot;</span>))</pre>

<h3>無名関数の定義</h3>

Clojure では無名関数は <em>fn</em> で定義する。<em><code>(fn [params] body)</code></em> の形式になる。# という<em>リーダーマクロ</em>を使って簡略化して書くこともできる。リーダーマクロを使うと % がシーケンスの各項にバインドされる。

<pre class="code">(def people [<span class="literal">&quot;hamasyou&quot;</span> <span class="literal">&quot;taro&quot;</span>])
(map (fn [w] (* 2 (count w))) people)
<span class="comment">; =&gt; (16 8)</span>
(map #(* 2 (count %)) people)
<span class="comment">; =&gt; (16 8)</span></pre>

<h3>バインディング</h3>

関数の引数に実引数の値を代入することを<em>バインディング（束縛）</em>という。Clojure ではバインディングする引数の任意の部分にだけパラメータとしてアクセスする機能がある。それを<em>デストラクチャリング（分配束縛）</em>という。

無視するパラメータには慣習として _ を使う。

<pre class="code">(def board [[:x :o :x] [:o :x :o] [:o :x :o]])
(defn center [[_ [_ c _] _]] c)
(center board)
<span class="comment">; =&gt; :x</span></pre>

<em>let</em> を使えば引数リスト内以外でもデストラクチャリングを起こすことができる。

<pre class="code">(def person {:name <span class="literal">&quot;hamasyou&quot;</span>, :age 29})
(let [{name :name} person] (str <span class="literal">&quot;The person's name is &quot;</span> name))</pre>

let の第一引数はバインドするシンボルとバインドされる値からなるベクタ。第二引数は式。

<h3>再帰</h3>

Clojure は JVM の制約のため末尾再帰最適化をサポートしていない。そのため、loop と recur を使って再帰を定義する必要がある。

<a href="http://sassylog.blogspot.com/2010/03/clojure_7760.html" target="_blank" class="extlink">Clojure 再帰 - sassy log</a>

<h3>マクロ展開</h3>

Clojure はマクロ展開と呼ばれる段階を経て、コードを実装または解釈する。

<a href="http://d.hatena.ne.jp/sDaigo/20101031/1288509314" target="_blank" class="extlink">Clojure Macro 入門 - Playground of Mine</a>

<h3>ソフトウェアトランザクショナルメモリ(STM)</h3>

Clojure では並行性をサポートするために<em>ソフトウェアトランザクショナルメモリ(STM)</em>を用いる。参照を作成するのに ref を使う。

<pre class="code">(def movie (ref <span class="literal">&quot;Star Wars&quot;</span>))
(deref movie)
<span class="comment">; =&gt; &quot;Star Wars&quot;</span>
@movie
<span class="comment">; =&gt; &quot;Star Wars&quot;</span></pre>

参照先を参照するのには deref を使う。@ を使ったシンタックスシュガーも用意されている。

参照先の値を書き換えるときには、トランザクション内で実行する必要がある。トランザクションをオープンするのには dosync 関数を使う。

<pre class="code">(dosync (ref-set movie <span class="literal">&quot;Star Wars: The Revenge of the Sith&quot;</span>))
@movie
<span class="comment">; =&gt; &quot;Star Wars: The Revenge of the Sith&quot;</span></pre>

<h3>アトム</h3>

他のアクティビティと連携しない共有データは、単にスレッド安全性を保証したいだけの場合が多い。その場合は<em>アトム</em>を使う。アトムを使うとトランザクション外でもデータの変更を許す。

<pre class="code">(def config (atom <span class="literal">&quot;Configuration Data&quot;</span>))</pre>

<h3>エージェント、フューチャ</h3>

アトムと同様に<em>エージェント</em>を使うとデータを非同期に変更できる。エージェントは Io のフューチャと同じで、デリファレンスされた（参照がとりだされた）エージェントの状態は、値が使用可能になるまでブロックされる。

結果が返されるまで待ちたくない場合はフューチャを使う。

<section>

<h4>もろもろの並行性に関しての参考</h4>

<a href="http://d.hatena.ne.jp/marblejenka/20100626/1277528587" target="_blank" class="extlink">clojureでのrefsの実装について - marblejenkaの日記</a>

</section>

<h2>Haskell</h2>

<strong>Haskell</strong> は純粋関数型プログラミング言語である。Haskell は<em>遅延評価</em>を重視している。

<section>

<h4>参照</h4>

<a href="http://ja.wikipedia.org/wiki/Haskell" class="extlink" target="_blank">Haskell - Wikipedia</a>

</section>

<h3>関数の定義</h3>

Haskell の関数定義は型指定と実装に分けて指定する。型指定は省略が可能である。

<section>

<h4 class="note">double.hs</h4>

<pre class="code"><span class="keyword">module</span> Main <span class="keyword">where</span>
 
  double :: Integer -&gt; Integer
  double x = x + x</pre>

Main という名前のモジュールに double という関数を定義している。Integer 型の引数を取り Integer 型を返すという型定義をしている。この型定義は省略できる。

Haskell のモジュールは関連するコードを同じスコープ内に集めたもの。Main モジュールは特別なモジュールでトップレベルのモジュールになる。

</section>

<h3>ガードを使った関数の定義</h3>

再帰を利用した階乗計算を行う関数を定義する。

<pre class="code"><span class="keyword">module</span> Main <span class="keyword">where</span>
 
 factorial :: Integer -&gt; Integer
 factorial x
   | x &gt; <span class="literal">1</span> = x * factorial (x - <span class="literal">1</span>)
   | <span class="keyword">otherwise</span> = <span class="literal">1</span></pre>

Haskell ではガードは引数の値を制限する条件として使われる。ガードはパターンマッチング代わりに利用される。

<h3>タプル</h3>

Haskell のタプル（固定要素のコレクション）はカンマで区切った要素を括弧で囲む。

<pre class="code">(1, 2, 3)</pre>

<h3>リスト</h3>

Haskell のリストは [] を使う。

<pre class="code">let (h:t) = [1, 2, 3, 4]
h
<span class="comment">-- =&gt; 1</span>
t
<span class="comment">-- =&gt; [2,3,4]</span></pre>

<em>let</em> はローカルスコープ内で変数を関数にバインドする。(h:t) という表記は Prolog の[Head|Tail]  構文と同じでリストを分割する。: はリストを作成するときにも使える

<pre class="code">1:[2, 3]
<span class="comment">-- =&gt; [1,2,3]</span></pre>

リスト内包表記は、Erlang と同じように使える。

<pre class="code">[x * 2 | x &lt;- [1, 2, 3]]
<span class="comment">-- =&gt; [2,4,6]</span></pre>

<h3>無名関数</h3>

Haskell で無名関数を定義するには <em><code>(＼param1 .. paramn) -&gt; body)</code></em> と書く。

<pre class="code">(＼x -&gt; x) <span class="literal">&quot;hemasyou&quot;</span>
<span class="comment">-- =&gt; &quot;hamasyou&quot;</span></pre>

<h3>部分適用関数とカリー化</h3>

Haskell のすべての関数は一つの引数を取る。Haskell において2つの引数をとる関数は、1つの引数をとり「1つの引数をとる関数」を返す関数同義である。

このように、関数を返すことですべての関数を1つの引数をとる関数として表現することを<em>カリー化</em>と呼ぶ。

次の例は引数を2つとってそれぞれをかけたものを返す関数である。

<pre class="code">let prod x y = x * y
prod 3 4
<span class="comment">-- =&gt; 12</span></pre>

この関数は、次のように動作する。

<ul><li><code>prod 3</code> を実行して <code>(＼y = 3 * y)</code> という関数を返す</li>
<li><code>(＼y = 3 * y) 4</code> を実行して12を得る</li></ul>

<h3>クラス</h3>

Haskell の<em>クラス</em>は、入力に応じてどの演算が実行可能かを定義したものである。Clojure のプロトコルと同じ。

<h3>モナド</h3>

<em>モナド</em>は特別なやり方で複数の関数を組み合わせるための方法である。Haskell は純粋関数型言語なので命令形式で問題を表現したりプログラムの実行結果を蓄積したりする処理が難しくなる。モナドは関数をラップして数珠つなぎにする型構成子である。

モナドは基本的には3つの要素で構成される。

<ul><li>コンテナとなるものの型を変数に取る型構成子。どのコンテナを選ぶかはモナドで何を実行するかによって異なる。</li>
<li>関数をラップしてコンテナに格納する return という名前の関数。</li>
<li>関数をラップする &gt;&gt;=（バインド）と言う名前の関数。バインドを使って関数を数珠つなぎにする。</li></ul>

<a href="http://www.sampou.org/haskell/a-a-monads/html/" target="_blank" class="extlink">モナドのすべて - All About Monads</a>

-----
EXCERPT:

-----
KEYWORDS:
プログラミング言語,Ruby,Io,Prolog,Scala,Erlang,Clojure,Haskell
-----


-----
CF50_CF_4: Bruce A. Tate (著), まつもとゆきひろ (監訳), 田和 勝 (翻訳) 
CF50_URL: http://ecx.images-amazon.com/images/I/51RCHbILAFL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4274068579?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4274068579
CF50_CF: オーム社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: テスト駆動JavaScript
BASENAME: javascript
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 01/21/2012 10:35:12 AM
TAGS: JavaScript,ボリュームが凄い,満足できる,良書
-----
BODY:
JavaScript のテストに関して書かれた、体系的な本がやっと出た！という感じにまとめられています。

本書では、JavaScript にスポットを当て、テストしやすい JavaScript のコードとはどんなものか、実際にテスト駆動で JavaScript のコードを書くにはどういう手順で進めていけばよいかについて書かれています。

本書は大まかに、次の4部に分けて解説されています。

<ul>
<li>第1部: テスト駆動開発</li>
<li>第2部: プログラマのためのJavaScript</li>
<li>第3部: JavaScriptテスト駆動開発の実際</li>
<li>第4部: テストのパターン</li>
</ul>

第1部では、一般的な自動テストやテスト駆動開発（<strong>TDD</strong>）の概念を説明しながら、JavaScript 用の単体テストフレームワークを紹介しています。

第2部では、JavaScript という言語をおさらいしながら、大きな特徴である<em>関数</em>、<em>クロージャ</em>、<em>プロトタイプ継承</em>、<em>ECMAScript 第五版</em>、<em>控えめなJavaScript</em>、<em>機能検出（クロスプラットフォーム）</em>について説明を掘り下げています。

第3部では、実際に小さなプロジェクトを開発しながらテスト駆動による JavaScript の開発を体験できるようになっています。<em>Ajax</em>、<em>Comet</em> によるデータストリーミング、<em>Node.js</em> によるサーバサイド JavaScript、これらを使ったチャットプログラムの作成を体験できるようになっています。

第4部では、<em>モック</em>や<em>スタブ</em>といったいわゆる単体テストのテクニックや、優れた単体テストを書くためのテスト名の付け方や、振る舞いのテストを書くときにはどう書いたらよいか、わかりやすい単体テストコードを書くためのテクニックが説明されています。

『<strong>テスト駆動JavaScript</strong>』の名にふさわしい内容で、他の言語でも共通する単体テストのお作法も学べる本書は、TDD難民の人にオススメです。

-----
EXTENDED BODY:
おぼえがきです。

<h2>テスト駆動開発（Test-Driven Development）</h2>

単体テストの対象は、最も小さな単位である<em>関数</em>になる。テストのエントリポイントは<em>公開されている</em>メソッドからにする。

<h3>テスト駆動開発における設計</h3>

<blockquote>

<strong>テスト駆動開発では、「あらかじめ決められた大きな設計」はないが「最初の段階では設計はない」というわけではない。</strong>

TDD は、何も無いところから優れた設計を自動的に生み出すわけではなく、作業の進展とともに設計を進化させやすくするのである。TDD は、単体テストに強く依存しているため、他の部分から切り離して単独のコンポーネントに力を注ぐ開発スタイルになる。そのため、<em>コードの疎結合を保ち</em>、<em>単一責任の原則を守り</em>、不必要にコードが水ぶくれすることを防ぐために大きな力になる。TDD は設計プロセスをしっかりと制御するため、<em>設計に関する多くの決定をどうしてもそれが必要な時まで先送りする</em>ことができる。

<cite>本書 P.48</cite>

</blockquote>

TDD で開発を始める最初は、大きな設計は不要であるが、ある程度最初に時間を割いて設計を行う。最初の設計の時に考えることは、「<em>特定の状況下でコードがどのように振舞わなければならないか</em>（<strong>単一責任の原則</strong>）」、「<em>コンポーネント間でどのように仕事を委譲しあうのか</em>（<strong>GRASPパターン</strong>）」である。

<h3>単一責任の原則を尊重する</h3>

TDD の単体テストでは、<em>依存コンポーネントのテストをしてはならない</em>ので、依存コンポーネントはフェイク（モックやスタブ）に置き換えなければならない。

<h3>テストフレームワーク</h3>

<blockquote>

JavaScript のテストをするための事実上の標準はない。実際、JavaScript は汎用の標準ライブラリというものを持たないので、ブラウザのスクリプティングと直接関係のないプログラミングタスクはどれでも事実上の標準を持たないのである。この状況を改善するために、もともとはサーバーサイド JavaScript の標準化を目指していた CommonJS という活動がある。

<cite>本書 P.64</cite>

</blockquote>

JavaScript のテストを行おうとすると、ブラウザ毎の挙動の違いや JavaScript の実装の違いにより動作が異なってきてしまう。そのような問題を解決しようと、Google 作った <strong>JsTestDriver</strong> が注目を集めている。

JsTestDriver もいくつかの欠点はあるため、YUI Test との使い分けをしていくとよさそう。

<h2>プログラマのための JavaScript</h2>

<h3>関数の引数</h3>

JavaScript は関数を呼び出すときに引数の個数をチェックしない。実引数が渡されなかった仮引数は undefined になる。

<h3>スコープと実行コンテキスト</h3>

JavaScript には、グローバルスコープと関数スコープの2種類のスコープしかない。関数スコープでは、変数を関数内のどこで宣言しても、関数のどこでも参照することができる。

<h3>this キーワード</h3>

多くのオブジェクト指向言語で、this はレシーバオブジェクトを指すが、JavaScript ではthis の値は呼び出し元によって決まる。

<blockquote>

this は、かっこを受かって関数を呼び出したときに暗黙のうちに設定される。<em>関数として呼び出すとグローバルオブジェクト、メソッドとして呼び出すとその呼出に使ったオブジェクトが this になる</em>。

<cite>本書 P.104</cite>

</blockquote>

<h3>名前空間</h3>

オブジェクトを名前空間として使うには、グローバルスコープでオブジェクトを定義し、関数やオブジェクトをそのオブジェクトのプロパティとして定義すれば良い。

<pre class="code"><span class="keyword">var</span> tddjs = {
  lightbox: { <span class="comment">/* ... */</span> },
  anchorLightbox: <span class="keyword">function</span>(anchor, options) {
    <span class="comment">/* ... */</span>
  }
};</pre>

大きなライブラリを作るようなときは、名前空間を構造化したい場合がある。そんなときは、namespace 関数を使うと良い。

<pre class="code"><span class="keyword">var</span> tddjs = (<span class="keyword">function</span>() {
  <span class="keyword">function</span> namespace(str) {
    <span class="keyword">var</span> object = <span class="keyword">this</span>;
    <span class="keyword">var</span> levels = str.split(<span class="literal">&quot;.&quot;</span>);
    
    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="literal">0</span>, len = levels.length; i < len; i++) {
      <span class="keyword">if</span> (<span class="keyword">typeof</span> object[levels[i]] == <span class="literal">&quot;undefined&quot;</span>) {
        object[levels[i]] = {};
      }
      object = object[levels[i]];
    }
    <span class="keyword">return</span> object;
  }
  
  <span class="keyword">return</span> {
    namespace: namespace
  };
}());
 
<span class="keyword">var</span> custome = { namespace: tddjs.namespace };
custome.namespace(<span class="literal">&quot;dom.event&quot;</span>);
<span class="comment">/* custome.dom.event  namespace */</span></pre>

<h2>控えめなJavaScript</h2>

<blockquote>

セマンティックマークアップは、文書の構造に関わるものであり、文書の構造だけを対象とする。セマンティックHTMLは、アクセシビリティ向上の可能性を広げるだけでなく、CSS と JavaScript とのフックを増やす。視覚的なスタイルやレイアウトは CSS の領域である。表示に関わる属性や要素は使わないようにすべきだ。動作は、JavaScript の領域であり、外部スクリプトを介して関わるようにすべきだ。

<cite>本書 P.185</cite>

</blockquote>

控えめな JavaScript の7つのルールは次のようになる。

<ul>
<li>思い込みをするな</li>
<li>フック（接点）と関係を見つけよ</li>
<li>反復処理を専用ルーチンに委ねよ</li>
<li>ブラウザとユーザーを理解せよ</li>
<li>イベントを理解せよ</li>
<li>他者と上手く折り合いをつけよ</li>
<li>次のデベロッパのために仕事をせよ</li>
</ul>

HTML と JavaScript の結合度を下げるために、イベントハンドラを使うとよい。また、テクニックの一つとして、イベントデリゲーションが推奨されている。

<strong>イベントデリゲーション</strong>は、ほとんどのユーザイベントがターゲット要素だけでなく、DOM 階層の上位コンテナでも発生することである。

ひとつ一つの要素にイベントハンドラを仕込むのではなく、その上位の要素でハンドリングし、子要素の状態によって処理を管理するようにするとすっきりとしたコードになることが多い。

<h2>優れた単体テストを書く</h2>

テスト名の付け方として、「いかに」ではなく「何を」と「なぜ」を中心につけるとよい

-----
EXCERPT:

-----
KEYWORDS:
JavaScript,テスト駆動,TDD,自動テスト,Ajax,Comet,Node.js
-----


PING:
TITLE: can you buy raspberry ketone in canada
URL: http://wallinside.com/post.php?id=3708479
IP: 46.105.231.51
BLOG NAME: can you buy raspberry ketone in canada
DATE: 04/25/2013 11:27:20 AM
テスト駆動JavaScript - それはBooks
-----

PING:
TITLE: Colon Cleanse Total Review
URL: http://throwbackbitch.com/black/users/JanellBGN
IP: 184.154.116.236
BLOG NAME: Colon Cleanse Total Review
DATE: 10/17/2013 01:40:43 AM
テスト駆動JavaScript - それはBooks
-----

PING:
TITLE: Wrinkle Rewind Skin Care
URL: http://forum.startmandarin.co.uk/profile.php?mode=viewprofile&u=143745
IP: 184.154.163.107
BLOG NAME: Wrinkle Rewind Skin Care
DATE: 10/19/2013 10:24:14 AM
テスト駆動JavaScript - それはBooks
-----

-----
CF50_CF_4: Christian Johansen (著), 長尾高弘 (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51g1mDqlfJL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4048707868?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4048707868
CF50_CF: アスキー・メディアワークス
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: オブジェクト指向JavaScript
BASENAME: javascript_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 04/27/2012 12:54:06 PM
TAGS: JavaScript,いいまとめ,これは読むべき,わかりやすい
-----
BODY:
本書は、JavaScript を理解するためのものです。JavaScript はプロトタイプベースの言語で、クラスがなかったり、プロパティのアクセス修飾子がなかったり、継承の仕方が特別だったりします。

JavaScript を理解するには、JavaScript は全てがオブジェクトであることを覚えておく必要があります。本書は、こう言った、JavaScript が他のオブジェクト指向言語と違う点を整理し、JavaScript ではこう書くというのを丁寧に解説してくれています。

「JavaScript はブラウザ上で動く小さな言語」という認識だった昔とは、昨今では JavaScript の扱いは変わりました。サーバサイドでも JavaScript を動かしたり、スマートフォンの開発に JavaScript を使ったりと、JavaScript が使える舞台は広がっています。

JavaScript をもう一度ちゃんと理解したいという人に、本書はおすすめです。
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<h3>プリミティブデータ型</h3>

<dl>
<dt>Number</dt>
<dd>1, 100, 3.14 などの数値。浮動小数点を含む。</dd>
<dt>String</dt>
<dd>'hoge', &quot;foo bar&quot;, などで表現される文字列。</dd>
<dt>Boolean</dt>
<dd>true と false。</dd>
<dt>undefined</dt>
<dd>まだ存在していない変数にアクセスすると得られる値。</dd>
<dt>null</dt>
<dd>値がないことを表す値。</dd>
</dl>

<h3>変数の型をしる <code>typeof</code> 演算子</h3>

変数や値の型を調べるときに使える <strong>typeof演算子</strong>は、<em>&quot;number&quot;</em>、<em>&quot;string&quot;</em>、<em>&quot;boolean&quot;</em>、<em>&quot;undefined&quot;</em>、<em>&quot;object&quot;</em>、<em>&quot;function&quot;</em> のいずれかの値（文字列）を返す。

<h3>Infinity（無限）</h3>

<strong>Infinity</strong> は JavaScript で扱えない大きな数値を表すのにつかう値。JavaScript で扱える最大の数値は 1.7976931348623157e+308、最小は 5e-324である。

<pre class="code">>>> Infinity
<em>Infinity</em>
>>> typeof Infinity
<em>"number"</em>
>>> 1e309
<em>Infinity</em></pre>

<h3>Boolean に変換されると false になる値</h3>

<ul>
<li>空文字列&quot;&quot;</li>
<li>null</li>
<li>undefined</li>
<li>数値の 0</li>
<li>数値の NaN</li>
<li>Boolean型の false</li>
</ul>

<h3>型変換の Tips</h3>

数字のような文字列を数値に変換する方法は parseInt() 関数を使う方法の他に、1 を掛けるという方法もある。

<pre class="code">>>> <span class="keyword">var</span> s = <span class="literal">"100"</span>;
>>> s = s * <span class="literal">1</span>;
>>> <span class="keyword">typeof</span> s;
<em>"number"</em></pre>

文字列に変換する場合、空文字と結合する方法がある。

<pre class="code">>>> <span class="keyword">var</span> n = <span class="literal">10</span>;
>>> n = <span class="literal">""</span> + n;
>>> <span class="keyword">typeof</span> n;
<em>"string"</em></pre>

<h3>配列の要素の削除</h3>

配列の要素の削除には delete 演算子を使うが、この演算子は配列の要素を減らすわけではなく、undefined を設定する。

<pre class="code">>>> <span class="keyword">var</span> a = [1, 2, 3];
>>> delete a[1];
<em>true</em>
>>> a.length;
<em>3</em>
>>> a;
<em>[1, undefined, 3]</em></pre>

<h3>変数が定義されていて、値が割り当てられているかどうかを確認する方法</h3>

<pre class="code"><span class="keyword">if</span> (<span class="keyword">typeof</span> something !== <span class="literal">"undefined"</span>) {
  <span class="rem">// 何かの処理</span>
}</pre>

<h3>自分自身を書き換える関数</h3>

自分自身を書き換える関数の仕組みは、初期化などの一度だけ行ないたい処理がある場合に使う。

<pre class="code"><span class="keyword">var</span> a = <span class="keyword">function</span>() {
  <span class="keyword">function</span> someSetup() {
    <span class="keyword">var</span> setup = <span class="literal">'done'</span>;
  }
  <span class="keyword">function</span> actualWork() {
    alert(<span class="literal">'Worky-worky'</span>);
  }
  someSetup();
  <span class="keyword">return</span> actualWork;
}();</pre>

<h2>オブジェクト</h2>

<h3>オブジェクトリテラル表記</h3>

{} を使ってオブジェクトを定義することをオブジェクトリテラル表記を呼ぶ。

<pre class="code"><span class="keyword">var</span> hero = {
  breed: <span class="literal">'Turtle'</span>,
  occupation: <span class="literal">'Ninja'</span>
};</pre>

オブジェクトのプロパティ名はクウォートしないのが推奨されている。ちなみに、連想配列（ハッシュ）のキーは文字列である。

<h3>コンストラクタ関数</h3>

関数を new してオブジェクトを作ることで、関数をコンストラクタとして利用することができる。

<pre class="code"><span class="keyword">function</span> Hero(name) {
  this.name = name;
}
 
>>> <span class="keyword">var</span> h1 = <span class="keyword">new</span> Hero(<span class="literal">'hamasyou'</span>);
>>> h1.name;
"hamasyou"</pre>

<h3>グローバル変数</h3>

JavaScript のプログラムは様々なホスト環境（たとえばブラウザ環境）で動作する。JavaScript のホスト環境はグローバルオブジェクトを提供していて、グローバル変数はグローバルオブジェクトのプロパティになる。

たとえば、ブラウザ環境では <em>window</em> というグローバルオブジェクトが提供されており、グローバル変数はすべて、window のプロパティになる。

<p class="option">コンストラクタ関数を定義したにもかかわらず、new でオブジェクトをつくらなかった場合、this はグローバルオブジェクトを指すことになる。</p>

<h3>constructor プロパティ</h3>

オブジェクトが作成されると、<em>constructor</em> プロパティと呼ばれる特別なプロパティに、オブジェクトを作成したときに使われたコンストラクタ関数がセットされる。

<pre class="code">>>> h1.constructor;
Hero(name)</pre>

<h3>instanceof 演算子</h3>

<em>instanceof 演算子</em>を使うと constructor プロパティが指定した関数かどうかを調べることができる。

<pre class="code">>>> h1 <span class="keyword">instanceof</span> Hero;
true</pre>

<h3>オブジェクトの比較</h3>

オブジェクト同士を比較すると、両方の変数が同じオブジェクトの参照の場合のみ true を返す。

<h2>プロトタイプ</h2>

<blockquote><ul><li>関数の prototype プロパティにはオブジェクトが含まれている</li>
<li>このプロパティは関数がコンストラクタのときのみ使われる</li>
<li>この関数を使って作られたオブジェクトも、prototype プロパティを持ち、関数の prototype と同じオブジェクトを参照する。このオブジェクトのプロパティは自分のプロパティと同じように使える</li></ul>
<p><cite>本書 P.133より</cite></p></blockquote>

<h3>prototype プロパティ</h3>

関数は、<em>prototype</em> と呼ばれるプロパティを保持している。初期値は空のオブジェクトになっている。

<pre class="code"><span class="keyword">function</span> multiply(a, b) {
  <span class="keyword">return</span> a * b;
}
>>> multiply.constructor;
Function()
 
>>> <span class="keywrod">typeof<span> multiply.prototype;
"object"
 
>>> multiply.prototype;
multiply {}</pre>

prototype プロパティに設定されているオブジェクトには、プロパティとメソッドを追加していくことができる。このオブジェクトは、multiply 関数自身にはなんの影響も与えない。追加したプロパティとメソッドは、multiply をコンストラクタとして利用した場合にのみ使われる。

<pre class="code">>>> multiply.prototype.name = <span class="literal">'hamasyou'</span>;
>>> multiply.name;
"multiply"
 
>>> <span class="keywrod">var</span> hoge = <span class="keyword">new</span> multiply();
>>> hoge.name;
"hamasyou"</pre>

prototype プロパティをいつ変更しても、すべてのオブジェクトが影響を受ける点は注意が必要。

<h3>prototype オブジェクトのプロパティを上書きする</h3>

オブジェクト自身のプロパティの方が、prototype オブジェクトのプロパティよりも優先して解決される。

<pre class="code"><span class="keyword">var</span> Salary = (<span class="keyword">function</span>() {
  <span class="keyword">var</span> salary = <span class="keyword">function</span>() {};
  salary.prototype.base = <span class="literal">50000</span>;
  salary.prototype.total = <span class="keyword">function</span>() {
    <span class="keyword">return</span> this.base * <span class="literal">1.05</span>;
  };
  <span class="keyword">return</span> salary;
})();
 
>>> <span class="keyword">var</span> hoge_salary = <span class="keyword">new</span> Salary();
>>> hoge_salary.base = <span class="literal">20000</span>;
>>> hoge_salary.total();
21000
 
<span class="keyword">var</span> hama_salary = <span class="keyword">new</span> Salary();
>>> hama_salary.total();
52500</pre>

<h2>継承</h2>

<h3>プロトタイプチェーンで継承を実現する</h3>

JavaScript の prototype プロパティはオブジェクトであるので、自身の prototype も持っている。このように prototype をチェーンして辿っていくことで、継承を実現することができる。

次の例は、本書 P.183 のプロトタイプチェーンの例である。

<pre class="code"><span class="keyword">function</span> Shape() {
  this.name = <span class="literal">'shape'</span>;
  this.toString = <span class="keyword">function</span>() { <span class="keyword">return</span> this.name; }
}
 
<span class="keyword">function</span> TwoDShape() {
  this.name = <span class="literal">'2D shape'</span>;
}
 
<span class="keyword">function</span> Triangle(side, height) {
  this.name = <span class="literal">'Triangle'</span>;
  this.side = side;
  this.height = height;
  this.getArea = <span class="keyword">function</span>() {
    return this.side * this.height / 2;
  };
}
 
TwoDShape.prototype = <span class="keyword">new</span> Shape();
Triangle.prototype = <span class="keyword">new</span> TwoDShape();
TwoDShape.prototype.constructor = TwoDShape;
Triangle.prototype.constructor = Triangle;
 
>>> <span class="keyword">var</span> my = <span class="keyword">new</span> Triangle(5, 10);
>>> my.getArea();
25
>>> my.toString();
"Triangle"</pre>

Triangle クラスには toString メソッドは定義されていないが、Shape 関数で定義されていることで、プロトタイプチェーンをたどって呼び出すことができる。

<p class="option">継承を行った後は、constructor を再設定しておくとよい。</p>

-----
EXCERPT:

-----
KEYWORDS:
JavaScript,オブジェクト指向,プロトタイプ指向
-----


-----
CF50_CF_4: Stoyan Stefanov (著), 水野貴明 (翻訳), 渋川よしき (翻訳)
CF50_URL: http://ec2.images-amazon.com/images/I/51ttiBI82cL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4048706705?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4048706705
CF50_CF: アスキー・メディアワークス
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Webエンジニアのための データベース技術[実践]入門
BASENAME: web_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
CATEGORY: System
DATE: 05/09/2012 12:47:59 AM
TAGS: データベース,知識が学べる
-----
BODY:
「データベース技術実践入門」とタイトルにはありますが、この本は入門ではなく「おぼえがき」のようなものだと読んで感じました。データベースの<em>設計</em>を行う際の注意点や、こういう点は押さえておくべきということを広く確認できる構成になっていたからです。

例えば、インデックスの種類を挙げ、データ数が増えてきた際にどのようにインデックスが効いてくるか、逆に効かなくなってくるかをまとめてあったり、データベースが吐き出すログにはどのようなものがあり、障害時の復旧手順のなかでどのログがどのような役割をになっていたりするかをまとめてあったりします。

また、最近のストレージ動向にも目を向け、データベースのパフォーマンスを上げるためにはどうすればよいかを解説していたりもします。

本書はつまるところ、「<em>データベースを自分で構築し、（大規模なデータを扱う）サービスと絡めて運用する人向け</em>」の本だと思います。「Webエンジニアのための」と書いてありますが、全てのエンジニアではなく、昨今話題のスマートフォン向けソーシャルゲームや、大量ログを扱わなければならないようなサービスを運営する中小規模の開発会社の開発者向けです。

DBの設計や、エンタープライズシステム向けのデータベースを扱う際に読むような本ではないですが、サラッと読んで知識を蓄える感じで読むのにステキなまとめられかたをしていると思います。

ちなみに、本書で扱っているデータベースは <em>MySQL</em> になります。
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<h3>片方向/非同期レプリケーション</h3>

片方向レプリケーションは、「マスタ」に更新した結果が「スレーブ」に「非同期」で伝搬するというタイプのレプリケーションである。マスタで実行した更新系 SQL 文が<em>バイナリログ</em>というログファイルに記録され、このログファイルの中身がスレーブ側で順次実行される。

スレーブでは「<em>バイナリログの受信</em>」と「<em>バイナリログの実行</em>」の2段階で行われる。「バイナリログの受信」は I/O スレッド、「バイナリログの実行」は SQL スレッドが実行する。

このレプリケーションでは、バイナリログの受信よりも、バイナリログの実行の部分で遅延が発生しやすくなる。これは、ネットワークよりもディスクがボトルネックになることが多いからである。

<h4>障害の状況パターン</h4>

<ol><li>マスタで生成したバイナリログがスレーブで最後まで受信出来ていない</li>
<li>スレーブでバイナリログの実行が最後まで行われていない</li></ol>

1. の場合はマスタを復旧させ、最新のバイナリログをスレーブに更新しなければ、最新のバイナリログ分のデータロスになる。

2. の場合は、スレーブがマスタの代わりに処理を継続する（マスター昇格）することで障害対応が可能だが、<em>バイナリログを最後まで実行し終わったことを確認</em>してから処理しなければ、データ不整合が発生することになる。


<h3>片方向/準同期レプリケーション</h3>

「バイナリログの受信」を同期処理するようにしたもの。障害パターンの1. の状況が限りなく発生しなくなるメリットがある。デメリットとしては、マスタ→スレーブの通信を同期するため、スレーブからのレスポンス分スループットが悪くなる。

<h3>片方向/同期レプリケーション</h3>

「バイナリログの実行」までを同期処理するようにしたもの。MySQL では実装されていない。

<h3>双方向レプリケーション</h3>

双方向レプリケーションは、マスタを複数用意しそれぞれのマスタを更新できるようにするもの。マルチコア CPU や、SSD などのハードウェアの性能をより引き出すことができる。

ただし、それぞれのマスタに対して同時に更新を行った際の分散排他制御の仕組みが不可欠で、DBMS によって実装方法はまちまち。

<h3>障害からの復旧方法</h3>

トランザクション対応のデータベースの多くは、REDO ログという更新対象列の変更情報を記録したファイルを使って一貫性を保っている。

MySQL は更新されたデータをすぐにディスクに書き込むのではなく、キャッシュ領域に保持しており定期的にディスクに書き込むという処理を行なっている。そのため、データベースがクラッシュするとキャッシュ領域がクリアされ、ディスクに書かれたデータが古い状態ということが起きる。

そこで、クラッシュから回復するときには、最初に REDO ログからディスクの状態を最新の状態に戻す（進める）必要がある。

<h3>MySQL のレプリケーションはシングルスレッド</h3>

MySQL のレプリケーションはシングルスレッドで行われる。そのため、マスタが並列で大量に処理をさばいたとしても、レプリケーション処理が詰まってしまうということが大規模サービスでは起きてしまう。

遅延の主な要因はディスク I/O が低速なことであるため、スレーブには SATA SSD などの高速なディスクを使うことでこの問題を解決するのが現実的。

最近では、PCI-Express インターフェースをもつ FusionIO社の ioDrive や Virident社のFlashmax などが使われている。

<h3>運用の勘所</h3>

CPU 使用率で監視すべき点が3つある。

<ul><li>ディスクI/O（%iowait）</li>
<li>システム空間での使用率（%system）</li>
<li>ユーザ空間での使用率（%user）</li></ul>

<dl><dt>ディスクI/O（%iowait）</dt>
<dd><p><em>ディスクI/Oがボトルネック</em>になっている場合、この値が跳ね上がる。</p></dd>
<dt>システム空間での使用率（%system）</dt>
<dd><p>OS 内の処理で使用されている CPU 率。<em>スワップが発生したり、ネットワーク周りでトラブルがおきている場合</em>この値が跳ね上がることがある。</p></dd>
<dt>ユーザ空間での使用率（%user）</dt>
<dd><p>CPU を使うような処理が多いことを表す。DB サーバではあまり大きな値になることはないが、大きくなった場合はテーブルスキャンを連発しているなどの問題があることが多い。</p></dd></dl>

<h3>リストアとリカバリ</h3>

<strong>リストア（バックアップの結果を戻す）</strong>だけでは、障害直前の状態に復旧することはできない。バックアップ以降にも処理が行われており、その更新結果は<strong>バイナリログ</strong>に記録されている。

リストアしたあとに、バイナリログの中身を順番に当てていくことで、障害直前の状態に戻すことができる。

<h3>NoSQL</h3>

「SQL文のような複雑な言語を使わずにプログラミング言語のライブラリ関数を使って直接データアクセスするほうが高速になるのではないか？」このような背景から生まれたのが <strong>NoSQL</strong>。

NoSQL では、テーブル/ファイルを開っぱなしにして処理性能を高めるようにしている。

一般的な NoSQL では、<em>トランザクションをサポートしていない</em>。また、<em>スキーマレス</em>なため主に XML や JSON を格納して扱う。<em>インデックスは主キー</em>以外使えないと思ったほうがよい。
-----
EXCERPT:

-----
KEYWORDS:
データベース
-----


-----
CF50_CF_4: 松信 嘉範 (著)
CF50_URL: http://ec2.images-amazon.com/images/I/515Ne-1HtqL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4774150207?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774150207
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: まつもとゆきひろ コードの未来
BASENAME: post_36
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Computer
CATEGORY: Engineer-Soul
CATEGORY: Programming
CATEGORY: System
DATE: 05/26/2012 08:52:59 AM
TAGS: これは読むべき,プログラマ,未来
-----
BODY:
本書は日経Linuxで2009年6月号から2012年6月号まで連載されていた「まつもとゆきひろ 技術を斬る」に加筆・修正を加えたものです。2009年からということで古い技術もあるのでは？と思われるかもしれませんが、さすがまつもとさん！きちんと未来を見据えたテーマでかかれていて、すごく参考になりました。

本書は読み物の色がつよく、言語の過去・未来や新しい言語（<em>Go</em>、<em>Dart</em>、<em>CoffeeScript</em>、<em>Lua</em>）の言語作成者ならではの視点での解説、クラウド時代のC10K問題やスケーラビリティの話、ビッグデータ時代の NoSQL の扱い方などをまつもとさん視点で解説しています。

実際にプログラミングをやっている人であれば、ニヤニヤしながら読めることまちがいなしです。最近の技術動向をさくっと知るというのにも良いと思います。僕もとても楽しく面白く読むことが出来ました。

新人教育にいかがですか？
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<h3>エクストリーム未来予測</h3>

未来を予測するときの簡単なテクニック。エクストリーム・プログラミング（XP）を考案した Kent Beck が著書の中で書いている言葉。

<blockquote><p>初めてXPを明確に表現できたとき、頭の中に音楽用のミキシングコントロールボードのボリュームノブをイメージした。それぞれのノブは私が成功の経験から得たプラクティス（実践）である。私はすべてのノブを10までひねり、何が起きるかをみようとした。</p>

<site>本書 P.20</site>

</blockquote>

<h3>DSL デザインの構成要素</h3>

<dl>
<dt>コンテキスト</dt>
<dd>DSL の記述がどのような意味を持つか規定する。</dd>
<dt>センテンス</dt>
<dd>コンテキストの内部の記述で、関数呼び出しやメソッド呼び出しで表現される個別の動作。</dd>
<dt>ユニット</dt>
<dd>単位。20.hours の hours など。</dd>
<dt>ボキャブラリ</dt>
<dd>目的分野にふさわしいメソッドをどれだけ用意できるか。</dd>
<dt>ヒエラルキ</dt>
<dd>ネストしたコンテキスト</dd>
</dl>

<h3>GC（ガベージコレクション）の3つの基本方式</h3>

<h4>マークアンドスイープ方式</h4>

先頭から生きているオブジェクトに印をつけていき、最後まで印をつけたら印の付いていないオブジェクトを回収する方式。

処理時間は、「生きているオブジェクト数」 + 「全オブジェクト数」の和（マークを付ける処理 + 回収する処理）。

<h4>コピーコレクション方式</h4>

マークアンドスイープ方式では、<em>大量のオブジェクトが割り当てられ、そのうちごく一部だけが生き残るような場合に必要以上に時間がかかってしまう</em>。

コピーコレクションは、マークアンドスイープ方式でいうマークを付ける処理（マークフェーズ）で、生きているオブジェクトを新しい領域にコピーするようにし、すべてのコピー（マーク）が終わったら古い領域を回収することで行う。

マークをつける処理よりもコピーする処理のほうがコストが高いため、生きているオブジェクトの数が多いと不利な方式になる。

<h4>リファレンスカウント方式</h4>

オブジェクト自身が、自分が参照されているカウント（リファレンスカウント）を知っていて、参照が増減する度にリファレンスカウントを書き換える方式。

メリットは簡単に実装ができること。

デメリットは、循環参照に対応できないこと。また、並列処理と相性がわるいこと。

<h4>応用方式</h4>

基本方式を組み合わせる形で、応用方式が多くの場合利用されている。

<em>世代別GC</em>、<em>インクリメンタルGC</em>、<em>並列GC</em>である。

世代別GCは、「オブジェクトのほとんどは短時間でゴミになり、長い時間生き残ったオブジェクトはより長い寿命を持つ」という性質を利用して、オブジェクトに新しい、古いのタグをつけ、新しいものだけをGCするマイナーGCと古いものも対象にするメジャーGCの２つを使い分ける方式。

インクリメンタルGCは、リアルタイム処理などで GC の中断時間を減らす目的で、GC を少しずつ処理していく方式。

並列GCは、複数 CPU を利用して GC を行う方式。

<h3>例外処理</h3>

<blockquote><p>めったに起きない事態でも、起きる可能性があることはいつかは起きます。</p>

<site>本書 P.73</site>

</blockquote>

例外が発生したときの対応には大きく2つある。ひとつは、<em>実行を中止すること</em>。もうひとつは、<em>例外が発生した原因を取り除き再挑戦すること</em>。

<h3>クロージャ</h3>

「関数オブジェクトから外側の変数がアクセス（参照や更新）できる」というのがクロージャを構成する要件の一つ。

<pre class="code"><span class="keyword">function</span> echo(func) {
  console.log(func());
}
 
<span class="keyword">for</span> (<span class="keyword">var</span> i = 0; i < 3; i++) {
  echo(<span class="keyword">function</span>() {
    <span class="keyword">return</span> i * i;
  });
}
> 0
> 1
> 4</pre>

外側のスコープに属する変数を参照している関数オブジェクトは、そのローカル変数を「閉じ込め」る。

<pre class="code"><span class="keyword">function</span> extent() {
  <span class="keyword">var</span> n = 0;
  <span class="keyword">return</span> <span class="keyword">function</span>() {
    n++;
    console.log("n=" + n);
  }
}
 
<span class="keyword">var</span> f = extent();
f();
> n=1
f();
> n=2</pre>

<p class="option">Ruby 1.9では、関数っぽいプログラミングを支援するために、lambda の代わりに「->」という式がつかえるようになり、また「call」メソッドを省略して「f.()」と呼び出せるようになっています。</p>

<h3>Go</h3>

Google からリリースされた新言語「<em>Go</em>」は、システムプログラミング言語では初となる言語仕様のレベルで並列プログラミングを意識している。

Go の関数やメソッドは複数の値を戻り値として返すことができる。

Go には例外機構がないが、戻り値の多値をもちいて、本来の戻り値とエラーが発生したかどうかを区別できる「コンマOK」スタイルをとっている。

<pre class="code">f,ok = os.Open(ファイル名, os.O_RDONLY, 0);
<span class="keyword">if</span> ok != <span class="keyword">nil</span> {
  <span class="rem">//... open に失敗したときの処理</span>
}</pre>

Go の goroutine は、メモリ空間の共有を行い、軽量であり、コンテキストスイッチが自動でマルチコアを活用できる。

<h3>ブルームフィルタ</h3>

<em>ブルームフィルタ</em>は、あるデータが登録されているかどうかを判定できるデータ構造。

<ul><li>判定時間がデータ件数に依存しない（O(1)）</li>
<li>空間効率が非常に良い</li>
<li>要素の削除ができない</li>
<li><em>たまに間違える</em></li></ul>

ブルームフィルタは、本当は要素に入っていないけれども入っているとみなされるという疑陽性（false positive）がある。

<h3>C10K問題</h3>

OS の select コールを使わないで、<em>epoll</em> や <em>kqueue</em> などの別のAPIを利用する。または、ノンブロッキングI/O を使う。Ruby のイベントループフレームワークには、EventMachine がある。

<h3>アプリサーバ</h3>

Unicone は一般的な Master プロセスからワーカープロセスにリクエストを転送するプッシュモデルではなく、<em>プルモデル</em>を採用しているため。プルモデルとは、ワーカー側が処理が Master に処理を受け取りに行く方式。

<h3>key-value ストア</h3>

ACID （Atomicity:原子性、Consistency:一貫性、Isolation:独立性、Durability:持続性）特性はデータベースの世界では一般的だが、近年大規模データを扱うために分散を考えるようになってくると ACID を満たすのが厳しくなってきている。

CAP 定理というものがあり、大規模環境では、Consistency:一貫性、Availability:可用性、Partition Tolerance:分割体制 のうち同時に2つまでしか満たすことができないとされている。

大規模分散環境では、多くは Consistency を捨てている。多くの key-value ストアはトランザクション処理を持たないのはそういうこと。

<h3>アムダールの法則</h3>

一般的にマルチコアコンピュータは、CPU を複数積んでいても、その他のデバイスは共有している事が多い。たとえば、メモリやディスク、ネットワークデバイスなど。もし、CPU 以外のところに処理のボトルネックがある場合は、マルチコアを投入しても性能は改善されない。

<blockquote><p>（並列性による）システムの性能向上効果は、並列性を導入できない部分によって飽和する</p>

<site>本書 P.314</site>

</blockquote>

<h3>ノンブロッキングI/O</h3>

大量の接続をさばくサーバでは、スレッドを使うとメモリ負荷やスレッド切り替えのコストが大きくなりすぎる傾向がある。そのためイベントを待ち受けてそれに対応する処理を「シングルスレッド」で処理するやり方のほうが効率的になる。

シングルスレッドで処理をするときに気を付けないといけないのは、そのスレッドが「<em>ブロック</em>」されると、プログラム全体が止まってしまうことである。

ブロックは、<em>入出力待ち</em>の場合がほとんどなため、入出力待ちを以下にブロックしないかが重要になる。
-----
EXCERPT:

-----
KEYWORDS:
まつもとゆきひろ,コード,プログラマ,未来,技術
-----


-----
CF50_CF_4: まつもと ゆきひろ
CF50_URL: http://ec2.images-amazon.com/images/I/51cTLYbHDRL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4822234630?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4822234630
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: NoSQLプログラミング実践活用技法
BASENAME: nosql
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 09/13/2012 10:10:32 AM
-----
BODY:

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----


-----
CF50_CF_4: Shashank Tiwari (著), 中村 泰久 (監修), 長尾 高弘 (翻訳) 
CF50_URL: http://images.amazon.com/images/I/51HqiZKI5CL._SL500_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4798126055?ie=UTF8&camp=247&creativeASIN=4798126055&linkCode=xm2&tag=sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Clean Coder プロフェッショナルプログラマへの道
BASENAME: clean_coder
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Engineer-Soul
CATEGORY: Programming
DATE: 09/23/2012 08:42:18 PM
TAGS: プログラマ,プロフェッショナル
-----
BODY:
本書は、Clean Coder（プログラマのプロ）とはどんな人物で、どういうことに心がける必要があるのかを解説した本です。

<strong>プロ</strong>とは、自分の行いに責任を持つ人物。責任とは、清く正しく働くということ。コミュニケーションをうまくとること。見積りを確実にすること。時間をかんりすること。リスクと見返りの見極めが困難な状況に立ち向かうこと。

本書はこういった、プロのプログラマを育てる本です。コーディングだけではなく、どういう仕事の仕方をする必要があるか、どういうことに気を付けないといけないのかを解説しています。新入社員や初めて先輩になる人におすすめの一冊です。
-----
EXTENDED BODY:
<h2>目次</h2>

<ol><li>プロ意識</li>
<li>「ノー」と言う</li>
<li>「イエス」と言う</li>
<li>コーディング</li>
<li>テスト駆動開発</li>
<li>練習</li>
<li>受け入れテスト</li>
<li>テスト戦略</li>
<li>時間管理</li>
<li>見積もり</li>
<li>プレッシャー</li>
<li>協力</li>
<li>チームとプロジェクト</li>
<li>指導・従弟制度・職人気質</li>
</ol>

<h2>おぼえがき</h2>

<h3>プロ意識</h3>

プロは自分で後始末をする。プロは責任をともなう。

<h4>コードを把握する</h4>

プロのプログラマは、自分のコードが動作することを把握している。どうやって把握するかといえば、それは<em>テスト</em>である。

正常に動いていること、期待しているとおりに動くことは、テストでしか確認できない！

<h4>過去を知る</h4>

<p class="option">「過去を記憶できない者は、それを繰り返す運命にある」</p>

これまでの業界の進歩や先人の知恵、経験は、色々な本から吸収できる。ソフトウェアのプロとして最低限覚えておかなければならないものが以下になる。

<ul><li>デザインパターン</li><li>設計原則</li><li>方法論</li><li>規律・規範（ソフトウェア開発メソッド）</li><li>成果物・表記法（UML・構造チャート・状態遷移図等）</li></ul>

<h3>「ノー」と言う</h3>

出来ないこと、ムリなこと、正しくないことには「ノー」という。誠実に！

<h3>「イエス」と言う</h3>

「イエス」と言う時には、確実に約束したと分かる言葉を使う。責任をもってやり遂げる！

<h3>コーディング</h3>

「完了」を定義する。何をしたら終わるか。それには、受け入れテストが必要だ。

TDD（テスト駆動開発）は、実施するに値する価値がある。プロは自分のコードがどう動くかを把握する必要がある。それにはテストが必要だ。プロはコーディングの終わり時を知っている。それには、受け入れテストが必要だ。

TDD は、テストでコーディングサイクルを回す。確実性、血管混入率の低下、勇気、ドキュメント、設計を促進する。

<h3>受け入れテスト</h3>

早過ぎる詳細化は癌である。<em>要求は変化するので詳細化は現実的ではない。</em>要求を詳細化すると、開発中のシステムとかけ離れていく。

プロは、開発に入るまで要求を詳細化しない！

いつ受け入れテストを書くか。最初のイテレーションが始まるまでに、最初の受け入れテストを準備しておかなければならない。

<h3>時間管理</h3>

無駄な会議には参加しない。ケント・ベックはこう言った。「5分で決着のつかない議論は、議論では決着がつかない」と。明確な裏付けのない根拠では議論は決着がつかない。

<h3>プレッシャー</h3>

プレッシャーから逃れるには、プレッシャーを生み出す状況から逃れること。ただし、最悪な逃げ方は<em>急いでやること</em>。この誘惑には何がなんでも抵抗しなければならない。
-----
EXCERPT:

-----
KEYWORDS:
Clean Coder, 9784048860697, プロフェッショナル
-----


-----
CF50_CF_4: Robert C. Martin (著), 角征典
CF50_URL: http://ec2.images-amazon.com/images/I/51dv8ZDoLBL._SL500.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4048860690?ie=UTF8&camp=247&creativeASIN=4048860690&linkCode=xm2&tag=sorehabooks-22
CF50_CF: アスキー・メディアワークス
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: ステートフルJavaScript ―MVCアーキテクチャに基づくWebアプリケーションの状態管理
BASENAME: javascript_mvcw
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 09/23/2012 10:05:58 PM
TAGS: JavaScript,MVC,ステートフル
-----
BODY:
本書は、クライアントサイド（ブラウザ）で JavaScript を使ってリッチなアプリを作る際のプラクティスを説明しています。

前半では、JavaScript によるオブジェクト指向開発の方法や MVC 開発の方法を、後半では、JavaScript の MVC デザインパターンに則った、各種ライブラリの説明が行われています。

最近では、ユーザビリティの良いアプリを開発するのに必須なクライアントサイドでの JavaScript の使い方が複雑になってきているように思います。ちょっと jQuery を使って DOM 操作していればよかった頃と比べて、最近では色々なライブラリを組み合わせる必要があったり、クライアントサイドでも MVC パターンが必要になったりと、大変です。

本書は、そんな JavaScript でリッチアプリケーションを作成する際の取っ掛かりを学ぶのに良いと思います。オライリー本なので、読むのが簡単ということはなく、むしろ格式高い感じすらしますが、多少 JavaScript でオブジェクト指向の経験があれば、読み進めるのは難しく無いと思います。
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<h3>インスタンスメソッド定義のイディオム</h3>

JavaScript ではクラスのプロトタイプに対して関数を追加することでインスタンスメソッドを定義できます。

<pre class="code">Person.<span class="keyword">prototype</span>.breath = <span class="keyword">function</span>() { <span class="comment">/* ... */</span> };
<span class="keyword">var</span> person = <span class="keyword">new</span> Person();
person.breath();</pre>

クラスのプロトタイプに <em>fn</em> というエイリアスを設定することが広く行われています。

<pre class="code">Person.fn = Person.<span class="keyword">prototype</span>;
Person.fn.run = <span class="keyword">function</span>() { <span class="rem">/* ... */</span> };</pre>

<h3>関数呼び出しのコンテキスト</h3>

apply() と call() を使うと、関数の呼び出しコンテキストを変更できます。jQuery の API ではイベントハンドラや each() による繰り返しの中で、コンテキスト（this の値）が変更されています。

<pre class="code">$(<span class="str">'.btn'</span>).click(<span class="keyword">function</span>() {
  $(<span class="keyword">this</span>).hide();
});</pre>

元のコンテキストにアクセスするには、良く self などの名前で this を保存しておき、後で参照する方法がとられます。

<pre class="code"><span class="keyword">var</span> self = <span class="keyword">this</span>;
 
$(<span class="str">'.btn'</span>).click(<span class="keyword">function</span>() {
  self.btnClicked();
});</pre>

apply() を使うと、self を使わなくても同じことができます。

<pre class="code"><span class="keyword">var</span> proxy = <span class="keyword">function</span>(func, context) {
  <span class="keyword">return</span> (<span class="keyword">function</span>() {
    <span class="keyword">return</span> func.apply(context, arguments);
  });
};
 
$(<span class="str">'.btn'</span>).click(proxy(<span class="keyword">function</span>() {
  <span class="keyword">this</span>.btnClicked();
}, <span class="keyword">this</span>);</pre>

jQuery の proxy() メソッドがまさしく、これと同じことをしています。

<h3>イベントの発生順序</h3>

ある要素とその祖先の要素が同じ種類のイベントに対してイベントハンドラを登録している場合、先に呼び出されるのはブラウザによって違います。

イベントが呼び出される順番は2種類あり、<strong>イベントキャプチャリング</strong> と<strong>イベントバブリング</strong>になります。

<h4>イベントキャプチャリング</h4>

最も上位（外側）の要素からイベントが発生した要素へとイベントリスナが呼び出されます。つまり、祖先の要素、内側の要素の順番でイベントリスナが呼び出されます。

<h4>イベントバブリング</h4>

イベントが発生した要素（内側）から祖先要素へとイベントリスナが呼び出されます。

W3C の仕様では、addEventListener() の3つめの引数に true を指定するとイベントキャプチャリングで呼び出され、false か 指定しないとイベントバブリングで呼び出されます。

バブリングが行われている際には、イベントオブジェクトの stopPropagation() を呼び出すことによって、バブリングを中止することができます。

<pre class="code">link.addEventListener(<span class="str">'click'</span>, <span class="keyword">function</span>(e) {
  e.stopPropagation();
  <span class="rem">/* ... */</span>
});</pre>

ブラウザによってそれぞれのイベントに対するデフォルトのアクションが定義されています。たとえば、リンクのクリックでは、src で指定された URL に遷移する動作や、チェックボックスのクリックで項目が選択状態になる動作などです。

これらのデフォルトのアクションはイベントの伝播が完了した後で実行されます。このデフォルトのアクションを中止するには、 preventDefault() 関数を呼び出します。また、イベントハンドラの戻り値で false を返すことで、preventDefault() を呼び出したのと同じ動作になります。

<pre class="code">form.addEventListener(<span class="str">'submit'</span>, <span class="keyword">function</span>(e) {
  <span class="rem">/* e.preventDefault() */</span>
  <span class="keyword">return</span> confirm(<span class="str">'本当に送信しますか？'</span>);
});</pre>

<h3>イベントの委譲</h3>

イベントバブリングの性質を考えると、複数ある子孫の要素それぞれにイベントリスナを設定するより、祖先の要素一つだけにイベントハンドラを設定する方が効率がよくなります。

jQuery では、これを delgate() メソッドを使って実装できます。

<pre class="code"><span class="rem">/* 望ましくないコード */</span>
$(<span class="str">'ul li'</span>).click(<span class="keyword">function</span>() { <span class="rem">/* ... */</span> });
 
<span class="rem">// こちらのほうが効率が良い</span>
$(<span class="str">'ul'</span>).delegate(<span class="str">'li'</span>, <span class="str">'click'</span>, <span class="keyword">function</span>() { <span class="rem">/* ... */</span> });</pre>

このように、イベント処理を委譲することによるメリットは、動的に追加された要素についても、自動でイベントリスナが適用されることです。

<h3>画面表示時の初期データの読み込み</h3>

ページ上のデータは、最初に読み込まれるページに含まれているか、Ajax や JSONP を使った HTTP リクエストによって事後的に読み込まれます。多くのデータを初期表示時に読み込むのには時間がかかりますが、Ajax や JSONP によるリクエストは、<em>並列処理が可能</em>であるので高速に処理できます。

また、HTTP リクエストで取得したデータは、ローカルのストレージにキャッシュすることができます。ストレージには2種類あり、localStorage と sessionStorage というオブジェクトでアクセスできます。

<h4>ローカルストレージ</h4>

ブラウザが終了した後も保持される。

<h4>セッションストレージ</h4>

ブラウザが開いている間のみ保持される。

<h3>コントローラと内部状態</h3>

まず言えるのは、<em>DOM 内にモデルの内部状態やその他の情報を保持するべきではありません</em>。頑強な MVC アーキテクチャの実現のためには、内部状態やその他の情報は、コントローラ内に保持させる方がよい。

ビューごとにコントローラを1つずつ用意するというのがよく使われているパターンです。

<h3>リソースとURL</h3>

通常、Ajax などでリソースとなるデータをロードした場合、ブラウザの URL は変化しません。しかし、Web 上の個々のリソースには URL が割り当てられていると考えるのが一般的で、URL が変わらない状況というのは好ましくありません。

そこで、この問題に対しては、内部状態が変化したら URL を変化させるようにします。このとき、よく使われるのが、URL のハッシュ（#以降の文字列）を変更するというものです。ハッシュの値はサーバに送信されないため、ページの再読込を発生させることなく変更できます。

location.hash を使うと、ページのハッシュを取得できます。

主要なブラウザでは、URL のハッシュが変更されたかどうかを調べるのに、hashchange イベントが使えます。

JavaScript で作られたページは、クローラにとってはすべて同じ URL のように見えてしまいます。そこで、Google は、<a href="http://code.google.com/web/ajaxcrawling/index.html" class="extlink" target="_blank">Ajax Crawling</a> という仕様を提案しています。

<h3>Backbone.js ライブラリ</h3>

<a href="http://backbonejs.org/" class="extlink" target="_blank"><em>Backbone.js</em></a> は JavaScript アプリケーションの構築のための優れたライブラリです。Backbone.js も MVC 構造でアプリケーションを作成していきます。

<h2>参考</h2>

<ul><li><a href="http://fingaholic.github.com/posts/2012-06-27-stateful-javascript.html" class="extlink" target="_blank">ステートフルJavaScript 1章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-02-stateful-javascript.html" class="extlink" target="_blank">ステートフルJavaScript 2章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-17-stateful-javascript.html" class="extlink" target="_blank">ステートフルJavaScript 3章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-20-stateful-javascript.html" class="extlink" target="_blank">ステートフルJavaScript 4章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-23-stateful-javascript.html" class="extlink" target="_blank">ステートフルJavaScript 5章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-25-stateful-javascript.html" class="extlink" target="_blank">ステートフルJavaScript 6章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-08-01-stateful-javascript.html" class="extlink" target="_blank">ステートフルJavaScript 11章 その1 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-08-07-stateful-javascript.html" class="extlink" target="_blank">ステートフルJavaScript 11章 その2 - jekylog</a></li>
</ul>
-----
EXCERPT:

-----
KEYWORDS:
JavaScript, ステートフル, MVC
-----


PING:
TITLE: com.br
URL: http://www.globaldatasolutions.com.br
IP: 200.219.236.147
BLOG NAME: com.br
DATE: 04/23/2013 01:05:00 PM
ステートフルJavaScript ―MVCアーキテクチャに基づくWebアプリケーションの状態管理 - それはBooks
-----

-----
CF50_CF_4: Alex MacCaw (著), 牧野 聡 (翻訳) 
CF50_URL: http://images.amazon.com/images/I/51dU7xncMJL._SL500.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/487311554X?ie=UTF8&camp=247&creativeASIN=487311554X&linkCode=xm2&tag=sorehabooks-22
CF50_CF:  オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: 実践プログラミングDSL ドメイン特化言語の設計と実装のノウハウ
BASENAME: dsl
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Programming
CATEGORY: Programming
DATE: 09/13/2012 10:17:51 AM
-----
BODY:

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----


-----
CF50_CF_4: Debasish Ghosh (著), 佐藤 竜一 (監修, 翻訳) 
CF50_URL: http://images.amazon.com/images/I/51XmlKGNOSL._SL500_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4798125393?ie=UTF8&camp=247&creativeASIN=4798125393&linkCode=xm2&tag=sorehabooks-22
CF50_CF: 翔泳社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: Amazon Web Services クラウドデザインパターン 設計ガイド
BASENAME: amazon_web_serv
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: System
CATEGORY: System
DATE: 09/13/2012 10:19:21 AM
-----
BODY:

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----


-----
CF50_CF_4: 玉川 憲 (著), 片山 暁雄 (著), 鈴木 宏康 (著) 
CF50_URL: http://images.amazon.com/images/I/51TTkHsAJzL._SL500_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4822211967?ie=UTF8&camp=247&creativeASIN=4822211967&linkCode=xm2&tag=sorehabooks-22
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: モバイルデザインパターン― ユーザーインタフェースのためのパターン集
BASENAME: post_37
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Design
CATEGORY: Design
CATEGORY: Programming
DATE: 09/27/2012 11:27:55 AM
TAGS: UI,スマートフォン,デザインパターン,モバイル,ユーザインターフェース
-----
BODY:
<blockquote>

モバイルアプリのUIパターンを手軽に参照できるリファレンス。主要なプラットフォームで動くモバイルアプリの画面例を400点以上使いながら、ユーザーインタフェースの定番パターンをグラフィカルに解説します。本書で紹介する68個の基本パターンと5個のアンチパターンが、使いやすいモバイルアプリをデザインするうえでクリアしなければならない設計上の課題を解決してくれます。

<em>掲載UIパターン</em>:ナビゲーション、フォーム、テーブルとリスト、検索、並び替え、フィルター、ツール、グラフ、誘導、フィードバック、アフォーダンス、ヘルプ、アンチパターン

<p class="site">本書背表紙より</p>
</blockquote>

本書は、モバイルアプリ（スマートフォン上で動くアプリ）の UI デザインの定石をパターンとして紹介しているものになります。いいアプリを作っても、UI や見た目が悪いとそれだけで価値が下がってしまいます。アプリにとって本当に良い UI デザインを導ける人は、まだまだ少数だと思います。

本書は、そんな良いデザインというのはどういうものなのか、使いやすい UI というのはどういうものなのかを名前をつけてパターン化し紹介しています。内容はとてもグラフィカルなので、かるく読み流すことも出来ますし、中身を熟読してさらに自分流のパターンを産み出していくのも良いと思います。

ますます熱くなってくるであろうモバイルアプリ開発の現場で、デザインができなくて泣いている人にオススメの一冊です。スマートフォンアプリの開発者は、手元に置いておくと便利です。
-----
EXTENDED BODY:
<h2>おぼえがき</h2>

<h3>本書で紹介されているパターンの参考イメージ</h3>

<a href="http://www.mobiledesignpatterngallery.com/mobile-patterns.php" class="extlink" target="_blank">Mobile Design Pattern Gallery:UI Patterns for iOS, Android and More</a>

<a href="http://www.flickr.com/photos/mobiledesignpatterngallery/collections" class="extlink" target="_blank">Mobile Design Pattern Gallery's photostream - flickr</a>

<h3>ナビゲーション</h3>

<dl>
<dt>Springboard（スプリングボード）</dt>
<dd><p>起動直後に表示されるメニューが、アプリ利用のきっかけになる。パーソナライズによって表示項目を変えてもよい。各メニュー項目が同じ重要度の場合はグリッドレイアウトを、そうでない場合は変則的なレイアウトを検討する。</p></dd>
<dt>List Menu（リストメニュー）</dt>
<dd><p>起動直後にメニューが並ぶ点は、スプリングボードと同じだが、メニュー項目の名前が長い場合や、サブタイトル等が必要な場合に利用する。</p></dd>
<dt>Tabs（タブ）</dt>
<dd><p>タブは標準的な Web サイトでのナビゲーションパターンに基づいているため、ユーザにとって馴染みが深い。</p></dd>
<dt>Gallery（ギャラリー）</dt>
<dd><p>個々のコンテンツを通じてナビゲーションを行う。コンテンツが頻繁に変わるような場合に利用すると良い。</p></dd>
<dt>Dashboard（ダッシュボード）</dt>
<dd><p>それぞれのデータや指標の要約が一目でわかるため、財務管理、データ分析、マーケティングアプリなどで使える。コンテンツの詰め込みすぎに注意する。</p></dd>
<dt>Metaphor（メタファー）</dt>
<dd><p>最初に表示される画面が何かのメタファーになっているのが特徴で、ゲームなどで使える。また、ユーザのメモをカタログ化したようなアプリにも応用しやすい。分かりにくいメタファーを使ってしまうと使いにくい UI になってしまうため注意。</p></dd>
</dl>

<h4>補助的なナビゲーション</h4>

メニューとしては使いづらいが、一つのコンテンツの補助メニューとして利用しやすいパターン。

<dl>
<dt>Carousel（カルーセル）</dt>
<dd><p>コンテンツをよく見せたい場合に使える。コンテンツの数が多くなった場合（8個以上）は、リスト表示を検討する。</p></dd>
<dt>Expanding List（伸縮リスト）, アコーディオンメニュー</dt>
<dd><p>徐々に詳細なオプション項目を表示させたい場合に適している</p></dd>
</dl>

<h3>テーブルとリスト</h3>

<dl>
<dt>Basic Table（基本的なテーブル）</dt>
<dd><p>行間に細い線を表示したりすると見やすさが向上する。縦の罫線や色の濃い罫線は使わない。文字列は左寄せ、数値は右寄せ。</p></dd>
</dl>

<h3>検索、並び替え、フィルター</h3>

<dl>
<dt>Explicit Search（明示的な検索）</dt>
<dd><p>入力内容をクリアするためのボタンを入力フィールド内に用意する。検索をキャンセルできるボタンを用意する。検索中であることがわかるフィードバックを用意する。</p></dd>
<dt>Dynamic Search（動的な検索）</dt>
<dd><p>アドレス帳、ユーザのメディアライブラリなどの有限なデータ集合に対して、入力ごとに動的に検索を行うパターンは有効になる。</p></dd>
<dt>Saved and Recent Searches（検索結果の履歴）</dt>
<dd><p><em>成功を収めたモバイルインターフェースはいずれも「ユーザの活動を尊重する」というユーザビリティ原則</em>を守っている。</p></dd>
</dl>

<h3>ツール</h3>

<dl>
<dt>Call to Action Button（アクションボタン）</dt>
<dd><p>画面内でユーザに行わせたいアクションが1種類だけの場合、目立つボタンを画面内に用意するとよい。</p></dd>
<dt>Bulk Action（操作の一括実行）</dt>
<dd><p>画面上のコンテンツを一括して実行できるモードを提供する場合、編集モードというのを用意するとよい。編集モードから復帰するための手段も明確に提供する。</p></dd>
</dl>

<h3>誘導</h3>

<dl>
<dt>Tip（ツールチップ）</dt>
<dd><p>ツールチップは対象の機能に隣接して表示されるようにする。</p></dd>
<dt>Tour（ツアー）</dt>
<dd><p>アプリが持つ重要な機能をユーザに明らかにするために使う。ユーザにとってのゴールは何かという観点で設計する。</p></dd>
<dt>Transparency（透過表示）</dt>
<dd><p>画面上のコンテンツに重なった半透明のレイヤーで使用方法を表示する。ユーザが操作を始めたら、レイヤーを非表示にする。</p></dd>
</dl>

<h3>フィードバックとアフォーダンス</h3>

<dl>
<dt>Error Messages（エラーメッセージ）</dt>
<dd><p>モーダルダイアログとして表示するよりも現在内の画面内にメッセージを配置する方が望ましい。</p></dd>
<dt>Tap（タップ）</dt>
<dd><p>立体表現や影をデザインとして取り入れることで、それがタップ可能であることを示せる。</p></dd>
<dt>Flick（フリック）</dt>
<dd><p>表示可能なコンテンツが他にもあるということを示す方法として、フリック可能なことを認識させるという方法もある。</p></dd>
</dl>

<h3>アンチパターン</h3>

<dl>
<dt>Idiot Box（作業を妨げる愚行）</dt>
<dd><p>確認ダイアログを表示するのはもとに戻せない操作をする場合だけにする。</p></dd>
</dl>
-----
EXCERPT:

-----
KEYWORDS:
スマートフォン,iPhone,Android,デザイン,UI,パターン
-----


-----
CF50_CF_4: Theresa Neil (著), 深津 貴之(監訳) (翻訳), 牧野 聡 (翻訳) 
CF50_URL: http://images.amazon.com/images/I/51TLhvHvugL._SL500_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/487311568X?ie=UTF8&camp=247&creativeASIN=487311568X&linkCode=xm2&tag=sorehabooks-22
CF50_CF: オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 世界でもっとも強力な9のアルゴリズム
BASENAME: 9
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
CATEGORY: Engineer-Soul
CATEGORY: Programming
DATE: 02/05/2013 10:17:49 PM
TAGS: アルゴリズム,プログラミング
-----
BODY:
<blockquote>

この本で取り上げた偉大なアルゴリズムから導き出せる共通のテーマはあるだろうか。この本の著者として私がとても驚いたのは、これらの大きなアイデアは、どれもコンピュータプログラミングやコンピュータ科学の予備知識を一切必要とせずに説明できることだ。

<中略>

この本のアルゴリズム全体に共通するもう1つの重要なテーマは、コンピュータ科学という学問分野がただのプログラミングよりもずっと大きな世界だということだ。

<中略>

私が目指したのは、読者に偉大なアルゴリズムについての知識を仕入れてもらって、日常のコンピュータ操作の中でもこれはすごいと感じてもらえるようにすることだ。

<p><cite>本書</cite></p>

</blockquote>

9つの偉大なアルゴリズム、<em>検索エンジンのインデクシング</em>、<em>ページランク</em>、<em>公開鍵暗号法</em>、<em>誤り訂正符号</em>、<em>パターン認識</em>、<em>データ圧縮</em>、<em>データベース</em>、<em>デジタル署名</em>、<em>決定不能性</em>を知ることで、僕達の周りでこれらのアルゴリズムがどうやって機能していて、何が担保されているのか理解できるようになります。

これらのアルゴリズムを知ることで、コンピュータの世界はすごいことが起こっていると知ってもらい、新たに出てくる問題の解決の一つになるといいなと思います。

読み物なので、どんな人にもおすすめです。
-----
EXTENDED BODY:
<h3>検索エンジンのインデクシング</h3>

検索エンジンは「NEAR」（キーワードが近くにあることを条件にする検索）を使ってランキングの精度を上げている。

また、メタワードトリック（タイトル、見出し、リンクなどのメタ情報のどこにキーワードが含まれているか）をつかって精度を上げている。

<h3>ページランク</h3>

ハイパーリンクトリック（リンクされているかどうか）、オーソリティトリック（有名なところからのリンクは高評価）、ランダムサーファートリック（ランダムにページを選択肢リンクをたどる）などのアルゴリズムが使われている。

なお、Google のページランクはもっと複雑な条件で行われている。

<h3>公開鍵暗号法</h3>

「共有された秘密」をどのように作るかがポイント。

<h3>誤り訂正符号</h3>

<q>人に誤っていると教えることと真実を与えることは別のことだ。</q>

チェックサムと呼ばれる冗長化符号を付与してデータ通信することで、途中でデータが変更されたかどうかを検知する。

<h3>パターン認識</h3>

パターン認識は、2段階で動作する。訓練データを処理してクラスの特徴を抽出する「学習（訓練）段階」。新しい分類ラベルの付いていないデータを分類する「分類段階」である。

<h3>データ圧縮</h3>

まとまったデータをより短いシンボルで表すロスなし圧縮と、データの一部を取り除いてしまうロス有り圧縮がある。

<h3>データベース</h3>

「to-doリスト」、「仮想テーブル」、「準備してからコミット」。

<h3>デジタル署名</h3>

デジタル署名はあなたが誰か他人に送るものに署名するのではなく、誰か他人があなたにモノを送る前にその送ろうとしているモノに署名をする。

例えば、プログラムをダウンロード、実行しようとするたびに、ウェブブラウザはプログラムがデジタル署名を持っているかどうかをチェックし、その署名が有効かどうかをチェックする。

デジタル署名が提供するのは、機密性ではなく文章の真正性である。

<h3>決定不能性</h3>

他のプログラムを分析し、そのなかに含まれていてプログラムをクラッシュさせる原因になるようなバグをすべて見つけ出すプログラムは書けない。

-----
EXCERPT:

-----
KEYWORDS:
アルゴリズム, インデクシング, ページランク, 公開鍵暗号法, 誤り訂正符号, パターン認識, データ圧縮, データベース, デジタル署名, 決定不能性
-----


-----
CF50_CF_4: ジョン・マコーミック (著), 長尾高弘 (翻訳)
CF50_URL: https://images-na.ssl-images-amazon.com/images/I/51sBzhR064L._SL500_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/482228493X?ie=UTF8&camp=247&creativeASIN=482228493X&linkCode=xm2&tag=sorehabooks-22
CF50_CF: 日経BP社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: ディジタル作法 －カーニハン先生の「情報」教室－
BASENAME: post_38
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
CATEGORY: Engineer-Soul
CATEGORY: Programming
DATE: 06/23/2013 05:31:52 PM
TAGS: コンピュータ基礎,ディジタル,プログラミング基礎
-----
BODY:
本書は、現在のコンピュータシステムや通信システムがどのように動作しているのかを、ハードウェアとソフトウェアの両方の視点から解説している一般の人向けの本です。コンピュータのことをもっとよく知りたい、コンピュータがどのように動作しているかをもっと知りたい、そういった人にオススメの一冊です。

<blockquote>

"D is for Digital" （ディジタル作法） は、コンピュータシステムや通信システムがどのように動作しているかを、簡潔に、それでいて細かいところまで丁寧に説明した本であり、自分たちが暮らしている世界のことをより良く分かっておきたいと考える一般読者（専門家ではない人）を対象にしています。本書では、今日の世界におけるコンピュータシステムや通信システムがどのように動作しているかということを、ハードウェアおよびソフトウェアからインターネット、Webに到るまで、ひととおり説明しています。

<site>『本書』日本語版の刊行に寄せてより</site>

</blockquote>
-----
EXTENDED BODY:
コンピュータの理論、コンピュータの仕組みというのは情報系の大学であれば授業で習うと思いますが、情報系の大学を出ていない人にはコンピュータが実際にどのように動作して、コンピュータがなぜインターネットに繋がって、コンピュータがなぜアプリケーションを実行できるのかをきちんと説明するのは難しいと思います。情報系の大学を出ていても説明できない人もいますしね。。

本書は、大学で習うようなこれらの基礎的なことを一般の人にも分りやすい平易な説明や例を使って解説してくれている本になります。ハードウェアとしてのコンピュータ、ソフトウェアの集まりとしてのコンピュータ、PC以外のコンピュータ、コンピュータは色々な形をしています。1から説明をしたのではたった300ページで説明を終えることなど出来るはずはないと思います。

でも、本書を読み終わると一通りコンピュータのことを理解できてしまった気になります。さすがはカーニハン先生が書いただけのことはあるなと。コンピュータがなぜ動いているのか理解した人にオススメです！

<h2>おぼえがき</h2>

<h3>CPU</h3>

CPU はコンピュータが計算するを行うための装置のことです。最近の CPU は「2.1 GHz Intel Core Duo」というような記述があります。Intel は CPU のメーカで、<strong>コア（Core）</strong>というのは CPU と同じ意味になります。CPU はクロックと呼ばれる信号を使用して動作します。1秒間に1刻みする信号を1Hzといい、2.1 GHz は1秒間に2,100,000,000回動作するというわけです。

<h3>ビット・バイト</h3>

コンピュータはディジタル処理装置である。コンピュータは情報をビットで表現する。ビット列に寄って大きな情報が表せる。数値、文字、音、画像、動画、プログラムなどはすべてビット列で表される。
-----
EXCERPT:

-----
KEYWORDS:
ディジタル,プログラミング基礎,コンピュータ基礎,カーニハン
-----


-----
CF50_CF_4: Brian W. Kernighan (著), 久野 靖 (翻訳) 
CF50_URL: https://images-na.ssl-images-amazon.com/images/I/41HASMlgLnL._SL500_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4274069095?ie=UTF8&camp=247&creativeASIN=4274069095&linkCode=xm2&tag=sorehabooks-22
CF50_CF: オーム社
-----
CF50_CF_5:

-----
CF50_CF_3: 5
--------
AUTHOR: hamasyou
TITLE: 小飼弾のコードなエッセイ ~我々は本当に世界を理解してコードしているのだろうか? 
BASENAME: post_39
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
CATEGORY: Engineer-Soul
CATEGORY: Programming
DATE: 06/24/2013 10:34:32 PM
TAGS: アルゴリズム,コンピュータ,コード,プログラミング
-----
BODY:
コード。ラテン語で codex。codex とはもともとローマ法大全のことを指し示す言葉だそうです。コードは読みとくべきであり、書き下されるべきものである。そしてそれができたとき、喜びが生まれる。弾さんのまえがきにある言葉ですが、コーディング好きなプログラマのみなさんはこの言葉がよくわかると思います。

本書は、プログラミングに関わるいろいろな事柄が短文のエッセイの形でまとめられています。もともと Software Design の連載だったものをまとめたもののようですが、まとめて読むことに価値があると思います。

弾さんのコンピュータの捉え方、プログラミングの姿勢、豊富な知識や知見がまとめられています。スイスイと読んでいける日本版の『<a href="http://www.amazon.co.jp/gp/product/4274066304?ie=UTF8&camp=247&creativeASIN=4274066304&linkCode=xm2&tag=sorehabooks-22" target="blank" class="extlink">Joel on Software</a>』です。
-----
EXTENDED BODY:
<h2>はじめに</h2>

コードな世界へ、ようこそ!

コード?コードって何でしょう?

元をたどると、この言葉はラテン語 codex に行き着きます。

<blockquote>

ORIGIN Middle English: via Old French from Latin codex, codic- (see codex). The term originally denoted a systematic collection of statutes made by one of the later Roman emperors, particularly that of Justinian... -- Oxford American Dictionary

<site></site>

</blockquote>

ここに出てくるJustinianとはユスティニアヌス1世のこと。「ローマ法大全」(Corpus Iuris Civilis)を編纂させた人。codexとは、元々はこのローマ法大全のことを指し示す言葉だったのです。固有名詞から生じた一般名詞。

このことはBibleという言葉の対局にあります。こちらは元々は「本」という一般名詞でした。そのことは bibliomania (本の虫--どこの私だ?)、 bibliography (本の目録)といった英単語からも伺うことができます。Bibleとは"The Book"という意味だったのですね。一般名詞から生じた固有名詞。

コードに話を戻しましょう。本来のコードであったローマ法に関して、塩野七生はこう述べています。

<blockquote>

人間の行動原則の正し手を、 宗教に求めたユダヤ人。 哲学に求めたギリシア人。 法律に求めたローマ人。(「ローマ人の物語」他多数)

<site></site>

</blockquote>

この意味において、日本を含め、およそ法治国家を標榜する国々の市民はローマ人の末裔ということになります。

ところが、このローマ人、法を作成し、改訂し、施行することには熱心でも、編纂することには少しも熱心ではなかったのです。前述のユスティニアヌス1世の527年から565年。ローマの全盛期はとっくに過ぎて、東西に分裂した後だったのです。

おそらく、それに熱心に取り組んでいる人にとって、それはあまりに当然で必然なことで、わざわざ「外から」編纂するという気持ちにはなりにくかったのでしょう。

ローマ人にとってそうであったように、コードという言葉は現代人にとってそういう存在になりつつあります。ただし現代人にあってローマ人になかったものが一つあります。

それが、電脳(computer)。これはローマ人に奴隷がいて現代人にはいないこと(になっている)ことと対をなしています。ローマ法はあくまでローマ市民に適用されるものであって非市民たる奴隷や異邦人(barbarian)に適用されるものではなかったのですが、現代人は、その電脳で実行されるプログラムのことも、コードと呼んでいます。

本書の「コード」は、その双方を指しています。電脳に適用するコードと、人脳に適用するコード、その双方を。いや、もしかしてもう一つあるかも知れません。この世界自体に適用されている、コード。

最後のそれは、「法則」とも呼ばれます。残念ながらこれは我々が書き下したものではなく、この世界自身に書かれているものです。それを読み解く人が、科学者。そして人電両脳のコードを読み書きする人が、技術者。これは、科学者と技術者の違いでもあります。扱うコードがリードオンリなのかライタブルなのか。

本書の想定読者は、一応後者たる技術者ということになっています。しかしこの両者が深く繋がっていることを、私は「<a href="http://www.amazon.co.jp/gp/product/4041103851?ie=UTF8&camp=247&creativeASIN=4041103851&linkCode=xm2&tag=sorehabooks-22" target="blank" class="extlink">『中卒』でもわかる科学入門</a>」に書いています。

<blockquote>

およそどんな人でも、幸せな瞬間というのは次の二つしかないのかも知れません。

<ol>
<li>できなかったことができるようになった瞬間</li>
<li>わからなかったことがわかった瞬間</li>
</ol>

</blockquote>

コードは読み解くべきものでもあり、書き下されるべきものでもある。そしてそれが出来た時、よろこびが生まれる。

それが私にとってのコードであり、本書で扱うコードの範囲(scope)です。

では改めて。コードな世界へ、ようこそ!

<h2>もくじ</h2>

<ul style="list-style:none">
<li>#0 堂々とevaろう。でもevaりすぎにご用心</li>
<li>#1 Y談。</li>
<li>#2 I/O止めないで</li>
<li>#3 メモレカス、ナマケモノドモ</li>
<li>#4 殺速と複殺</li>
<li>#5 OS、SOS</li>
<li>#6 自縄自縛のススメ</li>
<li>#7 Body and Soul</li>
<li>#8 Mathコミュニケーション</li>
<li>#9 コードと法律の共通点</li>
<li>#10 バカと電脳は使いよう</li>
<li>#11 データは人のためならず</li>
<li>#12 Connect</li>
<li>#13 いまそこにある夢</li>
<li>#14 最後のファイルシステム</li>
<li>#15 ファイルシステムの終わり</li>
<li>#16 From Jobs' Apple to Apple's jobs </li>
<li>#17 Too Beautiful to be Windows</li>
<li>#18 点と線</li>
<li>#19 1%のコードと99%のコンフィギュレーション</li>
<li>#20 言語のチュウス[ウイ]</li>
<li>#21 並べ方と並べ替え方</li>
<li>#22 参照にしか値しない</li>
<li>#23 働いたら負けなら、働いてもらえばいいじゃない</li>
<li>#24 安物買いの安全失い</li>
<li>#25 Not Even Odd</li>
<li>#26 安増税の税失い</li>
<li>#27 たまには( )つけてみよう</li>
<li>#28 ニシキヘビに呑み込めないもの</li>
<li>#29 三位<一体</li>
<li>#30 Where do(es) you(r heart) want to go today</li>
<li>#31 The Round Lens Square Hole</li>
<li>#32 Can we still stay hungry?</li>
<li>#33 Where has all the foolish gone?</li>
<li>Ex.0 美しいプログラムの美しくないソース</li>
<li>Ex.1 アマグラマのすすめ美徳その1:怠慢</li>
<li>Ex.2 アマグラマのすすめ美徳その2:短気</li>
<li>Ex.3 アマグラマのすすめ美徳その3:傲慢</li>
<li>Ex.4 プログラマでなくても名前ぐらい覚えておきたいアルゴリズム×11</li>
<li>Ex.5 プログラミングいつまでに学ぶ? なぜ学ぶ?</li>
</ul>
-----
EXCERPT:

-----
KEYWORDS:
小飼弾,コード,プログラミング,プログラマ,アーキテクチャ,アルゴリズム,コンピュータ
-----


-----
CF50_CF_4: 小飼 弾 (著) 
CF50_URL: https://images-na.ssl-images-amazon.com/images/I/519VcJWD13L._SL500_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4774156647?ie=UTF8&camp=247&creativeASIN=4774156647&linkCode=xm2&tag=sorehabooks-22
CF50_CF: 技術評論社
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
AUTHOR: hamasyou
TITLE: バッドデータハンドブック ―データにまつわる問題への19の処方箋
BASENAME: _19
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Computer
CATEGORY: Computer
CATEGORY: Programming
DATE: 11/14/2013 11:45:20 AM
TAGS: ビッグデータ
-----
BODY:
<blockquote>

値の欠落、形式から外れたレコード、エンコーディング形式が不明な文字列。「バッドデータ」と聞いた時に思い浮べる典型例です。しかし、これら以外にも「そもそもデータにアクセスできない」「消えてしまった」「昨日と違っている」「データはあるが形式が処理に適していない」など、データを収集・分析するエンジニアは、これらの「バッドデータ」と正面から向きあわなければならないことが多々あります。本書では、これらの問題のあるデータのパターンを紹介し、その対処法を解説しています。
19人のデータ分析の専門家が、自らの経験を通して得た、さまざまな教訓、実践的な方法論等を詳述した本書は、ビッグデータ時代のエンジニアにとって必携の一冊となるでしょう。

<cite>O'REILLY</cite>

</blockquote>

本書はプログラミングやデータ解析の時に扱うデータの内容やフォーマットについて書かれています。プログラミングの時に扱いやすいデータフォーマット、こういう点に気をつけてデータを扱え、こういうフォーマットが使いやすいなどについて書かれています。

コンピュータで扱うデータは大きく分けて<strong>コンピュータのためにフォーマットするデータ</strong>と<strong>人間のためにフォーマットするデータ</strong>があります。これらをごっちゃにしてしまうと扱いづらいデータ（<strong>バッドデータ</strong>）になってしまいます。本書はバッドデータをよりよく扱う方法、バッドデータにしない方法について、いろいろな点で考えられるようにアイデアや体験談を与えてくれます。

最近 API をよく作ってるんだけど通信データのフォーマットに困ってるというような Web プログラマにオススメです！
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
ビッグデータ,ファイル,フォーマット
-----


-----
CF50_CF_4: Q. Ethan McCallum (著), 磯 蘭水 (監訳) (翻訳), 笹井 崇司 (翻訳) 
CF50_URL: https://images-na.ssl-images-amazon.com/images/I/51WREvWeqbL._SL500_AA300_.jpg
CF50_AMAZONURL: http://www.amazon.co.jp/gp/product/4873116406?ie=UTF8&camp=247&creativeASIN=4873116406&linkCode=xm2&tag=sorehabooks-22
CF50_CF: オライリージャパン
-----
CF50_CF_5:

-----
CF50_CF_3: 4
--------
