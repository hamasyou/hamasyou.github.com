AUTHOR: hamasyou
TITLE: それはBooksの書評以外の何かを発信する場
BASENAME: books
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Blog
CATEGORY: Blog
DATE: 07/28/2010 07:53:44 PM
TAGS: ブログ
-----
BODY:
今さらながら、書評以外のブログ始めました。

このエントリは、ブログサイトのデザイン確認用の自分のためのエントリです。
-----
EXTENDED BODY:
<h2>タイトルタグ (h1, h2, h3, h4)</h2>

タイトルにつけるタグ。h1 は記事のタイトルに使うので、記事の中では使いません。h2 は記事の中で大きな区分を表すときに使います。h3 は区分の中でのひとつのトピック（セクション）を表すときに使います。。h4 はトピックの中のそれぞれの部品の見出しに使います。。h5、h6 は使いません。

<h1>これが h1 タグです</h1>

<h2>これが h2 タグです </h2>

<h3> これが h3 タグです </h3>

<h4> これが h4 タグです </h4>

<h4 class="note">note クラスを指定するタイトル</h4>

<h2>テキスト装飾</h2>

<h3>文章を書くとき</h3>

通常は、この文字で記述します。少し強調したい場合は <em>em</em> タグを使って装飾します。 さらに強調したい場合やキーワードには <strong>strong</strong> タグを使います。

文章中で br タグは使いません。段落の区切りは p タグで区切ります。

<h3>引用</h3>

引用には <em>q</em> タグか <em>blockquote</em> タグを使います。<q>文章中で引用を行うときに q タグの方を使います。</q>

<blockquote>

段落を引用する場合は blockquote タグを使います。blockquote タグを使う場合には、cite タグを使って引用元を明記します。

<cite>どかしらから引用</cite>

</blockquote>

<h3>説明・定義</h3>

説明文や定義には、<em>dl</em>、<em>dt</em>、<em>dd</em> タグを使います。

<dl>
<dt>これが説明・定義する言葉です</dt>
<dd>
<p>ここに説明文を記述します。dd タグはブロック要素とインライン要素をとれるため、段落を含めてもかまいません。</p>

<pre>整形タグ（pre）も使用できます。</pre>

<pre class="console">これも整形タグ</pre>

<pre class="code">これも整形タグ</pre></dd>
</dl>

dt タグの class 属性に warn、notice、info、tips、note のいずれかを指定すると、タイトルの前に画像が表示されます。

<dl>
<dt class="warn">警告！</dt><dd>warn を使うとこんな感じ</dd>
<dt class="notice">注意です</dt><dd>notice を使うとこんな感じ</dd>
<dt class="info">これなんてどうかな</dt><dd>info を使うとこんな感じ。</dd>
<dt class="tips">ティップス</dt><dd>tips を使うとこんな感じ。ブログのテーマカラー的にこれを使う？？</dd>
<dt class="note">ノート</dt><dd>note を使うとこんな感じ。なにかのメモに使う？</dd>
</dl>

<h3>箇条書き</h3>

箇条書きは、単一行で説明できる文章をリスト化するときに使います。順番の必要がない場合は <em>ul</em> タグを使います。順番が必要なときは <em>ol</em> タグを使用します。

<ul><li>リスト１</li><li>リスト2</li><li>リスト３</li></ul>

<ol><li>リスト４</li><li><p><em>li</em> タグは、ブロック要素を取ることができますが、自分では使わないようにしよう。たぶんレイアウトが崩れるから。。</li></ol>

<h3>リンク</h3>

リンクには <em>a</em> タグを使います。外部リンク（それはBlog の外にでるとき）は、<em>target</em> 属性に _blank 値と <em>class</em> 属性に extlink を与えます。

<pre><a href="http://www.google.co.jp" target="_blank" class="extlink">http://www.google.co.jp</a></pre>

<h3>整形済みテキスト・ソースコード</h3>

整形済みテキストには <em>pre</em> を使います。pre タグにはインライン要素しか含めることができないので、空行が入る場合には、スペースをひとつ含めるようにします。（これは Movable Type の改行を勝手に p タグにしてくれる機能を回避するため）

<pre>たとえば、こんな風に書く。
 
改行を含めるときは、空行にスペースを忘れずに！
</pre>

<section>

<h4>コンソールの用に見せるには</h4>

整形済みテキストをコンソールのように見せるには、class 属性に <em>console</em> を与えます。

<pre class="console">&lt;pre class=&quot;console&quot;&gt;たとえば、キーボードからの入力を表すときには <em>kbd</em> タグを使います。&lt;/pre&gt;
 
 > <kbd>これをキーボードで入力する！</kbd>
</pre>

</section>

<section>

<h4>ソースコードのように見せるには</h4>

ソースコードのように見せるには class 属性に code を指定します。

<pre class="code">&lt;pre class=&quot;code&quot;&gt;&lt;code&gt;ソースコードの場合は <em>code</em> タグで囲みます。 code タグはインライン要素なので、空行を入れるときはスペースを（ry</pre>

ソースコード表示中は、span タグの class 属性に次の値を指定して装飾することが出来ます。

<dl>
<dt>keyword</dt><dd>ソースコード中のキーワードを表す。プログラミング言語の予約語などに使う</dd>
<dt>comment</dt><dd>ソースコード中のコメント行を表す。</dd>
<dt>literal</dt><dd>ソースコード中のリテラル（文字列や数値）を表す。</dd>
</dl>

<pre class="code"><code><span class="comment">/** 
 * This is a style test code.
 * 
 * @author hamasyou
 */</span> 
<span class="keyword">public</span> <span class="keyword">class</span> HogeClass <span class="keyword">implements</span> FooClass { 
 
  <span class="keyword">public</span> String getMessage(BarClass fooBar) { 
    <span class="keyword">return</span> <span class="literal">"テストメッセージ"</span>;
  } 
}
</code></pre> 

</section>

<h2>その他</h2>

<h3>Table タグ</h3>

テーブルタグは、<em>table</em>、<em>caption</em>、<em>th</em>、<em>td</em> を使用して使います。

<table> 
<caption>なんかの説明</caption>
<tr><th>これが見出し１</th><th>見出しは <em>th</em> タグです</th></tr>
<tr><td>ここがデータ部分</td><td>ここもね。</td>
</table>

<h3>option クラスの使い方</h3>

<p class="option">段落に class="<em>option</em>" を使うとこんな感じになります。</p>
-----
EXCERPT:

-----
KEYWORDS:

-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Mac OS XでPostfixを使ってGMailをメールサーバにする
BASENAME: mac_os_xpostfixgmail
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Blog
CATEGORY: Blog
DATE: 07/29/2010 01:27:11 PM
TAGS: GMail,"Mac OS X",Postfix,メール送信
-----
BODY:
ここの手順そのまま。

<ul><li><a href="http://www.riverturn.com/blog/?p=239" target="_blank" class="extlink">Gmail Email Relay using Postfix on Mac OS X 10.5 Leopard</a></li></ul>

これでローカル環境からメール送信テストが行える！
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Mac OS X, Postfix, Gmail
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: IE で border-radius を使う方法
BASENAME: ie_border-radius
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: TechMemo
DATE: 08/30/2010 12:29:14 AM
TAGS: border-radius,CSS3,角丸
-----
BODY:
CSS3 から使えるようになった border-radius を IE でも使う方法です。IE でも使うと言っては語弊がありますが、IE でも角丸を表現する方法です。それは Blog で使っている方法をメモ。
-----
EXTENDED BODY:
<h2>IE で角丸を表現する方法</h2>

ご存じの通り、IE6、IE7、IE8 では CSS3 の <strong>border-radius</strong> を使って角丸を表現することはできません。んじゃ、どうやって角丸を実現するのかというと次のような方法があります。

<dl>
<dt>border-radius.htc を使う</dt>
<dd><p><em>VML</em> を利用して、behavior を使って border-radius を実現する方法</p></dd>
<dt>border-radius.js を使う</dt>
<dd><p>JavaScript を使って border-radius を実現する方法</p></dd>
<dt>JQuery Corner を使う</dt>
<dd><p>jQuery Corner という jQuery プラグインを使って border-radius を実現する方法</dd>
</dl>

さくっと Google 先生に聞いたところ、3つくらいやり方があるようでした。で、うちのブログでは3つめの、<strong>JQuery Corner</strong> を使いました。

<h3>border-radius.htc のダメなところ</h3>

さっと検索したところ、border-radius.htc が一番簡単に角丸を実現出来そうだったのですが、如何せん互換モードでしか動かない。。うちのサイトは、HTML5 の標準モードで作っているので、これが動かない！！

ちなみに、HTML5 で標準モードは DOCTYPE に html を与えてやればいいだけらしいです。

<pre>&lt;!DOCTYPE html&gt;</pre>

まぁ、互換モードでしか動かないとなると、使えないということで、これは×。

<h4>ってか、標準モードでも動くように手をいれてる人発見</h4>

<a href="http://www.revulo.com/blog/20071014.html" target="_blank" class="extlink">「VML を利用して IE で border-radius が使えるようにする>VML を利用して IE で border-radius が使えるようにする」 れぶろぐ</a>

これ、試したらうまくいくのかな？やってないけど。

<h3>border-radius.js のダメなところ</h3>

border-radius.js は、javaScript を使って角丸を表現することができるらしいです。適用したい要素の class 属性に html5jp-border-radius という値を指定すればよいらしいですが、これがめんどくさい。というか、<em>そもそも IE8 でうごかない</em>という。。。自宅の環境、IE8 しか入ってないし、確認できないと意味ないじゃん。。ということでこれも×。

<h3>ということで、最後の頼みの綱 jQuery</h3>

jQuery 大好きな僕としては、これに賭ける！ということで導入してみました。

<a href="http://www.malsup.com/jquery/corner/" target="_blank" class="extlink">JQuery Corner</a>

これを使うと、角丸にしたいところを下みたいな感じでやれちゃう。

<pre class="code"><code>$("div").corner();</code></pre>

ただ、要注意なのが、<em>白背景のブロック要素に対して行うと、ボーダーが見えなくなっちゃう</em>ので角丸になってるかよく分かりません。。。ということで、どうすればいいかというと、外側に一つラッパーを作ってやってラッパーの背景にボーダー色を設定し、ラッパーとのマージン差で線ぽっく見せると。

こんな感じ。

<section>

<h4>jQuery Corner の使用例</h4>

<pre class="code"><code><span class="keyword">var</span> $wrapper = $(<span class="str">&quot;&lt;div/&gt;&quot;</span>);
$(<span class="str">&quot;.hoge&quot;</span>).wrap($wrapper);
$(<span class="str">&quot;.hoge&quot;</span>).css(<span class="str">&quot;margin&quot;</span>, <span class="str">&quot;0&quot;</span>);
$wrapper = $(<span class="str">&quot;.hoge&quot;</span>).parent();  <span class="rem">// なぜかこれが必要。。。</span>
$wrapper.css(<span class="str">&quot;background-color&quot;</span>, <span class="str">&quot;ここに線の色を指定する&quot;</span>);
$wrapper.css(<span class="str">&quot;margin&quot;</span>, <span class="str">&quot;0&quot;</span>);
$wrapper.css(<span class="str">&quot;padding&quot;</span>, <span class="str">&quot;1px&quot;</span>);
$wrapper.corner(<span class="str">&quot;5px&quot;</span>);
$(<span class="str">&quot;.hoge&quot;</span>).corner(<span class="str">&quot;5px&quot;</span>);</code></pre>

</section>

適当に div タグ作って角丸にしたい要素（.hoge）に wrap します。んで、角丸にしたい要素の margin を 0 に設定してラッパーとの間をなくします。

その後、JQuery Corner の corner を使ってラッパーと角丸にしたい要素の両方を丸くした後、padding で線の太さ分だけずらします。

一応、うまくいってます。下の枠が一応テスト用ということで。

<h4>テスト要素</h4>

<script type="text/javascript">
jQuery(function($) {
  var $wrapper = $("<div/>");
  $("#radius-target").wrap($wrapper);
  $("#radius-target").css("margin", "0");
 
  $wrapper = $("#radius-target").parent();
  $wrapper.css("background-color", "#31B5D6");
  $wrapper.css("margin", "0");
  $wrapper.css("padding", "2px");     // 2px の枠線
  $wrapper.corner("tl 12px");         // 左上だけ角丸にする
  $("#radius-target").corner("tl 12px");
});
</script>

<div id="radius-target" style="background-color: #FFF; padding: 15px;">ほげほげほげほげほげほげほげほげ<br />ほげほげほげほげほげほげほげほげ<br />ほげほげほげほげほげほげほげほげ</div>

<h3>JQuery Corner についてもう少し</h3>

<section>

<h4>ダウンロード</h4>

<a href="http://www.malsup.com/jquery/corner/" target="_blank" class="extlink">JQuery Corner</a>

</section>

jQuery Corner ですが、CSS3 の border-radius 、Webkit の -webkit-border-radius、 Mozira の -moz-border-radius のいずれかが利用可能な場合にはデフォルトでそちらのスタイルを適用します。なので、あらかじめ CSS でこれらの設定をしておいた後、IE のためだけに jQuery でごりごりやるという形になるかと思います。なんて IE に対して手厚い保護なんでしょうか。。。

で、IE かどうか（というか、上記の3属性が使えるかどうか）を判定するのに、<code>$.support.borderRadius</code> が使えます。

<pre class="code"><code><span class="keyword">if</span> (!($.support.borderRadius)) {
  <span class="comment">// ここに IE のための処理を。。</span>
}</code></pre>

と、こんな感じで。ちなみに、デフォルト動作（border-radius 要素を使うかどうか）は、$.fn.corner.defaults.useNative で切り替えできます。

<pre class="code"><code>$.fn.corner.defaults.useNative = <span class="keyword">false</span>;</code></pre>
-----
EXCERPT:

-----
KEYWORDS:
jQuery,InternetExplorer, CSS3
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: ブログにソースコードを貼り付ける際のフォーマットツール
BASENAME: post
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Bookmark
CATEGORY: Bookmark
DATE: 08/30/2010 04:24:36 AM
TAGS: ソースコード色づけ
-----
BODY:
技術系ブログではソースコードをブログに貼り付けることが多いと思いますが、そんなときに色付けたいと思うことあると思います。そこで、Web 上で簡単に使えてしかもスタイルの変更が行いやすいフォーマッタの紹介です！

というか、自分用のブックマークみたいなもんですが。

<h4>ソースコード HTML化 コンバーター「唐辛子」</h4>

<ul><li><a href="http://kujirahand.com/tools/tougarasi/" target="_blank" class="extlink">ソースコード HTML化 コンバーター「唐辛子」</a></li></ul>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
ソースコード, フォーマット
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: デザインパターン一覧
BASENAME: post_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: TechMemo
DATE: 08/30/2010 03:38:42 PM
TAGS: デザインパターン
-----
BODY:
それはBooksで書いた、デザインパターンに関する記事の一覧です。

<h4>GoF のデザインパターン一覧</h4>

<ul>
<li><a href="http://hamasyou.com/archives/000170">Adapter パターン</a></li>
<li><a href="http://hamasyou.com/archives/000171">Factory Method パターン</a></li>
<li><a href="http://hamasyou.com/archives/000172">Singleton パターン</a></li>
<li><a href="http://hamasyou.com/archives/000173">Template Method パターン</a></li>
<li><a href="http://hamasyou.com/archives/000174">Composit パターン</a></li>
<li><a href="http://hamasyou.com/archives/000176">Decorator パターン</a></li>
<li><a href="http://hamasyou.com/archives/000177">Iterator パターン</a></li>
<li><a href="http://hamasyou.com/archives/000179">Bridge パターン</a></li>
<li><a href="http://hamasyou.com/archives/000181">Abstract Factory パターン</a></li>
<li><a href="http://hamasyou.com/archives/000184">Builder パターン</a></li>
<li><a href="http://hamasyou.com/archives/000188">Prototype パターン</a></li>
<li><a href="http://hamasyou.com/archives/000193">Strategy パターン</a></li>
<li><a href="http://hamasyou.com/archives/000211">Monostate パターン</a></li>
<li><a href="http://hamasyou.com/archives/000212">Observer パターン</a></li>
<li><a href="http://hamasyou.com/archives/000260">Visitor パターン</a></li>
<li><a href="http://hamasyou.com/archives/000268">Command パターン</a></li>
</ul>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Java, デザインパターン
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Google 検索向け AdSense で検索パラメータ名を変更する方法
BASENAME: google_adsense
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: TechMemo
DATE: 08/30/2010 09:18:32 PM
TAGS: "Google Adsense","Movable Type"
-----
BODY:
このサイトでも <strong>Google 検索 AdSense</strong> を使っていますが、とある事情で Google 検索で使われる q というクエリパラメータ（検索パラメータ）名を別の値に変更したいと思い試行錯誤の末（そんなに難しくはないです。。。）変更の仕方が分かったのでメモです。
-----
EXTENDED BODY:
<h2>Google 検索のパラメータ名を変更する方法</h2>

<h3>Google サイト内検索の結果をブログデザインに合わせる</h3>

一応背景を。

ブログを作ってると、サイトのデザインを保ったまま出来るだけ Google AdSense を組み込みたいって思いますよね？Google AdSense にはコンテンツ向けの広告と別に<em>検索向け AdSense</em> なんてものがあります。

検索向け AdSense は Google 検索の結果に広告を表示させるというものですが、​自分のサイト内で使う場合には検索結果画面のデザインを細かく指定することができません。（もちろんリンクやテキストの文字とかはできます。）

<h3>Google 検索向け AdSense の結果表示タイプ</h3>

検索向け AdSense には次の3つの検索結果表示の仕方があります。

<dl>
<dt>結果を Google の同じウィンドウに表示</dt>
<dd>Google の簡素でチープな検索結果画面が表示されます。サイトのデザインとかけ離れててイヤーーーって感じです。</dd>
<dt>結果を Google の新しいウィンドウに表示</dt>
<dd>単に別ウィンドウ（別タブ）に検索結果を表示するだけです。簡素でチープな（ry</dd>
<dt>自分のサイトに結果を表示する</dt>
<dd>自分のサイトのデザインにできるだけあわせるならこれを選ぶべし</dd>
</dl>

<h3>自分のサイトに結果を表示する</h3>

「検索結果を表示する URL を入力」と「検索結果領域の幅を入力」というパラメータを設定できます。これの仕組みは、インラインフレームを使って検索結果をサイト内に配置するというものです。

なので、検索結果画面のデザインを用意しておいて、結果表示部分をこいつに置き換えてやれば、デザインはほとんどそのままで結果をサイト内に表示すると言うことが出来ます。

<img alt="GoogleAds_Screen.jpg" src="http://hamasyou.com/blog/archives/images/GoogleAds_Screen.jpg" width="639px" class="mt-image-none" style="" />

<h3>どういう仕組みでやってるの？</h3>

<em>Movable Type</em> の場合ですが、検索は mt-search.cgi を呼び出して検索結果画面を表示するという仕組みになっています。

このとき、Google の検索用クエリパラメータ（q=xxx ってやつ）を結果画面にわたしてやると、検索結果画面に埋め込まれた Google のスクリプトが <em>window.location.search</em> からクエリパラメータを取り出してインラインフレーム内に検索結果を作り出すという感じになります。

<h3>検索用クエリパラメータ(q)を変更するには？</h3>

Movable Type の mt-search.cgi が必要とする検索用クエリパラメータは search という名前になっています。で、Google 検索は q。なんとか Google 検索で使うクエリパラメータ名を search に変えたいところ。ということで調べました。

実は簡単で、検索結果画面側に含める Google のスクリプトにグローバル変数で下のようにクエリパラメータ名を与えるだけでした。

<section>

<h4>検索結果画面に記述する google スクリプト</h4>

<pre class="code"><code><span class="tag">&lt;div <span class="attr">id=</span><span class="value">&quot;cse-search-results&quot;</span>&gt;</span><span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;script <span class="attr">type=</span><span class="value">&quot;text/javascript&quot;</span>&gt;</span>
  <span class="keyword">var</span> googleSearchIframeName = <span class="str">&quot;cse-search-results&quot;</span>;
  <span class="keyword">var</span> googleSearchFormName = <span class="str">&quot;cse-search-box&quot;</span>;
  <span class="keyword">var</span> googleSearchFrameWidth = <span class="num">693</span>;
  <span class="keyword">var</span> googleSearchDomain = <span class="str">&quot;www.google.co.jp&quot;</span>;
  <span class="keyword">var</span> googleSearchPath = <span class="str">&quot;/cse&quot;</span>;
  <span class="keyword">var</span> googleSearchQueryString = <span class="str">&quot;search&quot;</span>;  <span class="rem">// &lt;--- これ！</span>
<span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;script <span class="attr">type=</span><span class="value">&quot;text/javascript&quot;</span> <span class="attr">src=</span><span class="value">&quot;http://www.google.com/afsonline/show_afs_search.js&quot;</span>&gt;</span><span class="tag">&lt;/script&gt;</span>
</code></pre>

</section>

これで、検索フォーム内で好きな検索パラメータ名を使用することができるようになります。

<h3>ひとつ問題が。。</h3>

検索フォームのテキスト入力部分にウォーターマーク（下参照）を表示できるのですが、Google のスクリプトの中で入力フォーム名は q で決めうちされているっぽく、検索パラメータ名を変更するとウォーターマークが表示されなくなってしまいます。必要なら自分で jQuery 等使って補ってください。

<script type="text/javascript">
$(document).ready(function() {
  var f = document.getElementById("markdemo_field");
  f.style.background = '#FFFFFF url(http:\x2F\x2Fwww.google.co.jp\x2Fcse\x2Fintl\x2Fja\x2Fimages\x2Fgoogle_custom_search_watermark.gif) left no-repeat';
});
</script>

<h4>ほんとはウォーターマークが下のようにつくはず</h4>

<pre><input type="text" id="markdemo_field" size="20" /></pre>
-----
EXCERPT:

-----
KEYWORDS:
Google Adsense
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Titanium] Titanium Mobile で iPhone 開発 - その1
BASENAME: titanium_mobile_iphone
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: iPhone
CATEGORY: Titanium
CATEGORY: iPhone
DATE: 08/31/2010 01:10:28 AM
TAGS: "iPhone 開発","Titanium Mobile"
-----
BODY:
iPhone アプリの開発をしていて一番の難は <em>Objective-C を使わないといけない</em>ことだと思う。Objective-C が大好きな人もいるかもしれないけど、僕はあの言語の気持ち悪さ（構文的な意味で）が嫌いです。。

で、どうにかならんもんかと調べてみるとなんと、<strong>JavaScript</strong> を使って開発することが出来る開発プラットフォームがあるじゃないですか。

というこで早速使ってみましたよ、<strong>Titanium Mobile</strong>！読み方は、<em>タイタニウム</em> らしいですが、チタニウムのが言いやすいよね。。

<h4>参考</h4>

<ul><li><a href="http://d.hatena.ne.jp/donayama/searchdiary?word=*[Titanium]" target="_blank" class="extlink">JP::HSJ::Junknews::HatenaSide</a></li></ul>

-----
EXTENDED BODY:
<h2>まずはインストール</h2>

<h3>Titanium Mobile をダウンロードしてインストールする</h3>

iPhone アプリを JavaScript で開発できるというこの Titanium は、正確には Titanium Desktop　と<em>Titanium Mobile</em> の二つがあるみたいです。

Titanium Desktop の方には興味ないので、以下 Titanium と言ったら Titanium Mobile のことです。早速 <a href="http://www.appcelerator.com/products/titanium-mobile-application-development/" target="_blank" class="extlink">Titanium Mobile - appcelerator</a> でダウンロードします。

<img alt="appcelerator_titanium.jpg" src="http://hamasyou.com/blog/archives/images/appcelerator_titanium.jpg" width="693" class="mt-image-none" style="" />

<h3>iPhone アプリ開発には iPhone SDK が必要</h3>

iPhone アプリ開発に iPhone SDK が必要なように、Titanium で iPhone アプリ開発する際にも当然 iPhone SDK が必要になります。ということは・・・、そう、Titanium 開発には Mac が必要なのだ！

<p class="option">Titanium はクロスプラットフォーム開発環境と呼ばれていて、同じソースコードから iPhone アプリと Android アプリの両方を作ってくれます。Android アプリを開発するだけなら、Windows でもOKです。何たって Android の開発言語は Java ですから。</p>

とはいえ、iPhone アプリ開発しようって言うんだから、Mac くらいもってますね。で、もう一つ、実機でアプリを動かそうと思ったら、そう、Apple Developer 登録（個人会員は年間参加費 ¥10,800）が必要になります。シミュレータだけで動かすなら登録は不要ですが。

実機で動かす手順とか、Apple Developer Program のアクティベーションの注意点（氏名とか住所とか英語じゃないとエラーになって先に進めなくなるとか。。）は、Google 先生にきいてください。

<section>

<h4>Apple Developere Program のアクティベーション失敗あれこれ参考</h4>

<a href="http://itfun.jp/2009/09/iphone-developer-program.html" target="_blank" class="extlink">iPhone Developer Program のアクティベーションに失敗と対応 - itFun.jp</a>

</section>

<h3>Titanium のドキュメントは Kitchen Sink</h3>

Titanium をインストールした後なにするかというと、<strong>Kitchen Sink</strong> というデモアプリをプロジェクトにインポートして動かしてみます。これで、Titanium の動作確認 + 困ったときのドキュメント（サンプル）の役割を果たします。

Titanium はまだまだ世に出て浅いためか、ドキュメントがほとんどありません。日本語ドキュメントなんてもってのほかです。でも、この
 Kitchen Sink サンプルが Titanium で出来るほぼすべての機能を網羅したサンプルになっているのです。しかもソースコード付き。API Doc を見るよりもサンプルコードを見た方がいいです。

<section>

<h4>Kitchen Sink のインストール方法</h4>

<a href="http://developer.appcelerator.com/doc/kitchensink" target="_blank" class="extlink">Kitchen Sink Download Doc - Appcelerator</a>

</section>

Kitchen Sink は Git を使ってダウンロードします。

<section>

<h4>Git - 分散バージョン管理システム</h4>

<a href="http://git-scm.com/" target="_blank" class="extlink">Git - the fast version control system</a>

</section>

手順通りに Kitchen Sink をプロジェクトにインポートしてもダメなときは、新規でプロジェクトを作って、ソースコードだけをコピーすると良いです。Titanium 環境でのソースコードは次のところにあります。

<pre>$PROJECT_ROOT$/Resources</pre>

Resources 以下のファイルを全部丸ごとコピーしちゃえばOKです。Titanium では Resources フォルダ以下にソースコードを起きます。

<section>

<h4>プロジェクトのフォルダ構成</h4>

<dl>
<dt>app.js</dt>
<dd>アプリケーションのエントリポイント。このファイルが最初に呼び出される。</dd>
<dt>/iphone フォルダ</dt>
<dd>iPhone 用のリソースファイルを置く。</dd>
<dt>/android</dt>
<dd>Android 用のリソースファイルを置く。</dd>
</dl>

</section>

Kitchen Sink が動けば、とりあえず Titanium の動作は完了です。残りは、別の機会に！

<h2>ハマッたポイント</h2>

<h3>プロジェクト名に Titanium という文字を含めると謎のビルドエラー</h3>

自分で Titanium 環境を作ったところ、<em>プロジェクト名に Titanium が含まれる</em> とビルド時にエラーになるようです。気をつけてください。
-----
EXCERPT:

-----
KEYWORDS:
iPhone, Titanium, Objective-C
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [HTML5] HTML5 対応の構文バリデータツール
BASENAME: html5
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Bookmark
CATEGORY: Bookmark
DATE: 08/31/2010 09:10:20 AM
TAGS: "HTML 構文チェック"
-----
BODY:
<strong>HTML5</strong> に対応した構文チェッカーのメモ。

<section>

<h4>HTML5 に対応した構文チェッカー</h4>

<ul>
<li><a href="http://qa-dev.w3.org/wmvs/HEAD/" target="_blank" class="extlink">Markup Validation Service - W3C</a></li>
<li><a href="http://html5.validator.nu/" target="_blank" class="extlink">Validator.nu (X)HTML5 Validator - Validator.nu</a></li></ul>

</section>

あと、HTML5 にはまだ対応していないけど、オプションが豊富でよく使う HTML チェッカー。

<ul><li><a href="http://htmllint.itc.keio.ac.jp/htmllint/htmllint.html" target="_blank" class="extlink">Another HTML-lint gateway</a></li></ul>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
HTML5, CSS3
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Rails3] Rails3 がリリースされたのでまとめ
BASENAME: rails3
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Bookmark
CATEGORY: Bookmark
CATEGORY: Rails
CATEGORY: Ruby
DATE: 08/31/2010 10:52:56 AM
TAGS: Rails3,ただのブックマーク
-----
BODY:
ついに、2010年8月30日（公式では Aug 29, 2010 ってなってるけど）に、<strong>Rails3</strong> がリリースされました。

<strong>Ruby1.9.2</strong> も2010年8月18日にリリースされているので、今後は Ruby1.9.2 と Rails3 での開発が増えてくる予感です。個人的には、Ruby1.9 から文字エンコーディング周りが大幅に変わっているので、View テンプレートにマジックコメントをいちいち書かないといけないのがめんどくさかったり。。

ということで、Rails3 系の記事の簡易まとめメモです。
-----
EXTENDED BODY:
<h2>Rails3</h2>

<h3>Rails の公式サイト</h3>

<a href="http://rubyonrails.org/" target="_blank"><img alt="rails3_site.jpg" src="http://hamasyou.com/blog/archives/images/rails3_site.jpg" width="693" class="mt-image-none" style="" /></a>

<a href="http://rubyonrails.org/" target="_blank" class="extlink">Ruby On Rails - 37Signals</a>

<h3>Rails3 リリースノート</h3>

<h4>Rails3 の新機能（英語）</h4>

<ul><li><a href="http://rubyonrails.org/screencasts/rails3" target="_blank" class="extlink">Dive into Rails3 - 37Signals</a></li>
<li><a href="http://assets.en.oreilly.com/1/event/40/The%20Rails%203%20Ropes%20Course%20Presentation.pdf" class="extlink">上のプレゼン資料（PDF）</a></li></ul>

<h4>和訳</h4>

<ul><li><a href="http://d.hatena.ne.jp/willnet/20100206/1265467594" target="_blank" class="extlink">Rails 3.0 リリースノート和訳 - 前編 - おもしろWEBサービス開発日記</a></li>
<li><a href="http://d.hatena.ne.jp/willnet/20100303/1267608419" target="_blank" class="extlink">Rails 3.0 リリースノート和訳 - 後編 - おもしろWEBサービス開発日記</a></li>
<li><a href="http://d.hatena.ne.jp/gom68/20100206/1265469879" target="_blank" class="extlink">Rails3 リリースノート全文和訳 (ただし適当) - うっかりプログラミング日誌</a></li>
<li><a href="http://blog.bluemoderns.com/articles/2010/02/07/ruby-on-rails-3-1/" target="_blank" class="extlink">Ruby on Rails 3 リリースノート翻訳 (1) - Blue Moderns Blog</a></li>
<li><a href="http://blog.bluemoderns.com/articles/2010/02/08/ruby-on-rails-3-2/" target="_blank" class="extlink">Ruby on Rails 3 リリースノート翻訳 (2) - Blue Moderns Blog</a></li>
<li><a href="http://blog.bluemoderns.com/articles/2010/02/11/ruby-on-rails-3-3/" target="_blank" class="extlink">Ruby on Rails 3 リリースノート翻訳 (3) - Blue Moderns Blog</a></li></ul>

<h3>Rails3 インストール</h3>

Ruby3 が正式にリリースされたので、ほとんどのサイトの説明にある --pre は不要です。

<section>

<h4>Rails のインストールコマンド</h4>

<pre class="console">gem install rails</pre>

</section>

<section>

<h4 class="note">Ruby の環境を切り替えてつかう rvm</h4>

<p class="option">
複数の Ruby 環境を切り替えることができる <strong>rvm</strong> というRubyバージョン管理ツールがあります。便利なので使いましょう。これで、既存の環境を残したまま、Ruby1.9.2 と Rails3 を試してみることが出来ます。
</p>

rvm のインストールは、<em>GitHub</em> からするのが推奨されています。gem でインストールするのが簡単なんですけどね。。。

<ul><li><a href="http://rvm.beginrescueend.com/rvm/install/" target="_blank" class="extlink">Installing RVM - RVM: Ruby Version Manager</a></li>
<li><a href="http://gihyo.jp/dev/serial/01/ruby/0039" target="_blank" class="extlink">第39回　RVM（Ruby Version Manager）による環境構築 - Gihyo.jp</a></li>
<li><a href="http://gihyo.jp/dev/serial/01/ruby/0040" target="_blank" class="extlink">第40回　RVM（Ruby Version Manager）による環境構築（2） - Gihyo.jp</a></li>
<li><a href="http://doruby.kbmj.com/hoge/20100615/RVM_Rails_" target="_blank" class="extlink">RVMでRailsのバージョンを管理する - DoRuby!</a></li></ul>

</section>

<h3>Rails3 Doc</h3>

<h4>Rails3 Doc（英語）</h4>

<ul><li><a href="http://api.rubyonrails.org/" target="_blank" class="extlink">Rails: Complete API - 37Signals</a></li></ul>

<h4>Rails3 ドキュメント翻訳プロジェクト</h4>

<ul><li><a href="http://wiki.github.com/lifo/docrails/translating-rails-guides" target="_blank" class="extlink">Translating Rails Guides - GitHub</a></li></ul>

<h3>Rails3 に対応しているプラグイン一覧</h3>

<ul><li><a href="http://railsplugins.org/plugins" target="_blank" class="extlink">Browse Plugins - RailsPlugins.org</a></li></ul>

<h3>Rails3 に関するそのほか</h3>

<section>

<h4>WEB+DB PRESS Vol.58 の Rails3 記事がすごくいい！</h4>

<div class="bookInfo">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/4774143243?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774143243" target="_blank"><img src="http://ec2.images-amazon.com/images/I/51Zl31eqjML._SL500_AA300_.jpg" width="120" title="WEB+DB PRESS Vol.58" /></a>
</div>
<ul><li><em>WEB+DB PRESS Vol.58</em></li><li>編 (著), WEB+DB PRESS編集部 (編集)</li><li>技術評論社</li></ul>
<div class="clear"></div>
</div>

<ul><li><a href="http://www.machu.jp/diary/20100821.html" target="_blank" class="extlink">WEB+DB PRESS vol.58 の Rails 3 / Ruby1.9.2 記事が素晴らしすぎる件 - まちゅダイアリー</a></li></ul>

</section>

<h4>そのほか</h4>

<ul><li><a href="http://www.oiax.jp/rails/zakkan/test_frameworks_for_rails_3_x_era.html" target="_blank" class="extlink">Rails 3.x 時代のテストフレームワーク - Ruby on Rails with OIAX</a></li>
<li><a href="http://maskana.homedns.org/rails/pro" target="_blank" class="extlink">Ruby on Rails 入門、基礎編 - Ruby on Rails Pro</a></li></ul>
-----
EXCERPT:

-----
KEYWORDS:
Ruby, Ruby on Rails
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Titanium] Titanium Mobile で iPhone 開発 - ハマった点
BASENAME: titanium_mobile_iphone_-
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: iPhone
CATEGORY: Titanium
CATEGORY: iPhone
DATE: 09/03/2010 09:35:36 AM
TAGS: "iPhone 開発","Titanium Mobile"
-----
BODY:
<strong>Titanium Mobile</strong> は iPhone、Android アプリケーションを JavaScript でコーディングできるクロスプラットフォーム環境です。

Titanium を使っていてハマった点をメモしておきます。

<h4>Titanium Mobile のダウンロード</h4>

<ul><li><a href="http://www.appcelerator.com/products/titanium-mobile-application-development/" target="_blank" class="extlink">Titanium Mobile - Appcelerator</a></li></ul>
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

<h2>Titanium で Run Emulator - Launch しても反応が無い</h2>

多分、内部でエラーが発生しているか、単に反応が無いだけかも。一旦シミュレータを終了させるか、Stop ボタンを押して、再度 Launch してみる。

それでもダメなら、 <code>build/iphone/build/build.log</code> を見てみる。ファイルの最後の方にエラー内容がでているので、心当たりを修正する。

<h3>build.log に FileNotFound のようなエラーがでてる場合</h3>

Titanium のプロジェクトが壊れている可能性が大。一度ソースコードをどこかに退避して、Edit タブから Delete Project する。そのあと、New Project で再度プロジェクトをつくり直してソースコードを上書き（Resources フォルダを上書き）してみる。これで治ることがほとんど。

<h3>シミュレータは動くけど、実機のほうで Install Error になる</h3>

iPhone 実機の iOS のバージョンと XCode に入っている SDK のバージョンが一致してないかも。一度 XCode を立ち上げて、ウィンドウ - オーガナイザ を開いてみて、動かす実機の iPhone の iOS のバージョンと XCode のサポートしているバージョンが違わないかを確認する。

<img alt="iPhone オーガナイザ.gif" src="http://hamasyou.com/blog/archives/images/iPhone%20%E3%82%AA%E3%83%BC%E3%82%AC%E3%83%8A%E3%82%A4%E3%82%B6.gif" width="693" class="mt-image-none" style="" />

<h2>プロジェクト名に Titanium という単語が入るとエラーになる</h2>

Titanium でプロジェクトを作成するときに、プロジェクト名に Titanium っていう単語が入るとコンパイルエラーになるっぽい（上の FileNotFound 系の原因かも）。 TestTitanium とか、TitaniumDemo とかエラーになるので注意する。

<h2>コーディング時の注意</h2>

<h3>Titanium.Contacts でグループをつくるときの注意</h3>

Titanium.Contacts.createGroup({ name: "HOGE" }) でグループつくると内部で setName が呼ばれないため、後で group.name で取得しようとしたときにアプリが落ちます。Titanium.Contacts.createGroup でグループを作ったあとに group.name = "HOGE" でグループ名設定する必要があるっぽい。

<pre class="code"><code><span class="keyword">var</span> group = Titanium.Contacts.createGroup();
group.name = <span class="literal">"HOGE"</span>;</code></pre>

<h3><s>JavaScript で eval() は使えない</s></h3>

<s>Titanium の JavaScript で <em>eval()</em> は使えません。試しに alert(eval(&quot;1+1&quot;)); と記述してみると、ブラウザでは2と表示されますが Titanium ではエラーになります。</s>

<section>

<h4>2010/09/15追記</h4>

eval() 使うことができます。KitchenSink のサンプルにもあります。僕が使えないと勘違いしていた理由は、alert(eval("1+1")); とするとシミュレータがエラーで落ちるからで、alert(eval("1+1;")); とすると動くことを確認しました。。

</section>

Titanium は JavaScript で iPhone アプリケーションを開発できますが、JavaScript のすべてが使えるわけではないので注意！

<section>

<h4>JSON データのパースには JSON.parse() が使える</h4>

ちなみに、Titanium.Network.HTTPClient を使って取得したデータを JSON 形式に変換するのに、eval(&quot;(&quot; + this.responseText + &quot;)&quot;); とする場面では、JSON.parse(this.responseText) が使えます。

</section>

<h3>日本語のファイル名を使っていると、build.py でエラーになる</h3>

JavaScript ファイル名に日本語ファイル名を使っていると build.py でエラーが発生します。

<pre class="console">Exception detected in script:
Traceback (most recent call last):
  File "/Library/Application Support/Titanium/mobilesdk/osx/1.4.0/iphone/builder.py", line 707, in main
    dump_resources_listing(project_dir,o)
  File "/Library/Application Support/Titanium/mobilesdk/osx/1.4.0/iphone/builder.py", line 157, in dump_resources_listing
    out.write("  %s %s\n" % (string.ljust(p,120),string.ljust(s,8)))
UnicodeEncodeError: 'ascii' codec can't encode characters in position 25-30: ordinal not in range(128)</pre>
-----
EXCERPT:

-----
KEYWORDS:
iPhone, Titanium, Objective-C
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 緯度・経度から二点間の距離と方向を計算する
BASENAME: post_2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: TechMemo
DATE: 09/07/2010 01:39:28 PM
TAGS: geo,方向,経度,緯度,距離
-----
BODY:
ジオ系を触っていて、緯度、経度から二点間の距離とその方向を計算するロジックは色々なところで必要になるので、メモ。

元記事は下で、JavaScript に書き直しただけです。

<h4>緯度、経度から距離と向きを算出</h4>

<ul><li><a href="http://prog47.blogdns.org/blog/index.php?e=283" target="_blank" class="extlink">緯度、経度から距離と向きを算出 - 中年プログラマblog</a></li></ul>
-----
EXTENDED BODY:
<h2>緯度・経度から二点間の距離を計算する</h2>

<pre class="code"><span class="rem">//</span>
<span class="rem">// 測地線航海算法の公式</span>
<span class="rem">//</span>
<span class="keyword">function</span> geoDistance(lat1, lng1, lat2, lng2, precision) {
  <span class="rem">// 引数　precision は小数点以下の桁数（距離の精度）</span>
  <span class="keyword">var</span> distance = <span class="num">0</span>;
  <span class="keyword">if</span> ((Math.abs(lat1 - lat2) &lt; <span class="num">0.00001</span>) &amp;&amp; (Math.abs(lng1 - lng2) &lt; <span class="num">0.00001</span>)) {
    distance = <span class="num">0</span>;
  } <span class="keyword">else</span> {
    lat1 = lat1 * Math.PI / <span class="num">180</span>;
    lng1 = lng1 * Math.PI / <span class="num">180</span>;
    lat2 = lat2 * Math.PI / <span class="num">180</span>;
    lng2 = lng2 * Math.PI / <span class="num">180</span>;
 
    <span class="keyword">var</span> A = <span class="num">6378140</span>;
    <span class="keyword">var</span> B = <span class="num">6356755</span>;
    <span class="keyword">var</span> F = (A - B) / A;
 
    <span class="keyword">var</span> P1 = Math.atan((B / A) * Math.tan(lat1));
    <span class="keyword">var</span> P2 = Math.atan((B / A) * Math.tan(lat2));
 
    <span class="keyword">var</span> X = Math.acos(Math.sin(P1) * Math.sin(P2) + Math.cos(P1) * Math.cos(P2) * Math.cos(lng1 - lng2));
    <span class="keyword">var</span> L = (F / <span class="num">8</span>) * ((Math.sin(X) - X) * Math.pow((Math.sin(P1) + Math.sin(P2)), <span class="num">2</span>) / Math.pow(Math.cos(X / <span class="num">2</span>), <span class="num">2</span>) - (Math.sin(X) - X) * Math.pow(Math.sin(P1) - Math.sin(P2), <span class="num">2</span>) / Math.pow(Math.sin(X), <span class="num">2</span>));
 
    distance = A * (X + L);
    <span class="keyword">var</span> decimal_no = Math.pow(<span class="num">10</span>, precision);
    distance = Math.round(decimal_no * distance / <span class="num">1</span>) / decimal_no;   <span class="rem">// kmに変換するときは(1000で割る)</span>
  }
  <span class="keyword">return</span> distance;
}</pre>

<h2>緯度・経度から方向（方角）を計算する</h2>

<pre class="code"><span class="keyword">function</span> geoDirection(lat1, lng1, lat2, lng2) {
  <span class="rem">// 緯度経度 lat1, lng1 の点を出発として、緯度経度 lat2, lng2 への方位</span>
  <span class="rem">// 北を０度で右回りの角度０～３６０度</span>
  <span class="keyword">var</span> Y = Math.cos(lng2 * Math.PI / <span class="num">180</span>) * Math.sin(lat2 * Math.PI / <span class="num">180</span> - lat1 * Math.PI / <span class="num">180</span>);
  <span class="keyword">var</span> X = Math.cos(lng1 * Math.PI / <span class="num">180</span>) * Math.sin(lng2 * Math.PI / <span class="num">180</span>) - Math.sin(lng1 * Math.PI / <span class="num">180</span>) * Math.cos(lng2 * Math.PI / <span class="num">180</span>) * Math.cos(lat2 * Math.PI / <span class="num">180</span> - lat1 * Math.PI / <span class="num">180</span>);
  <span class="keyword">var</span> dirE0 = <span class="num">180</span> * Math.atan2(Y, X) / Math.PI; <span class="rem">// 東向きが０度の方向</span>
  <span class="keyword">if</span> (dirE0 &lt; <span class="num">0</span>) {
    dirE0 = dirE0 + <span class="num">360</span>; <span class="rem">//0～360 にする。</span>
  }
  <span class="keyword">var</span> dirN0 = (dirE0 + <span class="num">90</span>) % <span class="num">360</span>; <span class="rem">//(dirE0+90)÷360の余りを出力 北向きが０度の方向</span>
  <span class="keyword">return</span> dirN0;
}</pre>
-----
EXCERPT:

-----
KEYWORDS:
ジオロケーション, 緯度・経度
-----

COMMENT:
AUTHOR: 匿名
EMAIL: 
IP: 71.202.73.66
URL: 
DATE: 08/17/2012 01:27:04 PM
>緯度・経度から方向（方角）を計算する
ですが、これは球面三角法を利用された、A点からB点への方位角を取得ということですよね?であれば、

[1つめ]
lat, lngが逆のような気がします...。
ご参考：http://kwikwi.cocolog-nifty.com/blog/2005/12/delphi_2_fd2c.html

[2つめ]
最後の、var dirN0 = (dirE0 + 90) % 360; もちょっと違うような気がします...。

方位角とは、( <a href="http://www.jmc.or.jp/faq/map2.html" rel="nofollow">http://www.jmc.or.jp/faq/map2.html</a> より抜粋)
"方位角は、主に測量や地図の分野で使われるやや専門的な用語です。ある地点Aにおいて北（真北）の方向から右回り（時計廻り）に他の地点Bの方向を測った水平角を、AにおけるBの方位角と言います。"

とのことですので、dirE0の時点で既に北向きになっているかと思います。

私の場合はこれで正しく値がとれているようです。間違っていたらすみません。
-----

COMMENT:
AUTHOR: hamasyou
EMAIL: hamasyou@gmail.com
IP: 118.243.67.164
URL: http://hamasyou.com/
DATE: 09/27/2012 11:43:58 AM
ご指摘ありがとうございます！

参考にしたサイトの PHP のコードを JavaScript に直しただけなので、実はあまり理解してなく使ってました。。。

確認に時間がかかりそうなので（理解するのに・・・）ひとまず、御礼だけ。
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [JavaScript] JavaScript のクラス定義のイディオム
BASENAME: javascript
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: JavaScript
CATEGORY: JavaScript
DATE: 09/07/2010 11:32:21 PM
TAGS: JavaScript,クラス定義,無名関数
-----
BODY:
JavaScript でクラス定義するときのメモ。
-----
EXTENDED BODY:
<h2>クラス定義の基本</h2>

JavaScript のクラス定義は function() を使って行う。

<pre class="code"><span class="keyword">var</span> MyClass = <span class="keyword">function</span>(name) {
  <span class="rem">/* ここにプロパティの初期化コードを書く */</span>
  <span class="keyword">this</span>.name = name;
}
 
MyClass.<span class="keyword">prototype</span>.myMethod = <span class="keyword">function</span>() {
  <span class="rem">/* prototype.メソッド名 の形でメソッドを定義する */</span>
  alert(<span class="keyword">this</span>.name);
}
 
<span class="keyword">var</span> obj = <span class="keyword">new</span> MyClass(<span class="str">&quot;hamasyou&quot;</span>);
obj.myMethod();    <span class="rem">// =&gt; &quot;hamasyou&quot;</span>
</pre>

<h2>ネームスペースをつけてクラスを宣言する</h2>

いくつかやり方がありますが、一番素直なやり方で。

<pre class="code"><span class="keyword">var</span> com = {};
<span class="keyword">if</span> (<span class="keyword">typeof</span>(com.hamasyou) == <span class="str">&quot;undefined&quot;</span>) com.hamasyou = {};
(<span class="keyword">function</span>() {
  <span class="keyword">var</span> ns = com.hamasyou;
  ns.MyClass = <span class="keyword">function</span>(name) {
    <span class="rem">/* ここにプロパティの初期化コードを書く */</span>
    <span class="keyword">this</span>.name = name;
  };
  ns.MyClass.<span class="keyword">prototype</span>.myMethod = <span class="keyword">function</span>() {
    <span class="rem">/* ここにメソッドの中身を書く */</span>
    alert(<span class="keyword">this</span>.name);
  };
})();
 
<span class="keyword">var</span> obj = <span class="keyword">new</span> com.hamasyou.MyClass(<span class="str">&quot;hamasyou&quot;</span>);
obj.myMethod();        <span class="rem">// =&gt; &quot;hamasyou&quot;</span>
</pre>

<section>

<h4>ネームスペースあれこれ</h4>

<a href="http://blog.livedoor.jp/dankogai/archives/50754803.html" target="_blank" class="extlink">javascript - ふつうのnamespace - 404 Blog Not Found</a>

<a href="http://d.hatena.ne.jp/onozaty/20070326/p1" target="_blank" class="extlink">[JavaScript]undefine - Enjoy*Study</a>

</section>

<h2>クラス定義もうひとつ</h2>

プロトタイプを上書きして、コンストラクタをプロトタイプに実装する方法。

<a href="http://d.hatena.ne.jp/amachang/20060516/1147778600" target="_blank" class="extlink">JavaScript OOP におけるクラス定義方法 - IT戦記</a>

<pre class="code"><span class="keyword">var</span> com = {};
<span class="keyword">if</span> (<span class="keyword">typeof</span>(com.hamasyou) == <span class="str">&quot;undefined&quot;</span>) com.hamasyou = {};
(<span class="keyword">function</span>() {
  <span class="keyword">var</span> ns = com.hamasyou;
  ns.MyClass = <span class="keyword">function</span>() {
    <span class="keyword">this</span>.initialize.apply(<span class="keyword">this</span>, arguments);
  };
  ns.MyClass.<span class="keyword">prototype</span> = {
    initialize: <span class="keyword">function</span>(name) {
      <span class="keyword">this</span>.name = name;
    },
    myMethod: <span class="keyword">function</span>() {
      <span class="rem">/* ここにメソッドの中身を書く */</span>
      alert(<span class="keyword">this</span>.name);
    }
  };
})();
 
<span class="keyword">var</span> obj = <span class="keyword">new</span> com.hamasyou.MyClass(<span class="str">&quot;hamasyou&quot;</span>);
obj.myMethod();        <span class="rem">// =&gt; &quot;hamasyou&quot;</span>
</pre>
-----
EXCERPT:

-----
KEYWORDS:
JavaScript, クラス設計, コーディングテクニック
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Titanium] Titanium Module Development メモ - その1
BASENAME: titanium_module_development_-_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: iPhone
CATEGORY: Titanium
CATEGORY: iPhone
DATE: 09/10/2010 02:24:24 AM
TAGS: iPhone,"Module Development","Titanium Mobile"
-----
BODY:
Titanium Module Development のメモです。

<h4>参考</h4>

<ul><li><a href="http://d.hatena.ne.jp/donayama/searchdiary?word=*[Titanium]" target="_blank" class="extlink">JP::HSJ::Junknews::HatenaSide</a></li></ul>
-----
EXTENDED BODY:
<h2>Module の種類</h2>

Module として作成できるものは次の通り。

<table>
<tr><th>種類</th><th>説明</th></tr>
<tr><td>Proxy</td><td>ネイティブコード（Objective-C）と JavaScript の橋渡しをするクラス</td></tr>
<tr><td>ViewProxy</td><td>View のレンダリングに対応する Proxy</td></tr>
<tr><td>View</td><td>Titanium で描画できる UI コンポーネントを表すクラス</td></tr>
<tr><td>Module</td><td>Module セットを表すクラス</td></tr>
</table>

Module クラスはモジュールとして提供するパッケージにひとつだけ存在し、Proxy、ViewProxy、View は Module パッケージ内にいくつ存在してもよい。以下、モジュール名を com.hamasyou と定義するものとする。クラス名等のプレフィックスにつく ComHamasyou はモジュール名を表す。

<h2>Proxy</h2>

Proxy クラスは <em>TiProxy</em> を継承して作成する。クラス名を &quot;Module 名 + クラス名 + Proxy&quot; にすることで、JavaScript から次のように呼び出すことができるようになる。例えば、ComHamasyouMyOriginalProxy という名前で Proxyクラスを作成すると次のようになる。

<section>

<h4>JavaScript のコード</h4>

<pre class="code"><span class="keyword">var</span> my_module = <span class="keyword">require</span>(<span class="literal">&quot;com.hamasyou&quot;</span>);
<span class="keyword">var</span> obj = my_module.createMyOriginal({ ... });</pre>

</section>

<section>

<h4>ComHamasyouMyOriginalProxy.h</h4>

<pre class="code"><span class="keyword">#import</span> <span class="literal">&quot;TiProxy.h&quot;</span>
<span class="keyword">@interface</span> ComHamasyouMyOriginalProxy : TiProxy {
}
<span class="keyword">@end</span></pre>

</section>

<section>

<h4>ComHamasyouMyOriginalProxy.m</h4>

<pre class="code"><span class="keyword">#import</span> <span class="literal">&quot;ComHamasyouMyOriginalProxy.h&quot;</span>
<span class="keyword">@implementation</span> ComHamasyouMyOriginalProxy
<span class="keyword">@end</span></pre>

</section>

<h3>Proxy Methods のシグネチャ</h3>

<pre>- (id)methodName:(id)args</pre>

<div class="option"><span style="color: #0000FF">マクロの内容は要確認。Titanium SKD 1.4.0 で内容が変わっているっぽい。。。</span>
args 引数は <em>NSArray</em> になっている。実際に引数がひとつの場合には <em>ENSURE_SINGLE_ITEM(args, type)</em> のマクロを使って単一引数にする。
<em>ENSURE_UI_THREAD</em> etc...</div>

<h3>TiUtils を使ってメソッド引数を型に変換する</h3>

(id)args で受け取った引数は、TiUtils クラスを使って型に変換できる。

<pre class="code"><span class="keyword">#import</span> <span class="literal">&quot;TiUtils.h&quot;</span>
NSInteger f = [TiUtils intValue:args];
NSString *s1 = [TiUtils stringValue:arg];
NSString *s2 = [TiUtils stringValue:@"key" properties:dict def:@"default"];</pre>

<h3>Proxy のプロパティ</h3>

@property を使って Proxy クラスのプロパティを宣言することで、JavaScript からプロパティを参照できる。

<pre>@property (nonatomic, readwrite, assign) NSString *propertyName;</pre>

getter/setter を用意して、任意の処理を追加することもできる。

<pre class="code">- (<span class="keyword">void</span>)setPropertyName:(<span class="keyword">id</span>)value {
}
 
- (<span class="keyword">id</span>)propertyName {
  <span class="keyword">return</span> propertyName;
}</pre>

createMyOriginal コンストラクタメソッドの引数にプロパティを渡した場合、setter メソッドが定義されていれば setter メソッドが、定義されていなければ dynprops という NSDictionary にプロパティが設定される。

<pre class="code"><span class="keyword">var</span> obj = my_module.createMyOriginal({ name: <span class="literal">&quot;hamasyou&quot;</span> });
obj.age = 28;</pre>

設定されたプロパティをコード内で使用する場合には、<em>valueForKey</em>、<em>valueForUndefinedKey</em> を使う。valueForKey は getter から、valueForUndefinedKey は dynprops からそれぞれ値を取り出す。
-----
EXCERPT:

-----
KEYWORDS:
iPhone, Titanium, Objective-C
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Titanium] Titanium Module Development メモ - その2
BASENAME: titanium_module_development_-_2
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: iPhone
CATEGORY: Titanium
CATEGORY: iPhone
DATE: 09/11/2010 10:14:55 AM
TAGS: iPhone,"Module Development","Titanium Mobile"
-----
BODY:
Titanium Module Development のメモその2です。

<h4>参考</h4>

<ul><li><a href="http://d.hatena.ne.jp/donayama/searchdiary?word=*[Titanium]" target="_blank" class="extlink">JP::HSJ::Junknews::HatenaSide</a></li></ul>

-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

<h2>Titanium の基本クラスを拡張する</h2>

Titanium の Module をつくる方法は基本的には次のドキュメントを理解すればよい。

<section>

<h4>Titanium Module SDK for iPhone/iPad</h4>

<a href="http://developer.appcelerator.com/doc/mobile/iphone/module_sdk" target="_blank" class="extlink">Titanium Module SDK for iPhone/iPad - Appcelerator</a>

</section>

既存のクラス、例えば TiUIWebView を継承して独自クラスを作成したい場合の手順を以下にメモ。（ほとんどは上の Titanium Module SDK の PDF の内容のままですが。）

<h2>手順</h2>

<ol>
<li>モジュール作成環境を整える</li>
<li>モジュールを生成する</li>
<li>既存クラスを継承する</li>
</ol>

<h2>モジュール作成環境を整える</h2>

モジュール作成に必要な環境は次の通り。

<section>

<h4>必要環境</h4>

<dl>
<dt>Intel Base の Mac OSX 10.5 以上</dt><dd></dd>
<dt>XCode 3.2 以上</dt><dd></dd>
<dt>iOS 4.0 SDK 以上</dt><dd></dd>
<dt>Titanium 1.4 Mobile SDK 以上</dt><dd></dd>
</dl>

iPhone アプリ開発を Titanium でやろうとしているひとは、おそらく環境は整っているかと。

</section>

<h3>titanium コマンドが通るようにする</h3>

ターミナルから titanium コマンドが通るようにする。.bash_profile、.bashrc、.zshrc などの自分の使っているシェルの設定ファイルに次の一行を加える。

<pre>alias titanium='/Library/Application\ Support/Titanium/mobilesdk/osx/1.4.0/titanium.py'</pre>

<strong>Titanium 1.4 Mobile SDK</strong> 以外のバージョンを使っている場合は、osx/1.4.0 のところを適宜読み替える。

記述が終わったらファイルを保存して、設定を再読込する。

<pre class="console">[hamasyou]$ <kbd>source ~/.bash_profile</kbd></pre>

titanium コマンドが実行できることを確認する。

<pre class="console">[hamasyou]$ <kbd>titanium</kbd>
Appcelerator Titanium
Copyright (c) 2010 by Appcelerator, Inc.
 
commands:
 
  create      - create a project
  run         - run an existing project
  help        - get help
</pre>

<h2>モジュールを生成する</h2>

titanium create コマンドを使って新規モジュールを作成する。

<pre class="console">[hamasyou]$ <kbd>titanium create --platform=iphone --type=module --name=MyWebView --id=com.hamasyou</kbd>
Appcelerator Titanium XCode templates installed
Created iphone module project
</pre>

iPhone 用のモジュールを作成するので、 --platform には iphone を指定する。作るのはモジュールなので --type には module を指定、--name にはモジュールの名前を指定し、--id にはモジュールのIDを指定する。

コマンドが成功すると、--name で指定した名前のディレクトリが作成されているはず。ディレクトリの中に、mywebview.xcodeproj という XCode のプロジェクトが作成されているはずなので、XCode で開く。ターミナルで open mywebview.xcodeproj とすれば開ける。

<section>

<h3>XCode で環境が「Base SDK Missing」となっている場合</h3>

iOS SDK を4.1にバージョンアップした場合、titanium コマンドで作成した XCode のプロジェクトテンプレートの SDK のバージョンと一致せずに Base SDK Missing となっている場合がある。

その場合、「プロジェクト - プロジェクト設定を編集」を開いて、「ベースSDK」の値を 「iOS デバイス 4.1」に変更するとよい。

<img alt="スクリーンショット（2010-09-11 10.47.15）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-11%2010.47.15%EF%BC%89.png" width="693" class="mt-image-none" style="" />

</section>

ここまでできたら、一度モジュールをビルドしてみる。ターミナルで次のコマンドを実行する。

<pre class="console">[hamasyou]$ <kbd>titanium run</kbd>
[DEBUG] Build settings from command line:
[DEBUG] PLATFORM_NAME = iphoneos
[DEBUG] SDKROOT = /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.1.sdk
[DEBUG] === BUILD NATIVE TARGET mywebview OF PROJECT mywebview WITH CONFIGURATION Release ===
[DEBUG] Check dependencies
[DEBUG] ProcessPCH /var/folders/ms/msSj36DoHze872qn4jHjxE+++TI/-Caches-/com.apple.Xcode.501/SharedPrecompiledHeaders/ComHamasyou_Prefix-eliigzwlyyxsppgxalaxmfcmkzcw/ComHamasyou_Prefix.pch.gch ComHamasyou_Prefix.pch normal armv6 objective-c com.apple.compilers.gcc.4_2
[DEBUG] cd /Users/hamasyou/Documents/Temp/MyWebView
[DEBUG] setenv LANG en_US.US-ASCII
...(中略)
[INFO] [object ComHamasyouModule] loaded
[DEBUG] loading: /var/folders/ms/msSj36DoHze872qn4jHjxE+++TI/-Tmp-/mLtELnQti/mywebview/Resources/com.hamasyou.js, resource: var/folders/ms/msSj36DoHze872qn4jHjxE+++TI/-Tmp-/mLtELnQti/mywebview/Resources/com_hamasyou_js
[INFO] module is => [object ComHamasyouModule]
[DEBUG] application booted in 23.256958 ms
</pre>

しばらく待つと iPhone シミュレータが起動し、真っ白の画面が表示されるはず。ターミナル中に次の行があることを確認し、これが表示されていればモジュールは実行出来ている。

<pre>[INFO] module is => [object ComHamasyouModule]</pre>

<img alt="スクリーンショット（2010-09-11 10.54.53）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-11%2010.54.53%EF%BC%89.png" width="414" height="770" class="mt-image-none" style="" />

<h2>既存クラスを継承する</h2>

<h3>View クラスを作成する</h3>

独自の View モジュールを作成する。XCode で「ファイル - 新規ファイル...」を選択し、TiUIView テンプレートを選択して、View クラスを作成する。

ファイル名は「<em>モジュール名 + クラス名 + View</em>」という規約で作成する必要がある。今回は、ComHamasyouMyWebView.m と入力した。ファイルの保存場所を Classes 以下にし忘れないようにして View クラスを作成する。

<img alt="スクリーンショット（2010-09-11 10.56.29）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-11%2010.56.29%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<img alt="スクリーンショット（2010-09-11 10.58.12）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-11%2010.58.12%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<h3>ComHamasyouMyWebView に TiUIWebView を継承させる</h3>

作成した ComHamasyouMyWebView.h を開き、#import "TiUIWebView.h" を追加し、TiUIWebView を継承する。このとき、#import "TiUIView.h" を削除しないようにする。<em>TiUIView.h をインポートしていないと、なぜか TiUIWebView を解決できなかったので注意。</em>

<section>

<h4>ComHamasyouMyWebView.h</h4>

<pre class="code"><span class="keyword">#import</span> <span class="literal">&quot;TiUIView.h&quot;</span>
<span class="keyword">#import</span> <span class="literal">&quot;TiUIWebView.h&quot;</span>
 
<span class="keyword">@interface</span> ComHamasyouMyWebView : TiUIWebView {
 
<span class="keyword">@private</span>
 
}
 
<span class="keyword">@end</span></pre>

</section>

<h3>ViewProxy クラスを作成する</h3>

Objective-C のコードと JavaScript のコードを橋渡しする Proxy クラスを作成する。「ファイル - 新規ファイル」から TiViewProxy を選択する。

<img alt="スクリーンショット（2010-09-11 11.05.46）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-11%2011.05.46%EF%BC%89.png" width="693" class="mt-image-none" style="" />

ファイル名は View と同じように「<em>モジュール名 + クラス名 + ViewProxy</em>」とする必要がある。今回は、ComHamasyouMyWebViewProxy とした。保存場所を Classes 以下にすることを忘れずに。

<img alt="スクリーンショット（2010-09-11 11.06.02）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-11%2011.06.02%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<img alt="スクリーンショット（2010-09-11 11.08.13）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-11%2011.08.13%EF%BC%89.png" width="506" height="388" class="mt-image-none" style="" />

<h3>example/app.js を変更して、作ったモジュールをテストする</h3>

example/app.js を開き、次のように書き換える。

<pre class="code"><span class="rem">// open a single window</span>
<span class="keyword">var</span> window = Ti.UI.createWindow({
  backgroundColor:<span class="str">'white'</span>
});
 
<span class="keyword">var</span> myModule = require(<span class="str">'com.hamasyou'</span>);
Ti.API.info(<span class="str">&quot;module is =&gt; &quot;</span> + myModule);
 
<span class="keyword">var</span> myWebView = myModule.createMyWebView({
  url: <span class="str">&quot;http://hamasyou.com/&quot;</span>
});
window.add(myWebView);
 
window.open();</pre>

ここまでできたら、再度 titanium run コマンドを実行してみる。iPhone シミュレータ上で Web ページが表示されれば無事に、TiUIWebView　を継承した自分のモジュールが呼び出されている。

<img alt="スクリーンショット（2010-09-11 11.11.53）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-11%2011.11.53%EF%BC%89.png" width="414" height="770" class="mt-image-none" style="" />

あとは、好きなように拡張していけばよい。
-----
EXCERPT:

-----
KEYWORDS:
iPhone, Titanium, クラス設計, Objective-C
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Mac で Command+Q でアプリケーションを閉じないようにする方法
BASENAME: mac_commandq
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: TechMemo
DATE: 09/14/2010 11:39:25 AM
TAGS: Mac,キーボードショートカット
-----
BODY:
Mac のショートカットに、Command + Q でアプリケーションを閉じるというのがあります。多くのアプリでは、Command + W でウィンドウを閉じるので、ブラウザを使っている時なんかに間違って Command + Q を押してしまって「アプリケーション閉じちゃった・・・」となる場面が多々あります。（僕だけ！？）

それを防ぐ方法です。

<ol><li>「システム環境設定」を開く</li>
<li>「キーボード」-「キーボードショートカット」を開く</li>
<li>「+」ボタンをクリックする</li>
<li>「アプリケーション」に設定したいアプリケーションを選択する</li>
<li>「メニュータイトル」に「アプリケーション名 + " " + "を終了"」と入力する（例）Google Chrome を終了</li>
<li>「キーボードショートカット」に Command + Q 以外のショートカットを割り当てる</li>
</ol>

メニュータイトルのところが肝で、これは、アプリケーションの終了コマンドのメニュータイトルと一致させる必要があります。ほとんどのアプリケーションが「アプリケーション名」+ 「空白」+「を終了」になっているはずです。

<img alt="スクリーンショット（2010-09-14 11.43.39）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-14%2011.43.39%EF%BC%89.png" width="447" height="221" class="mt-image-none" style="" />
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Mac, キーボードショートカット
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Titanium] Titanium 版 XML2JSON - XML を JSON に変換する
BASENAME: titanium_xml2json_-_xml_json
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: iPhone
CATEGORY: Titanium
CATEGORY: iPhone
DATE: 09/15/2010 01:39:50 AM
TAGS: iPhone,"Titanium Mobile",XML2JSON
-----
BODY:
<s>Titanium は、JavaScript でコードがかけると言っても色々と制約があり、<em>eval()</em> を使うようなライブラリは使用できません。</s>

<section>

<h4>2013/02/28追記</h4>

dom2json に渡すオブジェクトを dom.documentElement に変更しました。dom を直接渡すと、Android でエラーが発生することがあります。

<h4>2011/01/18追記</h4>

Titanium.include("TiDOMParser.js") だと実機のほうでエラーが発生するという報告を頂いたので、TiDomParser に変更しました。合わせて、プログラム中の TiDOMParser を TiDomParser に変更しました。ご報告ありがとうございました。

<h4>2010/09/15追記</h4>

<em>eval()</em> が使えないと書きましたが、使えることが判明しました。。。KitchenSink のサンプルにもありました。。 僕の環境で動かないと思っていたのは、eval("1+1"); と試していたからで、eval() の中はコードになるので正確にはセミコロンが必要で、eval("1+1;"); としないとダメでした。。訂正です。。

</section>

XML を JSON にするライブラリに、<a href="http://www.thomasfrank.se/xml_to_json.html" target="_blank" class="extlink">XML to JSON</a> というライブラリがありますが、<s>内部で eval を使っているため動きません。</s>（中身を書き換えれば動きそうですね。。）

そこで、DOM から JSON に変換する <a href="http://www.kawa.net/works/js/xml/objtree.html" target="_blank" class="extlink">XML.ObjTree</a> というライブラリを元に、Titanium 上で XML を JSON に変換するライブラリを作ってみました。

ライセンスとか気にしたつもりですが、ObjTree のライセンスに引っかかるとかあればご連絡ください。すぐに対応します。
-----
EXTENDED BODY:
<h2>Titanium で XML を JSON に変換する</h2>

Titanium 上で XML を JSON に変換するには次のような手順を踏みます。

<ol><li>XML 文字列を <em>Titanium.XML.parseString()</em> を使って DOM に変換する</li>
<li>DOM を本ライブラリを使ってパースし、JSON に変換する</li></ol>

もともと、<a href="http://www.kawa.net/works/js/xml/objtree.html" target="_blank" class="extlink">XML.ObjTree</a> というライブラリを使う予定でしたが、<em>Titanium.XML.parseString()</em> で得られるオブジェクトは純粋な DOM ではなく、<strong>TiDOMDocument</strong> というオブジェクトのため ObjTree をそのままでは使えませんでした。

そこで、一部修正して、内部で TiDOMDocument を処理できるようにしてみました。使い方は次の通り。

<pre class="code">Titanium.include(<span class="str">&quot;TiDomParser.js&quot;</span>);
<span class="keyword">var</span> parser = <span class="keyword">new</span> com.hamasyou.XML.TiDomParser();
<span class="keyword">var</span> dom = Titanium.XML.parseString(xml);
<span class="keyword">var</span> json = parser.dom2Json(dom.documentElement);</pre>

バグやおかしな点があれば、コメントください。

<h4>Download</h4>

<ul><li><a href="http://hamasyou.com/blog/archives/misc/TiDomParser.js">TiDomParser.js</a></li></ul>

<h2>ソースコード全文</h2>

<h4>TiDomParser.js</h4>

<pre class="code"><span class="rem">/**
 * @author hamasyou
 * Copyright (C) 2010 hamasyou, INC. All Rights Reserved.
 * 
 * @License:
 * This program is free software; you can redistribute it 
 * and/or modify it under the Artistic license.
 * Or whatever license I choose, which I will do instead of
 * keeping this documentation like it is.
 * 
 * @See http://www.kawa.net/works/js/xml/objtree.html - ObjTree.js
 */</span>
<span class="keyword">var</span> com = {};
<span class="keyword">if</span> (<span class="keyword">typeof</span>(com.hamasyou) == <span class="str">&quot;undefined&quot;</span>) com.hamasyou = {};
<span class="keyword">if</span> (<span class="keyword">typeof</span>(com.hamasyou.XML) == <span class="str">&quot;undefined&quot;</span>) com.hamasyou.XML = {};
(<span class="keyword">function</span>() {
  <span class="keyword">var</span> Node = {
    ELEMENT_NODE: <span class="num">1</span>,
    ATTRIBUTE_NODE: <span class="num">2</span>,
    TEXT_NODE: <span class="num">3</span>,
    CDATA_SECTION_NODE: <span class="num">4</span>,
    ENTITY_REFERENCE_NODE: <span class="num">5</span>,
    ENTITY_NODE: <span class="num">6</span>,
    PROCESSING_INSTRUCTION_NODE: <span class="num">7</span>,
    COMMENT_NODE: <span class="num">8</span>,
    DOCUMENT_NODE: <span class="num">9</span>,
    DOCUMENT_TYPE_NODE: <span class="num">10</span>,
    DOCUMENT_FRAGMENT_NODE: <span class="num">11</span>,
    NOTATION_NODE: <span class="num">12</span>
  };
  
  <span class="keyword">var</span> ns = com.hamasyou.XML;
  ns.TiDomParser = <span class="keyword">function</span>() {
    <span class="keyword">this</span>.initialize.apply(<span class="keyword">this</span>, arguments);
  };
  ns.TiDomParser.<span class="keyword">prototype</span> = {
    initialize: <span class="keyword">function</span>() {
    },
    
    dom2Json: <span class="keyword">function</span>(root) {
      <span class="keyword">this</span>.__force_array = {};
      <span class="keyword">if</span> (<span class="keyword">this</span>.force_array) {
        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="num">0</span>; i &lt; <span class="keyword">this</span>.force_array.length; i++) {
          <span class="keyword">this</span>.__force_array[<span class="keyword">this</span>.force_array[i]] = <span class="num">1</span>;
        }
      }
      
      <span class="keyword">var</span> json = <span class="keyword">this</span>._parseElement(root); <span class="rem">// parse root node</span>
      <span class="keyword">if</span> (<span class="keyword">this</span>.__force_array[root.nodeName]) {
        json = [json];
      }
      <span class="keyword">if</span> (root.nodeType != Node.DOCUMENT_FRAGMENT_NODE) {
        <span class="keyword">var</span> tmp = {};
        tmp[root.nodeName] = json; <span class="rem">// root nodeName</span>
        json = tmp;
      }
      <span class="keyword">return</span> json;
    },
    
    _parseElement: <span class="keyword">function</span>(elem) {
      <span class="keyword">if</span> (elem.nodeType == Node.COMMENT_NODE) {
        <span class="keyword">return</span>;
      }
      
      <span class="keyword">if</span> (elem.nodeType == Node.TEXT_NODE || elem.nodeType == Node.CDATA_SECTION_NODE) {
        <span class="keyword">var</span> bool = elem.text.match(/[^\x00-\x20\u00A0]/);
        <span class="keyword">if</span> (bool == <span class="keyword">null</span>) <span class="keyword">return</span>; <span class="rem">// ignore white spaces</span>
        <span class="keyword">return</span> elem.text;
      }
      
      <span class="keyword">var</span> retval;
      <span class="keyword">var</span> cnt = {};
      <span class="rem">//  parse attributes</span>
      <span class="keyword">if</span> (elem.attributes &amp;&amp; elem.attributes.length) {
        retval = {};
        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="num">0</span>, len = elem.attributes.length; i &lt; len; i++) {
          <span class="keyword">var</span> key = elem.attributes.item(i).nodeName;
          <span class="keyword">if</span> (<span class="keyword">typeof</span>(key) != <span class="str">&quot;string&quot;</span>) <span class="keyword">continue</span>;
          <span class="keyword">var</span> val = elem.attributes.item(i).nodeValue;
          <span class="keyword">if</span> (!val) <span class="keyword">continue</span>;
          <span class="keyword">if</span> (<span class="keyword">typeof</span>(cnt[key]) == <span class="str">&quot;undefined&quot;</span>) cnt[key] = <span class="num">0</span>;
          cnt[key]++;
          <span class="keyword">this</span>._addNode(retval, key, cnt[key], val);
        }
      }
      
      <span class="rem">//  parse child nodes (recursive)</span>
      <span class="keyword">if</span> (elem.childNodes &amp;&amp; elem.childNodes.length) {
        <span class="keyword">var</span> textonly = <span class="keyword">true</span>;
        <span class="keyword">if</span> (retval) textonly = <span class="keyword">false</span>; <span class="rem">// some attributes exists</span>
        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="num">0</span>, len = elem.childNodes.length; i &lt; len &amp;&amp; textonly; i++) {
          <span class="keyword">var</span> ntype = elem.childNodes.item(i).nodeType;
          <span class="keyword">if</span> (ntype == Node.TEXT_NODE || ntype == Node.CDATA_SECTION_NODE) <span class="keyword">continue</span>;
          textonly = <span class="keyword">false</span>;
        }
        <span class="keyword">if</span> (textonly) {
          <span class="keyword">if</span> (!retval) retval = <span class="str">&quot;&quot;</span>;
          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="num">0</span>, len = elem.childNodes.length; i &lt; len; i++) {
            retval += elem.childNodes.item(i).text;
          }
        } <span class="keyword">else</span> {
          <span class="keyword">if</span> (!retval) retval = {};
          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="num">0</span>, len = elem.childNodes.length; i &lt; len; i++) {
            <span class="keyword">var</span> key = elem.childNodes.item(i).nodeName;
            <span class="keyword">if</span> (<span class="keyword">typeof</span>(key) != <span class="str">&quot;string&quot;</span>) <span class="keyword">continue</span>;
            <span class="keyword">var</span> val = <span class="keyword">this</span>._parseElement(elem.childNodes.item(i));
            <span class="keyword">if</span> (!val) <span class="keyword">continue</span>;
            <span class="keyword">if</span> (<span class="keyword">typeof</span>(cnt[key]) == <span class="str">&quot;undefined&quot;</span>) cnt[key] = <span class="num">0</span>;
            cnt[key]++;
            <span class="keyword">this</span>._addNode(retval, key, cnt[key], val);
          }
        }
      }
      <span class="keyword">return</span> retval;
    },
    
    _addNode: <span class="keyword">function</span>(hash, key, cnts, val) {
      <span class="keyword">if</span> (<span class="keyword">this</span>.__force_array[key]) {
        <span class="keyword">if</span> (cnts == <span class="num">1</span>) hash[key] = [];
        hash[key][hash[key].length] = val; <span class="rem">// push</span>
      } <span class="keyword">else</span> <span class="keyword">if</span> (cnts == <span class="num">1</span>) { <span class="rem">// 1st sibling</span>
        hash[key] = val;
      } <span class="keyword">else</span> <span class="keyword">if</span> (cnts == <span class="num">2</span>) { <span class="rem">// 2nd sibling</span>
        hash[key] = [hash[key], val];
      } <span class="keyword">else</span> { <span class="rem">// 3rd sibling and more</span>
        hash[key][hash[key].length] = val;
      }
    }
  };
  
  ns.TiDomParser.VERSION = <span class="num">0.1</span>;
})();</pre>
-----
EXCERPT:

-----
KEYWORDS:
iPhone, Titanium, JavaScript, JSON
-----

COMMENT:
AUTHOR: JUSTIN
EMAIL: 
IP: 121.1.132.46
URL: 
DATE: 02/28/2013 05:16:16 PM
IOSはうまく使えますが、アンドロイドの方は「uncaught error : java exception occurred」というエラーが出ていまして、TiDomParser.jsのelem.attributes.lengthが問題のようですが、何が解決道ご存知でしたら、教えて頂けませんか？
-----

COMMENT:
AUTHOR: 管理人
EMAIL: 
IP: 110.4.176.29
URL: 
DATE: 02/28/2013 06:25:21 PM
お問い合わせありがとうございます。
dom2json に渡すオブジェクトを、dom ではなく、dom.documentElement に変更してみてください。
これで Android でも動作するはずです。

記事、変更しました。
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Mac OS X で Windows アプリケーションを動かす WineBottler
BASENAME: mac_os_x_windows_winebottler
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Mac OS X
CATEGORY: Mac OS X
DATE: 09/20/2010 12:07:17 AM
TAGS: "Boot Camp","Mac OS X",VMWare,"Windows アプリ"
-----
BODY:
Mac OS X 上で Windows アプリケーションを動かす <em><a href="http://winebottler.kronenberg.org/" target="_blank" class="extlink">WineBottler</a></em> なるものを発見しました。

このアプリケーションを使うと、Windows OS を持っていなくても、VMWare や Boot Camp をもっていなくても、Windows アプリケーションを Mac OS X 上で動かすことができるようです。

Web サイトを Mac で Windows の IE の表示確認をするために使ったので、そのメモです。WineBottler をもっと使いこなすには他のサイトを確認してみてください。

<section>

<h4>WineBottler を使いこなすための参考サイト</h4>

<ul><li><a href="http://www.lifehacker.jp/2010/01/100110_winebottlerwindowsos_x.html" target="_blank" class="extlink">『WineBottler』でWindowsのプログラムをスタンドアローン化し、OS Xアプリに - lifehacker</a></li>
<li><a href="http://www.moongift.jp/2010/01/winebottler/" target="_blank" class="extlink">Windows用ソフトウェアをあたかもMac OSXソフトウェアのように変換する - MOONGIFT</a></li>
</ul>

</section>
-----
EXTENDED BODY:
<h2>インストール</h2>

<h3>必要環境とインストール方法</h3>

<strong>WineBottler</strong> は Intel Mac の OS X で動作します。

<a href="http://winebottler.kronenberg.org/" target="_blank" class="extlink">WineBottler run windows apps on OS X</a> から バイナリファイルをダウンロードします。

<img alt="スクリーンショット（2010-09-20 0.22.49）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-20%200.22.49%EF%BC%89.png" width="693" class="mt-image-none" style="" />

[download] リンクをクリックして dmg ファイルをダウンロードします。本記事執筆時は、WineBottlerCombo_1.1.44.dmg が最新でした。

dmg ファイルをマウントして、<em>Wine.app</em> と <em>WineBottler.app</em> を Applications フォルダにドラッグします。

<img alt="スクリーンショット（2010-09-20 0.25.14）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-20%200.25.14%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<dl>
<dt>Wine.app</dt>
<dd><p>Windows アプリケーションを Mac OS X 上で動かすためのアプリケーションです。</p>

<p>インストールした Windows アプリケーションを起動することができます。ファイルマネージャやコマンドプロンプト、レジストリをいじったりもできるようです。</p>

<p>起動するとメニューエクストラに常駐します。</p>
</dd>
<dt>WineBottler.app</dt>
<dd><p>Wine で動かすアプリケーションの管理アプリケーションです。Windows アプリケーションをインストールしたりアプリケーションを起動したりできます。</p>
</dd>
</dl>

<h2>Mac OS X で Windows IE を動かす</h2>

インストールしたら、WineBottler.app を起動します。

[Install Predefined Prefixes] タブを開くと、デフォルトで用意されている Windows アプリケーションの一覧が表示されます。

<img alt="スクリーンショット（2010-09-20 0.33.37）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-20%200.33.37%EF%BC%89.png" width="693" class="mt-image-none" style="" />

Microsoft Internet Explorer 7 を選択して、[Install] ボタンをクリックします。

インストール先を入力して、あとはウィザードに沿ってインストールします。

インストールが完了すると、選択したインストール先ディレクトリに Microsoft Internet Explorer 7.app ができるので、起動します。

<img alt="スクリーンショット（2010-09-20 0.35.29）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-20%200.35.29%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<img alt="スクリーンショット（2010-09-20 0.54.54）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-20%200.54.54%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<h2>WineBottler でデフォルト以外の Windows アプリケーションをインストールする</h2>

<h3>Windows 版 Firefox をインストールする</h3>

<p class="option">完全にオリジナルのアプリケーションをインストールするには、他の参考サイトを確認してみてください。ここでは、Wine に認識されているアプリケーションの中からのインストール方法になります。</p>

WineBottler の [Create Custome Prefixes] タブを開きます。

[Winetricks] から firefox を選択して [Install] ボタンをクリックします。

インストール先を聞かれるので、インストール先を入力してあとはウィザードにしたがってインストールを実行します。

<img alt="スクリーンショット（2010-09-20 10.48.18）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-20%2010.48.18%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<p class="option">たぶんオリジナルの Windows アプリケーションをインストールするには、[Install File] にインストールしたいアプリケーションを入力して Install するんだと思いますが、未確認です。。</p>

あとは、起動するだけです。

<img alt="スクリーンショット（2010-09-20 0.48.31）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-20%200.48.31%EF%BC%89.png" width="693" class="mt-image-none" style="" />
-----
EXCERPT:

-----
KEYWORDS:
Mac OS X,WineBottler, Windowsアプリを動かす
-----

COMMENT:
AUTHOR: Libera
EMAIL: rio0410maple@yahoo.co.jp
IP: 142.134.21.136
URL: 
DATE: 10/31/2012 08:34:32 AM
[Mac OS X で Windows IE を動かす]で"Microsoft Internet Explorer 7 を選択して、[Install] ボタンをクリックします。インストール先を入力して、あとはウィザードに沿ってインストールします。"とありますが、完全にインストールされる前に "X11"と"コンソール"というものがでてきてしまいます。開いてみてもよくわからない記載ばかりです。この二つが出るのと同時に[Prefix creation with error] You find a logfile to help with debugging on your desktop.　とも出てきます。　どうすればインストールを完了することができますか？

-----

COMMENT:
AUTHOR: Libera
EMAIL: rio0410maple@yahoo.co.jp
IP: 142.134.21.136
URL: 
DATE: 10/31/2012 08:43:05 AM
[Mac OS X で Windows IE を動かす]で"Microsoft Internet Explorer 7 を選択して、[Install] ボタンをクリックします。インストール先を入力して、あとはウィザードに沿ってインストールします。"とありますが、完全にインストールされる前に "X11"と"コンソール"というものがでてきてしまいます。開いてみてもよくわからない記載ばかりです。この二つが出るのと同時に[Prefix creation with error] You find a logfile to help with debugging on your desktop.　とも出てきます。　どうすればインストールを完了することができますか？

-----

COMMENT:
AUTHOR: aaaka
EMAIL: charlottedunois154@yahoo.co.jp
IP: 110.0.155.154
URL: 
DATE: 03/03/2013 11:02:36 PM
僕もなった
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [TextMate] よく使うショートカット
BASENAME: textmate
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: TechMemo
DATE: 09/23/2010 02:46:39 PM
TAGS: TextMate,ショートカット
-----
BODY:
TextMate でよく使うショートカットのメモです。自分用。
-----
EXTENDED BODY:
<h2>キーボード修飾キー</h2>

<table>
  <tr><th>修飾キー</th><th>意味</th></tr>
  <tr><td>⌘</td><td>コマンドキー（Command(Cmd)）</td></tr>
  <tr><td>⇧</td><td>シフトキー（Shift）</td></tr>
  <tr><td>⌥</td><td>オプションキー（Option(Alt)）</td></tr>
  <tr><td>⌃</td><td>コントロールキー（Control(Ctrl)）</td></tr>
  <tr><td>⎋</td><td>エスケープキー（Escape(Esc)）</td></tr>
  <tr><td>⇥</td><td>タブキー（Tab）</td></tr>
</table>

<h2>TextMate ショートカット</h2>

個人的によく使うショートカットのまとめ。

<h3>Text Editing</h3>

<h4>移動、選択</h4>

<table>
  <tr><th>キー</th><th>説明</th></tr>
  <tr><td>⌘ + ↑</td><td>ドキュメントの最初に移動する</td></tr>
  <tr><td>⌘ + ↓</td><td>ドキュメントの最後に移動する</td></tr>
  <tr><td>⌘ + t</td><td>同一プロジェクト内のファイルに移動する</td></tr>
  <tr><td>⌃ + p</td><td>一行上に移動する</td></tr>
  <tr><td>⌃ + n</td><td>一行↓に移動する</td></tr>
  <tr><td>⌃ + f</td><td>一文字右に移動する</td></tr>
  <tr><td>⌃ + b</td><td>一文字左に移動する</td></tr>
  <tr><td>⌃ + a</td><td>行の先頭に移動する</td></tr>
  <tr><td>⌃ + e</td><td>行の最後に移動する</td></tr>
  <tr><td>⌃ + v</td><td>1ページ下に移動する</td></tr>
  <tr><td>⌃ + w</td><td>1ワード選択する</td></tr>
  <tr><td>⌘ + ⇧ + l</td><td>一行選択する</td></tr>
</table>

<h4>編集</h4>

<table>
  <tr><th>キー</th><th>説明</th></tr>
  <tr><td>⌘ + リターン</td><td>その場で改行せずに、行の最後で改行する</td></tr>
  <tr><td>⌃ + d</td><td>一文字削除する</td></tr>
  <tr><td>⌃ + k</td><td>一行削除する</td></tr>
  <tr><td>⌃ + ⇧ + &lt;</td><td>直前の単語を&lt;&gt;で囲む</td></tr>
</table>

<h3>TODO リスト</h3>

ソースコードのコメント行に、TODO、FIXME、CHANGED のキーワードを指定しておくと、「⌃ + ⇧ + t」で TODO リストを表示したときに表示されるようになる。

<pre>#TODO これは TODO
#FIXME これは FIXME
#CHANGED これは CHANGED</pre>

<img alt="スクリーンショット（2010-09-23 15.35.50）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-09-23%2015.35.50%EF%BC%89.png" width="693" height="632" class="mt-image-none" style="" />

<h3>Bundle については一杯ありすぎて・・・</h3>

使いこなせてません。。。
-----
EXCERPT:

-----
KEYWORDS:
TextMate, ショートカット
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [JavaScript] JavaScript の変数宣言のスコープ
BASENAME: javascript_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: JavaScript
CATEGORY: JavaScript
DATE: 09/24/2010 10:57:37 AM
TAGS: JavaScript
-----
BODY:
JavaScript で忘れがちな変数宣言に関してのメモ。
-----
EXTENDED BODY:
<h2>変数の宣言</h2>

<h3>変数宣言は関数のどこでしても関数の先頭から有効</h3>

変数を宣言せずに使用すると "変数" is not defined と怒られます。

<pre class="code">alert(hoge);
<span class="rem">// =&gt; hoge is not defined</span></pre>

使用する場所よりも後で宣言していると <em>undefined</em> となります。

宣言はされていても、初期化されていないということです。

<pre class="code">alert(hoge);
 
<span class="keyword">var</span> hoge = <span class="str">&quot;Hello World&quot;</span>;
<span class="rem">// =&gt; undefined</span></pre>

宣言は関数のどこでしても有効になるが、初期化や代入は宣言順になります。

<h3>変数宣言は同一関数内のすべての場所で有効</h3>

if 文や for ループの中で変数を宣言しても、やっぱり関数の先頭で宣言したこととになります。

if 文で条件が一致しない場合の方で宣言していても有効になる。（undefined なのは宣言はされているが初期化されていないからです。）

<pre class="code">alert(hoge);
 
if (0) {
  <span class="keyword">var</span> hoge = <span class="str">&quot;Hello World&quot;</span>;
}
<span class="rem">// =&gt; undefined</span></pre>

<h3>関数がネストされているところで宣言されるのはだめ</h3>

関数の中で関数を宣言して、そこで変数を宣言してもダメ。同一の関数内でのみ変数宣言は有効になります。

<pre class="code">(<span class="keyword">function</span>() {
  alert(hoge);
  (<span class="keyword">function</span>() {
    <span class="keyword">var</span> hoge = <span class="str">&quot;Hello World&quot;</span>;
  })();
})();
<span class="rem">// =&gt; hoge is not defined</span></pre>

<h3>まとめ: 変数宣言は関数の最初に行う</h3>

変数宣言は関数の最初にまとめて行うのがよさそうです。
-----
EXCERPT:

-----
KEYWORDS:
JavaScript, 変数, スコープ
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Dropbox] .app ファイルを共有すると動かなくなる
BASENAME: dropbox_app
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: TechMemo
DATE: 09/25/2010 01:14:19 PM
TAGS: Dropbox
-----
BODY:
<strong>Dropbox</strong> で .app ファイルを共有すると、転送先で動かなくなるという現象が発生したので、解決方法のメモです。
-----
EXTENDED BODY:
<h2>Dropbox で .app ファイルを共有すると、実行権限が外れる</h2>

<a href="https://www.dropbox.com/" target="_blank" class="extlink">Dropbox</a> で他人とフォルダを共有し、アプリケーションを共有する場合があるかと思います。

Mac 限定だと思いますが、.app を直接フォルダに置いておくと、Dropbox が実行権限を削除してしまい、コンソールに下のようなエラーが発生します。

<pre>posix_spawn(&quot;実行したファイル名&quot;): Permission denied</pre>

Mac のアプリケーション .app は、実行ファイルのように見えてディレクトリになっていて、.app ディレクトリの下に Contents/MacOS/実際の実行ファイル というふうになっています。

この MacOS ディレクトリの下にある実際の実行ファイルの実行権限が Dropbox で共有を行うと外れてしまうようです。

<h3>対処法</h3>

Terminal を開いて、.app/Contents/MacOS ディレクトリに移動して、 chmod +x ファイル名 を行えば実行出来るようになります。

または、.app の形で直接置かなければよいので、Zip で固めてディレクトリに置くのもよいでしょう。
-----
EXCERPT:

-----
KEYWORDS:
Dropbox, .app, Mac
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Objective-C] retain と release の関係について
BASENAME: objective-c_retain_release
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Objective-C
CATEGORY: Objective-C
DATE: 10/12/2010 08:13:07 AM
TAGS: Objective-C,メモリ管理
-----
BODY:
Objective-C ではガーベージコレクション機能が用意されていますが、iPhone アプリ開発などではメモリ管理をガーベージコレクションに任せずに自分で管理する必要があったりします。

メモリ管理のルールとして、自分でメモリを割り当てたものは自分で開放する、自分で retain をしたものは 自分で release するなど、いくつかルールがあるのでそのメモです。
-----
EXTENDED BODY:
<h2>retain と release についてのメモ</h2>

<h3>init〜 で始まるメソッドで確保したオブジェクトは release する必要がある</h3>

Objective-C のオブジェクト初期化メソッドのルールに、<em>init〜</em> で始まるメソッドで確保したオブジェクトは自身で解放する必要がある、というものがあります。

例えば次の例のような場合は、自分で責任をもって <em>release</em> する必要があります。

<pre class="code"><span class="class">NSMutableArray</span> *array = [[<span class="class">NSMutableArray</span> alloc] initWithObjects:<span class="literal">@"hoge"</span>, <span class="literal">@"foo"</span>, <span class="keyword">nil</span>];
 
[array release];</pre>

init〜 で始まらないメソッドで確保したオブジェクトは自身で解放してはいけません。

<pre class="code"><span class="class">NSMutableArray</span> *array = [<span class="class">NSMutableArray</span> arrayWithObjects:<span class="literal">@"hoge"</span>, <span class="literal">@"foo"</span>, <span class="keyword">nil</span>];</pre>

<h3>メソッド内でのみ使用するローカル変数を init〜 で確保した場合は autorelease をつける</h3>

テクニックの一つとして、メソッド内でのみ使用するローカル変数を init〜 メソッドで初期化した場合は autorelease を付けて release し忘れを防ぐようにします。

<section>

<h4>Google Objective-Cスタイルガイド 日本語訳</h4>

参考: <a href="http://www.textdrop.net/google-styleguide-ja/objcguide.xml" target="_blank" class="extlink">Google Objective-Cスタイルガイド 日本語訳</a>

</section>

<pre class="code">- (<span class="keyword">void</span>)doSomething
{
  <span class="class">NSArray</span> *array = [[[<span class="class">NSArray</span> alloc] initWithObjects:<span class="literal">@"hoge"</span>, <span class="literal">@"foo"</span>, <span class="keyword">nil</span>] <span class="keyword">autorelease</span>];
  <span class="comment">// なにかの処理</span>
}</pre>

<h3>メンバ変数を使用してオブジェクトを保持する場合のルール</h3>

次のいずれかの方法でメンバ変数でオブジェクトを保持する場合は dealloc メソッドで release を行う必要があります。

<ol><li>メンバ変数に init〜 で始まるメソッドで初期化したオブジェクトを割り当てている場合</li>
<li>メンバ変数に明示的に retain して保持することを示したオブジェクトを割り当てた場合</li>
<li>プロパティに retain 属性または copy 属性が付いていて、プロパティでオブジェクトを割り当てた場合</li></ol>

<section>

<h4>MyClass.h</h4>

<pre class="code"><span class="keyword">@interface</span> MyClass : <span class="class">NSObject</span> {
  <span class="keyword">@private</span>
  <span class="class">NSMutableArray</span> *array_;
  <span class="class">NSString</span> *message_;
}
 
<span class="keyword">@property</span>(<span class="keyword">retain</span>) <span class="class">NSMutableArray</span> *array;
<span class="keyword">@property</span>(<span class="keyword">copy</span>) <span class="class">NSString</span> *message;
<span class="keyword">@end</span></pre>

<h4>MyClass.m</h4>

<pre class="code"><span class="keyword">#import</span> <span class="literal">&quot;MyClass.h&quot;</span>
<span class="keyword">@implementation</span> MyClass
<span class="keyword">@synthesize</span> array = array_;
<span class="keyword">@synthesize</span> message = message_;
 
- (<span class="keyword">id</span>)init
{ 
  <span class="keyword">if</span> ( (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) ) {
  
    <span class="comment">// 1) メンバ変数に init〜 で設定したオブジェクトを割り当てる場合は dealloc で release する</span>
    array_ = [[<span class="class">NSMutableArray</span> alloc] initWithObjects:<span class="literal">@"hoge"</span>, <span class="literal">@"foo"</span>, <span class="keyword">nil</span>];
  
    <span class="comment">// 2) メンバ変数に明示的に retain してオブジェクトを保持することをマークした場合は dealloc で release する</span>
    message_ = [[array_ objectAtIndex:<span class="literal">0</span>] retain];
  
    <span class="comment">// 3.1) メンバ変数にプロパティでオブジェクトを割り当てた場合は dealloc で release する</span>
    <span class="keyword">self</span>.array = [<span class="class">NSMutableArray</span> arrayWithObjects:<span class="literal">@"hoge"</span>, <span class="literal">@"foo"</span>, <span class="keyword">nil</span>];
    
    <span class="comment">// 3.2) init〜 で始まるメソッドでオブジェクトを割り当てる場合はプロパティ形式で直接受け取ってはいけない。二重の参照カウントになってしまう。</span>
    <span class="comment">//      init〜 で確保したオブジェクトをメンバ変数に割り当てる場合は直接割り当てるか次のようにする</span>
    <span class="class">NSMutableArray</span> *tmp = [[<span class="class">NSMutableArray</span> alloc] initWithObjects:<span class="literal">@"hoge"</span>, <span class="literal">@"foo"</span>, <span class="keyword">nil</span>];
    <span class="keyword">self</span>.array = tmp;
    [tmp release];
  }
  <span class="keyword">return</span> <span class="keyword">self</span>;
}
 
- (<span class="keyword">void</span>)dealloc
{
  <span class="comment">// 適切な release </span>
  <span class="keyword">self</span>.array = <span class="keyword">nil</span>;
  <span class="keyword">self</span>.message = <span class="keyword">nil</span>;
  [<span class="keyword">super</span> dealloc];
}</pre>

</section>

プラクティスとして、init〜 メソッドの内部ではプロパティ形式（3.1みたなやつ）でメンバ変数を初期化するのは避けるほうがよいです。

-----
EXCERPT:

-----
KEYWORDS:
Objective-C,retain,release,@property
-----


PING:
TITLE: ʚïɞ.com
URL: http://ʚïɞ.com/rb52
IP: 151.237.189.103
BLOG NAME: ʚïɞ.com
DATE: 09/06/2013 08:23:28 PM
[Objective-C] retain と release の関係について - それはBlog
-----

PING:
TITLE: iOS/コーディング/Objective-C基礎
URL: https://v157-7-196-135.myvps.jp:443/wiki/index.php?iOS%2F%A5%B3%A1%BC%A5%C7%A5%A3%A5%F3%A5%B0%2FObjective-C%B4%F0%C1%C3
IP: 157.7.196.135
BLOG NAME: PukiWiki Plus! (PukiWiki/TrackBack 0.3)
DATE: 10/09/2013 12:45:40 PM
    参考    基礎    macターミナル上でobjective-cコードを作成し実行する    コンパイル    クラス、メソッド    クラスと...
-----

PING:
TITLE: iOS/コーディング/Objective-C/基礎
URL: https://v157-7-196-135.myvps.jp:443/wiki/index.php?iOS%2F%A5%B3%A1%BC%A5%C7%A5%A3%A5%F3%A5%B0%2FObjective-C%2F%B4%F0%C1%C3
IP: 157.7.196.135
BLOG NAME: PukiWiki Plus! (PukiWiki/TrackBack 0.3)
DATE: 10/16/2013 03:01:57 PM
    参考    基礎    macターミナル上でobjective-cコードを作成し実行する    コンパイル    変数    定数    クラス、...
-----

PING:
TITLE: varifocal best eyeglasses deals in houston
URL: http://ʚïɞ.com/rryn
IP: 178.33.181.44
BLOG NAME: varifocal best eyeglasses deals in houston
DATE: 12/10/2013 03:29:12 PM
[Objective-C] retain と release の関係について - それはBlog
-----

PING:
TITLE: varifocals
URL: http://ʚïɞ.com/sdn2
IP: 178.32.254.201
BLOG NAME: varifocals
DATE: 12/10/2013 11:40:54 PM
[Objective-C] retain と release の関係について - それはBlog
-----

PING:
TITLE: pity 2013 program
URL: http://noweprogramypit.pl
IP: 37.59.164.79
BLOG NAME: pity 2013 program
DATE: 01/28/2014 08:39:22 AM
[Objective-C] retain と release の関係について - それはBlog
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [iPhone] UIViewController の dealloc と viewDidUnload
BASENAME: objective-c_viewdidunload_dealloc
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: iPhone
CATEGORY: iPhone
DATE: 10/18/2010 05:52:49 PM
TAGS: iPhone,UIKit,メモリ管理
-----
BODY:
UIViewController でメモリの確保と破棄を行う際に viewDidUnload と dealloc をどのように使い分けたらよいか間違って覚えている人が多いように思います。

Web上にあるサンプルや書籍でさえも間違っているものが多くあります。

本記事では、UIViewController の viewDidUnload と dealloc の使い分けを整理していこうと思います。

-----
EXTENDED BODY:
<h2>UIViewController のメモリ管理まとめ</h2>

<h3>メモリの確保と破棄</h3>

UIViewController 内で確保したメモリの破棄場所は、結構ややこしいです。とくに <em>viewDidUnload</em> と <em>dealloc</em> の違いは抑えておく必要があります。

NSObject のメモリ管理の定石である <strong>init で確保したメモリは dealloc で破棄する</strong>ことは間違えないのですが UIViewController では viewDidload で確保したメモリを viewDidUnload で破棄して dealloc で破棄しない例がよくあるので間違えないようにしなければなりません。

<p class="option"><strong>viewDidload で確保したメモリは dealloc でも破棄しなければならない</strong></p>

viewDidload と viewDidUnload は名前が似ているため対のメソッドのように思いがちですが<em>そうではありません</em>。

<h3>viewDidUnload</h3>

viewDidUnload はメモリ不足警告をアプリが受け取った場合に didReceiveMemoryWarning メソッドから呼び出されるものです。

メモリ不足警告が起こらない場合には viewDidUnload は呼び出されません。なので、viewDidload で確保したメモリの破棄処理を viewDidUnload のみに記述し dealloc に記述しないと、メモリ不足警告がでない場合にメモリの破棄がされません。

<h3>メモリの確保と破棄の正確な例</h3>

UIViewController でのメモリ確保と破棄の定石は次のようになります。

<ul>
<li>init で確保したメモリは dealloc で破棄する</li>
<li>viewDidload で確保したメモリは viewDidUnload と dealloc で破棄する</li>
</ul>

なお、init と viewDidload の使い分けは次のような感じで行えばよいとおもいます。

<dl>
<dt>init</dt>
<dd><p>インスタンス変数の初期化処理</p></dd>
<dt>viewDidload</dt>
<dd><p>ビューが作成された際に行う処理。動的に画面部品を作成したり、サービス（現在位置の取得等）を実行したりする</p></dd>
</dl>

<h3>サンプルコード</h3>

インスタンス変数 myData_ 、locationManager_ をそれぞれ init と viewDidload で初期化します。

locationManager_ は viewDidUnload と dealloc でそれぞれ初期化し、viewDidUnload の方では release 後に nil を設定しています。

これは、nil を設定せずに他の場所で呼び出されるとメモリアクセスエラーが発生するためです。

Objective-C は nil に対しての呼出は何も起こらないことになっているので、viewDidUnload で nil を設定しておくことで dealloc で再度 release しても問題がでないようにしています。

<pre class="code"><span class="rem">//</span>
<span class="rem">//  SampleViewController.m</span>
<span class="rem">//  SampleApp</span>
<span class="rem">//</span>
<span class="rem">//  Created by 濱田 章吾 on 10/10/18.</span>
<span class="rem">//  Copyright 2010 hamasyou. All rights reserved.</span>
<span class="rem">//</span>
 
<span class="keyword">#import</span> <span class="str">&quot;SampleViewController.h&quot;</span>
 
<span class="keyword">@implementation</span> SampleViewController
 
<span class="keyword">@synthesize</span> myData = myData_;
<span class="keyword">@synthesize</span> locationManager = locationManager_;
 
<span class="rem">// Interface Builder で作成する UIViewController の指定イニシャライザ</span>
- (<span class="keyword">id</span>)initWithCoder:(<span class="class">NSCoder</span> *)aDecoder {
  <span class="keyword">if</span> ( (<span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder: aDecoder]) ) {
    myData_ = [[<span class="class">NSMutableArray</span> alloc] init];
  }
  <span class="keyword">return</span> <span class="keyword">self</span>;
}
 
- (<span class="keyword">void</span>)viewDidLoad {
  [<span class="keyword">super</span> viewDidLoad];
  
  <span class="keyword">if</span> (!locationManager_) {
    locationManager_ = [[<span class="class">CLLocationManager</span> alloc] init];
  }
  locationManager_.delegate = <span class="keyword">self</span>;
  locationManager_.desiredAccuracy = kCLLocationAccuracyBest;
  locationManager_.distanceFilter = <span class="num">100</span>;
  [locationManager_ startUpdatingLocation];
}
 
- (<span class="keyword">void</span>)viewDidUnload {
  [locationManager_ release];
  locationManager_ = <span class="keyword">nil</span>;
  
  [<span class="keyword">super</span> viewDidUnload];
}
 
- (<span class="keyword">void</span>)dealloc {
  [myData_ release];
  [locationManager_ release];
 
  [<span class="keyword">super</span> dealloc];
}
 
<span class="keyword">@end</span></pre>

-----
EXCERPT:

-----
KEYWORDS:
iPhone, UIKit, UIViewController, viewDidUnload, dealloc, メモリ管理, SDK
-----


PING:
TITLE: iOS/コーディング/Tips/メモリー解放の定石
URL: https://ht-systems.jp:443/wiki/index.php?iOS%2F%A5%B3%A1%BC%A5%C7%A5%A3%A5%F3%A5%B0%2FTips%2F%A5%E1%A5%E2%A5%EA%A1%BC%B2%F2%CA%FC%A4%CE%C4%EA%C0%D0
IP: 157.7.196.135
BLOG NAME: PukiWiki Plus! (PukiWiki/TrackBack 0.3)
DATE: 12/12/2013 04:49:39 PM
     UIViewController の dealloc と viewDidUnload UIViewController でメモリの確保と破棄を行...
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Objective-C] Xcode の単体テスト環境
BASENAME: objective-c_xcode
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Objective-C
CATEGORY: Objective-C
CATEGORY: iPhone
DATE: 10/19/2010 05:46:54 PM
TAGS: Objective-C,OCUnit,単体テスト
-----
BODY:
iPhone アプリで利用している Xcode 上に単体テスト環境を構築する手順のメモです。

GUI の構築が多い iPhone アプリ開発ですが、一部ロジックもあります。ロジックのテストはあったほうがいいし、なきゃ不安。

ということで単体テスト環境の構築方法をいろいろしらべてやってみた手順のまとめです。

-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

<h2>開発環境</h2>

僕の Xcode の環境です。この環境でテスト環境を作っていきます。

<dl>
<dt>OS のバージョン</dt>
<dd><p>Mac OS X 10.6.4 Snow Leopard</p></dd>
<dt>Xcode のバージョン</dt>
<dd><p>3.2.4</p></dd>
<dt>iOS のバージョン</dt>
<dd><p>4.1</p></dd>
</dl>

<h2>単体テスト環境の作り方 - 手順</h2>

Xcode には 単体テスト（<em>OCUnit</em>）用の <em>SenTestingKit</em> というフレームワークが用意されています。

ここでは、iPhone 用のプロジェクトで OCUnit を使った単体テスト環境を構築する手順を紹介します。

<h3>手順1 - テスト対象のプロジェクトを作成する</h3>

まずは、iPhone アプリ開発用のプロジェクトを作成します。すでにプロジェクトがある場合にはそれを使います。

<img alt="スクリーンショット（2010-10-19 16.40.39）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2016.40.39%EF%BC%89.png" width="693" class="mt-image-none" style="" />

プロジェクト名は OCUnitDemo としました。

<img alt="スクリーンショット（2010-10-19 16.43.25）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2016.43.25%EF%BC%89.png" width="693" class="mt-image-none" style="" />

ここでビルドしてみて、エラーがでないことを確かめます。

<h3>手順2 - テスト用ターゲットを作成する</h3>

つぎに、テスト用のターゲットを作成します。「プロジェクト」→「新規ターゲット」をたどり <em>Unit Test Bundle</em> を選びます。

<img alt="スクリーンショット（2010-10-19 16.45.39）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2016.45.39%EF%BC%89.png" width="693" class="mt-image-none" style="" />

ターゲット名はなんでもよいのですが、ここでは UnitTest としました。

<h3>手順3 - テストクラスを置くためのフォルダを作成する</h3>

つぎに、テストクラスを置くためのフォルダとグループを作成します。この手順は省略しても構いませんがテストクラスとアプリケーションのクラスが同一のフォルダにあると分かりづらくなるので分けておくほうが良いと思います。

Finder でプロジェクトのフォルダを開き TestCases というフォルダを作成します。

<img alt="スクリーンショット（2010-10-19 17.03.41）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2017.03.41%EF%BC%89.png" width="693" class="mt-image-none" style="" />

Xcode に戻って左のツリーの最初にあるプロジェクトアイコン（OCUnitDemo）を右クリックして「追加」→「既存のファイル」をクリックして今作った TestCases を選択します。

このとき「デスティネーショングループのフォルダに項目をコピーする（必要な場合）」のチェックは外しておきます。

また、<em>「ターゲットに追加」で UnitTest にのみチェックが入っている状態にします。</em>

<img alt="スクリーンショット（2010-10-19 17.07.14）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2017.07.14%EF%BC%89.png" width="438" height="403" class="mt-image-none" style="" />

<h3>手順4 - テストクラスを作成する</h3>

つぎに、テストクラスを作成します。今追加した TestCases フォルダを右クリックし「追加」→「新規ファイル」から Objective-C test case class を選択します。

ファイル名はなんでもよいです。ここでは FirstTest.m としました。保存場所が TestCases、ターゲットが UnitTest になっていることを確認して作成します。

<img alt="スクリーンショット（2010-10-19 17.09.03）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2017.09.03%EF%BC%89.png" width="693" class="mt-image-none" style="" />

ここまでできたら、一度ビルドしてみます。「ビルド」→「ビルド」をクリックしてみます。

おそらくエラーが3件（もしくは2件）、警告が1件でるはずです。次はこれを直していきます。

<img alt="スクリーンショット（2010-10-19 17.14.21）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2017.14.21%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<p class="option">エラーのうち、1件はテストのエラー、2件（もしくは1件）は Xcode3.2.4 で iOS4.1 以上を使っている場合にでるエラーになります。警告はガーベージコレクションが無効になっていることを示すもののはずです。</p>

<h3>手順5 - テストクラスを修正する</h3>

iPhone アプリ開発用のプロジェクトでテストクラスを作成すると、テストケースは次のようになっていると思います。

<section>

<h4>FirstTest.m</h4>

<pre class="code"><span class="keyword">#if USE_APPLICATION_UNIT_TEST</span>     <span class="rem">// all code under test is in the iPhone Application</span>
 
- (<span class="keyword">void</span>) testAppDelegate {
  
  <span class="keyword">id</span> yourApplicationDelegate = [[<span class="class">UIApplication</span> sharedApplication] delegate];
  <span class="keyword">STAssertNotNil</span>(yourApplicationDelegate, <span class="literal">@&quot;UIApplication failed to find the AppDelegate&quot;</span>);
  
}
 
<span class="keyword">#else</span>
<span class="rem">//...</span></pre>

</section>

1行目の #if USE_APPLICATION_UNIT_TEST というところがエラーの一つめのテストが失敗した原因になります。iPhone アプリ開発のプロジェクトでプロジェクトを作成するとこのマクロが追加されるようです。

今回はロジックの単体テストをおこなうつもりなので、この部分は削除してしまいます。削除したあとのコードは次のようになりました。

<section>

<h4>FirstTest.h</h4>

<pre class="code"><span class="keyword">#import</span> <span class="literal">&lt;SenTestingKit/SenTestingKit.h&gt;</span>
<span class="rem">//#import &quot;application_headers&quot; as required</span>
 
<span class="keyword">@interface</span> FirstTest : <span class="class">SenTestCase</span> {
 
}
 
- (<span class="keyword">void</span>) testMath;              <span class="rem">// simple standalone test</span>
 
<span class="keyword">@end</span></pre>

</section>

<section>

<h4>FirstTest.m</h4>

<pre class="code"><span class="keyword">#import</span> <span class="literal">&quot;FirstTest.h&quot;</span>
 
<span class="keyword">@implementation</span> FirstTest
 
- (<span class="keyword">void</span>) testMath {
  
  <span class="keyword">STAssertTrue</span>((<span class="num">1</span>+<span class="num">1</span>)==<span class="num">2</span>, <span class="literal">@&quot;Compiler isn't feeling well today :-(&quot;</span> );
  
}
 
<span class="keyword">@end</span></pre>

</section>

UIKit に関する #import 文も削除しました。

<h3>手順6 その1 - An internal error occurred when handling command output: -[XCBuildLogCommandInvocationSection setTestsPassedString:]: unrecognized selector sent to instance エラー対策をする</h3>

つぎに、なにやら長ったらしいエラーの対策をします。

<pre>An internal error occurred when handling command output: -[XCBuildLogCommandInvocationSection setTestsPassedString:]: unrecognized selector sent to instance 0x207543c40</pre>

これは Xcode3.2.4 で iOS4.1 の SDK をいれるとでるエラーらしいです。対応として、次の github にあるソースコードをプロジェクトに追加します。

<section>

<h4>gist:58296</h4>

<a href="http://gist.github.com/586296" target="_blank" class="extlink">gist:586296 - GitHub</a>

</section>

ファイルをダウンロードまたは、中身をコピーして、TestCases の下にソースコードとして追加します。追加後のツリーはこんな感じになります。

<img alt="スクリーンショット（2010-10-19 17.34.12）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2017.34.12%EF%BC%89.png" width="693" class="mt-image-none" style="" />

おそらく、Xcode のバージョンアップでそのうち直ると思いますが、それまではこの対応が必要になりそうです。

<h3>手順6 その2 - An internal error occurred when handling command output: -[XCBuildLogCommandInvocationSection setTestsPassedString:]: unrecognized selector sent to instance エラー対策をする</h3>

手順6 その1 を試してみても長ったらしいエラーがなくならない場合は、次の手順を試してみてください。その1で治らないということはおそらく iOS のバージョンが 4.1 ではないのだと思います。iPad アプリのテストの場合などは、こちらを試すと良いと思います。

<ol>
<li>左側に出ている「グループとファイル」のツリーから、[ターゲット]-[UnitTest] を開きます</li>
<li>[スクリプトを実行] をダブルクリックして、情報ペインを表示します</li>
<li>&quot;${SYSTEM_DEVELOPER_DIR}/Tools/RunUnitTests&quot; の行の最後に 1&gt; /dev/null を追記します</li>
</ol>

<img alt="スクリーンショット（2010-11-06 12.15.47）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-11-06%2012.15.47%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<h4>参考</h4>

<a href="http://stackoverflow.com/questions/3516745/sentestcase-in-xcode-3-2-and-xcbuildlogcommandinvocationsection-errors" target="_blank" class="extlink">SenTestCase in Xcode 3.2 and XCBuildLogCommandInvocationSection Errors - stackoverflow</a>

<h3>手順7 - ビルドしてみる</h3>

ここまでできたらビルドしてみます。エラーがなくなればテストが上手く通ったことになります。

<img alt="スクリーンショット（2010-10-19 17.35.58）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2017.35.58%EF%BC%89.png" width="693" class="mt-image-none" style="" />

FirstTest.m の testMath メソッドの中身を変えて、テストが失敗するようにしてビルドを行うと、エラーが発生することを確認します。エラーがきちんと発生していればテスト環境が整ったことになります。

<img alt="スクリーンショット（2010-10-19 17.36.27）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-10-19%2017.36.27%EF%BC%89.png" width="693" class="mt-image-none" style="" />

あとは、テスト対象のクラスをごにょごにょしたりして単体テストを満喫すれば良いと思います。

<h3>手順8 - テスト対象のクラスをコンパイルする</h3>

上までの手順が整ったら、テストを書いて行けばよいのですが、実際にテスト対象クラスを #import したところでちょっとつまずいたのでメモです。

UnitTest ターゲットを作ってテストケースクラスはこっちに追加することは上に書きましたが、実際のテスト対象クラスは OCUnitDemo ターゲットに追加されているだけで、UnitTest ターゲットに追加されていません。

UnitTest ターゲット側でテスト対象のクラスを見えるようにするには、テスト対象のクラスを UnitTest ターゲットの[ソースをコンパイル] のフェーズにドラッグ＆ドロップして追加する必要があります。

<img alt="スクリーンショット（2010-11-06 15.58.45）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-11-06%2015.58.45%EF%BC%89.png" width="693" class="mt-image-none" style="" />

<h3>（おまけ？）手順9 - UnitTest ターゲットの設定変更</h3>

僕の環境では手順7まででエラーなくテストが実行出来るようになったのですが、一部プラットフォーム（アーキテクチャのベース SDK）を iOS4.1 から Mac OS X に変えたり、Objective-C ガーベージコレクションの非対応を必須に変えたりしないといけないみたいな情報をちらちら見かけたので、手順7までで上手くいかない場合には試してみてください。

<h2>参考</h2>

参考にしたサイトです。

<ul>
<li><a href="http://okajima.air-nifty.com/b/2008/07/iphone_577f.html" target="_blank" class="extlink">iPhoneと単体テスト環境構築メモ - 人生を書き換える者すらいた。</a></li>
<li><a href="http://sites.google.com/site/smgakusyuu/ocunit" target="_blank" class="extlink">OCUnitの使い方（Cocoa Application編） - [SM gakusyuu];</a></li>
<li><a href="http://d.hatena.ne.jp/rabbit2go/20100919/1284859385" target="_blank" class="extlink">Xcode3.2.4のユニットテスト失敗に対処する - Basic</a></li>
<li><a href="http://blazingcloud.net/2010/02/20/test-driven-development-for-iphone/" target="_blank" class="extlink">Test Driven Development for iPhone - Blazing Cloud</a></li>
</ul>

-----
EXCERPT:

-----
KEYWORDS:
Objective-C, 単体テスト環境, OCUnit, SenTestingKit
-----


PING:
TITLE: youprn
URL: http://chatte.pornomatic.org/porn-youprn.html
IP: 37.59.34.236
BLOG NAME: youprn
DATE: 11/30/2013 01:53:36 AM
[Objective-C] Xcode の単体テスト環境 - それはBlog
-----

PING:
TITLE: streaming porno
URL: http://film-youporn.gadiscommunity.com/porno-streaming-porno.html
IP: 37.59.34.236
BLOG NAME: streaming porno
DATE: 11/30/2013 11:34:49 AM
[Objective-C] Xcode の単体テスト環境 - それはBlog
-----

PING:
TITLE: videoporno
URL: http://voyeuse.searchpornmovie.com/extrait-videoporno.html
IP: 37.59.34.236
BLOG NAME: videoporno
DATE: 12/01/2013 09:39:42 AM
[Objective-C] Xcode の単体テスト環境 - それはBlog
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Air号外をリリースしました。
BASENAME: air
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: iPhone
CATEGORY: PR
CATEGORY: iPhone
DATE: 10/25/2010 08:56:02 PM
TAGS: プレスリリース
-----
BODY:
（株）マウントポジションがアプリケーションの開発を担当した
iPhone用アプリケーション「<strong>Air号外</strong>」が本日リリースされました。

<img alt="ss2-208x300.jpg" src="http://hamasyou.com/blog/archives/images/ss2-208x300.jpg" width="208" height="300" class="mt-image-none" style="" />

Air号外は、街中で配布される「号外」を仮想空間で配布するサービスです。
地図を見ながら近くで配布されている号外を検索し、
ARカメラを使って、空間に配置されている号外を取得し、閲覧することができます。

開発運営
- 株式会社博報堂DYスポーツマーケティング
- 株式会社キュードーガ
- 株式会社マウントポジション

首都圏にいてもなかなか手にする機会が少ない「号外」を
このアプリケーショを使って手に入れてみてはいかがでしょうか。

<section>

<h4>iTunes へのリンク</h4>

<a href="http://itunes.apple.com/jp/app/id397089560" target="_blank" class="extlink">Air号外</a>

</section>

なお、このアプリケーションは <a href="http://www.appcelerator.com/products/titanium-mobile-application-development/" target="_blank" class="extlink"><em>Titanium</em></a> を使ってつくりました。

開発期間がぐっと短縮できたし、Titanium だと分業がしやすい（Window 単位で画面をわけることができるため）ので、サクサク開発ができました。

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Air号外,Titanium
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [cocos2d] CCSpriteSheet や CCAnimation を使った時の CCSprite の後始末のしかた
BASENAME: cocos2d_ccspritesheet_ccanimation_ccsprite
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Objective-C
CATEGORY: Objective-C
CATEGORY: iPhone
DATE: 10/27/2010 10:58:19 PM
TAGS: cocos2d,メモリ管理
-----
BODY:
cocos2d を使ったときの CCSprite の後始末のしかたのメモです。

CCSpriteSheet から CCSprite を作ったときの破棄と CCAnimation が終わったタイミングでの CCSprite の破棄の方法をメモしています。
-----
EXTENDED BODY:
<h2>CCSpriteSheet から作ったスプライトの後処理</h2>

CCSpriteSheet から CCSprite を作成する場合、次のように書きます。

<pre class="code"><span class="class">CCSpriteSheet</span> *sheet = [<span class="class">CCSpriteSheet</span> spriteSheetWithFile:<span class="literal">@&quot;missile.png&quot;</span>];
[<span class="keyword">self</span> addChild:sheet];
  
<span class="class">CCSprite</span> *missile = [<span class="class">CCSprite</span> spriteWithSpriteSheet:sheet rect:CGRectMake(<span class="num">0</span>, <span class="num">0</span>, <span class="num">32</span>, <span class="num">32</span>)];
[sheet addChild:missile];</pre>

このように、CCSpriteSheet から CCSprite を作成した場合、CCLayer（self） にはスプライトシートのオブジェクトを追加して、スプライトはスプライトシートに追加する形で記述します。

こうすると、スプライトが必要なくなってスプライトを破棄したくなった場合に、スプライトシートから取り除く必要があります。

この時 スプライトシートの removeChild:cleanup: メソッドでは上手くいきません。

それではどうするかというと、スプライトの方の <strong>removeFromParentAndCleanup:</strong> メソッドを使います。

<pre class="code">[sprite removeFromParentAndCleanup:<span class="keyword">YES</span>];</pre>

<h2>CCAction や CCAnimation が終わったタイミングでのスプライトの後処理</h2>

スプライトにアクションやアニメーションを付ける場合は、CCAction や CCAnimation を使います。

そして、アクションやアニメーションが終了したタイミングでスプライトを削除したい場合には、アクションの最後で <strong>CCCallFuncND</strong> を使って <em>removeFromParentAndCleanup:</em> メソッドを呼び出すようにします。（19行目）

次に例を載せておきます。この例は、ミサイルが爆発したときの爆発をアニメーションで表したものです。CCAnimation を使うので、burst.plist を別途記述して、アニメーションの定義をしています。コード例のあとに載せてあるのがそうです。

また、burst.png は 8×8 の爆発を表現する画像が9つ並んだものになっています。

<h4>burst.m</h4>

<pre class="code"><span class="rem">// アニメーションの定義（個別のスプライトの定義）をスプライトキャッシュに登録して、後で呼び出せるようにする</span>
[[<span class="class">CCSpriteFrameCache</span> sharedSpriteFrameCache] addSpriteFramesWithFile:<span class="literal">@&quot;burst.plist&quot;</span>];
 
<span class="rem">// アニメーション定義と対応するスプライトの画像を読み込む</span> 
<span class="class">CCSpriteSheet</span> *sheet = [<span class="class">CCSpriteSheet</span> spriteSheetWithFile:<span class="literal">@&quot;burst.png&quot;</span>];
[<span class="keyword">self</span> addChild:sheet];
 
<span class="rem">// アニメーションの最初のスプライトを読み込む</span>  
<span class="class">CCSprite</span> *sprite = [<span class="class">CCSprite</span> spriteWithSpriteFrameName:<span class="literal">@&quot;burst01&quot;</span>];
sprite.position = <span class="keyword">ccp</span>(<span class="literal">160</span>, <span class="literal">240</span>);
[sheet addChild:sprite];
 
<span class="rem">// アニメーションのコマに対応するスプライトをフレームとして作成する</span>  
<span class="class">NSMutableArray</span> *animFrames = [<span class="class">NSMutableArray</span> array];
<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="literal">2</span>; i &lt;= <span class="literal">9</span>; i++) {
  <span class="class">CCSpriteFrame</span> *frame = [[<span class="class">CCSpriteFrameCache</span> sharedSpriteFrameCache] spriteFrameByName:[<span class="class">NSString</span> stringWithFormat:<span class="literal">@&quot;burst%02d&quot;</span>, i]];
  [animFrames addObject:frame];
}
 
<span class="rem">// アニメーションフレームをアニメーションにしてスプライトと紐付ける</span>
<span class="rem">// アニメーションの最後に removeFromParentAndCleanup: を呼び出してスプライトを破棄する</span>
<span class="class">CCAnimation</span> *animation = [<span class="class">CCAnimation</span> animationWithName:<span class="literal">@&quot;burst&quot;</span> delay:<span class="literal">0.2f</span> frames:animFrames];
[sprite runAction:[<span class="class">CCSequence</span> actions:
                   [<span class="class">CCAnimate</span> actionWithAnimation:animation restoreOriginalFrame:NO],
                   <em>[<span class="class">CCCallFuncND</span> actionWithTarget:sprite selector:<span class="keyword">@selector</span>(removeFromParentAndCleanup:) data:(<span class="keyword">void</span> *)<span class="keyword">YES</span>]</em>,
                   <span class="keyword">nil</span>]];</pre>

<h4>burst.png</h4>

<img alt="missile.png" src="http://hamasyou.com/blog/archives/images/missile.png" width="64" height="8" class="mt-image-none" style="" />

<h4>burst.plist</h4>

<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
  &lt;key&gt;texture&lt;/key&gt;
  &lt;dict&gt;
    &lt;key&gt;width&lt;/key&gt;
    &lt;integer&gt;72&lt;/integer&gt;
    &lt;key&gt;height&lt;/key&gt;
    &lt;integer&gt;8&lt;/integer&gt;
  &lt;/dict&gt;
  &lt;key&gt;frames&lt;/key&gt;
  &lt;dict&gt;
    &lt;key&gt;burst01&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;x&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;y&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;width&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;height&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalWidth&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalHeight&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;key&gt;burst02&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;x&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;y&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;width&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;height&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalWidth&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalHeight&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;key&gt;burst03&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;x&lt;/key&gt;
      &lt;integer&gt;16&lt;/integer&gt;
      &lt;key&gt;y&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;width&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;height&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalWidth&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalHeight&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;key&gt;burst04&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;x&lt;/key&gt;
      &lt;integer&gt;24&lt;/integer&gt;
      &lt;key&gt;y&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;width&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;height&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalWidth&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalHeight&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;key&gt;burst05&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;x&lt;/key&gt;
      &lt;integer&gt;32&lt;/integer&gt;
      &lt;key&gt;y&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;width&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;height&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalWidth&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalHeight&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;key&gt;burst06&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;x&lt;/key&gt;
      &lt;integer&gt;40&lt;/integer&gt;
      &lt;key&gt;y&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;width&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;height&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalWidth&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalHeight&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;key&gt;burst07&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;x&lt;/key&gt;
      &lt;integer&gt;48&lt;/integer&gt;
      &lt;key&gt;y&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;width&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;height&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalWidth&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalHeight&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;key&gt;burst08&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;x&lt;/key&gt;
      &lt;integer&gt;56&lt;/integer&gt;
      &lt;key&gt;y&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;width&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;height&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalWidth&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalHeight&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
    &lt;/dict&gt;
    &lt;key&gt;burst09&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;x&lt;/key&gt;
      &lt;integer&gt;64&lt;/integer&gt;
      &lt;key&gt;y&lt;/key&gt;
      &lt;integer&gt;0&lt;/integer&gt;
      &lt;key&gt;width&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;height&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalWidth&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
      &lt;key&gt;originalHeight&lt;/key&gt;
      &lt;integer&gt;8&lt;/integer&gt;
    &lt;/dict&gt;
  &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;</pre>

-----
EXCERPT:

-----
KEYWORDS:
cocos2d, iPhone, CCSpriteSheet, CCSprite, CCAnimation
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: GitHub で複数アカウントを使う
BASENAME: github
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: TechMemo
DATE: 10/28/2010 02:37:36 PM
TAGS: GitHub,SSH
-----
BODY:
GitHub で複数アカウントを使った場合に、SSH の鍵管理周りではまったので解決方法のメモです。

Special Thanks <a href="http://twitter.com/bongole" target="_blank" class="extlink">@bongole</a>

-----
EXTENDED BODY:
<h2>GitHub で複数アカウントを使う</h2>

GitHub で複数アカウントを利用するときの設定です。

GitHub は、アカウントと紐付けて SSH の鍵を管理します。なので、複数アカウントを利用すると同じ SSH の鍵を使えません。

そこで、複数アカウントの SSH の鍵の管理をする方法のメモです。

<p class="option">この記事で別アカウントとして作成するアカウントは mountposition とします。記事中に出てくる mountposition という文字は適宜ご自分の別アカウントのIDに変更してください。</p>

<h3>git の SSH の動き</h3>

git で push を行うと、デフォルトで ~/.ssh/id_rsa 秘密鍵が利用されます。

デフォルトのファイル名以外の秘密鍵を使いたい場合には、 ~/.ssh/config ファイルを設定します。

<section>

<h4>~/.ssh/config</h4>

<pre>Host github.com
 User git
 Port 22
 Hostname github.com
 IdentityFile ~/.ssh/github_id_rsa
 TCPKeepAlive yes
 IdentitiesOnly yes </pre>

</section>

<em>IdentityFile</em> で指定した鍵ファイルが github.com への接続で使われるようになります。

<h3>GitHub の別アカウント用の SSH 鍵を用意する</h3>

ssh-keygen を利用して、別アカウント用の秘密鍵を作成します。作った秘密鍵と対になる公開鍵を GitHub に登録します。

その後、~/.ssh/config に次の部分を追加します。

<section>

<h4>~/.ssh/config 追記</h4>

<pre># Client user (mountposition)
Host github-mountposition
  HostName github.com
  User git
  IdentityFile ~/.ssh/github_mountposition_rsa
</pre>

</section>

github-mountposition というホストへの SSH 接続には ~/.ssh/github_mountposition_rsa 鍵ファイルを使うという設定です。

github-mountposition というのは、この後 git remote add で設定する GitHub 上の別アカウントが所有するリポジトリのホストです。

<p class="option">GitHub ではアカウントごとのリポジトリへ、 git@github-{client名} でつなぐことができるようです。</p>

<h3>git remote add で GitHub 上のリポジトリにアクセスできるようにする</h3>

git remote add を使って GitHub 上のリポジトリへアクセスできるようにします。このとき、通常は git@github.com:{リポジトリのURL} とするところを、git@github-{アカウント名}:{リポジトリのURL} に変更していることに注意してください。

<pre class="console">$ <kbd>git remote add origin git@github-mountposition:{リポジトリのURL}</kbd></pre>

GitHub は SSH でつなぐ先を通常の github.com とは別に、github-{アカウント名} でもアクセスできるようになっています。この github-{アカウント名} という形式を用いて git から SSH で接続することによって、~/.ssh/config の HOST の設定を切り分けられるようにしています。

<h3>~/.ssh/config の IdentityFile を複数書くことで対応する？</h3>

いろいろなところで、~/.ssh/config ファイルの IdentityFile は複数書くことができるとあったのですが、実際にやってみるとうまくいきませんでした。

<h3>Special Thanks</h3>

Special Thanks <a href="http://twitter.com/bongole" target="_blank" class="extlink">@bongole</a>

-----
EXCERPT:

-----
KEYWORDS:
GitHub, SSH, 秘密鍵, 公開鍵, 複数アカウント
-----

COMMENT:
AUTHOR: Motoyasu Yamada
EMAIL: 
IP: 124.155.44.99
URL: 
DATE: 06/01/2012 09:24:37 PM
良記事ありがとうございます。

やってみたんですが、

git@github-{アカウント名}:{リポジトリのURL}って、

git@github-{アカウント名}:{アカウント名}{リポジトリのURL(/から始まっている)}

じゃないと、エラーになりませんか？


-----

COMMENT:
AUTHOR: hamasyou
EMAIL: hamasyou@gmail.com
IP: 118.243.67.164
URL: http://hamasyou.com/
DATE: 09/27/2012 11:33:45 AM
{リポジトリのURL} っていうところの書き方が悪かったですね。。
たとえば、hamasyou ユーザの git_demo というリポジトリの場合、
git@github-hamasyou:hamasyou/git_demo.git  という形式になりますね。

おっしゃるとおりです。
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: システム開発とテスト
BASENAME: post_3
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Blog
CATEGORY: Blog
DATE: 11/08/2010 09:23:53 PM
TAGS: システム開発,テスト
-----
BODY:
なんか最近、テストっていう言葉をよく聞くので、僕なりのテストへのこだわりとかをひとつ記事にしてみます。
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script> 

<h2>システム開発とテストについて</h2>

僕の考えるシステム開発やテストを、脳内垂れ流しで書き連ねてみようかと。

ここでの言葉の定義は、僕の認識なので、一般の定義とは少し違うかも。そこは勘弁を。

<dl>
<dt>システム開発</dt>
<dd><p>システム開発とは、あるシステムの仕様を決めてそれを作り上げること。プロジェクトじゃないといけないとかそういう難しいことは抜き。</p></dd>
<dt>テスト</dt>
<dd><p>作ったものが正しく動いているかを確認すること。ここでいう正しくとは、<em>「作ったとおり」ではなく「仕様通り」</em>の意味。</p></dd>
</dl>

<h3>システム開発とは</h3>

テストを語る前に、そもそもシステム開発とはなんぞや？というのと、システム開発の仕方についての説明をします。

まず、システム開発とは。

<p class="option">システム開発とは、顧客が開発者と仕様を決めてそのシステムを作り納品すること</p>

ここで言う顧客は自分の場合ももちろんありますし、顧客と開発者が同じ人と言うこともよくありますね。マイアプリ開発とかそんな感じですよね。

まぁとにかく、<em>仕様を決めてそれを作る</em>というのがシステム開発の本質だと思っています。

<h3>品質とは</h3>

<p class="option">作ったシステムが決めた通りの仕様どおりに動くかどうか、それを<em>品質</em>といいます。そして、仕様通り動くかどうかを確認することを<em>テスト</em>といいます。</p>

まぁ、品質にもいろいろあって、外部品質や内部品質といったものにわけられる・・・というウンチクはシステム工学を勉強してみてください。

<h3>テストが先かプログラムが先か</h3>

ぶっちゃけた話、テストっていうのは作ったものが仕様通りに動くかどうかを確認することなので、テストが先でもプログラムが先でもどっちでもいいと思っています。

誤解されるといやなので、先に言いますが、<em>僕はテストは先に書くほうが好き</em>ですよ、もちろん。

でも、プログラムを書いたあとにテストするから品質が悪いとか、テストを先に書かないなんてプログラマ失格だ！なんていうのは、僕はちょっと違うんじゃないかなって思います。

<h3>どうやって作ったものが仕様通りに動いているかを保証するか</h3>

テストは作ったものが仕様通りに保証する手段ですので、システムの作り方によってテストのやり方は変えないとダメだと思っています。

プログラムを作ってからテストをする場合、作ったプログラムをいろんな角度からテストします。内部ロジックテスト、外部インターフェーステスト、etc... といった感じです。

プログラムはそこにあるのですから、どんな入力を与えればどんな出力が返ってこればよいかをテスト仕様としてとにかくテストします。そうじゃないと、正しく動いているのかどうかが保証できないですから。

<h3>テスト仕様を用意してからプログラムを書く</h3>

いわゆるテストファーストの考え方です。テストとは、正しく動いていることを確認する手段ですので、当然、先に正しいテストが書ければ、それをパスするようにシステムをつくっていけばいいわけです。

テストファーストのいいところは、実はテストそのもののよりもそれ以外の副次的な効果だと思っています。

<h3>テストファーストだと何がいいか</h3>

まず、プログラムを書くときに考えることとして、どんな機能を実現すればよいか？だと思います。オブジェクト指向でつくろうとか、アーキテクチャパターン、デザインパターンを使ったらいいかもなんてことも頭に浮かんできますよね？

テストファーストでプログラムを書いていくと、どういう手法を使って機能を実現しようかということよりも、どういうふうにプログラムを書いたらテストがしやすくなるだろうか？と考えるようになります。

そして、不思議なことなのですが、テストしやすいプログラムを書いていると、なぜかよい設計になっていることが多々あるのです。

<h3>世の中の設計手法やテスト手法について</h3>

世に出回っている〇〇設計とか〇〇テスト技法というのは、とにかく<em>仕様通りに正しく動くシステムをいかにして作るか</em>を試行錯誤しているにすぎないです。

<strong>決めた仕様どおりに動くプログラムが、テストという保証の元に作られる。これがシステム開発のあるべき姿</strong>だと思っています。

<h3>それでも僕は作り方にもこだわりたい</h3>

仕様通りに動くプログラムを作れる。それはそれですごいことですが、動けばいいやって言うのは僕は好きではありません。

「ここのメソッドの命名、すっげーわかりやすい！」とか、「ここの設計、神！」っていう褒め言葉を僕はもっと聞きたい。

だから今日も、テストしやすいプログラムってどんなだろうかということを考えながらプログラムを書いています。

-----
EXCERPT:

-----
KEYWORDS:
システム開発,テスト
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Git] Git コマンドメモ
BASENAME: git
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: git
CATEGORY: TechMemo
CATEGORY: git
DATE: 11/11/2010 11:34:10 PM
TAGS: git
-----
BODY:
Git のコマンドメモ。
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

<h2>コミット</h2>

<h3>ステージングエリアに追加する</h3>

<pre>$ git add [--all] &lt;filepattern&gt;</pre> 

オプション --all を指定するとすべてのファイルをステージングエリアに追加する。

<h3>ステージングエリアから削除する</h3>

<pre>$ git rm --cached &lt;filepattern&gt;</pre> 

git rm を使うと、ファイルを作業ツリーから削除する。--cached オプションを指定するとステージングエリアから削除するが作業ツリーには残った状態になる。

単にステージングエリアへの追加を取り消したい場合は対話モードを使って <em>revert（取り消し）</em>を行う。

<pre class="console">$ <kbd>git add -i</kbd>
           staged     unstaged path
  1:        +1/-1      nothing README.txt
 
*** Commands ***
  1: [s]tatus     2: [u]pdate     3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff       7: [q]uit       8: [h]elp
What now&gt; <kbd>revert</kbd>
           staged     unstaged path
  1:        +1/-1      nothing [R]EADME.txt
Revert&gt;&gt; <kbd>1</kbd>
           staged     unstaged path
* 1:        +1/-1      nothing [R]EADME.txt
Revert&gt;&gt;
reverted one path
 
*** Commands ***
  1: [s]tatus     2: [u]pdate     3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff       7: [q]uit       8: [h]elp
What now&gt; <kbd>quit</kbd>
Bye.</pre> 

<h3>リポジトリにコミットする</h3>

<pre>$ git commit [-a] -m &lt;message&gt;</pre> 

オプション -a を指定すると、ステージングエリアに登録していないものでも全て直接コミットできる。

<h2>ブランチ</h2>

<h3>ブランチを作る目的（例）</h3>

<ul><li>実験的な変更のため</li> 
<li>新しい機能の追加のため</li> 
<li>バグフィックスのため</li></ul> 

<h3>ブランチを作る</h3>

<pre>$ git branch &lt;branch&gt; [&lt;start-point&gt;]</pre>

start-point（コピー元のブランチ）を指定しないと、現在のブランチを元に新しいブランチが作られる。

<h3>ブランチをチェックアウトする</h3>

<pre>$ git checkout &lt;branch&gt;</pre> 

<h3>ブランチの名前を変更する</h3>

<pre>$ git branch (-m|-M) &lt;old_branch&gt; &lt;new_branch&gt;</pre>

new_branch がすでに存在する場合 -M オプションを使って強制的に上書きできる。

<h3>ブランチを作成すると同時にチェックアウトする</h3>

<pre>$ git checkout -b &lt;branch&gt; [&lt;start-point&gt;]</pre>

branch で指定したブランチを作成し、すぐにチェックアウトする。

<h3>ブランチを削除する</h3>

<pre>$ git branch (-d|-D) &lt;branch&gt;</pre>

削除する際に現在のブランチにマージが完了していないブランチは、-d オプションではエラーになる。マージが完了していなくても強制的に削除したい場合に -D オプションを使用する。

<h3>マージ済みのブランチを表示する</h3>

<pre>$ git branch --merged
* masert
  merged_branch</pre> 

このコマンドで現在のブランチにマージ済みのブランチの一覧が表示される。<em>*マークがついていないブランチは、すでにマージ済みのため通常は消しても良い</em>こととなる。

<h3>未マージのブランチを表示する</h3>

<pre>$ git branch --no-merged
  no_merged_branch</pre> 

現在のブランチにまだマージを行っていないブランチの一覧を表示する。

<h3>コミットしていない変更を一時的に保管する</h3>

git ではコミットしていない変更があると、別のブランチに checkout できない。そんなときは、一時的に変更を保管する git stash を使う。

<pre>$ git stash</pre>

stash すると別のブランチに checkout できるようになる。stash した保管データを元に戻すには git stash pop を使う。

<pre>$ git stash pop</pre>

<h2>マージ</h2>

<h3>マージの種類</h3>

<dl><dt>直接マージ</dt> 
<dd><p>ブランチを一つ持ってきて、すべてのコミットをマージする</p></dd> 
<dt>圧縮コミット</dt> 
<dd><p>あるブランチのコミットを最後の一つに圧縮して現在のブランチにマージする</p></dd> 
<dt>チェリーピック</dt> 
<dd><p>別のブランチからコミットを一つ取ってきて現在のブランチにマージする</p></dd>
</dl> 

<h3>直接マージ</h3>

<pre>$ git merge &lt;branch&gt;</pre>

merge コマンドは現在のブランチにマージしたいブランチをマージする。

<h3>圧縮コミット</h3>

<pre>$ git merge --squash &lt;branch&gt;
$ git commit -a -m &lt;message&gt;</pre>
 
squash オプションは指定したブランチからすべてのコミットを取ってきて、ひとつのコミットに圧縮する。実際に現在のブランチにマージするには、commit を行う必要がある。

<h3>チェリーピック</h3>

ブランチの全部をマージする必要はないが、コミットの一部を取り込みたい場合に使う。このコマンドはマージ先のブランチをチェックアウトした状態で行う。現在のブランチに対して、リポジトリのコミットをつまみ食いする。

<pre>$ git cherry-pick [-n] &lt;commit&gt;
$ git commit</pre>

コミット名は Git がコミットを追跡するために生成する SHA-1 のハッシュの先頭7文字。-n オプションをつけることで、マージはするがコミットしないように留まる。複数のコミットをチェリーピックする場合にこのオプションを使う。最後にコミットを行う際には -m オプションはつけない。

<h3>コンフリクトが起こったら</h3>

<pre>$ git mergetool
$ git commit</pre>

マージ解決ツールを使用して、コンフリクトを解決しコミットを行う。<em>コミットの時には -m オプションは不要。</em>

<h3>ブランチを統合する（rebase）</h3>

<pre>$ git rebase &lt;branch&gt;</pre>

現在のブランチの履歴を指定したブランチに全部統合して一つの作業履歴のように見せる。

<h4>参考</h4>

<a href="http://progit.org/book/ja/ch3-6.html" class="extlink" target="_blank">Pro Git：リベース</a>

<h2>履歴を使った作業</h2>

<h3>ログを見る</h3>

<pre>$ git log [-p]</pre>

現在のブランチのログを見る。オプション -p を使用すると変更した内容を一緒に表示する。

<h3>バージョン間の違いを見る</h3>

<pre>$ git diff [&lt;option&gt;]</pre>

diff で使えるオプションは、log で使ったリビジョンの範囲指定や修飾子が使える。比較するリビジョンを省略した場合は HEAD との比較になる。<strong>HEAD は、最新のコミット</strong>を表す。

<h3>ファイル内の変更がいつ、誰によって行われたかを知る</h3>

<pre>$ git blame [&lt;option&gt;] &lt;file&gt;</pre>

ファイルの一部だけを表示するには、<em>[-L 開始行,終了行]</em> のように記述する。

<pre>$ git blame -L 12,13 index.html</pre>

これで、index.html の12行目から13行目だけを表示する。

<h3>コミットを取り消す</h3>

<pre>$ git revert [-n] &lt;commit&gt;</pre>

オプション -n をつけることで、巻き戻しを即座にコミットしないようにする。<em>revert をするときは、最新のコミット（HEAD）から順番に巻き戻す</em>ようにする。

<h3>リポジトリからコミットをなかった事にする</h3>

リポジトリをリセットし、コミットをなかった事にする。

<pre>$ git reset (--soft|--hard) &lt;commit&gt; </pre>

オプション --soft は、リセットした内容をステージングエリアに戻してくれる。すなわち、リセットした内容をやり直せる。--hard オプションは即座に消す。コミット名の修飾子には ^ や ~N が使える。<strong>HEAD^ は最新のコミット</strong>を表す。

<h3>前回コミットからの編集をすべてすてて、前回コミットの状態に戻す</h3>

git reset を利用して、次のようにする。

<pre>$ git reset --hard HEAD</pre>

<h2>リモートリポジトリ</h2>

<h3>リモートリポジトリを使って作業を共有する</h3>

<dl><dt>リポジトリ</dt> 
<dd><p>リポジトリは、ローカルのディレクトリにあるかもしれないし、ネットワーク上にあるかもしれない。とにかく、git でコンテンツを格納する場所がリポジトリ。</p></dd> 
<dt>ローカルリポジトリ</dt> 
<dd><p>自分専用のリポジトリ。git init で作ることもできるし、git clone で他の場所にあるリポジトリをコピーすることもできる。</p></dd> 
<dt>リモートリポジトリ</dt> 
<dd><p>git clone でコピーした元のリポジトリのこと。</p></dd> 
<dt>リモートブランチ</dt> 
<dd><p>リモートリポジトリから作成したブランチのこと。リモートブランチはローカルリポジトリにできるが、ローカルブランチとは区別される。origin/master というような表記になり、origin がリモートリポジトリの別名になる。</p></dd>
</dl>

<h4>参考</h4>

<a href="http://progit.org/book/ja/ch3-5.html" target="_blank" class="extlink">ProGit：リモートブランチ</a>

<h3>リモートリポジトリのクローンをつくる</h3>

<pre>$ git clone &lt;repository&gt;</pre>

git clone git@github.com:hamasyou/git_demo.git のように使う。これにより、ローカルリポジトリに master ブランチ、自分のリモートリポジトリに origin/master ブランチが作られる。

<pre class="console">$ <kbd>git clone git@github.com:hamasyou/git_demo.git</kbd>
Initialized empty Git repository in /home/hamasyou/gitdemo/git_demo/.git
remote: Counting objects: 49, done.
remote: Compressing objects: 100% (41/41), done.
remote: Total 49 (delta 7), reused 0 (delta 0)
Receiving objects: 100% (49/49), 5.20 KiB, done.
Resolving deltas: 100% (7/7), done.
$ <kbd>cd git_demo</kbd>
$ <kbd>git branch</kbd>
* master
$ <kbd>git branch -r</kbd>
  origin/HEAD -&gt; origin/master
  origin/master</pre>

git branch -r で自分のリモートリポジトリの一覧が表示される。git clone でリポジトリを作成するとデフォルトで origin という名前でリモートサイトの別名が作られる。また、ローカルブランチに master、リモートブランチに origin/master というブランチが作成される。

Git では誰かがリモートリポジトリを更新すると、自分のリモートブランチ（origin/master）と違う歴史がつくられる。リモートリポジトリの更新を取り込むには、リモートブランチ（origin/master）をリモートリポジトリに再接続しなければならない。そのためのコマンドが <strong>fetch</strong> である。 

<h3>リモートリポジトリの変更を取り込む（fetch）</h3>

リモートブランチを最新の状態にするには fetch コマンドを利用する。

<pre>$ git fetch &lt;repository&gt;</pre> 

git fetch origin のように使う。これにより、リモートリポジトリの更新をリモートブランチに反映させることができる。ただし、<em>リモートブランチを更新しただけではローカルで編集はできない</em>。ローカルブランチにマージする必要がある。

<pre>$ git merge &lt;remote_branch&gt;</pre>

git merge origin/master のように使う。この、fetch と merge を同時に行うものが <em>pull</em> コマンドになる。

<h3>リモートリポジトリのブランチを確認する</h3>

<pre>$ git branch -r</pre> 

これでリモートリポジトリにあるブランチの一覧が表示される。

<pre class="console">$ <kbd>git branch -r</kbd>
  origin/HEAD
  origin/master</pre>

origin というのはローカルとリモートを区別するためのプレフィックスで、clone で作成した作成元のリポジトリに割り当てられるデフォルトのリモートリポジトリ名である。この名前は、.git/config に設定されている。

<ul><li>origin以外のリモートリポジトリを追加する</li></ul> 

<pre>$ git remote add &lt;alias&gt; &lt;url&gt;</pre>

remote add はリモートリポジトリに別名（エイリアス）をつけるコマンド。

<h3>リモートリポジトリに変更をプッシュする（push）</h3>

<pre>$ git push [&lt;repository&gt; &lt;refspec&gt;]</pre>

リポジトリにはリモートリポジトリ名（デフォルトはorigin）を指定することもできるし、リポジトリのアドレスを指定することもできる。リモートリポジトリ名とプッシュするものが省略された場合、リモートリポジトリ名が origin、プッシュするものは現在のブランチ、プッシュ先は現在のブランチに対応するリモートのブランチとなる。

<pre>$ git push origin mybranch:master</pre>

上記のように指定することで、origin リモートリポジトリの master ブランチに、ローカルの mybranch ブランチをプッシュするという指定になる。

<h3>リモートリポジトリから変更をプルする(pull）</h3>

<pre>$ git pull [&lt;repository&gt; &lt;branch&gt;]</pre>

リモートリポジトリ名は git remote add で追加したリポジトリ名を指定する。リモートリポジトリアドレス（git://example.com/example.git）を指定することもできる。現在登録されているリモートリポジトリ名の一覧は git remote show で表示できる。リモートリポジトリ名を削除するには git remote rm &lt;repository&gt; を実行する。

<pre>$ git pull origin master:tmp</pre>

上記のように指定することで、origin リモートリポジトリの master ブランチを、ローカルの tmp ブランチにプルすることができる。<em>push の時と最後の引数の:の順番が違う。</em>

<h3>リモートブランチをローカルブランチの追跡ブランチにする</h3>

git clone を使って作成したリモートリポジトリはデフォルトでリモートブランチの origin/master とローカルブランチの master が追跡状態になる。そのため、master ブランチ上で git push を行うと引数がなくても origin/master に対してプッシュを行う。

master ブランチ以外を追跡ブランチするためには、次のコマンドを使用する。

<pre>$ git checkout --track &lt;remotename&gt;/&lt;branch&gt;</pre>

-----
EXCERPT:

-----
KEYWORDS:
git
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [REST] 認証が必要な API を REST っぽく作るときのメモ
BASENAME: _api_rest
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: REST
CATEGORY: TechMemo
DATE: 11/18/2010 10:23:12 PM
TAGS: REST,RESTful,"Web API",Webサービス
-----
BODY:
REST で Web サービスを構築する場合に、いつも認証が必要なリソースの URI の設計で悩むので、今までの経験上こうしたら上手くいったというのをメモしておきます。

RESTful でもなければ、こんなの世に広めるなよ、害悪だ。っていう批判もあるかもしれませんが、Web の世界でセキュリティと上手く付き合っていくために、セッションを使って認証管理をすると何かといいことが多いので。

あとは、認証が必要な Web API に無理に REST を適用しなくてもいいんじゃないか？ みたいな所もあるかと思いますが。
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

<h2>認証が必要な API を REST っぽく作るメモ</h2>

<h3>REST とは</h3>

<strong>REST</strong> に馴染みのない人はまずこっちをみてください。

<h4>参考</h4>

<ul>
<li><a href="http://yohei-y.blogspot.com/2005/04/rest_23.html" target="_blank" class="extlink">yohei-y:weblog</a></li>
<li><a href="http://hamasyou.com/archives/000343">RESTful Webサービス - それはBooks</a></li>
<li><a href="http://hamasyou.com/archives/000347">Webを支える技術 -HTTP、URI、HTML、そしてREST - それはBooks</a></li>
</ul>

<div class="bookInfo">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/4774142042?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4774142042" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51RHg6crGFL._SL500_AA300_.jpg" width="120" title="Webを支える技術 -HTTP、URI、HTML、そしてREST" /></a>
</div>
<ul><li><em>Webを支える技術 -HTTP、URI、HTML、そしてREST</em></li><li>山本 陽平 (著) </li><li>技術評論社</li></ul>
<div class="clear"></div>
</div>

<div class="bookInfo">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/4873113539?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4873113539" target="_blank"><img src="http://ec2.images-amazon.com/images/I/51ojIhXBP3L._BO2,204,203,200_PIsitb-sticker-arrow-click,-76_AA300_SH20_OU09_.jpg" width="120" title="RESTful Webサービス" /></a>
</div>
<ul><li><em>RESTful Webサービス</em></li><li>Leonard Richardson (著), Sam Ruby (著), 山本 陽平 (監修), 株式会社クイープ (翻訳)</li><li>オライリー・ジャパン</li></ul>
<div class="clear"></div>
</div>

<h3>認証が必要な API の URL 設計</h3>

RESTful なサービスでは、ステートレスが望ましいとされているみたいですが、現実的には認証済みのユーザしかアクセス出来ないリソースや、権限を持っているユーザしか更新できないリソースっていうのも多くあります。

Cookie を使ったセッション管理の罪はステートをサーバ側に保持してしまう、<em>ステートフル</em>な状態をつくってしまうことというのは十分理解した上で、それでもやっぱりセッションで認証状態を管理する方法が分かりやすくて Web 屋には使いやすいと個人的には思っています。

そこで、<em>REST</em> を完全に理解したわけではないし、こういう使い方は多分 RESTful ではないんだろうけれども、セッションで認証情報を使った Web サービスを作る上でのポイントをメモしておきます。

<h2>認証が必要なリソースは、認証済みの状態を元に URI を設計する</h2>

<h3>認証した人から見た URI か誰から見ても同じリソースを表す URI か</h3>

たとえば、Twitter を思い浮かべてください。Twitter API をつかって自分のタイムラインを表示する場合、Twitter では次のような URI を使います。

<pre>http://api.twitter.com/1/statuses/home_timeline.format</pre>

この URI は認証が必要な URI になっています。この URI には&quot;誰の&quot;タイムラインを取得するかの情報は入っておらず、<em>home_timeline</em>、つまり自分のホームのタイムラインを取得する URI になっています。

&quot;自分の&quot;とは、<em>認証した人</em>という意味になります。

この URI は次のような URI になるように設計しても良いはずです。（※ 説明のための例なので、実際に Twitter にこの URI でアクセスしても繋がらないです。）

<pre>http://api.twitter.com/1/statuses/<em>hamasyou</em>/home_timeline.format</pre>

hamasyou のタイムラインを表したリソースです。認証した人が誰かという事は関係なく、常に同じリソースを表すようにしたものです。

ただし、認証した人 = hamasyou ではない場合には、この URI へアクセスしても、401 Unauthorized を返します。

<h3>認証が必要な URI は、認証した人から見た URI になるように設計するほうがよい</h3>

同じリソースを表す URI はいくつあっても構わず、唯一の URI である必要はないというのが REST の考え方ですので、どういうふうに URI を設計してもよいとは思います。

が、僕の経験上ですが、上のような認証が必要なリソースを表す URI は、認証した人から見た URI として設計するのがよいです。

こうしておくと何が良いかというと、<em>セキュリティを保ったままコードがきれいに書けることが多い</em>からです。

<h3>認証が必要なリソースは、常にアクセス権限を意識しなければならない</h3>

Ruby on Rails で作られたブログサービスを例にとります。例えば、次のようなルーティングでアクセスする機能があったとします。

<pre>/blogs/<i>:blog_id</i>/articles/<i>:id</i>.<i>:format</i></pre>

これは、あるユーザが所持する :blog_id のブログの :id で表される記事を取得するルーティングです。このルーティングを定義すると

<pre>
GET     /blogs/<i>:blog_id</i>/articles/<i>:id</i>.<i>:format</i>
POST    /blogs/<i>:blog_id</i>/articles
PUT     /blogs/<i>:blog_id</i>/articles/<i>:id</i>
DELETE  /blogs/<i>:blog_id</i>/articles/<i>:id</i></pre>

という HTTP リクエストと対応する機能のルーティングが定義されます。

この時、GET 以外のリクエストはすべて :blog_id を所持するユーザからのリクエストしか受け付けたくないとします。よくある会員サービスはこういう形になると思います。

<h3>:blog_id はリクエストで送られるべきではなく、認証情報から取得するべき</h3>

上のようなリクエストを受け付けたとき、やりがちなのは次のようなコードです。

<pre class="code">blog = <em><span class="class">Blog</span>.find(params[<span class="literal">:blog_id</span>]</em>
blog.articles.create(params[<span class="literal">:id</span>])</pre>

こうしてしまうと、:blog_id が認証した人の所持するブログと違う場合でも、認証さえ通っていれば別の人のブログの記事を触れてしまうことになります。

これは、正しくは次のようにする必要があります。

<pre class="code">user = <span class="class">User</span>.authenticated_user_from_session
blog = user.blog
blog.articles.create(params[<span class="literal">:id</span>])</pre>

authenticated_user_from_session は認証済みのユーザを取得するメソッドと考えてください。このように、きちんと認証した人に紐づくブログを取り出して、その記事を触るということをする必要があります。

<h3>認証情報から引ける情報を URI に含めると不要な処理が増える</h3>

上で見たように、セキュリティを考慮すると、認証情報から操作対象のリソースを引っ張る必要がでてきます。このとき、URI に :blog_id が含まれていると

<ul><li>「<em>URI に :blog_id が含まれているので、自分以外のブログも更新できるんだな</em>」と考えられてしまったり、</li>
<li>「<em>URI には :blog_id が含まれているけど使わない</em>」という実装になって、URI の表現と挙動が一致しなくなってしまったり、</li>
<li>「<em>認証情報から引けるブログの id と URI の :blog_id を毎回比較してエラーチェックをする</em>」といった不要な処理を書くようになってしまったりします。</li>
</ul>

<h3>RESTful ではないかもしれないけど、認証にセッションをつかうなら</h3>

このように、認証が必要なリソースへのアクセスに、認証情報から引ける情報を含めてしまうと、いろいろとめんどうくさいことになりがちです。なので、個人的におすすめするのが、次のように URI を設計する方法です。

<ul><li>1) リソースごとに認証が必要かどうかを考える</li>
<li>2) 認証が不要なリソースの場合、URI にはリソースへアクセスするのに必要なパラメータをすべて含めるようにする</li>
<li>3) メソッドごとに認証が必要なリソースの場合、認証が必要なメソッドに関しては認証情報から引ける情報は含めないようにする</li>
<li>4) または、認証が必要なリソースを表す URI を別に作成してそちらにリダイレクトする</li></ul>

<pre>2の例)
GET     /wiki/<i>:page_name</i>.<i>:format</i>
PUT     /wiki/<i>:page_name</i>
DELETE  /wiki/<i>:page_name</i></pre>

<pre>3の例)
GET     /blogs/<i>:blog_id</i>/articles/<i>:id</i>.<i>:format</i>
POST    /articles
PUT     /articles/<i>:id</i>
DELETE  /articles/<i>:id</i></pre>

こんなふうに考えると、認証が必要なリソースも上手く扱えるんじゃないかと思います。

他に、上手くやる方法を知っている方がいれば、是非教えていただけると助かります。いつも認証周りの設計で苦労するので。。。

-----
EXCERPT:

-----
KEYWORDS:
REST, RESTful, Webサービス, Web API
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Rails] RSpec でコントローラのテストを記述する例
BASENAME: rspec
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: Rails
CATEGORY: Ruby
CATEGORY: TechMemo
DATE: 11/19/2010 01:44:16 AM
TAGS: Rails3,RSpec,Ruby1.9,サンプル,テストコード
-----
BODY:
Ruby on Railsで、RSpec を使ってコントローラのテストをしたテストコードの例を載せておきます。

環境は、Ruby on Rails3、Ruby1.9.2 を使っています。RSpec の使い方の参考になれば幸いです。
-----
EXTENDED BODY:
<h2>RSpec で Controller のテストを書いてみた</h2>

Ruby on Rails3, Ruby1.9.2 で Controller クラスの RSpec を書いてみました。

Controller でテストしたのは次の3点です。

<ol>
<li>ルーティングが合っているか</li>
<li>処理が通って 200 OK を返すか</li>
<li>処理が通って期待通りの結果（Blog が保存されることによって count がひとつ増える）になっているか</li>
</ol>

<pre class="code"><span class="comment"># coding: UTF-8</span>
<span class="keyword">require</span> <span class="literal">'spec_helper'</span>
 
<span class="keyword">describe</span> <span class="class">BlogsController</span> <span class="keyword">do</span>
  <span class="keyword">describe</span> <span class="literal">&quot;GET /blogs/:id&quot;</span> <span class="keyword">do</span>
    <span class="keyword">describe</span> <span class="symbol">:routes</span> <span class="keyword">do</span>
      subject { {<span class="symbol">:get</span> =&gt; <span class="literal">&quot;/blogs/1&quot;</span>} }
      it { should route_to(<span class="symbol">controller:</span> <span class="literal">&quot;blogs&quot;</span>, <span class="symbol">action:</span> <span class="literal">&quot;show&quot;</span>, <span class="symbol">id:</span> <span class="literal">&quot;1&quot;</span>) }
    <span class="keyword">end</span>
 
    <span class="keyword">before</span> { get <span class="symbol">:show</span>, <span class="symbol">:id</span> =&gt; <span class="literal">&quot;1&quot;</span> }
 
    <span class="keyword">describe</span> <span class="symbol">:response</span> <span class="keyword">do</span>
      subject { response }
      it { should be_success }
    <span class="keyword">end</span>
  <span class="keyword">end</span>
 
  <span class="keyword">describe</span> <span class="literal">&quot;POST /blogs&quot;</span> <span class="keyword">do</span>
    <span class="keyword">def</span> do_post
      post <span class="symbol">:create</span>, <span class="symbol">:article</span> =&gt; <span class="literal">&quot;xxx&quot;</span>
    <span class="keyword">end</span>
 
    <span class="keyword">describe</span> <span class="symbol">:routes</span> <span class="keyword">do</span>
      subject { {<span class="symbol">:post</span> =&gt; <span class="literal">&quot;/blogs&quot;</span>} }
      it { should route_to(<span class="symbol">controller:</span> <span class="literal">&quot;blogs&quot;</span>, <span class="symbol">action:</span> <span class="literal">&quot;create&quot;</span>) }
    <span class="keyword">end</span>
    
    <span class="keyword">before</span> { do_post }
 
    <span class="keyword">describe</span> <span class="symbol">:response</span> <span class="keyword">do</span>
      subject { response }
      it { should be_success }
    <span class="keyword">end</span>
 
    <span class="keyword">describe</span> <span class="symbol">:blog</span>, <span class="symbol">:save</span> <span class="keyword">do</span>
      <span class="keyword">before</span> { controller.stub!(<span class="symbol">:authenticate</span>).and_return(<span class="keyword">true</span>) }
      subject { expect { do_post } }
      it { should change(<span class="class">Blog</span>, <span class="symbol">:count</span>).by(<span class="literal">1</span>) }
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

<h2>ソースコード解説</h2>

<h3>ルーティングのテスト</h3>

<em>describe</em> にはテスト対象を記述しています。コントローラのテストなので、それぞれのルーティングごとにテストを記述しています。

<em>:routes</em> でテストしているのは、期待したリクエスト URL が期待したコントローラの呼び出しになっているかどうかです。

<em>subject</em> にはこのテストの実際のテスト対象で、:routes では、ルーティングリクエストを記述しています。続く it で実際に期待する処理を書いています。should にレシーバを記述しない場合には subject の中身がレシーバになります。

<em>route_to</em> で期待するルーティングを記述してルーティングのテストをしています。

<h3>コントローラの処理が正常に終了するかどうかのテスト</h3>

<em>response</em> オブジェクトを subject にして success を返すかどうかをテストしています。

<h3>コントローラが期待した処理を行ったかどうかをテストする</h3>

コントローラが期待した処理を行ったことを確認するには、二つやり方があると思っています。

ひとつは、<strong>コントローラをブラックボックスにして、コントローラを通る前の状態とコントローラを通った後の状態を比較するやり方</strong>。

もうひとつは、<strong>コントローラをホワイトボックスにして、モックオブジェクを使って should_receive や should_not_receive で期待した処理を通ったかどうかを確認するやり方</strong>。

今回は、一つ目のやり方でテストをしています。これは、should_receive や should_not_receive を使ってテストしてしまうと、リファクタリングでメソッド名を変更した際にテストも直さなければならないからです。

個人的には、コントローラのテストでは should_receive や should_not_receive はあまり使わず、実際にデータベースに書き込みを行ってテストをするのが良いと思っています。（Rails ではテスト用のDBは別に用意されますので）

なお、<em>before</em> では controller.stub! を使って、コントローラに認証が必要な場合に認証を素通りする例を記述しています。

<h2>参考</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/t-wada/20100228/p1" target="_blank" class="extlink">RSpec の入門とその一歩先へ - t-wadaの日記</a></li>
<li><a href="http://rspec.info/" target="_blank" class="extlink">rspec-1.3.1 | rspec-rails-1.3.3 - RSpec</a></li>
<li><a href="http://jp.rubyist.net/magazine/?0021-Rspec" target="_blank" class="extlink">スはスペックのス 【第 1 回】 RSpec の概要と、RSpec on Rails - Rubyist Magazine</a></li>
</ul>
-----
EXCERPT:

-----
KEYWORDS:
Rails3, Ruby1.9, RSpec, テストコード
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Rails] ActiveRecord でツリー関係の関連を定義する
BASENAME: rails_activerecord
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: Rails
CATEGORY: Ruby
CATEGORY: TechMemo
DATE: 11/20/2010 01:54:14 AM
TAGS: ActiveRecord,Rails,Ruby
-----
BODY:
Ruby on Rails で、ActiveRecord を使ってツリー関係の関連を定義する方法のメモです。

ツリー関係を表す関連にはひとつのテーブルで表す方法と関連テーブルを使って表す方法とがありますが、今回は関連テーブルを使ってツリー関係を表す方法のメモです。

環境は Rails3.0.1、ActiveRecord3.0.1 で確認しています。
-----
EXTENDED BODY:
<h2>ActiveRecord でツリー関係を表す方法</h2>

下のようなツリー関係のあるモデルを、<em>belongs_to</em>、<em>has_one</em>、<em>has_many</em> を使って表す方法のメモです。

<img alt="スクリーンショット（2010-11-20 0.58.43）2.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-11-20%200.58.43%EF%BC%892.png" width="693" class="mt-image-none" style="" />

<h3>モデルの説明</h3>

このモデルは、カテゴリ（Category）とカテゴリ関係（CategoryRel）の二つのテーブルを使ってカテゴリのツリー関係を表したものです。

カテゴリ（Category）は親カテゴリを has_one で、サブカテゴリを has_many で保持します。

カテゴリ関連（CategoryRel）は belongs_to で親カテゴリとサブカテゴリをそれぞれ定義しています。

<h4>Category モデル</h4>

<pre class="code">
<span class="keyword">class</span> <span class="class">Category</span> &lt; <span class="class">ActiveRecord::Base</span>
 
  <span class="comment"># 親カテゴリ</span>
  <span class="keyword">has_one</span> <span class="symbol">:parent_rels</span>, <span class="symbol">:class_name</span> =&gt; <span class="literal">&quot;CategoryRel&quot;</span>, <span class="symbol">:foreign_key</span> =&gt; <span class="literal">&quot;sub_category_id&quot;</span>
  <span class="keyword">has_one</span> <span class="symbol">:parent_category</span>, <span class="symbol">:through</span> =&gt; <span class="symbol">:parent_rels</span>, <span class="symbol">:source</span> =&gt; <span class="symbol">:parent_category</span>
 
  <span class="comment"># サブカテゴリ</span>
  <span class="keyword">has_many</span> <span class="symbol">:category_rels</span>
  <span class="keyword">has_many</span> <span class="symbol">:sub_categories</span>, <span class="symbol">:through</span> =&gt; <span class="symbol">:category_rels</span>, <span class="symbol">:source</span> =&gt; <span class="symbol">:sub_category</span>
<span class="keyword">end</span></pre>

<h4>CategoryRel モデル</h4>

<pre class="code">
<span class="keyword">class</span> <span class="class">CategoryRel</span> &lt; <span class="class">ActiveRecord::Base</span>
  <span class="comment"># 親カテゴリ</span>
  <span class="keyword">belongs_to</span> <span class="symbol">:parent_category</span>, <span class="symbol">:class_name</span> =&gt; <span class="literal">&quot;Category&quot;</span>, <span class="symbol">:foreign_key</span> =&gt; <span class="literal">&quot;category_id&quot;</span>
  <span class="comment"># サブカテゴリ</span>
  <span class="keyword">belongs_to</span> <span class="symbol">:sub_category</span>, <span class="symbol">:class_name</span> =&gt; <span class="literal">&quot;Category&quot;</span>, <span class="symbol">:foreign_key</span> =&gt; <span class="literal">&quot;sub_category_id&quot;</span>
<span class="keyword">end</span></pre>

<h3>has_many :through :source</h3>

関連をひとつだけもつ場合には <strong>has_one</strong> を、1対多、多対多 を表す場合には <strong>has_many</strong> を使います。<em>:through</em> オプションと <em>:source</em> オプションはそれぞれ次のような意味です。

<dl>
<dt>:through</dt>
<dd><p>has_many で定義した関連をどういう経路で取得するかを示す。</p></dd>
<dt>:source</dt>
<dd><p>:through で示された経路の先で、どの関連を使用するかを示す。</p></dd>
</dl>

<h3>親カテゴリを表す has_one と外部キーの指定の仕方</h3>

今回の例で見ていくと、カテゴリは親カテゴリを 0 or 1 持ちます。なので、has_one を指定しています。

親カテゴリの定義では、最初に直接の関連であるカテゴリ関連の定義をしています。それが、<code>has_one :parent_rels, :class_name =&gt; &quot;CategoryRel&quot;, :foreign_key =&gt; &quot;sub_category_id&quot;</code> の部分です。

この関連は、:class_name で指定したクラスの関連、すなわちカテゴリ関連になります。カテゴリ関連との関係を <em>:foreign_key</em> で指定しています。親カテゴリは、カテゴリ関連の sub_category_id が自分のIDと一致するレコードのカテゴリのことになるので、:foreign_key には自分のIDと対応するカラムである sub_category_id を指定しています。

<h4>関連のショートカットを定義する</h4>

次に、毎回 parent_rels 関連をたどって親カテゴリオブジェクトを取得するのは面倒くさいので、:through を使ってショートカットを定義しています。それが <code> has_one :parent_category, :through =&gt; :parent_rels, :source =&gt; :parent_category</code> の部分です。

<em>:through</em> にはどの経路を使ってオブジェクトを得るかを指定します。:source には :through でたどった先に関連が二つ以上ある場合にどれを使うかを指定します。カテゴリ関連には親カテゴリとサブカテゴリを表す関連があるので、親カテゴリの関連である :parent_category を指定しています。

<p class="option"><em>:source の考え方</em><br />最初、:source は関連の元（ソース）はどっちか？を表すオプションだと思っていたので、自分のインスタンスから見て自分を表すのはどれか？を指定していましたが、これは間違いです。<br /><br />:source オプションは自分がどっちを表すものではなく、<strong>:through で表される経路の取得先を示す</strong>ものです。なので、自分から見て親カテゴリを表す関連はどっちか？を指定します。</p>

<h3>サブカテゴリを表す has_many</h3>

サブカテゴリも、基本的には親カテゴリと同じです。サブカテゴリは複数取り得るので <em>has_many</em> を指定しています。

最初に直接の関連であるカテゴリ関連を has_many で定義します。定義名のみを書いておくと、ActiveRecord がモデル名の規約から適切に関連を定義してくれます。

今回は、カテゴリ関連の複数形である :category_rels を has_many で定義しているので、ActiveRecord が自動的に CateogryRel モデルの関連を張ってくれます。

次に、<code>has_many :sub_categories, :through =&gt; :category_rels, :source =&gt; :sub_category</code> の定義で category_rels の関連を経由して、カテゴリ関連の :sub_category で定義されている関連をサブカテゴリとして定義しています。

<h2>まとめ</h2>

説明がわかりずらく、逆にわからなくなったかもしれませんが、要は、has_many :through でたどった先に複数の関連がある場合（厳密には規約から推測できない関連があった場合）、:source を使ってどの関連をソースにしてオブジェクトを集めるかを指定する必要があるということです。

-----
EXCERPT:

-----
KEYWORDS:
Rails, ActiveRecord, Ruby, ツリー関係
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Internet Explorer の Web サイト表示フォントを変える方法
BASENAME: internet_explorer_web
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Blog
CATEGORY: Blog
DATE: 11/21/2010 12:24:50 PM
TAGS: "Internet Explorer",Windows,フォント
-----
BODY:
Windows の IE を使っていると、他のブラウザに比べてフォントが汚いと思うことがないですか？

Firefox や Chrome をインストール出来ればそれを使えばいいんですが、会社によっては他のブラウザをインストール出来ないということもあります。

そこで、IE で Web ページのフォントを変更する方法ですが、単に「ツール」-「インターネット オプション」の「フォント(N)」で変更するだけです。

<img alt="スクリーンショット（2010-11-21 12.19.36）.png" src="http://hamasyou.com/blog/archives/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-11-21%2012.19.36%EF%BC%89.png" width="693" class="mt-image-none" style="" />

左側の「Web ページフォント」を変更することで Web ページ上の表示フォントを変えることができます。僕のおすすめは <em>Meiryo UI</em> です。

IE は Web サイトの CSS でフォント指定していても上手く指定が効かなかったりして気分が悪いんですが、ほんと爆発すればいいのにと思う今日この頃です。

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Internet Explorer,フォント,Windows
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Facebook Platform API（Graph API、FQL）
BASENAME: facebook_platform_apigraph_apifql
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Facebook
CATEGORY: Facebook
CATEGORY: TechMemo
DATE: 02/02/2011 07:55:28 PM
TAGS: API,facebook,FQL,"Graph API"
-----
BODY:
Facebook Platform の API についてのメモ。間違っているところがあるかも。。。
-----
EXTENDED BODY:
<h2>ソーシャルグラフとは</h2>

ソーシャルグラフとは、簡単に言うと「<strong>人と人とのつながりを表したもの</strong>」です。Facebook はこのソーシャルグラフにアクセスするための API を提供してくれています。

Facebook が提供してくれている API のうち、ソーシャルグラフにアクセスするための API として <strong>Graph API</strong> と <strong>FQL（Facebook Query Language）</strong>、<strong>Legacy APIs</strong> を提供しています。

Legacy APIs は古い API 群で、Graph API に移行しろと Document で書かれているので今後は使わないほうがいいと思います。

<h2>Graph API</h2>

Graph API は、Facebook のソーシャルグラフにアクセスするための API です。Facebook ではソーシャルグラフ上のオブジェクトを次の二つのカテゴリに分けています。

<ol><li>Objects</li><li>Connections</li></ol>

Graph API は、Objects の Connections をたどって別の Objects を取得するような使い方をします。

<a href="http://developers.facebook.com/docs/reference/api/" target="_blank" class="extlink">Graph API - facebook.com</a>

<h3>Objects</h3>

ソーシャルグラフ上のノードにあたるモノを表します。それぞれ属性（プロパティ）をもちます。

<ul>
<li>Users</li>
<li>Pages</li>
<li>Events</li>
<li>Groups</li>
<li>Applications</li>
<li>Status messages</li>
<li>Photos</li>
<li>Photo albums</li>
<li>Profile pictures</li>
<li>Videos</li>
<li>Notes</li>
<li>Checkins</li>
</ul>

<h3>Connections</h3>

Objects を結ぶ関連を表します。いいね！や自分で付けたタグなどがこれに当たります。

<ul>
<li>Friends</li>
<li>News feed</li>
<li>Profile feed (Wall)</li>
<li>Likes</li>
<li>Movies</li>
<li>Music</li>
<li>Books</li>
<li>Notes</li>
<li>Photo Tags</li>
<li>Photo Albums</li>
<li>Video Tags</li>
<li>Video Uploads</li>
<li>Events</li>
<li>Groups</li>
<li>Checkins</li>
</ul>

<h2>FQL（Facebook Query Language）</h2>

FQL はソーシャルグラフを SQL を使って取得できるような API です。FQL でアクセスできるテーブルは <a href="http://developers.facebook.com/docs/reference/fql/" target="_blank" class="extlink">Facebook Query Language (FQL) - Facebook.com</a> を参考にしてみてください。

FQL を使うと、Graph API で取得することが難しかった「<em>この人がいいね！している写真を30件取得する</em>」のようなことができます。

あと、Graph API と FQL は全く別のものとして考えたほうが良いと思います。同じ like を取得するにしても、Graph API で取得する like と FQL の like テーブルを検索するのでは、思っていたのと違う情報が取れてきます。

Graph API の方の like は API で like を POST したデータが入っていて、例えば facebook 内で大学に対していいね！した情報等が入っています。逆に、FQL の like テーブルに入っているデータは、どうやら facebook の外のサイトでいいね！した情報のみが入っていて、facebook 内で大学等にいいね！すると、page_fan というテーブルに情報が入るようです。

FQL は複数クエリを同時に発行してバッチのように使うこともできます。

<h3>FQL を試す環境</h3>

<a href="http://developers.facebook.com/docs/reference/rest/fql.query" target="_blank" class="extlink">fql.query - facebook.com</a>

<h2>FQL の制約</h2>

<ol>
<li>ひとつのテーブルにしかアクセスできない</li>
<li>インデックスが付いたカラムしか検索条件に指定できない（ただし、user_id カラムなど、ログインユーザのID:me() で指定できる場合もある）</li>
<li>検索条件でテーブルのプライマリーキーを使う場合、存在しない値を検索するとエラーになる</li>
</ol>

特に3.はハマりやすいので注意です。次のクエリはエラーになります。

<pre class="code">SELECT url FROM link WHERE link_id IN (SELECT object_id FROM like WHERE user_id = me())</pre>

link テーブルの link_id は identifier なので、IN で戻ってくる object_id がすべて存在していないといけないのです。結構ハマりやすいので注意！

<section>

<h3>参考</h3>

<a href="http://www.madin.jp/diary/?date=20101214" target="_blank" class="extlink">[Facebook]Facebook アプリ作ろうぜ (その7 Like の取得が面倒な件について、あと FQL について) - コーヒーサーバは香炉である</a>

</section>

-----
EXCERPT:

-----
KEYWORDS:
facebook, Graph API, FQL
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Titanium] JSDeferred を使って現在位置の取得を順次処理する
BASENAME: titanium_jsdeferred
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: JavaScript
CATEGORY: TechMemo
CATEGORY: Titanium
DATE: 02/04/2011 08:32:48 PM
TAGS: JSDeferred,Titanium
-----
BODY:
Titanium で、JSDeferred を使って順次処理するサンプルです。

<blockquote><p>JSDeferredはJavaScript上の，あらゆる非同期処理を扱うライブラリです。&lt;中略&gt; JSDeferredは，このようなコールバックの入れ子による非同期処理を，オブジェクトの連鎖による表現に変形させてあげることで，半分同期処理のような感覚で書くことができるようにします。</p>

<site><a href="http://gihyo.jp/dev/feature/01/jsdeferred/0001" target="_blank" class="extlink">JSDeferredで，面倒な非同期処理とサヨナラ - gihyo.jp</a></site>
</blockquote>

<section>

<section>

<h4>バージョン -- 追記（2011/03/23）</h4>

<dl><dt>Titanium</dt><dd>1.5.1</dd>
<dt>JSDeferred</dt><dd>0.4.0</dd></dl>

Titanium 1.6.1 で動かない問題は、<a href="http://twitter.com/Seasons" target="_blank" class="extlink">@Seasons</a> さんがパッチを書いてくださいました。感謝！！ パッチが公開されたらリンクします！

<a href="http://d.hatena.ne.jp/Seasons/" target="_blank" class="extlink">Seasons.NET</a>

<blockquote><p>@hamasyou どもです^^ 0.4.0を使おうとしたところJSのコンパイルで止まってしまったのでJS初心者ということもあり色々と調べてました^^; ラベル付きブロックが使えない（正しく動作しない）みたいで、repeatの実装のところでJSコンパイルが止まってしまってました。</p>

<p><site>twitter より</site></p>
</blockquote>

</section>

<h3>サンプルコード</h3>

<pre class="code">Titanium.include(Titanium.App.appURLToPath(<span class="str">&quot;app://lib/jsdeferred.js&quot;</span>));
Deferred.define();
 
<span class="keyword">var</span> currentLocation = <span class="keyword">null</span>;
(<span class="keyword">function</span>() {
  <span class="keyword">var</span> deferred = <span class="keyword">new</span> Deferred();
  Titanium.Geolocation.addEventListener(<span class="str">&quot;location&quot;</span>, <span class="keyword">function</span>(e) {
    currentLocation = e.coords;
    deferred.call();
  });
  <span class="keyword">return</span> deferred;
})().
next(<span class="keyword">function</span>() {
  alert(currentLocation);
});
 
alert(<span class="str">&quot;ここは必ずしも、alert(currentLocation)の後に呼び出されるとはかぎらない!&quot;</span>);</pre>

alert(currentLocation) としているところに現在位置を取得した後のコードを記述することで、現在位置を取得して何か処理をするというのを順序を保証して処理することができるようになります。

ただし、next の外側の処理は非同期で進んでしまうため、必ずしも、alert(currentLocation) との順序は保たれません。

</section>

<a href="http://www.appcelerator.com/products/titanium-mobile-application-development/" target="_blank" class="extlink">Titanium Mobile - appcelerator</a>

<a href="http://cho45.stfuawsc.com/jsdeferred/" target="_blank" class="extlink">JSDeferred</a>

<h3>Titanium で include でファイルを読むときのテクニック</h3>

<pre class="code">Titanium.include(Titanium.App.appURLToPath(<span class="str">&quot;app://lib/jsdeferred.js&quot;</span>));</pre>

上記の様に、 app: プロトコルを使用して、appURLToPath メソッドでファイルを読み込むことで、Titanium のResources フォルダからの相対パスで書けるようになります。
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Titanium, JSDeferred
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Titanium 非公式 BBS がオープンしました。
BASENAME: titanium
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Titanium
CATEGORY: Bookmark
CATEGORY: Titanium
DATE: 03/10/2011 11:04:34 AM
TAGS: BBS,Titanium
-----
BODY:
公式の <a href="http://www.appcelerator.com/products/titanium-mobile-application-development/" target="_blank" class="extlink">Titainum</a> 掲示板の公開が遅いので、@masuidrive さんが非公式ながら BBS をオープンしてくださいました。

日本の Titanium Developer のみなさん、Titanium の質問はこっちにすると親切丁寧な回答を期待できるかも！

<section>

<h4>非公式 Titanium BBS</h4>

<a href="http://ti.masuidrive.jp/" target="_blank" class="extlink">Titanium BBS(JP unofficial)</a>

</section>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Titanium, BBS, 非公式
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Ruby から Gmail を受信する（マルチパート編）
BASENAME: ruby_gmail
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Rails
CATEGORY: Rails
CATEGORY: Ruby
CATEGORY: TechMemo
DATE: 03/17/2011 10:24:34 PM
TAGS: Gmail,imap,Ruby
-----
BODY:
Ruby1.9.2 で mail を使って Gmail から添付ファイルやメール本文を受信する方法のメモです。

かなり力技的なところがあるので、もっといいプログラムになると思いいますが、メモということで。

<section>

<h4>バージョン</h4>

<dl><dt>Ruby</dt><dd>1.9.2</dd>
<dt>Rails</dt><dd>3.0.4</dd>
<dt>mail</dt><dd>2.2</dd>
</dl>

</section>

-----
EXTENDED BODY:
<h2>必要なライブラリ</h2>

<h3>mikel / mail</h3>

<pre><a href="https://github.com/mikel/mail" target="_blank" class="extlink">mail</a></pre>

Ruby1.8 までは、TMail というライブラリを使うとメール処理を簡易に書けるようですが、Ruby1.9から文字エンコーディング周りの問題でこのライブラリを使うと良いことを知りました。

<pre class="console">gem install mail</pre>

Rails で使う場合は次のようにします。

<pre class="console">rails plugin install https://github.com/mikel/mail</pre>

<h2>サンプルソースコード</h2>

<pre class="code">require <span class="str">&quot;mail&quot;</span>
 
Mail.defaults <span class="keyword">do</span>
  retriever_method :imap, {<span class="symbol">:address</span> =&gt; <span class="str">&quot;imap.gmail.com&quot;</span>,
                           <span class="symbol">:port</span> =&gt; <span class="num">993</span>,
                           <span class="symbol">:user_name</span> =&gt; <span class="str">&quot;&lt;mailaddress@domain.com&gt;&quot;</span>,
                           <span class="symbol">:password</span> =&gt; <span class="str">&quot;&lt;password&gt;&quot;</span>,
                           <span class="symbol">:enable_ssl</span> =&gt; <span class="keyword">true</span>}
<span class="keyword">end</span>
 
Mail.all(<span class="symbol">:delete_after_find</span> =&gt; <span class="keyword">true</span>).each <span class="keyword">do</span> |email|
  <span class="keyword">begin</span>
    <span class="keyword">if</span> !email.attachments.blank?
      subject = email.subject   <span class="rem"># =&gt; 件名（日本語可OK） UTF-8 で取得できる</span>
      body = email.parts[<span class="num">0</span>].body.to_s.encode(<span class="str">&quot;UTF-8&quot;</span>, <span class="str">&quot;ISO-2022-JP&quot;</span>)    <span class="rem"># =&gt; 本文は UTF-8 に変換する必要がある</span>
      from = email[<span class="symbol">:from</span>]       <span class="rem"># =&gt; &quot;\&quot;濱田 章吾\&quot; hamasyou@gmail.com&quot;</span>
      sent_at = email.date
      email.attachments.each <span class="keyword">do</span> |attachment|
        tmp = File.new(<span class="str">&quot;tmp/photos/#{attachment.filename}&quot;</span>, <span class="str">&quot;wb&quot;</span>)
        tmp &lt;&lt; attachment.read.force_encoding(<span class="str">&quot;UTF-8&quot;</span>)
        tmp.close
      <span class="keyword">end</span>
    <span class="keyword">end</span>
  <span class="keyword">rescue</span> =&gt; ignore
    p <span class="str">&quot;[error]:&quot;</span> + ignore.to_s
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

ここでは、マルチパートの場合メールのパートの最初に本文があることを決め打ちしています。また、メールのエンコーディングが ISO-2022-JP であることも決め打ちしています。

メール本文のエンコーディングを調べて、それを UTF-8 にするようにしたほうが良いです。
-----
EXCERPT:

-----
KEYWORDS:
Ruby, GMail, imap, メール受信
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Rails のコントローラの中で View の画像URLを取得する方法
BASENAME: rails_view_url
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Rails
CATEGORY: Blog
CATEGORY: Rails
CATEGORY: TechMemo
DATE: 06/14/2011 09:09:40 AM
TAGS: Rails3,Ruby1.9
-----
BODY:
コントローラの中で、ビューの image_tag 等で表示される画像の URL を取得したい時があります。

そんな時は <em>view_context</em> が使えます。

<section>

<h4>環境</h4>

<dl><dt>Rails</dt><dd>3.0.7</dd><dt>Ruby</dt><dd>1.9.2-p180</dd><dt>Paperclip</dt><dd>2.3.11</dd></dl>

</section>
-----
EXTENDED BODY:
コントローラの中でビューの image_tag に渡すパスを取得したい時があります。

例えば、Paperclip を使って画像を管理しているときに、外部サービスに Paperclip の画像の URL を渡したい時などです。

Paperclip を使って画像を管理していると、<code>url</code> メソッドで取得できる URL に、コントローラの中では ActionController の AssetHost の設定が付与されません。

そんな時は、<strong>view_context</strong> を使うと、ビューのコンテキストで評価してくれるので、ActionController の AssetHost の設定もきくようになります。

<section>

<h4>コントローラの例</h4>

<pre class="code"><span class="rem">#-*- encoding: utf-8 -*-</span>
 
<span class="keyword">class</span> CallbackController &lt; ApplicationController
  <span class="keyword">def</span> send
    user = User.new
    user.avatar = params[<span class="symbol">:user</span>][<span class="symbol">:avatar</span>]
    user.avatar.url
      <span class="rem"># =&gt; &quot;/users/avatars/4/original_me.jpg&quot;</span>
    <strong>view_context</strong>.image_path(user.avatar.url)
      <span class="rem"># =&gt; &quot;http://image.serverhost/users/avatars/4/original_me.jpg&quot;</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

</section>

<section>

<h4>models/user.rb</h4>

<pre class="code"><span class="keyword">class</span> User &lt; ActiveRecord::Base
  has_attached_file <span class="symbol">:avatar</span>
<span class="keyword">end</span></pre>

</section>

<section>

<h4>application.rb</h4>

<pre class="code"><span class="keyword">require</span> File.expand_path(<span class="str">'../boot'</span>, <span class="keyword">__FILE__</span>)
<span class="keyword">require</span> <span class="str">'rails/all'</span>
Bundler.require(<span class="symbol">:default</span>, Rails.env) <span class="keyword">if</span> <span class="keyword">defined?</span>(Bundler)
 
<span class="keyword">module</span> MyApp
  <span class="keyword">class</span> Application &lt; Rails::Application
    config.action_controller.asset_host = <span class="str">&quot;http://image.serverhost&quot;</span>
    ...(略)...
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>
-----
EXCERPT:

-----
KEYWORDS:
Rails, Ruby, view_context
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: kaminari の paginate_array が便利
BASENAME: kaminari_paginate_array
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Rails
CATEGORY: Blog
CATEGORY: Rails
CATEGORY: Ruby
CATEGORY: TechMemo
DATE: 06/14/2011 09:31:16 AM
TAGS: plugin,Rails,Ruby
-----
BODY:
will_paginate に代わるページングのライブラリ、kaminari ですが、ページングが scope 扱いで配列に対して使えなかったのでちょっと不便なときがあったのですが、なんと paginate_array なるものを発見しました。

<section>

<h4>環境</h4>

<dl><dt>kaminari</dt><dd>0.12.4</dd></dl>

</section>
-----
EXTENDED BODY:
<a href="http://rubygems.org/gems/kaminari" class="extlink" target="_blank">kaminari</a> の <strong>Kaminari.paginate_array</strong> が激しく便利！

もともと、kaminari が扱う page は scope だったかと思います。なので、配列（Array）に対しては使えませんでした。

で、ちょっとソースを見ていたらびっくりするものを発見！

<strong>Kaminari.paginate_array</strong>

なんと、配列をページングできるようになっていました。これで、Entity.all したものもページングできるようになりますね。

使い方は、scope の方の page と同じ。

<pre class="code">Kaminari.paginate_array(array_obj).page(params[<span class="symbol">:page</span>])</pre>

激しくべんり！

<section>

<h4>kaminari の解説で参考になるサイト</h4>

<a href="http://memo.yomukaku.net/entries/238" class="extlink" target="_blank">Kaminariの使い方 Rails3時代のpaginationの標準候補 - YomuKaku Memo</a>

</section>
-----
EXCERPT:

-----
KEYWORDS:
Ruby, kaminari, paginate_array
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: ActiveRecord#previous_changes で変更のあった属性を取り出す
BASENAME: activerecordprevious_changes
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Rails
CATEGORY: Blog
CATEGORY: Rails
CATEGORY: Ruby
CATEGORY: TechMemo
DATE: 06/14/2011 09:43:42 AM
TAGS: ActiveRecord,Rails3
-----
BODY:
ActiveRecord のモデルで変更のあった属性だけを抜き出す方法に、previous_changes メソッドが使える。

<section>

<h4>環境</h4>

<dl><dt>Rails</dt><dd>3.0.7</dd></dl>

</section>
-----
EXTENDED BODY:
ActiveRecord で更新があった属性を取得するメソッドに、previous_changes があります。

これを使えば、データ更新後に、更新した属性のみをメールに書いて送る！みたいな処理が簡単に書けますね。

<dl><dt>previous_changes</dt>
<dd>Returns a Hash of previous changes before the object was persisted, with the attribute names as the keys, and the values being an array of the old and new value for that field.</dd></dl>

<pre class="code">user = User.find(params[<span class="symbol">:id</span>])
user.name
  <span class="rem"># =&gt; &quot;Syougo Hamada&quot;</span>
user.name = <span class="str">&quot;hamasyou&quot;</span>
user.age
  <span class="rem"># =&gt; 28</span>
user.age = <span class="num">29</span>
user.save
 
user.previous_changes
  <span class="rem"># =&gt; {&quot;name&quot;=&gt;[&quot;Syougo Hamada&quot;, &quot;hamasyou&quot;], &quot;age&quot;=&gt;[28, 29]}</span></pre>

-----
EXCERPT:

-----
KEYWORDS:
Rails3, ActiveRecord, previous_changes
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: jpmobile と kaminari を使ったときに invalid byte sequence in Shift_JIS が表示される対応
BASENAME: jpmobile_kaminari_invalid_byte_sequence_in_shift_jis
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Rails
CATEGORY: Blog
CATEGORY: Rails
CATEGORY: Ruby
CATEGORY: TechMemo
DATE: 06/14/2011 11:29:27 AM
TAGS: jpmobile,kaminari,Rails,Ruby
-----
BODY:
jpmobile と kaminari を組み合わせたときに invalid byte sequence in Shift_JIS が表示される問題の原因と対策です。

<section>

<h4>環境</h4>

<dl><dt>Rails</dt><dd>3.0.7</dd><dt>jpmobile</dt><dd>0.1.6</dd><dt>kaminari</dt><dd>0.12.4</dd></dl>

</section>
-----
EXTENDED BODY:
jpmobile の mobile_filter を通して kaminari でページングを行うときに、invalid byte sequence in Shift_JIS エラーが出る場合があります。

これは、kaminari で生成するページングリンク内に、UTF-8 の文字エンコーディングの日本語文字が入っているのが原因です。

kaminari がページリンクを作成するときに、日本語文字をパーセントエンコード（URLエンコード）していて、jpmobile の mobile_filter がエンコードされている文字を UTF-8 だと認識出来ずに表示してしまうのが原因になっています。

この組み合わせで kaminari のページリンク内に日本語パラメータがはいってしまうのは、おそらくフォームのサブミットボタンの value が原因だと思います。

ほとんどの場合、サブミットボタンの value は必要ないと思うので、submit_tag の :name オプションに nil を設定してサブミットボタンの value を送らないようにするといいかと思います。

<pre class="code">&lt;%= form_tag user_path <span class="keyword">do</span> %&gt;
  &lt;%= select_tag <span class="str">&quot;category&quot;</span>, options_from_collection_for_select(Category.all, <span class="symbol">:id</span>, <span class="symbol">:label</span>, params[<span class="symbol">:category</span>]) %&gt;
  &lt;%= submit_tag <span class="str">&quot;表示&quot;</span>, <span class="symbol">:name</span> =&gt; <span class="keyword">nil</span> %&gt;
&lt;% <span class="keyword">end</span> %&gt;</pre>
-----
EXCERPT:

-----
KEYWORDS:
Rails, Ruby, jpmobile, kaminari
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: docomo のユーザエージェントからiモードブラウザ1.0かどうかを判断する方法
BASENAME: docomo_i10
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: TechMemo
CATEGORY: TechMemo
DATE: 07/25/2011 07:24:30 PM
TAGS: 携帯、iモードブラウザ1.0
-----
BODY:
docomo 携帯のユーザエージェントから、iモードブラウザ1.0かどうかを判断する方法

<ul>
<li>UA が DoCoMo/1.0 で始まっている</li>
<li>UA が DoCoMo/2.0 <機種名>(c100; で始まっている</li>
</ul>

DoCoMo/1.0 で始まっているのは、PDC 端末。DoCoMo/2.0 で始まっているのは FOMA 端末になります。

FOMA 端末のうち、iモードブラウザ1.0 なのは、キャッシュサイズが 500KB ではないものになります。<a href="http://www.nttdocomo.co.jp/service/imode/make/content/spec/useragent/" target="_blank" class="extlink">ドコモのユーザエージェント一覧</a>を見る限り、キャッシュが 100KB のものは iモードブラウザ1.0 と判断できます。

Ruby の正規表現で書くとこんな感じ？

<pre class="code"><span class="keyword">def</span> imode1_0?
  request.user_agent =~ /^DoCoMo\/1.0/ ||
  request.user_agent =~ /^DoCoMo\/2.0[^(]+\(c100;/
<span class="keyword">end</span></pre>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
docomo, ユーザエージェント, iモードブラウザ1.0
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [iOS] Game Center を使った対戦プログラミングの手順メモ
BASENAME: iosgame_center
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: iPhone
CATEGORY: Objective-C
CATEGORY: TechMemo
CATEGORY: iPhone
DATE: 08/04/2011 11:38:55 AM
TAGS: "Game Center",iOS
-----
BODY:
iOS 4.1 から、正式に <em>Game Center</em> が使えるようになりました。Game Center を使うと、ゲームに簡単に対戦やスコア、達成目標などの機能を追加できます。

<blockquote>

Game Centerは、プレー中のゲームについての情報をプレーヤー同士で共有したり、ほかのプレー ヤーと一緒にマルチプレーヤー対戦に参加できるソーシャルゲーミングサービスです。Game Center は、ワイヤレスネットワークと携帯電話ネットワークのどちらからでもサービスを提供できます。 Game Centerの主な機能は、次の通りです。

<ul><li><em>認証</em> - プレーヤーはGame Centerでセキュアなアカウントを作成し、iOSベースのデバイスでGame Centerにアクセスできます。</li>
<li><em>友だち</em> - プレーヤーはGame Centerのほかのプレーヤーを友だちとして登録できます。友だちは、最近遊んだゲームなどプレーヤーの詳細情報を確認できます。</li>
<li><em>Leaderboard</em> - プレーヤーのスコアをGame Centerに記録したりGame Centerから取得したりできます。
<li><em>アチーブメント(Achievement、成績)</em> - そのゲームでのプレーヤーのアチーブメントを管理します。アチーブメントは、Game Centerサービスに記録され、Game Centerアプリケーションとゲームの中で閲覧できます。</li>
<li><em>オートマッチ</em> - Game Centerを介して複数のプレーヤーとつながるネットワークゲームを作成できます。プレーヤーは友だちを招待したり、まだ会ったことのないプレーヤーと接続して対戦できます。プレーヤーは、ゲームを実行していないときでも対戦への招待を受信できます。その場合、ゲームが自動的に起動し、招待が処理されます。</li>
<li><em>ボイス</em> - 対戦に接続されたプレーヤー間で音声通信を行うことができます。</li></ul>

<cite>『Game Kit プログラミングガイド』より</cite>

</blockquote>

Game Center を使うためのプログラミングは形式的ながら、視点が二つ（自分と対戦相手）あるため、どの機能が何に当たるのかを理解していないと混乱しがちです。

本記事は、自分で Game Center を使ったアプリを作ったときの、メモをまとめたものです。

<section>

<h4>開発時の環境</h4>

<dl><dt>iOS SDK バージョン</dt><dd>4.3</dd>
<dt>クライアント iOS バージョン</dt><dd>自分: iOS 4.3.2 &nbsp;&nbsp;対戦相手: iOS 4.3.5</dd></dl>

</section>
-----
EXTENDED BODY:
<script type="text/javascript">$(document).ready(function() { create_toc(); });</script>

<h2>Game Center を使った対戦機能開発のメモ</h2>

Game Center を使ったアプリの開発手順は、<a href="http://developer.apple.com/jp/devcenter/ios/library/documentation/GameKit_Guide.pdf" target="_blank" class="extlink">『Game Kit プログラミングガイド』</a> - Apple Developer（PDF）に詳しく載っています。わかりやすい説明で読めば大体理解できると思います。対戦相手とのマッチングの部分だけ、自分と相手がいるのと、非同期で処理がされていくためどのメソッドがどの役割かが最初は混乱するかもしれません。

Leaderboard とアチーブメントはたぶん、そんなに混乱しないはず。

<h2>用語のまとめ</h2>

<dl>
<dt>プレイヤー</dt>
<dd>
<p>Game Center でプレイヤーとは、<strong>GKPlayer</strong> クラスで表される Game Center で認証されたユーザのことを指します。GKPlayer インスタンスの <em>alias</em> プロパティでプレイヤーのニックネームを取得できます。</p>

<p>端末上で認証したプレイヤーのこと（自分自身）を特に <strong>GKLocalPlayer</strong> クラスで表します。GKLocalPlayer からは友だちの一覧などの情報を取得できます。</p>
</dd>
<dt>マッチメイク</dt>
<dd>
<p>対戦相手を探す機能のことです。対戦相手は友だちへのゲーム招待（相手に PUSH 機能で通知がいく）と自動マッチングで探すことができます。</p>

<p>当然ですが、一つのアプリで、招待機能（<em>Request</em>）と招待受理機能（<em>Invite</em>）を実装する必要があります。</p>
</dd>
<dt>GKMatchRequest</dt>
<dd><p>対戦相手を探す際の対戦要求を表すクラス。対戦相手の人数など、細かな条件を設定できます。</p></dd>
<dt>GKInvite</dt>
<dd><p>対戦要求によって招待されたことをあわらすクラスです。</p></dd>
<dt>GKMatch</dt>
<dd><p>マッチングされたネットワークセッションを表すクラスです。このオブジェクトに対してデータを送ることで、通信相手にデータが届きます。</p></dd>
</dl>

<h2>Game Center を使ったプログラミングの手順</h2>

Game Center を使ったプログラミングの流れは次のようになります。

<ol>
<li>Game Center が利用可能かどうかを確認する。一度確認すればよい。[<a href="#title4">コード</a>]</li>
<li>アプリケーション起動時に、できるだけはやく Game Center への認証を済ませる。これは、その後のゲーム招待を処理するために必要。[<a href="#title5">コード</a>]</li>
<li>認証が済んだら、ゲーム招待を処理するハンドラを登録する。<em>ゲーム招待を受理してアプリが起動された場合はアプリのトップ画面が表示されるので、アプリのトップで Game Center の認証を行い、続けてゲーム招待を処理するハンドラを登録するべき。</em>そうしないと、せっかくの招待が無駄になる。[<a href="#title6">コード</a>]</li>
<li>自分で対戦要求を作成する場合は、<strong>GKMatchRequest</strong> を作成してマッチメイク画面を開く。招待された側は、ゲーム招待処理ハンドラが呼び出されて、ゲーム招待（<strong>GKInvite</strong>）を利用してマッチメイク画面を開く。[<a href="#title7">コード</a>]</li>
<li>自分で対戦相手を探す場合は、対戦要求を作成する。[<a href="#title8">コード</a>]</li>
<li>対戦相手が決まったら、コールバックメソッドを実装して対戦を開始する。[<a href="#title9">コード</a>]</li>
<li>対戦相手を自動で決める場合は <strong>GKMatchmaker</strong> の findMatchForRequest メソッドを利用する。（後で書く）</li>
<li>対戦が開始されたら、<strong>GKMatch</strong> に対してデータを送ることで通信ができる。[<a href="#title10">コード</a>]</li>
<li>通信を受け取るには、<strong>GKMatchDelegate</strong> プロトコルを実装し、GKMatch の delegate に設定する。[<a href="#title11">コード</a>]</li>
</ol>

<h2>プログラミングコードの断片</h2>

<h3>Game Center が利用出来るかどうか</h3>

SDK が Game Center に対応しているか（GKLocalPlayer クラスが参照できるかで確認）と iOS が 4.1 以降であるかを確認する。

Game Center が利用出来るかどうかは、最初の一度だけ行えば良い。すなわち、メンバ変数にキャッシュできる。以降、gameCenterAvailable 変数がそれ。

<pre class="code">- (<span class="keyword">BOOL</span>)isGameCenterAvailable
{
  <span class="rem">// Test for Game Center availability</span>
  <span class="class">Class</span> gameKitLocalPlayerClass = NSClassFromString(<span class="str">@&quot;GKLocalPlayer&quot;</span>);
  <span class="keyword">BOOL</span> localPlayerAvailable = (gameKitLocalPlayerClass != <span class="keyword">nil</span>);
  
  <span class="rem">// Test if device is running iOS 4.1 or higher</span>
  <span class="class">NSString</span> *requireSysVer = <span class="str">@&quot;4.1&quot;</span>;
  <span class="class">NSString</span> *currentSysVer = [[<span class="class">UIDevice</span> currentDevice] systemVersion];
  <span class="keyword">BOOL</span> isOSVer41 = ([currentSysVer compare:requireSysVer options:NSNumericSearch] != NSOrderedAscending);
  
  <span class="keyword">return</span> localPlayerAvailable &amp;&amp; isOSVer41;
}</pre>

<h3>Game Center の認証</h3>

authenticateWithCompletionHandler メソッドで Game Center を使って認証できる。認証済みでない場合は、認証ダイアログが表示される。

認証が済んだら、できるだけはやくゲーム招待を処理するためのハンドラを登録する。

<pre class="code">- (<span class="keyword">void</span>)authenticateLocalPlayer 
{
  <span class="keyword">if</span> (gameCenterAvailable) {
    <span class="class">GKLocalPlayer</span> *localPlayer = [<span class="class">GKLocalPlayer</span> localPlayer];
    <span class="keyword">if</span> (!localPlayer.authenticated) {
      [localPlayer authenticateWithCompletionHandler:^(<span class="class">NSError</span> *error) {
        <span class="keyword">self</span>.error = error
        
        <span class="keyword">if</span> (error == <span class="keyword">nil</span>) {
          <span class="rem">// ゲーム招待を処理するためのハンドラを設定する</span>
          [<span class="keyword">self</span> initMatchInviteHandler];
        }
      }];
    }
  }
}</pre>

<h3>ゲーム招待を処理するハンドラを登録する</h3>

<strong>GKMatchmaker</strong> の inviteHandler にブロックを渡すことで、招待が処理された際にコールバックされるようになる。

<blockquote>

<ul><li>acceptedInviteパラメータは、ゲームが別のプレーヤーから直接招待を受け取るとnil以外の値になります。この場合は、ほかのプレーヤーのゲームがすでに対戦要求を作成しています。 そのため、招待された側のデバイスで実行しているアプリケーションで対戦要求を作成する必要はありません。</li>
<li>playersToInviteパラメータは、対戦をホストするGame Centerアプリケーションから直接ゲームが起動されるとnil以外の値になります。このパラメータは、ゲームが対戦に招待すべきプレーヤーを示したプレーヤー識別子の配列を保持します。ゲームは新しい対戦要求を作成し、 通常通りにパラメータを割り当ててから、対戦要求のplayersToInviteプロパティをplayersToInviteパラメータで渡された値に設定する必要があります。マッチメーク画面が表示されると、すでに対戦に参加しているプレーヤーのリストがあらかじめ読み込まれます。</li>
</ul>

<cite>『Game Kit プログラミングガイド』より</cite>

</blockquote>

<pre class="code">- (<span class="keyword">void</span>)initMatchInviteHandler
{
    <span class="keyword">if</span> (gameCenterAvailable) {
    [<span class="class">GKMatchmaker</span> sharedMatchmaker].inviteHandler = ^(<span class="class">GKInvite</span> *acceptedInvite, <span class="class">NSArray</span> *playersToInvite) {
      <span class="rem">// 既存のマッチングを破棄する</span>
      <span class="keyword">self</span>.currentMatch = <span class="keyword">nil</span>;
      
      <span class="keyword">if</span> (acceptedInvite) {
        <span class="rem">// ゲーム招待を利用してマッチメイク画面を開く</span>
        [<span class="keyword">self</span> showMatchmakerWithInvite:acceptedInvite];
      } <span class="keyword">else</span> <span class="keyword">if</span> (playersToInvite) {
        <span class="rem">// 招待するユーザを指定してマッチメイク要求を作成する</span>
        <span class="class">GKMatchRequest</span> *request = [[[<span class="class">GKMatchRequest</span> alloc] init] autorelease];
        request.minPlayers = <span class="num">2</span>;
        request.maxPlayers = <span class="num">2</span>;
        request.playersToInvite = playersToInvite;
        
        [<span class="keyword">self</span> showMatchmakerWithRequest:request];
      }
    };
  }
}</pre>

<h3>マッチメイク画面を開く</h3>

マッチメイク画面を開くには、ViewController が必要。マッチメイク要求（Request）かゲーム招待（Invite）かどちらかを使ってマッチメイク画面を開く。

インターフェースはほとんど同じになる。

<pre class="code">- (<span class="keyword">void</span>)showMatchmakerWithRequest:(<span class="class">GKMatchRequest</span> *)request
{
  <span class="class">GKMatchmakerViewController</span> *viewController = [[[<span class="class">GKMatchmakerViewController</span> alloc] initWithMatchRequest:request] autorelease];
  viewController.matchmakerDelegate = <span class="keyword">self</span>;
  [<span class="keyword">self</span> presentModalViewController:viewController animated:<span class="keyword">YES</span>];
}
 
- (<span class="keyword">void</span>)showMatchmakerWithInvite:(<span class="class">GKInvite</span> *)invite
{
  <span class="class">GKMatchmakerViewController</span> *viewController = [[[<span class="class">GKMatchmakerViewController</span> alloc] initWithInvite:invite] autorelease];
  viewController.matchmakerDelegate = <span class="keyword">self</span>;
  [<span class="keyword">self</span> presentModalViewController:viewController animated:<span class="keyword">YES</span>];
}</pre>

<h3>自分で対戦要求を作成する場合</h3>

自分で対戦要求を作成する場合は、<strong>GKMatchRequest</strong> を作って、マッチメイク画面を表示する。

対戦要求は任意のタイミングで作成すればよい。例えば、メニューで「ふたりで対戦する」ボタンが押されたとき等。

<pre class="code">- (<span class="keyword">void</span>)requestMatch
{
  <span class="class">GKLocalPlayer</span> *localPlayer = [<span class="class">GKLocalPlayer</span> localPlayer];
  <span class="keyword">if</span> (localPlayer.authenticated) {
    <span class="rem">// 対戦相手を決める</span>
    <span class="class">GKMatchRequest</span> *request = [[[<span class="class">GKMatchRequest</span> alloc] init] autorelease];
    request.minPlayers = <span class="num">2</span>;
    request.maxPlayers = <span class="num">2</span>;
    
    [<span class="keyword">self</span> showMatchmakerWithRequest:request];
  }
}</pre>

<h3>対戦相手が決まった際に呼び出されるコールバック</h3>

対戦相手が決まるたびに、呼び出されるコールバックメソッド。これは <strong>GKMatchmakerViewController</strong> の matchmakerDelegate を経由して呼び出される。

コールバックを受け取るには、<strong>GKMatchmakerViewControllerDelegate</strong> プロトコルを実装している必要がある。

matchStarted はゲームがスタートしているかどうかを表すメンバ変数。<em>match.expectedPlayerCount</em> は対戦要求にあと何人の必要プレイヤーがいるかを表す値。0になれば、必要なプレイヤーが揃ったことになる。

<pre class="code">- (<span class="keyword">void</span>)matchmakerViewController:(<span class="class">GKMatchmakerViewController</span> *)viewController didFindMatch:(<span class="class">GKMatch</span> *)match
{
  [<span class="keyword">self</span> dismissModalViewController];
  <span class="keyword">self</span>.currentMatch = match;
  
  <span class="rem">// 全ユーザが揃ったかどうか</span>
  <span class="keyword">if</span> (!matchStarted &amp;&amp; match.expectedPlayerCount == <span class="num">0</span>) {
    matchStarted = <span style="keyword">YES</span>;
    <span class="rem">// ゲーム開始の処理</span>
  }
}</pre>

<h3>対戦相手にデータを送る</h3>

対戦相手がきまり、現在の通信セッションを表す <strong>GKMatch</strong> が取得できたら、GKMatch に対して sendDataToAllPlayers メソッドを呼び出してデータを送信する。

これによって対戦相手にデータが送られる。

GKMatchSendDataUnreliable モードは、いわゆる UDP で送信するイメージ。GKMatchSendDataReliable モードは TCP で送るイメージ。通常は GKMatchSendDataUnreliable でよいはず。

データの内容や型は、アプリ側で好きに決めることができる。ほとんどの場合、カスタムの構造体を作成してデータを送信する。構造体を作れば、sizeof(myData) でバイトサイズを取得できる。

<pre class="code">- (<span class="keyword">void</span>)sendDataToAllPlayers:(<span class="keyword">void</span> *)data sizeInBytes:(<span class="class">NSUInteger</span>)sizeInBytes
{
  <span class="keyword">if</span> (gameCenterAvailable) {
    <span class="class">NSError</span> *error = <span class="keyword">nil</span>;
    <span class="class">NSData</span> *packetData = [<span class="class">NSData</span> dataWithBytes:data length:sizeInBytes];
    [currentMatch sendDataToAllPlayers:packetData withDataMode:GKMatchSendDataUnreliable error:&amp;error];
    <span class="keyword">self</span>.error = error;
  }
}</pre>

<h3>対戦相手からデータを受け取る</h3>

対戦相手からデータを受け取るには、GKMatch のデリゲートに GKMatchDelegate を実装したインスタンスを割り当てます。

対戦相手からデータを受け取った場合には、次のコールバックメソッドが呼び出されます。

<pre class="code">- (<span class="keyword">void</span>)match:(<span class="class">GKMatch</span> *)match didReceiveData:(<span class="class">NSData</span> *)data fromPlayer:(<span class="class">NSString</span> *)playerID
{
  <span class="rem">// データを受け取ってアプリで利用する</span>
}</pre>

<h2>対戦機能をテストする方法</h2>

Game Center の機能をテストするために、Apple はサンドボックス環境を用意してくれています。サンドボックス環境は、シミュレータ上でも実機でもどちらでも使うことができます。

ただし、<strong>シミュレータ上ではマッチメイクの招待の送受信はできません。</strong>マッチメイクのテストをするには、実機を二台用意する必要があります。

実機を二台用意したら次の手順でテストできます。

<ol>
<li>iTunes Connect にアプリを登録して、Game Center 機能を有効にする。<a href="https://itunesconnect.apple.com/docs/iTunesConnect_DeveloperGuide_JP.pdf" target="_blank" class="extlink">『iTuens Connect デベロッパガイド』</a>参照</li>
<li>実機を二台用意する。</li>
<li>それぞれの実機にテストアプリをインストールする。（Xcode 上でデバッグビルドで起動すれば入る）</li>
<li>サンドボックス環境にスイッチするために、テストアプリ内から認証機能を実行する。</li>
<li>アプリを閉じて、Game Center アプリを立ち上げ、サンドボックス環境であることを確認して友だちを招待する</li>
<li>もう一台の実機のほうでもサンドボックス環境にスイッチし、Game Center アプリを開き友だちリクエストを承認する</li>
<li>アプリに戻り、マッチメイク機能をテストする</li>
</ol>

<p class="option">マッチメイクの招待には PUSH 配信を利用するので、実機で Game Center の通知機能をオンするのを忘れずに。</p>

<h3>サンドボックス環境にスイッチする</h3>

もし、すでに Game Center にサインインしている場合は、一度 Game Center アプリを起動して、サインアウトしておきます。

アプリを立ち上げて、認証機能を実行すると、下の図のようなダイアログが表示されます。

<img alt="Game Center 認証画面" src="http://hamasyou.com/blog/archives/images/%E5%86%99%E7%9C%9F.PNG" width="320" height="480" class="mt-image-none" style="" />

Game Center のアカウントを持っていない場合は、ここで開発用のアカウントを作成します。すでに持っている場合は、Use Existing Account を選択して、既存のアカウントでサインインします。

サンドボックス環境と通常の環境とのスイッチは、開発中のアプリケーションでサインインしたかどうかで決まります。アカウントは同じものを使えます。

サンドボックス環境にスイッチできたかどうかは、一度アプリを終了させ、Game Center アプリを起動することで確認できます。

<img alt="GameCenterサンドボックス" src="http://hamasyou.com/blog/archives/images/%E5%86%99%E7%9C%9F%20%281%29.PNG" width="320" height="480" class="mt-image-none" style="" />

<h3>サンドボックス環境で友だちを招待する</h3>

サンドボックス環境の Game Center アプリから、友だちリクエストを送ります。このリクエストは、サンドボックス環境内のアカウントに対して送信されるため、 相手もサンドボックス環境にスイッチする必要があります。

二台目の実機のほうもサンドボックス環境にスイッチして、Game Center アプリを起動すると、リクエストタブに友だちリクエストが着ているはずです。

<h3>サンドボックス環境でマッチメイク機能をテストする</h3>

二台ともサンドボックス環境にスイッチできたら、ゲーム内から友だちを招待して対戦機能をテストできます。

下の図は、<a href="#title8">requestMatch</a> メソッドを呼び出した時の画面です。

<img alt="Game Center マッチメイク画面" src="http://hamasyou.com/blog/archives/images/%E5%86%99%E7%9C%9F%20%282%29.PNG" width="320" height="480" class="mt-image-none" style="" />

<h2>cocos2d 本おすすめ</h2>

<div class="bookInfo"> 
<div class="bookImg"> 
<a href="http://www.amazon.co.jp/gp/product/4844330411?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4844330411" target="_blank"><img src="http://ec2.images-amazon.com/images/I/51gwqeWV-FL._BO2,-76_AA500_SH300_OU09_.jpg" width="120" title="cocos2dで作る iPhone＆iPadゲームプログラミング" /></a> 
</div> 
<ul><li><a href="http://www.amazon.co.jp/gp/product/4844330411?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4844330411" target="_blank" class="extlink"><em>cocos2dで作る iPhone＆iPadゲームプログラミング</em></a></li><li>Steffen Itterheim (著), 畑 圭輔 (監修), 坂本 一樹 (監修), 加藤 寛人 (監修), 高丘 知央 (監修), 株式会社 クイープ (翻訳) </li><li>インプレスジャパン</li></ul> 
<div class="clear"></div> 
</div>

cocos2d は Objective-C で書かれたゲームエンジン、フレームワークです。2D ゲームを作成するに当たっての結構簡単にわかりやすい機能を提供してくれます。

cocos2d は最近 Version 1.0 が正式にリリースされました。<em>OpenGL ES</em> のコードを隠していながら、UIViewController も提供してくれるようになったため、Game Center を使ったアプリともスムーズに連携できるようになりました。

また、『<a href="http://www.amazon.co.jp/gp/product/4844330411?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4844330411" target="_blank" class="extlink">cocos2dで作る iPhone＆iPadゲームプログラミング</a>』の中にも1章まるまるつかって、Game Center を使ったプログラミングの解説がされています。

おすすめの一冊です。
-----
EXCERPT:

-----
KEYWORDS:
iOS, Game Center, Game Kit
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 携帯向けソーシャルアプリ『のほほんビレッジ〜みんなのカフェ〜』をリリースしました。
BASENAME: post_4
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Blog
CATEGORY: Blog
DATE: 09/02/2011 09:17:46 PM
TAGS: GREE,のほほんビレッジ,ソーシャルゲーム
-----
BODY:
<a href="http://hamasyou.com/blog/archives/images/%E7%B4%B9%E4%BB%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%86%E3%82%B9%E3%83%8805.jpg"><img alt="紹介ページテスト05.jpg" src="http://hamasyou.com/blog/archives/assets_c/2011/09/%E7%B4%B9%E4%BB%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%86%E3%82%B9%E3%83%8805-thumb-200x300-58.jpg" width="200" height="300" class="mt-image-none" style="" /></a><a href="http://hamasyou.com/blog/archives/images/%E7%B4%B9%E4%BB%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%86%E3%82%B9%E3%83%8806.jpg"><img alt="紹介ページテスト06.jpg" src="http://hamasyou.com/blog/archives/assets_c/2011/09/%E7%B4%B9%E4%BB%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%86%E3%82%B9%E3%83%8806-thumb-200x300-60.jpg" width="200" height="300" class="mt-image-none" style="" /></a><a href="http://hamasyou.com/blog/archives/images/%E7%B4%B9%E4%BB%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%86%E3%82%B9%E3%83%8807.jpg"><img alt="紹介ページテスト07.jpg" src="http://hamasyou.com/blog/archives/assets_c/2011/09/%E7%B4%B9%E4%BB%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%86%E3%82%B9%E3%83%8807-thumb-200x300-62.jpg" width="200" height="300" class="mt-image-none" style="" /></a>

携帯向けの GREE ソーシャルアプリ『<strong>のほほんビレッジ〜みんなのカフェ〜</strong>』をリリースしました。

このゲームは、のほほん王国を舞台に、自分のカフェを作って仲間を作って生産して調理してデコってクエストしてっていう、
とにかくやれることを盛り込みすぎてしまった、そんなゲームです。

のほほんビレッジは、<a href="http://www.ediva.jp/" target="_blank" class="extlink">株式会社Ediva</a>さんと共同で製作したゲームです。

ゲームの内容は遊んでみてほしいのですが、ゲームの裏側の宣伝を一つ。

このゲームは、よくある Flash ゲームではなく Web のまんまつくっています（Rails を使ってつくりました）。

他のゲームとの差別化として、<em>クエスト</em>の概念を強力に取り入れているのと、memcached をキャッシュとメッセージング（全体メッセージの配信）に使っているところをちょっと強調したいところです。

まぁ、初めてソーシャルゲームを作りましたが、まだまだ納得していないところもあり、いろいろな経験をさせてもらったアプリになっているので、興味があれば遊んでみてください。

<a href="http://mpf.gree.jp/2733" target="_blank" class="extlink">のほほんビレッジ〜みんなのカフェ〜</a>（携帯用アプリトップ）

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
ソーシャルゲーム,GREE
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: 『のほほんビレッジ〜みんなのカフェ〜』の御礼
BASENAME: post_5
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Blog
CATEGORY: Blog
DATE: 09/12/2011 08:16:52 PM
TAGS: ソーシャルゲーム
-----
BODY:
携帯向けの GREE ソーシャルアプリ『<strong>のほほんビレッジ〜みんなのカフェ〜</strong>』を遊んでくださっている皆様、本当にありがとうございます。

のほほんビレッジは、<a href="http://www.ediva.jp/" target="_blank" class="extlink">株式会社Ediva</a>さんと共同で製作したゲームです。

<a href="http://hamasyou.com/blog/archives/images/%E7%B4%B9%E4%BB%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%86%E3%82%B9%E3%83%8805.jpg"><img alt="紹介ページテスト05.jpg" src="http://hamasyou.com/blog/archives/assets_c/2011/09/%E7%B4%B9%E4%BB%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%86%E3%82%B9%E3%83%8805-thumb-200x300-58.jpg" width="200" height="300" class="mt-image-none" style="" /></a>

<a href="http://gree.jp/community/3035925" target="_blank" class="extlink">公式コミュニティ</a>の方にもあげられていますが、<em>皆様からの要望</em>はすべて目を通しています。

要望の中から少しずつですがプログラムを実装して、今後も皆様にお届けしていきたいと思います。

致命的なバグに関しては出来る限り早く、要望の実装は定期メンテナンスで導入という感じで運営していますので、末永くお付き合い下さい。

今回の定期メンテナンスで導入されなかった機能も、次回のメンテナンスには導入されるかも！？というような楽しみ方もしていただけると。。。

<a href="http://mpf.gree.jp/2733" target="_blank" class="extlink">のほほんビレッジ〜みんなのカフェ〜</a>（携帯用アプリトップ）

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
のほほんビレッジ
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Rails] carrierwave と fog で Amazon S3 をストレージとして使う
BASENAME: rails_carrierwave_fog_amazon_s3
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Rails
CATEGORY: Rails
CATEGORY: Ruby
CATEGORY: TechMemo
DATE: 02/21/2012 09:54:24 PM
TAGS: "Amazon S3",plugin,Rails3
-----
BODY:
Rails のプラグイン <a href="https://github.com/jnicklas/carrierwave" target="_blank" class="extlink">carrierwave</a> と fog を使って、<em>Amazon S3</em> をストレージとして使う方法のメモです。

<h3>使用環境</h3>

<ul>
<li>Rails 3.2.1</li>
<li>carrierwave 0.6.0.beta</li>
<li>fog 1.1.2</li>
</ul>

<h3>carrierwave のインストール</h3>

<pre class="console"><kbd>gem install carrierwave</kbd></pre>

<h3>config の書き方</h3>

initializers に carrierwave.rb というファイルを作成し、以下のような設定を書きます。

<pre class="code"><span class="rem">#-*- encoding: utf-8 -*-</span>
 
<span class="keyword">unless</span> Rails.env.test?
  CarrierWave.configure <span class="keyword">do</span> |config|
    config.cache_dir = <span class="str">&quot;#{Rails.root}/tmp/uploads&quot;</span>
    config.storage                          = <em>:fog</em>
    config.fog_credentials                  = {
        :provider              =&gt; <span class="str">'AWS'</span>,
        :aws_access_key_id     =&gt; ENV[<span class="str">&quot;AWS_S3_KEY_ID&quot;</span>],
        :aws_secret_access_key =&gt; ENV[<span class="str">&quot;AWS_S3_SECRET_KEY&quot;</span>]
    }
    config.fog_directory                    = ENV[<span class="str">&quot;AWS_S3_BUCKET&quot;</span>]
    config.fog_public                       = <span class="keyword">false</span>
    config.fog_authenticated_url_expiration = <span class="num">60</span>
  <span class="keyword">end</span>
<span class="keyword">else</span>
  CarrierWave.configure <span class="keyword">do</span> |config|
    config.storage = :file
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>

ENV["AWS_S3_KEY_ID"] にはユーザアクセスID、ENV["AWS_S3_SECRET_KEY"] にはシークレットアクセスキー、ENV["AWS_S3_BUCKET"] にはバケット名をそれぞれ設定する。

各値は、Amazon S3 の設定画面で確認できる。

この設定を行い、carrierwave で Uploader を作成して、ファイルをアップロードすると、S3 にファイルを置くことができる。また、S3 上のファイルの URL には、60秒のタイムアウト設定を掛けており、アプリからのアクセスでのみ参照可能なURLが表示されるようになる。（config.fog_public = false、config.fog_authenticated_url_expiration = 60 の設定）
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Rails3,carrierwave,fog,amazon s3,storage
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Titanium Alloy でつくったアプリをリリースしました
BASENAME: titanium_alloy
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Blog
CATEGORY: Android
CATEGORY: Blog
CATEGORY: iPhone
DATE: 01/22/2013 11:22:51 AM
TAGS: Alloy,Android,iPhone,Titanium,アプリ
-----
BODY:
Titanium Mobile プラットフォームの開発元である Appcelerator が公開している公式のフレームワーク <strong>Alloy</strong> を使って作ったアプリを公開しました。

アプリ紹介ページは下になります。
<a href="http://mountposition.co.jp/obento/" target="_blank" class="extlink">Thankお弁当: http://mountposition.co.jp/obento/</a>

<img alt="phones.png" src="http://hamasyou.com/blog/archives/images/phones.png" width="324" height="367" class="mt-image-none" style="" />

Titanium Mobile は JavaScript を使ってスマホアプリを開発できるプラットフォームです。iPhone や Android 向けのアプリを手軽に開発することが出来ます。

Alloy はそんな Titanium Mobile での開発に規約と規律を導入した MVC フレームワークになります。Ruby On Rails に似てる感じです。

Alloy を使うといろいろいいことがありますが、それはまた別の記事で紹介します。

以上、アプリの宣伝でした！

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Titanium, Alloy, mobile, iPhone, Android, Obento, お弁当
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Sublime Text2 で Titanium Mobile のコード補完を効かせる方法
BASENAME: sublime_text2_titanium_mobile
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: JavaScript
CATEGORY: JavaScript
CATEGORY: SublimeText2
CATEGORY: Titanium
DATE: 01/29/2013 01:23:37 PM
TAGS: SublimeText2,Titanium
-----
BODY:
Qiita にも書きました。 <a href="http://qiita.com/items/ef8c332710960e2730d6" target="_blank" class="extlink">Qiita: http://qiita.com/items/ef8c332710960e2730d6</a>

<h3>1. Package Manager で SublimeCodeIntel をインストールする</h3>

Sublime Text2 の PackageManager を使って SublimeCodeIntel をインストールします。

<h4 class="note">参考</h4>

<a href="http://ready-study-go.blogspot.jp/2011/09/sublime-text-2.html" target="_blank" class="extlink">http://ready-study-go.blogspot.jp/2011/09/sublime-text-2.html</a>


<h3>2. jsca2.js を使って Titanium Mobile の API doc を JavaScript 化する。</h3>

<a href="https://github.com/navinpeiris/jsca2js" target="_blank" class="extlink">jsca2js: https://github.com/navinpeiris/jsca2js</a>

git clone で落としてきて

<pre class="console"><code>./titanium-mobile.py 3.0.0</code></pre>

のように、生成した API のバージョンを指定すればOK。

<h4>Titanium 3.0.0 のコードをインストールする場合の注意</h4>

titanium-mobile.py の中でバージョン毎に参照先の URL を変えるようにしていますが、3.0.0 の API Doc 参照先が間違っています。

なので、URL を修正してあげる必要があります。titanium-mobile.py を開き 23行目辺りにある URL を次のように書き換えます。

<pre class="code"><code>if version.startswith(<span class="literal">'2.'</span>):
  url = <span class="literal">'http://docs.appcelerator.com/titanium/data/'</span> + version + <span class="literal">'/api.json'</span>
else:
  <span class="rem">#url = 'http://developer.appcelerator.com/apidoc/mobile/' + version + '/api.json'</span>
  <em>url = <span class="literal">'http://docs.appcelerator.com/titanium/data/'</span> + version + <span class="literal">'/api.json'</span></em></code></pre>

<h3>3. 生成された titanium-mobile-3.0.0.js を ~/.codeintel/extra にコピーする</h3>

SublimeCodeIntel をインストールすると ~/.codeintel というフォルダが作られているはずです。

追加の補完用コードをまとめるために、extra フォルダを作ってそこに生成された titanium-mobile-3.0.0.js をコピーします。

<h3>4. SublimeCodeIntel に extra フォルダのパスを通す</h3>

~/.codeintel/config を開いて次のコードを追記します。

<pre class="code"><code>{
  "JavaScript": {
    "javascriptExtraPaths": ["~/.codeintel/extra"]
  }
}</code></pre>

これで、 SublimeCodeIntel が JavaScript ファイルで Titanium Mobile のコード補完を行うようになります。

<h3>5. (オプション) CoffeeScript でもコード補完を効かせる</h3>

SublimeCodeIntel が CoffeeScript のコード補完に対応していないので CoffeeScript のシンタックスを JavaScript に設定してやります。

Sublime Text2 の > Preferences > Package Settings > SublimeCodeIntel > Settings - User を開いて次の設定を追加します。

<pre class="code"><code>{
  "codeintel_syntax_map":
  {
    "CoffeeScript": "JavaScript"
  }
}</code></pre>

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Sublime Text2, Titanium Mobile, コード補完
-----

COMMENT:
AUTHOR: wk
EMAIL: 
IP: 202.212.221.208
URL: 
DATE: 01/30/2013 11:11:31 AM
「4. SublimeCodeIntel に extra フォルダのパスを通す」の下記の１文
"javascriptExtraPaths": ["~/.codeintel/extra"]

って

"javascriptExtraPaths": ["~/.codeintel/extra/"]

じゃありません？
-----

COMMENT:
AUTHOR: hamasyou
EMAIL: 
IP: 118.243.84.67
URL: 
DATE: 02/05/2013 10:22:06 AM
"javascriptExtraPaths": ["~/.codeintel/extra"]
だと、動かなかったですか？ 自分の環境だとこれで動いているんですが、最後に / つけても動きますね。

どちらでも大丈夫な気がしますが、SublimeCodeIntl の extraPaths の他の例が見つからないので、どちらとも言えないです。すみません。。。
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: #qiita_sushi に参加した
BASENAME: qiita_sushi
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Blog
CATEGORY: Blog
DATE: 03/04/2013 11:15:09 PM
TAGS: qiita
-----
BODY:
Qiita を運営されている Increments さんが一周年ということで、白ワイン持参で参加させていただきました。

寿司職人が目の前で握ってくれる本格派！

<img alt="qiita_sushi.JPG" src="http://hamasyou.com/blog/images/qiita_sushi.JPG" width="320" class="mt-image-none" style="" />

次の Qiita イベントにも是非参加します！今後とも、エンジニアのためのサービスをガンガンリリースしてもらいたいと思います。うちの会社もエンジニアの会社なので期待しています！

一周年、おめでとうございます！

ちなみに、Qiita イベントの出席者は、Perl 界隈の人と Ruby 界隈の人が半々くらいな感じ。
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
qiita
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: [Titanium]モジュールを使ったアプリで実機転送時にリンカエラーが発生する場合の対処
BASENAME: titanium_1
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: JavaScript
CATEGORY: JavaScript
CATEGORY: Titanium
DATE: 03/05/2013 08:52:09 AM
TAGS: Titanium,モジュール
-----
BODY:
モジュールを作成して、デモアプリ等で利用する際に実機転送時に

<pre><div style="color:red">[ERROR] : ** BUILD FAILED **
[ERROR] : The following build commands failed:
[ERROR] :   Ld build/Debug-iphoneos/gpuimagedemo.app/gpuimagedemo normal armv7
[ERROR] : (1 failure)</div></pre>

のようなエラーが発生する場合がある。
これは、Titanium がビルド時に最適化で利用していない内部モジュールとのリンクを切ってしまうために起こる。

build ディレクトリの下の Xcode のプロジェクトを開くと

<pre><div style="color:red">Undefined symbols for architecture arvm7:
    ...
&quot:_OBJC_CLASS_$_TiUIImageView&quot:, referenced from:
    ...</div></pre>

のようにビルドエラーが発生している。

これを解決するには、モジュールで利用している内部クラスを、JavaScript 側のソースコードに現れるようにする。

例えば、今回の場合だと、TiUIImageView の参照先が見つからないとなっているので JavaScript のコードの方に

<pre class="code"><code><span class="keyword">if</span> (<span class="keyword">false</span>) {
    Ti.UI.createImageView({
        image: <span class="literal">'demo.jpg'</span>
    });
}</code></pre>

のようなコードを加えれば良い。
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:
Titanium, モジュール, リンクエラー
-----


PING:
TITLE: Suggested Reading
URL: http://wiki.antychryst.eu/index.php?title=Picking_The_Right_Health_Care_Insurance_-_Some_Ideas
IP: 94.23.145.88
BLOG NAME: Suggested Reading
DATE: 06/01/2013 03:26:37 AM
[Titanium]モジュールを使ったアプリで実機転送時にリンカエラーが発生する場合の対処 - それはBlog
-----

-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
AUTHOR: hamasyou
TITLE: Railsで手書きの図や絵をプログラムに取り込む方法
BASENAME: rails
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
PRIMARY CATEGORY: Blog
CATEGORY: Blog
CATEGORY: Rails
CATEGORY: Ruby
DATE: 12/03/2013 07:05:46 PM
TAGS: canvas,HTML5,Rails
-----
BODY:
スマホやタブレットが増えてきて、Railsアプリでも手書きで書いた絵や図を取り込みたいというような案件があるのではないでしょうか？手書き画像が保存する方法はいろいろありますが、そのひとつをちょっとメモのため残しておきます。特別なgemとかは必要ありません。使うのは HTML5 の canvas だけです。

-----
EXTENDED BODY:
<h2>環境</h2>

<ul>
<li>Ruby 2.0.0p353</li>
<li>Rails 4.0.1</li>
<li>bundler</li>
</ul>

<h2>手順</h2>

まず、Rails 環境を作成して足場をつくります。

<pre class="console">
&gt; <kbd>rails new blog --skip-bundle</kbd>
      create
      create  README.rdoc
      create  Rakefile
      create  config.ru
      create  .gitignore
      create  Gemfile
      create  app
      create  app/assets/javascripts/application.js
      create  app/assets/stylesheets/application.css
      create  app/controllers/application_controller.rb
      create  app/helpers/application_helper.rb
      create  app/views/layouts/application.html.erb
      create  app/assets/images/.keep
      create  app/mailers/.keep
      create  app/models/.keep
      create  app/controllers/concerns/.keep
      create  app/models/concerns/.keep
      create  bin
      create  bin/bundle
      create  bin/rails
      create  bin/rake
      create  config
      create  config/routes.rb
      create  config/application.rb
      create  config/environment.rb
      create  config/environments
      create  config/environments/development.rb
      create  config/environments/production.rb
      create  config/environments/test.rb
      create  config/initializers
      create  config/initializers/backtrace_silencers.rb
      create  config/initializers/filter_parameter_logging.rb
      create  config/initializers/inflections.rb
      create  config/initializers/mime_types.rb
      create  config/initializers/secret_token.rb
      create  config/initializers/session_store.rb
      create  config/initializers/wrap_parameters.rb
      create  config/locales
      create  config/locales/en.yml
      create  config/boot.rb
      create  config/database.yml
      create  db
      create  db/seeds.rb
      create  lib
      create  lib/tasks
      create  lib/tasks/.keep
      create  lib/assets
      create  lib/assets/.keep
      create  log
      create  log/.keep
      create  public
      create  public/404.html
      create  public/422.html
      create  public/500.html
      create  public/favicon.ico
      create  public/robots.txt
      create  test/fixtures
      create  test/fixtures/.keep
      create  test/controllers
      create  test/controllers/.keep
      create  test/mailers
      create  test/mailers/.keep
      create  test/models
      create  test/models/.keep
      create  test/helpers
      create  test/helpers/.keep
      create  test/integration
      create  test/integration/.keep
      create  test/test_helper.rb
      create  tmp/cache
      create  tmp/cache/assets
      create  vendor/assets/javascripts
      create  vendor/assets/javascripts/.keep
      create  vendor/assets/stylesheets
      create  vendor/assets/stylesheets/.keep
&gt; <kbd>cd blog</kbd>
&gt; <kbd>bundle install --path vendor/bundle</kbd>
Fetching gem metadata from https://rubygems.org/..........
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Installing rake (10.1.0)
Installing i18n (0.6.5)
Installing minitest (4.7.5)
Installing multi_json (1.8.2)
Installing atomic (1.1.14)
Installing thread_safe (0.1.3)
Installing tzinfo (0.3.38)
Installing activesupport (4.0.1)
Installing builder (3.1.4)
Installing erubis (2.7.0)
Installing rack (1.5.2)
Installing rack-test (0.6.2)
Installing actionpack (4.0.1)
Installing mime-types (1.25.1)
Installing polyglot (0.3.3)
Installing treetop (1.4.15)
Installing mail (2.5.4)
Installing actionmailer (4.0.1)
Installing activemodel (4.0.1)
Installing activerecord-deprecated_finders (1.0.3)
Installing arel (4.0.1)
Installing activerecord (4.0.1)
Using bundler (1.3.1)
Installing coffee-script-source (1.6.3)
Installing execjs (2.0.2)
Installing coffee-script (2.2.0)
Installing thor (0.18.1)
Installing railties (4.0.1)
Installing coffee-rails (4.0.1)
Installing hike (1.2.3)
Installing jbuilder (1.5.2)
Installing jquery-rails (3.0.4)
Installing json (1.8.1)
Installing tilt (1.4.1)
Installing sprockets (2.10.1)
Installing sprockets-rails (2.0.1)
Installing rails (4.0.1)
Installing rdoc (3.12.2)
Installing sass (3.2.12)
Installing sass-rails (4.0.1)
Installing sdoc (0.3.20)
Installing sqlite3 (1.3.8)
Installing turbolinks (1.3.1)
Installing uglifier (2.3.2)
&gt; <kbd>bundle exec rails g scaffold post</kbd>
      invoke  active_record
      create    db/migrate/20131203101546_create_posts.rb
      create    app/models/post.rb
      invoke    test_unit
      create      test/models/post_test.rb
      create      test/fixtures/posts.yml
      invoke  resource_route
       route    resources :posts
      invoke  scaffold_controller
      create    app/controllers/posts_controller.rb
      invoke    erb
      create      app/views/posts
      create      app/views/posts/index.html.erb
      create      app/views/posts/edit.html.erb
      create      app/views/posts/show.html.erb
      create      app/views/posts/new.html.erb
      create      app/views/posts/_form.html.erb
      invoke    test_unit
      create      test/controllers/posts_controller_test.rb
      invoke    helper
      create      app/helpers/posts_helper.rb
      invoke      test_unit
      create        test/helpers/posts_helper_test.rb
      invoke    jbuilder
      create      app/views/posts/index.json.jbuilder
      create      app/views/posts/show.json.jbuilder
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/posts.js.coffee
      invoke    scss
      create      app/assets/stylesheets/posts.css.scss
      invoke  scss
      create    app/assets/stylesheets/scaffolds.css.scss
&gt; <kbd>bundle exec rake db:migrate</kbd>
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -> 0.0010s
==  CreatePosts: migrated (0.0011s) ===========================================
</pre>

<code>app/views/posts/_form.html.erb</code> を開いて次のコードを追加します。このコードが手書き入力部分（canvas）になります。

<pre class="code">
  <span class="tag">&lt;canvas <span class="attr">id=</span><span class="value">&quot;paper&quot;</span> <span class="attr">class=</span><span class="value">&quot;paper&quot;</span> <span class="attr">width=</span><span class="value">&quot;400&quot;</span> <span class="attr">height=</span><span class="value">&quot;400&quot;</span> <span class="attr">data-target=</span><span class="value">&quot;#sign&quot;</span>&gt;</span>
    ご利用のブラウザではサインは表示できません。
  <span class="tag">&lt;/canvas&gt;</span>
  <span class="tag">&lt;button <span class="attr">type=</span><span class="value">&quot;button&quot;</span> <span class="attr">name=</span><span class="value">&quot;clearCanvas&quot;</span> <span class="attr">class=</span><span class="value">&quot;clear-canvas&quot;</span>&gt;</span>クリア<span class="tag">&lt;/button&gt;</span>
  <span class="tag">&lt;input <span class="attr">type=</span><span class="value">&quot;hidden&quot;</span> <span class="attr">id=</span><span class="value">&quot;sign&quot;</span> <span class="attr">name=</span><span class="value">&quot;sign&quot;</span> <span class="attr">value=</span><span class="value">&quot;&quot;</span> /&gt;</span>
</pre>

<code>app/assets/javascripts</code> に paint.js.coffee ファイルを作成し、次のコードをコピペします。

<pre class="code">jQuery ($) -&gt;
    screen2client = (e) -&gt;
        [px, py] = <span class="keyword">if</span> e.type.startsWith(<span class="str">'touch'</span>) then [e.originalEvent.touches[<span class="num">0</span>].clientX, e.originalEvent.touches[<span class="num">0</span>].clientY] <span class="keyword">else</span> [e.clientX, e.clientY]
        rect = e.target.getBoundingClientRect()
        {x: px - rect.left, y: py - rect.top}
    drawFlag = <span class="keyword">false</span>
    oldX = <span class="num">0</span>
    oldY = <span class="num">0</span>
    $canvas = $(<span class="str">'#paper'</span>)
    $canvas.<span class="keyword">on</span> <span class="str">'mousedown touchstart'</span>, (e) -&gt;
        drawFlag = <span class="keyword">true</span>
        {x, y} = screen2client(e)
        [oldX, oldY] = [x, y]
    $canvas.<span class="keyword">on</span> <span class="str">'mouseup mouseout touchend touchcancel'</span>, -&gt;
        drawFlag = <span class="keyword">false</span>
        data = $canvas[<span class="num">0</span>].toDataURL()
        $($canvas.data(<span class="str">'target'</span>)).val(data)
    $canvas.<span class="keyword">on</span> <span class="str">'mousemove touchmove'</span>, (e) -&gt;
        <span class="keyword">return</span> unless drawFlag
        {x, y} = screen2client(e)
        context = $canvas[<span class="num">0</span>].getContext(<span class="str">'2d'</span>)
        context.strokeStyle = <span class="str">'#C71C22'</span>
        context.lineWidth = <span class="num">1</span>
        context.beginPath()
        context.moveTo(oldX, oldY)
        context.lineTo(x, y)
        context.stroke()
        context.closePath()
        oldX = x
        oldY = y
        e.preventDefault()
        <span class="keyword">return</span>
    $(<span class="str">'.clear-canvas'</span>).<span class="keyword">on</span> <span class="str">'click'</span>, -&gt;
        context = $canvas[<span class="num">0</span>].getContext(<span class="str">'2d'</span>)
        context.clearRect(<span class="num">0</span>, <span class="num">0</span>, $canvas[<span class="num">0</span>].width, $canvas[<span class="num">0</span>].height)
        $($canvas.data(<span class="str">'target'</span>)).val(<span class="keyword">null</span>)
</pre>

<code>app/assets/javascript/application.js</code> を開き、ファイルの最後に次のコードを追加します。

<pre class="code">
<span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">String</span>.<span class="keyword">prototype</span>.startsWith != <span class="str">'function'</span>) {
    <span class="keyword">String</span>.<span class="keyword">prototype</span>.startsWith = <span class="keyword">function</span>(str) {
        <span class="keyword">return</span> <span class="keyword">this</span>.substring(<span class="num">0</span>, str.length) === str;
    }
}
</pre>


最後に、画像データを受け取って画像ファイルにする処理をコントローラに追加します。<code>app/controllers/posts_controller.rb</code> を開き、<code>def create</code> に次のコードを追加します。

<pre class="code">
f = Tempfile.new([<span class="str">'sign'</span>, <span class="str">'.png'</span>], encoding: Encoding::BINARY)
f.write Base64.decode64(params[:sign].sub(<span class="str">'data:image/png;base64,'</span>, <span class="str">''</span>))
f
</pre>

これで、一時ファイルにキャンバスデータを書き込んでファイル化できます。サーバを起動して <code>http://localhost:3000/posts/new</code> にアクセスして試してみてください。

<img alt="スクリーンショット 2013-12-03 19.36.24.png" src="http://hamasyou.com/blog/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202013-12-03%2019.36.24.png" width="517" height="526" class="mt-image-none" style="" />
-----
EXCERPT:

-----
KEYWORDS:
Rails, canvas, 手書き図, ファイル化
-----


-----
CF50_CF_4: 
CF50_URL: 
CF50_AMAZONURL: 
CF50_CF: 
-----
CF50_CF_5:

-----
--------
