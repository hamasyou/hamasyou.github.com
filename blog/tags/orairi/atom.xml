<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: オライリー | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/orairi/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-14T21:06:28+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[モバイルデザインパターン― ユーザーインタフェースのためのパターン集]]></title>
    <link href="http://hamasyou.com/blog/2012/09/27/487311568X/"/>
    <updated>2012-09-27T11:27:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/09/27/487311568X</id>
    <content type="html"><![CDATA[<p><blockquote><p></p></p><p><p>モバイルアプリのUIパターンを手軽に参照できるリファレンス。主要なプラットフォームで動くモバイルアプリの画面例を400点以上使いながら、ユーザーインタフェースの定番パターンをグラフィカルに解説します。本書で紹介する68個の基本パターンと5個のアンチパターンが、使いやすいモバイルアプリをデザインするうえでクリアしなければならない設計上の課題を解決してくれます。</p></p><p><p><em>掲載UIパターン</em>:ナビゲーション、フォーム、テーブルとリスト、検索、並び替え、フィルター、ツール、グラフ、誘導、フィードバック、アフォーダンス、ヘルプ、アンチパターン</p></p><p><p></p><footer><strong>本書背表紙より</strong></footer></blockquote></p>

<p>本書は、モバイルアプリ（スマートフォン上で動くアプリ）の UI デザインの定石をパターンとして紹介しているものになります。いいアプリを作っても、UI や見た目が悪いとそれだけで価値が下がってしまいます。アプリにとって本当に良い UI デザインを導ける人は、まだまだ少数だと思います。</p>

<p>本書は、そんな良いデザインというのはどういうものなのか、使いやすい UI というのはどういうものなのかを名前をつけてパターン化し紹介しています。内容はとてもグラフィカルなので、かるく読み流すことも出来ますし、中身を熟読してさらに自分流のパターンを産み出していくのも良いと思います。</p>

<p>ますます熱くなってくるであろうモバイルアプリ開発の現場で、デザインができなくて泣いている人にオススメの一冊です。スマートフォンアプリの開発者は、手元に置いておくと便利です。</p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>本書で紹介されているパターンの参考イメージ</h3>


<p><a href="http://www.mobiledesignpatterngallery.com/mobile-patterns.php" rel="external nofollow">Mobile Design Pattern Gallery:UI Patterns for iOS, Android and More</a></p>

<p><a href="http://www.flickr.com/photos/mobiledesignpatterngallery/collections" rel="external nofollow">Mobile Design Pattern Gallery&rsquo;s photostream - flickr</a></p>

<h3>ナビゲーション</h3>




<dl>
<dt>Springboard（スプリングボード）</dt>
<dd><p>起動直後に表示されるメニューが、アプリ利用のきっかけになる。パーソナライズによって表示項目を変えてもよい。各メニュー項目が同じ重要度の場合はグリッドレイアウトを、そうでない場合は変則的なレイアウトを検討する。</p></dd>
<dt>List Menu（リストメニュー）</dt>
<dd><p>起動直後にメニューが並ぶ点は、スプリングボードと同じだが、メニュー項目の名前が長い場合や、サブタイトル等が必要な場合に利用する。</p></dd>
<dt>Tabs（タブ）</dt>
<dd><p>タブは標準的な Web サイトでのナビゲーションパターンに基づいているため、ユーザにとって馴染みが深い。</p></dd>
<dt>Gallery（ギャラリー）</dt>
<dd><p>個々のコンテンツを通じてナビゲーションを行う。コンテンツが頻繁に変わるような場合に利用すると良い。</p></dd>
<dt>Dashboard（ダッシュボード）</dt>
<dd><p>それぞれのデータや指標の要約が一目でわかるため、財務管理、データ分析、マーケティングアプリなどで使える。コンテンツの詰め込みすぎに注意する。</p></dd>
<dt>Metaphor（メタファー）</dt>
<dd><p>最初に表示される画面が何かのメタファーになっているのが特徴で、ゲームなどで使える。また、ユーザのメモをカタログ化したようなアプリにも応用しやすい。分かりにくいメタファーを使ってしまうと使いにくい UI になってしまうため注意。</p></dd>
</dl>




<h4>補助的なナビゲーション</h4>


<p>メニューとしては使いづらいが、一つのコンテンツの補助メニューとして利用しやすいパターン。</p>

<dl>
<dt>Carousel（カルーセル）</dt>
<dd><p>コンテンツをよく見せたい場合に使える。コンテンツの数が多くなった場合（8個以上）は、リスト表示を検討する。</p></dd>
<dt>Expanding List（伸縮リスト）, アコーディオンメニュー</dt>
<dd><p>徐々に詳細なオプション項目を表示させたい場合に適している</p></dd>
</dl>




<h3>テーブルとリスト</h3>




<dl>
<dt>Basic Table（基本的なテーブル）</dt>
<dd><p>行間に細い線を表示したりすると見やすさが向上する。縦の罫線や色の濃い罫線は使わない。文字列は左寄せ、数値は右寄せ。</p></dd>
</dl>




<h3>検索、並び替え、フィルター</h3>




<dl>
<dt>Explicit Search（明示的な検索）</dt>
<dd><p>入力内容をクリアするためのボタンを入力フィールド内に用意する。検索をキャンセルできるボタンを用意する。検索中であることがわかるフィードバックを用意する。</p></dd>
<dt>Dynamic Search（動的な検索）</dt>
<dd><p>アドレス帳、ユーザのメディアライブラリなどの有限なデータ集合に対して、入力ごとに動的に検索を行うパターンは有効になる。</p></dd>
<dt>Saved and Recent Searches（検索結果の履歴）</dt>
<dd><p><em>成功を収めたモバイルインターフェースはいずれも「ユーザの活動を尊重する」というユーザビリティ原則</em>を守っている。</p></dd>
</dl>




<h3>ツール</h3>




<dl>
<dt>Call to Action Button（アクションボタン）</dt>
<dd><p>画面内でユーザに行わせたいアクションが1種類だけの場合、目立つボタンを画面内に用意するとよい。</p></dd>
<dt>Bulk Action（操作の一括実行）</dt>
<dd><p>画面上のコンテンツを一括して実行できるモードを提供する場合、編集モードというのを用意するとよい。編集モードから復帰するための手段も明確に提供する。</p></dd>
</dl>




<h3>誘導</h3>




<dl>
<dt>Tip（ツールチップ）</dt>
<dd><p>ツールチップは対象の機能に隣接して表示されるようにする。</p></dd>
<dt>Tour（ツアー）</dt>
<dd><p>アプリが持つ重要な機能をユーザに明らかにするために使う。ユーザにとってのゴールは何かという観点で設計する。</p></dd>
<dt>Transparency（透過表示）</dt>
<dd><p>画面上のコンテンツに重なった半透明のレイヤーで使用方法を表示する。ユーザが操作を始めたら、レイヤーを非表示にする。</p></dd>
</dl>




<h3>フィードバックとアフォーダンス</h3>




<dl>
<dt>Error Messages（エラーメッセージ）</dt>
<dd><p>モーダルダイアログとして表示するよりも現在内の画面内にメッセージを配置する方が望ましい。</p></dd>
<dt>Tap（タップ）</dt>
<dd><p>立体表現や影をデザインとして取り入れることで、それがタップ可能であることを示せる。</p></dd>
<dt>Flick（フリック）</dt>
<dd><p>表示可能なコンテンツが他にもあるということを示す方法として、フリック可能なことを認識させるという方法もある。</p></dd>
</dl>




<h3>アンチパターン</h3>




<dl>
<dt>Idiot Box（作業を妨げる愚行）</dt>
<dd><p>確認ダイアログを表示するのはもとに戻せない操作をする場合だけにする。</p></dd>
</dl>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ステートフルJavaScript ―MVCアーキテクチャに基づくWebアプリケーションの状態管理]]></title>
    <link href="http://hamasyou.com/blog/2012/09/23/487311554X/"/>
    <updated>2012-09-23T22:05:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/09/23/487311554X</id>
    <content type="html"><![CDATA[<p>本書は、クライアントサイド（ブラウザ）で JavaScript を使ってリッチなアプリを作る際のプラクティスを説明しています。</p>

<p>前半では、JavaScript によるオブジェクト指向開発の方法や MVC 開発の方法を、後半では、JavaScript の MVC デザインパターンに則った、各種ライブラリの説明が行われています。</p>

<p>最近では、ユーザビリティの良いアプリを開発するのに必須なクライアントサイドでの JavaScript の使い方が複雑になってきているように思います。ちょっと jQuery を使って DOM 操作していればよかった頃と比べて、最近では色々なライブラリを組み合わせる必要があったり、クライアントサイドでも MVC パターンが必要になったりと、大変です。</p>

<p>本書は、そんな JavaScript でリッチアプリケーションを作成する際の取っ掛かりを学ぶのに良いと思います。オライリー本なので、読むのが簡単ということはなく、むしろ格式高い感じすらしますが、多少 JavaScript でオブジェクト指向の経験があれば、読み進めるのは難しく無いと思います。</p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>インスタンスメソッド定義のイディオム</h3>


<p>JavaScript ではクラスのプロトタイプに対して関数を追加することでインスタンスメソッドを定義できます。</p>

<pre><code class="javascript">Person.prototype.breath = function() { /* ... */ };
var person = new Person();
person.breath();
</code></pre>

<p>クラスのプロトタイプに <em>fn</em> というエイリアスを設定することが広く行われています。</p>

<pre><code class="javascript">Person.fn = Person.prototype;
Person.fn.run = function() { /* ... */ };
</code></pre>

<h3>関数呼び出しのコンテキスト</h3>


<p>apply() と call() を使うと、関数の呼び出しコンテキストを変更できます。jQuery の API ではイベントハンドラや each() による繰り返しの中で、コンテキスト（this の値）が変更されています。</p>

<pre><code class="javascript">$('.btn').click(function() {
  $(this).hide();
});
</code></pre>

<p>元のコンテキストにアクセスするには、良く self などの名前で this を保存しておき、後で参照する方法がとられます。</p>

<pre><code class="javascript">var self = this;

$('.btn').click(function() {
  self.btnClicked();
});
</code></pre>

<p>apply() を使うと、self を使わなくても同じことができます。</p>

<pre><code class="javascript">var proxy = function(func, context) {
  return (function() {
    return func.apply(context, arguments);
  });
};

$('.btn').click(proxy(function() {
  this.btnClicked();
}, this);
</code></pre>

<p>jQuery の proxy() メソッドがまさしく、これと同じことをしています。</p>

<h3>イベントの発生順序</h3>


<p>ある要素とその祖先の要素が同じ種類のイベントに対してイベントハンドラを登録している場合、先に呼び出されるのはブラウザによって違います。</p>

<p>イベントが呼び出される順番は2種類あり、<strong>イベントキャプチャリング</strong> と<strong>イベントバブリング</strong>になります。</p>

<h4>イベントキャプチャリング</h4>


<p>最も上位（外側）の要素からイベントが発生した要素へとイベントリスナが呼び出されます。つまり、祖先の要素、内側の要素の順番でイベントリスナが呼び出されます。</p>

<h4>イベントバブリング</h4>


<p>イベントが発生した要素（内側）から祖先要素へとイベントリスナが呼び出されます。</p>

<p>W3C の仕様では、addEventListener() の3つめの引数に true を指定するとイベントキャプチャリングで呼び出され、false か 指定しないとイベントバブリングで呼び出されます。</p>

<p>バブリングが行われている際には、イベントオブジェクトの stopPropagation() を呼び出すことによって、バブリングを中止することができます。</p>

<pre><code class="javascript">link.addEventListener('click', function(e) {
  e.stopPropagation();
  /* ... */
});
</code></pre>

<p>ブラウザによってそれぞれのイベントに対するデフォルトのアクションが定義されています。たとえば、リンクのクリックでは、src で指定された URL に遷移する動作や、チェックボックスのクリックで項目が選択状態になる動作などです。</p>

<p>これらのデフォルトのアクションはイベントの伝播が完了した後で実行されます。このデフォルトのアクションを中止するには、 preventDefault() 関数を呼び出します。また、イベントハンドラの戻り値で false を返すことで、preventDefault() を呼び出したのと同じ動作になります。</p>

<pre><code class="javascript">form.addEventListener('submit', function(e) {
  /* e.preventDefault() */
  return confirm('本当に送信しますか？');
});
</code></pre>

<h3>イベントの委譲</h3>


<p>イベントバブリングの性質を考えると、複数ある子孫の要素それぞれにイベントリスナを設定するより、祖先の要素一つだけにイベントハンドラを設定する方が効率がよくなります。</p>

<p>jQuery では、これを delgate() メソッドを使って実装できます。</p>

<pre><code class="javascript">/* 望ましくないコード */
$('ul li').click(function() { /* ... */ });

// こちらのほうが効率が良い
$('ul').delegate('li', 'click', function() { /* ... */ });
</code></pre>

<p>このように、イベント処理を委譲することによるメリットは、動的に追加された要素についても、自動でイベントリスナが適用されることです。</p>

<h3>画面表示時の初期データの読み込み</h3>


<p>ページ上のデータは、最初に読み込まれるページに含まれているか、Ajax や JSONP を使った HTTP リクエストによって事後的に読み込まれます。多くのデータを初期表示時に読み込むのには時間がかかりますが、Ajax や JSONP によるリクエストは、<em>並列処理が可能</em>であるので高速に処理できます。</p>

<p>また、HTTP リクエストで取得したデータは、ローカルのストレージにキャッシュすることができます。ストレージには2種類あり、 <code>localStorage</code> と <code>sessionStorage</code> というオブジェクトでアクセスできます。</p>

<h4>ローカルストレージ</h4>


<p>ブラウザが終了した後も保持される。</p>

<h4>セッションストレージ</h4>


<p>ブラウザが開いている間のみ保持される。</p>

<h3>コントローラと内部状態</h3>


<p>まず言えるのは、<em>DOM 内にモデルの内部状態やその他の情報を保持するべきではありません</em>。頑強な MVC アーキテクチャの実現のためには、内部状態やその他の情報は、コントローラ内に保持させる方がよい。</p>

<p>ビューごとにコントローラを1つずつ用意するというのがよく使われているパターンです。</p>

<h3>リソースとURL</h3>


<p>通常、Ajax などでリソースとなるデータをロードした場合、ブラウザの URL は変化しません。しかし、Web 上の個々のリソースには URL が割り当てられていると考えるのが一般的で、URL が変わらない状況というのは好ましくありません。</p>

<p>そこで、この問題に対しては、内部状態が変化したら URL を変化させるようにします。このとき、よく使われるのが、URL のハッシュ（#以降の文字列）を変更するというものです。ハッシュの値はサーバに送信されないため、ページの再読込を発生させることなく変更できます。</p>

<p>location.hash を使うと、ページのハッシュを取得できます。</p>

<p>主要なブラウザでは、URL のハッシュが変更されたかどうかを調べるのに、hashchange イベントが使えます。</p>

<p>JavaScript で作られたページは、クローラにとってはすべて同じ URL のように見えてしまいます。そこで、Google は、<a href="http://code.google.com/web/ajaxcrawling/index.html" rel="external nofollow">Ajax Crawling</a> という仕様を提案しています。</p>

<h3>Backbone.js ライブラリ</h3>


<p><a href="http://backbonejs.org/" rel="external nofollow"></a> は JavaScript アプリケーションの構築のための優れたライブラリです。Backbone.js も MVC 構造でアプリケーションを作成していきます。</p>

<h2>参考</h2>




<ul><li><a href="http://fingaholic.github.com/posts/2012-06-27-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 1章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-02-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 2章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-17-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 3章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-20-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 4章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-23-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 5章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-25-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 6章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-08-01-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 11章 その1 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-08-07-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 11章 その2 - jekylog</a></li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyベストプラクティス -プロフェッショナルによるコードとテクニック]]></title>
    <link href="http://hamasyou.com/blog/2010/09/17/4873114454/"/>
    <updated>2010-09-17T22:12:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/09/17/4873114454</id>
    <content type="html"><![CDATA[<p>本書は、Ruby プログラミングの中級者向け指南書のようなものです。様々なコーディングテクニック（例えば、順序付き引数の使いどころ、ブロックの使い方、メソッド名のつけ方、メタプログラミング、関数型プログラミングテクニック、プロジェクトでRubyを使う際の慣習などなど）が満載です。</p>

<p>さすがオライリーといえる深い内容になっていて、Ruby を始めたばかりの人よりは、<em>一通り Ruby でプログラミングをしたことがある人、Ruby を使いこなせているのか不安な人が読むと良い</em>と思います。</p>

<p>今すぐ使えるテクニック！とはちょっと違うかもしれませんが、Ruby の動的な振る舞いや柔軟な拡張性を理解してさらに Ruby を使いこなすための一冊になると思います。</p>

<p>なお、<strong>Ruby1.9に対応</strong>していますので、サンプルコードは Ruby1.9で動きますし、最新 Ruby ではどうするの？を一発で解決できるようになっています。</p>

<!-- more -->




<h2>目次</h2>




<ul class="none">
<li>１章 テストでコードを駆動する</li>
<li>２章 美しい API を設計する</li>
<li>３章 動的な機能を使いこなす</li>
<li>４章 テキスト処理とファイル管理</li>
<li>５章 関数型プログラミングのテクニック</li>
<li>６章 うまういかないとき</li>
<li>７章 文化の壁を取り払う</li>
<li>８章 上手なプロジェクトメンテナンス</li>
<li>付録Ａ 後方互換性のあるコードを書く</li>
<li>付録Ｂ Ruby の標準ライブラリを活用する</li>
<li>付録Ｃ Ruby ワーストプラクティス</li>
</ul>




<h2>２章 美しい API を設計する - 覚書</h2>




<h3>メソッドの引数にデフォルト値を持つパラメータが複数ある場合は擬似キーワード引数を使う</h3>


<p>デフォルト値をもつパラメータが複数ある場合は、Ruby の「メソッドの引数の末尾に要素がひとつ以上のハッシュを渡す際は中括弧（{,}）を省略できる」という仕様を利用して、<strong>擬似キーワード引数</strong>が使えます。</p>

<pre><code class="ruby">def hello(name, options = {})
  options = { nickname: "hamasyou", age: 28 }.merge(options)
  p "Hello #{name}! " + options.to_s
end

hello("Syougo")
# =&gt; "Hello Syougo! {:nickname=&gt;"hamasyou", :age=&gt;28}"
hello("Syougo", age: 27)
# =&gt; "Hello Syougo! {:nickname=&gt;"hamasyou", :age=&gt;27}"
</code></pre>

<h3>インターフェースをシンプルにするためのブロック</h3>


<p>Rails の Configuration に使われているオブジェクトショートカットのことです。次のようなコードを</p>

<pre><code class="ruby">server = Server.new

server.handle(/hello/i) { "Hello from server at #{Time.now}" }
server.handle(/goodby/i) { "Goodby from server at #{Time.now}" }
server.handle(/name is (\w+)/) {|m| "Nice to meet you #{m[1]}!" }

server.run
</code></pre>

<p>次のように書けるようにします。</p>

<pre><code class="ruby">Server.run do
  handle(/hello/i) { "Hello from server at #{Time.now}" }
  handle(/goodby/i) { "Goodby from server at #{Time.now}" }
  handle(/name is (\w+)/) {|m| "Nice to meet you #{m[1]}!" }
end
</code></pre>

<p>これを実現するには、次のようなコードになります。</p>

<pre><code class="ruby">class Server
  def self.run(port, &amp;block)
    server = Server.new(port)
    server.instance_eval(&amp;block)
    server.run
  end
end
</code></pre>

<p>インスタンス化したオブジェクトの <em>instance_eval()</em> メソッドにブロックを渡すことで、ブロックをそのインスタンスのコンテキストで実行しています。</p>

<p>この方法を使うと、ブロックはインスタンス化したオブジェクトのコンテキストで実行されるため、ブロックのスコープ内で定義されたローカル変数にしかアクセスできません。つまり、次のコードは<em>動きません</em>。</p>

<pre><code class="ruby">class MyClass
  def nickname
    "hamasyou"
  end

  def my_method
    Server.run do
      p "Hello #{nickname}"
    end
  end
end

MyClass.new.my_method
# =&gt; NameError: undefined local variable or method `nickname' for #&lt;Server:0x000001020478a8&gt;
</code></pre>

<p>この問題を解決するには、ブロックをインスタンスのコンテキストで評価するのではなく、クロージャとして実行すればよいです。</p>

<pre><code class="ruby">class Server
  def self.run(&amp;block)
    server = Server.new
    block.arity &lt; 1 ? server.instance_eval(&amp;block) : block.call(server)
    server.run
  end
end
</code></pre>

<pre><code class="ruby">class MyClass
  def nickname
    "hamasyou"
  end

  def my_method
    Server.run do |server|
      p "Hello #{nickname}"
    end
  end
end

MyClass.new.my_method
# =&gt; "Hello hamasyou"
</code></pre>

<p>block.arity を使ってコードブロックに引数がいくつあるかを調べて、引数がひとつ以上あればブロックをクロージャとして呼び出すようにしています。　</p>

<h3>method? と method! の意味</h3>


<p><section></p>

<h4>method? 疑問符</h4>


<p><em>method?</em> のようにメソッド名の末尾に疑問符（?）をつけるのは目的は、<strong>オブジェクトに何かを問い合わせる</strong>ことになります。条件分岐などにメソッドを利用する際に使えます。</p>

<p>疑問符をつけたメソッドの戻り値は、<em>true</em> か <em>false or nil</em> を返すようにします。</p>

<p></section></p>

<p><section></p>

<h4>method! 感嘆符</h4>


<p><em>method!</em> のようにメソッド名の末尾に感嘆符（!）をつける目的は、<strong>このメソッドは特別だ、「注意しろ！」</strong>になります。</p>

<p><blockquote><p>よくある誤解は、受け取ったオブジェクトを変更することを知らせたいときに感嘆符を使う、というものだ。たいていの場合、感嘆符は私たちに何か警告をするものだからだろう。</p></p><p><p></p><footer><strong>method?とmethod!が何を意味しているか理解しよう - 本書 P.57</strong></footer></blockquote></p>

<p>Ruby の組み込みクラスのメソッドには破壊的メソッドでも感嘆符がついているのとついていないものがあります。</p>

<p>これはすなわち、メソッドに感嘆符をつける目的はこのメソッドが特別であることを知らせるのであって、破壊的であるとか危険であることを知らせるのではないということです。</p>

<p><blockquote><p>したがって、同じようなことをする　foo() メソッドがないのに foo!() メソッドだけがあるのは、あまり意味のないことだ。（中略）感嘆符は必ずしもそのメソッドが<em>破壊的な操作</em>をすることを意味するわけではないと考えると、&hellip;</p></p><p><p></p><footer><strong>本書 P.59</strong></footer></blockquote></p>

<p></section></p>

<h3>２章のポイント</h3>




<h4>引数</h4>




<ul>
<li>options ハッシュによる擬似キーワード引数が使えないか検討する</li>
<li>順序付き引数と options ハッシュを組み合わせて使うときは、配列 splat 演算子（*）は使わない</li>
<li>必須パラメータは、options ハッシュには入れないこと。必須パラメータは順序付き引数として扱う</li>
</ul>




<h4>ブロック</h4>




<ul>
<li>前処理後処理の間に、ブロックを yield するようなヘルパメソッドを検討する</li>
<li>&amp;block と instance_eval() を組み合わせると任意のオブジェクトのコンテキストでブロックを実行できる</li>
<li>yield と block.call の戻り値は、与えられた戻り値と同じにする</li>
</ul>




<h2>３章 動的な機能を使いこなす - 覚書</h2>




<h3>define_method() を使って動的にインスタンスメソッドを定義する</h3>


<p>メソッドを定義するというのは、クラスのインスタンスメソッドを定義するということなので、動的にインスタンスメソッドを定義するにはクラスのスコープで define_method() を呼び出します。</p>

<pre><code class="ruby">class MyClass
  def self.define(method_name, &amp;block)
    define_method(method_name, &amp;block)
  end
end

obj = MyClass.new
obj.hello
# =&gt; NoMethodError: undefined method `hello'

MyClass.define(:hello) do
  "Hello World"
end

obj.hello
# =&gt; "Hello World"
</code></pre>

<h3>define_method() を使って動的にクラスメソッドを定義する</h3>


<p>クラスメソッドを定義するには、クラスの特異クラスにメソッドを定義する必要があります。特異クラスをオープンするには、class &lt;&lt; obj 構文を使います。</p>

<pre><code class="ruby">class MyClass
  def self.define(method_name, &amp;block)
    obj = class &lt;&lt; self; self; end
    obj.send(:define_method, method_name, &amp;block)
  end
end

MyClass.define(:hello) do
  "Hello World"
end

MyClass.hello
# =&gt; "Hello World"
</code></pre>

<p><section></p>

<h4>define_method() は private メソッド</h4>


<p>define_method() は特異クラス上でプライベートになっているため、レシーバを指定して呼び出すには send() メソッドを使う必要があります。</p>

<p></section></p>

<h3>モジュールのメソッドをモジュールのクラスメソッドにする</h3>




<pre>extend self</pre>


<p>extend self を使うと、自信のインスタンスメソッドを特異クラスに定義することになりクラスメソッド化することができます。</p>

<pre><code class="ruby">module MyModule
  extend self

  def hello
    "Hello World"
  end
end

MyModule.hello
# =&gt; "Hello World"
</code></pre>

<h3>３章のポイント</h3>




<ul>
<li>Ruby ではすべてのクラスがオープン。振る舞いを実行時に変更することができる</li>
<li>オブジェクト毎の振る舞いは、class &lt;&lt; obj 構文を使ってオブジェクトの特異クラスにアクセスすることで実装できる</li>
<li>拡張するときはできるだけオブジェクトごとの振る舞いを拡張するほうがよい。obj.extend() を使うようにする</li>
<li>クラスもモジュールも動的につくることができる。メソッドを定義するためのブロックを受け付けるようにする</li>
<li>モジュールをクラスに混ぜるとき、include を使うとインスタンスレベルで利用可能になり、extend を使うとクラスレベルで利用可能になる</li>
<li>フックは特定のクラスやモジュールに実装することができ、それより下位のすべてを捕捉する</li>
</ul>




<h3>３章のまとめ</h3>


<p>３章で学習したことが詰まったコードの読み解きです。</p>

<pre><code class="ruby">module NativeCampingRoutes

  extend self

  def R(url)
    route_lookup = routes

    klass = Class.new
    meta = class &lt;&lt; klass; self; end
    meta.send(:define_method, :inherited) do |base|
      raise "Already defined" if route_lookup[url]
      route_lookup[url] = base
    end
    klass
  end

  def routes
    @routes ||= {}
  end

  def process(url, params = {})
    routes[url].new.get(params)
  end
end

module NativeCampingRoutes
  class Hello &lt; R '/hello'
    def get(params)
      puts "hello #{params[:name]}"
    end
  end

  class Goodbye &lt; R '/goodbye'
    def get(params)
      puts "goodbye #{params[:name]}"
    end
  end
end

NativeCampingRoutes.process('/hello', name: "greg")
# =&gt; hello greg
NativeCampingRoutes.process('/goodbye', name: "joe")
# =&gt; goodbye joe
</code></pre>

<h4>3行目 extend self</h4>


<p>Object#extend は引数で渡されたモジュールのインスタンスメソッドを特異クラスのメソッド（つまり、クラスメソッド）として追加します。</p>

<p>すなわち、この後に続く def で定義されたモジュールのインスタンスメソッドを自身のクラスメソッドに再定義しています。</p>

<h4>6行目 route_lookup = routes</h4>


<p>10行目で呼び出している define_method() メソッドに渡すブロックはクロージャなので、ローカル変数にアクセスできます。define_method() メソッド内で @routes にアクセスしたいので、ローカル変数に格納しています。</p>

<h4>9行目 meta = class &lt;&lt; klass; self; end</h4>


<p>10行目で定義する Class#inherited メソッドは、継承されるクラス（klass）のクラスメソッドとして定義します。クラスメソッドは特異クラスのメソッドとして定義する必要があるので、特異クラスを取り出しています。</p>

<h4>10行目 meta.send(:define_method, :inherited) do |base|</h4>


<p>define_method() メソッドは private メソッドなので、meta.define_method() という呼出はできません。</p>

<p>そこで、send() メソッドを使って private メソッドを呼び出しています。特異クラスである meta に対して inherited メソッド（クラスが継承された際に呼び出されるフックメソッド）を定義しています。</p>

<p>inherited メソッドは、呼び出される際に引数として継承先の子クラス（NativeCampingRoutes::Hello、NativeCampingRoutes::Goodbye）が渡されるので、ブロック引数の base として受け取っています。</p>

<h4>14行目 klass</h4>


<p>R() メソッドは継承元として使うことを想定しているので、クラスを返しています。</p>

<h4>22行目 routes[url].new.get(params)</h4>


<p>routes メソッドで返される @routes ハッシュに対して url をキーにアクセスします。</p>

<p>R() メソッドで @routes[url] に継承先クラスが格納されているので、Class#new を使ってインスタンス化し、get() メソッドを呼び出しています。</p>

<h4>27, 28行目 class Hello &lt; R '/hello'</h4>


<p>定義した NativeCamppingRoutes モジュールのサブクラスとして Hello を定義し、R() メソッドで返される無名クラスを継承しています。</p>

<p>クラスに get() メソッドを定義して、21行目の process メソッドでインスタンス化したオブジェクトから呼び出せるようにしています。</p>

<h2>６章 うまくいかないとき - 覚書</h2>




<h3>データ構造を確認するのに YAML がつかえる</h3>


<p>YAML というデータシリアライゼーションのための標準ライブラリを使うと、データ構造をプリントしてくれる y() メソッドが使えるようになる。</p>

<pre><code class="ruby">require "yaml"

data = { name: "hamasyou", age: 28, address: { zip: "272-0000", pref: "Chiba", city: "Ichikawa" } }
y data
#---
#:name: hamasyou
#:age: 28
#:address:
#  :zip: 272-0000
#  :pref: Chiba
#  :city: Ichikawa
</code></pre>

<h3>テストデータ生成用ライブラリ faker</h3>


<p>テスト用のデータ生成に、Faker というライブラリが使えます。gem install faker でインストールできます。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>sudo gem install faker</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>次のように使います。</p>

<pre><code class="ruby">require "faker"
require "pp"

data = 5.times.map do
  { name: Faker::Name.name, phone: Faker::PhoneNumber.phone_number }
end

pp data
#[{:name=&gt;"Johnathan Lowe III", :phone=&gt;"(859)707-2471 x1926"},
# {:name=&gt;"Lucius Murray", :phone=&gt;"(760)338-6980"},
# {:name=&gt;"Queen Beahan II", :phone=&gt;"1-085-613-9274 x52563"},
# {:name=&gt;"Daniela Boyle", :phone=&gt;"956.964.3848"},
# {:name=&gt;"Mrs. Jarret Wisozk", :phone=&gt;"(760)687-0168 x68429"}]
</code></pre>

<p>Faker で作れるダミーデータには次のようなものがあります。</p>

<table class="table table-bordered">
  <tr><th>クラス</th><th>作れるデータ</th><th>サンプル</th></tr>
  <tr><td>Faker::Address</td><td>住所データ</td><td><ul class="none"><li>zip_code<br/>"15832-6995"</li><li>city<br/>"South Verlie"</li></ul></td></tr>
  <tr><td>Faker::Company</td><td>会社データ</td><td><ul class="none"><li>name<br/>"Carroll, Kuhlman and Glover"</li><li>bs<br/>"orchestrate vertical action-items"</li></ul></td></tr>
  <tr><td>Faker::Internet</td><td>ネットワークデータ</td><td><ul class="none"><li>email<br/>"wiley@andersoncrist.us"</li><li>free_email<br/>"aubree.waters@gmail.com"</li><li>domain_name<br/>"littel.com"</li></ul></td></tr>
  <tr><td>Faker::Lorem</td><td>文章データ</td><td><ul class="none"><li>words<br/>["quaerat", "blanditiis", "qui"]</li><li>sentences<br/>["Maiores dicta sed voluptas corrupti repudiandae eos aliquam eligendi.", "Dolorem eius ut nam esse nihil illum.", "Non sapiente accusamus maiores neque eum est ea."]</li></ul></td></tr>
  <tr><td>Faker::Name</td><td>名前データ</td><td><ul class="none"><li>name<br/>"Nicklaus Swift"</li><li>first_name<br/>"Angus"</li><li>last_name<br/>"Morissette"</li></ul></td></tr>
  <tr><td>Faker::PhoneNumber</td><td>電話番号</td><td><ul class="none"><li>phone_number<br/>"024-597-6027 x86091"</li></ul></td></tr>
</table>


<p>Faker::PhoneNumber::Formats に phone_number() メソッドで返される電話番号のフォーマットの一覧が入っています。テスト時にフォーマットをいじることで、phone_number() メソッドの戻り値の形式を変更できます。</p>

<pre><code class="ruby">Faker::PhoneNumber::Formats = ["(###)##-####", "###-####-####"]
Faker::PhoneNumber::phone_number
# =&gt; "(109)29-6592"
</code></pre>

<h2>７章 文化の壁を取り払う - 覚書</h2>




<h3>ソースコードのエンコーディングを明示する</h3>


<p>Ruby1.9 から多言語対応に注意を払わなければいけなくなりました。<em>M17N（MultilingualizatioN）</em> です。</p>

<p>M17N 可能なプロジェクトで作成するソースコードには、ソースコード中に<strong>マジックコメント</strong>を埋め込む必要があります。</p>

<p>Ruby ソースコード中に #! がない限り、マジックコメントはファイルの一行目に書きます。#! がある場合は2行目に書きます。</p>

<p>マジックコメントのフォーマットは次のとおりです。</p>

<pre># coding: UTF-8</pre>




<pre># -*- coding: utf-8 -*-</pre>




<h3>ファイルを扱う場合</h3>


<p>例えば、EUC-JP で書かれたファイルを UTF-8 で書かれた Ruby のソースコード上で処理したい場合、次のようにします。</p>

<pre><code class="ruby">File.open("euc.txt", encoding: "EUC-JP:UTF-8").each do |line|
  p line
end
</code></pre>

<p><em>encoding:</em> パラメータを指定してファイルを開きます。encoding パラメータは &quot;&lt;ファイルのエンコード&gt;:&lt;処理するソースコードのエンコード&gt;&quot; のように書きます。</p>

<p>例の場合、EUC-JP で書かれた euc.txt ファイルを UTF-8 のソースコードで処理するので、encoding:&quot;EUC-JP:UTF-8&quot; としています。</p>

<p>なお、ファイルのエンコーディングがソースコードのエンコーディングと同じ場合は、encoding: &quot;UTF-8&quot; と書くことができます。</p>

<p class="option">encodingオプションを指定しない場合、Ruby は Encoding#default_external で指定されているエンコーディングでファイルを解釈しようとします。</p>




<h3>バイナリファイルを扱う場合</h3>


<pre><code class="ruby">img = File.read("hoge.png");
</code></pre>

<p>上記のようにバイナリデータを読み込んでいる場合は注意が必要です。Ruby1.9 からは encoding が指定されない場合、<em>Encoding#default_external</em> の値がエンコーディングとして使われます。</p>

<p>そのため、read() メソッドで encoding を指定しないと、中身がバイナリデータであっても default_external のエンコーディングだと解釈されてしまいます。</p>

<p>バイナリデータを読み込む際は、<em>File#binread()</em> メソッドを使うようにします。</p>

<h3>閑話休題</h3>


<p>７章の P.223 に L10N の話題が載っています。そこで見つけたソースコード。</p>

<pre><code class="ruby">data = { given_name: "姉ヶ崎", surname: "寧々" }
Gibberish::Simple.use_language(:ja) do
  p T("{given_name}{surname}", [:name, data]) #=&gt; "姉ヶ崎寧々"
end
</code></pre>

<p>ね、寧々さん！！？</p>

<h2>８章 プロジェクトメンテナンス - 覚書</h2>




<h3>README ファイルに書くとよいこと</h3>




<dl>
<dt>Description（説明）</dt>
<dd>なんのためのプロジェクトなのか、何を解決するものなのか、1〜2段落程度で説明する。</dd>
<dt>Documentation（ドキュメント）</dt>
<dd>プロジェクトの公開 API となっている主要なクラスを2〜3個紹介するとよい。</dd>
<dt>Examples（サンプル）</dt>
<dd>基本的な使い方、何が出来るのか？どうやってクラスを使うのか？の概要を説明するとよい</dd>
<dt>Install（インストール方法）</dt>
<dd>インストール手順が簡単であれば、README にインストール手順を書いておくとよい。</dd>
<dt>Q&amp;A（質問の宛先）</dt>
<dd>自分たちへの質問の方法を記述する。Eメール、電話、会社の住所などなど。</dd>
</dl>




<h3>ライブラリのレイアウト</h3>




<h4>ライブラリディレクトリ</h4>


<p>lib フォルダを作り、ひとつのファイルとひとつのサブディレクトリを用意します。</p>

<p>ひとつのファイルとは、プロジェクト名と同じファイルになっており、依存関係のあるライブラリなどをロードするための出発点としての役割を果たすものになります。</p>

<p>ひとつのサブディレクトリには、プロジェクト名と同じディレクトリ名にしておき、必要なライブラリやソースコードをすべてこの中に閉じ込める。</p>

<pre>
- lib
  - csvparser/
    - ...ライブラリ群...
  - csvparser.rb
</pre>


<p>クラス名とファイル名の対応等は、<a href="http://shugo.net/ruby-codeconv/codeconv.html" rel="external nofollow">Ruby コーディング規約 - Shugo.net</a> 等を参考にする。</p>

<h4>実行ファイル</h4>


<p>実行ファイルは bin ディレクトリに置く。</p>

<h4>テストコード</h4>


<p>テストコードは、test ディレクトリに置く。</p>

<h4>サンプルコード</h4>


<p>サンプルコードがあれば、examples ディレクトリに置く。</p>

<h4>ここまでをまとめると</h4>


<p>次のようなディレクトリ構成になる。</p>

<pre>-Projectルート/
  - README
  - bin/
  - examples/
  - lib/
    - csvparser/
      - ...ソースコード...
    - csvparser.rb
  - test</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インターフェイス指向設計 アジャイル手法によるオブジェクト指向設計の実践]]></title>
    <link href="http://hamasyou.com/blog/2008/07/05/4873113660/"/>
    <updated>2008-07-05T10:40:00+09:00</updated>
    <id>http://hamasyou.com/blog/2008/07/05/4873113660</id>
    <content type="html"><![CDATA[<p>本書は、プログラムにおけるインターフェース設計へアドバイスを与えるものです。GUIやデザインの話ではありません。高凝集度で疎結合な設計を行うためにインタフェース設計をどのように進めたらよいか、どのように考えてインターフェースを作れば良いかなどを説明しています。</p>

<p>システム開発というのは複雑な作業です。その複雑さを少しでも解消するために<strong>分割して統治せよ（Divide and Conquer）</strong>という理論を用いることが良いことだとされています。このときに大切になってくるのが「<strong>凝集度</strong>」と「<strong>結合度</strong>」になります。</p>

<p>凝集度は高いほど良い、つまり責任範囲が明確でが軸ぶれないほどよいです。結合度は低いほど、つまりそっちはそっちで勝手にやっててねとできるほどよいです。高凝集で低結合（英語で言うと「High Cohesion and Low Coupling!」）なプログラム部品にするために必要なのが「<strong>良いインターフェース</strong>」なのです。本書は、この良いインターフェースとは何か？どうやって良いインターフェースを設計するか？を解説するものです。</p>

<p>本書の対象読者は、プログラム経験があり設計に興味がある人、DI（Dependency Injection）って流行ってたけど未だに何が良いのかわからない人、テスト容易性が大事って聞くけどどうやって設計したらいいかわからない人です。</p>

<p>200ページくらいしかなく、かなり薄い本になっていますのでサクサク読めると思いますが、実はあまり詳しい説明というのが載っていません。内容が薄いのではなく、説明が薄いのです。「こんな場合こういう考えでインターフェースを切ると良いよ。作り方は二種類ある。長所はこれで、短所はこれ」みたいな説明が多いように思えました。</p>

<p>それでもかなりの良書の部類に入ると思います。さらっと読んで、良く理解できなかった部分は先輩に聞いたり、Webで質問したりして、自分なりに噛み砕いていく。そういう読み方をする本かなと思います。</p>

<!-- more -->




<h2>本書に出てくるキーワード</h2>




<h3>インターフェイスの三原則</h3>




<ol>
<li>インターフェイス実装は、そのメソッド名が示す通りの処理をしなければならない</li>
<li>インターフェイス実装は他に危害を加えてはならない</li>
<li>インターフェイス実装は、責務を果たせない場合にそれを呼び出し元に伝えねばならない</li>
</ol>


<p>つまり、「名前どおりの処理をし」、「後始末は自分でする、自分がエラーでも他に迷惑をかけない」、「自分で処理できないときは、呼び出し元に誤りをいれる」ということ。</p>

<h3>契約（Contract）、契約による設計（Design By Contract）</h3>


<p>インターフェイスの呼び出し元とインターフェイスとの間で交わされる約束のこと。事前条件、事後条件、不変表明の3つからなる。</p>

<p><strong>事前条件</strong>はインターフェイスの呼び出し元が守らなければならない条件で、事前条件を満たない状態でインターフェイスを呼び出すと正しく動作しない。</p>

<p><strong>事後条件</strong>はインターフェイスが守らなければならない条件で、事前条件を満たした状態で呼び出しが行われた場合に満たさなければならないもの。事後条件を満たせない場合は Java であれば例外をスローしたりする（原則3）</p>

<p><strong>不変表明</strong>はインターフェイスのインスタンスが満たさなければいけない内部状態を表すもの。</p>

<h3>データインターフェイスとサービスインターフェイス</h3>


<p>データインターフェイスとは、属性の設定や取得のメソッドで構成されるインターフェイスのこと。JavaBeans などが該当する。</p>

<p>サービスインターフェイスとは、処理を行うメソッドで構成されるインターフェイスのこと。よくある3階層アーキテクチャのサービス層を司るものや、GUIのボタン押下で呼び出されるメソッドなどを持つもの。</p>

<h3>エンティティ、バウンダリ、コントロール</h3>


<p><strong>エンティティ</strong>は、データインターフェイスに相当する。</p>

<p><strong>バウンダリ</strong>は、サービスインターフェイスに相当する。主に GUI やユーザインターフェイスとして動作する種類のサービスインターフェイス。</p>

<p><strong>コントロール</strong>も、サービスインターフェイスに相当する。主にビジネスロジックやビジネスルール、サービスを処理する種類のサービスインターフェイス。</p>

<h3>ステートフルインターフェイスとステートレスインターフェイス</h3>


<p>インターフェイスも状態を持つことができる。</p>

<p><strong>ステートフルインターフェイス</strong>は、メソッドの呼び出しに順序があり、呼び出し順で状態が変わるもの。</p>

<p><strong>ステートレスインターフェイス</strong>は、メソッドの呼び出しに順序がなく振る舞いが変わらないもの。</p>

<h3>凝集度</h3>


<p>責務の似具合のこと。共通のコンセプトに基づいたメソッドばかりで構成されたインターフェイスは凝集度が高いといえる。</p>

<h3>結合度</h3>


<p>相手がいないと動作できない具合のこと。相手のモジュールの処理に依存していない場合には結合度が低いといえる。</p>

<h3>継承とインターフェイス</h3>


<p>継承は機能の連鎖。is_a （である）や is_kind_of （の一種である） で表されることが多い。共通の処理や属性をまとめる際に使える。</p>

<p>インターフェイスはロールの連鎖。インターフェイスの継承は provides-a （提供する）で表されることが多い。</p>

<p>（適当に書いてみたけど、説明が難しいというか感覚的な感じなので、本書を読んでください。。。）</p>

<h3>手続き型インターフェイスとドキュメント型インターフェイス</h3>


<p>リモートインターフェイスとしてのインターフェイスを考える際の種類。</p>

<p><strong>手続き型インターフェイス</strong>は、メソッドの処理を定義するタイプのインターフェイス。CORBA や RMI なんかがそれ。</p>

<p><strong>ドキュメント型インターフェイス</strong>は、データメッセージをやり取りするタイプのインターフェイス。JSON や XML なんかがこれに当たる。</p>

<h2>感想</h2>


<p>良書だと思いました。ただし、インターフェイスってこういうものだっていう考えがある人が読まないと、頭が混乱してくる気がしました。それは、インターフェイスという言葉がいろいろな意味で使われているからです。Java のインターフェイスを表していることもあれば、相手とのやり取りそのものをインターフェイスといったり、メソッド定義もインターフェイス定義だよねというような、広い意味でインターフェイスといったりと。</p>

<p>インターフェイス設計の総おさらいのような感じで読むこともできるし、おお！こんな考え方があったのか！という新しい発見もあるしという感じです。</p>

<h3>本書には書いてなかった気がするもの</h3>




<h4>インターフェイスの定義は呼び出し元がするべし！</h4>


<p>これは私の持論（？）ですが、インターフェイスの定義というものは、使う側が指定するべきだと思っています。哲学とか入ってきてしまいますが、「自分が今ここにいるのは、他人がそう認識しているから」というイメージです。</p>

<p>「<a href="http://blog.goo.ne.jp/glass-_-onion/e/91d51585d966f1a005f957eacacc01de" rel="external nofollow">依存関係逆転の法則</a>」的な考え方ともいえると思います。</p>

<dl>
<dt class="tips">Tips</dt>
<dd>「<strong>インターフェイスが変わるときは、ユーザの要求が変わったときである。</strong>」</dd> 
</dl>




<h2>参考</h2>




<div class="rakuten">
<table  width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797347783/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful Webサービス]]></title>
    <link href="http://hamasyou.com/blog/2007/12/28/4873113539/"/>
    <updated>2007-12-28T02:04:00+09:00</updated>
    <id>http://hamasyou.com/blog/2007/12/28/4873113539</id>
    <content type="html"><![CDATA[<p><strong>REST</strong> とは リソースの状態を表す「何か」を転送するということを表した、Webアーキテクチャスタイルです。REST はアーキテクチャではなく、アーキテクチャのスタイルであり、実際に REST スタイルのアーキテクチャとして、ROA（リソース指向アーキテクチャ）などがあります。</p>

<p>本書は、この REST と ROA に関して解説されたもので、RESTful なシステム（REST スタイルに則ったシステム）の設計方針、ROA の考え方などが解説されています。</p>

<p>Web アプリケーション開発をこれまでしてきた中で、RESTful や ROA な考えでシステムを設計したことがない人には、新しい発見があり、とてもわくわくして読むことが出来ます。</p>

<p>本書は、特に、Web アプリケーションの設計者、アーキテクトの方が読むと良いと思います。最近話題の REST の詳細を理解したい人、RESTful システムを構築したい人、ROA の考え方を取り入れたい人に本書はお勧めです。</p>

<p>オライリーっぽいちょっとお堅い文章ですが、楽しく読めると思います。『<a href="http://www.amazon.co.jp/gp/product/4774133310?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774133310" rel="external nofollow">WEB+DB PRESS vol.42</a>』の現場で使える REST の記事を読んで、REST とは何か？ ROA とは何か？の概要を抑えてから読むと、理解が早いと思います。</p>

<p>お勧めです。</p>

<h4>参考</h4>


<p><a href="http://yohei-y.blogspot.com/2005/04/rest_23.html" rel="external nofollow">yohei-y:weblog</a></p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>RESTとは</h3>


<p>REST とは、リソースの状態を表した「何か」を転送するということを表した、Web アーキテクチャスタイルです。REST は Representational State Transfer の略で「表現可能な状態」を「転送する」という意味を表しています。</p>

<p><blockquote><p>たとえば、商品在庫一覧.htmlというファイルがあるとします。これは商品という「リソース」が在庫であるという「状態」を、HTML形式で「表現」していると見なせます。このHTMLファイルをサーバからブラウザに「転送」するから、「表現可能な状態」を「転送」している、つまり Representational State Transfer なのです。</p></p><p><p></p><footer><strong>『<a href="http://www.amazon.co.jp/gp/product/4774133310?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774133310" rel="external nofollow">WEB+DB PRESS vol.42 RESTとはなにか</a>』</strong></footer></blockquote></p>

<p>REST はアーキテクチャのスタイルであり、REST というアーキテクチャがあるわけではありません。REST スタイルのアーキテクチャの一つに、ROA（Resource Oriented Architecture:リソース指向アーキテクチャ）というものがあります。</p>

<h3>ROA（リソース指向アーキテクチャ）とは</h3>


<p>ROA とは、リソースを主体として考えていくアーキテクチャのことです。</p>

<h4>リソースとは</h4>


<p>ROA におけるリソースとは、参照（認識）するに値する重要性を持つものとして定義されています。</p>

<p><blockquote><p>「それに対してハイパーテキストリンクを作成する、それに対して意見または反論する、その表現を取得またはキャッシュする、あるいはその他の操作を実行する」ことがある場合は、それをリソースにすべきである。</p></p><p><p></p><footer><strong>『本書 P.85 リソースとは何か』</strong></footer></blockquote></p>

<h4>URI</h4>


<p>リソースがリソースであるための条件として、リソースは少なくとも一つの URI を持っていることがあげられます。</p>

<dl>
<dt class="tips">Tips</dt>
<dd><p>URL と URI の違いですが、現在では同じ意味で使われているようです。URL（Uniform Resource Locator）は、インターネット上の情報資源を指し示すもので、ホスト名、ポート名、フォルダ名、ファイル名などが含まれています。しかし、同じ情報資源であっても、ホスト名が変更になると URL は変化してしまうという問題があったため、ホスト名とか場所とか変わっても同じものを指し示すものが必要ということで URN（Uniform Resource Name）というものが定義されました。これら URL と URN をあわせたものが URI と呼ばれるものです。なお、URI（Uniform Resource Identifier）もインターネット上の情報資源を指し示すもので、包括的な概念として定義されています。URI の具体的な仕様が URL に当たります。</p></dd>
</dl>


<p><blockquote><p>URI は構造的でなければならない。それらの構造は予測可能な方法で区別されなければならない。&lt;中略&gt; これは REST な絶対的なルールではない。厳密には、URI が構造的である、あるいは予測可能である必要はないが、筆者はそうあるべきだと思っている。</p></p><p><p></p><footer><strong>『本書 P.87 URI は記述的であるべき』</strong></footer></blockquote></p>

<h3>ROA の特徴</h3>


<p>ROA には次の特徴があります。</p>

<ul>
<li><a href="#アドレス可能性" rel="external nofollow">アドレス可能性</a></li>
<li><a href="#ステートレス性" rel="external nofollow">ステートレス性</a></li>
<li><a href="#接続性" rel="external nofollow">接続性</a></li>
<li><a href="#統一インターフェース" rel="external nofollow">統一インターフェース</a></li>
</ul>




<h4><a id="アドレス可能性" name="アドレス可能性">アドレス可能性</a></h4>


<p>公開されているリソースは、URI を通じてアクセスすることができます。このとき、この URI を本に掲載することが出来るのであればそれはアドレス可能であるといえます。</p>

<p>たとえば Ajax アプリケーションやGmailなどは、同一の URL （ブラウザのアドレス）から変化せずにアプリケーションの各機能を実行することが出来ます。これらは、アドレス可能ではない例になります。</p>

<p><blockquote><p>HTTPがアドレス可能ではなかったら、あるいはGoogle検索がアドレス可能なWebアプリケーションではなかったら、そのURIを本に掲載することは出来ない。「google.com への Web 接続を開き、検索ボックスに「jellyfish」と入力し、[Google 検索]ボタンをクリックする」と指示しなければならないだろう。</p></p><p><p></p><footer><strong>『本書 P.89 アドレス可能性』</strong></footer></blockquote></p>

<h4><a id="ステートレス性" name="ステートレス性">ステートレス性</a></h4>


<p>すべての HTTP リクエストが完全に分離していることです。サーバの処理が以前の HTTP リクエストに依存せずに実行できるような場合、ステートレス性が保たれているといえます。</p>

<p><blockquote><p>ステートレス性は、サーバーが<strong>取り得る状態</strong>もリソースであり、独自のURIが割り当てられるべきであることを意味する。</p></p><p><p></p><footer><strong>『本書 P.91 ステートレス性』</strong></footer></blockquote></p>

<p>これはつまり、URI によってサーバの状態が判断できるようにするべきだということです。特定のリクエストを送るために、あらかじめ別のリクエストを送って、サーバ側の状態を変更しておく必要がないような設計でなければならないということになります。</p>

<p>ステート（状態）には二種類あり、一つはクライアント側で維持される<strong>アプリケーション状態</strong>と呼ばれる状態で、もう一つは、サーバ上で維持される<strong>リソース状態</strong>です。</p>

<p>アプリケーション状態とは、アプリケーションのユーザが今どのような状況にいるのか（ログインしているのか？検索結果の3ページ目を表示しているのか？）というものを表したものです。リソース状態とは、各ユーザがどのような状況にいても変わらない情報のことで、これらはサーバ側に格納します。</p>

<p>サーバは、クライアントからアプリケーション状態を受け取ると、受け取ったリクエスト情報を元にアプリケーションの状態を復帰します。以前のリクエスト状態を覚えておくというようなことはしません。</p>

<p>ただし、クライアントから受け取ったリクエストだけを信頼すると嘘の情報を渡される可能性があります。そのため、セッションの仕組みを使い、（仕方なく）サーバ側にユーザ情報を保持しておくという実装が現在では行われています。</p>

<p>繰り返しますが、アプリケーションに関する状態情報はクライアント側で保持し、サーバにはリソースの情報しか保持しないというのがステートレス性の特徴になります。</p>

<p><blockquote><p>HTTPセッションの現在の状態はリソース状態としてサーバーに格納されないが、アプリケーション状態としてクライアントによって追跡され、クライアントがWebでたどるパスから作成される。サーバーは、ハイパーメディア（ハイパーテキスト表現内のリンクとフォーム）を提供することにより、クライアントのパスを導く。</p></p><p><p></p><footer><strong>『本書 P.100 リンクと接続性』</strong></footer></blockquote></p>

<h4><a id="接続性" name="接続性">接続性</a></h4>


<p>ステートレス性のところの最後の引用に記述されている、「サーバーは、ハイパーメディア（ハイパーテキスト表現内のリンクとフォーム）を提供することにより、クライアントのパスを導く。」これが、接続性というものです。</p>

<p>ユーザがすべての URI を知っている必要はなく、この接続性（ハイパーリンク）によって、次のリソースや次のサーバ状態に移行できることが重要です。</p>

<p><blockquote><p>そう、次はこっちの状態かこっちの常態化どちらかがありますよというサーバの提案がアプリケーションを構成しているので、リンクっていうのはすごい重要なんです。</p></p><p><p>ただ、現状の Web API とか Web サービスではなかなかリンクは出てこないですね。XML を返してくれても、その XML の中に URL が入っていないので、接続されているとは言いがたいサービスが多いんですが、本当は HTML でみんながすでにやっていること、Web UI でやっていることなので、それをそのまま API でもやると、実はさらに良いシステムを作っていけるんじゃないのかなと思います。</p></p><p><p></p><footer><strong>『<a href="http://www.amazon.co.jp/gp/product/4774133310?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774133310" rel="external nofollow">WEB+DB PRESS vol.42 RESTfulなサービスとアプリケーション作成の心得</a>』</strong></footer></blockquote></p>

<h4><a id="統一インターフェース" name="統一インターフェース">統一インターフェース</a></h4>


<p>Web サービスを使う場合、起動するメソッド名の情報をリクエストに含めたりします。しかしこの方法では、利用する Web サービスごとに呼び出すメソッドが違ってしまい、Web 全体を考えた際にリソースに対する処理インターフェースが統一できません。（もちろん、命名規約で縛ることも可能ですが。。。）</p>

<p>そこで、ROA では、Web 全体でリソースに対する操作を行うインターフェースを統一しようというスタイルが提案されました。</p>

<p>ここで提案された統一インターフェースが HTTP のメソッド（GET、PUT、POST、DELETE）になります。</p>

<dl>
<dt>GET</dt>
<dd>リソースを取得するメソッドです。GET メソッドはサーバの状態を変更しない用途で使用します。（厳密には副作用があってもよいとされています。たとえば、GET アクセスごとにインクリメントされるカウンタなどは、GET による副作用がありますが、クライアントに責任はなく、甚大な被害があるわけではないので問題ないとされています。）</dd>
<dt>PUT</dt>
<dd>主に、リソースの状態を変更する際に使うメソッドです。リソースの新規作成にも使われることがあります。PUTはべき等性を持ちます。

<dl>
<dt class="info">Information</dt>
<dd>べき等性とは、何度同じリクエストを繰り返し実行しても同じ結果であることを意味する数学用語です。</dd>
</dl> 
</dd>
<dt>POST</dt>
<dd>リソースの新規作成の際に使うメソッドです。多くの Web アプリケーションでは、GET と POSTのみが有効なメソッドとして処理されています。GETはリソースの取得、POSTは新規作成、更新、削除など汎用的な処理として使われることが多くあります。ROA 的には POST はリソースの新規作成でのみ使うことがよいとされています。

<dl>
<dt class="info">Information</dt>
<dd>とはいえ、現在のHTMLフォームでは、GET と POST しかサポートされていないため、このような現状は仕方ないといえるかと思います。POST に新規作成以外の意味を持たせて使うことを、<strong>オーバーロードPOST</strong>と呼びます。</dd>
</dl> 

PUT でも POST でもリソースを新規作成することができますが、PUT と POST には次のような違いがあります。

<dl>
<dt>PUT でリソースを新規作成する場合</dt>
<dd>クライアントが指定した URI のリソースが新規作成される </dd>
<dt>POST でリソースを新規作成する場合 </dt>
<dd>クライアントが指定する URI はリソースを新規作成するリソースの URI。新規作成されたリソースの URI はサーバが決定する</dd>
</dl>
</dd>
<dt>DELETE</dt>
<dd>リソースの削除を行う際に使うメソッドです。DELETEもべき等性を持ちます。</dd>
</dl>


<p><strong>ここからは後で書く</strong></p>
]]></content>
  </entry>
  
</feed>
