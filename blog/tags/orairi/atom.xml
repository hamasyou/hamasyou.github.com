<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: オライリー | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/orairi/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-08-30T11:57:48+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScriptで学ぶ関数型プログラミング]]></title>
    <link href="http://hamasyou.com/blog/2014/02/21/functional-javascript/"/>
    <updated>2014-02-21T19:39:56+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/21/functional-javascript</id>
    <content type="html"><![CDATA[<p><blockquote><p>本書はJavaScriptを使って関数型プログラミングを学ぶ書籍です。関数型言語としてJavaScriptを理解し、使用することにより、コードがより洗練され、美しく、そして読みやすいものになることを目的としています。JavaScriptビルトインのデータ型を上手に利用するための基本知識やJavaScriptにおける関数の持つ特性など、関数型プログラミングの技術とその考え方について解説します。また実際のJavaScriptコーディングに関数型プログラミングのエッセンスを加えるポイントをサンプルを使って丁寧に説明します。関数型プログラミングに精通した著者が書き下ろした本書は、テクニックを増やし、コーディングのイマジネーションを広げたいエンジニア必携の一冊です。</p><footer><strong>内容紹介</strong></footer></blockquote></p>

<p>JavaScript は純粋な関数型プログラミング言語ではありません。が、<strong>関数型言語として JavaScript を理解し使用することでコードがより洗練され、読みやすいものになる</strong> はずという筆者の考えがこの本には現れています。</p>

<p>JavaScript では関数型プログラミングは一つのスタイルにしかすぎず、必要な場面で適切に使うというアプローチをとることでよりよいコードや使いやすい関数になります。</p>

<!-- more -->


<h2>関数型プログラミング</h2>

<p><img src="/images/2014-02-21-functional-javascript-02.jpg" alt="関数型プログラミング" /></p>

<p>本書のおぼえがきです。本書の中から気になった箇所だけ抜き出しているので、意味が通じないかもしれません。。気になったら買って読んでみてください。</p>

<h3>関数型プログラミングとは</h3>

<p><blockquote><p>関数型プログラミングとは、値を抽象の単位に変換する関数を使用して行うプログラミングであり、それらを使ってソフトウェアシステムを構築することである。</p></blockquote></p>

<p>オブジェクト指向では、問題領域をオブジェクトという単位に分解して対処していきますが、関数型プログラミングでは、問題を <strong>関数</strong> のパーツに分解します。</p>

<p>オブジェクト指向のアプローチは問題を「<strong>名詞</strong>」に分解して行う傾向があるのに対して、関数型プログラミングでは、問題を「<strong>動詞</strong>」に分解する傾向があります。</p>

<p>関数を通して、与えられた値を「<strong>変換</strong>」することができます。</p>

<pre><code class="plain-raw">markdown → toHTML → postProcess → modifyDOM
         │        │             │
      テキスト   HTML       編集されたHTML
</code></pre>

<h3>高階関数</h3>

<p><strong>高階関数</strong> とは、関数を引数にとり新しい関数を生成して返す関数のことです。</p>

<p>例えば、JavaScript の Array には <code>sort</code> 関数があります。<code>sort</code> は引数に <code>compareFunction</code> を取ります。値の大小を比較する関数を <code>lessOrEqual</code>、この関数を <code>compareFunction</code> の仕様に変換する関数を <code>compare</code> とします。</p>

<pre><code class="javascript">function lessOrEqual(x, y) {
  return x &lt;= y;
}

function compare(func) {
  return function(x, y) {
    if (func(x, y)) {
      return -1;
    } else if (func(y, x)) {
      return 1;
    } else {
      return 0;
    }
  };
}

[100, 1, 0, 10, -1, -2, -1].sort(compare(lessOrEqual));
// =&gt; [-2, -1, -1, 0, 1, 10, 100]
</code></pre>

<p><code>compare</code> 関数は大小比較を行う関数を引数にとり、<code>compareFunction</code> の仕様に則った関数を生成して返す高階関数になります。</p>

<h3>JavaScript における関数型プログラミング</h3>

<ul>
<li>関数による抽象の定義（<code>existy</code> や <code>truthy</code>）</li>
<li>関数を他の関数の引数に渡すことによる新たな動作の実現</li>
</ul>


<pre><code class="javascript">function existy(x) { return x != null; }
function truthy(x) { return (x !== false) &amp;&amp; existy(x); }

[null, undefined, 1, 2, false].map(existy);
// =&gt; [false, false, true, true, true]
[null, undefined, 1, 2, false].map(truthy);
// =&gt; [false, false, true, true, false]
</code></pre>

<p>これこそが、<strong>関数型プログラミング</strong> です。関数型プログラミングは強力な <strong>データ抽象</strong> とともに実装されて役に立つものです。</p>

<h3>命令型プログラミングと関数型プログラミングの違いの例</h3>

<p>「99本のビール」の歌の歌詞を構築するプログラムを命令型プログラミングと関数型プログラミングで書いてみた例です。</p>

<pre><code class="javascript 命令型プログラミング">var lyrics = [];

for (var bottles = 99; bottles &gt; 0; bottles--) {
  lyrics.push(bottles + '本のビールが残ってる');
  lyrics.push(bottles + '本のビール');
  lyrics.push('ひとつ取って、隣に回せ');
  if (bottles === 1) {
    lyrics.push('もうビールは残ってない');
  }
}
</code></pre>

<p>関数型プログラミングのアプローチで書くとこうなります。</p>

<pre><code class="javascript 関数型プログラミング">// var _ = require('underscore');
function lyricsSegment(n) {
  return _.chain([])
    .push(n + '本のビールが残ってる')
    .push(n + '本のビール')
    .push('ひとつ取って、隣に回せ')
    .tap(function(lyrics) {
        if (n &lt; 1) {
          lyrics.push('もうビールは残ってない');
        }
    })
    .value();
}

function song(start, end, lyricGen) {
  return _.reduce(_.range(start, end, -1),
    function(acc, n) {
      return acc.concat(lyricGen(n));
    }, []);
}

song(99, 0, lyricSegment);
</code></pre>

<p><strong>命令型プログラミングは一度きりの実装となりがちで、再利用が難しいものになります</strong>。</p>

<h3>コレクション中心プログラミング</h3>

<p>関数型プログラミングは、<em>コレクションに入った多数のアイテムに同じ操作を適用するようなタスク</em> を行う際にとても便利です。</p>

<p>一般的な関数型プログラミングによって主張されるコレクション中心の考え方のポイントは、その処理を行うために一貫性のある語彙を確立し、包括的に揃えた関数を再利用出来るようにすることです。</p>

<p><blockquote><p>10種類のデータ構造上で10の関数を動かすよりも、ひとつのデータ構造上で100の関数を動かすほうがよい。</p><footer><strong>Alan Perlis</strong></footer></blockquote></p>

<p>関数型プログラミングでは、<strong>それぞれの関数がすこしずつデータを変換し、最後の解に至る</strong> ようにします。</p>

<h3>値ではなく、関数を使え</h3>

<p>ある値を何度か繰り返す関数はよい関数ですが、<strong>ある計算を何度か繰り返す関数のほうがよりよい</strong> 関数です。</p>

<pre><code class="javascript よい関数">function repeat(times, VALUE) {
  return _.map(_.range(times), function() { return VALUE; });
}

repeat(4, 'Major');
// =&gt; ["Major", "Major", "Major", "Major"]
</code></pre>

<pre><code class="javascript よりよい関数">function repeatedly(times, func) {
  return _.map(_.range(times), func);
}

repeatedly(4, function() { return 'Major'; });
// =&gt; ["Major", "Major", "Major", "Major"]
repeatedly(3, function() { return Math.floor((Math.random() * 10) + 1); });
// =&gt; [1, 3, 8]
</code></pre>

<h2>関数を作る関数を作る意義</h2>

<h3>カリー化</h3>

<p><img src="/images/2014-02-21-functional-javascript-01.jpg" alt="カリー化" /></p>

<p>カリー化された関数というのは、<em>引数を一つ受け取るたびに新しい関数を返す関数</em> のことです。<code>invoker</code> 関数はカリー化された関数といえます。</p>

<pre><code class="javascript カリー化された関数">invoker('reverse', Array.prototype.reverse)([1,2,3]);
// =&gt; [3,2,1]
</code></pre>

<p>JavaScript は変数の値の変更に対しておおらかな言語です。オブジェクト指向のカプセル化のような事をする場合、クロージャを使うと便利です。</p>

<p>クロージャを使うと、生成時のコンテキストにもとづいて特定の動作を行うように「<em>設定された</em>」関数を返すことができます。この設定された関数は外部からカプセル化されており、関数の抽象を高めます。</p>

<p>カリー化された関数も同じ考え方になります。</p>

<h3>JavaScript でカリー化を行う意味</h3>

<p>まず、シンプルな高階関数をつくります。関数を引数に取り、引数をひとつだけ取るように限定された関数を返す関数です。</p>

<pre><code class="javascript curry">function curry(func) {
  return function(arg) {
    return func(arg);
  };
}
</code></pre>

<p>JavaScript の関数は <strong>引数をいくら渡してもエラーになりません</strong>。そこで、いくつかの「<em>専門化を行う</em>」引数をオプションで取る場合がよくあります。</p>

<p>例えば <code>parseInt</code> という関数は、第2引数に n 進数の n をオプションで受け取ります。</p>

<pre><code class="javascript parseInt">parseInt('11');
// =&gt; 11
parseInt('11', 2);
// =&gt; 3
</code></pre>

<p><code>parseInt</code> を第一級関数として使うと第2引数が原因で混乱するケースがあります。</p>

<pre><code class="javascript">['11', '11', '11', '11'].map(parseInt);
// =&gt; [11, NaN, 3, 4]
</code></pre>

<p>JavaScript の <code>map</code> は与えられた関数の第1引数に <em>要素</em>、第2引数に <em>インデックス</em>、第3引数に <em>元の配列</em> を渡します。そのため、こんな結果になってしまいます。</p>

<p>ここで、先ほど定義した <code>curry</code> 関数を利用します。与えられた関数に一つだけ引数を渡すように強制してみます。</p>

<pre><code class="javascript">['11', '11', '11', '11'].map(curry(parseInt));
// =&gt; [11, 11, 11, 11]
</code></pre>

<p>引数を2つ取るようにする <code>curry2</code> は次のようになります。</p>

<pre><code class="javascript curry2">function curry2(func) {
  return function(secondArg) {
    return function(firstArg) {
      return func(firstArg, secondArg);
    };
  };
}

parseIntByBinary = curry2(parseInt)(2);
parseIntByBinary('111');
// =&gt; 7
parseIntByBinary('10');
// =&gt; 2
</code></pre>

<p>このように、<strong>カリー化は JavaScript の関数の動作を「専門化」させるための有効なテクニック</strong> になります。</p>

<h2>再帰</h2>

<p><img src="/images/2014-02-21-functional-javascript-03.jpg" alt="再帰" /></p>

<p>再帰が関数型プログラミングに重要である3つの理由。</p>

<ul>
<li>共通の問題のサブセットに単一の抽象を使用する</li>
<li>可変の状態を隠蔽することができる</li>
<li>遅延評価や無限データ構造の処理を行う手段のひとつ</li>
</ul>


<p>配列の長さを調べる関数を再帰の考え方で解くと。</p>

<ol>
<li>もし配列が空であれば長さは0</li>
<li>配列の最初の要素を取り出し、残りを自身の関数に渡した実行結果に1を加える</li>
</ol>


<pre><code class="javascript length">function length(array) {
  if (_.isEmpty(array)) {
    return 0;
  } else {
    return 1 + length(_.rest(array));
  }
}
</code></pre>

<p>再帰をうまく実装するヒントは、「<strong>値は大きな問題に内包された小さな問題によって組み立てられるものである</strong>」と認識することです。</p>

<p><em>基本的な場合を考える</em> ことで、分解の最初の一歩を踏み出しやすくなります。</p>

<h2>純粋関数と冪等とデータの不変性</h2>

<p><img src="/images/2014-02-21-functional-javascript-05.jpg" alt="データの普遍性" /></p>

<h3>純粋関数</h3>

<p><strong>純粋関数</strong> とは、その関数が外部に一切の影響を与えないことが静的に保証されている関数です。純粋性のルールはつぎのようになります。</p>

<ul>
<li>結果は引数として与えられた値からのみ計算される</li>
<li>関数の外部で変更される可能性のあるデータに一切依存しない</li>
<li>関数実行部の外側に存在する何かの状態を一切変更しない</li>
</ul>


<p><a href="https://github.com/k3kaimu/d-manual/blob/master/function.md#%E7%B4%94%E7%B2%8B%E9%96%A2%E6%95%B0pure">純粋関数</a></p>

<h3>冪等（べきとう）</h3>

<p>RESTful なアーキテクチャが一般化するにつれて <strong>冪等（べきとう）</strong> の考え方も一般に浸透してきました。冪等とは、<em>あるアクションを何度行っても一度行った場合とまったくおなじ効果をもたらす</em> というものです。冪等である関数は次の条件を満たします。</p>

<pre><code class="javascript 冪等な関数">someFunc(arg) == _.compose(someFunc, someFunc)(arg);
</code></pre>

<p>ある引数を与えて実行するということは、その関数を2回連続で呼び出しても同じ結果を返します。</p>

<h3>不変性</h3>

<p>JavaScript はダイナミックな言語です。<em>純粋関数のポリシーに縛られるがゆえに、関数のダイナミックさを犠牲にする必要はありません</em>。</p>

<p>しかし、変数は変更するたびにその変数を参照するタイミングによって異なる値が返ってきます。<em>プログラムのすべての状態変更を除去することは不可能ですが、可能なかぎり減らすほうがよい</em> です。</p>

<p>そして、<em>関数型プログラミングの理想な状況とは、可変なものが全く存在しない</em> という状況です。</p>

<p>関数を <strong>抽象の基本的な単位</strong> としてみる利点は、関数の実装内容が外部に「<em>漏れる</em>」ことがなければ、関数の利用側は関数の実装に無関係であることです。</p>

<p>つまり、関数型プログラミングにおける関数でも、内部で命令的なプログラミングをしていたり、変数の状態を変更していたとしても、外部にもれなければ問題にはならないということです。</p>

<p>JavaScript は <strong>関数が変数の境界をつくる</strong> ので、ローカル変数の状態変更は関数が外部に漏れるのを防いでくれます。</p>

<p><blockquote><p>誰もいない森で木が倒れたら、音がするでしょうか？<br/>不変性を持った戻り値を生成するために、純粋関数がローカルデータを変異させたとしたら、それは良いことなのでしょうか？</p><footer><strong>Rich Hickey</strong> <cite><a href='http://clojure.org/transients'>clojure.org/transients/&hellip;</a></cite></footer></blockquote></p>

<p>結局のところ、答えは <strong>Yes</strong> です。</p>

<h3>不変性を保つためにとりうる手段</h3>

<p>JavaScript のオブジェクトフィールドは常に参照可能なので、オブジェクトは不変ではありません。不変性を保つために関数の実装側がとりえる手段は実質つぎの3つのどれかになります。</p>

<ul>
<li>浅いコピーで十分な場合は <code>_.clone</code> を使ってコピーする</li>
<li>深いコピーが必要な場合は <code>deepClone</code> を使う</li>
<li>純粋関数を使ってコードを記述する</li>
</ul>


<h2>メモ</h2>

<p><img src="/images/2014-02-21-functional-javascript-04.jpg" alt="メモ" /></p>

<p>本書の中に出てきた、関数とかのメモ。</p>

<h3>predicate</h3>

<p>常に真偽値（<code>true</code> or <code>false</code>）を返す関数を <strong>predicate</strong> と呼びます。</p>

<pre><code class="javascript">function lessOrEqual(x, y) {
  return x &lt;= y;
}
</code></pre>

<h3>existy と truthy</h3>

<p><code>existy</code> は与えられた値が存在するかどうかを返す関数です。<code>truthy</code> は与えられた値が <code>true</code> とみなされるかどうかを返す関数です。</p>

<pre><code class="javascript">function existy(x) {
  return x != null;
}

function truthy(x) {
  return (x !== false) &amp;&amp; existy(x);
}
</code></pre>

<p><code>truthy</code> は0を <code>true</code> と判定します。これは JavaScript の標準の動作とは違いますが、0を <code>false</code> と同一とみなすのは C 言語の遺物であると筆者は考えているようです。</p>

<h3>JavaScript 関数の設計指針</h3>

<p>JavaScript ではある条件が <code>true</code> の場合のみ処理を行い、それ以外の場合には <code>undefined</code> か <code>null</code> を返す動作が使いやすい場合が多い。</p>

<h3>メタプログラミングとは</h3>

<p><blockquote><p>プログラミングは何かを行うためにコードを書くものであるが、メタプログラミングは何かを解釈する方法を変更するためにコードを書くものである。</p></blockquote></p>

<h3>第一級関数</h3>

<p>第一級関数は他のデータ型と同じように、扱うことができる関数のことです。</p>

<ul>
<li>変数に格納できる</li>
<li>必要に応じて生成できる</li>
<li>他の関数の引数として渡すことができる</li>
<li>関数の戻り値として返すことができる</li>
</ul>


<h3>コレクション中の <code>null</code> に対する防御用の関数 <code>fnull</code></h3>

<p><code>fnull</code> は関数と可変長引数をとる関数です。与えられた関数の実行を行う際に <code>undefined</code> か <code>null</code> の値の場合にはデフォルト値を使うようにして関数を呼び出します。</p>

<pre><code class="javascript fnull">function fnull(func /* , 可変長のデフォルト引数 */) {
  var defaults = _.rest(arguments);
  return function( /* args */ ) {
    var args = _.map(arguments, function(e, i) { return existy(e) ? e : defaults[i]; });
    return func.apply(null, args);
  };
}

var safeMulti = fnull(function(total, n) { return total * n; }, 1, 1);
_.reduce([1, 2, 3, null, 5], safeMulti);
// =&gt; 30
</code></pre>

<h3>invoker</h3>

<p><code>invoker</code> は関数を返す関数です。引数にメソッド名を取り、メソッドの実行主体のオブジェクトを渡すとそのオブジェクトでメソッドを実行する関数を返します。</p>

<pre><code class="javascript invoker">function invoker(NAME, METHOD) {
  return function(target /* , 任意の引数 */) {
    if (!existy(target)) fail('Must provide a target');

    var targetMethod = target[NAME];
    var args         = _.rest(arguments);
    return doWhen((existy(targetMethod) &amp;&amp; METHOD == targetMethod), function() {
      return targetMethod.apply(target, args);
    });
  };
}

var rev = invoker('reverse', Array.prototype.reverse);
_.map([[1, 2, 3]), rev);
// =&gt; [[3, 2, 1]]
</code></pre>

<p>関数型のスタイルでは、<em>関数の実行主体となるオブジェクトを引数にとる関数の形が好まれます</em>。</p>

<h3>メソッドチェーン</h3>

<p>メソッドチェーンは「<em>流暢な</em>」API を構築するために有用なパターンです。流暢な API とは例えば次のようなものです。</p>

<pre><code class="javascript 流暢な API の例">createPerson()
  .setFirstName('Mike')
  .setLastName('Fogus')
  .setAge(108)
  .toString();
</code></pre>

<p>メソッドチェーンを実現する「<em>魔法</em>」は <em>チェーン内のそれぞれのメソッドが同じホストのオブジェクトの参照を返す</em> ことです。</p>

<p>上の方のメモで、関数が前提条件に合わない引数を受け取った場合は <code>undefined</code> か <code>null</code> を返すのがよいとありました。メソッドチェーンで使うことを考えている関数の場合は <code>undefined</code>、<code>null</code>、<code>同じホストのオブジェクト</code> のどれを返せばいいんでしょうかね。。。</p>

<h2>感想</h2>

<p>JavaScript の関数の基本的なところから説明をはじめて、<strong>関数型プログラミング</strong>、<strong>クロージャ</strong>、<strong>高階関数</strong>、<strong>カリー化</strong>、<strong>再帰</strong>、<strong>フィルタ</strong>、<strong>パイプライン</strong>等の関数の設計方法がふんだんに解説されています。</p>

<p>説明がとても丁寧で分かりやすく、関数型プログラミングのことを知らない人でも理解しやすいと思います。</p>

<p>関数型プログラミングを学ぶと、<strong>純粋関数</strong>、<strong>データの不変性</strong> というテーマに当たります。JavaScript にはないですが、Ruby ではメソッドに <code>!</code> が付いた自分自身を変更する破壊的なメソッドがあります。関数型プログラミングとオブジェクト指向プログラミングをうまい具合に取り入れている言語だと再認識しました。</p>

<p>JavaScript で関数型プログラミングを学ぶというテーマですが、<em>関数型プログラミングを学ぶことで他の言語の面白い点も見えてくる</em> というのが読了しての感想です。</p>

<p>JavaScript は Java に次いで最も多く利用されている言語ですので、<strong>JavaScript をよりよく使うため、他の関数型言語をより楽しむため</strong> に本書を活用してみてはいかがでしょうか。おすすめです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビューティフルコード]]></title>
    <link href="http://hamasyou.com/blog/2014/02/14/4873113636/"/>
    <updated>2014-02-14T21:19:05+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/14/4873113636</id>
    <content type="html"><![CDATA[<p>本書は、ブライアン・カーニハンをはじめ一流のプログラマが各々の考える「<em>美しいコード</em>」を紹介するエッセイです。</p>

<p>世界屈指の一流ハッカーがこれぞ！と思うコードを読むことができる貴重な一冊です。</p>

<p>名前付け、アルゴリズム、アーキテクチャ、ショートコードなどなど美しいコードとして紹介されているものは様々です。また、言語も様々なため、知らない言語のコードは美しさがよくわからないところもあるかもしれません。</p>

<p>それでも、30人を越える偉人が紹介する <strong>ビューティフルコード</strong> は、プログラミング好きにはたまらないと思います。</p>

<!-- more -->


<h2>おぼえがき</h2>

<h3>美しいコードの第一歩</h3>

<p>美しいプログラムを書く第一歩は、 <em>だいたい正しく動くコードを書くところ</em> から始まります。エラー処理や例外処理を除いたほとんどの場合に正しく動く。そこから美しいコードは生み出されます。</p>

<p>美しいプログラムは、やさしい条件を先に扱って、難しい条件を後に書きます。</p>

<p><blockquote><p>デザイナーが自分は完璧に達成したんだと分かるのは、付け加えるべきものが何もない時ではなく、取り去るべきものが何もない時である。</p></blockquote></p>

<p>Jon Bentley が自分が書いた一番美しいコードとして紹介しているクイックソートのコードです。</p>

<pre><code class="c quicksort.c">void quicksort(int l, int u)
{
    int i, m;
    if (l &gt;= u) return;
    swap(l, randint(l, u));
    m = l;
    for (i = l+1; i &lt;= u; i++)
        if (x[i] &lt; x[l])
            swap(++m, i);
    swap(l, m);
    quicksort(l, m-1);
    quicksort(m+1, u);
}
</code></pre>

<p><blockquote><p>プログラミングは実用的なスキルだと信じており、「実用的なスキルは、真似をすることと練習することで獲得する」</p></blockquote></p>

<h3>プログラムの速度</h3>

<p>正しく、美しく、速く。プログラムはこの順番であるべきです。クヌース先生は言いました。「<em>未熟な段階での最適化は、プログラミングに置ける諸悪の根源</em>」であると。</p>

<p>正しく動くコードを書いて、O(N<sup>2</sup>) の場合には O(logN) に落とす。できれば O(N) にしたいところですが。正しいコードを美しくすることで、速度が改善されることが往々にしてあります。</p>

<h3>フレームワーク設計</h3>

<p>フレームワークの設計で一番の難題は、API をいったん公開したら、公開 API の仕様を変更したり、インターフェースを変えたりすることが難しくなることです。</p>

<p>この問題に対応するための伝統的な方法が次のものになります。</p>

<ol>
<li>public とするものは公開範囲を小さく保つ</li>
<li>インターフェースを使い、できるだけ実装だけでは公開しない</li>
<li>拡張を意図する場所は「フック」を良く考えて用意しておく</li>
<li>拡張が起こってほしくない場所は拡張できないようにする</li>
</ol>


<p>JavaMail の例です。</p>

<pre><code class="java">package javax.mail;

public final class Session {
    ...
    public static Session getDefaultInstance(Properties props);
    ...
    public Store getStore() throws NoSuchProviderException;
    ...
}
</code></pre>

<pre><code class="java">public abstract class Store extends javax.mail.Service {
    ...
    public void addStoreListener(StoreListener listener);
    ...
}
</code></pre>

<h3>ビューティフル・テスト</h3>

<p>テストを美しくする3つの手法。</p>

<dl>
<dt>簡潔さゆえに美しいと言えるテスト</dt>
<dd>数行のテストコードで対象コードの基本的な動作を文章化したり検証できる。短いコードで端的に動作を説明できているので美しい。</dd>
<dt>コードの優雅さ、保守性、テストしやすさを増す方法が分かるために美しいと言えるテスト</dt>
<dd>コードをもっと美しくするのを助けてくれるようなテストのこと。プログラムの論理的な問題点、構造の問題、設計上の問題に気付く助けになるようなテストは美しい。</dd>
<dt>幅と深さゆえに美しいと言えるテスト</dt>
<dd>基本的なケースや厳選したケースだけでなく、すべてのケースにおいてコードが期待通りに動くという自信を持たせてくれるようなテストコードは美しい。</dd>
</dl>

<h3>大きなビットマップ画像を扱う処理</h3>

<p>縦px×横px×深さの3重ループで処理するのは論外。フィルタロジックをハードコード刷るよりも良い方法は、ビットマップの大きさ、ピクセルの深さ、フィルタの大きさと要素の値に応じて、その場でカスタムコードを生成すること。</p>

<p>（<span class="text-warning">うーむ、ちょっとここはいまいち理解が出来ませんでした。。本書を読んで自分で理解してください。。</span>）</p>

<h3>ネットワーク</h3>

<p><blockquote><p>インターネットを使えば通信線でつながったハッカー達は世界中どこからでも仕事ができる。なんて言われているけど、そんなことを吹聴している奴らはカリフォルニアのごく狭い場所に集まっている。</p></blockquote></p>

<p>エンドユーザ向けのアプリケーションでは、使いやすさが極めて重要です。また、スタートダッシュの為には、まず <em>動くプロトタイプで本質部分を作って</em> そこから製品レベルに持っていくのは常によいアイデア。</p>

<p>システムをできる限りシンプルに保つことは常に偉大なアイデアです。ソフトウェアは <em>なまもの</em> なので、常に注意し、更新し、機能追加し、修正し、調整し、サポートする必要があります。</p>

<h2>感想</h2>

<p>美しいコードの基準は人それぞれですが、共通してい言えることは <strong>正しく動く</strong>、<strong>ムダな部分がない</strong>、<strong>高速に動作する</strong> ものだと思いました。</p>

<p>プログラミングのエッセイだと、やっぱりアルゴリズム系の話題が多いので、ソースコードの見た目が美しいとかいうのはあまりなく、設計思想や短いコードにいろいろな意味が込められているようなものを美しいと感じる偉人が多いようでした。</p>

<p>簡単な問題から解く。正しさが疑いようのないくらいシンプルにコードを保つ。そういうのが大事だと改めて感じました。</p>

<p>ある程度広くコンピュータの知識がある人は、本書を読むと「なるほど」となる場面が多いと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モバイルデザインパターン― ユーザーインタフェースのためのパターン集]]></title>
    <link href="http://hamasyou.com/blog/2012/09/27/487311568X/"/>
    <updated>2012-09-27T11:27:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/09/27/487311568X</id>
    <content type="html"><![CDATA[<p><blockquote><p></p></p><p><p>モバイルアプリのUIパターンを手軽に参照できるリファレンス。主要なプラットフォームで動くモバイルアプリの画面例を400点以上使いながら、ユーザーインタフェースの定番パターンをグラフィカルに解説します。本書で紹介する68個の基本パターンと5個のアンチパターンが、使いやすいモバイルアプリをデザインするうえでクリアしなければならない設計上の課題を解決してくれます。</p></p><p><p><em>掲載UIパターン</em>:ナビゲーション、フォーム、テーブルとリスト、検索、並び替え、フィルター、ツール、グラフ、誘導、フィードバック、アフォーダンス、ヘルプ、アンチパターン</p></p><p><p></p><footer><strong>本書背表紙より</strong></footer></blockquote></p>

<p>本書は、モバイルアプリ（スマートフォン上で動くアプリ）の UI デザインの定石をパターンとして紹介しているものになります。いいアプリを作っても、UI や見た目が悪いとそれだけで価値が下がってしまいます。アプリにとって本当に良い UI デザインを導ける人は、まだまだ少数だと思います。</p>

<p>本書は、そんな良いデザインというのはどういうものなのか、使いやすい UI というのはどういうものなのかを名前をつけてパターン化し紹介しています。内容はとてもグラフィカルなので、かるく読み流すことも出来ますし、中身を熟読してさらに自分流のパターンを産み出していくのも良いと思います。</p>

<p>ますます熱くなってくるであろうモバイルアプリ開発の現場で、デザインができなくて泣いている人にオススメの一冊です。スマートフォンアプリの開発者は、手元に置いておくと便利です。</p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>本書で紹介されているパターンの参考イメージ</h3>


<p><a href="http://www.mobiledesignpatterngallery.com/mobile-patterns.php" rel="external nofollow">Mobile Design Pattern Gallery:UI Patterns for iOS, Android and More</a></p>

<p><a href="http://www.flickr.com/photos/mobiledesignpatterngallery/collections" rel="external nofollow">Mobile Design Pattern Gallery&rsquo;s photostream - flickr</a></p>

<h3>ナビゲーション</h3>




<dl>
<dt>Springboard（スプリングボード）</dt>
<dd><p>起動直後に表示されるメニューが、アプリ利用のきっかけになる。パーソナライズによって表示項目を変えてもよい。各メニュー項目が同じ重要度の場合はグリッドレイアウトを、そうでない場合は変則的なレイアウトを検討する。</p></dd>
<dt>List Menu（リストメニュー）</dt>
<dd><p>起動直後にメニューが並ぶ点は、スプリングボードと同じだが、メニュー項目の名前が長い場合や、サブタイトル等が必要な場合に利用する。</p></dd>
<dt>Tabs（タブ）</dt>
<dd><p>タブは標準的な Web サイトでのナビゲーションパターンに基づいているため、ユーザにとって馴染みが深い。</p></dd>
<dt>Gallery（ギャラリー）</dt>
<dd><p>個々のコンテンツを通じてナビゲーションを行う。コンテンツが頻繁に変わるような場合に利用すると良い。</p></dd>
<dt>Dashboard（ダッシュボード）</dt>
<dd><p>それぞれのデータや指標の要約が一目でわかるため、財務管理、データ分析、マーケティングアプリなどで使える。コンテンツの詰め込みすぎに注意する。</p></dd>
<dt>Metaphor（メタファー）</dt>
<dd><p>最初に表示される画面が何かのメタファーになっているのが特徴で、ゲームなどで使える。また、ユーザのメモをカタログ化したようなアプリにも応用しやすい。分かりにくいメタファーを使ってしまうと使いにくい UI になってしまうため注意。</p></dd>
</dl>




<h4>補助的なナビゲーション</h4>


<p>メニューとしては使いづらいが、一つのコンテンツの補助メニューとして利用しやすいパターン。</p>

<dl>
<dt>Carousel（カルーセル）</dt>
<dd><p>コンテンツをよく見せたい場合に使える。コンテンツの数が多くなった場合（8個以上）は、リスト表示を検討する。</p></dd>
<dt>Expanding List（伸縮リスト）, アコーディオンメニュー</dt>
<dd><p>徐々に詳細なオプション項目を表示させたい場合に適している</p></dd>
</dl>




<h3>テーブルとリスト</h3>




<dl>
<dt>Basic Table（基本的なテーブル）</dt>
<dd><p>行間に細い線を表示したりすると見やすさが向上する。縦の罫線や色の濃い罫線は使わない。文字列は左寄せ、数値は右寄せ。</p></dd>
</dl>




<h3>検索、並び替え、フィルター</h3>




<dl>
<dt>Explicit Search（明示的な検索）</dt>
<dd><p>入力内容をクリアするためのボタンを入力フィールド内に用意する。検索をキャンセルできるボタンを用意する。検索中であることがわかるフィードバックを用意する。</p></dd>
<dt>Dynamic Search（動的な検索）</dt>
<dd><p>アドレス帳、ユーザのメディアライブラリなどの有限なデータ集合に対して、入力ごとに動的に検索を行うパターンは有効になる。</p></dd>
<dt>Saved and Recent Searches（検索結果の履歴）</dt>
<dd><p><em>成功を収めたモバイルインターフェースはいずれも「ユーザの活動を尊重する」というユーザビリティ原則</em>を守っている。</p></dd>
</dl>




<h3>ツール</h3>




<dl>
<dt>Call to Action Button（アクションボタン）</dt>
<dd><p>画面内でユーザに行わせたいアクションが1種類だけの場合、目立つボタンを画面内に用意するとよい。</p></dd>
<dt>Bulk Action（操作の一括実行）</dt>
<dd><p>画面上のコンテンツを一括して実行できるモードを提供する場合、編集モードというのを用意するとよい。編集モードから復帰するための手段も明確に提供する。</p></dd>
</dl>




<h3>誘導</h3>




<dl>
<dt>Tip（ツールチップ）</dt>
<dd><p>ツールチップは対象の機能に隣接して表示されるようにする。</p></dd>
<dt>Tour（ツアー）</dt>
<dd><p>アプリが持つ重要な機能をユーザに明らかにするために使う。ユーザにとってのゴールは何かという観点で設計する。</p></dd>
<dt>Transparency（透過表示）</dt>
<dd><p>画面上のコンテンツに重なった半透明のレイヤーで使用方法を表示する。ユーザが操作を始めたら、レイヤーを非表示にする。</p></dd>
</dl>




<h3>フィードバックとアフォーダンス</h3>




<dl>
<dt>Error Messages（エラーメッセージ）</dt>
<dd><p>モーダルダイアログとして表示するよりも現在内の画面内にメッセージを配置する方が望ましい。</p></dd>
<dt>Tap（タップ）</dt>
<dd><p>立体表現や影をデザインとして取り入れることで、それがタップ可能であることを示せる。</p></dd>
<dt>Flick（フリック）</dt>
<dd><p>表示可能なコンテンツが他にもあるということを示す方法として、フリック可能なことを認識させるという方法もある。</p></dd>
</dl>




<h3>アンチパターン</h3>




<dl>
<dt>Idiot Box（作業を妨げる愚行）</dt>
<dd><p>確認ダイアログを表示するのはもとに戻せない操作をする場合だけにする。</p></dd>
</dl>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ステートフルJavaScript ―MVCアーキテクチャに基づくWebアプリケーションの状態管理]]></title>
    <link href="http://hamasyou.com/blog/2012/09/23/487311554X/"/>
    <updated>2012-09-23T22:05:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/09/23/487311554X</id>
    <content type="html"><![CDATA[<p>本書は、クライアントサイド（ブラウザ）で JavaScript を使ってリッチなアプリを作る際のプラクティスを説明しています。</p>

<p>前半では、JavaScript によるオブジェクト指向開発の方法や MVC 開発の方法を、後半では、JavaScript の MVC デザインパターンに則った、各種ライブラリの説明が行われています。</p>

<p>最近では、ユーザビリティの良いアプリを開発するのに必須なクライアントサイドでの JavaScript の使い方が複雑になってきているように思います。ちょっと jQuery を使って DOM 操作していればよかった頃と比べて、最近では色々なライブラリを組み合わせる必要があったり、クライアントサイドでも MVC パターンが必要になったりと、大変です。</p>

<p>本書は、そんな JavaScript でリッチアプリケーションを作成する際の取っ掛かりを学ぶのに良いと思います。オライリー本なので、読むのが簡単ということはなく、むしろ格式高い感じすらしますが、多少 JavaScript でオブジェクト指向の経験があれば、読み進めるのは難しく無いと思います。</p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>インスタンスメソッド定義のイディオム</h3>


<p>JavaScript ではクラスのプロトタイプに対して関数を追加することでインスタンスメソッドを定義できます。</p>

<pre><code class="javascript">Person.prototype.breath = function() { /* ... */ };
var person = new Person();
person.breath();
</code></pre>

<p>クラスのプロトタイプに <em>fn</em> というエイリアスを設定することが広く行われています。</p>

<pre><code class="javascript">Person.fn = Person.prototype;
Person.fn.run = function() { /* ... */ };
</code></pre>

<h3>関数呼び出しのコンテキスト</h3>


<p>apply() と call() を使うと、関数の呼び出しコンテキストを変更できます。jQuery の API ではイベントハンドラや each() による繰り返しの中で、コンテキスト（this の値）が変更されています。</p>

<pre><code class="javascript">$('.btn').click(function() {
  $(this).hide();
});
</code></pre>

<p>元のコンテキストにアクセスするには、良く self などの名前で this を保存しておき、後で参照する方法がとられます。</p>

<pre><code class="javascript">var self = this;

$('.btn').click(function() {
  self.btnClicked();
});
</code></pre>

<p>apply() を使うと、self を使わなくても同じことができます。</p>

<pre><code class="javascript">var proxy = function(func, context) {
  return (function() {
    return func.apply(context, arguments);
  });
};

$('.btn').click(proxy(function() {
  this.btnClicked();
}, this);
</code></pre>

<p>jQuery の proxy() メソッドがまさしく、これと同じことをしています。</p>

<h3>イベントの発生順序</h3>


<p>ある要素とその祖先の要素が同じ種類のイベントに対してイベントハンドラを登録している場合、先に呼び出されるのはブラウザによって違います。</p>

<p>イベントが呼び出される順番は2種類あり、<strong>イベントキャプチャリング</strong> と<strong>イベントバブリング</strong>になります。</p>

<h4>イベントキャプチャリング</h4>


<p>最も上位（外側）の要素からイベントが発生した要素へとイベントリスナが呼び出されます。つまり、祖先の要素、内側の要素の順番でイベントリスナが呼び出されます。</p>

<h4>イベントバブリング</h4>


<p>イベントが発生した要素（内側）から祖先要素へとイベントリスナが呼び出されます。</p>

<p>W3C の仕様では、addEventListener() の3つめの引数に true を指定するとイベントキャプチャリングで呼び出され、false か 指定しないとイベントバブリングで呼び出されます。</p>

<p>バブリングが行われている際には、イベントオブジェクトの stopPropagation() を呼び出すことによって、バブリングを中止することができます。</p>

<pre><code class="javascript">link.addEventListener('click', function(e) {
  e.stopPropagation();
  /* ... */
});
</code></pre>

<p>ブラウザによってそれぞれのイベントに対するデフォルトのアクションが定義されています。たとえば、リンクのクリックでは、src で指定された URL に遷移する動作や、チェックボックスのクリックで項目が選択状態になる動作などです。</p>

<p>これらのデフォルトのアクションはイベントの伝播が完了した後で実行されます。このデフォルトのアクションを中止するには、 preventDefault() 関数を呼び出します。また、イベントハンドラの戻り値で false を返すことで、preventDefault() を呼び出したのと同じ動作になります。</p>

<pre><code class="javascript">form.addEventListener('submit', function(e) {
  /* e.preventDefault() */
  return confirm('本当に送信しますか？');
});
</code></pre>

<h3>イベントの委譲</h3>


<p>イベントバブリングの性質を考えると、複数ある子孫の要素それぞれにイベントリスナを設定するより、祖先の要素一つだけにイベントハンドラを設定する方が効率がよくなります。</p>

<p>jQuery では、これを delgate() メソッドを使って実装できます。</p>

<pre><code class="javascript">/* 望ましくないコード */
$('ul li').click(function() { /* ... */ });

// こちらのほうが効率が良い
$('ul').delegate('li', 'click', function() { /* ... */ });
</code></pre>

<p>このように、イベント処理を委譲することによるメリットは、動的に追加された要素についても、自動でイベントリスナが適用されることです。</p>

<h3>画面表示時の初期データの読み込み</h3>


<p>ページ上のデータは、最初に読み込まれるページに含まれているか、Ajax や JSONP を使った HTTP リクエストによって事後的に読み込まれます。多くのデータを初期表示時に読み込むのには時間がかかりますが、Ajax や JSONP によるリクエストは、<em>並列処理が可能</em>であるので高速に処理できます。</p>

<p>また、HTTP リクエストで取得したデータは、ローカルのストレージにキャッシュすることができます。ストレージには2種類あり、 <code>localStorage</code> と <code>sessionStorage</code> というオブジェクトでアクセスできます。</p>

<h4>ローカルストレージ</h4>


<p>ブラウザが終了した後も保持される。</p>

<h4>セッションストレージ</h4>


<p>ブラウザが開いている間のみ保持される。</p>

<h3>コントローラと内部状態</h3>


<p>まず言えるのは、<em>DOM 内にモデルの内部状態やその他の情報を保持するべきではありません</em>。頑強な MVC アーキテクチャの実現のためには、内部状態やその他の情報は、コントローラ内に保持させる方がよい。</p>

<p>ビューごとにコントローラを1つずつ用意するというのがよく使われているパターンです。</p>

<h3>リソースとURL</h3>


<p>通常、Ajax などでリソースとなるデータをロードした場合、ブラウザの URL は変化しません。しかし、Web 上の個々のリソースには URL が割り当てられていると考えるのが一般的で、URL が変わらない状況というのは好ましくありません。</p>

<p>そこで、この問題に対しては、内部状態が変化したら URL を変化させるようにします。このとき、よく使われるのが、URL のハッシュ（#以降の文字列）を変更するというものです。ハッシュの値はサーバに送信されないため、ページの再読込を発生させることなく変更できます。</p>

<p>location.hash を使うと、ページのハッシュを取得できます。</p>

<p>主要なブラウザでは、URL のハッシュが変更されたかどうかを調べるのに、hashchange イベントが使えます。</p>

<p>JavaScript で作られたページは、クローラにとってはすべて同じ URL のように見えてしまいます。そこで、Google は、<a href="http://code.google.com/web/ajaxcrawling/index.html" rel="external nofollow">Ajax Crawling</a> という仕様を提案しています。</p>

<h3>Backbone.js ライブラリ</h3>


<p><a href="http://backbonejs.org/" rel="external nofollow"></a> は JavaScript アプリケーションの構築のための優れたライブラリです。Backbone.js も MVC 構造でアプリケーションを作成していきます。</p>

<h2>参考</h2>




<ul><li><a href="http://fingaholic.github.com/posts/2012-06-27-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 1章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-02-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 2章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-17-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 3章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-20-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 4章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-23-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 5章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-07-25-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 6章 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-08-01-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 11章 その1 - jekylog</a></li>
<li><a href="http://fingaholic.github.com/posts/2012-08-07-stateful-javascript.html" rel="external nofollow">ステートフルJavaScript 11章 その2 - jekylog</a></li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyベストプラクティス -プロフェッショナルによるコードとテクニック]]></title>
    <link href="http://hamasyou.com/blog/2010/09/17/4873114454/"/>
    <updated>2010-09-17T22:12:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/09/17/4873114454</id>
    <content type="html"><![CDATA[<p>本書は、Ruby プログラミングの中級者向け指南書のようなものです。様々なコーディングテクニック（例えば、順序付き引数の使いどころ、ブロックの使い方、メソッド名のつけ方、メタプログラミング、関数型プログラミングテクニック、プロジェクトでRubyを使う際の慣習などなど）が満載です。</p>

<p>さすがオライリーといえる深い内容になっていて、Ruby を始めたばかりの人よりは、<em>一通り Ruby でプログラミングをしたことがある人、Ruby を使いこなせているのか不安な人が読むと良い</em>と思います。</p>

<p>今すぐ使えるテクニック！とはちょっと違うかもしれませんが、Ruby の動的な振る舞いや柔軟な拡張性を理解してさらに Ruby を使いこなすための一冊になると思います。</p>

<p>なお、<strong>Ruby1.9に対応</strong>していますので、サンプルコードは Ruby1.9で動きますし、最新 Ruby ではどうするの？を一発で解決できるようになっています。</p>

<!-- more -->




<h2>目次</h2>




<ul class="none">
<li>１章 テストでコードを駆動する</li>
<li>２章 美しい API を設計する</li>
<li>３章 動的な機能を使いこなす</li>
<li>４章 テキスト処理とファイル管理</li>
<li>５章 関数型プログラミングのテクニック</li>
<li>６章 うまういかないとき</li>
<li>７章 文化の壁を取り払う</li>
<li>８章 上手なプロジェクトメンテナンス</li>
<li>付録Ａ 後方互換性のあるコードを書く</li>
<li>付録Ｂ Ruby の標準ライブラリを活用する</li>
<li>付録Ｃ Ruby ワーストプラクティス</li>
</ul>




<h2>２章 美しい API を設計する - 覚書</h2>




<h3>メソッドの引数にデフォルト値を持つパラメータが複数ある場合は擬似キーワード引数を使う</h3>


<p>デフォルト値をもつパラメータが複数ある場合は、Ruby の「メソッドの引数の末尾に要素がひとつ以上のハッシュを渡す際は中括弧（{,}）を省略できる」という仕様を利用して、<strong>擬似キーワード引数</strong>が使えます。</p>

<pre><code class="ruby">def hello(name, options = {})
  options = { nickname: "hamasyou", age: 28 }.merge(options)
  p "Hello #{name}! " + options.to_s
end

hello("Syougo")
# =&gt; "Hello Syougo! {:nickname=&gt;"hamasyou", :age=&gt;28}"
hello("Syougo", age: 27)
# =&gt; "Hello Syougo! {:nickname=&gt;"hamasyou", :age=&gt;27}"
</code></pre>

<h3>インターフェースをシンプルにするためのブロック</h3>


<p>Rails の Configuration に使われているオブジェクトショートカットのことです。次のようなコードを</p>

<pre><code class="ruby">server = Server.new

server.handle(/hello/i) { "Hello from server at #{Time.now}" }
server.handle(/goodby/i) { "Goodby from server at #{Time.now}" }
server.handle(/name is (\w+)/) {|m| "Nice to meet you #{m[1]}!" }

server.run
</code></pre>

<p>次のように書けるようにします。</p>

<pre><code class="ruby">Server.run do
  handle(/hello/i) { "Hello from server at #{Time.now}" }
  handle(/goodby/i) { "Goodby from server at #{Time.now}" }
  handle(/name is (\w+)/) {|m| "Nice to meet you #{m[1]}!" }
end
</code></pre>

<p>これを実現するには、次のようなコードになります。</p>

<pre><code class="ruby">class Server
  def self.run(port, &amp;block)
    server = Server.new(port)
    server.instance_eval(&amp;block)
    server.run
  end
end
</code></pre>

<p>インスタンス化したオブジェクトの <em>instance_eval()</em> メソッドにブロックを渡すことで、ブロックをそのインスタンスのコンテキストで実行しています。</p>

<p>この方法を使うと、ブロックはインスタンス化したオブジェクトのコンテキストで実行されるため、ブロックのスコープ内で定義されたローカル変数にしかアクセスできません。つまり、次のコードは<em>動きません</em>。</p>

<pre><code class="ruby">class MyClass
  def nickname
    "hamasyou"
  end

  def my_method
    Server.run do
      p "Hello #{nickname}"
    end
  end
end

MyClass.new.my_method
# =&gt; NameError: undefined local variable or method `nickname' for #&lt;Server:0x000001020478a8&gt;
</code></pre>

<p>この問題を解決するには、ブロックをインスタンスのコンテキストで評価するのではなく、クロージャとして実行すればよいです。</p>

<pre><code class="ruby">class Server
  def self.run(&amp;block)
    server = Server.new
    block.arity &lt; 1 ? server.instance_eval(&amp;block) : block.call(server)
    server.run
  end
end
</code></pre>

<pre><code class="ruby">class MyClass
  def nickname
    "hamasyou"
  end

  def my_method
    Server.run do |server|
      p "Hello #{nickname}"
    end
  end
end

MyClass.new.my_method
# =&gt; "Hello hamasyou"
</code></pre>

<p>block.arity を使ってコードブロックに引数がいくつあるかを調べて、引数がひとつ以上あればブロックをクロージャとして呼び出すようにしています。　</p>

<h3>method? と method! の意味</h3>


<p><section></p>

<h4>method? 疑問符</h4>


<p><em>method?</em> のようにメソッド名の末尾に疑問符（?）をつけるのは目的は、<strong>オブジェクトに何かを問い合わせる</strong>ことになります。条件分岐などにメソッドを利用する際に使えます。</p>

<p>疑問符をつけたメソッドの戻り値は、<em>true</em> か <em>false or nil</em> を返すようにします。</p>

<p></section></p>

<p><section></p>

<h4>method! 感嘆符</h4>


<p><em>method!</em> のようにメソッド名の末尾に感嘆符（!）をつける目的は、<strong>このメソッドは特別だ、「注意しろ！」</strong>になります。</p>

<p><blockquote><p>よくある誤解は、受け取ったオブジェクトを変更することを知らせたいときに感嘆符を使う、というものだ。たいていの場合、感嘆符は私たちに何か警告をするものだからだろう。</p></p><p><p></p><footer><strong>method?とmethod!が何を意味しているか理解しよう - 本書 P.57</strong></footer></blockquote></p>

<p>Ruby の組み込みクラスのメソッドには破壊的メソッドでも感嘆符がついているのとついていないものがあります。</p>

<p>これはすなわち、メソッドに感嘆符をつける目的はこのメソッドが特別であることを知らせるのであって、破壊的であるとか危険であることを知らせるのではないということです。</p>

<p><blockquote><p>したがって、同じようなことをする　foo() メソッドがないのに foo!() メソッドだけがあるのは、あまり意味のないことだ。（中略）感嘆符は必ずしもそのメソッドが<em>破壊的な操作</em>をすることを意味するわけではないと考えると、&hellip;</p></p><p><p></p><footer><strong>本書 P.59</strong></footer></blockquote></p>

<p></section></p>

<h3>２章のポイント</h3>




<h4>引数</h4>




<ul>
<li>options ハッシュによる擬似キーワード引数が使えないか検討する</li>
<li>順序付き引数と options ハッシュを組み合わせて使うときは、配列 splat 演算子（*）は使わない</li>
<li>必須パラメータは、options ハッシュには入れないこと。必須パラメータは順序付き引数として扱う</li>
</ul>




<h4>ブロック</h4>




<ul>
<li>前処理後処理の間に、ブロックを yield するようなヘルパメソッドを検討する</li>
<li>&amp;block と instance_eval() を組み合わせると任意のオブジェクトのコンテキストでブロックを実行できる</li>
<li>yield と block.call の戻り値は、与えられた戻り値と同じにする</li>
</ul>




<h2>３章 動的な機能を使いこなす - 覚書</h2>




<h3>define_method() を使って動的にインスタンスメソッドを定義する</h3>


<p>メソッドを定義するというのは、クラスのインスタンスメソッドを定義するということなので、動的にインスタンスメソッドを定義するにはクラスのスコープで define_method() を呼び出します。</p>

<pre><code class="ruby">class MyClass
  def self.define(method_name, &amp;block)
    define_method(method_name, &amp;block)
  end
end

obj = MyClass.new
obj.hello
# =&gt; NoMethodError: undefined method `hello'

MyClass.define(:hello) do
  "Hello World"
end

obj.hello
# =&gt; "Hello World"
</code></pre>

<h3>define_method() を使って動的にクラスメソッドを定義する</h3>


<p>クラスメソッドを定義するには、クラスの特異クラスにメソッドを定義する必要があります。特異クラスをオープンするには、class &lt;&lt; obj 構文を使います。</p>

<pre><code class="ruby">class MyClass
  def self.define(method_name, &amp;block)
    obj = class &lt;&lt; self; self; end
    obj.send(:define_method, method_name, &amp;block)
  end
end

MyClass.define(:hello) do
  "Hello World"
end

MyClass.hello
# =&gt; "Hello World"
</code></pre>

<p><section></p>

<h4>define_method() は private メソッド</h4>


<p>define_method() は特異クラス上でプライベートになっているため、レシーバを指定して呼び出すには send() メソッドを使う必要があります。</p>

<p></section></p>

<h3>モジュールのメソッドをモジュールのクラスメソッドにする</h3>




<pre>extend self</pre>


<p>extend self を使うと、自信のインスタンスメソッドを特異クラスに定義することになりクラスメソッド化することができます。</p>

<pre><code class="ruby">module MyModule
  extend self

  def hello
    "Hello World"
  end
end

MyModule.hello
# =&gt; "Hello World"
</code></pre>

<h3>３章のポイント</h3>




<ul>
<li>Ruby ではすべてのクラスがオープン。振る舞いを実行時に変更することができる</li>
<li>オブジェクト毎の振る舞いは、class &lt;&lt; obj 構文を使ってオブジェクトの特異クラスにアクセスすることで実装できる</li>
<li>拡張するときはできるだけオブジェクトごとの振る舞いを拡張するほうがよい。obj.extend() を使うようにする</li>
<li>クラスもモジュールも動的につくることができる。メソッドを定義するためのブロックを受け付けるようにする</li>
<li>モジュールをクラスに混ぜるとき、include を使うとインスタンスレベルで利用可能になり、extend を使うとクラスレベルで利用可能になる</li>
<li>フックは特定のクラスやモジュールに実装することができ、それより下位のすべてを捕捉する</li>
</ul>




<h3>３章のまとめ</h3>


<p>３章で学習したことが詰まったコードの読み解きです。</p>

<pre><code class="ruby">module NativeCampingRoutes

  extend self

  def R(url)
    route_lookup = routes

    klass = Class.new
    meta = class &lt;&lt; klass; self; end
    meta.send(:define_method, :inherited) do |base|
      raise "Already defined" if route_lookup[url]
      route_lookup[url] = base
    end
    klass
  end

  def routes
    @routes ||= {}
  end

  def process(url, params = {})
    routes[url].new.get(params)
  end
end

module NativeCampingRoutes
  class Hello &lt; R '/hello'
    def get(params)
      puts "hello #{params[:name]}"
    end
  end

  class Goodbye &lt; R '/goodbye'
    def get(params)
      puts "goodbye #{params[:name]}"
    end
  end
end

NativeCampingRoutes.process('/hello', name: "greg")
# =&gt; hello greg
NativeCampingRoutes.process('/goodbye', name: "joe")
# =&gt; goodbye joe
</code></pre>

<h4>3行目 extend self</h4>


<p>Object#extend は引数で渡されたモジュールのインスタンスメソッドを特異クラスのメソッド（つまり、クラスメソッド）として追加します。</p>

<p>すなわち、この後に続く def で定義されたモジュールのインスタンスメソッドを自身のクラスメソッドに再定義しています。</p>

<h4>6行目 route_lookup = routes</h4>


<p>10行目で呼び出している define_method() メソッドに渡すブロックはクロージャなので、ローカル変数にアクセスできます。define_method() メソッド内で @routes にアクセスしたいので、ローカル変数に格納しています。</p>

<h4>9行目 meta = class &lt;&lt; klass; self; end</h4>


<p>10行目で定義する Class#inherited メソッドは、継承されるクラス（klass）のクラスメソッドとして定義します。クラスメソッドは特異クラスのメソッドとして定義する必要があるので、特異クラスを取り出しています。</p>

<h4>10行目 meta.send(:define_method, :inherited) do |base|</h4>


<p>define_method() メソッドは private メソッドなので、meta.define_method() という呼出はできません。</p>

<p>そこで、send() メソッドを使って private メソッドを呼び出しています。特異クラスである meta に対して inherited メソッド（クラスが継承された際に呼び出されるフックメソッド）を定義しています。</p>

<p>inherited メソッドは、呼び出される際に引数として継承先の子クラス（NativeCampingRoutes::Hello、NativeCampingRoutes::Goodbye）が渡されるので、ブロック引数の base として受け取っています。</p>

<h4>14行目 klass</h4>


<p>R() メソッドは継承元として使うことを想定しているので、クラスを返しています。</p>

<h4>22行目 routes[url].new.get(params)</h4>


<p>routes メソッドで返される @routes ハッシュに対して url をキーにアクセスします。</p>

<p>R() メソッドで @routes[url] に継承先クラスが格納されているので、Class#new を使ってインスタンス化し、get() メソッドを呼び出しています。</p>

<h4>27, 28行目 class Hello &lt; R '/hello'</h4>


<p>定義した NativeCamppingRoutes モジュールのサブクラスとして Hello を定義し、R() メソッドで返される無名クラスを継承しています。</p>

<p>クラスに get() メソッドを定義して、21行目の process メソッドでインスタンス化したオブジェクトから呼び出せるようにしています。</p>

<h2>６章 うまくいかないとき - 覚書</h2>




<h3>データ構造を確認するのに YAML がつかえる</h3>


<p>YAML というデータシリアライゼーションのための標準ライブラリを使うと、データ構造をプリントしてくれる y() メソッドが使えるようになる。</p>

<pre><code class="ruby">require "yaml"

data = { name: "hamasyou", age: 28, address: { zip: "272-0000", pref: "Chiba", city: "Ichikawa" } }
y data
#---
#:name: hamasyou
#:age: 28
#:address:
#  :zip: 272-0000
#  :pref: Chiba
#  :city: Ichikawa
</code></pre>

<h3>テストデータ生成用ライブラリ faker</h3>


<p>テスト用のデータ生成に、Faker というライブラリが使えます。gem install faker でインストールできます。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>sudo gem install faker</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>次のように使います。</p>

<pre><code class="ruby">require "faker"
require "pp"

data = 5.times.map do
  { name: Faker::Name.name, phone: Faker::PhoneNumber.phone_number }
end

pp data
#[{:name=&gt;"Johnathan Lowe III", :phone=&gt;"(859)707-2471 x1926"},
# {:name=&gt;"Lucius Murray", :phone=&gt;"(760)338-6980"},
# {:name=&gt;"Queen Beahan II", :phone=&gt;"1-085-613-9274 x52563"},
# {:name=&gt;"Daniela Boyle", :phone=&gt;"956.964.3848"},
# {:name=&gt;"Mrs. Jarret Wisozk", :phone=&gt;"(760)687-0168 x68429"}]
</code></pre>

<p>Faker で作れるダミーデータには次のようなものがあります。</p>

<table class="table table-bordered">
  <tr><th>クラス</th><th>作れるデータ</th><th>サンプル</th></tr>
  <tr><td>Faker::Address</td><td>住所データ</td><td><ul class="none"><li>zip_code<br/>"15832-6995"</li><li>city<br/>"South Verlie"</li></ul></td></tr>
  <tr><td>Faker::Company</td><td>会社データ</td><td><ul class="none"><li>name<br/>"Carroll, Kuhlman and Glover"</li><li>bs<br/>"orchestrate vertical action-items"</li></ul></td></tr>
  <tr><td>Faker::Internet</td><td>ネットワークデータ</td><td><ul class="none"><li>email<br/>"wiley@andersoncrist.us"</li><li>free_email<br/>"aubree.waters@gmail.com"</li><li>domain_name<br/>"littel.com"</li></ul></td></tr>
  <tr><td>Faker::Lorem</td><td>文章データ</td><td><ul class="none"><li>words<br/>["quaerat", "blanditiis", "qui"]</li><li>sentences<br/>["Maiores dicta sed voluptas corrupti repudiandae eos aliquam eligendi.", "Dolorem eius ut nam esse nihil illum.", "Non sapiente accusamus maiores neque eum est ea."]</li></ul></td></tr>
  <tr><td>Faker::Name</td><td>名前データ</td><td><ul class="none"><li>name<br/>"Nicklaus Swift"</li><li>first_name<br/>"Angus"</li><li>last_name<br/>"Morissette"</li></ul></td></tr>
  <tr><td>Faker::PhoneNumber</td><td>電話番号</td><td><ul class="none"><li>phone_number<br/>"024-597-6027 x86091"</li></ul></td></tr>
</table>


<p>Faker::PhoneNumber::Formats に phone_number() メソッドで返される電話番号のフォーマットの一覧が入っています。テスト時にフォーマットをいじることで、phone_number() メソッドの戻り値の形式を変更できます。</p>

<pre><code class="ruby">Faker::PhoneNumber::Formats = ["(###)##-####", "###-####-####"]
Faker::PhoneNumber::phone_number
# =&gt; "(109)29-6592"
</code></pre>

<h2>７章 文化の壁を取り払う - 覚書</h2>




<h3>ソースコードのエンコーディングを明示する</h3>


<p>Ruby1.9 から多言語対応に注意を払わなければいけなくなりました。<em>M17N（MultilingualizatioN）</em> です。</p>

<p>M17N 可能なプロジェクトで作成するソースコードには、ソースコード中に<strong>マジックコメント</strong>を埋め込む必要があります。</p>

<p>Ruby ソースコード中に #! がない限り、マジックコメントはファイルの一行目に書きます。#! がある場合は2行目に書きます。</p>

<p>マジックコメントのフォーマットは次のとおりです。</p>

<pre># coding: UTF-8</pre>




<pre># -*- coding: utf-8 -*-</pre>




<h3>ファイルを扱う場合</h3>


<p>例えば、EUC-JP で書かれたファイルを UTF-8 で書かれた Ruby のソースコード上で処理したい場合、次のようにします。</p>

<pre><code class="ruby">File.open("euc.txt", encoding: "EUC-JP:UTF-8").each do |line|
  p line
end
</code></pre>

<p><em>encoding:</em> パラメータを指定してファイルを開きます。encoding パラメータは &quot;&lt;ファイルのエンコード&gt;:&lt;処理するソースコードのエンコード&gt;&quot; のように書きます。</p>

<p>例の場合、EUC-JP で書かれた euc.txt ファイルを UTF-8 のソースコードで処理するので、encoding:&quot;EUC-JP:UTF-8&quot; としています。</p>

<p>なお、ファイルのエンコーディングがソースコードのエンコーディングと同じ場合は、encoding: &quot;UTF-8&quot; と書くことができます。</p>

<p class="option">encodingオプションを指定しない場合、Ruby は Encoding#default_external で指定されているエンコーディングでファイルを解釈しようとします。</p>




<h3>バイナリファイルを扱う場合</h3>


<pre><code class="ruby">img = File.read("hoge.png");
</code></pre>

<p>上記のようにバイナリデータを読み込んでいる場合は注意が必要です。Ruby1.9 からは encoding が指定されない場合、<em>Encoding#default_external</em> の値がエンコーディングとして使われます。</p>

<p>そのため、read() メソッドで encoding を指定しないと、中身がバイナリデータであっても default_external のエンコーディングだと解釈されてしまいます。</p>

<p>バイナリデータを読み込む際は、<em>File#binread()</em> メソッドを使うようにします。</p>

<h3>閑話休題</h3>


<p>７章の P.223 に L10N の話題が載っています。そこで見つけたソースコード。</p>

<pre><code class="ruby">data = { given_name: "姉ヶ崎", surname: "寧々" }
Gibberish::Simple.use_language(:ja) do
  p T("{given_name}{surname}", [:name, data]) #=&gt; "姉ヶ崎寧々"
end
</code></pre>

<p>ね、寧々さん！！？</p>

<h2>８章 プロジェクトメンテナンス - 覚書</h2>




<h3>README ファイルに書くとよいこと</h3>




<dl>
<dt>Description（説明）</dt>
<dd>なんのためのプロジェクトなのか、何を解決するものなのか、1〜2段落程度で説明する。</dd>
<dt>Documentation（ドキュメント）</dt>
<dd>プロジェクトの公開 API となっている主要なクラスを2〜3個紹介するとよい。</dd>
<dt>Examples（サンプル）</dt>
<dd>基本的な使い方、何が出来るのか？どうやってクラスを使うのか？の概要を説明するとよい</dd>
<dt>Install（インストール方法）</dt>
<dd>インストール手順が簡単であれば、README にインストール手順を書いておくとよい。</dd>
<dt>Q&amp;A（質問の宛先）</dt>
<dd>自分たちへの質問の方法を記述する。Eメール、電話、会社の住所などなど。</dd>
</dl>




<h3>ライブラリのレイアウト</h3>




<h4>ライブラリディレクトリ</h4>


<p>lib フォルダを作り、ひとつのファイルとひとつのサブディレクトリを用意します。</p>

<p>ひとつのファイルとは、プロジェクト名と同じファイルになっており、依存関係のあるライブラリなどをロードするための出発点としての役割を果たすものになります。</p>

<p>ひとつのサブディレクトリには、プロジェクト名と同じディレクトリ名にしておき、必要なライブラリやソースコードをすべてこの中に閉じ込める。</p>

<pre>
- lib
  - csvparser/
    - ...ライブラリ群...
  - csvparser.rb
</pre>


<p>クラス名とファイル名の対応等は、<a href="http://shugo.net/ruby-codeconv/codeconv.html" rel="external nofollow">Ruby コーディング規約 - Shugo.net</a> 等を参考にする。</p>

<h4>実行ファイル</h4>


<p>実行ファイルは bin ディレクトリに置く。</p>

<h4>テストコード</h4>


<p>テストコードは、test ディレクトリに置く。</p>

<h4>サンプルコード</h4>


<p>サンプルコードがあれば、examples ディレクトリに置く。</p>

<h4>ここまでをまとめると</h4>


<p>次のようなディレクトリ構成になる。</p>

<pre>-Projectルート/
  - README
  - bin/
  - examples/
  - lib/
    - csvparser/
      - ...ソースコード...
    - csvparser.rb
  - test</pre>



]]></content>
  </entry>
  
</feed>
