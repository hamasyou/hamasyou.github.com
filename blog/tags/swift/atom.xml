<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Swift | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/swift/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-08-30T11:57:48+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift での Dictionary<String, AnyObject> の扱いメモ]]></title>
    <link href="http://hamasyou.com/blog/2014/08/28/swift-dictionary-anyobject/"/>
    <updated>2014-08-28T00:12:25+09:00</updated>
    <id>http://hamasyou.com/blog/2014/08/28/swift-dictionary-anyobject</id>
    <content type="html"><![CDATA[<p>Swift で <code>Dictionary</code> を扱うときのメモです。API 呼び出しのレスポンスを JSON で扱いたい時に <code>Dictionary&lt;String, AnyObject&gt;</code> として扱う際のポイントです。</p>

<pre><code class="swift">typealias JSONDictionary = Dictionary&lt;String, AnyObject&gt;
let json = NSJSONSerialization.JSONObjectWithData(data, options: .MutableContainers, error: nil) as JSONDictionary

let str1 = json["foobar"]! as String    // String
let str2 = json["foobar"] as AnyObject? as? String  // String?

let str3 = json["foobar"] as String     // これはコンパイルエラー '(String, AnyObject)' is not convertible to 'String'
</code></pre>

<p>最後のはなぜコンパイルエラーになるかというと、<code>Dictionary</code> の <code>subscript</code> が2種類定義されていて、期待したのと違う方が呼び出されているからです。</p>

<pre><code class="swift">struct Dictionary&lt;Key : Hashable, Value&gt; : CollectionType, DictionaryLiteralConvertible {
    ...
    subscript (i: DictionaryIndex&lt;Key, Value&gt;) -&gt; (Key, Value) { get }
    subscript (key: Key) -&gt; Value?
    ...
}
</code></pre>

<p><code>json["foobar"]</code> の戻り値は <code>(Key, Value)</code> か <code>Value?</code> のどちらかですが、<code>as String</code> を付けた際に Optional ではないと判断されてしまい <code>(Key, Value)</code> が戻り値の型と判定されます。それでコンパイルエラーになるわけですね。</p>

<p>期待した通りに取得するには、<code>json["foobar"]</code> の戻り値を <code>Value?</code> として扱う必要があるので、</p>

<pre><code class="swift">json["foobar"]!
json["foobar"] as AnyObject?
</code></pre>

<p>のどちらかでアクセスする必要があるわけです。<code>!</code> を付けると unwrap されるので <code>nil</code> が入っていると実行時エラーになります。逆に <code>as AnyObject? as? String</code> でアクセスすると Optional 型になってしまいます。</p>

<p>API のインターフェースと相談して、どちらの型で処理するか決めるといいんじゃないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでForce Unwrapping型の配列に値を追加できない]]></title>
    <link href="http://hamasyou.com/blog/2014/07/31/swift-array-force-unwrapping/"/>
    <updated>2014-07-31T11:28:11+09:00</updated>
    <id>http://hamasyou.com/blog/2014/07/31/swift-array-force-unwrapping</id>
    <content type="html"><![CDATA[<p>この記事は Xcode6 beta4 を元に記述しています。</p>

<h3>Swift の配列は mutable か immutable</h3>

<p>Swift では配列を <strong>mutable/immutable</strong> の区別なく定義することができるようになりました。</p>

<pre><code class="swift">var numbers = [1, 2, 3]
numbers[0] = 0
println(numbers)    // [0, 2, 3]
</code></pre>

<p><code>let</code> で定義すると <strong>immutable</strong>、<code>var</code> で定義すると <strong>mutable</strong> になり、配列の代入はすべてコピーで行われるようになっています。</p>

<h3>Force UnWrapping 型!</h3>

<p>で、ハマったのが次のようなコードです。</p>

<pre><code class="swift">var numbers: [Int]! = [1, 2, 3]
numbers[0] = 0    // error: '@lvalue $T7' is not identical to 'Int'
</code></pre>

<p>Force Unwrapping 型とでも言うんでしょうかね？変数に必ず値が入ってることを保証するために <code>!</code> が付いた型です。
この型で定義した配列には、値の追加や変更ができなくなっています。。</p>

<p>これで何が困るかというと、<code>UIKit</code> 使って <code>UIViewController</code> のサブクラスにプロパティを定義する際に
初期化を <code>viewDidLoad</code> で行う時には、<code>!</code> をつけないと <code>initializer</code> が必要になってしまうので、プロパティの定義には <code>!</code> を付けていました。</p>

<p>そうすると、<em>mutable</em> で扱いたかったプロパティなのに、変更できないという問題にぶち当たったわけです。。どうすんだこれ。。。</p>

<h4>コンパイルエラーの例</h4>

<pre><code class="swift">class MyViewController: UIViewController {

  var numbers: [Int]!

  override func viewDidLoad() {
    super.viewDidLoad()

    self.numbers = [1, 2, 3]
  }


  func myFunc() {
    self.numbers[0] = 0     // コンパイルエラー
  }
}
</code></pre>

<h4>うまくいく例</h4>

<p>対応としては、一旦変数で受けて、変更後に元に戻すっていうので何とかなりますが、コンパイラの方でなんとかならんもんですかね。。</p>

<pre><code class="swift">  func myFunc() {
    var nums: [Int] = self.numbers
    nums[0] = 0
    self.numbers = nums
  }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftはenumをAnyObject型の変数に入れられない]]></title>
    <link href="http://hamasyou.com/blog/2014/07/31/swift-enum-anyobject/"/>
    <updated>2014-07-31T10:39:48+09:00</updated>
    <id>http://hamasyou.com/blog/2014/07/31/swift-enum-anyobject</id>
    <content type="html"><![CDATA[<p>Swift で <em>enum</em> を扱う際にハマった問題です。確認は <em>Xcode6 beta4</em> で行っています。</p>

<h3>Swift の enum は AnyObject 型変数に代入できない</h3>

<p>Swift では <code>enum</code> を <code>AnyObject</code> 型の変数に入れることができません。コンパイルエラーになります。<code>Any</code> 型なら代入できます。</p>

<pre><code class="swift">enum SomeType: Int {
    case None = 0
    case Something
}

let something = SomeType.None
something                                     // Enum Value

let anything: AnyObject = SomeType.Something  // error: type 'SomeType' does not conform to protocol 'AnyObject'

let any: Any = SomeType.Something             // Enum Value
</code></pre>

<p>Swift の <code>enum</code> は <code>AnyObject</code> protocol を実装していないので、<code>AnyObject</code> 型の変数に入れることが出来ません。</p>

<h4>ReactiveCocoa とかと組み合わせるときにこまる</h4>

<p>これの何が不便かというと、<code>enum</code> は UIKit でよく使われていて、<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a> を Swift で使う際に
<code>enum</code> で設定する例えば <code>UITableViewCellAccessoryType</code> なんかを使いたい場合にコンパイルエラーになってしまいます。</p>

<pre><code class="swift">// これはコンパイルエラーになる
RAC(self, "cell.accessoryType") = RACObserve(self, "viewModel.checked").map { ($0 as Bool) ? UITableViewCellAccessoryType.Checkmark : UITableViewCellAccessoryType.None }

// こうしないといけない。。
RACObserve(self.viewModel, "checked")
    .subscribeNext { [weak self] arg in
        let checked = arg as Bool
        self!.accessoryType = checked ? .Checkmark : .None
}
</code></pre>

<p>既存の Objective-C ライブラリで <code>id</code> が使われている箇所が、Swift では <code>AnyObject</code> に対応するので、
Closure 等で <code>id</code> を引数に取ったり、<code>id</code> を戻り値にしていたりする箇所が <code>AnyObject</code> になってしまい、
<code>enum</code> を利用することができません。</p>

<p>変数に代入するだけなら <code>Any</code> 型にすればいいんですが、既存ライブラリとの連携では難しそうです。 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>
これ、何かやり方ないんでしょうかね。。ReactiveSwift 待ちかなぁ</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Any 型にすれば代入できることを <a href="https://twitter.com/takabosoft">@takabosoft</a> さんに教えてもらいました。ありがとうございます！<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift で UITableView 関連の操作をする際に NSIndexPath を作る方法]]></title>
    <link href="http://hamasyou.com/blog/2014/07/03/swift-uitableview-nsindexpath/"/>
    <updated>2014-07-03T11:53:41+09:00</updated>
    <id>http://hamasyou.com/blog/2014/07/03/swift-uitableview-nsindexpath</id>
    <content type="html"><![CDATA[<p>Swift で <code>UITableView</code> 関連のロジックを書くときに、<code>NSIndexPath</code> を作るときは</p>

<pre><code class="swift">let row = 0, section = 0
NSIndexPath(forRow: row, inSection: section)
</code></pre>

<p>のイニシャライザを使うべし。<code>NSIndexPath(index: row)</code> だと <code>row</code> の参照ができなくてエラーになる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Swift with Cocoa and Objective-C]]></title>
    <link href="http://hamasyou.com/blog/2014/06/27/apple-swift-cocoa-objective-c/"/>
    <updated>2014-06-27T00:03:15+09:00</updated>
    <id>http://hamasyou.com/blog/2014/06/27/apple-swift-cocoa-objective-c</id>
    <content type="html"><![CDATA[<p><strong>Swift</strong> を Cocoa や Objective-C と一緒に使う方法の覚書です。</p>

<p>なお、Swift で作成したアプリは iOS8 と OS X Yosemite がリリースされた時点で審査に入れるようです。</p>

<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html">Using Swift with Cocoa and Objective-C</a></p>

<!-- more -->




<div id="toc"></div>


<h2>Basic Setup</h2>

<p>Swift から Objective-C API を呼び出すことができる。逆に、Objective-C から Swift のコードを呼び出すこともできる。</p>

<p>Swift と Objective-C のプロジェクトの大きな違いは、Swift にはヘッダーファイルがない。Swift には全ての情報が <code>.swift</code> ファイルに含まれている。</p>

<h3>import</h3>

<p>Swift でもフレームワークやライブラリを読み込むには <code>import</code> を使う。</p>

<pre><code class="swift">import Foundation
</code></pre>

<p><code>Foundation</code> を読み込むことで、NSDate, NSURL, NSMutableData などを含む全ての Foundation API、全てのメソッド、プロパティ、カテゴリを利用出来るようになる。</p>

<h3>Objective-C と Swift のマッピング</h3>

<ul>
<li>Objective-C の型は同等の Swift の型にマッピングされる。<code>id</code> は <code>AnyObject</code></li>
<li>Objective-C のコア型は Swift の型にマッピングされる。<code>NSString</code> が <code>String</code> のように</li>
<li>Objective-C のコンセプト機能は同等の Swift のコンセプト機能にマッピングされる。ポインタが Optionals と対応するように</li>
</ul>


<p>C++ のコードは直接 Swift には取り込めない。代わりに Objective-C か C で作ったラッパーを作り、それを取り込む。</p>

<h3>Swift から Objective-C のコードを呼び出す方法</h3>

<p><strong>Bridging Header</strong> というものを作る。</p>

<p><a href="http://qiita.com/edo_m18/items/861d090a5471f4f0eeae">[Swift] SwiftとObjective-Cで相互に連携する</a></p>

<p><a href="http://qiita.com/skatata/items/1facd024d239b9545031">SwiftでObjective-CのFrameworkを読み込む方法</a></p>

<h2>Interoperability</h2>

<h3>Initialization</h3>

<p>Objective-C の <code>init</code> メソッド、<code>initWith</code> メソッドは、<code>init</code> で切られて <code>With</code> の部分が捨てられる。捨てられて残った部分が第一引数のパラメータ名に対応する。</p>

<pre><code class="objective-c Objective-C">UITableView *myTableView = [[UITableVIew alloc] initWithFrame:CGRectZero style:UITableViewStyleGrouped];
</code></pre>

<pre><code class="swift Swift">let myTableView: UITableView = UITableView(frame: CGRectZero, style: .Grouped)
</code></pre>

<p>Objective-C のファクトリメソッドは <code>convenience initializer</code> にマッピングされている。</p>

<pre><code class="objective-c Objective-C">UIColor *color = [UIColor colorWithRed:0.5 green:0.0 blue:0.5 alpha:1.0];
</code></pre>

<pre><code class="swift Swift">let color = UIColor(red: 0.5, green: 0.0, blue: 0.5, alpha: 1.0)
</code></pre>

<h3>Methods</h3>

<p>Objective-C のメソッド名がそのまま Swift のメソッドになり、第一引数名が省略される。残りの引数名はそのまま残る。</p>

<pre><code class="objective-c Objective-C">[myTableView insertSubview:mySubview atIndex:2];
</code></pre>

<pre><code class="swift Swift">myTableView.insertSubview(mySubview, atIndex: 2)
</code></pre>

<h3>id</h3>

<p>Swift ではどんな型も表すタイプとして <code>AnyObject</code> を用意している。Objective-C の <code>id</code> は <code>AnyObject</code> に対応する。</p>

<p>Objective-C のメソッドを呼び出すのに、キャストは必要ない。<code>@objc</code> 属性がメソッドに修飾されているので、そのまま呼び出すことができる。</p>

<pre><code class="swift">let futureDate = myObject.dateByAddingTimeInterval(10)
let timeSinceNow = myObject.timeIntervalSinceNow
</code></pre>

<p>AnyObject から <code>as</code> によるキャストでは、ダウンキャストが成功するかどうかの保証ができない。そのため、<code>if-let</code> 構文を使ってチェックすること。</p>

<pre><code class="swift">let userDefaults = NSUserDefaults.standardUserDefaults()
let lastRefreshDate: AnyObject? = userDefaults.objectForKey("LastRefreshDate")
if let date = lastRefreshDate as? NSDate {
    println("\(date.timeIntervalSinceReferenceDate)")
}
</code></pre>

<h3>Closure and Block</h3>

<p>Objective-C の <code>block</code> は Swift の <code>Closure</code> に対応する。</p>

<pre><code class="objective-c Objective-C">void (^completionBlock)(NSData *, NSError *) = ^(NSData *data, NSError *error) {/* ... */}
</code></pre>

<pre><code class="swift Swift">let completionBlock: (NSData, NSError) -&gt; Void = {data, error in /* ... */}
</code></pre>

<h3>@objc アノテーション</h3>

<p>@objc アノテーションを使うことで、Swift のコードを Objective-C の中から呼び出すことができるようになる。</p>

<p><code>@IBOutlet</code>、<code>@IBAction</code>、<code>@NSManaged</code> を使うと暗黙的に @objc が付与される。</p>

<h3>Swift コードから Objective-C コードへの変換</h3>

<p>メソッドはほとんどそのままマッピングされる。init コンストラクタは、第一引数に <code>initWith</code> がつくように変換される。</p>

<pre><code class="swift Swift">func playSong(name: String)
init(songName: String, artist: String)
</code></pre>

<pre><code class="objective-c Objective-C">- (void)playSong:(NSString *)name
- (instancetype)initWithSongName:(NSString *)songName artist:(NSString *)artist
</code></pre>

<h3>Selector</h3>

<p>Objective-C のセレクタは Swift では Selector 構造体にマッピングされる。</p>

<pre><code class="swift">let mySelector: Selector = "tappedButton:"
</code></pre>

<pre><code class="swift">import UIKit
class MyViewController: UIViewController {
    let myButton = UIButton(frame: CGRect(x: 0, y: 0, width: 100, height: 50))

    init(nibName nibNameOrNil: String!, bundle nibBundleOrNil: NSBundle!) {
        super.init(nibName: nibName, bundle: nibBundle)
        myButton.targetForAction("tappedButton:", withSender: self)
    }

    func tappedButton(sender: UIButton!) {
        println("tapped button")
    }
}
</code></pre>

<h2>Writing Swift Classes with Objective-C Behavior</h2>

<p>Objective-C のプロトコルは Swift の protocol に対応する。Objective-C の NSObject プロトコルは <code>NSObjectProtocol</code> になっている。</p>

<h3>Integrating with Interface builder</h3>

<p>Swift でも Interface Builder の機能は利用出来る。Outlet、Actions、ライブレンダリングは Swift でも可能。</p>

<p>Swift では @IBOutlet、@IBAction をプロパティやメソッドに付与する。</p>

<pre><code class="swift">class MyViewController: UIViewController {
    @IBOutlet var button: UIButton
    @IBOutlet var textFields: UITextField[]
    @IBAction func buttonTapped(AnyObject) {
        println("button tapped!")
    }
}
</code></pre>

<p><code>@IBDesignable</code> と <code>@IBInspectable</code> をつかうと Interface Builder で編集が出来る。</p>

<pre><code class="swift">@IBDesignable
class MyCustomView: UIView {
    @IBInspectable var textColor: UIColor
    @IBInspectable var iconHeight: CGFloat
    /* ... */
}
</code></pre>

<h2>Working with Cocoa Data Types</h2>

<h3>String（NSString）、Number（NSNumber）</h3>

<p>NSString を利用したい場合は <code>as</code> を使ってキャストする。もしくは、最初から <code>NSString</code> 型を使う。</p>

<pre><code class="swift">let str = "123"
(str as NSString).floatValue

import Foundation
let myString: NSString = "123"
if let integerValue = (myString as String).toInt() {
    println("\(myString) is the integer \(integerValue)")
}
</code></pre>

<p>NSNumber も同じ。</p>

<pre><code class="swift">let n = 42
let m: NSNumber = n
</code></pre>

<h3>Array</h3>

<p>NSArray は <code>AnyObject[]</code> にマッピングされる。</p>

<h3>Foundation Data Types</h3>

<p>NSSize、NSPoint はそのまま利用出来る。</p>

<pre><code class="swift">let size = NSSize(width: 20, height: 20)
let rect = NSRect(x: 50, y: 50, width: 100, height: 100)
</code></pre>

<h3>NSLog</h3>

<p>NSLog はそのままの構文で利用出来る。</p>

<pre><code class="swift">NSLog("%.7f", pi)
</code></pre>

<h3>NSError and Error Reporting</h3>

<pre><code class="swift">var writeError : NSError?
let written = myString.writeToFile(path, atomically: false,
    encoding: NSUTF8StringEncoding,
    error: &amp;writeError)
if !written {
    if let error = writeError {
        println("write failure: \(error.localizedDescription)")
    }
}

func contentsForType(typeName: String! error: NSErrorPointer) -&gt; AnyObject! {
    if cannotProduceContentsForType(typeName) {
        if error {
            error.memory = NSError(domain: domain, code: code, userInfo: [:])
        }
        return nil
    }
    // ...
}
</code></pre>
]]></content>
  </entry>
  
</feed>
