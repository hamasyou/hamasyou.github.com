<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: デザインパターン | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/dezainpatan/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-03-01T04:01:43+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[モバイルデザインパターン― ユーザーインタフェースのためのパターン集]]></title>
    <link href="http://hamasyou.com/blog/2012/09/27/487311568X/"/>
    <updated>2012-09-27T11:27:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/09/27/487311568X</id>
    <content type="html"><![CDATA[<p><blockquote><p></p></p><p><p>モバイルアプリのUIパターンを手軽に参照できるリファレンス。主要なプラットフォームで動くモバイルアプリの画面例を400点以上使いながら、ユーザーインタフェースの定番パターンをグラフィカルに解説します。本書で紹介する68個の基本パターンと5個のアンチパターンが、使いやすいモバイルアプリをデザインするうえでクリアしなければならない設計上の課題を解決してくれます。</p></p><p><p><em>掲載UIパターン</em>:ナビゲーション、フォーム、テーブルとリスト、検索、並び替え、フィルター、ツール、グラフ、誘導、フィードバック、アフォーダンス、ヘルプ、アンチパターン</p></p><p><p></p><footer><strong>本書背表紙より</strong></footer></blockquote></p>

<p>本書は、モバイルアプリ（スマートフォン上で動くアプリ）の UI デザインの定石をパターンとして紹介しているものになります。いいアプリを作っても、UI や見た目が悪いとそれだけで価値が下がってしまいます。アプリにとって本当に良い UI デザインを導ける人は、まだまだ少数だと思います。</p>

<p>本書は、そんな良いデザインというのはどういうものなのか、使いやすい UI というのはどういうものなのかを名前をつけてパターン化し紹介しています。内容はとてもグラフィカルなので、かるく読み流すことも出来ますし、中身を熟読してさらに自分流のパターンを産み出していくのも良いと思います。</p>

<p>ますます熱くなってくるであろうモバイルアプリ開発の現場で、デザインができなくて泣いている人にオススメの一冊です。スマートフォンアプリの開発者は、手元に置いておくと便利です。</p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>本書で紹介されているパターンの参考イメージ</h3>


<p><a href="http://www.mobiledesignpatterngallery.com/mobile-patterns.php" rel="external nofollow">Mobile Design Pattern Gallery:UI Patterns for iOS, Android and More</a></p>

<p><a href="http://www.flickr.com/photos/mobiledesignpatterngallery/collections" rel="external nofollow">Mobile Design Pattern Gallery&rsquo;s photostream - flickr</a></p>

<h3>ナビゲーション</h3>




<dl>
<dt>Springboard（スプリングボード）</dt>
<dd><p>起動直後に表示されるメニューが、アプリ利用のきっかけになる。パーソナライズによって表示項目を変えてもよい。各メニュー項目が同じ重要度の場合はグリッドレイアウトを、そうでない場合は変則的なレイアウトを検討する。</p></dd>
<dt>List Menu（リストメニュー）</dt>
<dd><p>起動直後にメニューが並ぶ点は、スプリングボードと同じだが、メニュー項目の名前が長い場合や、サブタイトル等が必要な場合に利用する。</p></dd>
<dt>Tabs（タブ）</dt>
<dd><p>タブは標準的な Web サイトでのナビゲーションパターンに基づいているため、ユーザにとって馴染みが深い。</p></dd>
<dt>Gallery（ギャラリー）</dt>
<dd><p>個々のコンテンツを通じてナビゲーションを行う。コンテンツが頻繁に変わるような場合に利用すると良い。</p></dd>
<dt>Dashboard（ダッシュボード）</dt>
<dd><p>それぞれのデータや指標の要約が一目でわかるため、財務管理、データ分析、マーケティングアプリなどで使える。コンテンツの詰め込みすぎに注意する。</p></dd>
<dt>Metaphor（メタファー）</dt>
<dd><p>最初に表示される画面が何かのメタファーになっているのが特徴で、ゲームなどで使える。また、ユーザのメモをカタログ化したようなアプリにも応用しやすい。分かりにくいメタファーを使ってしまうと使いにくい UI になってしまうため注意。</p></dd>
</dl>




<h4>補助的なナビゲーション</h4>


<p>メニューとしては使いづらいが、一つのコンテンツの補助メニューとして利用しやすいパターン。</p>

<dl>
<dt>Carousel（カルーセル）</dt>
<dd><p>コンテンツをよく見せたい場合に使える。コンテンツの数が多くなった場合（8個以上）は、リスト表示を検討する。</p></dd>
<dt>Expanding List（伸縮リスト）, アコーディオンメニュー</dt>
<dd><p>徐々に詳細なオプション項目を表示させたい場合に適している</p></dd>
</dl>




<h3>テーブルとリスト</h3>




<dl>
<dt>Basic Table（基本的なテーブル）</dt>
<dd><p>行間に細い線を表示したりすると見やすさが向上する。縦の罫線や色の濃い罫線は使わない。文字列は左寄せ、数値は右寄せ。</p></dd>
</dl>




<h3>検索、並び替え、フィルター</h3>




<dl>
<dt>Explicit Search（明示的な検索）</dt>
<dd><p>入力内容をクリアするためのボタンを入力フィールド内に用意する。検索をキャンセルできるボタンを用意する。検索中であることがわかるフィードバックを用意する。</p></dd>
<dt>Dynamic Search（動的な検索）</dt>
<dd><p>アドレス帳、ユーザのメディアライブラリなどの有限なデータ集合に対して、入力ごとに動的に検索を行うパターンは有効になる。</p></dd>
<dt>Saved and Recent Searches（検索結果の履歴）</dt>
<dd><p><em>成功を収めたモバイルインターフェースはいずれも「ユーザの活動を尊重する」というユーザビリティ原則</em>を守っている。</p></dd>
</dl>




<h3>ツール</h3>




<dl>
<dt>Call to Action Button（アクションボタン）</dt>
<dd><p>画面内でユーザに行わせたいアクションが1種類だけの場合、目立つボタンを画面内に用意するとよい。</p></dd>
<dt>Bulk Action（操作の一括実行）</dt>
<dd><p>画面上のコンテンツを一括して実行できるモードを提供する場合、編集モードというのを用意するとよい。編集モードから復帰するための手段も明確に提供する。</p></dd>
</dl>




<h3>誘導</h3>




<dl>
<dt>Tip（ツールチップ）</dt>
<dd><p>ツールチップは対象の機能に隣接して表示されるようにする。</p></dd>
<dt>Tour（ツアー）</dt>
<dd><p>アプリが持つ重要な機能をユーザに明らかにするために使う。ユーザにとってのゴールは何かという観点で設計する。</p></dd>
<dt>Transparency（透過表示）</dt>
<dd><p>画面上のコンテンツに重なった半透明のレイヤーで使用方法を表示する。ユーザが操作を始めたら、レイヤーを非表示にする。</p></dd>
</dl>




<h3>フィードバックとアフォーダンス</h3>




<dl>
<dt>Error Messages（エラーメッセージ）</dt>
<dd><p>モーダルダイアログとして表示するよりも現在内の画面内にメッセージを配置する方が望ましい。</p></dd>
<dt>Tap（タップ）</dt>
<dd><p>立体表現や影をデザインとして取り入れることで、それがタップ可能であることを示せる。</p></dd>
<dt>Flick（フリック）</dt>
<dd><p>表示可能なコンテンツが他にもあるということを示す方法として、フリック可能なことを認識させるという方法もある。</p></dd>
</dl>




<h3>アンチパターン</h3>




<dl>
<dt>Idiot Box（作業を妨げる愚行）</dt>
<dd><p>確認ダイアログを表示するのはもとに戻せない操作をする場合だけにする。</p></dd>
</dl>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ドメイン駆動]]></title>
    <link href="http://hamasyou.com/blog/2008/06/29/4798116173/"/>
    <updated>2008-06-29T22:46:00+09:00</updated>
    <id>http://hamasyou.com/blog/2008/06/29/4798116173</id>
    <content type="html"><![CDATA[<p>本書は、<strong>ドメイン駆動設計（DDD:Domain Driven Design）</strong>について書かれているで、<strong>ドメインモデル</strong>、エンタープライズアプリケーションアーキテクチャ、アーキテクチャパターン、テスト駆動開発を勉強する本です。</p>

<p>この本のお勧めの点の一つが、筆者の経験をもとにした生きたサンプルにあります。「システム開発は○○の理由でドメイン駆動設計を行ったほうがよい。こういう背景があって、こういうアーキテクチャパターンの適用を考えていく。」こういった生きた経験が本書にちりばめられています。</p>

<p>対象読者は業務アプリケーション開発に携わるアーキテクチャ、システムエンジニア、開発者さん達です。最近は定着したドメイン駆動設計（ドメイン駆動開発）という言葉ですが、現場で実際に使われているのは実は少ないのではないでしょうか。ドメイン駆動で設計するとはどういったことなのか？本書を読めば、新しい視点が学べると思います。お薦めの一冊です。</p>

<!-- more -->




<h2>ドメイン駆動設計とは</h2>


<p><blockquote><p>この本の最大のテーマは、ドメインモデルをクリーンに作りつつ、永続記憶とも仲良くする方法である。ドメインモデルのようなもののための永続記憶はどのように構成されるかを示し、ドメインモデルとデータベースの間に橋をかける。</p></p><p><p></p><footer><strong>本書:序章より</strong></footer></blockquote></p>

<h3>ユースケースとトランザクションスクリプト</h3>


<p>ユースケースとはシステムの一つの機能（振る舞い）をユーザの視点から記述するものです。著者の Jimmy Nilsson は、かつてはユースケース一つにつき一つのクラスを作って機能を設計していたそうです。おそらく、いわゆる「3階層アーキテクチャのビジネスロジック層における<strong>サービスクラス</strong>」のことだと思われます。</p>

<p>この方法で設計を行うと、機能を呼び出して結果を得るのに一つのサービスクラスの一つのメソッドを呼び出すだけという構造になります。これが手続き型のトランザクションスクリプトというアーキテクチャパターンです。ユースケースを一つにつきサービスクラスを一つ作ると、一つの機能がそのクラスにカプセル化され処理の見通しはよくなります。</p>

<h3>ドメイン駆動設計（Domain Driven Design）を重視する理由</h3>


<p>ユースケースは確かに顧客との話し合いにはとても有効なものです。しかし、システムを設計するのにユースケースにとらわれる必要はないというのが筆者らの主張のようです。ユースケースでシステムの外観（インターフェース）を設計し、モデルによってドメインの主要コンセプト、業務のコアを定義し設計していくというのが効率的なシステム開発につながるのではないかと考えています。</p>

<p>最近の技術の発達のおかげで、顧客とモデルをベースに議論を行うことも不可能ではなくなってきました。</p>

<h3>オブジェクト指向とドメインモデル</h3>


<p>モデルを重視してシステムを設計すればおのずとオブジェクト指向でシステムを開発することになります。これをすんなり実装に落とすとなれば、当然ドメインモデルパターンのアーキテクチャを適用するのが自然の流れです。</p>

<p>ドメインをモデリングし、それをすんなり実装に落とすためにビジネスロジックにドメインモデルパターンを適用するのがドメイン駆動設計のコアの考え方です。</p>

<h2>ドメインモデルとデータベース</h2>




<h3>データベースの設計方針</h3>


<p>ドメインモデルで設計を進めていくと、当然データベースの設計をドメインモデル寄りにする必要が出てきます。しかしここで問題がでてくることになります。</p>

<p>データベースは今でもリレーショナルデータベースが一般的に使われています。リレーショナルデータベースは集合を基礎としたものになっています。ドメインモデルも集合を基礎としているのは変わりません。しかしドメインモデル（オブジェクト指向）はオブジェクトのデータ構造を出来るだけカプセル化し、振る舞いをオブジェクトに持たせようとするためデータベースのモデルと集合の粒度が異なるのです。</p>

<p><blockquote><p>設計ということでは、粒度が大きく異なる。例を使ってこの点を明らかにしよう。特定の人物について、家庭用電話番号ひとつと仕事用電話番号ひとつを管理したいとする。（中略）</p></p><p><p>ここで重要なのは、1:1でもすべてのカラムが通常一つのテーブルで定義されていることである。オブジェクト指向モデルでは、Person と PhoneNumber の2つのクラスを作るのが普通だろう。そして Person のインスタンスは 2つの PhoneNumber インスタンスを組み合わせたものになる。リレーショナルモデルでも同じようなことができなわけではないが、通常は無意味である。<b>リレーショナルモデルでは、テーブルの定義に動作を結び付けたりはしないので、定義を再利用しようなどとは考えない。これはオブジェクト指向モデルの逆である。</b></p></p><p><p></p><footer><strong>本書:第1章「尊重すべき価値」P.19より</strong></footer></blockquote></p>

<p>もう一つあるのは、データベースは継承をサポートしないことです。つまり、ポリモーフィズムが実現できないのです。オブジェクト指向では継承（ポリモーフィズム）は重要な概念です。</p>

<h3>データマッパー（O/Rマッパー）</h3>


<p>上で述べたようなデータベースモデルとオブジェクト指向モデルの乖離（かいり）のことを<strong>インピーダンスミスマッチ</strong>と呼びます。そして、このインピーダンスミスマッチを埋める目的で導入されるものに、データマッパー（O/Rマッパー）があります。Java では Hibernate が有名です。</p>

<h2>本書に書いてあること</h2>




<ul>
<li>ドメイン駆動設計</li>
<li>ドメインモデルが重要な理由</li>
<li>アーキテクチャパターンとしてのドメインモデルの有効性</li>
<li>テスト駆動開発によるモデルの見つけ方</li>
<li>ドメインモデルに対するルール</li>
<li>永続化方針</li>
<li>PoEAA の応用としてのインフラパターン</li>
<li>NHibernate（.Net ようのO/Rマッパー）の導入</li>
<li>設計テクニック：SOA、DI、AOP</li>
<li>UIに関する設計</li>
<li>ドメインモデルパターン再考</li>
</ul>


<p>ドメインモデルを現場にどうやって適用するか、なぜドメインモデルなのか、ドメインモデルを使った実際の設計例などが知りたい人は、ぜひ本書を読んでください。440ページ近くありますが、すんなり読めてしまうくらいどっぷりはまれます。</p>

<h2>参考</h2>




<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321125215/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109037/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[エンタープライズ アプリケーションアーキテクチャパターン]]></title>
    <link href="http://hamasyou.com/blog/2006/02/05/4798105538/"/>
    <updated>2006-02-05T11:43:00+09:00</updated>
    <id>http://hamasyou.com/blog/2006/02/05/4798105538</id>
    <content type="html"><![CDATA[<p>本書は、業務アプリケーションのアーキテクチャパターンをカタログ化したパターン本です。アーキテクチャ設計において考えなければならない必須要素（下記箇条書き）に関して、例を示しながら説明しています。</p>

<ul><li>レイヤ化</li><li>プレゼンテーション層の構築</li><li>ビジネスロジック層の構築</li><li>インテグレーション層（O/Rマッピング）の構築</li><li>分散環境に関するパターン</li><li>セッションステートパターン</li><li>基本パターン</li></ul>


<p>アーキテクチャは開発者の実作業に大きな影響を与えます。良いアーキテクチャは、システムに要求されている事柄を容易に構築できる環境を提供します。悪いアーキテクチャは一つのことを成し遂げるのに苦労を伴います。</p>

<p>良いアーキテクチャか悪いアーキテクチャかというのは、設計の良し悪しで決まることもありますが、ほとんどはそうではないと思います。アーキテクチャの良し悪しは、そのアーキテクチャの<strong>使いどころ</strong>がぴったりはまっているかどうかだと思います。</p>

<p>本書は、それぞれのアーキテクチャパターンの長所・短所、使いどころ、使用上の注意などがまとめられています。初めてアーキテクチャ設計に携わるような開発者に是非とも読んでもらいたい一冊です。</p>

<!-- more -->




<h2>特徴</h2>


<p>本書は、業務アプリケーションのアーキテクチャパターンをカタログ化したものです。Amazonのカスタマーレビューにも書いてある通り、目新しいアーキテクチャは出てきません。業務アプリケーションのアーキテクチャ設計を経験した人なら誰でも考えたことがあるような設計が載っているだけです。</p>

<p>とはいえ、アーキテクチャ設計のパターンをカタログ化し、それぞれの長所・短所、注意点、使いどころ等がまとめられていますので、手元においておく価値は十分にあります。ただし、邦訳は日本語がちょっとアレなので（人のことは言えませんが・・・^^;）、英語が苦にならない人は原著をおすすめします。『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321127420/sorehabooks-22/250-8893783-2139434?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" rel="external nofollow">Patterns of Enterprise Application Architecture</a>』</p>

<h3>どこかで見たことあるぞ！</h3>


<p>本書にまとめられているパターンは、アーキテクチャ設計に興味のある人ならどこかで目にしたことがあるものが多いと思います。特に目新しいパターンはありません。</p>

<p>レイヤ化のパターンを例にとると、プレゼンテーション層・ビジネスロジック層・データソース層に分けるということが書いてあります。3階層のアーキテクチャというのはどこかで聞いたことがあるのではないでしょうか？このパターンを使うときは、ビジネスロジック層とデータソース層はプレゼンテーション層に依存してはいけないと言う明確なルールがありますと書かれています。</p>

<p>こういった、各パターンについて、使い方や注意点が<strong>マーチン・ファウラー</strong>によってまとめられていると言うところに、本書の価値があるのだと思います。</p>

<h2>参考</h2>


<ul>
<li>J2EEパターンの優良本</li>
</ul>


<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>業務アプリケーション開発の異端児?</li>
</ul>


<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321200683/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>パターンを使って設計をリファクタリングする本</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282384/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ソフトウェアパターン入門―基礎から応用へ]]></title>
    <link href="http://hamasyou.com/blog/2005/12/05/4883732150/"/>
    <updated>2005-12-05T00:58:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/12/05/4883732150</id>
    <content type="html"><![CDATA[<p>ソフトウェアパターンと聞いて何を思い浮かべますか？デザインパターン？アナリシスパターン？アーキテクチャパターン？このどれも本書でまとめられています。『ソフトウェアパターン入門』と題されていますが、その中身は非常に広範囲にわたっています。ソフトウェア開発の組織に関するパターンもまとめられています。</p>

<p>本書は、ソフトウェア開発におけるパターンと名のつくもののまとめ本です。詳しく知りたい場合は本書にまとめられている別の書籍へのポインタを利用することができます。</p>

<p>本書の執筆はパターンワーキンググループの方たちが行っています。著者がそれぞれ違うので、章の深さや切り口が様々です。それでいて非常に上手くまとめられているため、パターンという言葉に疲れてしまった人、頭がゴチャゴチャしている人におすすめの一冊です。</p>

<!-- more -->




<h2>特徴</h2>




<h3>イディオム</h3>


<p>プログラミングに関するパターンの中に「イディオム」というものがあります。こういうときにはこう書くべしと言ったものをまとめたものです。Javaもイディオムに関する本がいくつかあります。有名なところで言うと『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/249-3277344-6893969?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" rel="external nofollow">Essential Java Style</a>』という本があるそうです。</p>

<p>イディオムは、プログラミング初心者にとって非常に重要なものです。私は、<strong>保守性の高いコードは良いコード</strong>だと考えています。プログラミング初心者は保守性の高いコードを書くのに苦労します。その一つに、「良い書き方が分からないから」という理由があるはずです。イディオムは、「良い書き方が分からない」を解決するパターンなのです。</p>

<p>本書はソフトウェア開発のパターンから、イディオムまで、様々な粒度のパターンがまとめられています。本書は、読む人の立場によって役に立つ情報が違いますが、管理者からプログラマまで広く役に立つ本です。</p>

<h2>参考</h2>


<ul>
<li>Javaのイディオム集です。(洋書)</li>
</ul>


<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0130850861/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>Java開発者必見！本書を理解することが中級レベルへの近道。</li>
</ul>


<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>J2EEのEffective Java版(洋書)</li>
</ul>


<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321130006/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[J2EEデザインパターン]]></title>
    <link href="http://hamasyou.com/blog/2005/07/31/4873111781/"/>
    <updated>2005-07-31T22:49:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/07/31/4873111781</id>
    <content type="html"><![CDATA[<p>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/249-1102280-5865166?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" rel="external nofollow">J2EEパターン 第２版</a>』で紹介されているパターン ＋ トランザクション、メッセージング、アンチパターン といった構成になっています。J2EEのデザインパターンに関する書籍としては、かなり上位のレベルの本です。</p>

<p>デザインパターンは、Javaプログラマならどこかで一度は聞いたことがある、良い設計の模範のことです。繰返しあらわれる設計に名前を付けて管理したものです。本書は、J2EEにおけるデザインパターンの解説書、リファレンスになっています。</p>

<p>オライリーから出版されているというだけで、かなり濃い内容で詳細に書かれていることが分かると思います。本書は、オライリー本にしては珍しく、<b class="red">とても分かりやすい</b>です。</p>

<p>J2EEデザインパターンを勉強したい人。良い設計について学びたい人におすすめです。実際に使う機会がまだないとしても、良い設計とはどんなものなのかということを勉強しておくことは良いことです。J2EEのデザインパターン本で迷ったら、本書を購入してみてください。</p>

<!-- more -->




<h2>特徴</h2>




<h3>J2EEパターンのことで書かれていないことはない！</h3>


<p>とにかく詳しく、幅広い知識を得ることができます。すべてのパターンが書かれているというのは言いすぎかもしれませんが、本書の内容以外の情報が必要になる場合と言うのは、特殊な案件か、濃い中でも濃い分野だと思います。</p>

<h3>ソースコードが多い</h3>


<p>サンプルとなるソースコードが多いです。文章を読んでイメージがわかないときでも、サンプルコードを読めば何が言いたいのか理解できるでしょう。オライリー本らしく、絵はあまり多くないです。文章とソースコードで読ませていく本です。</p>

<h2>参考</h2>


<ul>
<li>J2EEパターンについて分かりやすく書かれています。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282287/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>エンタープライズ系のシステムを構築する場合のパターン集</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
