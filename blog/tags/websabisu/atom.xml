<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Webサービス | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/websabisu/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-12-25T11:28:32+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[REST] 認証が必要な API を REST っぽく作るときのメモ]]></title>
    <link href="http://hamasyou.com/blog/2010/11/18/api-rest/"/>
    <updated>2010-11-18T22:23:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/11/18/api-rest</id>
    <content type="html"><![CDATA[<p>REST で Web サービスを構築する場合に、いつも認証が必要なリソースの URI の設計で悩むので、今までの経験上こうしたら上手くいったというのをメモしておきます。</p>

<p>RESTful でもなければ、こんなの世に広めるなよ、害悪だ。っていう批判もあるかもしれませんが、Web の世界でセキュリティと上手く付き合っていくために、セッションを使って認証管理をすると何かといいことが多いので。</p>

<p>あとは、認証が必要な Web API に無理に REST を適用しなくてもいいんじゃないか？ みたいな所もあるかと思いますが。</p>

<!-- more -->




<h2>認証が必要な API を REST っぽく作るメモ</h2>




<h3>REST とは</h3>


<p><strong>REST</strong> に馴染みのない人はまずこっちをみてください。</p>

<h4>参考</h4>




<ul>
<li><a href="http://yohei-y.blogspot.com/2005/04/rest_23.html" rel="external nofollow">yohei-y:weblog</a></li>
<li><a href="http://hamasyou.com/archives/000343" rel="external nofollow">RESTful Webサービス - それはBooks</a></li>
<li><a href="http://hamasyou.com/archives/000347" rel="external nofollow">Webを支える技術 -HTTP、URI、HTML、そしてREST - それはBooks</a></li>
</ul>




<div class="bookInfo">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/4774142042?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4774142042" rel="external nofollow"></a>
</div>
<ul><li><em>Webを支える技術 -HTTP、URI、HTML、そしてREST</em></li><li>山本 陽平 (著) </li><li>技術評論社</li></ul>
<div class="clear"></div>
</div>




<div class="bookInfo">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/4873113539?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4873113539" rel="external nofollow"></a>
</div>
<ul><li><em>RESTful Webサービス</em></li><li>Leonard Richardson (著), Sam Ruby (著), 山本 陽平 (監修), 株式会社クイープ (翻訳)</li><li>オライリー・ジャパン</li></ul>
<div class="clear"></div>
</div>




<h3>認証が必要な API の URL 設計</h3>


<p>RESTful なサービスでは、ステートレスが望ましいとされているみたいですが、現実的には認証済みのユーザしかアクセス出来ないリソースや、権限を持っているユーザしか更新できないリソースっていうのも多くあります。</p>

<p>Cookie を使ったセッション管理の罪はステートをサーバ側に保持してしまう、<em>ステートフル</em>な状態をつくってしまうことというのは十分理解した上で、それでもやっぱりセッションで認証状態を管理する方法が分かりやすくて Web 屋には使いやすいと個人的には思っています。</p>

<p>そこで、<em>REST</em> を完全に理解したわけではないし、こういう使い方は多分 RESTful ではないんだろうけれども、セッションで認証情報を使った Web サービスを作る上でのポイントをメモしておきます。</p>

<h2>認証が必要なリソースは、認証済みの状態を元に URI を設計する</h2>




<h3>認証した人から見た URI か誰から見ても同じリソースを表す URI か</h3>


<p>たとえば、Twitter を思い浮かべてください。Twitter API をつかって自分のタイムラインを表示する場合、Twitter では次のような URI を使います。</p>

<pre>http://api.twitter.com/1/statuses/home_timeline.format</pre>


<p>この URI は認証が必要な URI になっています。この URI には&quot;誰の&quot;タイムラインを取得するかの情報は入っておらず、<em>home_timeline</em>、つまり自分のホームのタイムラインを取得する URI になっています。</p>

<p>&quot;自分の&quot;とは、<em>認証した人</em>という意味になります。</p>

<p>この URI は次のような URI になるように設計しても良いはずです。（※ 説明のための例なので、実際に Twitter にこの URI でアクセスしても繋がらないです。）</p>

<pre>http://api.twitter.com/1/statuses/<em>hamasyou</em>/home_timeline.format</pre>


<p>hamasyou のタイムラインを表したリソースです。認証した人が誰かという事は関係なく、常に同じリソースを表すようにしたものです。</p>

<p>ただし、認証した人 = hamasyou ではない場合には、この URI へアクセスしても、401 Unauthorized を返します。</p>

<h3>認証が必要な URI は、認証した人から見た URI になるように設計するほうがよい</h3>


<p>同じリソースを表す URI はいくつあっても構わず、唯一の URI である必要はないというのが REST の考え方ですので、どういうふうに URI を設計してもよいとは思います。</p>

<p>が、僕の経験上ですが、上のような認証が必要なリソースを表す URI は、認証した人から見た URI として設計するのがよいです。</p>

<p>こうしておくと何が良いかというと、<em>セキュリティを保ったままコードがきれいに書けることが多い</em>からです。</p>

<h3>認証が必要なリソースは、常にアクセス権限を意識しなければならない</h3>


<p>Ruby on Rails で作られたブログサービスを例にとります。例えば、次のようなルーティングでアクセスする機能があったとします。</p>

<pre>/blogs/<i>:blog_id</i>/articles/<i>:id</i>.<i>:format</i></pre>


<p>これは、あるユーザが所持する :blog_id のブログの :id で表される記事を取得するルーティングです。このルーティングを定義すると</p>

<pre>
GET     /blogs/<i>:blog_id</i>/articles/<i>:id</i>.<i>:format</i>
POST    /blogs/<i>:blog_id</i>/articles
PUT     /blogs/<i>:blog_id</i>/articles/<i>:id</i>
DELETE  /blogs/<i>:blog_id</i>/articles/<i>:id</i></pre>


<p>という HTTP リクエストと対応する機能のルーティングが定義されます。</p>

<p>この時、GET 以外のリクエストはすべて :blog_id を所持するユーザからのリクエストしか受け付けたくないとします。よくある会員サービスはこういう形になると思います。</p>

<h3>:blog_id はリクエストで送られるべきではなく、認証情報から取得するべき</h3>


<p>上のようなリクエストを受け付けたとき、やりがちなのは次のようなコードです。</p>

<pre class="code">blog = <em><span class="class">Blog</span>.find(params[<span class="literal">:blog_id</span>]</em>
blog.articles.create(params[<span class="literal">:id</span>])</pre>


<p>こうしてしまうと、:blog_id が認証した人の所持するブログと違う場合でも、認証さえ通っていれば別の人のブログの記事を触れてしまうことになります。</p>

<p>これは、正しくは次のようにする必要があります。</p>

<pre class="code">user = <span class="class">User</span>.authenticated_user_from_session
blog = user.blog
blog.articles.create(params[<span class="literal">:id</span>])</pre>


<p>authenticated_user_from_session は認証済みのユーザを取得するメソッドと考えてください。このように、きちんと認証した人に紐づくブログを取り出して、その記事を触るということをする必要があります。</p>

<h3>認証情報から引ける情報を URI に含めると不要な処理が増える</h3>


<p>上で見たように、セキュリティを考慮すると、認証情報から操作対象のリソースを引っ張る必要がでてきます。このとき、URI に :blog_id が含まれていると</p>

<ul><li>「<em>URI に :blog_id が含まれているので、自分以外のブログも更新できるんだな</em>」と考えられてしまったり、</li>
<li>「<em>URI には :blog_id が含まれているけど使わない</em>」という実装になって、URI の表現と挙動が一致しなくなってしまったり、</li>
<li>「<em>認証情報から引けるブログの id と URI の :blog_id を毎回比較してエラーチェックをする</em>」といった不要な処理を書くようになってしまったりします。</li>
</ul>




<h3>RESTful ではないかもしれないけど、認証にセッションをつかうなら</h3>


<p>このように、認証が必要なリソースへのアクセスに、認証情報から引ける情報を含めてしまうと、いろいろとめんどうくさいことになりがちです。なので、個人的におすすめするのが、次のように URI を設計する方法です。</p>

<ul><li>1) リソースごとに認証が必要かどうかを考える</li>
<li>2) 認証が不要なリソースの場合、URI にはリソースへアクセスするのに必要なパラメータをすべて含めるようにする</li>
<li>3) メソッドごとに認証が必要なリソースの場合、認証が必要なメソッドに関しては認証情報から引ける情報は含めないようにする</li>
<li>4) または、認証が必要なリソースを表す URI を別に作成してそちらにリダイレクトする</li></ul>




<pre>2の例)
GET     /wiki/<i>:page_name</i>.<i>:format</i>
PUT     /wiki/<i>:page_name</i>
DELETE  /wiki/<i>:page_name</i></pre>




<pre>3の例)
GET     /blogs/<i>:blog_id</i>/articles/<i>:id</i>.<i>:format</i>
POST    /articles
PUT     /articles/<i>:id</i>
DELETE  /articles/<i>:id</i></pre>


<p>こんなふうに考えると、認証が必要なリソースも上手く扱えるんじゃないかと思います。</p>

<p>他に、上手くやる方法を知っている方がいれば、是非教えていただけると助かります。いつも認証周りの設計で苦労するので。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webを支える技術 -HTTP、URI、HTML、そしてREST]]></title>
    <link href="http://hamasyou.com/blog/2010/05/31/4774142042/"/>
    <updated>2010-05-31T18:31:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/05/31/4774142042</id>
    <content type="html"><![CDATA[<p>Webで成功するサービスを作る究極の指針は「シンプルであること」だと思います。これは別にWebに限らずそうだと思います。例えば、AppleやSONYやDELLなどの起業が成功したのは、シンプルな製品、サービスを作り出したからではないかと思います。Googleの検索窓なんかは、究極のシンプルだと思います（だんだんといろんなものがつき始めましたが。。。）</p>

<p>業務で使用するWebサービス、コンシューマ向けのWebアプリケーションAPIなどもこの設計指針が当てはまると思いますし、本書はこのことだけが追求されて書かれている良書です。</p>

<p>Webの成り立ち、ここまで成長してきたのは何故か、Webをより良く使うための設計方針が本書には詰まっています。Web開発の初心者にはもちろん、Web開発をバンバンにやってきた人にも、一度は目を通して欲しい本です。かなりオススメですし、読めば必ず目から鱗間違いなしです。</p>

<!-- more -->


<p>RESTについては、<a href="http://hamasyou.com/archives/000343" rel="external nofollow">RESTful Webサービス</a>の記事も参考にしてください。</p>

<h2>Webを支える技術</h2>




<dl>
  <dt>HTTP、URI、HTML</dt>
  <dd><p>HTTPというシンプルなプロトコルの上で、リソースを一意に特定するURIを用いて、HTMLで記述されたメディアを読む。Webはそんなシンプルな技術によって成り立っています。</p></dd>
  <dt>ハイパーメディア</dt>
  <dd><p>テキスト、画像、音声、動画などをハイパーリンクで結びつけたシステムをハイパーメディアと呼びます。Webで最も重要なのはこのハイパーリンクによってメディアがリンクしているということです。</p></dd>  
  <dt>分散システム</dt>
  <dd><p>Webはひとつのシステムで成り立っているわけではなく、大量のコンピュータが組み合わさっています。ネットワーク上に散らばったこれらのコンピュータが相互動作するのは、シンプルなプロトコルだからこそと言えるでしょう。</p></dd>
</dl>




<h2>REST-Webのアーキテクチャスタイル</h2>


<p>RESTとはアーキテクチャスタイルでRESTアーキテクチャスタイルなアーキテクチャのことをRESTfulアーキテクチャと呼びます。</p>

<p><blockquote><p>RESTはWeb全体のアーキテクチャスタイルでもあり、個別のWebサービスやWeb APIのアーキテクチャスタイルでもあります。一人一人が作る個別のWebサービスやWeb APIでも、RESTの約束を守ることが重要です。個別のWebサービスが全体の調和を乱しては、全体が統一したアーキテクチャスタイルを守れないからです。</p></p><p><p></p><footer><strong>本書 P.27</strong></footer></blockquote></p>

<h3>リソース</h3>


<p>RESTの重要な概念の一つにリソースがあります。<strong>リソースとはWeb上に存在する名前を持った情報</strong>の事をいいます。WebではこれをURIで表します。</p>

<p>RESTfulアーキテクチャではこのリソースを「アドレス可能な状態」にしておくことで、システムとして綺麗な形（シンプルなプログラムが可能）になります。</p>

<p><blockquote><p>URIが備える、リソースを簡単に指し示せる性質のことを「アドレス可能性」（Addressability）と呼びます。リソースをアドレス可能な状態、すなわちきちんと名前が付いており適切な手段でアクセスできる状態にすると、プログラムをとても作りやすくなります。</p></p><p><p></p><footer><strong>本書 P.29</strong></footer></blockquote></p>

<p>リソースは複数のURIを持つことができます。例えば、</p>

<pre>
http://www.hamasyou.com/reports/newest
</pre>




<pre>
http://www.hamasyou.com/reports/system/2010-05-31/1
</pre>


<p>は同じリソースを指すことができます。ただし、一つ目のURIは時間の経過とともに指し示すリソースが変わってしまうことがあります。常に同じリソースを表したい場合には、パーマネントリンクなどを参考にすると良いでしょう。</p>

<h3>クールなURIは変わらない</h3>


<p>良いURIやきれいなURIの事を「<strong>クールURI</strong>」と呼ぶそうです。「URIが変わらないべきである。変わらないURIこそが最上のURIである。」</p>

<p>クールURIにするためには、次のことに気をつければ良さそうです。</p>

<ul>
  <li>プログラミング言語に依存した拡張子やパスを含めない</li>
  <li>メソッド名やセッションIDを含めない</li>
  <li>URIはリソースを表現する名詞にする</li>
</ul>




<h4>プログラミング言語に依存した拡張子やパスを含めない</h4>


<p>例えば、JavaのStrutsを使うと、スタンダードなURIは「.do」という拡張子がつけることが多くあります。また、CGIなどの場合には、スクリプト言語の拡張子（.pl、.rb、.cgi など）をそのまま使うことがあります。</p>

<p>また、CGIなどの場合、「cgi-bin」などのディレクトリ名をパスに含めることがあります。これもプログラミング言語に依存したパスを含めていることになります。</p>

<p>こういった、プログラミング言語のデファクト、パス情報、ファイル拡張子などをURIに含めないようにすると、URIが変わりにくくなります。</p>

<h4>メソッド名やセッションIDを含めない</h4>


<p>リソースに対する処理メソッド名をURIに含めると、使っているフレームワークや仕様変更によりURIが変わりやすくなってしまいます。また、セッションIDなどをURIに含めるとアクセスする度にURIが変わってしまいかねないという状況になってしまいます。</p>

<pre>
http://www.hamasyou.com/sample/execute?cmdName=showPage&page=3;jssessionid=1234567890
</pre>


<p>URIにはメソッド名やセッションIDを含めないようにすると良いです。RESTfulアーキテクチャでは、統一インターフェースとしてHTTPのメソッド（GET, POST, PUT, DELETE）を使用すると良いでしょう。</p>

<h4>URIはリソースを表現する名詞にする</h4>


<p>URIにはメソッド名を含めずに、HTTPメソッドを使用して処理を分けると良いです。</p>

<pre>
悪い（×）： http://www.hamasyou.com/show/articles?id=10 （POSTでアクセスする）
</pre>




<pre>
良い（◯）： http://www.hamasyou.com/articles/10  (GETでアクセスする）
</pre>




<h2>URI設計のテクニック</h2>




<h3>拡張子で表現を指定する</h3>


<p><blockquote><p>ここまで、拡張子はURIの設計にとって悪であると述べてきました。しかし、悪いのは「.cgi」や「.pl」など実装に依存した拡張子です。実装に依存していない拡張子は良い側面を持つ場合もあります。</p></p><p><p></p><footer><strong>本書 P.60</strong></footer></blockquote></p>

<dl>
  <dt>言語を指定する拡張子</dt>
  <dd>言語を指定する拡張子「.ja」「.en」をリソースに含める。</dd>
  <dt>フォーマットを指定する拡張子</dt>
  <dd>「.html」「.atom」「.xml」「.json」などの表現フォーマットを指定する拡張子をリソースに含める。</dd>
</dl>




<h2>その他</h2>




<h3>統一インターフェース</h3>




<dl>
  <dt>GET</dt>
  <dd>リソースを取得する場合に使う。冪等（べきとう）。</dd>
  <dt>POST</dt>
  <dd>リソースを作成するときに使う。レスポンスとしてリソースのURIを返してくれることを希望する（新規作成の場合など）。新しいリソースのURIはLocationヘッダで返される（POST後はリダイレクトされる）。冪等ではない。</dd>
  <dt>PUT</dt>
  <dd>リソースを更新するときに使う。リソースのURIは変わらない。冪等だがリソースの状態は変わる。</dd>
  <dt>DELETE</dt>
  <dd>リソースを削除する時に使う。リソースのURIがわかっている場合に使い、なんど呼び出しても結果は変わらないべき。つまり、存在しないリソースに対してのDELETEは何もいわずに成功するし、DELETEによって他のリソースのURI表現が変わることはないようにする。冪等。</dd>
</dl>




<h3>検索結果にリソース表現</h3>




<pre>
http://www.hamasyou.com/articles/search?q={query}
</pre>


<p>searchというメソッド名をURIを含めているじゃないかと思うが、そうではなく、これは検索結果というリソースを表している（searchは名詞の方の検索）。</p>

<h3>オブジェクトモデルにおける関連のリソース表現</h3>


<p>関連のどちらがトップレベルリソース（上にくるリソース）かを考え、URIの階層構造でURIを表す。</p>

<p>記事群-設計カテゴリ-最新記事の場合。</p>

<pre>
http://www.hamasyou.com/articles/system/newest
</pre>


<p>設計カテゴリ-記事群-最新記事の場合。</p>

<pre>
http://www.hamasyou.com/system/articles/newest
</pre>




<h3>ロック機構をリソースで表す</h3>


<p>Web APIによってはロック機構を組み込みたい場合があります。この場合は、ロックを表す子リソースを作ることで対応できます。</p>

<p>リソースに対して、ロックリソースを作成し、そのロックリソースをDELETEすることでロック解除を表す。</p>

<p>本書 P.289より抜粋。</p>

<pre>
POST /1120034 HTTP/1.1
Host: zip.ricollab.jp
Content-Type: application/x-www-form-urlencoded
Authorization: Basic ...
 
scope=exclusive&timeout=300
</pre>


<p>ロック用のパラメータをリソースに対して送信し、ロックリソースを作成する。</p>

<pre>
HTTP/1.1 201 Created
Location: http://zip.ricollab.jp/1120034/lock
Content-Type: application/json
 
{
 "locktype": "exclusive",
 "timeout": "2010-09-07T10:00:30Z",
 "owner": "yohei"
}
</pre>


<p>ロック解除は、POSTで作成された子リソース（lock）を削除することで行う。</p>

<pre>
DELETE /1120034/lock HTTP/1.1
Host: zip.ricollab.jp
Authorization: Basic ... 
</pre>




<pre>
HTTP/1.1 200 OK
</pre>




<h2>参考</h2>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/RESTful-Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-Leonard-Richardson/dp/4873113539%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113539" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3-Sanjiva-Weerawarana/dp/4434073435%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4434073435" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful Webサービス]]></title>
    <link href="http://hamasyou.com/blog/2007/12/28/4873113539/"/>
    <updated>2007-12-28T02:04:00+09:00</updated>
    <id>http://hamasyou.com/blog/2007/12/28/4873113539</id>
    <content type="html"><![CDATA[<p><strong>REST</strong> とは リソースの状態を表す「何か」を転送するということを表した、Webアーキテクチャスタイルです。REST はアーキテクチャではなく、アーキテクチャのスタイルであり、実際に REST スタイルのアーキテクチャとして、ROA（リソース指向アーキテクチャ）などがあります。</p>

<p>本書は、この REST と ROA に関して解説されたもので、RESTful なシステム（REST スタイルに則ったシステム）の設計方針、ROA の考え方などが解説されています。</p>

<p>Web アプリケーション開発をこれまでしてきた中で、RESTful や ROA な考えでシステムを設計したことがない人には、新しい発見があり、とてもわくわくして読むことが出来ます。</p>

<p>本書は、特に、Web アプリケーションの設計者、アーキテクトの方が読むと良いと思います。最近話題の REST の詳細を理解したい人、RESTful システムを構築したい人、ROA の考え方を取り入れたい人に本書はお勧めです。</p>

<p>オライリーっぽいちょっとお堅い文章ですが、楽しく読めると思います。『<a href="http://www.amazon.co.jp/gp/product/4774133310?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774133310" rel="external nofollow">WEB+DB PRESS vol.42</a>』の現場で使える REST の記事を読んで、REST とは何か？ ROA とは何か？の概要を抑えてから読むと、理解が早いと思います。</p>

<p>お勧めです。</p>

<h4>参考</h4>


<p><a href="http://yohei-y.blogspot.com/2005/04/rest_23.html" rel="external nofollow">yohei-y:weblog</a></p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>RESTとは</h3>


<p>REST とは、リソースの状態を表した「何か」を転送するということを表した、Web アーキテクチャスタイルです。REST は Representational State Transfer の略で「表現可能な状態」を「転送する」という意味を表しています。</p>

<p><blockquote><p>たとえば、商品在庫一覧.htmlというファイルがあるとします。これは商品という「リソース」が在庫であるという「状態」を、HTML形式で「表現」していると見なせます。このHTMLファイルをサーバからブラウザに「転送」するから、「表現可能な状態」を「転送」している、つまり Representational State Transfer なのです。</p></p><p><p></p><footer><strong>『<a href="http://www.amazon.co.jp/gp/product/4774133310?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774133310" rel="external nofollow">WEB+DB PRESS vol.42 RESTとはなにか</a>』</strong></footer></blockquote></p>

<p>REST はアーキテクチャのスタイルであり、REST というアーキテクチャがあるわけではありません。REST スタイルのアーキテクチャの一つに、ROA（Resource Oriented Architecture:リソース指向アーキテクチャ）というものがあります。</p>

<h3>ROA（リソース指向アーキテクチャ）とは</h3>


<p>ROA とは、リソースを主体として考えていくアーキテクチャのことです。</p>

<h4>リソースとは</h4>


<p>ROA におけるリソースとは、参照（認識）するに値する重要性を持つものとして定義されています。</p>

<p><blockquote><p>「それに対してハイパーテキストリンクを作成する、それに対して意見または反論する、その表現を取得またはキャッシュする、あるいはその他の操作を実行する」ことがある場合は、それをリソースにすべきである。</p></p><p><p></p><footer><strong>『本書 P.85 リソースとは何か』</strong></footer></blockquote></p>

<h4>URI</h4>


<p>リソースがリソースであるための条件として、リソースは少なくとも一つの URI を持っていることがあげられます。</p>

<dl>
<dt class="tips">Tips</dt>
<dd><p>URL と URI の違いですが、現在では同じ意味で使われているようです。URL（Uniform Resource Locator）は、インターネット上の情報資源を指し示すもので、ホスト名、ポート名、フォルダ名、ファイル名などが含まれています。しかし、同じ情報資源であっても、ホスト名が変更になると URL は変化してしまうという問題があったため、ホスト名とか場所とか変わっても同じものを指し示すものが必要ということで URN（Uniform Resource Name）というものが定義されました。これら URL と URN をあわせたものが URI と呼ばれるものです。なお、URI（Uniform Resource Identifier）もインターネット上の情報資源を指し示すもので、包括的な概念として定義されています。URI の具体的な仕様が URL に当たります。</p></dd>
</dl>


<p><blockquote><p>URI は構造的でなければならない。それらの構造は予測可能な方法で区別されなければならない。&lt;中略&gt; これは REST な絶対的なルールではない。厳密には、URI が構造的である、あるいは予測可能である必要はないが、筆者はそうあるべきだと思っている。</p></p><p><p></p><footer><strong>『本書 P.87 URI は記述的であるべき』</strong></footer></blockquote></p>

<h3>ROA の特徴</h3>


<p>ROA には次の特徴があります。</p>

<ul>
<li><a href="#アドレス可能性" rel="external nofollow">アドレス可能性</a></li>
<li><a href="#ステートレス性" rel="external nofollow">ステートレス性</a></li>
<li><a href="#接続性" rel="external nofollow">接続性</a></li>
<li><a href="#統一インターフェース" rel="external nofollow">統一インターフェース</a></li>
</ul>




<h4><a id="アドレス可能性" name="アドレス可能性">アドレス可能性</a></h4>


<p>公開されているリソースは、URI を通じてアクセスすることができます。このとき、この URI を本に掲載することが出来るのであればそれはアドレス可能であるといえます。</p>

<p>たとえば Ajax アプリケーションやGmailなどは、同一の URL （ブラウザのアドレス）から変化せずにアプリケーションの各機能を実行することが出来ます。これらは、アドレス可能ではない例になります。</p>

<p><blockquote><p>HTTPがアドレス可能ではなかったら、あるいはGoogle検索がアドレス可能なWebアプリケーションではなかったら、そのURIを本に掲載することは出来ない。「google.com への Web 接続を開き、検索ボックスに「jellyfish」と入力し、[Google 検索]ボタンをクリックする」と指示しなければならないだろう。</p></p><p><p></p><footer><strong>『本書 P.89 アドレス可能性』</strong></footer></blockquote></p>

<h4><a id="ステートレス性" name="ステートレス性">ステートレス性</a></h4>


<p>すべての HTTP リクエストが完全に分離していることです。サーバの処理が以前の HTTP リクエストに依存せずに実行できるような場合、ステートレス性が保たれているといえます。</p>

<p><blockquote><p>ステートレス性は、サーバーが<strong>取り得る状態</strong>もリソースであり、独自のURIが割り当てられるべきであることを意味する。</p></p><p><p></p><footer><strong>『本書 P.91 ステートレス性』</strong></footer></blockquote></p>

<p>これはつまり、URI によってサーバの状態が判断できるようにするべきだということです。特定のリクエストを送るために、あらかじめ別のリクエストを送って、サーバ側の状態を変更しておく必要がないような設計でなければならないということになります。</p>

<p>ステート（状態）には二種類あり、一つはクライアント側で維持される<strong>アプリケーション状態</strong>と呼ばれる状態で、もう一つは、サーバ上で維持される<strong>リソース状態</strong>です。</p>

<p>アプリケーション状態とは、アプリケーションのユーザが今どのような状況にいるのか（ログインしているのか？検索結果の3ページ目を表示しているのか？）というものを表したものです。リソース状態とは、各ユーザがどのような状況にいても変わらない情報のことで、これらはサーバ側に格納します。</p>

<p>サーバは、クライアントからアプリケーション状態を受け取ると、受け取ったリクエスト情報を元にアプリケーションの状態を復帰します。以前のリクエスト状態を覚えておくというようなことはしません。</p>

<p>ただし、クライアントから受け取ったリクエストだけを信頼すると嘘の情報を渡される可能性があります。そのため、セッションの仕組みを使い、（仕方なく）サーバ側にユーザ情報を保持しておくという実装が現在では行われています。</p>

<p>繰り返しますが、アプリケーションに関する状態情報はクライアント側で保持し、サーバにはリソースの情報しか保持しないというのがステートレス性の特徴になります。</p>

<p><blockquote><p>HTTPセッションの現在の状態はリソース状態としてサーバーに格納されないが、アプリケーション状態としてクライアントによって追跡され、クライアントがWebでたどるパスから作成される。サーバーは、ハイパーメディア（ハイパーテキスト表現内のリンクとフォーム）を提供することにより、クライアントのパスを導く。</p></p><p><p></p><footer><strong>『本書 P.100 リンクと接続性』</strong></footer></blockquote></p>

<h4><a id="接続性" name="接続性">接続性</a></h4>


<p>ステートレス性のところの最後の引用に記述されている、「サーバーは、ハイパーメディア（ハイパーテキスト表現内のリンクとフォーム）を提供することにより、クライアントのパスを導く。」これが、接続性というものです。</p>

<p>ユーザがすべての URI を知っている必要はなく、この接続性（ハイパーリンク）によって、次のリソースや次のサーバ状態に移行できることが重要です。</p>

<p><blockquote><p>そう、次はこっちの状態かこっちの常態化どちらかがありますよというサーバの提案がアプリケーションを構成しているので、リンクっていうのはすごい重要なんです。</p></p><p><p>ただ、現状の Web API とか Web サービスではなかなかリンクは出てこないですね。XML を返してくれても、その XML の中に URL が入っていないので、接続されているとは言いがたいサービスが多いんですが、本当は HTML でみんながすでにやっていること、Web UI でやっていることなので、それをそのまま API でもやると、実はさらに良いシステムを作っていけるんじゃないのかなと思います。</p></p><p><p></p><footer><strong>『<a href="http://www.amazon.co.jp/gp/product/4774133310?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4774133310" rel="external nofollow">WEB+DB PRESS vol.42 RESTfulなサービスとアプリケーション作成の心得</a>』</strong></footer></blockquote></p>

<h4><a id="統一インターフェース" name="統一インターフェース">統一インターフェース</a></h4>


<p>Web サービスを使う場合、起動するメソッド名の情報をリクエストに含めたりします。しかしこの方法では、利用する Web サービスごとに呼び出すメソッドが違ってしまい、Web 全体を考えた際にリソースに対する処理インターフェースが統一できません。（もちろん、命名規約で縛ることも可能ですが。。。）</p>

<p>そこで、ROA では、Web 全体でリソースに対する操作を行うインターフェースを統一しようというスタイルが提案されました。</p>

<p>ここで提案された統一インターフェースが HTTP のメソッド（GET、PUT、POST、DELETE）になります。</p>

<dl>
<dt>GET</dt>
<dd>リソースを取得するメソッドです。GET メソッドはサーバの状態を変更しない用途で使用します。（厳密には副作用があってもよいとされています。たとえば、GET アクセスごとにインクリメントされるカウンタなどは、GET による副作用がありますが、クライアントに責任はなく、甚大な被害があるわけではないので問題ないとされています。）</dd>
<dt>PUT</dt>
<dd>主に、リソースの状態を変更する際に使うメソッドです。リソースの新規作成にも使われることがあります。PUTはべき等性を持ちます。

<dl>
<dt class="info">Information</dt>
<dd>べき等性とは、何度同じリクエストを繰り返し実行しても同じ結果であることを意味する数学用語です。</dd>
</dl> 
</dd>
<dt>POST</dt>
<dd>リソースの新規作成の際に使うメソッドです。多くの Web アプリケーションでは、GET と POSTのみが有効なメソッドとして処理されています。GETはリソースの取得、POSTは新規作成、更新、削除など汎用的な処理として使われることが多くあります。ROA 的には POST はリソースの新規作成でのみ使うことがよいとされています。

<dl>
<dt class="info">Information</dt>
<dd>とはいえ、現在のHTMLフォームでは、GET と POST しかサポートされていないため、このような現状は仕方ないといえるかと思います。POST に新規作成以外の意味を持たせて使うことを、<strong>オーバーロードPOST</strong>と呼びます。</dd>
</dl> 

PUT でも POST でもリソースを新規作成することができますが、PUT と POST には次のような違いがあります。

<dl>
<dt>PUT でリソースを新規作成する場合</dt>
<dd>クライアントが指定した URI のリソースが新規作成される </dd>
<dt>POST でリソースを新規作成する場合 </dt>
<dd>クライアントが指定する URI はリソースを新規作成するリソースの URI。新規作成されたリソースの URI はサーバが決定する</dd>
</dl>
</dd>
<dt>DELETE</dt>
<dd>リソースの削除を行う際に使うメソッドです。DELETEもべき等性を持ちます。</dd>
</dl>


<p><strong>ここからは後で書く</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Webサービス]]></title>
    <link href="http://hamasyou.com/blog/2005/02/13/4873111013/"/>
    <updated>2005-02-13T09:04:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/02/13/4873111013</id>
    <content type="html"><![CDATA[<p><strong>Webサービス</strong>、<strong>SOAP</strong>、<strong>WSDL</strong>、<strong>UDDI</strong>というキーワードをすべて網羅した実用書です。JavaでWebサービスを構築する手順、コーディング方法が詳しく載っています。</p>

<p>Java以外の言語を使ってWebサービスを実装する場合でも、本書を使えます。本書の半分以上は、言語によらないWebサービスの実装方法を解説しているためです。例えば、SOAPメッセージの構造はどうなっているだとか、WSDLのこの項目はどんな意味を持つのかといった感じです。</p>

<p>非常に分かりやすい言葉で解説していて、Webサービスを構築しようと思っている人にとっては分かりやすいと思います。逆に、興味程度の知識が欲しい人にとっては、具体的すぎてよく分からないかもしれません。</p>

<!-- more -->




<h2>特徴</h2>


<p>とにかく具体的です。SOAPメッセージの仕様、WSDLの構造、UDDIの仕組みと、動くコードを具体的な値で解説しているので、開発者にはとても分かりやすいと思います。</p>

<p>逆に、マネージャーやWebサービスとは何だ？という人には具体的過ぎて、良く分からないかもしれません。そういった人には、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22" rel="external nofollow">図解標準 最新Webサービス マスタリングハンドブック―XML、SOAP、WSDL、UDDIの基本から開発まで</a>』がおすすめです。図入りで分かりやすくWebサービスとはどういうものかを解説しています。</p>

<p>半分くらいはWebサービスの標準仕様に関する解説で、残りの半分がJavaでWebサービスを構築した場合のコード例になっている感じです。Webサービスを構築しながら読むと、いっそう理解が深まると思います。</p>

<h2>覚書き</h2>




<h3>開発者が行うアクティビティ</h3>


<p>Webサービスの開発者は、下記のことを行う必要があります。</p>

<ul><li>サービスのインターフェースの設計</li><li>サービスの実装コードの作成、デプロイ可能なパッケージの組み立て</li><li>サービスレジストリ(UDDIサーバ)への登録、WSDLや利用マニュアル、APIドキュメントなどの公開</li></ul>




<h3>SOAP</h3>


<p>SOAP(Simple Object Access Protocol)は、Webサービスの標準仕様となっているプロトコルです。SOAPでは通信のすべてが、XMLで表現されます。通信自体にはHTTPやSMTPが使われることが多いです。SOAPは通信プロトコルに依存しないように、扱う文書をXMLで表現することにしています。</p>

<p>SOAPは、データ型の表現やリモートメソッド呼び出し、文書交換を行います。ただのXML文書ではSOAP文書にはなりません。下記の項目を満たす必要があります。</p>

<ul><li>XMLをSOAPボディでラッピング</li><li>SOAPボディをSOAPエンベロープでラッピング</li><li>SOAPヘッダをSOAPエンベロープ内に記述</li><li>名前空間の宣言</li><li>シリアライズ用の符号化スタイルディレクティブ</li><li>全体をプロトコルにバインドする</li></ul>




<h2>参考</h2>


<ul>
<li><p>日本ユニシスのWebサービス解説チュートリアル
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /> <a href="http://www.unisys.co.jp/EACTION2/webservices/" rel="external nofollow">日本ユニシス</a></p></li>
<li><p>Webサービスを理解しようと思うならこの本</p></li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>何度も読めるほど易しく書かれています。理解しやすいです。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774116165/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>実践で技術を磨きたいという人におすすめ</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122165/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOAP/UDDI/WSDL Webサービス技術基礎と実践 徹底解説]]></title>
    <link href="http://hamasyou.com/blog/2004/10/18/4774116165/"/>
    <updated>2004-10-18T09:59:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/10/18/4774116165</id>
    <content type="html"><![CDATA[<p>「ビジネスサービスを動的に発見・接続できるようにする」という、Webサービスの目的。そこで使われる技術というのは、実際にはそれほど新しいものではありません。Webサービスは、既存の技術(例えばXMLやSOAP)の組み合わせによる新しい発想と壮大な思想から生まれたある技術仕様です。</p>

<p>本書は、「サービスの動的発見・接続」を可能にする『SOAP』、『WSDL』、『UDDI』という基本仕様についての解説書になっています。Webサービスは発展途上の技術であるため、さまざまな仕様が検討されています。トランザクションに関するものから、セキュリティに関するものまでいくつかあります、が本書では扱っていません。</p>

<p>『SOAP』、『WSDL』、『UDDI』の基本仕様とXMLの概要説明、Webサービスを .Net と Java で構築するというのが本書のテーマです。手っ取り早くWebサービスを構築したいという人には本書は向かないかもしれません。本書のターゲットは、Webサービスの基本技術をしっかりと学びたいという人向けです。</p>

<!-- more -->




<h2>解説</h2>


<p>本書では、Webサービスという言葉を以下のように定義しています。</p>

<p>「Webサービスとは、オープンな技術を使って記述、呼び出し、公開、発見が可能な、ネットワーク上に存在するソフトウェア部品のこと」</p>

<p>XMLやHTTPといった既存技術を使ってサービスの呼び出し、公開、発見を可能にしようというのがWebサービスの目指すところです。その中でも、オープンな技術(標準仕様)を使うというのがポイントで、ベンダー固有の技術やプロトコルを使用しないので同じ方法でサービスを利用することが出来ます。</p>

<p><a href="http://ew.hitachi-system.co.jp/w/SOA.html" rel="external nofollow">SOA(サービス指向アーキテクチャ)</a>という考え方があります。これまでのシステム構築を『アプリケーション』単位から『サービス』という単位で行い、サービスの組み合わせでもってシステムを考えようというものです。WebサービスはこのSOAの一端を担っている技術です。</p>

<p>Webサービスという言葉は、少し中に浮いた感じをうけます。自分の言葉でWebサービスを説明できるようになるには、基礎的な知識が必須だとおもいます。本書は、基礎技術の詳細にこだわって解説しています。技術が生まれた背景にも触れているので、理解が早いと思います。</p>

<p>少し技術的要素が強いので、プログラミング初心者には難しいところがあるかもしれません。が、Webサービスについてしっかりと学びたい人には本書はおすすめです。</p>

<h4>本書の対象読者</h4>




<ul><li>Webサービスの基礎技術をしっかりと学びたい人</li>
<li>SOAP、WSDL、UDDIの技術背景を知りたい人</li>
<li>Webサービスを学びたいがどの本からはじめたらよいのか分からないひと</li>
</ul>




<h2>ひとりごと</h2>


<p>Webサービスはまだまだ発展途上の技術であるため、この先どうなってくるのかは実際にはわかりません。インターネットを通してビジネスを行うというのは、まだまだセキュリティ的にもどうかという考えもありますし、ビジネスにはトランザクションが必須です。この辺りのインフラが整ってWebサービスの真価を発揮してくれると、ビジネスの幅は広がるのではないかと思っています。</p>

<p>CORBAや分散オブジェクト技術(RMIやDCOM)ももてはやされた割には、あまり使えない技術だったようです。しかし、技術が使えなかったというよりはむしろ、そのような考え方にビジネスのあり方がついてこなかったというのが正しいような気がします。Webサービスも分散技術であり、まだビジネス的に使われているのはごく一部というのが現状です。</p>

<p>技術者は、新しい技術に希望や夢を抱きます。「どんなことが出来るのだろうか？」と。しかし、経営者は新しいことをするのに、戸惑いや躊躇をいだくのではないでしょうか。まず、技術がありビジネスがついて来るといった今の世の中の流れでは、捨てられる技術が多いのもうなずけるような気がします。</p>

<p>Webサービスが、そうならないことを期待しています。(・・・本の紹介とまったく関係ないな (^^;</p>

<h2>参考</h2>


<ul>
<li>もっとやさしくWebサービスを始めたい人には本書をどうぞ。</li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715902/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>


<ul>
<li>図をベースに解説してくれる、非常に丁寧な解説書です。おすすめ</li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798007064/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>


<ul>
<li>オライリーからもWebサービスの解説書が出ています。濃いです。</li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873111013/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>



]]></content>
  </entry>
  
</feed>
