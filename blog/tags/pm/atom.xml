<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: PM | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/pm/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-27T10:27:33+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[プロジェクトマネージャのためのUML徹底活用術]]></title>
    <link href="http://hamasyou.com/blog/2005/02/08/4798107565/"/>
    <updated>2005-02-08T00:47:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/02/08/4798107565</id>
    <content type="html"><![CDATA[<p>本書で伝えたいことは一つ「<strong>UMLを使う技術</strong>」です。UMLを学び始めたときは、すべての仕様書をUMLだけで書けてしまうと思いがちです。でも、これはほとんどの場合間違いで、プロジェクトの進捗にあった適切なドキュメントを、一番コストがかからない方法で作成する方がよいのです。</p>

<p>本書では、「<b>UMLを読む技術</b>」、「<b>UMLを描く技術</b>」、「<b>UMLで検証する技術</b>」、「<b>UMLで進捗管理する技術</b>」を学ぶことができます。&quot;プロジェクトマネージャのための&quot; とタイトルにあるように、プロジェクト管理にUMLを使う方法を学べるのが特色です。</p>

<p>UMLを読む技術、UMLを描く技術と言うと、かなり濃いところまで説明されているように感じる人もいると思います。しかし、<span class="border_bottom">本書では設計段階に落とす前までの、つまり業務分析や業務モデリングの段階で使える程度の知識を学ぶところに焦点が当てられています</span>。なので、決して技術者向けということは無い感じです。</p>

<p>プロジェクトで、UMLを導入してみたいと思っているプロジェクトマネージャーや管理者、業務分析や業務モデリングで作られたドキュメントを読む必要の在る設計者におすすめします。とても分かりやすい言葉で書かれていて、理解しやすいです。入門書として活用するのが効果的だと思います。</p>

<!-- more -->




<h2>特徴</h2>


<p>本書は、プロジェクトの上流段階でUMLをどのように使うかを解説した本になっています。対象読者はプロジェクトマネージャや管理者になっています。</p>

<p><b>UMLを読む技術</b>、<b>UMLを描く技術</b>として、業務分析や業務モデリングの段階でUMLを利用する方法について述べられています。<b>UMLで検証する技術</b>、<b>UMLで進捗管理する技術</b>として、お客様の要求をチェックしたり、現在の進捗を可視化する方法について解説してあります。</p>

<p>読み書きのレベルとしては、ユースケースを導出したり、クラス図やアクティビティ図を描いたり読んだりすることができるようになります。そうしてできたユースケースやクラス図を使って、要求のチェックや進捗の管理を行っていきます。</p>

<p>ぶっちゃけた話をすると開発者としては物足りない部分もあります。本書に書かれているUMLの使い方ではモノ(プログラム)はできないからです。しかし、プロジェクトマネージャや管理者がどうしてこういう分析結果になったのかということを理解するための知識を身に付けるにはいいと思います。</p>

<p>読みやすく技術書にしては安いので、読み物として購入するのがいいと思います。僕にとっては、値段と中身を比較したらプラスになったかなという感じです。</p>

<h2>覚書き</h2>




<h3>システムに必要な情報</h3>


<p>システムを作るために必要な情報というのは、ベンダー側ではなくユーザ側にある。足りない情報は随時ユーザから聞き出さなければならない。足りない情報を補完するために要件整理をUMLで行う。</p>

<h3>ウォーターフォールモデルのメリットとデメリット</h3>


<p><blockquote><p><strong>ウォーターフォール</strong>型モデルは、各フェーズ(要件定義・分析・設計・実装・テスト)で契約をコミットするという事が前提条件となる。つまり、後戻りがしづらい。しかし、要件定義以外は、時間とパワーさえあれば後戻りは可能である。</p></p><p><p>追加案件や機能追加は、ウォーターフォールモデルではできないと考えている人も多い。しかし、実際には要件定義、分析、設計のフェーズが増えるだけで、実装とテストに組み込めばいいだけである。シンプルであるのでほとんどデメリットらしいものはない。</p></p><p><p></p><footer><strong>本書</strong></footer></blockquote></p>

<p>僕の考えでは、確かにプロジェクトマネージャの視点で見るとデメリットはないと思う。むしろ使いやすくていいと思う。しかし、開発者の視点で見ると、実装の段階で無理やり組み込むイメージがあり、設計が破綻してしまう可能性が高いように思う。力のある技術者がいれば何とか形になるものの、保守の段階でコストが膨らむ可能性があるように感じる。</p>

<h3>要件定義で行うこと</h3>


<p>システムとは、ユーザ企業の何らかの戦略の一部であることがほとんどで、要求されている機能にはそれぞれ意味があり、機能同士にはなんらかのつながりがある。まずはじめにしなければならないことは、要件に書かれている機能同士のつながりを把握することだ。</p>

<p>機能の把握には<strong>アクティビティ図</strong>が使える。</p>

<h2>参考</h2>


<ul>
<li>UMLを使ってEAを理解するための本(PM向け)</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107581/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>オブジェクト指向でなぜ作るのか？その疑問の答えはここに(開発者向け)</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281957/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>要求を見逃さないための一冊(PM向け)</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106984/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
