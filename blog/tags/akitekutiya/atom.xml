<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: アーキテクチャ | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/akitekutiya/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-08-28T11:51:23+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[オブジェクト指向入門 第2版 原則・コンセプト]]></title>
    <link href="http://hamasyou.com/blog/2007/07/16/4798111112/"/>
    <updated>2007-07-16T11:15:00+09:00</updated>
    <id>http://hamasyou.com/blog/2007/07/16/4798111112</id>
    <content type="html"><![CDATA[<p>元祖オブジェクト本の第2版です。原則・コンセプトで構成された本書と、方法論・実践で構成される別冊の二冊をあわせて『オブジェクト指向入門 完全版』になります。</p>

<p>本書は、オブジェクト技術の核となる4つのアイデア、<strong>構造化手法</strong>、<strong>信頼性の規律</strong>、<strong>認識論上の原則</strong>、<strong>分類の技法</strong>をソフトウェア工学からの立場で解説している言わばエンジニアリング本です。</p>

<p>結構小難しい言葉で書かれている部分があり、またページ数が多いため結構読むのが大変でした。その分本来のオブジェクト指向の考え方や良いプログラミングにつながる考え方が深くまで解説されていたりして、とても為になりました。</p>

<p>本書の対象読者は、オブジェクト指向技術に興味のある技術者や良い作法のプログラムを書きたいプログラマです。読むのは大変ですが損はない、むしろ読まないと損するくらいの本です。おすすめです。</p>

<!-- more -->




<h2>真のモジュール性</h2>


<p>プログラミングの世界でモジュールと言うと一連のサブルーチンのまとまりを指します。このモジュールを再利用し、モジュールの組み合わせでプログラムを組み立てるモジュール・プログラミングという考えがあります。再利用可能なモジュールは独立性が高く、異なるアーキテクチャに組み込んでも安定して稼動することが求められます。</p>

<p>モジュールに再利用可能という性質を組み込むための5つの基準（criteria）、5つの規則（rule）、5つの原則（principle）が存在します。そして、これらを満たしたものが<strong>クラス</strong>の基礎となります。</p>

<dl>
<dt class="tips">サブルーチンの内訳</dt> 
<dd>サブルーチンは結果として戻り値を返すものと返さないものの二種類に分けられます。戻り値を返すものを<strong>関数（function）</strong>と呼びます。戻り値を返さない手続きを<strong>プロシージャ（procedure）</strong>と呼びます。</dd> 
</dl>


<p></p>

<h3>5つの基準</h3>


<p>次の5つの基準を満たす設計手法は価値のあるモジュールを生み出す最低条件を満たします。</p>

<dl>
<dt>分解しやすさ</dt><dd>他システムへの依存性を低く抑えることができる</d>


<p><dt>組み合わせやすさ</dt><dd>異なる環境においても自由に組み合わせることができる</dd>
<dt>分かりやすさ</dt><dd>独立性が高く、他のモジュールの知識を必要としない</dd>
<dt>連続性</dt><dd>変更の局所化が行えている</dd>
<dt>保護性</dt><dd>モジュールの内部で発生したエラーの影響を閉じ込めることができる</dd>
</dl></p>

<table>
<caption>5つの基準の例</caption>
<tr><th>基準</th><th>例</th></tr>
<tr><td>分解しやすさ</td><td>分解しやすさを満たす設計手法の有名な例はトップダウン設計（サブシステム分割）</td></tr>
<tr><td>組み合わせやすさ</td><td>Unix の シェルコマンド（ls や more など）</td></tr>
<tr><td>分かりやすさ</td><td>悪い例として、順序に依存するような呼び出しを想定しているモジュールがある</td></tr>
<tr><td>連続性</td><td>シンボリック定数、動的配列</td></tr>
<tr><td>保護性</td><td>モジュールの入り口で他システムからの入力をチェックする</td></tr>
</table>


<p></p>

<h3>5つの規則</h3>


<p>5つの基準から、モジュール性を保障するための次の規則が導き出されます。</p>

<dl>
<dt>直接的な写像</dt><dd>解こうとしている問題領域のモデルとモジュールの構造が写像（マッピング）されている</dd>
<dt>少ないインターフェース</dt><dd>他のモジュールとの連携を行う際できる限り少ない数のモジュールとのやり取りで済ませる</dd>
<dt>小さいインターフェース</dt><dd>他のモジュールと通信する場合、最小限の情報のみをやり取りすること</dd>
<dt>明示的なインターフェース</dt><dd>他のモジュールと通信する場合、そのことがインターフェースから明らかに分かること</dd>
<dt>情報隠蔽</dt><dd>適切な情報のみを公開すること。不要な情報は隠蔽しておくこと</dd>
</dl>




<h3>5つの原則</h3>


<p>基準、規則から次の5つの原則が導かれる。</p>

<dl>
<dt>言語としてのモジュール単位</dt><dd>モジュールは言語の構文構造に対応していなければならない</dd>
<dt>自己文書化</dt><dd>モジュールについての情報をモジュールの一部として作成する</dd>
<dt>統一形式アクセス</dt><dd>統一された表記によってアクセスできなければならない</dd>
<dt>開放/閉鎖の原則（Open-Closed Principle）</dt><dd>拡張に対して開き、修正に対して閉じている</dd>
<dt>単一責任の原則（Single Responsibility Principle）</dt><dd>ひとつの役割だけをもつこと。変更の理由はただひとつでなければならない</dd>
</dl>




<h3>再利用</h3>


<p>再利用と一言で言っても、何を再利用するのか？ 何が再利用できるのか？ を考える必要があります。本書では次の7つの What への再利用の考えが述べられています。</p>

<ul>
<li>人材</li>
<li>仕様</li>
<li>設計</li>
<li>パターン</li>
<li>ソースコード</li>
<li>専用の部品</li>
<li>抽象化されたモジュール</li>
</ul>




<dl>
<dt class="info">車輪の再発明は悪なのか？</dt>
<dd>
<p>よく「車輪の再発明は悪」といわれますが「車輪」って何のことを指しているのでしょうか？ 本書で述べられている「仕様」のことなのか、「設計」のことなのかそれとも「ソースコード」のことなのか。</p>

<p>僕は「車輪」とは「仕様」のことだと理解しています。「走行抵抗を低くして対象に駆動力を与える」という「仕様」を再発明する必要はありません。でも、それを「車輪を円形で作成し、エンジンと連携させてコロコロ回るようにする」という設計や「空気によって地面に設置しなくても動く」という設計、設計を変えてつくることは全然良いことだと思っています。また、同じ円形の車輪でも「ゴムで作る」のと「木で作る」、実装を変えて作るのも全然良いことだと思います。</p></dd> 
</dl>




<h4>多重定義の役割</h4>


<p><blockquote><p>ルーチンの多重定義は顧客のための機能である。ある1つの概念を表す異なる実装を使うとき、顧客は1つの記述で済ませることができる。</p></p><p><p></p><footer><strong>P.120 第4章 再利用性へのアプローチ「多重定義の役割」より</strong></footer></blockquote></p>

<p>つまり、意味は同じだけど実装を隠蔽する場合に多重定義（<strong>オーバーロード</strong>）を使うということです。</p>

<h4>総称性の役割</h4>


<p><blockquote><p>総称性は供給者モジュールの作者のための機能である。ある特定の概念を表す1つの実装を異なる種類のオブジェクトに適用するときに、同じ供給者モジュールテキストを書くことが可能になる。</p></p><p><p></p><footer><strong>P.125 第4章 再利用性へのアプローチ「総称性の役割」より</strong></footer></blockquote></p>

<p>総称性（C++ のテンプレートや Java のジェネリクス）は開発者が楽するものという位置づけです。</p>

<h2>抽象データ型</h2>


<p><blockquote><p>抽象とは、物体についての認知可能な性質を、そのほかの性質から、あるいは、その性質が当てはまる物体から分離することにほかなりません。</p></p><p><p></p><footer><strong>P.157 第6章 抽象データ型より</strong></footer></blockquote></p>

<p>オブジェクトを抽象のまま扱うには、そのオブジェクトの概念に対する操作や概念の属性に注意を向けるようにします。操作がデータ構造を定義するものとして操作を定義すると良い抽象データ構造が定義できるようになります。</p>

<p>オブジェクト操作として考えなければならない概念として、モジュールの供給者（supplier）、モジュールの顧客（client）そしてプロトコル（契約）があります。モジュールはプロトコル（契約）を基本とした相互動作を行います。</p>

<h2>契約による設計（Design by Contract）</h2>


<p>すべてのモジュールにおいてお互いの権利と義務を明確に定義することで信頼性の高い大規模システムが実現できます。このような考えを「<strong>契約による設計（Design by Contract）</strong>」と言います。</p>

<p>契約による設計では表明（assertion）を使ってモジュールの仕様を表します。</p>

<dl>
<dt>事前条件</dt><dd>ルーチン（メソッド）が呼び出される時に顧客が満たされなければならない条件</dd>
<dt>事後条件</dt><dd>事前条件を満たした状態でルーチンが呼び出された場合に供給者が満たさなければならない条件</dd>
<dt>不変条件</dt><dd>ルーチン呼び出しによって変わらないオブジェクトの条件</dd>
</dl>




<h3>事前条件</h3>




<h4>事前条件はルーチンの顧客が満たす</h4>


<p>事前条件は、ルーチン（メソッド）の呼び出し側、つまり顧客（Client）が満たさなければならない条件です。呼び出し側はルーチンの事前条件を満たしているかどうかを確認してからルーチンを呼び出します。</p>

<h4>ルーチンの供給側は事前条件を確認できる操作を公開する</h4>


<p>ルーチンの供給側は顧客が事前条件を満たしているかどうかを判断できる操作を公開しなければなりません。公開されている操作で顧客が事前条件を確認できない場合には、事前条件がおかしいか公開している操作が足りません。</p>

<h4>事前条件は人間の入力、システム連携には使用しない</h4>


<p>契約はルーチン間（供給者と顧客）で取り交わすものです。<strong>ここでいう供給者と顧客とはソフトウェア同士のこと</strong>です。ソフトウェアと人間、ソフトウェアと外界の間には契約は成り立ちません。</p>

<p>人間や外界のシステムが相手の場合には入力検査の仕組みを導入しなければなりません。たとえば、入力チェックモジュールによるフィルタなどが考えられます。</p>

<h3>事後条件</h3>




<h4>事前条件が満たされない場合の事後条件は保証されない</h4>


<p>事前条件が満たされないでルーチンが呼び出された場合、ルーチンの事後条件は保証されません。つまり供給者側はそれをエラーにしても良いし、でたらめな値を返してもよいということです。</p>

<h4>事前条件が満たされたのに事後条件を満たせない場合</h4>


<p>事前条件が満たされているのに、事後条件が満たせない場合には、供給側は例外をスローします。</p>

<h3>表明違反の規則</h3>


<p><blockquote><p></p></p><p><ul><br/><li>実行時の表明違反は、そのソフトウェアにバグがある証拠である。</li><br/><li>事前条件違反は顧客側にバグがある証拠である。</li><br/><li>事後条件違反は供給側にバグがある証拠である。</li><br/></ul></p><p><br/><p></p><footer><strong>本書</strong></footer></blockquote></p>

<h2>参考</h2>




<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282376/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web+DB press (Vol.25)]]></title>
    <link href="http://hamasyou.com/blog/2005/02/28/4774122645/"/>
    <updated>2005-02-28T01:12:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/02/28/4774122645</id>
    <content type="html"><![CDATA[<p>Vol25 の注目記事は「<b>アーキテクチャ設計入門</b>」です。J2EEをアーキテクチャ設計の勘所をポイントを抑えて解説しています。最近の典型的な4層構造(プレゼンテーション層、サービス層、ドメイン層、永続化層)のそれぞれの設計ポイントがまとめられています。</p>

<p>「<b>開発者のためのドキュメント作成の技術</b>」も新人さんや2〜3年目の社員の方におすすめできる内容だと思います。設計書、マニュアル、議事録、提案書、報告書、メール、嘆願書、ポイント集と項目を挙げるだけでも読みたいと思えるようなものばかりだと思います。</p>

<p>「<b>Javaプログラミングの○と×</b>」も初心者プログラマの人には楽しめる内容だと思います。どんな点に気をつけてプログラミングを行えばいいかと言ったことが載っていました。</p>

<p>アーキテクチャ設計入門はプログラマ・システムエンジニアの人に是非読んでもらいたい記事です。かなり面白いことが書いてありウンウン納得しながら気持ちよく読めると思います。</p>

<!-- more -->




<h2>アーキテクチャ設計入門-覚書き</h2>




<h3>コンポーネント作成のポイント</h3>


<p>J2EEでアーキテクチャを考える単位は<strong>コンポーネント</strong>である。コンポーネントとは、「インターフェース」、「データ」、「ビジネスロジック」が最低限、集まったものです。</p>

<p>コンポーネントの粒度は、「処理の単位」、「DBへのアクセス頻度」、「画面表示情報」、「トランザクション処理」、「エラー処理」などを検討しつつ決める用にします。イメージ的には<b>ユースケースの似通った処理をまとめたものがコンポーネント</b>になる感じです。</p>

<p>コンポーネントを抽出する際に気をつける点は、各コンポーネントに対して低結合性と高凝集性を持たせるという点。他のコンポーネントに依存することがないのが理想的。同じ系統のサービスを一緒にまとめるのが基本。</p>

<h3>オブジェクト指向でビジネス層を設計する</h3>


<p>オブジェクト指向設計は、「データ構造」と「プロセス(処理)」をカプセル化したオブジェクトを元に設計を行っていきます。UMLのユースケースを満たすようにシステムを設計していきます。</p>

<p>ユースケースはビジネスの要求を表したものになります。そして、ユースケースは手続き(ビジネスフロー)を表したものになります。つまり、オブジェクト指向でユースケースを実装しようとするとミスマッチが起こります。このミスマッチをサービス層が生めることになります。</p>

<p><strong><a href="http://corej2eepatterns.com/Patterns2ndEd/BusinessObject.htm" rel="external nofollow">ロバストネス図</a>におけるエンティティに固有のロジックをカプセル化したパターンになります。</p>

<p><strong>Business Object</strong> パターンのポイントは、サービスを提供するオブジェクトがエンティティ自身になるという点です。そして、粒度の細かいオブジェクト(ex. 注文明細、住所)をエンティティ内にカプセル化します。永続化の処理は、別途<a href="http://www.corej2eepatterns.com/Patterns2ndEd/DataAccessObject.htm" rel="external nofollow">DAO</a>などに任せるような設計にします。このあたりは、O-Rマッピングツールの出番となるところです。</p>

<h2>参考</h2>


<ul>
<li>J2EEを使った設計の極意は本書から盗め</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>J2EEパターンをポイントポイントに使って、良い設計を心がけよう</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>オブジェクト指向設計の極意！必読です。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797323361/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>アーキテクチャを考えるときに役に立つのは、優れたパターンである</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0131422464/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
