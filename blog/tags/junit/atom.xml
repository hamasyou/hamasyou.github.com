<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: JUnit | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/junit/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-14T13:51:18+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JUnitと単体テスト技法―JUnit4対応]]></title>
    <link href="http://hamasyou.com/blog/2006/10/09/4883732304/"/>
    <updated>2006-10-09T13:19:00+09:00</updated>
    <id>http://hamasyou.com/blog/2006/10/09/4883732304</id>
    <content type="html"><![CDATA[<p>本書は、JUnit の使い方と単体テストについての知識を得られるものになっています。JUnit を使ったテストファーストの流れを説明し、テストとは何か（単体テスト、結合テスト、システムテスト）ということを解説しています。</p>

<p>対象読者は次のような人です。</p>

<ul><li>JUnit を使ったテストファーストを学んでみたい</li>
<li>単体テストでどんなテストを行えばよいのか迷っている</li>
<li>テスト技法に関してさらっと基礎をつかんでおきたい</li>
</ul>




<h4>テストファーストに関してさらに学びたい人にはこちらがお勧めです</h4>


<p>『<a href="http://www.amazon.co.jp/gp/product/479810714X/503-3688169-6412757?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=479810714X" rel="external nofollow">バグがないプログラムのつくり方 JavaとEclipseで学ぶTDDテスト駆動開発</a>』</p>

<dl>
<dt class="info">Information</dt>
<dd>本書で説明されている JUnit のバージョンは 3.8.1 です。付録に JUnit4 の説明が20数ページ割かれています。</dd>
</dl>




<!-- more -->




<h2>特徴</h2>




<h3>単体テストがターゲット</h3>


<p>本書は単体テストをターゲットにした本になっています。単体テストには JUnit を使います。</p>

<p><a href="http://www.techscore.com/tech/Others/JUnit/1.html" rel="external nofollow">単体テストとJUnit-TECHSCORE</a></p>

<h4>単体テストとは</h4>


<p><blockquote><p>単体テストは、モジュールを単位としたテストです。Java の場合、クラス、メソッドが単体テスト対象となります。&lt;中略&gt; 単体テストとは、開発者（プログラマ）が自分で作ったプログラムが「ちゃんと動くか」調べる作業です。</p></p><p><p></p><footer><strong>本書 P.59 「単体テストの技法」より</strong></footer></blockquote></p>

<p>単体テストは、プログラマが自分の作ったプログラムをテストすることを指します。単体テストでは、テスト対象だけでテストが実行できることがベストです。そのためには、外部に依存する部分をモックオブジェク（Mock Object）などを使ってテストしやすくする必要があります。</p>

<p><a href="http://bobchin.ddo.jp/simpletest/mock_objects_documentation.html" rel="external nofollow">モックオブジェクトとは - SimpleTest for PHP</a></p>

<h4>単体テスト項目</h4>


<p>単体テストでは、次のような項目をテストします。</p>

<ul><li>境界値</li>
<li>条件分岐</li>
<li>網羅性（カバレッジ）</li>
<li>例外ケース</li>
<li>エラーが出そうな値（マイナス値、巨大な値、0、NULL）</li>
<li>パフォーマンス</li></ul>


<p>上記のテストを、正常系とエラー系に分けてそれぞれテストを行います。</p>

<h3>テストファーストを体験できる</h3>


<p>本書は、単体テストをテストファーストという開発手法で行う手順を解説しています。テストファーストとは、テストを最初に行う開発手法のことです。</p>

<dl>
<dt class="tips">Tips</dt>
<dd>ここでいうテストとは、プログラムを書いた後に記述するテストとは少し意味合いが異なると僕は考えています。テストファーストで記述するテストは、動くことの確認という意味合いよりも、こう動かなければいけないという仕様を強くあらわしていると考えています。そのため、仕様が決まっていなければテストファーストを実行することができません。これにより、「仕様は決まってないんだけど、とりあえずコーディングする」という悪行が防げます。</dd>
</dl>




<h3>テスト技法のおさらいができる</h3>


<p>本書で上げられているテスト技法には次のものがあります。</p>

<ul><li>ブラックボックステスト</li><li>ホワイトボックステスト</li></ul>




<h4>ブラックボックステスト</h4>


<p>ブラックボックステストは、プログラムの仕様を元にテストを行うものです。プログラムの内部構造は考慮せず、入出力の仕様に注力します。ブラックボックステストとして、次の4つのテストがあげられています。</p>

<ul><li>同値クラステスト</li><li>境界値テスト</li><li>デシジョンテーブルテスト</li><li>強制エラーテスト</li><li>グレーボックステスト</li></ul>




<h4>ホワイトボックステスト</h4>


<p>ホワイトボックステストは、プログラムの内部構造を元にテストを行うものです。条件分岐、データ構造、実装方法などのプログラムの内部を熟知した上でですとを行います。JUnit を用いた単体テストは、主にこのホワイトボックステストを行います。</p>

<ul><li>制御フローテスト</li><li>データフローテスト</li></ul>




<h3>テストの種類がまとまっている</h3>


<p>単体テスト以外にも、結合テスト、システムテストといったテストの説明がされています。</p>

<h4>結合テスト</h4>


<p>単体テストが完了したモジュールを組み合わせて行うテストのことです。テストシナリオを考えてテストを行います。</p>

<ul><li>トップダウンテスト</li><li>ボトムアップテスト</li><li>サンドイッチテスト</li><li>ビックバンテスト</li></ul>




<h4>システムテスト</h4>


<p>システム全体のテストを行います。</p>

<ul><li>性能テスト（パフォーマンステスト）</li><li>負荷テスト</li><li>例外処理テスト</li><li>操作性テスト</li></ul>




<h2>覚書</h2>


<p>JUnit4 についてすごくよくまとまっているサイトを見つけたので参考に。</p>

<p><a href="http://www.okisoft.co.jp/esc/testing/JUnit4-TestNG.html" rel="external nofollow">JUnit 4 &amp; TestNG</a></p>

<h2>参考</h2>


<ul>
<li>ソフトウェアテストのバイブル</li>
</ul>


<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822282511/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>ソフトウェアテストのバイブル その二</li>
</ul>


<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281132/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>バイブルからよいとこ取りした鉄則書</li>
</ul>


<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/482228154X/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>TDD（テスト駆動開発）の発案者による本</li>
</ul>


<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUnitによるテストファースト開発入門]]></title>
    <link href="http://hamasyou.com/blog/2004/12/12/4797325720/"/>
    <updated>2004-12-12T20:27:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/12/12/4797325720</id>
    <content type="html"><![CDATA[<p>「実装を行った後のテスト」と「実装を行う前のテスト」の違いを明確にしてくれる解説が多く、非常にためになりました。本書の中で「<strong>テストファースト</strong>」とは、「実装を行う前にテスト設計を立てること」だという、非常にシンプルな定義がされていて、テストファーストをはじめて聞く人にはわかりやすいのかなと思いました。</p>

<p>テスト段階で考えるべきことを重点的に解説してあり、プロジェクト中のテスト管理についてまで書かれていて、現場の開発者向けのテスト実践書という感じがしました。</p>

<p>テスト担当者や、これからプロジェクトに参加する開発者の人向けの本です。テストツールとして、「<a href="http://www.junit.org/" rel="external nofollow">DBUnit</a>」などのツールにも触れられていて、本書一冊で、現場のテスト実践のベースができてしまう気がしました。</p>

<p>とても参考になる事が載っているので、初学者の方におすすめです。自分なりの「テストファースト論」ができている人には、知っていることばかりかもしれません。</p>

<!-- more -->




<h2>特徴</h2>


<p>テストを行う上で、気をつけなければいけない事柄、テストケースの作り方、テストツールの使い方、テスト管理の仕方と、プロジェクトで即使える情報が満載です。</p>

<p>従来の開発方法論からイテレーション系の開発方法論に現代のシステム開発がなっている中で、テストの位置づけを詳細に説明されていて、<b>現場の匂いがぷんぷん</b>してきます。下手に抽象度を上げずに、具体的な解説や、具体的な成果物をベースにしているので、とても分かりやすいです。</p>

<p>今後、プロジェクトに「テストファースト」を取り入れたいと思っている開発者の方は、本書を指針にするとスムーズに開発が行っていけるかと思います。とても分かりやすく現場主義なので、開発者におすすめです。</p>

<h2>参考</h2>


<ul>
<li>テストファーストを開発方法論にした「テスト駆動開発」はどうですか。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810714X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>テスト駆動開発の長、ケントベックのバイブル本です。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>JUnit に関する解説書</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
