<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 自作 | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/zi-zuo/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2015-08-14T11:06:25+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[30日でできる! OS自作入門 覚書]]></title>
    <link href="http://hamasyou.com/blog/2006/05/06/os/"/>
    <updated>2006-05-06T22:39:00+09:00</updated>
    <id>http://hamasyou.com/blog/2006/05/06/os</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839919844/sorehabooks-22/250-1891990-4739433?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" rel="external nofollow"></a>
</p>


<p>『30日でできる！OS自作入門』 の覚書です。</p>

<p>本書を読んでいて気になったこと、整理したいことをメモしていこうと思います。ちゃんとした説明は、本書を読むほうが良いと思います。</p>

<p><blockquote><p>プログラミングの基礎からはじめて、30日後にはウィンドウシステムを有する32bitマルチタスクOSをフルスクラッチで作り上げるという入門書。ビギナーでも無理なく作成できるようPCの仕組み・アセンブラ・Cの解説から始まり、試行錯誤を繰り返しながらアルゴリズムを学びつつ、たのしく自由な雰囲気でOSをゼロから構築していくという、他に類を見ない手法による、趣味と実用と学習を兼ね備えたOS作成の入門書です。</p></p><p><p></p><footer><strong>「Amazon 出版社コメント」</strong></footer></blockquote></p>

<p><section></p>

<h4>[参考]</h4>


<ul>
<li><a href="http://community.osdev.info/" rel="external nofollow">OS Wiki</a></li>
</ul>


<p></section></p>

<!-- more -->




<h2>おぼえがき</h2>




<ul>
<li><a href="#chapter0" rel="external nofollow">セグメンテーション おぼえがき</a>
<ul>
<li><a href="#section0" rel="external nofollow">セグメンテーションとは</a></li>
<li><a href="#section1" rel="external nofollow">GDT (Global Descriptor Table) とは</a></li>
<li><a href="#section2" rel="external nofollow">アセンブラからセグメントを指定する</a></li>
<li><a href="#section3" rel="external nofollow">PIC の割り込み信号を命令と受け取る</a></li>
</ul>
</li>
<li><a href="#chapter1" rel="external nofollow">マルチタスクのメモ</a></li>
<li><a href="#chapter2" rel="external nofollow">割り込み と PIC (Programmable Interrupt Controller)</a>
<ul>
<li><a href="#section3" rel="external nofollow">PIC の割り込み信号を命令と受け取る</a></li>
</ul>
</li>
<li><a href="#chapter3" rel="external nofollow">PIT (Programmable Interval Timer) とは</a></li>
</ul>




<h2 id="chapter0">セグメンテーション おぼえがき</h2>




<h3 id="section0">セグメンテーションとは</h3>


<p>セグメンテーションとは、メモリの物理アドレスをセグメントアドレスとオフセットの 2 段階で指定する方法です。8086系のインテル CPU はメモリの物理アドレスを直接指定することができないのでこの方法をつかいます。</p>

<p>セグメントアドレスの指定には、セグメントレジスタを使います。セグメントレジスタは 4 個用意されていて、それぞれに名前と役割が与えられています。</p>

<dl>
<dt>CS</dt>
<dd><p>「コードセグメント」 と呼びます。このレジスタには、実行中のプログラムのアドレスが格納されます。このレジスタと命令ポインタ（EIPレジスタやIPレジスタ)を組み合わせて、命令の置かれている物理アドレスを計算します。</p></dd>
<dt>DS</dt>
<dd><p>「データセグメント」 と呼びます。このレジスタは、データをメモリから読み出すときに使われます。</p></dd>
<dt>SS</dt>
<dd><p>「スタックセグメント」 と呼びます。スタック操作に使われるセグメントです。P.133 のスタック操作の説明で使われているのが確認できます。</p></dd>
<dt>ES</dt>
<dd><p>「エクストラセグメント」 と呼びます。データセグメントの拡張として使用します。DS だけで足りない場合に使います。</p></dd>
</dl>




<h4>[参考]</h4>


<p><a href="http://wisdom.sakura.ne.jp/programming/asm/assembly5.html" rel="external nofollow">セグメントとオフセット</a></p>

<h3 id="section1">GDT (Global Descriptor Table) とは</h3>


<p>P.112 の GDT に関する説明のメモです。</p>

<p>セグメントアドレスの指定にはセグメントレジスタを使います。このセグメントレジスタですが、じつはセグメントの物理アドレスがそのまま格納されているわけではなく、セグメント情報の ID が格納されています。セグメント情報のことをセグメントディスクリプタ (Segument Descriptor) と呼び、セグメント ID のことをセグメントセレクタ (Segment Selector) と呼びます。</p>

<p>セグメント情報は次の4つの情報で構成されています。</p>

<ol><li>セグメントがどこから始まるのか （セグメントベース） : 32bit</li>
<li>セグメントの大きさはどれくらいか （セグメントリミット） : 20bit</li>
<li>セグメント属性 : 12bit</li></ol>


<p>一つのセグメントに関する情報は、この 8byte の情報によって構成されています。これらセグメント情報を管理するのが <strong>GDT (Global Descriptor Table)</strong> と呼ばれるテーブルです。そして、GDT がメモリのどのアドレスに用意されているかを知らせるためのレジスタが、<strong>GDTR</strong> になります。</p>

<p><img src="http://hamasyou.com/images/30os/GDT.gif" alt="GDT" /></p>

<p>セグメントセレクタは 13bit になっています。セグメントレジスタは 16bit ですが、下位 3bit が使えません。なので、セグメントセレクタであらわせる ID の数は 2 ^ 13 = 8,192 個です。ただし、セグメント ID が 0 、つまり最初のセグメント情報はヌルセレクタと呼ばれ、使うことができません。実際はセグメント情報は全部で 8,191 個 です。</p>

<h3 id="section2">アセンブラからセグメントを指定する</h3>


<p>セグメントを指定するには、セグメントレジスタにセグメント情報のアドレスをセットします。セグメント情報のアドレスは、GDT 内の相対アドレスで指定します。つまり、セグメント情報は 8byte なので、「8 * (セグメントID)」 をセグメントレジスタにセットしてやればよいことになります。これで、GDTR のアドレスとセグメントセレクタのアドレスを計算して、セグメントが指定できます。</p>

<h4>[参考]</h4>


<p><a href="http://www-06.ibm.com/jp/developerworks/linux/060217/j_l-memmod.shtml" rel="external nofollow">Linux メモリー・モデルの探求</a></p>

<h2 id="chapter1">マルチタスクのメモ</h2>


<p>ここから、P.295 のマルチタスクのメモです。</p>

<p><blockquote><p>CPU はいつでもセグメント番号を扱う命令を実行するたびに GDT の設定を確認しにいくので、今回も JMP 命令を実行するときに普通の far-JMP なのか タスクスイッチなのかを判断しています。</p></p><p><p></p><footer><strong>本書 P.294 より</strong></footer></blockquote></p>

<p>つまり、GDT に設定しておくセグメントの情報には 2種類あって、実行可能なセグメント（プログラムのこと？） と タスク状態セグメントがあるということらしいです。タスク状態セグメントは、全部で 104byte からなる情報の塊で、これが見つかるとタスクスイッチされます。</p>

<h2 id="chapter2">割り込み と PIC (Programmable Interrupt Controller)</h2>


<p>P.127 の割り込みに関する説明のメモです。</p>

<p>CPU は、割り込み信号 （IRQ: Interrupt Request） を一つしか処理することができません。そこで、複数の割り込みを処理できるように CPU の外部に <strong>PIC (Programmable Interrupt Controller)</strong> という装置が用意されています。</p>

<p>1つの PIC は同時に 8つの割り込みを監視することができます。Intel 製の CPU には、PIC が 2つ付いています。</p>

<pre>
┌―――┐　　　┌――――――――┐
│ＣＰＵ│―――│ＰＩＣ（マスタ）│
└―――┘　　　└――――――――┘
├ＩＲＱ０
├ＩＲＱ１　　　┌―――――――――┐
├ＩＲＱ２ ―― │ＰＩＣ（スレーブ）│
├ＩＲＱ３　　　└―――――――――┘
├ＩＲＱ４　　　　　　　├ＩＲＱ８
├ＩＲＱ５　　　　　　　├ＩＲＱ９
├ＩＲＱ６　　　　　　　├ＩＲＱ１０
└ＩＲＱ７　　　　　　　├ＩＲＱ１１
├ＩＲＱ１２
├ＩＲＱ１３
├ＩＲＱ１４
└ＩＲＱ１５
</pre>




<h3 id="section3">PIC の割り込み信号を命令と受け取る</h3>


<p>CPU は、PIC の割り込み信号を、INT 命令として実行するように作られています。PIC は、IRQ それぞれに割り込み信号を設定し、割り込みが発生すると、割り込み信号を INT 命令一緒に CPU に送信します。</p>

<p>CPU は、IDT （Interrupt Descriptor Table） を見て割り込み信号に対応する関数の呼び出しを行います。これが割り込み処理です。IDT は、割り込み信号と割り込み処理関数を対応付けたテーブルです。</p>

<p><img src="http://hamasyou.com/images/30os/pic.gif" alt="PICの割り込み処理" /></p>

<h2 id="chapter3">PIT (Programmable Interval Timer) とは</h2>


<p>P.232 のタイマーに関する説明のメモです。</p>

<p>PC でタイマーを利用するときには、<strong>PIT (Programmable Interval Timer)</strong> を設定します。これは、一定期間ごとに割り込みを発生させる装置です。</p>

<p>PC では、PIT は IRQ0 につながっています。設定方法は、キーボードやマウスの割り込みを設定するのと同じ方法です。</p>

<h4>[参考]</h4>


<ul>
<li><a href="http://community.osdev.info/?(PIT)8254" rel="external nofollow">PIT 8254 のページ</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
