<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Titanium | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/titanium/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-14T19:32:59+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Titanium]モジュールを使ったアプリで実機転送時にリンカエラーが発生する場合の対処]]></title>
    <link href="http://hamasyou.com/blog/2013/03/05/titanium/"/>
    <updated>2013-03-05T08:52:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/03/05/titanium</id>
    <content type="html"><![CDATA[<p>モジュールを作成して、デモアプリ等で利用する際に実機転送時に</p>

<pre><code>[ERROR] : ** BUILD FAILED **
[ERROR] : The following build commands failed:
[ERROR] :   Ld build/Debug-iphoneos/gpuimagedemo.app/gpuimagedemo normal armv7
[ERROR] : (1 failure)
</code></pre>

<p>のようなエラーが発生する場合がある。
これは、Titanium がビルド時に最適化で利用していない内部モジュールとのリンクを切ってしまうために起こる。</p>

<p>build ディレクトリの下の Xcode のプロジェクトを開くと</p>

<pre><code>Undefined symbols for architecture arvm7:
    ...
":_OBJC_CLASS_$_TiUIImageView":, referenced from:
    ...
</code></pre>

<p>のようにビルドエラーが発生している。</p>

<p>これを解決するには、モジュールで利用している内部クラスを、JavaScript 側のソースコードに現れるようにする。</p>

<p>例えば、今回の場合だと、TiUIImageView の参照先が見つからないとなっているので JavaScript のコードの方に</p>

<pre><code class="javascript">if (false) {
    Ti.UI.createImageView({
        image: 'demo.jpg'
    });
}
</code></pre>

<p>のようなコードを加えれば良い。バッドノウハウですね。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text2 で Titanium Mobile のコード補完を効かせる方法]]></title>
    <link href="http://hamasyou.com/blog/2013/01/29/sublime-text2-titanium-mobile/"/>
    <updated>2013-01-29T13:23:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/01/29/sublime-text2-titanium-mobile</id>
    <content type="html"><![CDATA[<p>Qiita にも書きました。 <a href="http://qiita.com/items/ef8c332710960e2730d6" rel="external nofollow">Qiita: http://qiita.com/items/ef8c332710960e2730d6</a></p>

<h3>1. Package Manager で SublimeCodeIntel をインストールする</h3>


<p>Sublime Text2 の PackageManager を使って SublimeCodeIntel をインストールします。</p>

<p><i class="fa fa-search"></i> <a href="http://ready-study-go.blogspot.jp/2011/09/sublime-text-2.html" rel="external nofollow">http://ready-study-go.blogspot.jp/2011/09/sublime-text-2.html</a></p>

<h3>2. jsca2.js を使って Titanium Mobile の API doc を JavaScript 化する。</h3>


<p><i class="fa fa-search"></i> <a href="https://github.com/navinpeiris/jsca2js" rel="external nofollow">jsca2js: https://github.com/navinpeiris/jsca2js</a></p>

<p>git clone で落としてきて</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>./titanium-mobile.py 3.0.0</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>のように、生成した API のバージョンを指定すればOK。</p>

<h4>Titanium 3.0.0 のコードをインストールする場合の注意</h4>


<p>titanium-mobile.py の中でバージョン毎に参照先の URL を変えるようにしていますが、3.0.0 の API Doc 参照先が間違っています。</p>

<p>なので、URL を修正してあげる必要があります。titanium-mobile.py を開き 23行目辺りにある URL を次のように書き換えます。</p>

<pre><code class="python titanium-mobile.py">if version.startswith('2.'):
  url = 'http://docs.appcelerator.com/titanium/data/' + version + '/api.json'
else:
  #url = 'http://developer.appcelerator.com/apidoc/mobile/' + version + '/api.json'
  url = 'http://docs.appcelerator.com/titanium/data/' + version + '/api.json'
</code></pre>

<h3>3. 生成された titanium-mobile-3.0.0.js を ~/.codeintel/extra にコピーする</h3>


<p>SublimeCodeIntel をインストールすると ~/.codeintel というフォルダが作られているはずです。</p>

<p>追加の補完用コードをまとめるために、extra フォルダを作ってそこに生成された titanium-mobile-3.0.0.js をコピーします。</p>

<h3>4. SublimeCodeIntel に extra フォルダのパスを通す</h3>


<p>~/.codeintel/config を開いて次のコードを追記します。</p>

<pre class="code"><code>{
  "JavaScript": {
    "javascriptExtraPaths": ["~/.codeintel/extra"]
  }
}</code></pre>


<p>これで、 SublimeCodeIntel が JavaScript ファイルで Titanium Mobile のコード補完を行うようになります。</p>

<h3>5. (オプション) CoffeeScript でもコード補完を効かせる</h3>


<p>SublimeCodeIntel が CoffeeScript のコード補完に対応していないので CoffeeScript のシンタックスを JavaScript に設定してやります。</p>

<p>Sublime Text2 の > Preferences > Package Settings > SublimeCodeIntel > Settings - User を開いて次の設定を追加します。</p>

<pre class="code"><code>{
  "codeintel_syntax_map":
  {
    "CoffeeScript": "JavaScript"
  }
}</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium Alloy でつくったアプリをリリースしました]]></title>
    <link href="http://hamasyou.com/blog/2013/01/22/titanium-alloy/"/>
    <updated>2013-01-22T11:22:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/01/22/titanium-alloy</id>
    <content type="html"><![CDATA[<p>Titanium Mobile プラットフォームの開発元である Appcelerator が公開している公式のフレームワーク <strong>Alloy</strong> を使って作ったアプリを公開しました。</p>

<p>アプリ紹介ページは下になります。
<a href="http://mountposition.co.jp/obento/" rel="external nofollow">Thankお弁当: http://mountposition.co.jp/obento/</a></p>

<p><img alt="phones.png" src="http://hamasyou.com/images/phones.png" width="324" height="367" class="mt-image-none" style="" /></p>

<p>Titanium Mobile は JavaScript を使ってスマホアプリを開発できるプラットフォームです。iPhone や Android 向けのアプリを手軽に開発することが出来ます。</p>

<p>Alloy はそんな Titanium Mobile での開発に規約と規律を導入した MVC フレームワークになります。Ruby On Rails に似てる感じです。</p>

<p>Alloy を使うといろいろいいことがありますが、それはまた別の記事で紹介します。</p>

<p>以上、アプリの宣伝でした！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium Mobileで開発するiPhone/Androidアプリ (Smart Mobile Developer)]]></title>
    <link href="http://hamasyou.com/blog/2011/06/18/4798123986/"/>
    <updated>2011-06-18T10:01:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/06/18/4798123986</id>
    <content type="html"><![CDATA[<p>本書は、スマートフォンアプリ開発に使う開発ツールを探している人、<strong>Titanium Mobile</strong> という名前を聞いたことがあるけど実際にどういうものかを知りたい人、Titanium Mobile を使って開発を始めたけどこういう書き方で合っているのか不安な人向けの、概要書兼リファレンスブック的な位置づけにあたります。</p>

<p><section></p>

<h4>Titanium Mobile</h4>


<p><a href="http://www.appcelerator.com/products/titanium-mobile-application-development/" rel="external nofollow">Titanium Mobile - Appcelerator</a></p>

<p></section></p>

<p>Titanium Mobile を開発、提供している Appcelerator が用意してくれている Web 上のドキュメントは、Titanium Mobile を始めたばかりの人には分かりづらく、「こういうことがしたいんだけどどう書けばいいの？」という時には使いづらいのです。</p>

<p>本書は、そんな Titanium Mobile のドキュメントの弱さを補い、Titanium Mobile とはどういうふうに動作しているのか、こういうことをするときはどう書けばいいのかを学ぶのに最適な本です。</p>

<p>iPhone、Android 向けスマートフォンアプリとはいえ、プラットフォーム SDK が備える機能はとても豊富です。これらの SDK を JavaScript から扱えてしまう Titanium Mobile をよくここまでまとめたなぁという印象の良書です。</p>

<div class="option"><p>スマートフォン開発は、Windows や Mac などの GUI アプリケーションと同様、イベントドリブンモデルの開発になります。そのため、GUI アプリ開発の経験がない人には Titanium Mobile を使って JavaScript で開発を行うと、どうしても戸惑うことが出てくると思います。</p>

<p>本書をとりあえず読んでみて、<em>Titanium Mobile 上で JavaScript で GUI 開発（スマートフォンアプリ開発）ってこういうふうにするんだ</em>というのを体感してもらい、リファレンスとしてのお供にされるといいと思います。</p></div>


<p>本書の対象者は、<em>Titanium Mobile を使って開発を始めたい人、実際に開発を始めたがまとまった情報がほしい人</em>です。Titanium Mobile を使ってとにかく何か作ってみたいひとは、本書内のサンプルを写経してみるといいと思います。</p>

<p>Titanium Mobile を使って開発をしてみたものの、不安が残っている人に最適な一冊です。</p>

<!-- more -->




<h2>本書の目次</h2>




<ol>
<li>Appcelerator Titanium Mobile について
  <ol>
  <li>Appcelerator 社と Titanium シリーズ</li>
  <li>Titanium Mobile について
    <ol class="fontSmall">
    <li>Titanium Mobile が提供する機能</li>
    <li>Titanium Mobile の動作原理</li>
    <li>オープンソース開発されている Titanium Mobile </li>
    <li>日本で注目を集める Titanium Mobile</li>
    <li>今後のロードマップ</li>
    </ol>
  </li>
  <li>価格体系／ライセンス</li>
  <li>Titanium Mobile を利用するのに必要な環境
    <ol class="fontSmall">
      <li>iOS には Mac OS X 環境が必要</li>
      <li>Android 開発について</li>
    </ol>      
   </li>
   <li>ネイティブアプリケーション開発で代替手段を選択するリスク</li>
   </ol>
</li>
<li>開発環境導入とアプリケーションの第一歩
  <ol>
  <li>iOS 用開発環境の構築
    <ol class="fontSmall">
      <li>iOS SDK と Xcode</li>
      <li>IOS Developer Program の登録</li>
    </ol>
  </li>
  <li>Android 用開発環境の構築
    <ol class="fontSmall">
      <li>JDK の確認と Android SDK の入手</li>
      <li>Mac OS への導入</li>
      <li>Windows7 へのインストール</li>
    </ol>
  </li>
  <li>Titanium Developer のインストール
    <ol class="fontSmall">
      <li>Mac OS X の場合</li>
      <li>Windows7 の場合</li>
      <li>Titanium Developer の起動とサインアップ</li>
    </ol>
  </li>
  <li>Titanium Developer の画面解説
    <ol class="fontSmall">
      <li>パースペクティブ</li>
      <li>最新版 SDK のアップデート</li>
    </ol>
  </li>
  <li>Hello World プロジェクトの作成
    <ol class="fontSmall">
      <li>プロジェクトの新規作成</li>
      <li>iPhone(iPod touch)の場合</li>
      <li>Andorid の場合</li>
      <li>iPad の場合</li>
    </ol>
  </li>
  <li>Hello World プロジェクトを実機で動かす
    <ol class="fontSmall">
      <li>iOS(iPhone/iPad/iPod touch)の場合</li>
      <li>Android の場合</li>
    </ol>
  </li>
  <li>プロジェクトの中を探索する
    <ol class="fontSmall">
      <li>プロジェクトのフォルダ構成</li>
      <li>app.js の解説</li>
      <li>プラットフォームによる UI の違い</li>
    </ol>
  </li>
  <li>ネイティブ UI の部品紹介と KitchenSink
    <ol class="fontSmall">
      <li>ネイティブ UI の部品カタログ</li>
      <li>KitchenSink とは何か？</li>
    </ol>
  </li>
  <li>Hello World の中身をいじってみる
    <ol class="fontSmall">
      <li>win1 に機能を追加する</li>
      <li>win2 に機能を追加する</li>
      <li>Tab を使わない画面デザイン</li>
      <li>WebView を用いた HTML5 アプリケーション</li>
    </ol>
  </li>
  <li>アプリケーションアイコン／スプラッシュスクリーンを変更
    <ol class="fontSmall">
      <li>アプリケーションアイコン</li>
      <li>スプラッシュスクリーン（起動時画像）</li>
    </ol>
  </li>
  <li>アプリケーションの設定と拡張
    <ol class="fontSmall">
      <li>tiapp.xml</li>
      <li>iOS プラットフォームに依存したビルド</li>
      <li>Android プラットフォームに依存したビルド</li>
    </ol>
  </li>
  </ol>
</li>
<li>実践！ Twitter クライアントアプリ開発
  <ol>
  <li>TiTweets の目標</li>
  <li>プロジェクト作成</li>
  <li>タイムラインの表示
    <ol class="fontSmall">
      <li>HTTP クライアントとネットワークの状態の取得</li>
      <li>ログ出力メソッド</li>
      <li>TableView への表示</li>
      <li>TableViewRow の使用</li>
    </ol>
  </li>
  <li>app.js からスクリプトファイルの分割
    <ol class="fontSmall">
      <li>Titanium.include によるファイル分割</li>
      <li>Titanium.UI.createWindow の url 指定での分割</li>
      <li>ファイル分割と実行コンテキスト</li>
      <li>コンテキスト間の値の受け渡し</li>
      <li>アプリケーションプロパティを用いて実行コンテキストの違いを回避する</li>
    </ol>
  </li>
  <li>プラットフォームごとの再読込 UI の実装
    <ol class="fontSmall">
      <li>iPhoen の場合：ナビゲーションボタンを利用する</li>
      <li>Android の場合：メニューを利用する</li>
      <li>プラットフォームの違いを吸収する</li>
      <li>再読込処理を実装する</li>
    </ol>
  </li>
  <li>検索結果の表示を行う
    <ol class="fontSmall">
      <li>固定したハッシュタグの検索</li>
      <li>任意の検索文字列に基づく検索</li>
      <li>前回検索値の保存</li>
    </ol>
  </li>
  <li>共通ソースのオブジェクト化
    <ol class="fontSmall">
      <li>オブジェクトのひな形</li>
      <li>titwitter.js を実装する</li>
      <li>アプリケーション連携（OpenURL とインテント）</li>
    </ol>
  </li>
  <li>国際化対応（i18N）
    <ol class="fontSmall">
      <li>メッセージ定義ファイルの準備</li>
      <li>メッセージ定義ファイルの使用</li>
      <li>メッセージ中の文字列置き換え</li>
    </ol>
  </li>
  <li>もうすこし機能拡張
    <ol class="fontSmall">
      <li>タブの整理</li>
      <li>Tweet の単独表示</li>
      <li>Read it Later 連携</li>
    </ol>
  </li>
  <li>AppStore / Android Market への公開
    <ol class="fontSmall">
      <li>iOS の場合（Ad Hoc 配布／App Store 公開）</li>
      <li>Android Market への公開</li>
    </ol>
  </li>
  </ol>
</li>
<li>ライブラリやデバイスの活用 <span class="fontSmall">〜続・Twitter クライアントアプリ開発〜</span>
  <ol>
  <li>TinyTweet の目標</li>
  <li>OAuth 認証の設定をする
    <ol class="fontSmall">
      <li>アプリケーションを登録する</li>
      <li>OAuth 認証の動作検証を行う</li>
      <li>ホームタイムラインを取得する</li>
    </ol>
  </li>
  <li>Tweet を Post する
    <ol class="fontSmall">
      <li>TextArea を配置する</li>
      <li>キーボードツールバー（iOS のみ）</li>
      <li>返信機能などに対応する</li>
    </ol>
  </li>
  <li>カメラ撮影／フォトギャラリーの活用
    <ol class="fontSmall">
      <li>カメラ撮影の呼び出し</li>
      <li>撮影済みの写真データの取得</li>
      <li>TwitPic へのアップロード</li>
      <li>画像ファイルのリサイズ（iOS のみ）</li>
      <li>Andriod の場所のキーボードツールバー実現方法</li>
    </ol>
  </li>
  <li>アプリケーションの完成
    <ol class="fontSmall">
      <li>カメラ処理部分をソース分割する（require の活用）</li>
      <li>設定画面を作成する</li>
    </ol>
  </li>
  </ol>
</li>
<li>GPS 活用アプリケーション「食べナビ」
  <ol>
  <li>「食べナビ」における目標</li>
  <li>食べログ API に基づきデータを表示する
    <ol class="fontSmall">
      <li>API の動作検証</li>
      <li>テスト用モックデータ取得処理</li>
      <li>「もっと読む」機能</li>
      <li>店舗情報の出力</li>
    </ol>
  </li>
  <li>位置情報に基づいて地図を表示する
    <ol class="fontSmall">
      <li>地図表示部品 MapView の利用</li>
      <li>tiapps.xml への設定（Android のみ）</li>
      <li>latitudeDelta と longitudeDelta</li>
      <li>Annotation（マーカー／ピンの表示）</li>
    </ol>
  </li>
  <li>GPS で現在地の位置情報を取得する
    <ol class="fontSmall">
      <li>位置情報を取得する GPS 関連 API の利用</li>
      <li>軽遺族的な位置情報の取得</li>
    </ol>
  </li>
  <li>カバーフローによる写真一覧表示（iOSのみ）
    <ol class="fontSmall">
      <li>CoverFlowView</li>
      <li>問い合せ結果との組み合わせ</li>
    </ol>
  </li>
  <li>取得したデータをデータベースに保存する
    <ol class="fontSmall">
      <li>テーブルレイアウトと検証</li>
      <li>データの追加と更新</li>
      <li>お気に入りの表示</li>
      <li>データの削除</li>
    </ol>
  </li>
  </ol>
</li>
<li>Titanium Mobile API 簡易リファレンス
  <ol>
  <li>簡易リファレンスの読み方</li>
  <li>Window と View</li>
  <li>コントロール</li>
  <li>デバイス</li>
  <li>プラットフォーム</li>
  <li>通信</li>
  <li>その他</li>
  </ol>
</li>
<li>Appendix
  <ol style="list-style-type: none;margin-left: 0">
  <li>付録1  モダンな JavaScript コーディングの第一歩</li>
  <li>付録2  自動レイアウトと JSS 機能</li>
  <li>付録3  2DMatrix アニメーション</li>
  <li>付録4  Xib2js による UI 作成</li>
  <li>付録5  開発版ビルド（Continuous Build）を活用する</li>
  <li>付録6  モジュールを使う</li>
  <li>付録7  Titanium Studio</li>
  <li>付録8  Titanium Mobile 困ったときの情報源</li>
  </ol>
</li>
</ol>




<h2>覚書</h2>




<h3>Titanium Mobile の動作原理</h3>


<p>Titanium Mobile は JavaScript でソースコードを記述しますが、動作時には<em>Titanium Mobile の JS インタプリタ上で解釈されて動作します。</em></p>

<p>よく、JavaScript のコードがコンパイルされてネイティブコードに変換されているという誤解をしそうになりますが、そうではありません。</p>

<p>なので、ゲームなどのアニメーションをゴリゴリするようなアプリには、Titanium Mobile の利用は考えたほうが良いです。</p>

<p>Titanium Mobile が向いている分野としては</p>

<ul><li>Web上のサービスをクライアントから利用するアプリ</li>
<li>ちょっとしたユーティリティアプリ</li></ul>


<p>だと思います。（<a href="http://mogsnap.jp/" rel="external nofollow">MogSnap</a> のようなここまで Titanium で出来るのか！？っていうものもありますが）</p>

<h3>Appcelerator 社提供のアイコンリソース</h3>


<p>自分でアプリをつくろうと思ったときに「アイコン画像とか、俺つくれねーーー！！」ってなることがあります。。そんなときに利用出来るのがこれ！</p>

<p>Appcelerator から提供されているアイコンのリソースです。是非ご利用ください。</p>

<p><a href="http://developer.appcelerator.com/blog/2010/12/festivus-celebration-day-two-airing-of-grievances.html" rel="external nofollow">Festivus Celebration Day Two - Airing of Grievances - Appcelerator Developer Blog</a></p>

<h3>実行コンテキスト</h3>


<p>Titanium Mobilde で開発する際、Window ごとの処理を別々のソースコードに切り出すことができます。</p>

<p>このとき、実行コンテキストが分かれます。簡単に言うと、変数のスコープが分かれるというものです。</p>

<p><a href="http://developer.appcelerator.com/blog/2010/08/execution-contexts.html" rel="external nofollow">Understanding Execution Contexts - Appcelerator Developer Blog</a></p>

<h2>本書に書いていないこと</h2>




<h3>モジュールの開発</h3>


<p>Titanium Mobile は、プラットフォーム SDK のネイティブ機能へのラッパーを数多く提供してくれているので、ほとんどのことが Titanium Mobile のコンポーネントの組み合わせだけで行えます。</p>

<p>ただ、たまに、もうちょっとこの部分がこうなっていればいいのに！という、コンポーネントを拡張したい場合があります。</p>

<p>Titanium Mobile にはモジュールという形で、SDK を使って直接ネイティブコードを書いて、それを JavaScript から呼び出すということができます。</p>

<p>モジュールのインターフェースは、Titanium Mobile 上の呼び出し規約に沿った形で作成する必要があります。</p>

<p>モジュールの詳しい作り方は、公式のドキュメントを読むのが手っ取り早いと思います。そんなに難しい英語ではないのですんなり理解できるかと思います。</p>

<p><a href="http://developer.appcelerator.com/doc/mobile/guides" rel="external nofollow">Titanium Mobile Programming Guides - Appcelerator</a></p>

<h3>テスト</h3>


<p>Titanium Mobile での開発は JavaScript で記述したアプリケーションコードが Titanium のインタプリタ上で動くというアーキテクチャになっているため、GUI の実際の動作を確認するのは実機かエミュレータ（シミュレータ）を使う必要があります。</p>

<p>ただ、毎回実行してコードが意図したとおりに動いているかを確認するのは時間がかかります。</p>

<p>そういうことで、実装時には GUI の動作とロジックの部分をできるだけ分けて実装しておいて、下に挙げるようなテストフレームワークを使うよいと思います。</p>

<h4>テストフレームワーク</h4>




<dl><dt>drillbit</dt>
<dd><a href="http://d.hatena.ne.jp/Ehren/20110329/1301417692" rel="external nofollow">Titanium mobile で drillbit動いた - Ehrenの日記</a></dd>
<dt>QUnit</dt>
<dd><a href="http://higelog.brassworks.jp/?p=692" rel="external nofollow">Titaniumでユニットテスト - ひげろぐ</a></dd></dl>




<h3>同期処理のための Deferred</h3>


<p>JavaScript はシングルスレッドアーキテクチャなので、割り込みをコールバックという形で実装しています。</p>

<p>スマートフォンアプリのようなイベントドリブンモデルのプラットフォームでは、ユーザの反応をイベントとして発火し、リスナがそのイベントを処理するというモデルで実装していきます。</p>

<p>つまり、JavaScript で実装すると、イベントリスナをコールバック関数として実装して、イベントハンドラ（GUIコンポーネント）に登録しておくという書き方になります。</p>

<pre><code class="javascript">var button = Titanium.UI.createButton({...});
button.addEventListener(function(e) {
  // 処理
});
</code></pre>

<p>Titanium Mobile で開発をしているとコールバックを多用するため、処理が非同期に進んでしまって、何かのイベントの結果で処理を分岐するという事をしたいときに悩むことがあります。</p>

<p>そんなときは、Deferred を使って非同期処理の待ち合わせを行うとよいです。</p>

<p><a href="http://hamasyou.com/blog/archives/000398" rel="external nofollow">[Titanium] JSDeferred を使って現在位置の取得を順次処理する - それはBlog</a></p>

<h2>追記</h2>




<h3>Titanium Mobile 1.7ならびにTitanium Studio 1.0対応について</h3>


<p>Titanium Mobile1.7、Titanium Studio1.0 がリリースされたことで、本書の2章の内容が現実と合わなくなっています。</p>

<p>著者の方がフォローしてくれていますので、活用してみてください。</p>

<p><a href="http://code.google.com/p/titanium-mobile-doc-ja/downloads/detail?name=TMINTRO_ch02Plus.pdf" target="_blank" class="extlink">Titanium Mobileで開発するiPhone/Androidアプリ 第二章 補完稿 -  <br/>
titanium-mobile-doc-ja</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium 非公式 BBS がオープンしました。]]></title>
    <link href="http://hamasyou.com/blog/2011/03/10/titanium/"/>
    <updated>2011-03-10T11:04:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/03/10/titanium</id>
    <content type="html"><![CDATA[<p>公式の <a href="http://www.appcelerator.com/products/titanium-mobile-application-development/" rel="external nofollow">Titainum</a> 掲示板の公開が遅いので、@masuidrive さんが非公式ながら BBS をオープンしてくださいました。</p>

<p>日本の Titanium Developer のみなさん、Titanium の質問はこっちにすると親切丁寧な回答を期待できるかも！</p>

<p><section></p>

<h4>非公式 Titanium BBS</h4>


<p><a href="http://ti.masuidrive.jp/" rel="external nofollow">Titanium BBS(JP unofficial)</a></p>

<p></section></p>
]]></content>
  </entry>
  
</feed>
