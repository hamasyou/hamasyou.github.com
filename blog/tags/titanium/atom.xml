<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Titanium | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/titanium/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-04-02T19:25:43+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Titanium] Alloyのmeasurementの実装がイケてなかったので再実装した]]></title>
    <link href="http://hamasyou.com/blog/2014/04/02/titanium-alloy-measurement/"/>
    <updated>2014-04-02T18:17:44+09:00</updated>
    <id>http://hamasyou.com/blog/2014/04/02/titanium-alloy-measurement</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcelerator.com/titanium/">Titanium</a> Alloy の <code>measurement</code> がイケてない感じだったので再実装しました。</p>

<p><code>measurement</code> には <code>pxToDP</code> とか <code>dpToPX</code> とかの単位を変換するメソッドが用意されていますが、中身を見るとびっくりします。。</p>

<!-- more -->


<pre><code class="javascript alloy/measurement.js (alloy 1.3.1)">var dpi = Ti.Platform.displayCaps.dpi, density = Ti.Platform.displayCaps.density;

exports.dpToPX = function(val) {
    return val * ("high" === density ? 2 : 1);
};

exports.pxToDP = function(val) {
    return val / ("high" === density ? 2 : 1);
};

exports.pointPXToDP = function(pt) {
    return {
        x: exports.pxToDP(pt.x),
        y: exports.pxToDP(pt.y)
    };
};
</code></pre>

<p>これ、イケてなさすぎでしょ。。</p>

<p><code>Ti.UI.convertUnits</code> を使って次のように実装しなおしました。</p>

<pre><code class="javascript lib/unit.js">var currentUnit = Ti.App.Properties.getString('ti.ui.defaultunit') || 'system';
currentUnit = (currentUnit === 'system') ? (OS_IOS) ? Ti.UI.UNIT_DIP : Ti.UI.UNIT_PX : currentUnit;

function convert(val, fromUnit, toUnit) {
    return Ti.UI.convertUnits('' + parseInt(val) + fromUnit, toUnit);
}

module.exports = exports = {
    dpToPX: function(val) {
        return convert(val, Ti.UI.UNIT_DIP, Ti.UI.UNIT_PX);
    },
    pxToDP: function(val) {
        return convert(val, Ti.UI.UNIT_PX, Ti.UI.UNIT_DIP);
    },
    systemToPX: function(val) {
        if (currentUnit === Ti.UI.UNIT_DIP) {
            return this.dpToPX(val);
        } else if (currentUnit === Ti.UI.UNIT_PX) {
            return convert(val, Ti.UI.UNIT_PX, Ti.UI.UNIT_PX);
        } else {
            return convert(val, '', Ti.UI.UNIT_PX);
        }
    },
    systemToDP: function(val) {
        if (currentUnit === Ti.UI.UNIT_DIP) {
            return convert(val, Ti.UI.UNIT_DIP, Ti.UI.UNIT_DIP);
        } else if (currentUnit === Ti.UI.UNIT_PX) {
            return this.pxToDP(val);
        } else {
            return convert(val, '', Ti.UI.UNIT_DIP);
        }
    },
    convertToPX: function(valStr) {
      return Ti.UI.convertUnits(valStr, Ti.UI.UNIT_PX);
    },
    convertToDP: function(valStr) {
      return Ti.UI.convertUnits(valStr, Ti.UI.UNIT_DIP);
    },
    pointPXToDP: function(pt) {
        return {x: this.pxToDP(pt.x), y: this.pxToDP(pt.y)};
    }
};
</code></pre>

<p>使い方と結果はこちら。</p>

<pre><code class="javascript sample.js">var unit = require('unit');
console.log('----- iOS -----');
Ti.API.info('Ti.Platform.displayCaps.density: ' + Ti.Platform.displayCaps.density);
Ti.API.info('Ti.Platform.displayCaps.dpi: ' + Ti.Platform.displayCaps.dpi);
Ti.API.info('Ti.Platform.displayCaps.platformHeight: ' + Ti.Platform.displayCaps.platformHeight);
Ti.API.info('Ti.Platform.displayCaps.platformWidth: ' + Ti.Platform.displayCaps.platformWidth);
if (Ti.Platform.osname === 'android'){
  Ti.API.info('Ti.Platform.displayCaps.xdpi: ' + Ti.Platform.displayCaps.xdpi);
  Ti.API.info('Ti.Platform.displayCaps.ydpi: ' + Ti.Platform.displayCaps.ydpi);
  Ti.API.info('Ti.Platform.displayCaps.logicalDensityFactor: ' + Ti.Platform.displayCaps.logicalDensityFactor);
}
console.log('dpToPX: ' + unit.dpToPX(130));
console.log('pxToDP: ' + unit.pxToDP(130));
console.log('systemToPX: ' + unit.systemToPX(130));
console.log('systemToDP: ' + unit.systemToDP(130));
console.log('convertToPX: ' + unit.convertToPX('130dp'));
console.log('convertToDP: ' + unit.convertToDP('130dp'));
console.log('-----');
</code></pre>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line output'>[INFO] :   &mdash;&ndash; iPhone OS &mdash;&ndash;
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.density: high
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.dpi: 320
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.platformHeight: 568
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.platformWidth: 320
</span><span class='line output'>[INFO] :   dpToPX: 260
</span><span class='line output'>[INFO] :   pxToDP: 65
</span><span class='line output'>[INFO] :   systemToPX: 260
</span><span class='line output'>[INFO] :   systemToDP: 130
</span><span class='line output'>[INFO] :   convertToPX: 260
</span><span class='line output'>[INFO] :   convertToDP: 130
</span><span class='line output'>[INFO] :   &mdash;&ndash;</p>
</span><span class='line output'>
</span><span class='line output'><p>[INFO] :   &mdash;&ndash; android &mdash;&ndash;
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.density: xhigh
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.dpi: 320
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.platformHeight: 1280
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.platformWidth: 720
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.xdpi: 345.0566101074219
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.ydpi: 342.2315673828125
</span><span class='line output'>[INFO] :   Ti.Platform.displayCaps.logicalDensityFactor: 2
</span><span class='line output'>[INFO] :   dpToPX: 260
</span><span class='line output'>[INFO] :   pxToDP: 65
</span><span class='line output'>[INFO] :   systemToPX: 130
</span><span class='line output'>[INFO] :   systemToDP: 65
</span><span class='line output'>[INFO] :   convertToPX: 260
</span><span class='line output'>[INFO] :   convertToDP: 130
</span><span class='line output'>[INFO] :   &mdash;&ndash;</span></code></pre></td></tr></table></div></div>
        </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TitaniumのHTTPClientでRESTfulリクエストを送る]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful/"/>
    <updated>2014-02-17T10:24:58+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile</a> の <code>Titanium.Network.HTTPClient</code> を使って RESTful リクエストを送る場合の注意点です。</p>

<p>Titanium の <code>HTTPClient</code> で <code>DELETE</code> のときに <code>send</code> でパラメータを送ると <code>POST</code> リクエストになってしまいます。</p>

<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile Development Environment</a></p>

<ul>
<li>Titanium 3.2.1.GA</li>
</ul>


<!-- more -->


<p>Titanium の <code>HTTPClient</code> は <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> などのメソッドに対応していて、標準で RESTful リクエストを送れるようになっています。</p>

<h3>GET の例</h3>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010286b4a8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010286b318&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{}
127.0.0.1 - - [17/Feb/2014 10:29:45] "GET / HTTP/1.1" 200 - 0.0006
</code></pre>

<h3>POST の例</h3>

<p><code>client.open('GET', url)</code> を <code>client.open('POST', url)</code> に変えて実行します。</p>

<pre><code class="javascript">client.open('POST', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:43:06] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<h3>PUT と DELETE の例</h3>

<p>同じように <code>PUT</code> と <code>DELETE</code> でも試してみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:45:32] "PUT / HTTP/1.1" 200 - 0.0005
</code></pre>

<pre><code class="javascript">client.open('DELETE', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : DELETE"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:46:28] "DELETE / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>client.send</code> でパラメータを送信しなければ、<code>open</code> で渡したメソッドでリクエストが投げられています。</p>

<h2>HTTPClient でパラメータを渡して <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> してみる</h2>

<p>次は、パラメータを渡して試してみます。</p>

<p><code>GET</code> は <code>send</code> メソッドにパラメータを渡すのではなく URL にクエリを設定して送ります。</p>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url + '?name=hamasyou');
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/?name=hamasyou"
"QUERY_STRING : name=hamasyou"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001019451b8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x00000101945140&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:49:41] "GET /?name=hamasyou HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>GET</code> で送られています。次は <code>POST</code> で送ってみます。</p>

<pre><code class="javascript">client.open('POST', url);
client.send({name: 'hamasyou'});
</code></pre>

<p><code>POST</code> は <code>client.send</code> にパラメータを渡して送ります。<code>POST</code> のデフォルトの <code>Content-Type</code> は <code>application/x-www-form-urlencoded</code> になります。</p>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded; charset=utf-8"
"QUERY_STRING : "
...
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:52:10] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>POST</code> で <code>Content-Type: application/json</code> で送る場合は、<code>HTTPClient#setRequestHeader</code> で設定します。</p>

<pre><code class="javascript">client.open('POST', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:56:20] "POST / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>PUT</code> と <code>DELETE</code> も <code>send</code> でパラメータを送ってみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:57:49] "PUT / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>PUT</code> はうまくいきました。次は <code>DELETE</code> です。</p>

<pre><code class="javascript">client.open('DELETE', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:58:52] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p>なんと、<code>POST</code> リクエストになってしまいました。。<code>DELETE</code> メソッドだけ、パラメータを <code>body</code> 部分に含めると <code>POST</code> リクエストになってしまうみたいです。。</p>

<p>OAuth 対応の API 等で access_token をパラメータに含めてリクエストする様な API を呼び出すときは要注意です。</p>

<p>できるだけ、認証情報は HTTP Header を使うようにした方がいいのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Titanium]モジュールを使ったアプリで実機転送時にリンカエラーが発生する場合の対処]]></title>
    <link href="http://hamasyou.com/blog/2013/03/05/titanium/"/>
    <updated>2013-03-05T08:52:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/03/05/titanium</id>
    <content type="html"><![CDATA[<p>モジュールを作成して、デモアプリ等で利用する際に実機転送時に</p>

<pre><code>[ERROR] : ** BUILD FAILED **
[ERROR] : The following build commands failed:
[ERROR] :   Ld build/Debug-iphoneos/gpuimagedemo.app/gpuimagedemo normal armv7
[ERROR] : (1 failure)
</code></pre>

<p>のようなエラーが発生する場合がある。
これは、Titanium がビルド時に最適化で利用していない内部モジュールとのリンクを切ってしまうために起こる。</p>

<p>build ディレクトリの下の Xcode のプロジェクトを開くと</p>

<pre><code>Undefined symbols for architecture arvm7:
    ...
":_OBJC_CLASS_$_TiUIImageView":, referenced from:
    ...
</code></pre>

<p>のようにビルドエラーが発生している。</p>

<p>これを解決するには、モジュールで利用している内部クラスを、JavaScript 側のソースコードに現れるようにする。</p>

<p>例えば、今回の場合だと、TiUIImageView の参照先が見つからないとなっているので JavaScript のコードの方に</p>

<pre><code class="javascript">if (false) {
    Ti.UI.createImageView({
        image: 'demo.jpg'
    });
}
</code></pre>

<p>のようなコードを加えれば良い。バッドノウハウですね。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text2 で Titanium Mobile のコード補完を効かせる方法]]></title>
    <link href="http://hamasyou.com/blog/2013/01/29/sublime-text2-titanium-mobile/"/>
    <updated>2013-01-29T13:23:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/01/29/sublime-text2-titanium-mobile</id>
    <content type="html"><![CDATA[<p>Qiita にも書きました。 <a href="http://qiita.com/items/ef8c332710960e2730d6" rel="external nofollow">Qiita: http://qiita.com/items/ef8c332710960e2730d6</a></p>

<h3>1. Package Manager で SublimeCodeIntel をインストールする</h3>


<p>Sublime Text2 の PackageManager を使って SublimeCodeIntel をインストールします。</p>

<p><i class="fa fa-search"></i> <a href="http://ready-study-go.blogspot.jp/2011/09/sublime-text-2.html" rel="external nofollow">http://ready-study-go.blogspot.jp/2011/09/sublime-text-2.html</a></p>

<h3>2. jsca2.js を使って Titanium Mobile の API doc を JavaScript 化する。</h3>


<p><i class="fa fa-search"></i> <a href="https://github.com/navinpeiris/jsca2js" rel="external nofollow">jsca2js: https://github.com/navinpeiris/jsca2js</a></p>

<p>git clone で落としてきて</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>./titanium-mobile.py 3.0.0</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>のように、生成した API のバージョンを指定すればOK。</p>

<h4>Titanium 3.0.0 のコードをインストールする場合の注意</h4>


<p>titanium-mobile.py の中でバージョン毎に参照先の URL を変えるようにしていますが、3.0.0 の API Doc 参照先が間違っています。</p>

<p>なので、URL を修正してあげる必要があります。titanium-mobile.py を開き 23行目辺りにある URL を次のように書き換えます。</p>

<pre><code class="python titanium-mobile.py">if version.startswith('2.'):
  url = 'http://docs.appcelerator.com/titanium/data/' + version + '/api.json'
else:
  #url = 'http://developer.appcelerator.com/apidoc/mobile/' + version + '/api.json'
  url = 'http://docs.appcelerator.com/titanium/data/' + version + '/api.json'
</code></pre>

<h3>3. 生成された titanium-mobile-3.0.0.js を ~/.codeintel/extra にコピーする</h3>


<p>SublimeCodeIntel をインストールすると ~/.codeintel というフォルダが作られているはずです。</p>

<p>追加の補完用コードをまとめるために、extra フォルダを作ってそこに生成された titanium-mobile-3.0.0.js をコピーします。</p>

<h3>4. SublimeCodeIntel に extra フォルダのパスを通す</h3>


<p>~/.codeintel/config を開いて次のコードを追記します。</p>

<pre class="code"><code>{
  "JavaScript": {
    "javascriptExtraPaths": ["~/.codeintel/extra"]
  }
}</code></pre>


<p>これで、 SublimeCodeIntel が JavaScript ファイルで Titanium Mobile のコード補完を行うようになります。</p>

<h3>5. (オプション) CoffeeScript でもコード補完を効かせる</h3>


<p>SublimeCodeIntel が CoffeeScript のコード補完に対応していないので CoffeeScript のシンタックスを JavaScript に設定してやります。</p>

<p>Sublime Text2 の > Preferences > Package Settings > SublimeCodeIntel > Settings - User を開いて次の設定を追加します。</p>

<pre class="code"><code>{
  "codeintel_syntax_map":
  {
    "CoffeeScript": "JavaScript"
  }
}</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium Alloy でつくったアプリをリリースしました]]></title>
    <link href="http://hamasyou.com/blog/2013/01/22/titanium-alloy/"/>
    <updated>2013-01-22T11:22:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/01/22/titanium-alloy</id>
    <content type="html"><![CDATA[<p>Titanium Mobile プラットフォームの開発元である Appcelerator が公開している公式のフレームワーク <strong>Alloy</strong> を使って作ったアプリを公開しました。</p>

<p>アプリ紹介ページは下になります。
<a href="http://mountposition.co.jp/obento/" rel="external nofollow">Thankお弁当: http://mountposition.co.jp/obento/</a></p>

<p><img alt="phones.png" src="http://hamasyou.com/images/phones.png" width="324" height="367" class="mt-image-none" style="" /></p>

<p>Titanium Mobile は JavaScript を使ってスマホアプリを開発できるプラットフォームです。iPhone や Android 向けのアプリを手軽に開発することが出来ます。</p>

<p>Alloy はそんな Titanium Mobile での開発に規約と規律を導入した MVC フレームワークになります。Ruby On Rails に似てる感じです。</p>

<p>Alloy を使うといろいろいいことがありますが、それはまた別の記事で紹介します。</p>

<p>以上、アプリの宣伝でした！</p>
]]></content>
  </entry>
  
</feed>
