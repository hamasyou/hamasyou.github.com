<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: WebLogic | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/weblogic/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-13T01:22:29+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[技術メモ]]></title>
    <link href="http://hamasyou.com/blog/2008/06/19/memo/"/>
    <updated>2008-06-19T11:59:00+09:00</updated>
    <id>http://hamasyou.com/blog/2008/06/19/memo</id>
    <content type="html"><![CDATA[<p>技術メモ用のエントリ</p>

<p><a href="http://hamasyou.com/archives/000247" rel="external nofollow">技術者の宝石箱</a>の続きエントリ</p>

<!-- more -->




<h2>インデックス</h2>




<ul>
<li><a href="#DOM で複数選択可能なリストボックスを作成する（IE）" rel="external nofollow">DOM で複数選択可能なリストボックスを作成する（IE）</a> 2007/4/28追加</li>
<li><a href="#要求と要件の違い" rel="external nofollow">要求と要件の違い</a> 2007/5/22追加</li>
<li><a href="#Maven2のpom.xmlのXMLスキーマ" rel="external nofollow">Maven2のpom.xmlのXMLスキーマ</a> 2007/10/23追加</li>
<li><a href="#Excelでファイルの最終更新日を取得する" rel="external nofollow">Excelでファイルの最終更新日を取得する</a> 2007/10/24追加</li>
<li><a href="#Ruby on Rails2.0で、NoMethodError in AdminController#index" rel="external nofollow">Ruby on Rails2.0で、NoMethodError in AdminController#index</a> 2007/12/30追加</li>
<li><a href="#WebLogicでAPP-INFを使って共通Jarを配置するときは、ClassLoaderに注意する" rel="external nofollow">WebLogicでAPP-INFを使って共通Jarを配置するときは、ClassLoaderに注意する</a> 2008/5/27追加</li>
<li><a href="#WebLogicが発行するSession Cookieのパスはデフォルトで/（スラッシュ）" rel="external nofollow">WebLogicが発行するSession Cookieのパスはデフォルトで / （スラッシュ）</a> 2008/6/19追加</li>
<li><a href="#FFFTPでシンボリックリンクを削除する方法" rel="external nofollow">FFFTPでシンボリックリンクを削除する方法</a> 2008/6/24追加</li>
<li><a href="#Railsをやってて気になったこと" rel="external nofollow">Railsをやってて気になったこと</a> 2008/7/24追加</li>
<li><a href="#Commons HttpClient のマルチパートで日本語ファイル名が文字化けする" rel="external nofollow">Commons HttpClient のマルチパートで日本語ファイル名が文字化けする</a> 2008/8/14追加</li>
<li><a href="#JBoss Seamでログイン後にセッションIDを変更する" rel="external nofollow">JBoss Seamでログイン後にセッションIDを変更する</a> 2008/11/20追加</li>
</ul>




<h2>一覧</h2>




<h3 id="DOM で複数選択可能なリストボックスを作成する（IE）">DOM で複数選択可能なリストボックスを作成する（IE）</h3>


<p>Internet Explorer（IE）で DOM を使って複数選択可能なリストボックスを作成する方法です。</p>

<pre class="code"><code><span class="keyword">var</span> select = <span class="keyword">null</span>;
<span class="keyword">if</span> (navigator.appName.match(/Internet Explorer/)) {
    select = document.createElement(<span class="str">&quot;&lt;select multiple&gt;&quot;</span>);
} <span class="keyword">else</span> {
    select = document.createElement(<span class="str">&quot;select&quot;</span>);
    select.multiple = <span class="keyword">true</span>;
}
</code></pre>




<h3 id="要求と要件の違い">要求と要件の違い</h3>




<dl><dt>要求</dt>
<dd>お客さんのこんなことをしたい、こんなことができるといいなという望み</dd>
<dt>要件</dt>
<dd>要求をシステム化「する」と決めたもの</dd>
</dl>


<p>お客さんは、自分がどんなことをしたいのかとか、どんなものが欲しいのかということをうまく説明できないことが多い。だから、要求は「開発する」（掘り起こす）もの。</p>

<p>うまく要求が掘り起こせたら、今度はシステム開発者がじゃあどういう仕様でどういうシステムを作ろうかと考える。だから、要件は「定義する」もの。</p>

<h3 id="Maven2のpom.xmlのXMLスキーマ">Maven2のpom.xmlのXMLスキーマ</h3>


<p>Maven2 の pom.xml の XMLスキーマおぼえがき</p>

<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> 
<span class="tag">&lt;project <span class="attr">xmlns=</span><span class="value">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>  
         <span class="attr">xmlns:xsi=</span><span class="value">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  
         <span class="attr">xsi:schemaLocation=</span><span class="value">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span> 
<span class="tag">&lt;/project&gt;</span>
</code></pre>




<h3 id="Excelでファイルの最終更新日を取得する">Excelでファイルの最終更新日を取得する</h3>


<p>Excel でファイルの最終更新日を自動で再計算する方法。</p>

<h4>参考</h4>


<p><a href="http://www.relief.jp/itnote/archives/000271.php" rel="external nofollow">インストラクターのネタ帳：ファイルの最終更新日時を取得したい−ユーザー定義関数</a></p>

<h3 id="Ruby on Rails2.0で、NoMethodError in AdminController#index">Ruby on Rails2.0で、NoMethodError in AdminController#index</h3>


<p>書籍『<a href="http://www.amazon.co.jp/gp/product/4274066401?ie=UTF8&tag=sorehabooks-22&linkCode=xm2&camp=247&creativeASIN=4274066401" rel="external nofollow">RailsによるアジャイルWebアプリケーション開発</a>』を Rails2.0 で作業していくと、<strong>scaffold :product</strong> のところで次のようなエラーが発生する。</p>

<pre>NoMethodError in AdminController#index
undefined method `scaffold' for AdminController:Class</pre>


<p>これは、Rails2.0 からは各種ライブラリ類がプラグインとして切り出されたためだそうだ。ということで、必要なプラグインを入れるとよい。</p>

<p>まずは、scaffolding プラグインから。</p>

<pre class="console">\workspace\depot><kbd>ruby script/plugin install scaffolding</kbd>
+ ./MIT-LICENSE
+ ./README
+ ./Rakefile
+ ./init.rb
+ ./lib/scaffolding.rb
+ ./lib/templates/edit.erb
+ ./lib/templates/layout.erb
+ ./lib/templates/list.erb
+ ./lib/templates/new.erb
+ ./lib/templates/show.erb
+ ./test/scaffolding_test.rb
</pre>


<p>つぎに、paginate というプラグインを入れなければならない。scaffold だけ入れた状態だと次のようなエラーが発生する。</p>

<pre>NoMethodError (undefined method `paginate' for #<EntriesController:0x4829610>):</pre>


<p>ということで、paginate プラグインをインストールする。</p>

<pre class="console">\workspace\depot><kbd>ruby script/plugin install http://tools.assembla.com/svn/breakout/breakout/vendor/plugins/classic_pagination/</kbd>
+ ./CHANGELOG
+ ./README
+ ./Rakefile
+ ./init.rb
+ ./install.rb
+ ./lib/pagination.rb
+ ./lib/pagination_helper.rb
+ ./test/fixtures/companies.yml
+ ./test/fixtures/company.rb
+ ./test/fixtures/developer.rb
+ ./test/fixtures/developers.yml
+ ./test/fixtures/developers_projects.yml
+ ./test/fixtures/project.rb
+ ./test/fixtures/projects.yml
+ ./test/fixtures/replies.yml
+ ./test/fixtures/reply.rb
+ ./test/fixtures/schema.sql
+ ./test/fixtures/topic.rb
+ ./test/fixtures/topics.yml
+ ./test/helper.rb
+ ./test/pagination_helper_test.rb
+ ./test/pagination_test.rb
 
 
Pagination
==========
 
To install:
 
  script/plugin install svn://errtheblog.com/svn/plugins/classic_pagination
 
This code was extracted from Rails trunk after the release 1.2.3.
WARNING: this code is dead. It is unmaintained, untested and full of cruft.
 
There is a much better pagination plugin called will_paginate.
Install it like this and glance through the README:
 
  script/plugin install svn://errtheblog.com/svn/plugins/will_paginate
 
It doesn't have the same API, but is in fact much nicer. You can
have both plugins installed until you change your controller/view code that
handles pagination. Then, simply uninstall classic_pagination.
</pre>


<p>インストールすると、will_paginate を使ったほうが良いという警告がでる。なので、will_paginate も一緒にいれる。</p>

<pre class="console">\workspace\depot><kbd>ruby script/plugin install http://tools.assembla.com/svn/breakout/breakout/vendor/plugins/will_paginate/</kbd>
+ ./README
+ ./Rakefile
+ ./init.rb
+ ./lib/will_paginate/collection.rb
+ ./lib/will_paginate/finder.rb
+ ./lib/will_paginate/view_helpers.rb
+ ./test/boot.rb
+ ./test/console
+ ./test/finder_test.rb
+ ./test/fixtures/admin.rb
+ ./test/fixtures/companies.yml
+ ./test/fixtures/company.rb
+ ./test/fixtures/developer.rb
+ ./test/fixtures/developers_projects.yml
+ ./test/fixtures/project.rb
+ ./test/fixtures/projects.yml
+ ./test/fixtures/replies.yml
+ ./test/fixtures/reply.rb
+ ./test/fixtures/schema.sql
+ ./test/fixtures/topic.rb
+ ./test/fixtures/topics.yml
+ ./test/fixtures/user.rb
+ ./test/fixtures/users.yml
+ ./test/helper.rb
+ ./test/lib/activerecord_test_connector.rb
+ ./test/lib/load_fixtures.rb
+ ./test/pagination_test.rb
</pre>


<p>これで、正常に動くようになる。</p>

<h3 id="WebLogicでAPP-INFを使って共通Jarを配置するときは、ClassLoaderに注意する">WebLogicでAPP-INFを使って共通Jarを配置するときは、ClassLoaderに注意する</h3>


<p>WebLogic8.1 から EAR 直下の APP-INF/lib、APP-INF/classes に各モジュール（WAR）から利用される共通ライブラリ（JAR）やクラスを配置できます。これは WebLogic の独自仕様のようですが。</p>

<p>このとき、APP-INF 以下に置いたライブラリやクラスは各モジュール（WAR）とは別のクラスローダでロードされます。</p>

<p><section></p>

<h4>参考</h4>


<p><a href="http://www-06.ibm.com/jp/software/websphere/developer/j2ee/strategy/" rel="external nofollow">IBM: クラスローダーとJ2EEパッケージング戦略を理解する</a></p>

<p></section></p>

<pre>EAR ルート
├ APP-INF　　　　← EAR クラスローダ（親）
│  ├ classes
│　└ lib
├ WAR1　　　　　 ← WAR1 クラスローダ（子）
│　└ WEB-INF
└ WAR2　　　　　 ← WAR2 クラスローダ（子）
└ WEB-INF
</pre>


<p>親のクラスローダで読み込んだクラスは子のクラスローダからは見つけることができますが、子で読み込んだクラスは親のクラスローダからは見つけることができません。</p>

<p>EAR クラスローダで読み込まれたクラスは各モジュールで共有されるため、static 領域のインスタンスや値も共有されます。</p>

<p>また、親と子のどちらで見つけたクラスを先に読み込むかによってシングルトンクラスの動作に影響が出たりすることがあります。</p>

<h4>参考</h4>


<p><a href="http://www-06.ibm.com/jp/software/websphere/developer/j2ee/strategy/2.html" rel="external nofollow">IBM: クラスローダーを理解する - シングルトンがシングルトンでなくなる日</a></p>

<h3 id="WebLogicが発行するSession Cookieのパスはデフォルトで/（スラッシュ）">WebLogicが発行するSession Cookieのパスはデフォルトで / （スラッシュ）</h3>


<p>WebLogic のデフォルト設定でのセッション Cookieのルールは以下の通り。</p>

<table>
<tr><th>要素名</th><th>デフォルト値</th><th>説明</th></tr>
<tr><th>cookie-name</th><td>JSESSIONID</td><td>セッションIDの長さは52文字</td></tr>
<tr><th>cookie-path</th><td>null</td><td>デフォルトは / (スラッシュ)<a href="#※1" rel="external nofollow">※1</a>。デフォルト値では、ブラウザは、<em>WebLogic Server で指定されているすべての URL にクッキーを送信する</em>。</td></tr>
<tr><th>cookie-domain</th><td>null</td><td>デフォルトは、クッキーを発行した<em>サーバのドメイン</em><a href="#※2" rel="external nofollow">※2</a></td></tr>
<tr><th>cookie-secure</th><td>false</td><td>Cookie を https 接続のときのみブラウザから送り出すか。</td></tr>
<tr><th>cookie-max-age-secs</th><td>-1</td><td>無期限。ブラウザを閉じると削除される。</td></tr>
<tr><th>timeout-secs</th><td>3600</td><td>セッションタイムアウト時間。デフォルトで3600秒。</td></tr>
</table>


<p>同一ホスト名でいくつものアプリケーションを管理している場合、WebLogic はデフォルトで、cookie-path を / にしてしまうため、セッションCookieの上書き（セッションIDの上書き）がされることがあります。きちんと path 属性をコンテキストパス、domain 属性を ホスト名に設定しましょう。はまりそうなので注意！</p>

<p><section></p>

<h4>参考</h4>


<p><a href="http://edocs.beasys.co.jp/e-docs/wls/docs92/webapp/weblogic_xml.html#wp1071982" rel="external nofollow">BEA：weblogic.xml デプロイメント記述子の要素</a></p>

<p></section></p>

<p><a name="※1"></a>
※1 Cookieパスは /（スラッシュ）：Cookie の仕様では、Cookie を送出するリクエストヘッダに含まれている要求したドキュメントのパスと同じになります。
<a name="※2"></a>
※2 サーバのドメイン：ホスト名ではないことに注意。Cookie の仕様では、domain を指定しない場合はサーバのホスト名になります。</p>

<h3 id="FFFTPでシンボリックリンクを削除する方法">FFFTPでシンボリックリンクを削除する方法</h3>


<p>FFFTP でシンボリックリンクを削除する方法。</p>

<pre>[コマンド(C)] -> [任意のコマンド(C)...]</pre>


<p>を選択して、</p>

<pre>DELE ファイル名</pre>


<p>でOK。シンボリックリンクをプログラムから作っちゃったけど、削除できない〜ってなったのでメモ。サーバアカウントが発行されていて、コンソールにつなげる場合は、コマンドラインから削除すればOK。ロリポップは、FTP しかあいてなかったのであせった。</p>

<h3 id="Railsをやってて気になったこと">Railsをやってて気になったこと</h3>




<h4>Rest ちっくな URL で更新画面みたいなのの定義の仕方</h4>


<p>/comment/new/preview 見たいな感じで定義する。</p>

<pre class="code"><code>routes.rb map.resources :comment, :new =&gt; {:preview =&gt; :post}
</code></pre>




<h4>Rest ちっくなアプリで Ajax によるサーバサイドバリデーションするURL</h4>


<p>/comment/new/validate 見たいな感じでいいのかな。</p>

<pre class="code"><code>routes.rb map.resources :comment, :new =&gt; {:validate =&gt; :post}
</code></pre>




<h4>確認画面を挟む登録で、ファイルアップロードがある場合</h4>


<p>attachement_fu を使ってうまくやる方法がわからなかったので、仕方ないから自分で一時ファイルの仕組みを作った。</p>

<p>※ そのうち追加するかも</p>

<h3 id="Commons HttpClient のマルチパートで日本語ファイル名が文字化けする">Commons HttpClient のマルチパートで日本語ファイル名が文字化けする</h3>


<p>Commons HttpClient を使って、日本語ファイル名のファイルをマルチパートでアップロードすると、ファイル名が文字化けします。
これ、ソースを追っていくと驚愕の事実が・・・。</p>

<p><section></p>

<h4>org.apache.commons.httpclient.methods.multipart.FilePart#sendDispositionHeader</h4>




<pre class="code"><code><span class="rem">/**
 * Write the disposition header to the output stream
 * @param out The output stream
 * @throws IOException If an IO problem occurs
 * @see Part#sendDispositionHeader(OutputStream)
 */</span>
<span class="keyword">protected</span> <span class="keyword">void</span> sendDispositionHeader(OutputStream out) 
    <span class="keyword">throws</span> IOException {
  LOG.trace(<span class="str">&quot;enter sendDispositionHeader(OutputStream out)&quot;</span>);
  <span class="keyword">super</span>.sendDispositionHeader(out);
  String filename = <span class="keyword">this</span>.source.getFileName();
  <span class="keyword">if</span> (filename != null) {
    out.write(FILE_NAME_BYTES);
    out.write(QUOTE_BYTES);
    out.write(EncodingUtil.getAsciiBytes(filename));
    out.write(QUOTE_BYTES);
  }
}
</code></pre>


<p></section></p>

<p>ファイル名のエンコーディングを ASCII でやってる・・・。 Orz&hellip;</p>

<p>日本語ファイル名の文字化けを回避する方法ですが、私は FilePart を継承して sendDispositionHeader をオーバーライドして、Encoding を自分で指定できるようにしました。他にも、URLEncoding して、サーバ側で Decode するという方法もあります。</p>

<h4>参考</h4>


<p><a href="http://d.hatena.ne.jp/w650/20080324/p1" rel="external nofollow">HttpClientでの日本語ファイルのアップロード</a></p>

<h3 id="JBoss Seamでログイン後にセッションIDを変更する">JBoss Seamでログイン後にセッションIDを変更する</h3>


<p>JBoss で<code>Session#invalidate()</code> した後に、<code>HttpServletRequest#getSession(true)</code> しても、セッションIDが新しくならい問題の解決方法。</p>

<p>JBoss サーバの $JBOSS_SERVER/deploy/jboss-web.deployer/server.xml の emptySessionPath 箇所を false に変更する。</p>

<pre class="code"><code><span class="tag">&lt;Connector <span class="attr">port=</span><span class="value">&quot;8080&quot;</span> <span class="attr">address=</span><span class="value">&quot;${jboss.bind.address}&quot;</span>    
         <span class="attr">maxThreads=</span><span class="value">&quot;250&quot;</span> <span class="attr">maxHttpHeaderSize=</span><span class="value">&quot;8192&quot;</span>
         <span class="attr">emptySessionPath=</span><span class="value">&quot;false&quot;</span> <span class="attr">protocol=</span><span class="value">&quot;HTTP/1.1&quot;</span>
         <span class="attr">enableLookups=</span><span class="value">&quot;false&quot;</span> <span class="attr">redirectPort=</span><span class="value">&quot;8443&quot;</span> <span class="attr">acceptCount=</span><span class="value">&quot;100&quot;</span>
         <span class="attr">connectionTimeout=</span><span class="value">&quot;20000&quot;</span> <span class="attr">disableUploadTimeout=</span><span class="value">&quot;true&quot;</span> /&gt;</span>
</code></pre>


<p>emptySessionPath は、セッションCookie のパスを &amp;/&amp; にする設定のようで、ポータルなどの別コンテキスト間でセッションを継続したい場合などに使う設定のようです。これが false でないと、JBoss で <code>Session#invalidate</code> しても、セッションIDが新しくならないっぽいです。</p>

<p>この値を設定したところ、JBoss Seam で <code>Seam#invalidateSession</code> を呼び出した後、新しくセッションIDが発行されるようになりました。</p>

<p>ということで、JBoss Seamのログイン後処理（PostLoginEvent）で一度セッションを新しくすると良いかもです。<em>ただし、セッションを新しくした後、ログイン状態を保持する方法がわかりません。。。</em>中身入れ替えるとかすればいいのかもですが、<code>Seam#invalidateSession</code> は、Seam の処理を抜けるときにセッションを破棄するので、その場では新しいセッションIDがとれません＞＜；
やり方、確認中です。誰かわかる人教えてください。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebLogic でカスタムキーストアを使って SSL 通信を行うおぼえがき]]></title>
    <link href="http://hamasyou.com/blog/2007/10/27/weblogic-ssl/"/>
    <updated>2007-10-27T23:03:00+09:00</updated>
    <id>http://hamasyou.com/blog/2007/10/27/weblogic-ssl</id>
    <content type="html"><![CDATA[<p>WebLogic9.2J でカスタムキーストアを使ってSSL通信を行うおぼえがきです。</p>

<p>使用した WebLogic は、下記のサイトからダウンロードしました。</p>

<p><a href="http://www.beasys.co.jp/evaluation/index.html" rel="external nofollow">日本BEAシステムズ株式会社 Evaluation Center</a></p>

<p><section></p>

<h4>環境</h4>


<p>使用した環境は以下のとおりです。</p>

<ul>
<li>Red Hat</li>
<li>WebLogic Server 9.2J & MP</li>
<li>OpenSSL</li>
</ul>


<p></section></p>

<!-- more -->




<h2>WebLogic と キーストア</h2>




<h3>キーストアとは</h3>


<p>キーストアとは、暗号化に必要な鍵や証明書をエントリとして保管する箱です。それぞれのエントリをエイリアスをつけて管理します。キーストアを操作するツールに、Java の keytool があります。</p>

<p><a href="http://sdc.sun.co.jp/java/docs/j2se/1.4/ja/docs/ja/tooldocs/solaris/keytool.html" rel="external nofollow">keytool - 鍵と証明書の管理ツール</a></p>

<h3>WebLogic のキーストア</h3>


<p>WebLogic は ID キーストアと信頼キーストアの2つのキーストアをセキュリティのために使い分けています。</p>

<p>ID キーストアは、主に秘密鍵を格納するのに使います。信頼キーストアはサーバ証明書を格納するのに使います。</p>

<p>秘密鍵は公開鍵暗号を行うサーバにとってとても重要なものになります。逆にサーバ証明書は複数のユーザで共有することができます。そのため、ID キーストアは root 権限での読み取りのみ、信頼キーストアは他からアクセス可能なパーミッションというような使い分けを行います。</p>

<p>WebLogic はデフォルトで「デモ ID とデモ信頼」という2つのキーストアを用意しています。</p>

<p>この2つのキーストアは <code>$WL_HOME/server/lib</code> の下にあります。</p>

<dl>
<dt>デモ ID キーストア</dt>
<dd>DemoIdentity.jks</dd>
<dt>デモ信頼キーストア</dt>
<dd>DemoTrust.jks</dd>
</dl>




<p class="option">デモ用のキーストアのパスワードはそれぞれ「<strong>DemoIdentityKeyStorePassPhrase</strong>」「<strong>DemoTrustKeyStorePassPhrase</strong>」に設定されています。</p>


<p>それぞれ、次のような秘密鍵エントリと証明書が入っています。</p>

<pre class="console">[weblogic@localhost]# > <kbd>keytool -list -keystore DemoIdentity.jks -storepass DemoIdentityKeyStorePassPhrase</kbd>
 
キーストアのタイプ: jks
キーストアのプロバイダ: SUN
 
キーストアには 1 エントリが含まれます。
 
demoidentity, 2007/10/27, keyEntry,
証明書のフィンガープリント (MD5): 46:EA:6B:F9:D5:5D:CC:36:78:B3:E0:C1:41:30:CC:9E
</pre>




<pre class="console">[weblogic@localhost]# > <kbd>keytool -list -keystore DemoTrust.jks -storepass DemoTrustKeyStorePassPhrase</kbd>
 
キーストアのタイプ: jks
キーストアのプロバイダ: SUN
 
キーストアには 4 エントリが含まれます。
 
certgenca, 2002/03/23, trustedCertEntry,
証明書のフィンガープリント (MD5): 8E:AB:55:50:A4:BC:06:F3:FE:C6:A9:72:1F:4F:D3:89
wlsdemocanew2, 2003/01/25, trustedCertEntry,
証明書のフィンガープリント (MD5): 5B:10:D5:3C:C8:53:ED:75:43:58:BF:D5:E5:96:1A:CF
wlsdemocanew1, 2003/01/25, trustedCertEntry,
証明書のフィンガープリント (MD5): A1:17:A1:73:9B:70:21:B9:72:85:4D:83:01:69:C8:37
wlscertgencab, 2003/01/25, trustedCertEntry,
証明書のフィンガープリント (MD5): A2:18:4C:E0:1C:AB:82:A7:65:86:86:03:D0:B3:D8:FE
</pre>




<h3>カスタムキーストアとサーバ証明書</h3>


<p>WebLogic サーバを一般公開しSSL通信を行う場合、デモ証明書では不十分です。きちんとした CA 局（認証機関）が発行したサーバ証明書を使う必要があります。</p>

<p>そういうときには、カスタムキーストアを作成し、信頼できる CA 局が発行したサーバ証明書を保存し、利用する必要があります。</p>

<dl>
<dt class="info">オレオレ証明書</dt>
<dd><p>keytool でキーストアを作成すると秘密鍵と公開鍵のペアと公開鍵を自己署名証明書でサインした証明書が作成されます。いわゆるオレオレ証明書です。</p>

<p>オレオレ証明書では、ユーザにサーバを信頼してもらうことはできません。そのため、公開鍵を信頼されている CA 局の証明書でサインしてもらいます。</p>

<p>ブラウザにはあらかじめ信頼されている CA 局の証明書がインストールされています。ブラウザにインストールされていない CA 局の証明書でサインされているサーバの公開鍵は、警告が表示されますが、CA 局の証明書をブラウザに手動でインストールすれば警告はでなくなります。</p></dd>
</dl>




<h2>カスタムキーストアをつくる</h2>


<p>今回はオレオレ CA 局に OpenSSL で作成したものを使います。</p>

<h3>キーストアを作成する</h3>


<p>keytool を使ってキーストアを作成します。</p>

<pre class="console">[weblogic@localhost]# > <kbd>keytool -genkey -alias myserver -keyalg RSA -keystore myKeystore.jks</kbd>
キーストアのパスワードを入力してください:  <kbd>weblogic</kbd>
姓名を入力してください。
   [Unknown]:  <kbd>myserver</kbd>
組織単位名を入力してください。
   [Unknown]:  <kbd>hamasyou</kbd>
組織名を入力してください。
   [Unknown]:  <kbd>hamasyou</kbd>
都市名または地域名を入力してください。
   [Unknown]:  <kbd>tokyo</kbd>
州名または地方名を入力してください。
   [Unknown]:  <kbd>tokyo</kbd>
この単位に該当する 2 文字の国番号を入力してください。
   [Unknown]:  <kbd>jp</kbd>
CN=myserver, OU=hamasyou, O=hamasyou, L=tokyo, ST=tokyo, C=jp でよろしいですか? 
   [no]:  <kbd>yes</kbd>
 
&lt;myserver&gt; の鍵パスワードを入力してください。
        (キーストアのパスワードと同じ場合は RETURN を押してください): <kbd>[Enter]</kbd>
 
[weblogic@localhost]# > <kbd>ls</kbd>
myKeystore.jks   
</pre>




<dl>
<dt class="notice">姓名の入力に注意</dt>
<dd><p>「姓名」のところには、サーバのホスト名を入力します。今回は myserver とつけました。この場合、クライアント（ブラウザ）からは https://myserver/ のようにアクセスします。</p>

<p>「姓名」で設定した値と、ホスト名が違うと、ブラウザには次のような警告が表示されます。</p>

<img src="http://hamasyou.com/images/WebLogicSSL/warn_ssl_hostname.gif" alt="SSL 証明書のホスト名が違う" />

<p>ホスト名ごとにサーバ証明書は作る必要があるので注意が必要です。</p></dd>
</dl>




<dl>
<dt>-keysotre</dt>
<dd><p>指定されたキーストアが存在しない場合は新たにキーストアが作成されます。</p></dd>
<dt>-alias</dt>
<dd><p>このキーストアに作成される秘密鍵と公開鍵のペアに名前（エイリアス）をつけます。キーのペアはこのエイリアスを用いてアクセスされます。</p></dd>
<dt>-keyalg</dt>
<dd><p>暗号化アルゴリズムを指定します。指定しない場合は <strong>DSA</strong> になります。<em>WebLogic Server 9.2J の試用版では DSA アルゴリズムはサポートされていないので、明示的に <strong>RSA</strong> を指定します。</em></p>

<p><a href="http://www.hi-sv.com/e-docs/wls/docs92/client/security.html#wp1077561" rel="external nofollow">WebLogic ドキュメント - SSL を使用するクライアントの開発</a></p></dd>
</dl>




<h3>サーバ証明書発行要求を作成する</h3>


<p>キーストアを作っただけだと、自己署名によるサーバ証明書しかありません。CA 局にサーバ証明書を作ってもらうために、サーバ証明書発行要求をつくります。</p>

<pre class="console">[weblogic@localhost]# > <kbd>keytool -certreq -alias myserver -keystore myKeystore.jks -file myserver_certreq.csr</kbd>
キーストアのパスワードを入力してください:  <kbd>weblogic</kbd>
 
[weblogic@localhost]# > <kbd>ls</kbd>
myKeystore.jks  myserver_certreq.csr
</pre>


<p>ここで作成したサーバ証明書発行要求は、CA 局がサーバ証明書をつくる元になります。</p>

<h3>オレオレ CA 局を作成する</h3>


<p>OpenSSL の CA 作成スクリプトを CA 局を作成します。自分の環境では openssl の CA 作成スクリプトは <code>/usr/share/ssl/misc</code> にありました。</p>

<p>これを、適当なディレクトリにコピーして利用します。</p>

<pre class="console">[weblogic@localhost]# > <kbd>./CA -newca</kbd>
 
CA certificate filename (or enter to create) <kbd>[Enter]</kbd>
 
Making CA certificate ...
Generating a 1024 bit RSA private key
..........++++++
...........................++++++
writing new private key to './demoCA/private/./cakey.pem'
Enter PEM pass phrase: <kbd>weblogic</kbd>
Verifying - Enter PEM pass phrase: <kbd>weblogic</kbd>
You are about to be asked to enter information that will be incorporated 
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
Country Name (2 letter code) [GB]:<kbd>jp</kbd>
State or Province Name (full name) [Berkshire]:<kbd>tokyo</kbd>
Locality Name (eg, city) [Newbury]:<kbd>tokyo</kbd>
Organization Name (eg, company) [My Company Ltd]:<kbd>hamasyou</kbd>
Organizational Unit Name (eg, section) []:<kbd>hamasyou</kbd>
Common Name (eg, your name or your server's hostname) []:<kbd>oreoreca</kbd>
Email Address []:<kbd>xxxxxx@hamasyou.com</kbd>
</pre>




<dl>
<dt class="warn">Organization Name と 組織名に注意</dt>
<dd><p>CA の「Organization Name」とサーバの「組織名」（keytool -genkey で指定したもの）が違うと、エラーが発生します。</p>

<pre class="console">[weblogic@localhost]# > <kbd>openssl ca -keyfile demoCA/private/cakey.pem -cert demoCA/cacert.pem -in myserver_certreq.csr -out myserver_cert.csr</kbd>
Using configuration from /usr/share/ssl/openssl.cnf
Enter pass phrase for demoCA/private/cakey.pem:
Check that the request matches the signature
Signature ok
The organizationName field needed to be the same in the
CA certificate (hamasyou) and the request (xxxxx)
</pre></dd>
</dl>


<p>CA スクリプトを実行したディレクトリの配下に次のようなディレクトリが作成されているはずです。</p>

<pre class="console">[weblogic@localhost]# > <kbd>tree demoCA</kbd>
demoCA/
    |-- cacert.pem
    |-- certs
    |-- crl
    |-- index.txt
    |-- newcerts
    |-- private
    |   `-- cakey.pem
    `-- serial
</pre>




<dl>
<dt>demoCA/cacert.pem</dt>
<dd><p>このファイルが CA 局のサーバ証明書です。今回はオレオレCA 局なので、このサーバ証明書もキーストアに保存しなければなりません。</p></dd>
<dt>demoCA/private/cakey.pem</dt>
<dd><p>CA 局の秘密鍵です。この CA 局からサーバ証明書を発行してもらうときに使います。</p></dd>
</dl>




<h3>オレオレ CA 局にサーバ証明書を発行してもらう</h3>


<p>今作った CA 局のサーバ証明書を使って、サーバ証明書を発行します。</p>

<pre class="console">[weblogic@localhost]# > <kbd>openssl ca -keyfile demoCA/private/cakey.pem -cert demoCA/cacert.pem -in myserver_certreq.csr -out myserver_cert.csr</kbd>
 
Using configuration from /usr/share/ssl/openssl.cnf
Enter pass phrase for demoCA/private/cakey.pem: weblogic
Check that the request matches the signature
Signature ok
Certificate Details:
        Serial Number: 1 (0x1)
        Validity
            Not Before: Oct 27 12:11:19 2007 GMT
            Not After : Oct 26 12:11:19 2008 GMT
        Subject:
            countryName               = jp
            stateOrProvinceName       = tokyo
            organizationName          = hamasyou
            organizationalUnitName    = hamasyou
            commonName                = myserver
        X509v3 extensions:
            X509v3 Basic Constraints:
            CA:FALSE
            Netscape Comment:
            OpenSSL Generated Certificate
            X509v3 Subject Key Identifier:
            16:2F:BB:44:06:C5:A1:20:8F:D1:70:0D:70:6B:07:54:D2:13:6B:9C
            X509v3 Authority Key Identifier:
            keyid:BE:04:55:2E:63:2E:37:FC:94:1B:D6:9D:09:96:78:7A:B1:BF:A9:F6
            DirName:/C=jp/ST=tokyo/L=tokyo/O=hamasyou/OU=hamasyou
/CN=oreoreca/emailAddress=xxxxx@hamasyou.com
            serial:00
 
Certificate is to be certified until Oct 26 12:11:19 2008 GMT (365 days)
Sign the certificate? [y/n]:<kbd>y</kbd>
 
 
1 out of 1 certificate requests certified, commit? [y/n]<kbd>y</kbd>
Write out database with 1 new entries
Data Base Updated
 
[weblogic@localhost]# > <kbd>ls -F</kbd>
CA*  demoCA/  myKeystore.jks  myserver_cert.csr  myserver_certreq.csr 
</pre>


<p>作成されたサーバ証明書を見てみると、証明データ以外にヘッダーがついています。キーストアに保存する際にはヘッダー部は不要なので削除します。</p>

<p>「<code>&mdash;&ndash;BEGIN CERTIFICATE&mdash;&ndash;</code>」から「<code>&mdash;&ndash;END CERTIFICATE&mdash;&ndash;</code>」までを残して、他は削除します。</p>

<h4>編集前</h4>




<pre class="console">[weblogic@localhost]# > <kbd>cat myserver_cert.csr</kbd>
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1 (0x1)
        Signature Algorithm: md5WithRSAEncryption
        Issuer: C=jp, ST=tokyo, L=tokyo, O=hamasyou, OU=hamasyou, CN=oreoreca/emailAddress=xxxxx@hamasyou.com
        Validity
            Not Before: Oct 27 12:11:19 2007 GMT
            Not After : Oct 26 12:11:19 2008 GMT
        Subject: C=jp, ST=tokyo, O=hamasyou, OU=hamasyou, CN=myserver
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (1024 bit)
                Modulus (1024 bit):
                    00:9d:61:fa:c1:92:ab:74:a5:cd:ec:bc:01:55:eb:
                    6c:9d:67:92:b6:cf:1c:de:f0:65:ba:82:7f:8b:a4:
                    9d:d6:0a:17:41:69:7b:86:41:3e:aa:8b:47:80:0e:
                    8c:0a:89:30:04:75:d1:34:46:6d:21:97:46:db:0b:
                    11:2c:2f:15:b5:05:48:d0:a9:db:1f:1b:7a:40:6b:
                    4f:44:89:f7:ea:3b:ae:c8:3f:6b:1c:c2:fa:9d:74:
                    16:32:f8:25:95:b4:24:76:18:52:97:8b:0e:ba:77:
                    a9:34:51:ae:89:4a:2e:1c:37:a8:78:73:8c:03:25:
                    4f:66:77:55:d5:6f:91:bd:a5
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints:
            CA:FALSE
            Netscape Comment:
            OpenSSL Generated Certificate
            X509v3 Subject Key Identifier:
            16:2F:BB:44:06:C5:A1:20:8F:D1:70:0D:70:6B:07:54:D2:13:6B:9C
            X509v3 Authority Key Identifier:
            keyid:BE:04:55:2E:63:2E:37:FC:94:1B:D6:9D:09:96:78:7A:B1:BF:A9:F6
            DirName:/C=jp/ST=tokyo/L=tokyo/O=hamasyou/OU=hamasyou
/CN=oreoreca/emailAddress=xxxxx@hamasyou.com
            serial:00
 
    Signature Algorithm: md5WithRSAEncryption
        42:fb:ee:73:5b:03:e5:60:95:b6:eb:72:ac:bd:6a:c1:37:17:
        8b:2f:e6:6b:d1:28:e8:73:2d:d6:1b:d9:cd:cb:34:93:5d:4c:
        dd:4d:5a:b3:89:47:9e:dc:81:ca:d4:d0:e1:79:68:2a:5a:d6:
        fe:30:25:56:e8:3c:b2:18:fc:65:35:e4:19:0c:94:67:36:59:
        66:f4:ae:28:6b:66:7d:5a:be:50:0f:8a:cb:a3:72:af:3b:c7:
        v04:52:5e:c7:29:b0:79:3b:a6:4d:22:f7:5d:73:25:26:53:46:
        94:b2:e6:d0:50:5f:37:00:f0:5b:fc:7b:3c:20:76:f7:37:c5:
        f6:a4
-----BEGIN CERTIFICATE-----
MIIDbTCCAtagAwIBAgIBATANBgkqhkiG9w0BAQQFADCBiTELMAkGA1UEBhMCanAx
DjAMBgNVBAgTBXRva3lvMQ4wDAYDVQQHEwV0b2t5bzERMA8GA1UEChMIaGFtYXN5
b3UxETAPBgNVBAsTCGhhbWFzeW91MREwDwYDVQQDEwhvcmVvcmVjYTEhMB8GCSqG
SIb3DQEJARYSeHh4eHhAaGFtYXN5b3UuY29tMB4XDTA3MTAyNzEyMTExOVoXDTA4
MTAyNjEyMTExOVowVjELMAkGA1UEBhMCanAxDjAMBgNVBAgTBXRva3lvMREwDwYD
VQQKEwhoYW1hc3lvdTERMA8GA1UECxMIaGFtYXN5b3UxETAPBgNVBAMTCG15c2Vy
dmVyMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCdYfrBkqt0pc3svAFV62yd
Z5K2zxze8GW6gn+LpJ3WChdBaXuGQT6qi0eADowKiTAEddE0Rm0hl0bbCxEsLxW1
BUjQqdsfG3pAa09EiffqO67IP2scwvqddBYy+CWVtCR2GFKXiw66d6k0Ua6JSi4c
N6h4c4wDJU9md1XVb5G9pQIDAQABo4IBFTCCAREwCQYDVR0TBAIwADAsBglghkgB
hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE
FBYvu0QGxaEgj9FwDXBrB1TSE2ucMIG2BgNVHSMEga4wgauAFL4EVS5jLjf8lBvW
nQmWeHqxv6n2oYGPpIGMMIGJMQswCQYDVQQGEwJqcDEOMAwGA1UECBMFdG9reW8x
DjAMBgNVBAcTBXRva3lvMREwDwYDVQQKEwhoYW1hc3lvdTERMA8GA1UECxMIaGFt
YXN5b3UxETAPBgNVBAMTCG9yZW9yZWNhMSEwHwYJKoZIhvcNAQkBFhJ4eHh4eEBo
YW1hc3lvdS5jb22CAQAwDQYJKoZIhvcNAQEEBQADgYEAQvvuc1sD5WCVtutyrL1q
wTcXiy/ma9Eo6HMt1hvZzcs0k11M3U1as4lHntyBytTQ4XloKlrW/jAlVug8shj8
ZTXkGQyUZzZZZvSuKGtmfVq+UA+Ky6NyrzvHBFJexymweTumTSL3XXMlJlNGlLLm
0FBfNwDwW/x7PCB29zfF9qQ=
-----END CERTIFICATE-----
</pre>




<h4>編集後</h4>




<pre class="console">[weblogic@localhost]# > <kbd>cat myserver_cert_after.csr</kbd>
-----BEGIN CERTIFICATE-----
MIIDbTCCAtagAwIBAgIBATANBgkqhkiG9w0BAQQFADCBiTELMAkGA1UEBhMCanAx
DjAMBgNVBAgTBXRva3lvMQ4wDAYDVQQHEwV0b2t5bzERMA8GA1UEChMIaGFtYXN5
b3UxETAPBgNVBAsTCGhhbWFzeW91MREwDwYDVQQDEwhvcmVvcmVjYTEhMB8GCSqG
SIb3DQEJARYSeHh4eHhAaGFtYXN5b3UuY29tMB4XDTA3MTAyNzEyMTExOVoXDTA4
MTAyNjEyMTExOVowVjELMAkGA1UEBhMCanAxDjAMBgNVBAgTBXRva3lvMREwDwYD
VQQKEwhoYW1hc3lvdTERMA8GA1UECxMIaGFtYXN5b3UxETAPBgNVBAMTCG15c2Vy
dmVyMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCdYfrBkqt0pc3svAFV62yd
Z5K2zxze8GW6gn+LpJ3WChdBaXuGQT6qi0eADowKiTAEddE0Rm0hl0bbCxEsLxW1
BUjQqdsfG3pAa09EiffqO67IP2scwvqddBYy+CWVtCR2GFKXiw66d6k0Ua6JSi4c
N6h4c4wDJU9md1XVb5G9pQIDAQABo4IBFTCCAREwCQYDVR0TBAIwADAsBglghkgB
hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE
FBYvu0QGxaEgj9FwDXBrB1TSE2ucMIG2BgNVHSMEga4wgauAFL4EVS5jLjf8lBvW
nQmWeHqxv6n2oYGPpIGMMIGJMQswCQYDVQQGEwJqcDEOMAwGA1UECBMFdG9reW8x
DjAMBgNVBAcTBXRva3lvMREwDwYDVQQKEwhoYW1hc3lvdTERMA8GA1UECxMIaGFt
YXN5b3UxETAPBgNVBAMTCG9yZW9yZWNhMSEwHwYJKoZIhvcNAQkBFhJ4eHh4eEBo
YW1hc3lvdS5jb22CAQAwDQYJKoZIhvcNAQEEBQADgYEAQvvuc1sD5WCVtutyrL1q
wTcXiy/ma9Eo6HMt1hvZzcs0k11M3U1as4lHntyBytTQ4XloKlrW/jAlVug8shj8
ZTXkGQyUZzZZZvSuKGtmfVq+UA+Ky6NyrzvHBFJexymweTumTSL3XXMlJlNGlLLm
0FBfNwDwW/x7PCB29zfF9qQ=
-----END CERTIFICATE-----
</pre>




<h3>オレオレ CA 局サーバ証明書をキーストアに保存する</h3>


<p>サーバ証明書を発行した CA 局のサーバ証明書をキーストアに保存します。キーストアにサーバ証明書にサインした CA のサーバ証明書がない場合にはエラーになります。</p>

<pre class="console">[weblogic@localhost]# > <kbd>keytool -import -noprompt -trustcacerts -alias oreoreca -file demoCA/cacert.pem -keystore myKeystore.jks -storepass weblogic</kbd>
証明書がキーストアに追加されました。
</pre>




<dl>
<dt class="warn">証明書の登録順に注意</dt>
<dd><p>CA 局のサーバ証明書を先にキーストアに保存していない場合、証明連鎖できずにエラーになります。</p>

<pre class="console">[weblogic@localhost]# > <kbd>keytool -import -noprompt -alias myserver -file myserver_cert_after.csr -keystore myKeystore.jks -storepass weblogic</kbd>
keytool エラー: java.lang.Exception: 応答から連鎖を確立できませんでした。
</pre></dd>
</dl>




<h3>サーバ証明書をキーストアに保存する</h3>


<p>CA 局に発行されたサーバ証明書を保存します。このとき、最初に keytool -genkey で指定したエイリアスと同じ値を指定した場合は証明連鎖（CA 局と自己署名）になります。</p>

<pre class="console">[weblogic@localhost]# > <kbd>keytool -import -noprompt -alias myserver -file myserver_cert_after.csr -keystore myKeystore.jks -storepass weblogic</kbd>
証明書応答がキーストアにインストールされました。 
</pre>


<p><img src="http://hamasyou.com/images/WebLogicSSL/certchain.gif" alt="証明連鎖" /></p>

<dl>
<dt class="notice">証明書のエイリアスに注意</dt>
<dd><p>最初に keytool -genkey で作成したときのエイリアスと別のエイリアスでサーバ証明書を保存した場合、CA 局による署名が使われず自己署名が使われます。</p>

<img src="http://hamasyou.com/images/WebLogicSSL/oreorecert.gif" alt="自己署名" /></dd>
</dl>




<h2>WebLogic でカスタムキーストアを設定する</h2>




<h3>WebLogic のカスタムキーストアの設定</h3>


<p>WebLogic に先ほど作成したキーストアを設定します。WebLogic の管理サーバの管理画面を開き、[サーバ]-[コンフィグレーション]-[キーストア]を開きます。</p>

<p>キーストアに「カスタム ID とカスタム信頼」を選択します。</p>

<p>今回は、秘密鍵、サーバ証明書ともに同じキーストアに入れているので、両方とも同じ設定を行います。</p>

<p><a href="http://hamasyou.com/images/WebLogicSSL/weblogic_keystore.jpg" rel="external nofollow"></a></p>

<h3>WebLogic の SSL の設定</h3>


<p>WebLogic の SSL の設定を行います。WebLogic の管理サーバの管理画面を開き、[サーバ]-[コンフィグレーション]-[SSL]を開きます。</p>

<p>ID キーストアに指定したキーストアの中から秘密鍵エントリのエントリを指定します。</p>

<p><a href="http://hamasyou.com/images/WebLogicSSL/weblogic_ssl.jpg" rel="external nofollow"></a></p>

<dl>
<dt class="warn">公開鍵暗号アルゴリズムに注意</dt>
<dd><p>WebLogic Server 9.2J MP2 の試用版では、公開鍵暗号に DSA はサポートされていません。秘密鍵は keytool -genkey の -keyalg で <strong>RSA</strong> を指定したものを指定します。</p>

<p><a href="http://www.hi-sv.com/e-docs/wls/docs92/client/security.html#wp1077561" rel="external nofollow">WebLogic ドキュメント - SSL を使用するクライアントの開発</a></p></dd>
</dl>




<h2>クライアント（ブラウザ）に CA 局の証明書をインストールする</h2>


<p>ブラウザで WebLogic サーバにアクセスすると、今回作成した SSL 証明書が使われるわけですが、次のような警告が出ると思います。</p>

<p>「このセキュリティ証明書は、信頼する会社から発行されていません。証明書を表示して、この証明機関を信頼するかどうかを決定してください。」</p>

<p><img src="http://hamasyou.com/images/WebLogicSSL/warn_cert.gif" alt="セキュリティ証明書エラー" /></p>

<p>今回、オレオレ CA 局を作りましたが、この CA 局の CA 証明書はクライアント（ブラウザ）に信頼されていません。</p>

<p><section></p>

<h4>参考</h4>


<p><a href="http://maruyama-mitsuhiko.cocolog-nifty.com/security/2005/01/ie.html" rel="external nofollow">IEが表示する「信頼する会社」とは・・・</a></p>

<p></section></p>

<p>今回作った CA 局を証明機関として正しくクライアントに認識してもらうために、CA局の証明書をクライアント（ブラウザ）にインストールします。</p>

<h3>CA 局のサーバ証明書をブラウザにインポートする</h3>


<p>CA 局のサーバ証明書は <code>demoCA/cacert.pem</code> になります。これをブラウザにインストールします。</p>

<p>ブラウザの [ツール]-[インターネット オプション] の [コンテンツ] タブにある [証明書&hellip;] を開きます。</p>

<p><img src="http://hamasyou.com/images/WebLogicSSL/ie_option.gif" alt="インターネット オプション" /></p>

<p>[信頼されたルート証明機関] タブを開き、[インポート(I)&hellip;] を開きます。</p>

<p><img src="http://hamasyou.com/images/WebLogicSSL/cert_import.gif" alt="証明書のインポート" /></p>

<p><img src="http://hamasyou.com/images/WebLogicSSL/import1.gif" alt="証明書インポート 手順1" /></p>

<p>[参照&hellip;] を選択して [ファイルの種類] を「すべて」にし、CA 局のサーバ証明書を選択します。</p>

<p><img src="http://hamasyou.com/images/WebLogicSSL/import2.gif" alt="証明書インポート 手順2" /></p>

<p>証明書のストア場所を、「信頼されたルート証明機関」を選択します。</p>

<p><img src="http://hamasyou.com/images/WebLogicSSL/import3.gif" alt="証明書インポート 手順3" /></p>

<p><img src="http://hamasyou.com/images/WebLogicSSL/import4.gif" alt="証明書インポート 手順4" /></p>

<p><img src="http://hamasyou.com/images/WebLogicSSL/import5.gif" alt="証明書インポート 手順5" /></p>

<p>「はい」を選択すると、CA 局の証明書が「ルート証明機関」として認識されるようになります。</p>

<p><img src="http://hamasyou.com/images/WebLogicSSL/import6.gif" alt="証明書インポート 手順6" /></p>

<p>CA 局のサーバ証明書は安全な方法（改ざんされない方法）で取得する必要があります。また、本当に信頼する CA 局のサーバ証明書のみをクライアントにはインストールするようにします。</p>

<p>良くわからない CA 局のサーバ証明書はインストールしてはいけません。</p>

<h2>参考</h2>




<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798113328/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
</feed>
