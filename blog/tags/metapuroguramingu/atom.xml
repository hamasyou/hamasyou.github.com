<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: メタプログラミング | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/metapuroguramingu/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-04-02T19:38:14+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[メタプログラミングRuby]]></title>
    <link href="http://hamasyou.com/blog/2010/09/06/4048687158/"/>
    <updated>2010-09-06T20:17:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/09/06/4048687158</id>
    <content type="html"><![CDATA[<p><strong>Ruby</strong> が人気のあるプログラミング言語である理由のひとつに、強力なメタプログラミングがあると思います。Ruby の本当の力を知るのは、このメタプログラミングを理解したときだとも思います。</p>

<p>本書は、Ruby の内部動作をきちんと説明した上で、メタプログラミングの説明をしてくれます。とても丁寧な説明で、少しでもプログラミングの知識があれば理解できる文章になっています。</p>

<p>プログラミング能力を高めるひとつの方法に、良いソースコードを読むことというのがあります。Ruby で書かれたフレームワークやライブラリのソースコードを読むと、なんでこんな動作になるんだろう？という疑問や、どうしてこんな風に書けるのだろう？という疑問が湧いてきます。</p>

<p>本書を読むと、そういった疑問の一つ一つが本当に紐を解くように理解できるようになります。Ruby の基礎を勉強した初級者が中級者になろうと思ったときに、ぜひ読むべき本だと思います。</p>

<!-- more -->


<p>本書のおぼえがきです。</p>

<h2>本書のまとめ</h2>




<h3>クラスはオブジェクト</h3>


<p>オブジェクトにクラスがあるように、クラスにもクラスがあります。クラスのクラスは Class クラスです。</p>

<h3>インスタンス変数はインスタンス、メソッドはクラスの持ち物</h3>


<p>インスタンス変数はインスタンスごとにもっていますが、メソッドはインスタンスのクラスに定義されます。</p>

<h3>class キーワードはクラスを定義するのではなくクラスをオープンする</h3>


<p>class キーワードはクラスをオープンします。既存のクラスに対して使えば再オープンできて、メソッドの追加やモンキーパッチができるし、新規のクラスに対して使えば、そのクラスを定義することになります。</p>

<h3>カレントオブジェクトとカレントクラス</h3>


<p>Ruby のプログラムは常にカレントオブジェクト self とカレントクラスを持っています。</p>

<h3>self が何を指すかに注意する</h3>


<p>Ruby はクラスもオブジェクトなので、class キーワードでクラスをオープンすると self はクラスを指し示します。</p>

<h3>メソッドを定義するとカレントクラスのインスタンスメソッドになる</h3>


<p>def で定義されたすべてのメソッドはカレントクラスのインスタンスメソッドになります。</p>

<p>また、メソッドはインスタンスメソッドになるので、メソッドの中では self はメソッドを呼び出したインスタンス自身を指すことになります。</p>

<h3>クラスのインスタンスの特異メソッドとクラスメソッドは同じ仕組み</h3>


<p>クラスのインスタンスに特異メソッドを定義するには、def obj.my_method のようにします。</p>

<p>クラスもオブジェクトなので、同じように特異メソッドを定義できます。def MyClass.my_method というのは MyClass で指し示しているオブジェクト（つまりクラス）に特異メソッドを定義していることになります。</p>

<p>class キーワードでクラスをオープンすると、クラス定義のスコープでは、self はカレントクラスを指すので、</p>

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> <span class="keyword">self</span>.my_method
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>


<p>と</p>

<pre class="code"><span class="keyword">def</span> MyClass.my_method
<span class="keyword">end</span></pre>


<p>は同じことをしていることになります。</p>

<h3>特異メソッドは特異クラスに定義される</h3>


<p>メソッドを定義するとクラスのインスタンスメソッドになります。特異メソッドも例外ではなく、クラスのインスタンスメソッドとして定義されます。</p>

<p>では、特異メソッドはどのクラスのインスタンスメソッドになるかというと、特異メソッドは特異クラスという特別なクラスのインスタンスメソッドとして定義されます。</p>

<h3>クラスの特異クラスにメソッドを定義することは、クラスメソッドを定義すること</h3>


<p>クラスメソッドはクラスのインスタンスに特異メソッドを定義するのと同じ方法で定義されることは、上にもまとめました。</p>

<p>つまり、クラスメソッドはクラスの特異クラスにメソッドを定義することと同じなので、特異クラスにインスタンスメソッドを定義することはクラスメソッドを定義することになります。</p>

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">class</span> &lt;&lt; <span class="keyword">self</span>
    <span class="keyword">def</span> hello
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>


<p>で、MyClass.hello が定義できます。</p>

<h3>特異クラスのスコープに入るには class &lt;&lt; obj 構文を使う</h3>


<p>特異クラスのスコープに入るには class &lt;&lt; obj 構文をつかいます。特異クラスはインスタンスをひとつしかもてません。そのため、<strong>シングルトン</strong>とも呼ばれます。</p>

<h3>private メソッドのルール</h3>


<p>private メソッドは明示的なレシーバをつけて呼び出すことができないというものです。</p>

<p>Ruby のルールでは他のオブジェクトのメソッドを呼び出すにはレシーバを明示しなければいけないので、private メソッドは他のオブジェクトからは呼び出せません。</p>

<h2>オープンクラス</h2>


<p>Ruby は、既存のクラスを再オープンしていつでもクラスを修正することができる、<strong>オープンクラス</strong>という技術があります。このオープンクラスを使って、既存のクラスのバグを修正したり、既存のクラスにメソッドを追加したりすることを<strong>モンキーパッチ</strong>と呼びます。</p>

<h3>オープンクラスの使い方</h3>


<p><blockquote><p>Ruby の <em>class</em> キーワードは、クラス宣言というよりもスコープ演算子のようなものである。もちろん、存在しないクラスは作成する。しかしそれは、副作用と言ってもいいかもしれない。<em>class</em> の主な仕事は、あなたをクラスのコンテキストにつれていくことである。そのコンテキストであなたがメソッドを定義する。</p></p><p><p></p><footer><strong>クラス定義の中身 - 本書P.41</strong></footer></blockquote></p>

<p>Ruby でクラスの再オープンをするには、次のように通常のクラス宣言のように書きます。</p>

<pre class="code"><code><span class="keyword">class</span> String
  <span class="keyword">def</span> hoge
    <span class="comment"># 追加したいメソッドの中身</span>
  <span class="keyword">end</span>
  
  <span class="keyword">def</span> replace   <span class="comment"># &lt;-- すでに String クラスに定義されている</span>
    <span class="comment"># モンキーパッチしたい中身</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></code></pre>


<div class="clear"></div>


<p>1行目で String クラスを再オープンして、 2行目で hoge メソッドを String クラスに追加しています。また、6行目で既存のメソッド replace を再オープンしてモンキーパッチしています。</p>

<h2>インスタンス変数、メソッド、クラス、定数、モジュール</h2>




<h3>インスタンス変数</h3>


<p>インスタンス変数とは、クラスのインスタンスがもつ変数のことです。オブジェクトに対して、<em>instance_variables()</em> を呼び出すことで、そのオブジェクトが持つインスタンス変数の一覧を取得できます。<em>インスタンス変数はインスタンスに所属します。</em></p>

<h3>メソッド</h3>


<p>メソッドには、インスタンスメソッドとクラスメソッドがあります。<strong>Ruby ではメソッドはクラスに所属します。</strong>そのため、クラスには <em>Object.instance_methods</em> と <em>Object.methods</em> という2つのメソッドが用意されています。</p>

<pre class="code">String.instance_methods == <span class="str">&quot;hoge&quot;</span>.methods  <span class="rem"># true</span></pre>


<p>メソッドはクラスに所属するのでインスタンス間で共有されますが、インスタンス変数はインスタンスごとに割り当てられるため値がごっちゃになることはありません。</p>

<h3>クラス</h3>


<p><blockquote><p>クラスはオブジェクトである。だから、オブジェクトに当てはまるものはクラスにも当てはまる。オブジェクトと同じように、クラスにもクラスがある。クラスは Class クラスのインスタンスなのだ。</p></p><p><pre class="code"><code><span class="str">&quot;hello&quot;</span>.<span class="keyword">class</span>    <span class="rem"># String</span><br/>String.<span class="keyword">class</span>     <span class="rem"># Class</span></code></pre></p><p><br/><p></p><footer><strong>クラス再訪 - 本書P.47</strong></footer></blockquote></p>

<p>クラスはオブジェクトで、<strong>クラス名は定数</strong>です。</p>

<h3>定数</h3>


<p><blockquote><p>Ruby では大文字で始まる参照は、クラス名やモジュール名も含めて、すべて<em>定数</em>である。定数のスコープには、変数のスコープとは異なるルールがある。</p></p><p><p></p><footer><strong>定数 - 本書P.49</strong></footer></blockquote></p>

<p>定数はディレクトリのようにツリー上にならんでいて、モジュールを使うことで <em>MyModule::MyClass::MyConst</em> のように書くことができるようになります。このように使うモジュールのことを<strong>ネームスペース</strong>と呼んでいます。</p>

<p>既存のクラスやモジュール名と同名の参照を定義するとオープンクラスになってしまうので、ネームスペースを使って自分のクラスを判別できるようにすると行儀の良いプログラムになります。</p>

<h3>メソッド探索</h3>


<p>メソッドを呼び出すことは、<strong>レシーバに対してメッセージを送ること</strong>と言われます。レシーバとは、メソッドを呼び出したオブジェクトのことです。Ruby はメソッドを呼び出すと次の二つのことを行ないます。</p>

<ol><li>呼び出すメソッドを探す。これを<strong>メソッド探索</strong>と呼びます。</li>
<li>メソッドを呼び出す。これには <em>self</em> が必要になります。</li></ol>


<p>Ruby はメソッドを呼び出す際に、レシーバの継承チェーンをたどってメソッドを見つけ出します。継承チェーンをたどる、とはクラスの親クラスを上にたどっていくことです。</p>

<h3>モジュールはクラスをラップする</h3>


<p><blockquote><p>モジュールをクラスに（あるいは別のモジュールに）インクルードするとき、Ruby はちょっとしたトリックを使う。無名クラスを作ってモジュールをラップし、継承チェーンに挿入するのだ。それはインクルードするクラスの真上に入る。</p></p><p><pre class="code"><code><span class="keyword">module</span> M<br/>  <span class="keyword">def</span> my_method<br/>    <span class="str">&quot;M#my_method()&quot;</span><br/>  <span class="keyword">end</span><br/><span class="keyword">end</span><br/> <br/><span class="keyword">class</span> C<br/>  include M<br/><span class="keyword">end</span><br/> <br/><span class="keyword">class</span> D &lt; C; <span class="keyword">end</span><br/> <br/>D.ancestors <span class="rem"># =&gt; [D, C, M, Object, Kernel, BasicObject]</span></code></pre></p><p><br/><p></p><footer><strong>モジュールとメソッド探索 - 本書P.60</strong></footer></blockquote></p>

<p>Ruby には print() のようなどこからでも呼び出せるメソッドがあります。これは、<em>Kernel</em> モジュールのプライベートメソッドとして定義されているからです。</p>

<p>Ruby はすべてのクラスのスーパークラスとして Object クラスをセットします。この Object クラスの中で Kernel モジュールがインクルードされているため、すべてのクラスの中で Kernel メソッドのプライベートメソッドが呼び出せるのです。</p>

<p>これを利用すると、Kernel モジュールを再オープンしてメソッドを追加すれば、どこからでも呼び出せるメソッドが定義できます。</p>

<h3>self</h3>


<p><blockquote><p>Ruby のコードはオブジェクト（カレントオブジェクト）の内部で実行される。カレントオブジェクトは <em>self</em> とも呼ばれる。<em>self</em> キーワードでアクセスできるからだ。</p></p><p><p><em>self</em> の役割を担うオブジェクトは同時には複数存在しない。長時間その役割を担うオブジェクトも存在しない。メソッドを呼び出すときは、レシーバが <em>self</em> になる。その時点で、すべてのインスタンス変数は <em>self</em> のインスタンス変数になる。レシーバを明示せずにメソッドを呼び出すと、すべて <em>self</em> に対するメソッド呼び出しになる。他のオブジェクトを明示してメソッドを呼び出すと、そのオブジェクトが <em>self</em> になる。</p></p><p><p></p><footer><strong>self の発見 - 本書P.63</strong></footer></blockquote></p>

<p>メソッドを呼び出さない時の self 、つまりトップレベルコンテキスト（スクリプトが実行されたときの一番最初のスコープ）では、self は main という Ruby インタプリタが作成したオブジェクトの内部にいます。</p>

<h3>private メソッドのルール</h3>


<p>Ruby の private メソッドは他の言語と少しルールが違います。Ruby の private メソッドは次の二つのルールにしたがって実行されます。</p>

<ol><li>Ruby は、自分以外のオブジェクトのメソッドを呼び出すには、レシーバを明示的に指定する必要がある。</li>
<li>private のついたメソッドを呼び出すときは、レシーバを指定できない。</li></ol>


<p>つまり、private メソッドを呼び出すには、自分自身（self）にしかできないことになります。</p>

<p>厳密には、Ruby1.9 以前は send メソッド, Ruby1.9 からは instance_eval を使えば呼び出すことができます。</p>

<pre class="code"><code><span class="keyword">class</span> MyClass
  private
  <span class="keyword">def</span> hoge
    <span class="str">&quot;private called&quot;</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
obj = MyClass.new
obj.send(:hoge)                 <span class="rem"># &lt;-- Ruby1.8</span>
obj.instance_eval {|o| hoge }   <span class="rem"># &lt;-- Ruby1.9</span></code></pre>




<h2>動的ディスパッチ</h2>


<p>Ruby は、<em>send()</em> メソッドを使って呼び出したいメソッドをコードの実行時に決めることができます。これを <strong>動的ディスパッチ</strong>と呼びます。send() メソッドにはシンボルを渡すことが適当とされています。</p>

<p><blockquote><p>シンボルと文字列の使い分けは、基本的には慣習なのである。多くの場合、シンボルは「物」の名前に使う。特にメタプログラミングに関するメソッドのような物である。</p></p><p><p></p><footer><strong>シンボル - 本書P.76</strong></footer></blockquote></p>

<h3>メソッドを動的に生成する</h3>


<p>Ruby はメソッド呼び出しを動的に決めることができることの他に、<em>メソッドを動的に定義することができます。</em>メソッドを定義するには、Module#define_method() を使います。</p>

<pre class="code"><code><span class="keyword">class</span> MyClass
  define_method :myMethod <span class="keyword">do</span> |args|
    args * <span class="num">5</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></code></pre>


<p>define_method をつかった例を本書から抜粋し次に示します。</p>

<p><section></p>

<h4>メソッドを動的に生成する - 本書P.81</h4>




<pre class="code"><code><span class="keyword">class</span> Computer
  <span class="keyword">def</span> initialize(computer_id, data_source)
    <span class="instance">@id</span> = computer_id
    <span class="instance">@data_source</span> = data_source
  <span class="keyword">end</span>
 
  <span class="keyword">def</span> <span class="keyword">self</span>.define_component(name)
    define_method(name) {
      info = <span class="instance">@data_source</span>.send <span class="str">&quot;get_#{name}_info&quot;</span>, <span class="instance">@id</span>
      price = <span class="instance">@data_source</span>.send <span class="str">&quot;get_#{name}_price&quot;</span>, <span class="instance">@id</span>
      result = <span class="str">&quot;#{name.to_s.capitalize}: #{info} ($#{price})&quot;</span>
      <span class="keyword">return</span> <span class="str">&quot;* #{result}&quot;</span> <span class="keyword">if</span> price &gt;= <span class="num">100</span>
      result
    }
  <span class="keyword">end</span>
 
  define_component :mouse
  define_component :cpu
  define_component :keyboard
<span class="keyword">end</span></code></pre>


<p></section></p>

<h2>method_missing</h2>


<p>Ruby はレシーバに対して呼び出されたメソッドを継承チェーンをたどって探します。この時、Object や BasicObject までたどってもメソッド定義が見つからない場合、Ruby インタプリタは <em>method_missing</em> を呼び出します。</p>

<p>動的ディスパッチでは呼び出すメソッド名を動的に作り出し、<em>send()</em> メソッドで呼び出していましたが、<em>method_missing()</em> をオーバーライドすることで、呼び出したいメソッドが定義されていない場合の動作を変更して、あたかもそこにメソッドがあるかのように振舞うことができます。</p>

<h3>responde_to? のオーバーライド</h3>


<p>method_missing の中で呼び出したメソッドは、<strong>ゴーストメソッド</strong> と呼ばれ、実際のメソッド定義はそこにはないものとして扱われます。しかし、これでは、Object#methods の一覧に含まれません。そこで、ゴーストメソッドがあたかもそこに本当にあるかのように振舞うように、<em>respond_to?</em> をオーバーライドするようにします。</p>

<pre class="code"><code><span class="keyword">class</span> Computer
  <span class="keyword">def</span> respond_to?(method)
    <span class="instance">@data_source</span>.respond_to?(<span class="str">&quot;get_#{method}_info&quot;</span>) || <span class="keyword">super</span>
  <span class="keyword">end</span>
  <span class="rem">#...</span>
<span class="keyword">end</span></code></pre>




<h2>ブランクスレート</h2>


<p>動的ディスパッチやゴーストメソッドであたかもそこにメソッドがあるかのように振舞うことができますが、同名のメソッドが既存のクラスに存在するような場合は、既存のクラスのメソッドが優先的に呼び出されてしまいます。せっかく動的ディスパッチやゴーストメソッドを意図していたのに、同名のメソッドがあることによりこの前提が崩れてしまうような場合、<em>Module#undef_method()</em> または、<em>Module#remove_method()</em> を使って既存のメソッドを削除することができます。</p>

<p>必要なメソッド以外何も無いことを、<strong>ブランクスレート（blank slate）</strong>、白紙の状態といいます。Ruby1.9 では BasicObject を継承することでブランクスレートなクラスをつくることができます。</p>

<h3>Module#undef_method と Module#remove_method</h3>


<p>undef_method は継承したメソッドも含めてすべてのメソッドを削除します。remove_method はレシーバのメソッドは削除しますが、継承したメソッドはそのまま残ります。</p>

<h4>__で始まるメソッドは削除してはいけない</h4>


<p>Ruby には <em><strong></em> で始まるメソッドが用意されています。例えば、send() メソッドに対して <em></strong>send<strong>()</em> メソッド、id() メソッドに対して <em></strong>id<strong>()</em> メソッドです。この </strong> で始まるメソッドは Ruby 内部から使われるメソッドとして予約されているため、undef_method や remove_method で削除するべきではありません。</p>

<h2>スコープ</h2>




<h3>ブロック</h3>


<p><blockquote><p>ブロックは単体では実行できない。コードを実行するには、ローカル変数、インスタンス変数、<em>self</em> といった環境が必要になる。これらはオブジェクトにひもづけられた名前のことで、<em>束縛</em>とも呼ばれる。ブロックとは、これらをまとめて実行するためのものである。ブロックはコードと束縛の集まりで構成される。</p></p><p><p></p><footer><strong>クロージャ - 本書P.110</strong></footer></blockquote></p>

<p>ブロックを定義すると、そのとき、その場所にある束縛（<em>binding</em>）を取得できます。ブロックを実行する時、この束縛も一緒にメソッドに渡されます。これにより、メソッドを実行するスコープでブロックを呼び出す変数を宣言することや設定することができるようになります。</p>

<p><section></p>

<h4>ブロックの変数スコープの例</h4>


<p>下の例では、メソッド定義の中で変数 msg を定義していますがメソッド定義の内部の msg は使われません。メソッドの呼び出し時にブロックを定義した際に束縛されたローカル変数 msg が使われます。</p>

<pre class="code"><span class="keyword">def</span> greet
  msg = <span class="str">&quot;Hi &quot;</span>
  p <span class="keyword">yield</span>(<span class="str">&quot;hamasyou&quot;</span>)
<span class="keyword">end</span>
 
msg = <span class="str">&quot;Hello&quot;</span>
greet {|name| <span class="str">&quot;#{msg} #{name}&quot;</span> }</pre>


<p></section></p>

<h3>ローカル変数のスコープ</h3>


<p>Ruby には Java や C# のような内部のスコープから外部のスコープの変数を参照できる入れ子は存在しません。外部のスコープと内部のスコープは区別されています。</p>

<p><section></p>

<h4>変数の束縛が切り替わる例</h4>




<pre class="code">v1 = <span class="num">1</span>
 
<span class="keyword">class</span> MyClass
  v2 = <span class="num">2</span>
  local_variables
 
  <span class="keyword">def</span> my_method
    v3 = <span class="num">3</span>
    local_variables
  <span class="keyword">end</span>
 
  local_variables
<span class="keyword">end</span>
<span class="rem"># =&gt; [:v2]</span>
obj = MyClass.new
obj.my_method    <span class="rem"># =&gt; [:v3]</span>
obj.my_method    <span class="rem"># =&gt; [:v3]</span>
local_variables  <span class="rem"># =&gt; [:obj, :v1, :_]</span></pre>


<p>トップレベルコンテキストで定義した v1 変数が MyClass の中で見えなくなっています。また、MyClass のクラススコープで定義した v2 も、my_method の中で見えなくなっています。</p>

<p></section></p>

<h3>スコープゲート</h3>


<p>プログラムがスコープを切り替える場所は次の3つあります。</p>

<ul>
<li>クラス定義（<em>class</em>）</li>
<li>モジュール定義（<em>module</em>）</li>
<li>メソッド呼び出し（<em>def</em>）</li>
</ul>


<p>これらの<strong>スコープゲート</strong>を超えて束縛をわたすには、キーワードではなくメソッドを使います。</p>

<pre>class => Class.new
module => Module.new
def => Module#define_method()</pre>




<pre class="code">my_var = <span class="str">&quot;Hello&quot;</span>
 
MyClass = Class.new <span class="keyword">do</span>
  p <span class="str">&quot;#{my_var}&quot;</span>
 
  define_method :my_method do
    p <span class="str">&quot;#{my_var}&quot;</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>


<p>レキシカルスコープを入れ子で参照できるようにすることを、<strong>フラットスコープ</strong>と呼びます。</p>

<h3>instance_eval()</h3>


<p>Object#instance_eval() を使うと、オブジェクトのコンテキストでブロックを評価することができます。instance_eval() はフラットスコープで評価されるので、ローカル変数にアクセスすることができます。</p>

<pre class="code">my_var = <span class="num">13</span>
obj.instance_eval { <span class="instance">@v</span> = my_var }
obj.instance_eval { <span class="instance">@v</span> }
<span class="rem"># =&gt; 13</span></pre>




<h2>クラス定義</h2>




<h3>メソッド定義の意味</h3>


<p>Ruby のプログラムは常に<em>カレントオブジェクト</em> self と、<strong>カレントクラス</strong>を持っています。そして、<em>メソッドを定義すると、カレントクラスのインスタンスメソッドになります。</em></p>

<p>プログラム中で、カレントオブジェクトを参照するには self を使いますが、カレントクラスを参照するキーワードはありません。</p>

<p>では、どうやってカレントクラスを判断すればよいかというと、<em>class</em> キーワードを見ればよいです。（目視で確認ですｗ）</p>

<p>class でオープンされたカレントクラスにメソッドを定義すると、そのカレントクラスのインスタンスメソッドを定義することになります。</p>

<h3>カレントクラス</h3>


<p>既存のクラスのコンテキストでブロックを評価する <em>Object#class_eval</em> というメソッドがあります。これを使ってクラスのオープンをすることもできます。</p>

<p>class キーワードを使ってクラスをオープンするにはクラス名が必要ですが、class_eval() は変数としてクラスを受け取った場合にも使うことができます。</p>

<pre class="code"><span class="keyword">class</span> MyClass; <span class="keyword">end</span>
 
<span class="keyword">def</span> add_hello_to(a_class)
  a_class.class_eval <span class="keyword">do</span>
    <span class="keyword">def</span> hello; <span class="str">&quot;Hello&quot;</span> <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
add_hello_to MyClass
obj = MyClass.new
obj.hello
<span class="rem"># =&gt; "Hello"</span></pre>


<p>class_eval を使うと、<em>self</em> と<em>カレントクラス</em>に変更が加えられます。instance_eval は <em>self</em> のみに変更を加えます。</p>

<p><blockquote><p><em>instance_eval()</em> と <em>class_eval()</em> はどちらを使う？</p></p><p><p>「このオブジェクトをオープンしたいが、クラスのことは気にしない」ならば、instance_eval() がいい。「ここで<em>オープンクラス</em>を使いたい」ならば、class_eval() がいい。</p></p><p><p></p><footer><strong>instance_eval() と class_eval() はどちらを使う？ - 本書P.143</strong></footer></blockquote></p>

<h3>クラスインスタンス変数とクラス変数</h3>


<p><strong>クラスインスタンス変数</strong>とは、クラスのインスタンス変数のことでクラスに属しています。</p>

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="instance">@my_var</span> = <span class="num">1</span>
<span class="keyword">end</span></pre>


<p>クラスインスタンス変数は、<em>クラスのオブジェクトのインスタンス変数</em>とは別物です。</p>

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="instance">@v</span> = <span class="num">1</span>
  <span class="keyword">def</span> my_method
    <span class="instance">@v</span> = <span class="num">2</span>
  <span class="keyword">end</span>
  <span class="keyword">def</span> <span class="keyword">self</span>.my_method
    <span class="instance">@v</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
MyClass.my_method    <span class="rem"># =&gt; 1</span>
obj = MyClass.new
obj.my_method    <span class="rem"># =&gt; 2</span>
MyClass.my_method    <span class="rem"># =&gt; 1</span></pre>


<p><strong>クラス変数</strong>とは、<em>@@</em>プレフィックスを付けた変数で、<em>クラスの階層に属しています。</em></p>

<pre class="code"><span class="keyword">class</span> C
  <span class="instance">@@v</span> = <span class="num">1</span>
<span class="keyword">end</span>
 
<span class="keyword">class</span> D &lt; C
  <span class="keyword">def</span> my_method
    <span class="instance">@@v</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
D.new.my_method    <span class="rem"># =&gt; 1</span></pre>


<p>クラス変数は、サブクラスからもアクセスできます。</p>

<h2>特異メソッド</h2>


<p>Ruby では、特定のオブジェクトにのみメソッドを追加することができます。これを<strong>特異メソッド</strong>と呼びます。</p>

<pre class="code">msg = <span class="str">&quot;hello, my name is hamasyou&quot;</span>
 
<span class="keyword">def</span> msg.hello
  <span class="keyword">self</span>.upcase
<span class="keyword">end</span>
 
msg.hello    <span class="rem"># =&gt; "HELLO, MY NAME IS HAMASYOU"</span></pre>




<h3>特異クラスのスコープ</h3>


<p>Ruby には class キーワードを使った特別な構文があり、これを使うことで特異クラスのスコープに入ることができます。</p>

<pre class="code"><span class="keyword">class</span> &lt;&lt; an_object
  <span class="rem"># 特異スコープの中</span>
<span class="keyword">end</span></pre>


<p><section></p>

<h4>クラスメソッドの構文</h4>


<p>クラスメソッドは実は、クラスの特異メソッドとなっています。つまり、クラスメソッドを定義するには、次のいずれかの方法を使うことができます。</p>

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> <span class="keyword">self</span>.my_method; <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">def</span> MyClass.my_method; <span class="keyword">end</span>
 
<span class="keyword">class</span> MyClass
  <span class="keyword">class</span> &lt;&lt; <span class="keyword">self</span>
    <span class="keyword">def</span> my_method; <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>


<p></section></p>

<h3>インスタンスに特異メソッドを動的に追加するには特異クラスにメソッドを定義する</h3>


<p>メソッドはクラスの持ち物なので、特異メソッドを動的にインスタンスに定義するにはインスタンスの特異クラスに対してメソッドを定義してやる必要があります。</p>

<p>特異メソッドを動的に定義するのに、<em>instance_eval()</em> メソッドを使うことができます。</p>

<p>じつは、<em>instance_eval()</em> メソッドを使うとレシーバのカレントクラスを特異クラスに変更しているのです。instance_eval() メソッドを使って特異クラスをオープンすることで、特異クラスに対してメソッドを定義することができるようになります。</p>

<pre class="code"><span class="keyword">class</span> MyClass
<span class="keyword">end</span>
 
obj = MyClass.new
 
obj.instance_eval(<span class="str">&quot;def hello; 'Hello World'; end&quot;</span>)
obj.hello
<span class="rem"># =&gt; &quot;Hello World&quot;</span>
 
obj2 = MyClass.new
obj2.hello
<span class="rem"># =&gt; NoMethodError: undefined method `hello' for #&lt;MyClass:0x0xxxxx&gt;</span></pre>


<p>または、特異クラスのオブジェクトを class &lt;&lt; obj 構文を使って取得し、そのオブジェクトに対して define_method でメソッドを定義します。</p>

<pre class="code"><span class="keyword">class</span> MyClass
<span class="keyword">end</span>
 
obj = MyClass.new
singleton = <span class="keyword">class</span> &lt;&lt; obj; <span class="keyword">self</span>; <span class="keyword">end</span>
singleton.send(:define_method, :hello) { <span class="str">&quot;Hello World&quot;</span> }
 
obj.hello
<span class="rem"># =&gt; &quot;Hello World&quot;</span></pre>




<h2>モジュールをインクルードしてクラスメソッドを定義する</h2>


<p><blockquote><p>「来る日も来る日も世界のどこかで、Rubyプログラマがモジュールをインクルードしてクラスメソッドを定義しょうとしている。私もかつてはそうだった。しかし、これではうまくいかない。」</p></p><p><p></p><footer><strong>モジュールの不具合 - 本書P.167</strong></footer></blockquote></p>

<p>モジュールの中にクラスメソッドを定義して、モジュールをインクルードしたクラスにだけクラスメソッドを定義したいという場合、下のようにしがちですがこれは間違った例です。</p>

<p><section></p>

<h4>モジュールをインクルードしてクラスメソッドを定義する間違った例</h4>




<pre class="code"><span class="keyword">module</span> MyModule
  <span class="keyword">def</span> <span class="keyword">self</span>.my_method; <span class="str">&quot;Hello&quot;</span>; <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">class</span> MyClass
  include MyModule
<span class="keyword">end</span>
 
MyClass.my_method
<span class="rem"># =&gt; NoMethodError: undefined method `my_method' for MyClass:Class</span></pre>


<p></section></p>

<p>モジュールをインクルードすると、<em>モジュールのインスタンスメソッドが手に入ります。クラスメソッドではありません。</em>すなわち、モジュールをインクルードしてクラスメソッドを手に入れるためには、モジュールにはインスタンスメソッドとして定義して、include する場所をクラスメソッドが定義される場所（つまり、<em>特異クラス</em>）で行うようにします。</p>

<pre class="code"><span class="keyword">module</span> MyModule
  <span class="keyword">def</span> my_method; <span class="str">&quot;Hello&quot;</span>; <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">class</span> MyClass
  <span class="keyword">class</span> &lt;&lt; <span class="keyword">self</span>
    include MyModule
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
MyClass.my_method    <span class="rem"># =&gt; "Hello"</span></pre>


<p>クラスメソッドは特異クラスのメソッドなので、特異クラスにメソッドを定義すればクラスメソッドになります。</p>

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">class</span> &lt;&lt; <span class="keyword">self</span>
    <span class="keyword">def</span> my_method; <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span></pre>


<p>モジュールを特異クラスのメソッドに追加する方法、モジュールをオブジェクトに追加して特異メソッドとする方法は、Ruby がそのためのメソッドを用意しています。それが <em>Object#extend()</em> です。</p>

<pre class="code"><span class="keyword">module</span> MyModule
  <span class="keyword">def</span> my_method; <span class="str">&quot;Hello&quot;</span>; <span class="keyword">end</span>
<span class="keyword">end</span>
 
obj = Object.new
obj.extend MyModule
obj.my_method
<span class="rem"># =&gt; "Hello"</span>
<span class="keyword">class</span> MyClass
  extend MyModule
<span class="keyword">end</span>
 
MyClass.my_method    <span class="rem"># =&gt; "Hello"</span></pre>




<h2>エイリアス</h2>


<p><em>alias</em> キーワードを使うと、Ruby のメソッドにエイリアスをつけることができます。</p>

<pre>alias :new_method :old_method</pre>


<p>alias された時点で、Ruby は古いメソッドを新しいメソッドとして再定義（コピー）します。したがって、次のような動作となります。</p>

<pre class="code"><span class="keyword">class</span> String
  <span class="keyword">alias</span> :real_length :length
 
  <span class="keyword">def</span> length
    real_length &gt; <span class="num">5</span> ? <span class="str">&quot;long&quot;</span> : <span class="str">&quot;short&quot;</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="str">&quot;War and Peace&quot;</span>.length    <span class="rem"># =&gt; "long"</span>
<span class="str">&quot;War and Peace&quot;</span>.real_length    <span class="rem"># =&gt; 13</span></pre>


<p>オープンクラスを使って、length() メソッドを再定義していますが、alias を使って real_length として再定義（コピー）しているので、real_length を呼び出すことで元の動作を呼び出すことができています。</p>

<h2>Kernel#eval</h2>


<p>eval() メソッドは引数で指定されたコード文字列（Ruby のコード）を処理します。</p>

<pre class="code">array = [<span class="num">10</span>, <span class="num">20</span>]
element = <span class="num">30</span>
eval(<span class="str">&quot;array &lt;&lt; element&quot;</span>)  <span class="rem"># =&gt; [10, 20, 30]</span></pre>


<p>eval()、instance_eval()、class_eval() に渡すコード文字列の中は、ローカル変数にアクセスできます。</p>

<pre class="code">array = [<span class="str">&quot;a&quot;</span>, <span class="str">&quot;b&quot;</span>, <span class="str">&quot;c&quot;</span>]
x = <span class="str">&quot;x&quot;</span>
array.instance_eval <span class="str">&quot;self[1] = x&quot;</span>
array    <span class="rem"># =&gt; [&quot;a&quot;, &quot;x&quot;, &quot;c&quot;]</span></pre>




<h3>Binding オブジェクト</h3>


<p><strong>Binding</strong> はスコープをオブジェクトにまとめたものです。eval()、instance_eval()、class_eval() に Binding を渡すことでそのスコープでコードを実行できます。</p>

<pre class="code"><span class="keyword">class</span> MyClass
  <span class="keyword">def</span> my_method
    <span class="instance">@x</span> = <span class="num">1</span>
    binding
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
b = MyClass.new.my_method
eval <span class="str">&quot;@x&quot;</span>, b    <span class="rem"># =&gt; 1</span></pre>




<h2>フックメソッド</h2>


<p>Ruby には様々なイベントへのフックメソッドが用意されています。よく使われるのが、Module#included() で、モジュールが include された時に呼び出されます。次のようにすることで、Module で定義されたインスタンスメソッドをクラスメソッドに追加することができます。</p>

<pre class="code"><span class="keyword">module</span> MyMixin
  <span class="keyword">def</span> <span class="keyword">self</span>.included(base)
    base.extend(MyClassMethods)
  <span class="keyword">end</span>
 
  <span class="keyword">module</span> MyClassMethods
    <span class="keyword">def</span> hoge
      <span class="str">&quot;hoge()&quot;</span>
    <span class="keyword">end</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
 
<span class="keyword">class</span> MyClass
  include MyMixin
<span class="keyword">end</span>
 
MyClass.hoge    <span class="rem"># =&gt; &quot;hoge()&quot;</span></pre>



]]></content>
  </entry>
  
</feed>
