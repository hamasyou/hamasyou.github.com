<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: MDA | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/mda/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-03-04T11:27:14+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MDA(モデル駆動型アーキテクチャ)導入ガイド―UMLを基盤としたオブジェクト指向設計・開発手法]]></title>
    <link href="http://hamasyou.com/blog/2005/08/14/4844318691/"/>
    <updated>2005-08-14T12:31:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/08/14/4844318691</id>
    <content type="html"><![CDATA[<p><strong>MDA（モデル駆動型アーキテクチャ）</strong>とは、UMLなどの標準モデリング技術を使ってモデルを作り、モデルをベースにソフトウェア開発を行っていくというものです。プラットフォームに依存しないモデル（PIM）からプラットフォームに依存するモデル（PSM）へ自動的に変換してくれるツールを用いて開発を行います。</p>

<p>本書は、MDA開発のプロセスと、モデルの変換について、現時点で使えるツールについて書かれています。MDAという考え方は、比較的あたらしく、ツールのサポートが不十分です。今の段階でMDAをプロジェクトで活用することはまだ不安があります。</p>

<p>対象読者は、プロジェクトマネージャ、開発者です。現時点で実務に使うのに不安があるMDAですが、そのメリットと仕組みを知っておくと今後のパラダイムシフトにすばやく対応できるでしょう。</p>

<p>本書にはプログラムコードはほとんど出てきません。擬似コードかモデルが出てくるだけです。つまり、本書で解説していることがMDAの概念や仕組みに特化していると言うことです。</p>

<!-- more -->




<h2>特長</h2>




<h3>Platform Independent Model（PIM）とPlatform Specific Model（PSM）</h3>


<p>MDAでは2つのモデルを定義しています。一つは、プラットフォーム独立モデル（PIM）です。もう一つはプラットフォーム特化モデル（PSM）です。PIMからPSMの変換を行うツールを用いて、MDAはソフトウェア開発を行っていきます。</p>

<p>PIMは、モデルが実行される環境に依存していないモデルです。つまり、WindowsでもLinuxでも、TomcatでもJBossでも、どんな環境でも動くことを保証しているモデルです。</p>

<p>PSMは、モデルが実行される環境に依存するモデルです。つまり、WindowsのTomcatで動くモデルと言うように、環境に特化しています。</p>

<p>PIMからPSMへ、PSMからプログラムコードへとモデルが変換されていくプロセスが、モデル駆動型開発と呼ばれるゆえんです。確かにモデルからプログラムコードへと自動で変換されるのはメリットが大きいと思います。しかし、現実的には現段階では、モデルを非常に厳密に書かなければならないし、制約を厳しくしておく必要があると思います。</p>

<p>今後、MDAがどのような発展を遂げていくのか非常に楽しみです。本書では、MDAの基本概念について主に解説しています。今後もっと実践的な書籍が増えてくると思いますが、概念を押さえるには本書のような導入ガイドを読むのがいいと思います。</p>

<h2>参考</h2>


<ul>
<li>MDAの基礎知識を詳しく吸収できます。</li>
</ul>


<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810602X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>MDA開発のエッセンスを解説した本です。入門書的な扱いです。</li>
</ul>


<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798107336/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>かなり厳密にMDAを学びたい人向けです。</li>
</ul>


<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434038133/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>きっちりしたモデルを書くためにOCL（オブジェクト制約言語）</li>
</ul>


<div class="rakuten"><table  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434055429/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<p>　</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Executable UML MDAモデル駆動型アーキテクチャの基礎]]></title>
    <link href="http://hamasyou.com/blog/2004/11/12/479810602X/"/>
    <updated>2004-11-12T10:52:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/11/12/479810602X</id>
    <content type="html"><![CDATA[<p>「Executable UML」とは、<b>実行可能なモデル</b>という意味です。Executable UML の目的は 「<strong>ソフトウェア実装上の構成を決定せずに、問題領域の解決に向けての分かりやすいモデルを提供すること</strong>」です。ソフトウェア実装とは例えば、プログラミング言語やプラットフォームといったいわゆる、問題領域の解決につかう道具のことです。逆に問題領域の解決とは、ビジネスモデルやビジネスルールと言われる、ソフトウェアの目的の部分です。</p>

<p>Executable UML は、UML のアクションセマンティックス(動作意味論) を提供します。これにより、ソフトウェア実装を決定せずともソフトウェアの動作を表すことができます。しかも、厳密に定義することで、ツールによる解釈・実行が可能になります。<a href="http://www.atmarkit.co.jp/aig/04biz/mda.html" rel="external nofollow"> (モデル駆動アーキテクチャ)</a>は、こうしたExecutable UML によって書かれたモデルを解釈し、コードを自動生成しようとしています。モデルの解釈を行うためには、厳密なセマンティックスが必要とされます。</p>

<p>本書は、Executable UML を理解するためのよい書籍だと思います。Executable UML 自体は、新しいモデリング言語と言うわけではありません。<strong>UML の一つの拡張(プロファイル)であり、実行可能なモデルを生み出すためのただの表記法</strong>です。</p>

<p>最近は、「モデリング」という言葉をいろんなところで聞けるようになりました。書籍もたくさん出ています。今後は、プログラムだけではなくモデリングも出来なくてはならない時代が来るかもしれません。そうすると、自然とモデルからコードを生成するという発想が生まれてきます。今後は MDA のようなモデルからコードを生成する手法が一般的になってくるかもしれません。Executable UML は次世代のための必須知識と言えるのではないでしょうか。</p>

<!-- more -->




<h2>特徴</h2>


<p>Executable UML は、UML に<b>厳密なアクションセマンティックス</b>を拡張したものです。プログラミングコードによる実装なくして、モデルの解釈・動作を行うことが出来るようになります。本書は、Executable UML の表記法や仕様を理解するのにとても分かりやすいと思います。現時点で、Executable UML に関する和書が少ないということも事実ですが、とりあえず本書を理解できれば Executable UML の基本は完璧だと思います。</p>

<h3>目次</h3>


<p>目次を見ると分かりますが、UML の解説書と見間違うほどです。UML を読めるだけの基本知識があるほうが読み進めやすいと思います。</p>

<ol><li>序論</li>
<li>Executable UMLの利用</li>
<li>ドメインとブリッジ</li>
<li>ユースケース</li>
<li>クラスと属性</li>
<li>関係と関連</li>
<li>クラスのアクション</li>
<li>制約</li>
<li>ライフサイクル</li>
<li>オブジェクト間の通信</li>
<li>オブジェクト間の同期</li>
<li>ライフサイクルの利用法</li>
<li>関係の動的変化</li>
<li>ドメインの動的振る舞い</li>
<li>ドメインの検証</li>
<li>モデルの管理</li>
<li>複数ドメインの結合</li>
<li>モデルコンパイラ</li>
</ol>




<h3>Executable UML の利用</h3>


<p>Executable UML の目的は 「完全な製品を組み立てずに、問題解決を試作する方法を提供すること」です。これは、モデルを書くことで動作検証を行えるということを意味しています。つまり、実際にプロトタイプや擬似コードを書くことなく、モデルのみでソフトウェアのテストが可能になると言うことです。</p>

<p>考え方自体は、とてもすばらしいものだと思います。プログラミング言語に依存せずにソフトウェアがテストできると言うことは、どんなプラットフォーム上でも同じソフトウェアが作成可能になります。しかも、テスト済みのモデルであれば、モデルから自動生成したコードをそのままソフトウェア成果物として納品することも可能になるはずです。</p>

<p>モデルの検証は2種類の方法があります。静的検証と動的検証です。</p>

<dl>
<dt>静的検証</dt>
<dd>静的検証はモデルコンパイラが行う構文検査のようなものです。モデルが解釈可能かどうかを検証します。</dd>
<dt>動的検証</dt>
<dd>動的検証は、実際の値を使用してモデルを検証するものです。検証するためには「実際のオブジェクト」と「シナリオ」が必要になります。テストシナリオは、モデルごとに作成する方が向いているが、ユースケースには一致している必要があります。</dd>
</dl>


<p>作成したモデルは、モデルコンパイラを使って実装に変換します。モデルコンパイラの種類によって実装コードが変わるため、パフォーマンスのよいものを選択する。よいパフォーマンスが得られない場合は、その部分だけ手でコードを書き、コンパイラによって吐き出されたコードとリンクする措置をとる。</p>

<h3>本書の総括</h3>


<p>全体的に、UML の解説書のような印象を受けました。実行可能なUMLと言っても、結局 UML (モデリング言語) ですから自然なことかもしれませんが。アジャイルプロセスを好む人は、モデリングはコミュニケーションの手段だと考えていると思います。そういう意味では、Executable UML はとっつきにくい分野かもしれないし、なにより胡散臭い感じがしていました。</p>

<p>本書を読んだ後、モデル駆動の開発は近い将来ありえるかもと言う気持ちになりました。確かに、ツール依存という点は否定できませんが、大きな期待はもてるかと思います。</p>

<p>Executable UML は厳密なセマンティックスを要求するので、通常の UML よりも制限や制約が多いです。それでも、UML を書く上で参考になる部分が結構あるので、読んで損はないはずです。</p>

<p>今後、「モデリング」の重要性がさらに高まると、MDA (モデル駆動アーキテクチャ) のようなモデル主体の開発が多くなってくるかもしれません。それには、Executable UML のような厳密な表記法が欠かせません。将来を見越して早くからこういった知識を蓄えておくことは、よいことではないでしょうか。本書は、Executable UML を理解するには、とても参考になり、とりあえず持っていれば何かあったときにも怖くないです (何かってなんだ・・・ (^^; )</p>

<h2>覚書き</h2>




<h3>ドメイン</h3>




<dl>
<dt class="info">ドメインとは</dt>
<dd>ドメインとは、特徴的な規則と方針に従って振る舞う概念的エンティティによって形成される、自立した、現実的、仮想的、抽象的な世界である。</dd>
</dl>


<p>システムに対して最初に行う作業は、システム全体を構成するいくつかのドメインを識別することです。概念的エンティティはたった一つのドメインの中に定義される。例えば、注文、発注、顧客、会社といった概念エンティティは物流ドメインの一部である。</p>

<p>異なるドメインにおけるエンティティは、たとえ同じ名前だとしても別の概念を意味していなければならない。また、ドメイン内の概念エンティティは同じドメイン内の別の概念エンティティの存在が必要になる。例えば、注文は、顧客がいなければほとんど意味を成さない。ドメイン内の概念エンティティは、別ドメインの概念エンティティの存在を必要としない。</p>

<p><strong>ドメインをモデル化するときは、そのドメインについての用語だけを使う</strong>。ドメインのモデルは、Executable UML において重要な意味をもつ。ドメインの振る舞いが Executable UML におけるモデル群になるからである。Executable UML モデルを構築するには、要件を理解して収集することが必要。そのために、ユースケースをつかう。</p>

<h2>参考</h2>


<ul>
<li>Executable UML の実践的な使い方を解説した本です。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4789837149/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>モデル駆動アーキテクチャ (MDA) に関しての導入ガイドです。概念がよく分かります。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844318691/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>モデル駆動アーキテクチャ (MDA) の技術的側面を解説しています。結構難しいです。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4434038133/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
