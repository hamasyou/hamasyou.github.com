<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ant | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/ant/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-14T19:05:32+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Antを勉強する]]></title>
    <link href="http://hamasyou.com/blog/2004/10/12/ant/"/>
    <updated>2004-10-12T16:00:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/10/12/ant</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774120006/sorehabooks-22" rel="external nofollow"></a>
</p>


<p>Antはビルドツールです。OSや環境に依存しないビルドツールということで幅広く使われています。</p>

<p>個人的にAntを使う理由というのは、ビルド以外のいろんな設定が簡単に出来ることです。例えば、環境ごとに異なった設定ファイルを作りたいときに、ベースとなるファイルを一つ用意するだけで、Filterという機能を使って設定ファイルの内容を変化させることが出来ます。</p>

<p>他にも、JUnitを使ったときに、Reportを自動で生成する機能や、Webアプリケーション用のwarファイルを作りそのままデプロイしたりと、色々なことが連続的に出来るのが気に入っています。作業と作業の間に人の手を入れずに実行できるので、作業忘れが発生しないというのが特徴です。　</p>

<!-- more -->




<h2>解説</h2>


<p>Antのサンプルビルドファイルを元にAntを理解していきます。</p>

<p>Antのデフォルトのビルドファイルは 「build.xml」という名前で作る。</p>

<p>Antはビルドファイルを読み込んで動作します。コマンドラインから 「ant」 と打つことで、build.xmlというファイルを読み込んでデフォルトタスクを実行します。ビルドファイルや実行タスクを指定することも出来ます。</p>

<pre class="code"><code><span class="tag">&lt;project <span class="attr">name=</span><span class="value">&quot;AntTask&quot;</span> <span class="attr">default=</span><span class="value">&quot;compile&quot;</span> <span class="attr">basedir=</span><span class="value">&quot;.&quot;</span>&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;src.dir&quot;</span> <span class="attr">value=</span><span class="value">&quot;./src&quot;</span> /&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;classes.dir&quot;</span> <span class="attr">location=</span><span class="value">&quot;./classes&quot;</span> /&gt;</span> 
  <span class="tag">&lt;property <span class="attr">file=</span><span class="value">&quot;project.properties&quot;</span> <span class="attr">prefix=</span><span class="value">&quot;project&quot;</span> /&gt;</span> 
  <span class="tag">&lt;property <span class="attr">environment=</span><span class="value">&quot;env&quot;</span> /&gt;</span> 
 
  <span class="tag">&lt;fileset <span class="attr">id=</span><span class="value">&quot;classpath&quot;</span> <span class="attr">dir=</span><span class="value">&quot;${project.lib}&quot;</span>&gt;</span>
    <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;*&quot;</span> /&gt;</span> 
    <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*.jar&quot;</span> /&gt;</span> 
    <span class="tag">&lt;exclude <span class="attr">name=</span><span class="value">&quot;*.txt&quot;</span> /&gt;</span> 
  <span class="tag">&lt;/fileset&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;echo&quot;</span>&gt;</span>
    <span class="tag">&lt;echo&gt;</span>${src.dir}<span class="tag">&lt;/echo&gt;</span> 
    <span class="tag">&lt;echo&gt;</span>${classes.dir}<span class="tag">&lt;/echo&gt;</span> 
    <span class="tag">&lt;echo&gt;</span>${project.ver}<span class="tag">&lt;/echo&gt;</span> 
    <span class="tag">&lt;echo&gt;</span>${env.Path}<span class="tag">&lt;/echo&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;init&quot;</span>&gt;</span> 
    <span class="tag">&lt;mkdir <span class="attr">dir=</span><span class="value">&quot;${classes.dir}&quot;</span> /&gt;</span>
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;compile&quot;</span>&gt;</span> 
    <span class="tag">&lt;ant <span class="attr">antfile=</span><span class="value">&quot;build.xml&quot;</span> <span class="attr">target=</span><span class="value">&quot;echo&quot;</span> /&gt;</span>
    <span class="tag">&lt;javac <span class="attr">srcdir=</span><span class="value">&quot;${src.dir}&quot;</span> <span class="attr">destdir=</span><span class="value">&quot;${classes.dir}}&quot;</span> <span class="attr">debug=</span><span class="value">&quot;on&quot;</span>&gt;</span> 
      <span class="tag">&lt;classpath&gt;</span> 
        <span class="tag">&lt;fileset <span class="attr">refid=</span><span class="value">&quot;classpath&quot;</span> /&gt;</span>           
      <span class="tag">&lt;/classpath&gt;</span> 
    <span class="tag">&lt;/javac&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;copy&quot;</span> <span class="attr">depends=</span><span class="value">&quot;compile&quot;</span>&gt;</span> 
    <span class="tag">&lt;copy <span class="attr">todir=</span><span class="value">&quot;${classes.dir}&quot;</span>&gt;</span>
      <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;${src.dir}&quot;</span>&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*.properties&quot;</span> /&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*.xml&quot;</span> /&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*.dtd&quot;</span> /&gt;</span> 
        <span class="tag">&lt;exclude <span class="attr">name=</span><span class="value">&quot;build.xml&quot;</span> /&gt;</span> 
      <span class="tag">&lt;/fileset&gt;</span> 
    <span class="tag">&lt;/copy&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;clean&quot;</span>&gt;</span> 
    <span class="tag">&lt;delete <span class="attr">dir=</span><span class="value">&quot;${classes.dir}&quot;</span> /&gt;</span> 
    <span class="tag">&lt;delete&gt;</span> 
      <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;${project.tmp}&quot;</span> <span class="attr">defaultexcludes=</span><span class="value">&quot;no&quot;</span>&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*&quot;</span> /&gt;</span> 
      <span class="tag">&lt;/fileset&gt;</span> 
    <span class="tag">&lt;/delete&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;tests&quot;</span>&gt;</span> 
    <span class="tag">&lt;junit <span class="attr">printsummary=</span><span class="value">&quot;yes&quot;</span> <span class="attr">haltonfailure=</span><span class="value">&quot;no&quot;</span>&gt;</span>
      <span class="tag">&lt;classpath&gt;</span> 
        <span class="tag">&lt;fileset <span class="attr">refid=</span><span class="value">&quot;${classes.dir}&quot;</span> /&gt;</span> 
        <span class="tag">&lt;pathelement <span class="attr">path=</span><span class="value">&quot;${java.class.path}&quot;</span> /&gt;</span> 
      <span class="tag">&lt;/classpath&gt;</span> 
      <span class="tag">&lt;formatter <span class="attr">type=</span><span class="value">&quot;xml&quot;</span>/&gt;</span> 
      <span class="tag">&lt;batchtest <span class="attr">fork=</span><span class="value">&quot;yes&quot;</span> <span class="attr">todir=</span><span class="value">&quot;${reports.dir}&quot;</span>&gt;</span> 
        <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;${src.dir}&quot;</span>&gt;</span> 
          <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;**/*Test.java&quot;</span>/&gt;</span> 
        <span class="tag">&lt;/fileset&gt;</span> 
      <span class="tag">&lt;/batchtest&gt;</span> 
    <span class="tag">&lt;/junit&gt;</span> 
    <span class="tag">&lt;junitreport <span class="attr">todir=</span><span class="value">&quot;${reports.dir}&quot;</span>&gt;</span> 
      <span class="tag">&lt;fileset <span class="attr">dir=</span><span class="value">&quot;${reports.dir}&quot;</span>&gt;</span> 
        <span class="tag">&lt;include <span class="attr">name=</span><span class="value">&quot;TEST-*.xml&quot;</span>/&gt;</span> 
      <span class="tag">&lt;/fileset&gt;</span> 
      <span class="tag">&lt;report <span class="attr">format=</span><span class="value">&quot;frames&quot;</span> <span class="attr">todir=</span><span class="value">&quot;${reports.dir}&quot;</span>/&gt;</span> 
    <span class="tag">&lt;/junitreport&gt;</span> 
  <span class="tag">&lt;/target&gt;</span>    
 
  <span class="tag">&lt;target <span class="attr">name=</span><span class="value">&quot;setup&quot;</span>&gt;</span> 
    <span class="tag">&lt;filter <span class="attr">token=</span><span class="value">&quot;VERSION&quot;</span> <span class="attr">value=</span><span class="value">&quot;2.0.1&quot;</span> /&gt;</span>
    <span class="tag">&lt;copy <span class="attr">file=</span><span class="value">&quot;config-base.properties&quot;</span> 
             <span class="attr">tofile=</span><span class="value">&quot;config.properties&quot;</span> 
             <span class="attr">filtering=</span><span class="value">&quot;yes&quot;</span> /&gt;</span> 
  <span class="tag">&lt;/target&gt;</span> 
 
<span class="tag">&lt;/project&gt;</span>
</code></pre>


<div class="clear"></div>




<h3 id="1">1. 1行目: ビルドファイルは project タグで開始する</h3>


<p>Antのビルドファイルは project タグではじめます。project の属性には、デフォルトのタスク名やベースとなるフォルダをしてすることが出来ます。今回の例では、プロジェクト名が AntTask、デフォルトタスク名が compile、ベースディレクトリがカレントディレクトリになります。</p>

<h3 id="2">2. 2行目: property タスクは、設定情報を定義する</h3>


<p>propertyタスクは、name属性に指定しな名前にマッピングされる値を定義します。定義された値は、ビルドファイル中から ${name} という方法で取り出せます。</p>

<p>1つめの例が、単純にnameに対してvalueを設定する方法です。</p>

<pre>${src.dir} ⇒ ./src</pre>


<p>2つめの例は、name属性に対して、PATH情報を設定しています。location属性で値を設定すると、値が絶対パスとして定義されます。</p>

<pre>${classes.dir} ⇒ C:\java\ant\classes</pre>


<p>3つめの例は、設定ファイルに定義されている値を読み込みます。file属性で指定されたファイルからname=valueという情報を読みとります。prefixが指定されていると、読み込んだname属性の頭にprefixで指定した値を付けて、valueを取り出せるようになります。</p>

<pre>${project.version} ⇒ 1.6.1</pre>


<p>4つめの例は、環境変数を読み込むときに使用するプレフィックスを指定します。</p>

<pre>${env.PATH} ⇒ C:\java\lib\;C:\java\ant\lib</pre>




<h3 id="3">3. 7行目: fileset タスクは、ファイルの集合を定義する</h3>


<p>filesetタスクは、ファイルの集合を定義します。javacやjava コマンドで使用するクラスパスや、ライブラリパスなどを設定するのに便利です。</p>

<p>id属性に指定した名前で、ビルドファイル中から呼び出されます。dir属性は、ファイルの存在場所を指定します。include・exclude属性を使って、集合に含めるファイルを選択します。パターンとして使える文字と意味は<a href="http://homepage1.nifty.com/kuprij/antdoc/common.html#pattern" rel="external nofollow">Ant詳細</a>というページを参考にしてください。</p>

<h3 id="4">4. 13行目: タスクの集合を定義するには、targetタスクを利用します</h3>


<p>タスクをまとめて実行したい場合には、targetタスクを利用します。通常、意味のある単位でタスクをまとめます。例えば、JUnitでテストを行う、javacコマンドでコンパイルしてクラスファイルだけを別のフォルダに移動させる、jarコマンドでファイルを圧縮してデプロイするなどです。</p>

<h3 id="5">5. 21行目: フォルダを作るには mkdir タスクを使う</h3>


<p>フォルダの作成には、mkdirタスクを使います。この他、ファイルを削除したり(deleteタスク)、ファイルを移動したり(moveタスク)もできます。</p>

<h3 id="6">6. 25行目: 他のビルドファイル中のタスクを呼び出すには antタスクを呼び出す</h3>


<p>ビルドファイルを分割したい場合があります。例えば、非常に大きなファイルになってしまったり、環境に応じて読み込むビルドファイルを変えたりしたい場合です。</p>

<p>そんなときは、antタスクを使って、別のビルドファイルを読み込むことが出来ます。antfile属性に読み込むビルドファイルを指定します。target属性には、呼び出すタスクを指定します。</p>

<h3 id="7">7. 34行目: ファイルをコピーするには copyタスクを利用する</h3>


<p>ファイルをコピーしたい場合は良くあります。そのようなときは copy タスクを使います。moveタスクとの違いは、copyはコピー元のファイルが残ることです。</p>

<h3 id="8">8. 54行目: JUnitとJUnitReportを使う</h3>


<p>AntにはJUnitを実行して、その結果をレポートにまとめるタスクが存在します。細かいタスクの説明は参考文献を見てもらうとして、レポートに必要な条件は1つだけです。</p>

<pre>JUnitのサマリーをXML形式で出力すること。(Formatter type="xml")</pre>


<p>JUnitとJUnitReportタスクを使うと、それなりにしっかりとした形式でテスト結果が出力されるようになります。テスト結果をプロジェクトメンバーで共有したい場合などに利用できます。</p>

<h3 id="9">9. 75行目: ファイル内の設定を置換する Filter タスク</h3>


<p>環境によって設定ファイルを複数用意したい場合があると思います。そんな時、ベースとなる設定ファイルを一つ用意して、Filterタスクを利用して、環境に合わせた設定ファイルを作ることが出来ます。
参考：<a href="http://members.at.infoseek.co.jp/pokopensjant/j/docs/manual/CoreTasks/filter.html" rel="external nofollow">Filter タスク </a></p>

<p>Antは、非常にたくさんのことが出来るビルドツールです。CVSから最新のファイルを取得して、コンパイルしてデプロイするなんて動作も、Antの達人にしてみれば朝飯前なことでしょう。僕はまだまだ初心者ですが (^^;)</p>

<p>今回はAntを勉強する取っ掛かりとしてサンプルファイルを元に簡単な説明書きだけを載せておきました。(勉強会用の資料としてつくりましたので・・・)これを気に、Antに興味がわいたなら勉強会大成功ということにしておきます。</p>

<h2>プロジェクト管理ツール「Maven」</h2>


<p>Antはビルドツールです。ただのビルドツールではなく、タスクを利用して定型作業を自動化したり、JUnitなどと連携して自動テストを行ったりも出来ます。しかし、プロジェクトで開発を行っていくと、さまざまな問題点がでてきます。　</p>

<p>例えば、開発者ごとにビルドの構成が変わってくるということがあげられます。開発環境が違えば、それぞれ開発用のビルドファイルを用意しなければなりません。また、ビルドの手順も人それぞれによって変わってきてしまいます。これらの問題点というのは、プロジェクト管理の範疇に入ってくる問題といえます。</p>

<p>つまり、Antにはプロジェクト管理の機能が抜けているといえるでしょう。個人で開発を行う上では非常に便利なAntですが、複数人で開発を行うときは、気をつけなければならない点が増えてきてしまいます。</p>

<p>こういった問題点を解決してくれるのが「<a href="http://maven.apache.org/" rel="external nofollow">Maven</a>」です。MavenはApacheプロジェクトで作られている、Java開発プロジェクトの管理および開発チーム間での情報共有のために用いられるツールです。</p>

<p>Mavenに関しての詳しい解説は参考ページを見てください。</p>

<ul>
<li><a href="http://www.ingrid.org/jajakarta/turbine/jp/turbine/maven/" rel="external nofollow">Maven (Jajakarta日本語記事)</a>
<li><a href="http://www.02.246.ne.jp/~torutk/maven/" rel="external nofollow">Mavenを使った開発</a>
<li><a href="http://www.objectclub.jp/technicaldoc/tools/maven/maven_top/" rel="external nofollow">Maven ではじめるプロジェクトドライブ ObjectClub</a>
</ul>




<h2>参考</h2>


<ul>
<li><p>WebのAnt解説ページです。(詳しい！)
<a href="http://homepage1.nifty.com/kuprij/antdoc/toc.html" rel="external nofollow">Ant 詳説</a></p></li>
<li><p>Antの解説本です。</p></li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798008540/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>


<p>&#8203;&#8203;</p>
]]></content>
  </entry>
  
</feed>
