<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: プログラマ | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/purogurama/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2015-11-25T15:36:39+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[まつもとゆきひろ コードの未来]]></title>
    <link href="http://hamasyou.com/blog/2012/05/26/4822234630/"/>
    <updated>2012-05-26T08:52:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/05/26/4822234630</id>
    <content type="html"><![CDATA[<p>本書は日経Linuxで2009年6月号から2012年6月号まで連載されていた「まつもとゆきひろ 技術を斬る」に加筆・修正を加えたものです。2009年からということで古い技術もあるのでは？と思われるかもしれませんが、さすがまつもとさん！きちんと未来を見据えたテーマでかかれていて、すごく参考になりました。</p>

<p>本書は読み物の色がつよく、言語の過去・未来や新しい言語（<em>Go</em>、<em>Dart</em>、<em>CoffeeScript</em>、<em>Lua</em>）の言語作成者ならではの視点での解説、クラウド時代のC10K問題やスケーラビリティの話、ビッグデータ時代の NoSQL の扱い方などをまつもとさん視点で解説しています。</p>

<p>実際にプログラミングをやっている人であれば、ニヤニヤしながら読めることまちがいなしです。最近の技術動向をさくっと知るというのにも良いと思います。僕もとても楽しく面白く読むことが出来ました。</p>

<p>新人教育にいかがですか？</p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>エクストリーム未来予測</h3>


<p>未来を予測するときの簡単なテクニック。エクストリーム・プログラミング（XP）を考案した Kent Beck が著書の中で書いている言葉。</p>

<h3>DSL デザインの構成要素</h3>




<dl>
<dt>コンテキスト</dt>
<dd>DSL の記述がどのような意味を持つか規定する。</dd>
<dt>センテンス</dt>
<dd>コンテキストの内部の記述で、関数呼び出しやメソッド呼び出しで表現される個別の動作。</dd>
<dt>ユニット</dt>
<dd>単位。20.hours の hours など。</dd>
<dt>ボキャブラリ</dt>
<dd>目的分野にふさわしいメソッドをどれだけ用意できるか。</dd>
<dt>ヒエラルキ</dt>
<dd>ネストしたコンテキスト</dd>
</dl>




<h3>GC（ガベージコレクション）の3つの基本方式</h3>




<h4>マークアンドスイープ方式</h4>


<p>先頭から生きているオブジェクトに印をつけていき、最後まで印をつけたら印の付いていないオブジェクトを回収する方式。</p>

<p>処理時間は、「生きているオブジェクト数」 + 「全オブジェクト数」の和（マークを付ける処理 + 回収する処理）。</p>

<h4>コピーコレクション方式</h4>


<p>マークアンドスイープ方式では、<em>大量のオブジェクトが割り当てられ、そのうちごく一部だけが生き残るような場合に必要以上に時間がかかってしまう</em>。</p>

<p>コピーコレクションは、マークアンドスイープ方式でいうマークを付ける処理（マークフェーズ）で、生きているオブジェクトを新しい領域にコピーするようにし、すべてのコピー（マーク）が終わったら古い領域を回収することで行う。</p>

<p>マークをつける処理よりもコピーする処理のほうがコストが高いため、生きているオブジェクトの数が多いと不利な方式になる。</p>

<h4>リファレンスカウント方式</h4>


<p>オブジェクト自身が、自分が参照されているカウント（リファレンスカウント）を知っていて、参照が増減する度にリファレンスカウントを書き換える方式。</p>

<p>メリットは簡単に実装ができること。</p>

<p>デメリットは、循環参照に対応できないこと。また、並列処理と相性がわるいこと。</p>

<h4>応用方式</h4>


<p>基本方式を組み合わせる形で、応用方式が多くの場合利用されている。</p>

<p><em>世代別GC</em>、<em>インクリメンタルGC</em>、<em>並列GC</em>である。</p>

<p>世代別GCは、「オブジェクトのほとんどは短時間でゴミになり、長い時間生き残ったオブジェクトはより長い寿命を持つ」という性質を利用して、オブジェクトに新しい、古いのタグをつけ、新しいものだけをGCするマイナーGCと古いものも対象にするメジャーGCの２つを使い分ける方式。</p>

<p>インクリメンタルGCは、リアルタイム処理などで GC の中断時間を減らす目的で、GC を少しずつ処理していく方式。</p>

<p>並列GCは、複数 CPU を利用して GC を行う方式。</p>

<h3>例外処理</h3>


<p>例外が発生したときの対応には大きく2つある。ひとつは、<em>実行を中止すること</em>。もうひとつは、<em>例外が発生した原因を取り除き再挑戦すること</em>。</p>

<h3>クロージャ</h3>


<p>「関数オブジェクトから外側の変数がアクセス（参照や更新）できる」というのがクロージャを構成する要件の一つ。</p>

<pre><code class="javascript">function echo(func) {
  console.log(func());
}

for (var i = 0; i &lt; 3; i++) {
  echo(function() {
    return i * i;
  });
}
&gt; 0
&gt; 1
&gt; 4
</code></pre>

<p>外側のスコープに属する変数を参照している関数オブジェクトは、そのローカル変数を「閉じ込め」る。</p>

<pre><code class="javascript">function extent() {
  var n = 0;
  return function() {
    n++;
    console.log("n=" + n);
  }
}

var f = extent();
f();
&gt; n=1
f();
&gt; n=2
</code></pre>

<p class="option">Ruby 1.9では、関数っぽいプログラミングを支援するために、lambda の代わりに「->」という式がつかえるようになり、また「call」メソッドを省略して「f.()」と呼び出せるようになっています。</p>




<h3>Go</h3>


<p>Google からリリースされた新言語「<em>Go</em>」は、システムプログラミング言語では初となる言語仕様のレベルで並列プログラミングを意識している。</p>

<p>Go の関数やメソッドは複数の値を戻り値として返すことができる。</p>

<p>Go には例外機構がないが、戻り値の多値をもちいて、本来の戻り値とエラーが発生したかどうかを区別できる「<strong>コンマOK</strong>」スタイルをとっている。</p>

<pre><code class="go">f,ok = os.Open(ファイル名, os.O_RDONLY, 0);
if ok != nil {
  //... open に失敗したときの処理
}
</code></pre>

<p>Go の goroutine は、メモリ空間の共有を行い、軽量であり、コンテキストスイッチが自動でマルチコアを活用できる。</p>

<h3>ブルームフィルタ</h3>


<p><em>ブルームフィルタ</em>は、あるデータが登録されているかどうかを判定できるデータ構造。</p>

<ul><li>判定時間がデータ件数に依存しない（O(1)）</li>
<li>空間効率が非常に良い</li>
<li>要素の削除ができない</li>
<li><em>たまに間違える</em></li></ul>


<p>ブルームフィルタは、本当は要素に入っていないけれども入っているとみなされるという疑陽性（false positive）がある。</p>

<h3>C10K問題</h3>


<p>OS の select コールを使わないで、<em>epoll</em> や <em>kqueue</em> などの別のAPIを利用する。または、ノンブロッキングI/O を使う。Ruby のイベントループフレームワークには、EventMachine がある。</p>

<h3>アプリサーバ</h3>


<p>Unicone は一般的な Master プロセスからワーカープロセスにリクエストを転送するプッシュモデルではなく、<em>プルモデル</em>を採用しているため。プルモデルとは、ワーカー側が処理が Master に処理を受け取りに行く方式。</p>

<h3>key-value ストア</h3>


<p>ACID （Atomicity:原子性、Consistency:一貫性、Isolation:独立性、Durability:持続性）特性はデータベースの世界では一般的だが、近年大規模データを扱うために分散を考えるようになってくると ACID を満たすのが厳しくなってきている。</p>

<p>CAP 定理というものがあり、大規模環境では、Consistency:一貫性、Availability:可用性、Partition Tolerance:分割体制 のうち同時に2つまでしか満たすことができないとされている。</p>

<p>大規模分散環境では、多くは Consistency を捨てている。多くの key-value ストアはトランザクション処理を持たないのはそういうこと。</p>

<h3>アムダールの法則</h3>


<p>一般的にマルチコアコンピュータは、CPU を複数積んでいても、その他のデバイスは共有している事が多い。たとえば、メモリやディスク、ネットワークデバイスなど。もし、CPU 以外のところに処理のボトルネックがある場合は、マルチコアを投入しても性能は改善されない。</p>

<h3>ノンブロッキングI/O</h3>


<p>大量の接続をさばくサーバでは、スレッドを使うとメモリ負荷やスレッド切り替えのコストが大きくなりすぎる傾向がある。そのためイベントを待ち受けてそれに対応する処理を「シングルスレッド」で処理するやり方のほうが効率的になる。</p>

<p>シングルスレッドで処理をするときに気を付けないといけないのは、そのスレッドが「<em>ブロック</em>」されると、プログラム全体が止まってしまうことである。</p>

<p>ブロックは、<em>入出力待ち</em>の場合がほとんどなため、入出力待ちを以下にブロックしないかが重要になる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[まつもとゆきひろ コードの世界~スーパー・プログラマになる14の思考法]]></title>
    <link href="http://hamasyou.com/blog/2010/04/06/4822234312/"/>
    <updated>2010-04-06T01:38:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/04/06/4822234312</id>
    <content type="html"><![CDATA[<p>本書は、まつもとゆきひろさんによる、プログラミングのいろいろな技術の考え方や考え方が生まれた経緯、目的などが解説されているプログラマ向けの本です。この本のすばらしいところは、Rubyの開発者である<strong>まつもとゆきひろ</strong>さんの言葉で各種技術が説明されているところです。</p>

<p>コーディングのあり方や、こういう考えを持って取り組むとよりよりコードが書けるようになる、こういうことを意識するとよいプログラマになれるという秘伝の極意が満載です。特に、Rubyの開発者という立場から話されている『第3章 ブロックについて』や『第14章 関数型プログラミングについて など』はタイトルだけ見てもヨダレが出そうになるくらいです。</p>

<p>本書のターゲットはよりよりプログラムを書きたいと思っている開発者、技術者の方々です。技術のうんちくや裏話、トリビアなどが好きな人におすすめの一冊です。</p>

<!-- more -->




<h2>目次</h2>




<ul>
<li>第1章 私はなぜRubyを開発したのか</li>
<li>第2章 オブジェクトについて</li>
<li>第3章 ブロックについて</li>
<li>第4章 デザイン・パターンについて</li>
<li>第5章 Ajaxについて</li>
<li>第6章 Ruby on Railsについて</li>
<li>第7章 文字コードについて</li>
<li>第8章 正規表現について</li>
<li>第9章 整数と浮動小数について</li>
<li>第10章 プログラムの高速化と並列化について</li>
<li>第11章 プログラムのセキュリティについて</li>
<li>第12章 時間を扱うプログラムについて</li>
<li>第13章 データの永続性について</li>
<li>第14章 関数型プログラミングについて など</li>
</ul>




<h2>おぼえがき</h2>




<h3>関数を引数に取る高階関数</h3>


<p><strong>高階関数</strong>とは、関数を引数にとる関数のことで関数型言語などで使用されます。高階関数をつかうメリットは、小さな関数の組み合わせによって多種多様な処理に対応できることです。テキスト処理でつかうパーサなどの変換処理で使用されたりします。</p>

<p>Rubyという言語ではブロックという機能を使って高階関数と同等のことを実現しています。</p>

<p><blockquote><p>高階関数を実現するためには、関数あるいは手続きをデータとして取り扱えるようなプログラミング言語が必要です。</p></p><p><p></p><footer><strong>『第3章 ブロックのパワー』より</strong></footer></blockquote></p>

<p>高階関数をつかう際には、関数が呼び出されたときの実行時の環境（コンテキスト）を保持しておくことができるかというポイントがあります。この実行時の環境を保持しておく機能をクロージャと呼びますが、Rubyではこれをブロックをつかって実現しています。</p>

<p>C言語のような言語自体が高階関数をサポートしていない言語では、実行時の環境を保持しておくのに引数でわたすかグローバル変数をつかうかの2つしか手段がありません。これではカプセル化が崩れてしまい保守性が悪いコードになってしまいます。</p>

<h3>ブロックのパワー</h3>


<p>Rubyはこの実行時の環境を保持する手段としてブロックをつかいますが、コードの塊をメソッドの引数にわたすことが出来る点やメソッドの呼び出しの制御がブロックに引き渡される点が優秀な点として上げられます。これによって、繰り返し処理などの実行時環境をブロックに閉じ込め保守性の高いコードが書けるようになります。</p>

<p>また、コールバックや決まりきった処理をブロックとして変数に保持して持ち回ることが出来たりと、ブロックをつかった時の利点ははかりしれません。Javaを経験してRubyを経験すると、このブロックのパワーに最初に驚かされると思います。そしてなぜJavaにブロックがないのかむずがゆくなってきます（Java7で正式にクロージャがサポートされるのでJavaでもRubyのブロックのような使い方ができる日がくるのも近いかもしれません）</p>

<h3>プログラムでの文字コードの扱い</h3>


<p><blockquote><p>コンピュータは「文字」そのものを扱うことができません。このため、各文字に番号を対応させて処理します。文字に対応した番号を「文字コード」と呼びます。</p></p><p><p></p><footer><strong>『第7章 文字コードについて』より</strong></footer></blockquote></p>

<p><blockquote><p>コンピュータは、先に述べたように、各文字に番号を対応させて処理します。逆に言うと番号が割り当てられた文字だけを扱います。この、番号が割り当てられた文字の集まりを「文字集合（Character Set）」と呼びます。</p></p><p><p></p><footer><strong>『第7章 文字コードについて』より</strong></footer></blockquote></p>

<p><blockquote><p>文字集合が決まれば、各文字に対応する番号を順番に並べることで、文字の並びであるテキストを表現できます。文字集合で用いる文字コード番号の最大値が255以下であれば（たとえばASCII）、各番号をバイト列として表現すればよいので話はこれでおしまいです。しかし、もっと大きな文字集合ではメモリー効率や処理効率なども考慮して、どのようにコンピュータ上で取り扱うかを決めなければなりません。取り扱い方法、言い換えれば文字コード列の表現方法を「文字符号化方式（Character Encoding Scheme）」と呼びます。</p></p><p><p></p><footer><strong>『第7章 文字コードについて』より</strong></footer></blockquote></p>

<h3>関数型プログラミングとオブジェクト指向プログラミング</h3>


<p>関数型プログラミングの利点は、「<strong>副作用のない</strong>」関数というものの組み合わせでコーディングができるところです。これによって安全にコーディング出来るようになります。</p>

<p>一方のオブジェクト指向プログラミングの利点は、概念をオブジェクトとして捉え、カプセル化、継承、ポリモーフィズム、メッセージパッシングによる構造化プログラミングが行えるところです。</p>

<p>大規模な業務向けのシステムのように、特定のデータをデータベースで管理するためのシステムを作り場合には、関数型プログラミングよりもオブジェクト指向プログラミングのほうが便利です。逆に、関数型プログラミングは状態を持たない文字列処理やパーサなどの変換処理、解析アプリケーションなどが向いています。</p>

<p>Rubyが人気なのは、日本人が開発した言語というだけではなく、この関数型プログラミングとオブジェクト指向プログラミングの良いとこ取りをしたというところが大きいと思います。</p>

<p>業務システムには相性の悪い関数型プログラミングでも、ブロックやクロージャなどの考えはコーディングにおいては便利です。プログラミング言語の進化に伴って気持ちいいコーディングが出来るようになってきたなぁとしみじみ思う今日この頃です（日記みたい。。。）</p>

<h2>参考</h2>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797316462%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797316462" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Scala%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E3%83%87%E3%82%A4%E3%83%93%E3%83%83%E3%83%89%E3%83%BB%E3%83%9D%E3%83%A9%E3%83%83%E3%82%AF/dp/4822284239%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822284239" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/%E3%81%9F%E3%81%AE%E3%81%97%E3%81%84Ruby-%E7%AC%AC3%E7%89%88-%E9%AB%98%E6%A9%8B-%E5%BE%81%E7%BE%A9/dp/4797357401%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4797357401" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Ruby%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Gregory-Brown/dp/4873114454%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114454" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
</feed>
