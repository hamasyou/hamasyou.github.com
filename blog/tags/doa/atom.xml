<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: DOA | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/doa/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-25T17:46:37+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[業務モデルとデータモデルの考え方]]></title>
    <link href="http://hamasyou.com/blog/2005/07/03/4798106453/"/>
    <updated>2005-07-03T17:00:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/07/03/4798106453</id>
    <content type="html"><![CDATA[<p>僕は最初この本を読んだとき、内容をあまり理解できませんでした。それは、趣味でしかモデリングをやっていなかったからです。つまり、業務の知識がまったくなかったのです。</p>

<p>本書は、業務をどうデータモデルに落とすか、ER図に落とすかというところを解説しています。そこには、どんなツールを使うか、どんなフローを書けばいいのかといったことまで含まれています。</p>

<p>「なんだか実務をこなしているみたい」と、読後は思いました。それくらい、<strong>実践よりの本</strong>になっています。データモデリング初心者でも読みこなせる優しい文章になっていますが、<b>業務知識がないと読み進めることがつらい</b>です。</p>

<!-- more -->




<h2>特徴</h2>




<h3>業務プロセスの話も含まれている</h3>


<p>データモデルの本と言うのは、実はあまり<strong>業務プロセス</strong>について触れられていなかったりします。</p>

<p>本書は、業務プロセス、ビジネスフローについても書かれています。ビジネスの現場でモデリングを使うには、当然ビジネスプロセスの話も必要になってきます。本書は、業務プロセスの分析とモデリングを一緒に解説しています。</p>

<h3>ツールの解説が豊富</h3>


<p>例えば、ビジネスフローについて解析したいとき、便利なのは「Xupper（ケン・システムコンサルティング）」であったり、IDEF0のツールとして有名なのは「All Fusion Process Modeler(コンピュータ・アソシエイツ）」であるといったことが本書では挙げられています。</p>

<p>モデリングの説明ばかりでなく、ツールの説明までしているところが、実際の現場で役に立ちそうだといえます。ツールだけでなく、命名規則の話や、識別子のつけかたの話など、盛りだくさんです。</p>

<h2>参考</h2>


<ul>
<li>データモデリングってどうやるんだろうという人にご紹介！</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>データベース設計を理解したいひとにおすすめ</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101109/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>データベース設計ってどうやるんだろうという人にご紹介！</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810566X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[T字形ER データベース設計技法]]></title>
    <link href="http://hamasyou.com/blog/2005/01/12/488373109X/"/>
    <updated>2005-01-12T16:09:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/01/12/488373109X</id>
    <content type="html"><![CDATA[<p>見た目は確かに教科書っぽい感じがします。「データベース設計技法」とタイトルにあるので、論理設計もしくは物理設計に関する書籍かと思うかもしれません。しかし本書は、教科書でもないし、DB設計の技術書でもありませんでした。</p>

<p>本書は、「<b>ビジネスドメインの解析手法</b>」を学ぶものです。T字形ER手法という考え方を用いて、ビジネスの現場をモデル化する手法を学べます。ページ数も140ページ少々と少なく、見開きでひとつのタイトルを解説しているため、とてもわかりやすく理解しやすいです。</p>

<p>T字形ER手法では、テーブルを「リソース」と「イベント」という区別で扱います。概念の違いですので、物理設計には関係ありませんが、ビジネス解析(要求分析)の段階では、とても重要になってきます。</p>

<p><b>オブジェクト指向設計に通じるところもあり</b>、本書で説明している概念を理解すると、ビジネスドメインでのデータの見方というのがしっくり来ると思います。業務アプリケーション開発者は一通り読んでおくと、設計時や開発時に参考になると思います。</p>

<!-- more -->




<h2>解説</h2>


<p>T字形ER手法では、「<b>コード体系</b>」を非常に重要な概念として扱います。Identifier、Resource と Event の区別、コード体系、サブセット、みなしエンティティの 5つのキーワードを理解するだけで、ビジネスモデリングに非常に効果的に働くと思います。</p>

<p>見開き構成になっていて、左で文章による解説、右で図を使った解説を行っており、とても理解しやすくなっています。紙質など、教科書っぽいところもありますが、それほど硬い文章ではありません。多少難しい言葉や聴きなれない言葉もありますが、内容の理解は容易だと思います。</p>

<p>分析・設計を行う開発者は、一度読むことをお勧めする良書です。後半、哲学的な話も出てきますが、そこを除いても120%おつりがくると思います。かなりお勧めします。</p>

<h2>覚書き</h2>




<h3>T字形ER手法とは</h3>


<p>「T字形ER手法」とは、「ビジネス解析技法」であり、データ設計技法ではない。業務で使われている「<b>コード体系</b>」をグループ化しながらビジネスを逆解析する技法である。</p>

<p>T字形ER手法では、データの集合を形成する元となるものが「コード体系」ということになる。</p>

<p>参考： <a href="http://www.sdi-net.co.jp/logico-13.htm" rel="external nofollow">Ｔ字形ＥＲ手法の概念</a></p>

<h3>Identifier と Master-Key の違い</h3>


<p><b>Identifier</b> はデータ集合(エンティティ)を生成する判断基準となる。逆に、エンティティとは、Identifier を付与された、一つ一つの違いが認識できるものということになる。</p>

<p><blockquote><p>マスターキーとはプライマリー・キーと呼ばれる、データアクセス用のキーであり、ビジネスにおいてのコード体系を表していないため、Identifier とは別のものと考える。データベース上においては、プライマリーキーは重複は許されないものとして扱われるが、Identifier は重複することがある。(例：ある契約において、営業所毎に契約番号が1から振られる場合、契約番号がIdentifier であるが、データベース上においては、営業所コードと契約番号でマスターキーとなる。)</p></p><p><p></p><footer><strong>本書</strong></footer></blockquote></p>

<p><b class="red">Identifier はけっして複合キーでは表されない</b>。複合キーとして Identifier を表現する場合は、「結合ファイルまたは、ビュー」ということになる。</p>

<p><blockquote><p><b>みなしエンティティ</b>というものがある。コード体系が存在しないが、エンティティとみなせるもののこと。　たとえば、従業員というエンティティの属性に「前会社名称」というものがあるとする。前会社名称というのは、前会社というエンティティの属性にするべきであるが、前会社コードのようなコード体系はない。こういう場合に、みなしエンティティとして、「従業員.前会社名称」のようなエンティティを導出する。</p></p><p><p>みなしエンティティは、エンティティの純度を高める上に、ゼロの多重度を利用することでヌル値を回避するサブセットとしても使える。</p></p><p><p></p><footer><strong>本書</strong></footer></blockquote></p>

<h3>エンティティ名の付け方</h3>


<p>T字形ER手法では「コード体系」を主眼においてエンティティを見つける。コード体系において「○○番号」や「○○コード」とよばれるものから「番号」、「コード」を取り除いた○○の部分がエンティティ名となる。(例：「受注番号」 -> 「受注」)</p>

<p>「番号」、「コード」を取り除いたあとに、「○○書」、「○○伝票」などという言葉になった場合、「書」、「伝票」を取り除く。(例：「請求書番号」 -> 「請求書」 -> 「請求」)</p>

<p><b class="red">コード体系に表現されていないコードを勝手に使ってはいけない。</b></p>

<h3>Resource (リソース) と Event (イベント) の違い</h3>


<p>リソースは、事やモノに区別されるもの。イベントは、事象や履歴、事実などのこと。</p>

<p>Event であるかは、タイムスタンプを設定できるかどうかによる。<b>タイムスタンプが設定できるのであれば、それは履歴や事実を表すことができる</b>。</p>

<p>Resource は非常に重要な概念である。Resource と Event を比べて、Resourceの数のが多ければ、Resourceを元に Event を構築することが可能になる。</p>

<p>Resource と Event の関係は3つのパターンになる。</p>

<ol><li><b>Resource - Resource</b><br />　Resource - Resource の関係は、「対照表(関係テーブル)」を用いて表現する。</li>
<li><b>Resource - Event</b><br />　Event のほうに、Resource の参照キーを定義する。</li>
<li><b>Event - Event</b><br />　Event の並び順は、ビジネス上の時系列にそって並べる。このとき、「1 : 1」、「1 : 多」 であれば、時系列の遅い Event に参照キーを定義する(後ろのEvent)。「多 : 1」、「多 : 多」 の場合は、「対応表」を用いる(対応表と対照表は同じようなもの)。</li></ol>


<p><b>対照表(関連テーブル)は実質的には Event として扱われる</b>。例えば、顧客 (Resource) と 銀行 (Resource) と 口座 (Resource) の 対照表(関連テーブル)は <b>口座開設</b>という Event と取れる。</p>

<p><blockquote><p></p></p><p><h4>方式の対照表</h4></p><p><br/><p>T字形ER手法では、3つ以上のエンティティを一度に接続する対照表(関連テーブル)は認めていない。上記の例の場合だと、顧客と銀行と口座を一度に接続することは認められていない。これは、ビジネス解析が難しくなるという理由からである。T字形ER手法では、2つのエンティティのみを接続する <b>Binary 方式</b>だけを認めている。</p></p><p><p>では、上記の場合どうするのかと言うと、顧客と銀行への対照表(顧客.銀行.対照表)を導出したあとで、顧客.銀行.対照表と口座との対照表を導出する。対照表とエンティティを接続した対照表を導出することは、T字形ER手法では推奨される手法の一つなのだ。</p></p><p><p></p><footer><strong>本書</strong></footer></blockquote></p>

<h3>Attribute (属性) に ヌル値 (null値) は許可しない</h3>


<p>例えば、契約解約日という属性があるとする。この属性は、契約が行われているときには ヌル値 を設定する(解約日が存在しないという意味)。しかし、<strong>Attribute とは本来、エンティティが存在するとき、原則としてそこに存在しなければならない</strong>(つまり、ヌル値を許さない)。</p>

<p>このような、ある状態の時には ヌル値 として処理したい場合、<b>サブセット</b>という概念をつかう。サブセットとは、簡単に言うと継承関係のようなもの。</p>

<p><b>繰返項目</b>とは、Identifier に対して複数の関係にある属性のこと。これらの属性は、ヌル値をセットする可能性があるため、別のテーブルとして分けて管理する。</p>

<p>同一の Identifier を時系列にそって上書きして流用するような<b>複写伝票</b>は、サブセットを使って表す。例えば、ある受注の受注番号を、受注、出荷、請求のそれぞれの Event で使う場合である。このようなサブセットの使い方は、「状態遷移」をあらわしている。</p>

<p>「<b>相違のサブセット</b>」という技法を使って、ヌル値を回避することができる。</p>

<h3>分類としてのサブセット</h3>


<p>サブセットを使う場合、下記の前提事項が存在する。</p>

<ul><li>サブセット(子)とスーパーセット(親)の間には「被包含・包含」の関係</li>
<li>サブセット同士は「排他」の関係</li></ul>


<p>サブセット間に交わり(排他でない)が起こるとすると、それはサブセットではないことになる。例えば、ある取引先が、出荷先でも請求先でもあるような場合、出荷先と請求先で取引先区分コードが同じになる。</p>

<p><img src="http://hamasyou.com/images/ttypedatabase/subset_intersect.gif" alt="サブセットの交わり" /></p>

<p>オブジェクト図で表すと以下のような感じ。同一の取引先インスタンス(取引先A)を共有している点がいけない。</p>

<p><img src="http://hamasyou.com/images/ttypedatabase/subset_object.gif" alt="サブセットの交わり(オブジェクト図)" /></p>

<p>サブセット間に交わりが起こった場合は、サブセットとして扱うのは適切ではないので何か処理を施す必要がある。今回は、「取引先区分コード」は「<b>分類 (Resource)</b>」として機能しているので、別のエンティティとして切り出す。</p>

<p><img src="http://hamasyou.com/images/ttypedatabase/subset_resource.gif" alt="別のエンティティとしてあつかう" /></p>

<p><img src="http://hamasyou.com/images/ttypedatabase/subset_object2.gif" alt="別のエンティティとしてあつかう(オブジェクト図)" /></p>

<p><i>※ <b>ここでは、UMLを使ってオブジェクト設計の図になっているが、実際はデータベース設計の話をしている</b>。オブジェクト指向であれば、取引先Aのインスタンスは同一のモノと判断すると思われる。が、ここではデータベースのエンティティレベルの話をしているので、別のインスタンスとして表してある。</i></p>

<p><b class="red">区分コード(種別コード)として使われるものは、サブセットとして表現する</b>。</p>

<h2>参考</h2>


<ul>
<li><p>著者のWebサイト。本書を保管する内容も多数。
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://www.sdi-net.co.jp/logico-index.htm" rel="external nofollow">SDI</a></p></li>
<li><p>テーブル設計の基礎力がつく本です。</p></li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883731340/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>渡辺式とよばれる、データモデリング手法を解説した本。こちらもお勧め。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>わかりやすさで選ぶなら、本書もはずせない逸品です。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>モデリングのパターンを解説した本。おすすめ。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
