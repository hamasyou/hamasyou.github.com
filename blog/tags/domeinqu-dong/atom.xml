<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ドメイン駆動 | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/domeinqu-dong/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-14T13:15:36+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[実践プログラミングDSL ドメイン特化言語の設計と実装のノウハウ]]></title>
    <link href="http://hamasyou.com/blog/2012/09/13/4798125393/"/>
    <updated>2012-09-13T10:17:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/09/13/4798125393</id>
    <content type="html"><![CDATA[<!-- more -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ドメイン駆動]]></title>
    <link href="http://hamasyou.com/blog/2008/06/29/4798116173/"/>
    <updated>2008-06-29T22:46:00+09:00</updated>
    <id>http://hamasyou.com/blog/2008/06/29/4798116173</id>
    <content type="html"><![CDATA[<p>本書は、<strong>ドメイン駆動設計（DDD:Domain Driven Design）</strong>について書かれているで、<strong>ドメインモデル</strong>、エンタープライズアプリケーションアーキテクチャ、アーキテクチャパターン、テスト駆動開発を勉強する本です。</p>

<p>この本のお勧めの点の一つが、筆者の経験をもとにした生きたサンプルにあります。「システム開発は○○の理由でドメイン駆動設計を行ったほうがよい。こういう背景があって、こういうアーキテクチャパターンの適用を考えていく。」こういった生きた経験が本書にちりばめられています。</p>

<p>対象読者は業務アプリケーション開発に携わるアーキテクチャ、システムエンジニア、開発者さん達です。最近は定着したドメイン駆動設計（ドメイン駆動開発）という言葉ですが、現場で実際に使われているのは実は少ないのではないでしょうか。ドメイン駆動で設計するとはどういったことなのか？本書を読めば、新しい視点が学べると思います。お薦めの一冊です。</p>

<!-- more -->




<h2>ドメイン駆動設計とは</h2>


<p><blockquote><p>この本の最大のテーマは、ドメインモデルをクリーンに作りつつ、永続記憶とも仲良くする方法である。ドメインモデルのようなもののための永続記憶はどのように構成されるかを示し、ドメインモデルとデータベースの間に橋をかける。</p></p><p><p></p><footer><strong>本書:序章より</strong></footer></blockquote></p>

<h3>ユースケースとトランザクションスクリプト</h3>


<p>ユースケースとはシステムの一つの機能（振る舞い）をユーザの視点から記述するものです。著者の Jimmy Nilsson は、かつてはユースケース一つにつき一つのクラスを作って機能を設計していたそうです。おそらく、いわゆる「3階層アーキテクチャのビジネスロジック層における<strong>サービスクラス</strong>」のことだと思われます。</p>

<p>この方法で設計を行うと、機能を呼び出して結果を得るのに一つのサービスクラスの一つのメソッドを呼び出すだけという構造になります。これが手続き型のトランザクションスクリプトというアーキテクチャパターンです。ユースケースを一つにつきサービスクラスを一つ作ると、一つの機能がそのクラスにカプセル化され処理の見通しはよくなります。</p>

<h3>ドメイン駆動設計（Domain Driven Design）を重視する理由</h3>


<p>ユースケースは確かに顧客との話し合いにはとても有効なものです。しかし、システムを設計するのにユースケースにとらわれる必要はないというのが筆者らの主張のようです。ユースケースでシステムの外観（インターフェース）を設計し、モデルによってドメインの主要コンセプト、業務のコアを定義し設計していくというのが効率的なシステム開発につながるのではないかと考えています。</p>

<p>最近の技術の発達のおかげで、顧客とモデルをベースに議論を行うことも不可能ではなくなってきました。</p>

<h3>オブジェクト指向とドメインモデル</h3>


<p>モデルを重視してシステムを設計すればおのずとオブジェクト指向でシステムを開発することになります。これをすんなり実装に落とすとなれば、当然ドメインモデルパターンのアーキテクチャを適用するのが自然の流れです。</p>

<p>ドメインをモデリングし、それをすんなり実装に落とすためにビジネスロジックにドメインモデルパターンを適用するのがドメイン駆動設計のコアの考え方です。</p>

<h2>ドメインモデルとデータベース</h2>




<h3>データベースの設計方針</h3>


<p>ドメインモデルで設計を進めていくと、当然データベースの設計をドメインモデル寄りにする必要が出てきます。しかしここで問題がでてくることになります。</p>

<p>データベースは今でもリレーショナルデータベースが一般的に使われています。リレーショナルデータベースは集合を基礎としたものになっています。ドメインモデルも集合を基礎としているのは変わりません。しかしドメインモデル（オブジェクト指向）はオブジェクトのデータ構造を出来るだけカプセル化し、振る舞いをオブジェクトに持たせようとするためデータベースのモデルと集合の粒度が異なるのです。</p>

<p><blockquote><p>設計ということでは、粒度が大きく異なる。例を使ってこの点を明らかにしよう。特定の人物について、家庭用電話番号ひとつと仕事用電話番号ひとつを管理したいとする。（中略）</p></p><p><p>ここで重要なのは、1:1でもすべてのカラムが通常一つのテーブルで定義されていることである。オブジェクト指向モデルでは、Person と PhoneNumber の2つのクラスを作るのが普通だろう。そして Person のインスタンスは 2つの PhoneNumber インスタンスを組み合わせたものになる。リレーショナルモデルでも同じようなことができなわけではないが、通常は無意味である。<b>リレーショナルモデルでは、テーブルの定義に動作を結び付けたりはしないので、定義を再利用しようなどとは考えない。これはオブジェクト指向モデルの逆である。</b></p></p><p><p></p><footer><strong>本書:第1章「尊重すべき価値」P.19より</strong></footer></blockquote></p>

<p>もう一つあるのは、データベースは継承をサポートしないことです。つまり、ポリモーフィズムが実現できないのです。オブジェクト指向では継承（ポリモーフィズム）は重要な概念です。</p>

<h3>データマッパー（O/Rマッパー）</h3>


<p>上で述べたようなデータベースモデルとオブジェクト指向モデルの乖離（かいり）のことを<strong>インピーダンスミスマッチ</strong>と呼びます。そして、このインピーダンスミスマッチを埋める目的で導入されるものに、データマッパー（O/Rマッパー）があります。Java では Hibernate が有名です。</p>

<h2>本書に書いてあること</h2>




<ul>
<li>ドメイン駆動設計</li>
<li>ドメインモデルが重要な理由</li>
<li>アーキテクチャパターンとしてのドメインモデルの有効性</li>
<li>テスト駆動開発によるモデルの見つけ方</li>
<li>ドメインモデルに対するルール</li>
<li>永続化方針</li>
<li>PoEAA の応用としてのインフラパターン</li>
<li>NHibernate（.Net ようのO/Rマッパー）の導入</li>
<li>設計テクニック：SOA、DI、AOP</li>
<li>UIに関する設計</li>
<li>ドメインモデルパターン再考</li>
</ul>


<p>ドメインモデルを現場にどうやって適用するか、なぜドメインモデルなのか、ドメインモデルを使った実際の設計例などが知りたい人は、ぜひ本書を読んでください。440ページ近くありますが、すんなり読めてしまうくらいどっぷりはまれます。</p>

<h2>参考</h2>




<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321125215/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109037/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
</feed>
