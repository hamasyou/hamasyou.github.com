<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/ruby/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-13T15:33:02+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Movable TypeからGitHub+Octopressに乗り換える手順]]></title>
    <link href="http://hamasyou.com/blog/2014/02/13/movable-type-to-octopress/"/>
    <updated>2014-02-13T10:53:07+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/13/movable-type-to-octopress</id>
    <content type="html"><![CDATA[<p>今まではブログを <em>ロリポップ</em> + <em>Movable Type</em> でやっていましたが、ブログデザインを変更したくなり、ついでにブログ環境も変更しました。</p>

<p>Movable Type から <em>WordPress</em> に乗り換えても良かったんですが、エンジニアっぽいブログ環境ってなんだろうと考えた末、<strong>GitHub Pages</strong> と <strong>Octopress</strong> を使ってブログ環境を作ることにしました。</p>

<p><a href="http://octopress.org/">Octopress</a> は <a href="http://jekyllrb.com/">Jekyll</a> を使ってブログ環境を作るためのフレームワークで、Jekyll はブログのような静的サイトを作るための Ruby のファイルジェネレータになります。</p>

<p><a href="http://pages.github.com/">GitHub Pages</a> と組み合わせると無料でブログを始めることができます。</p>

<p>移行でおこなったことの手順です。</p>

<!-- more -->


<h2>手順</h2>

<ol>
<li>公開用のサーバ設定

<ol>
<li>GitHub にリポジトリを作成する</li>
<li>Octopress をチェックアウトする</li>
<li>deploy する</li>
</ol>
</li>
<li>ローカルのブログ環境の設定

<ol>
<li>ブログの初期設定をおこなう</li>
<li>テーマを変更する</li>
<li>最初の記事を書いてみる</li>
</ol>
</li>
<li>環境をバックアップする

<ol>
<li>BitBucket にリポジトリを作成する</li>
<li>BitBucket にソースをプッシュする</li>
</ol>
</li>
<li>プラグインをつかう

<ol>
<li>記事にタグをつける</li>
</ol>
</li>
</ol>


<h2>公開用のサーバ設定</h2>

<h3>GitHub にリポジトリを作成する</h3>

<p>まず最初に GitHub にサイト公開用のリポジトリを作成します。</p>

<p><a href="https://github.com/">GitHub</a> にログインして、リポジトリを作成します。リポジトリ名は <strong>username.github.io</strong> とします。<code>username</code> の部分を自分のアカウント名に読みかえてください。僕の場合は hamasyou.github.io になります。</p>

<p>このリポジトリが公開用のサイトになり、<a href="http://username.github.io/">http://username.github.io/</a> が URL になります。</p>

<p><img src="/images/2014-02-13-movable-type-to-octopress-01.png" alt="リポジトリ作成" /></p>

<h3>Octopress をチェックアウトする</h3>

<p>つぎに、ブログ環境を作成するために <a href="http://pages.github.com/">Octopress</a> を github からチェックアウトします。<code>username</code> のところは自分のアカウント名です。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>git clone git@github.com:imathis/octopress.git username.github.io</span><span class='line output'>Cloning into &lsquo;username.github.io&rsquo;&hellip;
</span><span class='line output'>remote: Reusing existing pack: 10340, done.
</span><span class='line output'>remote: Counting objects: 20, done.
</span><span class='line output'>remote: Compressing objects: 100% (20/20), done.
</span><span class='line output'>remote: Total 10360 (delta 4), reused 3 (delta 0)
</span><span class='line output'>Receiving objects: 100% (10360/10360), 2.73 MiB | 785.00 KiB/s, done.
</span><span class='line output'>Resolving deltas: 100% (4949/4949), done.
</span><span class='line output'>Checking connectivity&hellip; done.</p>
</span><span class='line output'>
</span><span class='line output'><p>$ cd username.github.io</span></code></pre></td></tr></table></div></div>
        </div></p>

<h3>deploy する</h3>

<p>Octopress の初期設定を行い、deploy を行います。この時点でデプロイしたくない場合は最後のコマンド <code>bundle exec rake gen_deploy</code> を実行しないようにします。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>bundle install &ndash;path vendor/bundle</span><span class='line command'>bundle exec rake install</span><span class='line command'>bundle exec rake setup_github_pages</span><span class='line output'>Enter the read/write url for your repository
</span><span class='line output'>(For example, &lsquo;git@github.com:your_username/your_username.github.io.git)
</span><span class='line output'>           or 'https://github.com/your_username/your_username.github.io&rsquo;)
</span><span class='line output'>Repository url: <kbd>git@github.com:username/username.github.io.git<kbd>
</span><span class='line command'>bundle exec rake gen_deploy</span></code></pre></td></tr></table></div></div>
        </div></p>

<h2>ブログの初期設定を行う</h2>

<p>Octopress のブログ設定値は <code>_config.yml</code> というファイルになります。<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a> を参考に変更します。</p>

<h3>テーマを変更する</h3>

<p>デフォルトテーマでも十分カッコいいですが、テーマ変更もできます。Octopress のテーマは <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes</a> にまとまっているので、よさそうなテーマを選んでインストールします。</p>

<p>テーマのインストールは、<code>.themes</code> ディレクトリにテーマのリポジトリをチェックアウトして <code>bundle exec rake install['theme-name']</code> でおこないます。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>git clone git@github.com:kAworu/octostrap3.git .themes/octostrap3</span><span class='line command'>bundle exec rake install[&lsquo;octostrap3&rsquo;]</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><a href="http://opthemes.com/"><img src="/images/2014-02-13-movable-type-to-octopress-02.png" alt="Octopress-Themes" /></a></p>

<h3>あたらしい記事を作成する</h3>

<p>新しい記事を書くには <code>bundle exec rake new_post['title']</code> とします。<code>title</code> 部分が記事のファイル名に使われるので、この時点では英語で入力するほうがよいです。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>bundle exec rake new_post[&lsquo;movable-type-to-octopress&rsquo;]</span><span class='line output'>mkdir -p source/<em>posts
</span><span class='line output'>Creating new post: source/</em>posts/2014-02-13-movable-type-to-octopress.markdown</span></code></pre></td></tr></table></div></div>
        </div></p>

<pre><code>---
layout: post
title: "movable-type-to-octopress"
date: 2014-02-13 13:18:04 +0900
comments: true
categories:
---
</code></pre>

<p>記事のタイトルに日本語を使いたいときはファイル中の <code>title</code> 部分を書き換えます。また、カテゴリやタグ、ページのキーワードなどもここで変更できます。</p>

<pre><code>---
layout: post
title: "Movable TypeからGitHub+Octopressに乗り換える手順"
date: 2014-02-13 13:18:04 +0900
comments: true
categories: [Blog]
keywords: "Movable Type,GitHub,Octopress,Blog,Liquid,Jekyll,Ruby"
tags: [Movable Type,GitHub,Octopress,Liquid,Jekyll,Ruby]
---
</code></pre>

<h2>BitBucket にソースをコミットする</h2>

<p>GitHub もリポジトリサービスですが、現在は Public なリポジトリしか無料で作ることができません。そこで、<strong>BitBucket</strong> という別のリポジトリサービスを利用して環境をまるごとバックアップします。</p>

<p><a href="https://bitbucket.org/"><img src="http://upload.wikimedia.org/wikipedia/en/f/fc/Bitbucket_Logo.png" alt="BitBucket" /></a></p>

<p>BitBucket は Private なリポジトリが作成できるので、ブログ環境は BitBucket で管理して、サイトデータだけを GitHub にデプロイするようにします。</p>

<h3>リポジトリを作成する</h3>

<p>BitBucket にリポジトリを作成する方法は、GitHub とほとんど変わりません。こちらもリポジトリ名を <code>username.github.io</code> にしておきます。</p>

<p><img src="/images/2014-02-13-movable-type-to-octopress-03.png" alt="BitBucket リポジトリ作成" /></p>

<p>リポジトリを作成したら、ソースコードをプッシュします。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>git remote add bitbucket git@bitbucket.org:username/username.github.io.git</span><span class='line command'>git add .</span><span class='line command'>git commit -m &lsquo;init&rsquo;</span><span class='line command'>git push bitbucket source</span></code></pre></td></tr></table></div></div>
        </div></p>

<h2>その他</h2>

<h3>記事にタグをつけられるようにする</h3>

<p>Octopress にはいろいろなプラグインがあります。自作することも簡単にできます。デフォルトではタグというものが Octopress にはありませんが、カテゴリ機能を参考にすると簡単にタグを管理できるようになります。</p>

<p><a href="http://rcmdnk.github.io/blog/2013/04/12/blog-octopress/">Octopressでのタグ管理</a></p>

<h3>独自ドメインで運用する</h3>

<p><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages</a> の手順でできます。</p>

<p>要約すると、<code>CNAME</code> というファイルを作成して、メインのサイトドメインを登録する。</p>

<pre><code class="plain source/CNAME">hamasyou.com
</code></pre>

<p>独自ドメインを取ったら、DNS の設定で A レコードを <code>192.30.252.153</code> と <code>192.30.252.154</code> に向けます。いろいろなサイトで <code>204.232.175.78</code> のアドレスを設定するように書かれていますが、変わったっぽい？ですね。不安なら、A レコード3つ登録すればいいと思います。</p>

<pre><code>hamasyou.com A 204.232.175.78
hamasyou.com A 192.30.252.153
hamasyou.com A 192.30.252.154
</code></pre>

<p>これで、時間がたてば独自ドメイン名で GitHub のページが表示されるようになります。</p>

<h3>Markdown で <code>Definition LIST</code> を使えるようにする</h3>

<p>Octopress の使っている Markdown パーサの rdiscount のバージョンを上げます。2.1.7 からデフォルトで <em>Definition LIST（dl, dt, dd）</em> の拡張記法が使えるようになっているのでアップデート推奨です。</p>

<p><code>Gemfile</code> を開いて <code>gem 'rdiscount', '~&gt; 2.0.7'</code> を <code>gem 'rdiscount'</code> に書き換えます。</p>

<pre><code>- gem 'rdiscount', '~&gt; 2.0.7'
+ gem 'rdiscount
</code></pre>

<p>bundle update します。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>bundle update rdiscount</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>これで Markdown で Definition LIST がデフォルトで使えるようになります。</p>

<pre><code>これがキーワード
: キーワードの説明

&lt;dl&gt;
  &lt;dt&gt;これがキーワード&lt;/dt&gt;
  &lt;dd&gt;キーワードの説明&lt;/dd&gt;
&lt;/dl&gt;
</code></pre>

<h3>Movable Type の記事を Markdown に変換する</h3>

<p>Movable Type の記事エクスポートを Markdown 形式に変換するコードを見つけたので、移行にはこれを使いました。ちょっと手はいれましたが。</p>

<p><div><script src='https://gist.github.com/2351046.js?file=mt_to_markdown.rb'></script>
<noscript><pre><code>#!/usr/bin/env ruby

require &#39;date&#39;
require &#39;mustache&#39;
require &#39;stringex&#39;
require &#39;cgi&#39;

export     = File.open(ARGV[0])
target_dir = ARGV[1]

class Post &lt; Mustache
  self.template = &lt;&lt;-MARKDOWN
---
layout: post
title: &quot;{{title}}&quot;
date: {{formatted_date}}
comments: {{comments}}
categories: {{category}}
author: {{author}}
---

{{formatted_body}}
MARKDOWN

  attr_accessor :author, :title, :category, :comments, :status, :body

  def initialize
    @body = []
  end

  def date=(date)
    case date
    when String
      @date = DateTime.strptime(date, &quot;%m/%d/%Y %I:%M:%S %p&quot;)
    else
      @date = date
    end
  end

  def date
    @date
  end

  def formatted_date
    @date.strftime(&quot;%Y-%m-%d %H:%M&quot;)
  end

  def comments=(comments)
    @comments = comments == &quot;1&quot; ? true : false
  end

  def formatted_body
    CGI.unescapeHTML(body.join).
      gsub(/&lt;a href=&quot;(.*?)&quot;&gt;*(.*?)&lt;\/a&gt;/i, &#39;[\2](\1)&#39;).
      gsub(&quot;&lt;!--more--&gt;&quot;, &quot;\n\n&lt;!-- more --&gt;\n\n&quot;)
  end

  def file_name
    &quot;#{date.strftime(&quot;%Y-%m-%d&quot;)}-#{title.to_url}.markdown&quot;
  end
end

posts = [Post.new]

KEYWORDS = /(AUTHOR|TITLE|STATUS|COMMENTS|CATEGORY|DATE): (.*)/

def attr_and_value(line)
  line =~ KEYWORDS
  [&quot;#{$1.downcase}=&quot;, $2]
end

puts &quot; # Reading from data &#39;#{ARGV[0]}&#39; ...&quot;

puts &quot; # Generating Markdown ...&quot;

comment_section = false

export.each do |line|
  if line.strip == &quot;--------&quot;
    posts &lt;&lt; Post.new
    print &#39;.&#39;
    comment_section = false
    next
  end

  next if comment_section

  case line.strip
  when KEYWORDS
    posts.last.send(*attr_and_value(line))
  when /BODY/
    next
  when &quot;-----&quot;
    next
  when /COMMENT:/
    comment_section = true
    next
  else
    posts.last.body &lt;&lt; line
  end
end

puts
puts &quot; # Writing files to #{target_dir} ...&quot;
`mkdir -p #{target_dir}`
`cd #{target_dir} &amp;&amp; rm -rf _posts &amp;&amp; mkdir _posts`

ok, fails = 0, 0

posts.each do |post|
  begin
    File.open(File.join(target_dir, &quot;_posts&quot;, post.file_name), &quot;w+&quot;) { |f| f.puts post.render }
    puts &quot; -&gt; #{post.file_name}&quot;
    ok += 1
  rescue
    puts &quot; # Could not write file for &#39;#{post.title}&#39;&quot;
    fails += 1
  end
end

puts
puts &quot; # All done! (#{ok}/#{fails})&quot;
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jpmobile と kaminari を使ったときに invalid byte sequence in Shift_JIS が表示される対応]]></title>
    <link href="http://hamasyou.com/blog/2011/06/14/jpmobile-kaminari-invalid-byte-sequence-in-shift-jis/"/>
    <updated>2011-06-14T11:29:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/06/14/jpmobile-kaminari-invalid-byte-sequence-in-shift-jis</id>
    <content type="html"><![CDATA[<p>jpmobile と kaminari を組み合わせたときに invalid byte sequence in Shift_JIS が表示される問題の原因と対策です。</p>

<p><section></p>

<h4>環境</h4>




<dl><dt>Rails</dt><dd>3.0.7</dd><dt>jpmobile</dt><dd>0.1.6</dd><dt>kaminari</dt><dd>0.12.4</dd></dl>


<p></section></p>

<!-- more -->


<p>jpmobile の mobile_filter を通して kaminari でページングを行うときに、invalid byte sequence in Shift_JIS エラーが出る場合があります。</p>

<p>これは、kaminari で生成するページングリンク内に、UTF-8 の文字エンコーディングの日本語文字が入っているのが原因です。</p>

<p>kaminari がページリンクを作成するときに、日本語文字をパーセントエンコード（URLエンコード）していて、jpmobile の mobile_filter がエンコードされている文字を UTF-8 だと認識出来ずに表示してしまうのが原因になっています。</p>

<p>この組み合わせで kaminari のページリンク内に日本語パラメータがはいってしまうのは、おそらくフォームのサブミットボタンの value が原因だと思います。</p>

<p>ほとんどの場合、サブミットボタンの value は必要ないと思うので、submit_tag の :name オプションに nil を設定してサブミットボタンの value を送らないようにするといいかと思います。</p>

<pre><code class="html+erb">&lt;%= form_tag user_path do %&gt;
  &lt;%= select_tag "category", options_from_collection_for_select(Category.all, :id, :label, params[:category]) %&gt;
  &lt;%= submit_tag "表示", :name =&gt; nil %&gt;
&lt;% end %&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kaminari の paginate_array が便利]]></title>
    <link href="http://hamasyou.com/blog/2011/06/14/kaminari-paginate-array/"/>
    <updated>2011-06-14T09:31:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/06/14/kaminari-paginate-array</id>
    <content type="html"><![CDATA[<p>will_paginate に代わるページングのライブラリ、kaminari ですが、ページングが scope 扱いで配列に対して使えなかったのでちょっと不便なときがあったのですが、なんと paginate_array なるものを発見しました。</p>

<p><section></p>

<h4>環境</h4>




<dl><dt>kaminari</dt><dd>0.12.4</dd></dl>


<p></section></p>

<!-- more -->


<p><a href="http://rubygems.org/gems/kaminari" rel="external nofollow">kaminari</a> の <strong>Kaminari.paginate_array</strong> が激しく便利！</p>

<p>もともと、kaminari が扱う page は scope だったかと思います。なので、配列（Array）に対しては使えませんでした。</p>

<p>で、ちょっとソースを見ていたらびっくりするものを発見！</p>

<p><strong>Kaminari.paginate_array</strong></p>

<p>なんと、配列をページングできるようになっていました。これで、Entity.all したものもページングできるようになりますね。</p>

<p>使い方は、scope の方の page と同じ。</p>

<pre><code class="ruby">Kaminari.paginate_array(array_obj).page(params[:page])
</code></pre>

<p>激しくべんり！</p>

<p><section></p>

<h4>kaminari の解説で参考になるサイト</h4>


<p><a href="http://memo.yomukaku.net/entries/238" rel="external nofollow">Kaminariの使い方 Rails3時代のpaginationの標準候補 - YomuKaku Memo</a></p>

<p></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby から Gmail を受信する（マルチパート編）]]></title>
    <link href="http://hamasyou.com/blog/2011/03/17/ruby-gmail/"/>
    <updated>2011-03-17T22:24:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/03/17/ruby-gmail</id>
    <content type="html"><![CDATA[<p>Ruby1.9.2 で mail を使って Gmail から添付ファイルやメール本文を受信する方法のメモです。</p>

<p>かなり力技的なところがあるので、もっといいプログラムになると思いいますが、メモということで。</p>

<p><section></p>

<h4>バージョン</h4>




<dl><dt>Ruby</dt><dd>1.9.2</dd>
<dt>Rails</dt><dd>3.0.4</dd>
<dt>mail</dt><dd>2.2</dd>
</dl>


<p></section></p>

<!-- more -->




<h2>必要なライブラリ</h2>




<h3>mikel / mail</h3>




<pre><a href="https://github.com/mikel/mail" rel="external nofollow">mail</a></pre>


<p>Ruby1.8 までは、TMail というライブラリを使うとメール処理を簡易に書けるようですが、Ruby1.9から文字エンコーディング周りの問題でこのライブラリを使うと良いことを知りました。</p>

<pre class="console">gem install mail</pre>


<p>Rails で使う場合は次のようにします。</p>

<pre class="console">rails plugin install https://github.com/mikel/mail</pre>




<h2>サンプルソースコード</h2>


<pre><code class="ruby">require "mail"

Mail.defaults do
  retriever_method :imap, {:address =&gt; "imap.gmail.com",
                           :port =&gt; 993,
                           :user_name =&gt; "&lt;mailaddress@domain.com&gt;",
                           :password =&gt; "&lt;password&gt;",
                           :enable_ssl =&gt; true}
end

Mail.all(:delete_after_find =&gt; true).each do |email|
  begin
    if !email.attachments.blank?
      subject = email.subject   # =&gt; 件名（日本語可OK） UTF-8 で取得できる
      body = email.parts[0].body.to_s.encode("UTF-8", "ISO-2022-JP")    # =&gt; 本文は UTF-8 に変換する必要がある
      from = email[:from]       # =&gt; "\"濱田 章吾\" hamasyou@gmail.com"
      sent_at = email.date
      email.attachments.each do |attachment|
        tmp = File.new("tmp/photos/#{attachment.filename}", "wb")
        tmp &lt;&lt; attachment.read.force_encoding("UTF-8")
        tmp.close
      end
    end
  rescue =&gt; ignore
    p "[error]:" + ignore.to_s
  end
end
</code></pre>

<p>ここでは、マルチパートの場合メールのパートの最初に本文があることを決め打ちしています。また、メールのエンコーディングが ISO-2022-JP であることも決め打ちしています。</p>

<p>メール本文のエンコーディングを調べて、それを UTF-8 にするようにしたほうが良いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] ActiveRecord でツリー関係の関連を定義する]]></title>
    <link href="http://hamasyou.com/blog/2010/11/20/rails-activerecord/"/>
    <updated>2010-11-20T01:54:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/11/20/rails-activerecord</id>
    <content type="html"><![CDATA[<p>Ruby on Rails で、ActiveRecord を使ってツリー関係の関連を定義する方法のメモです。</p>

<p>ツリー関係を表す関連にはひとつのテーブルで表す方法と関連テーブルを使って表す方法とがありますが、今回は関連テーブルを使ってツリー関係を表す方法のメモです。</p>

<p>環境は Rails3.0.1、ActiveRecord3.0.1 で確認しています。</p>

<!-- more -->




<h2>ActiveRecord でツリー関係を表す方法</h2>


<p>下のようなツリー関係のあるモデルを、<em>belongs_to</em>、<em>has_one</em>、<em>has_many</em> を使って表す方法のメモです。</p>

<p><img alt="スクリーンショット（2010-11-20 0.58.43）2.png" src="http://hamasyou.com/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-11-20%200.58.43%EF%BC%892.png" width="693" class="mt-image-none" style="" /></p>

<h3>モデルの説明</h3>


<p>このモデルは、カテゴリ（Category）とカテゴリ関係（CategoryRel）の二つのテーブルを使ってカテゴリのツリー関係を表したものです。</p>

<p>カテゴリ（Category）は親カテゴリを has_one で、サブカテゴリを has_many で保持します。</p>

<p>カテゴリ関連（CategoryRel）は belongs_to で親カテゴリとサブカテゴリをそれぞれ定義しています。</p>

<h4>Category モデル</h4>




<pre class="code">
<span class="keyword">class</span> <span class="class">Category</span> &lt; <span class="class">ActiveRecord::Base</span>
 
  <span class="comment"># 親カテゴリ</span>
  <span class="keyword">has_one</span> <span class="symbol">:parent_rels</span>, <span class="symbol">:class_name</span> =&gt; <span class="literal">&quot;CategoryRel&quot;</span>, <span class="symbol">:foreign_key</span> =&gt; <span class="literal">&quot;sub_category_id&quot;</span>
  <span class="keyword">has_one</span> <span class="symbol">:parent_category</span>, <span class="symbol">:through</span> =&gt; <span class="symbol">:parent_rels</span>, <span class="symbol">:source</span> =&gt; <span class="symbol">:parent_category</span>
 
  <span class="comment"># サブカテゴリ</span>
  <span class="keyword">has_many</span> <span class="symbol">:category_rels</span>
  <span class="keyword">has_many</span> <span class="symbol">:sub_categories</span>, <span class="symbol">:through</span> =&gt; <span class="symbol">:category_rels</span>, <span class="symbol">:source</span> =&gt; <span class="symbol">:sub_category</span>
<span class="keyword">end</span></pre>




<h4>CategoryRel モデル</h4>




<pre class="code">
<span class="keyword">class</span> <span class="class">CategoryRel</span> &lt; <span class="class">ActiveRecord::Base</span>
  <span class="comment"># 親カテゴリ</span>
  <span class="keyword">belongs_to</span> <span class="symbol">:parent_category</span>, <span class="symbol">:class_name</span> =&gt; <span class="literal">&quot;Category&quot;</span>, <span class="symbol">:foreign_key</span> =&gt; <span class="literal">&quot;category_id&quot;</span>
  <span class="comment"># サブカテゴリ</span>
  <span class="keyword">belongs_to</span> <span class="symbol">:sub_category</span>, <span class="symbol">:class_name</span> =&gt; <span class="literal">&quot;Category&quot;</span>, <span class="symbol">:foreign_key</span> =&gt; <span class="literal">&quot;sub_category_id&quot;</span>
<span class="keyword">end</span></pre>




<h3>has_many :through :source</h3>


<p>関連をひとつだけもつ場合には <strong>has_one</strong> を、1対多、多対多 を表す場合には <strong>has_many</strong> を使います。<em>:through</em> オプションと <em>:source</em> オプションはそれぞれ次のような意味です。</p>

<dl>
<dt>:through</dt>
<dd><p>has_many で定義した関連をどういう経路で取得するかを示す。</p></dd>
<dt>:source</dt>
<dd><p>:through で示された経路の先で、どの関連を使用するかを示す。</p></dd>
</dl>




<h3>親カテゴリを表す has_one と外部キーの指定の仕方</h3>


<p>今回の例で見ていくと、カテゴリは親カテゴリを 0 or 1 持ちます。なので、has_one を指定しています。</p>

<p>親カテゴリの定義では、最初に直接の関連であるカテゴリ関連の定義をしています。それが、<code>has_one :parent_rels, :class_name =&gt; &quot;CategoryRel&quot;, :foreign_key =&gt; &quot;sub_category_id&quot;</code> の部分です。</p>

<p>この関連は、:class_name で指定したクラスの関連、すなわちカテゴリ関連になります。カテゴリ関連との関係を <em>:foreign_key</em> で指定しています。親カテゴリは、カテゴリ関連の sub_category_id が自分のIDと一致するレコードのカテゴリのことになるので、:foreign_key には自分のIDと対応するカラムである sub_category_id を指定しています。</p>

<h4>関連のショートカットを定義する</h4>


<p>次に、毎回 parent_rels 関連をたどって親カテゴリオブジェクトを取得するのは面倒くさいので、:through を使ってショートカットを定義しています。それが <code> has_one :parent_category, :through =&gt; :parent_rels, :source =&gt; :parent_category</code> の部分です。</p>

<p><em>:through</em> にはどの経路を使ってオブジェクトを得るかを指定します。:source には :through でたどった先に関連が二つ以上ある場合にどれを使うかを指定します。カテゴリ関連には親カテゴリとサブカテゴリを表す関連があるので、親カテゴリの関連である :parent_category を指定しています。</p>

<p class="option"><em>:source の考え方</em><br />最初、:source は関連の元（ソース）はどっちか？を表すオプションだと思っていたので、自分のインスタンスから見て自分を表すのはどれか？を指定していましたが、これは間違いです。<br /><br />:source オプションは自分がどっちを表すものではなく、<strong>:through で表される経路の取得先を示す</strong>ものです。なので、自分から見て親カテゴリを表す関連はどっちか？を指定します。</p>




<h3>サブカテゴリを表す has_many</h3>


<p>サブカテゴリも、基本的には親カテゴリと同じです。サブカテゴリは複数取り得るので <em>has_many</em> を指定しています。</p>

<p>最初に直接の関連であるカテゴリ関連を has_many で定義します。定義名のみを書いておくと、ActiveRecord がモデル名の規約から適切に関連を定義してくれます。</p>

<p>今回は、カテゴリ関連の複数形である :category_rels を has_many で定義しているので、ActiveRecord が自動的に CateogryRel モデルの関連を張ってくれます。</p>

<p>次に、<code>has_many :sub_categories, :through =&gt; :category_rels, :source =&gt; :sub_category</code> の定義で category_rels の関連を経由して、カテゴリ関連の :sub_category で定義されている関連をサブカテゴリとして定義しています。</p>

<h2>まとめ</h2>


<p>説明がわかりずらく、逆にわからなくなったかもしれませんが、要は、has_many :through でたどった先に複数の関連がある場合（厳密には規約から推測できない関連があった場合）、:source を使ってどの関連をソースにしてオブジェクトを集めるかを指定する必要があるということです。</p>
]]></content>
  </entry>
  
</feed>
