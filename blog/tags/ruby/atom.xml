<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/ruby/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-12T23:04:00+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jpmobile と kaminari を使ったときに invalid byte sequence in Shift_JIS が表示される対応]]></title>
    <link href="http://hamasyou.com/blog/2011/06/14/jpmobile-kaminari-invalid-byte-sequence-in-shift-jis/"/>
    <updated>2011-06-14T11:29:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/06/14/jpmobile-kaminari-invalid-byte-sequence-in-shift-jis</id>
    <content type="html"><![CDATA[<p>jpmobile と kaminari を組み合わせたときに invalid byte sequence in Shift_JIS が表示される問題の原因と対策です。</p>

<p><section></p>

<h4>環境</h4>




<dl><dt>Rails</dt><dd>3.0.7</dd><dt>jpmobile</dt><dd>0.1.6</dd><dt>kaminari</dt><dd>0.12.4</dd></dl>


<p></section></p>

<!-- more -->


<p>jpmobile の mobile_filter を通して kaminari でページングを行うときに、invalid byte sequence in Shift_JIS エラーが出る場合があります。</p>

<p>これは、kaminari で生成するページングリンク内に、UTF-8 の文字エンコーディングの日本語文字が入っているのが原因です。</p>

<p>kaminari がページリンクを作成するときに、日本語文字をパーセントエンコード（URLエンコード）していて、jpmobile の mobile_filter がエンコードされている文字を UTF-8 だと認識出来ずに表示してしまうのが原因になっています。</p>

<p>この組み合わせで kaminari のページリンク内に日本語パラメータがはいってしまうのは、おそらくフォームのサブミットボタンの value が原因だと思います。</p>

<p>ほとんどの場合、サブミットボタンの value は必要ないと思うので、submit_tag の :name オプションに nil を設定してサブミットボタンの value を送らないようにするといいかと思います。</p>

<pre><code class="html+erb">&lt;%= form_tag user_path do %&gt;
  &lt;%= select_tag "category", options_from_collection_for_select(Category.all, :id, :label, params[:category]) %&gt;
  &lt;%= submit_tag "表示", :name =&gt; nil %&gt;
&lt;% end %&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kaminari の paginate_array が便利]]></title>
    <link href="http://hamasyou.com/blog/2011/06/14/kaminari-paginate-array/"/>
    <updated>2011-06-14T09:31:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/06/14/kaminari-paginate-array</id>
    <content type="html"><![CDATA[<p>will_paginate に代わるページングのライブラリ、kaminari ですが、ページングが scope 扱いで配列に対して使えなかったのでちょっと不便なときがあったのですが、なんと paginate_array なるものを発見しました。</p>

<p><section></p>

<h4>環境</h4>




<dl><dt>kaminari</dt><dd>0.12.4</dd></dl>


<p></section></p>

<!-- more -->


<p><a href="http://rubygems.org/gems/kaminari" rel="external nofollow">kaminari</a> の <strong>Kaminari.paginate_array</strong> が激しく便利！</p>

<p>もともと、kaminari が扱う page は scope だったかと思います。なので、配列（Array）に対しては使えませんでした。</p>

<p>で、ちょっとソースを見ていたらびっくりするものを発見！</p>

<p><strong>Kaminari.paginate_array</strong></p>

<p>なんと、配列をページングできるようになっていました。これで、Entity.all したものもページングできるようになりますね。</p>

<p>使い方は、scope の方の page と同じ。</p>

<pre><code class="ruby">Kaminari.paginate_array(array_obj).page(params[:page])
</code></pre>

<p>激しくべんり！</p>

<p><section></p>

<h4>kaminari の解説で参考になるサイト</h4>


<p><a href="http://memo.yomukaku.net/entries/238" rel="external nofollow">Kaminariの使い方 Rails3時代のpaginationの標準候補 - YomuKaku Memo</a></p>

<p></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby から Gmail を受信する（マルチパート編）]]></title>
    <link href="http://hamasyou.com/blog/2011/03/17/ruby-gmail/"/>
    <updated>2011-03-17T22:24:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/03/17/ruby-gmail</id>
    <content type="html"><![CDATA[<p>Ruby1.9.2 で mail を使って Gmail から添付ファイルやメール本文を受信する方法のメモです。</p>

<p>かなり力技的なところがあるので、もっといいプログラムになると思いいますが、メモということで。</p>

<p><section></p>

<h4>バージョン</h4>




<dl><dt>Ruby</dt><dd>1.9.2</dd>
<dt>Rails</dt><dd>3.0.4</dd>
<dt>mail</dt><dd>2.2</dd>
</dl>


<p></section></p>

<!-- more -->




<h2>必要なライブラリ</h2>




<h3>mikel / mail</h3>




<pre><a href="https://github.com/mikel/mail" rel="external nofollow">mail</a></pre>


<p>Ruby1.8 までは、TMail というライブラリを使うとメール処理を簡易に書けるようですが、Ruby1.9から文字エンコーディング周りの問題でこのライブラリを使うと良いことを知りました。</p>

<pre class="console">gem install mail</pre>


<p>Rails で使う場合は次のようにします。</p>

<pre class="console">rails plugin install https://github.com/mikel/mail</pre>




<h2>サンプルソースコード</h2>


<pre><code class="ruby">require "mail"

Mail.defaults do
  retriever_method :imap, {:address =&gt; "imap.gmail.com",
                           :port =&gt; 993,
                           :user_name =&gt; "&lt;mailaddress@domain.com&gt;",
                           :password =&gt; "&lt;password&gt;",
                           :enable_ssl =&gt; true}
end

Mail.all(:delete_after_find =&gt; true).each do |email|
  begin
    if !email.attachments.blank?
      subject = email.subject   # =&gt; 件名（日本語可OK） UTF-8 で取得できる
      body = email.parts[0].body.to_s.encode("UTF-8", "ISO-2022-JP")    # =&gt; 本文は UTF-8 に変換する必要がある
      from = email[:from]       # =&gt; "\"濱田 章吾\" hamasyou@gmail.com"
      sent_at = email.date
      email.attachments.each do |attachment|
        tmp = File.new("tmp/photos/#{attachment.filename}", "wb")
        tmp &lt;&lt; attachment.read.force_encoding("UTF-8")
        tmp.close
      end
    end
  rescue =&gt; ignore
    p "[error]:" + ignore.to_s
  end
end
</code></pre>

<p>ここでは、マルチパートの場合メールのパートの最初に本文があることを決め打ちしています。また、メールのエンコーディングが ISO-2022-JP であることも決め打ちしています。</p>

<p>メール本文のエンコーディングを調べて、それを UTF-8 にするようにしたほうが良いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] ActiveRecord でツリー関係の関連を定義する]]></title>
    <link href="http://hamasyou.com/blog/2010/11/20/rails-activerecord/"/>
    <updated>2010-11-20T01:54:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/11/20/rails-activerecord</id>
    <content type="html"><![CDATA[<p>Ruby on Rails で、ActiveRecord を使ってツリー関係の関連を定義する方法のメモです。</p>

<p>ツリー関係を表す関連にはひとつのテーブルで表す方法と関連テーブルを使って表す方法とがありますが、今回は関連テーブルを使ってツリー関係を表す方法のメモです。</p>

<p>環境は Rails3.0.1、ActiveRecord3.0.1 で確認しています。</p>

<!-- more -->




<h2>ActiveRecord でツリー関係を表す方法</h2>


<p>下のようなツリー関係のあるモデルを、<em>belongs_to</em>、<em>has_one</em>、<em>has_many</em> を使って表す方法のメモです。</p>

<p><img alt="スクリーンショット（2010-11-20 0.58.43）2.png" src="http://hamasyou.com/images/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%EF%BC%882010-11-20%200.58.43%EF%BC%892.png" width="693" class="mt-image-none" style="" /></p>

<h3>モデルの説明</h3>


<p>このモデルは、カテゴリ（Category）とカテゴリ関係（CategoryRel）の二つのテーブルを使ってカテゴリのツリー関係を表したものです。</p>

<p>カテゴリ（Category）は親カテゴリを has_one で、サブカテゴリを has_many で保持します。</p>

<p>カテゴリ関連（CategoryRel）は belongs_to で親カテゴリとサブカテゴリをそれぞれ定義しています。</p>

<h4>Category モデル</h4>




<pre class="code">
<span class="keyword">class</span> <span class="class">Category</span> &lt; <span class="class">ActiveRecord::Base</span>
 
  <span class="comment"># 親カテゴリ</span>
  <span class="keyword">has_one</span> <span class="symbol">:parent_rels</span>, <span class="symbol">:class_name</span> =&gt; <span class="literal">&quot;CategoryRel&quot;</span>, <span class="symbol">:foreign_key</span> =&gt; <span class="literal">&quot;sub_category_id&quot;</span>
  <span class="keyword">has_one</span> <span class="symbol">:parent_category</span>, <span class="symbol">:through</span> =&gt; <span class="symbol">:parent_rels</span>, <span class="symbol">:source</span> =&gt; <span class="symbol">:parent_category</span>
 
  <span class="comment"># サブカテゴリ</span>
  <span class="keyword">has_many</span> <span class="symbol">:category_rels</span>
  <span class="keyword">has_many</span> <span class="symbol">:sub_categories</span>, <span class="symbol">:through</span> =&gt; <span class="symbol">:category_rels</span>, <span class="symbol">:source</span> =&gt; <span class="symbol">:sub_category</span>
<span class="keyword">end</span></pre>




<h4>CategoryRel モデル</h4>




<pre class="code">
<span class="keyword">class</span> <span class="class">CategoryRel</span> &lt; <span class="class">ActiveRecord::Base</span>
  <span class="comment"># 親カテゴリ</span>
  <span class="keyword">belongs_to</span> <span class="symbol">:parent_category</span>, <span class="symbol">:class_name</span> =&gt; <span class="literal">&quot;Category&quot;</span>, <span class="symbol">:foreign_key</span> =&gt; <span class="literal">&quot;category_id&quot;</span>
  <span class="comment"># サブカテゴリ</span>
  <span class="keyword">belongs_to</span> <span class="symbol">:sub_category</span>, <span class="symbol">:class_name</span> =&gt; <span class="literal">&quot;Category&quot;</span>, <span class="symbol">:foreign_key</span> =&gt; <span class="literal">&quot;sub_category_id&quot;</span>
<span class="keyword">end</span></pre>




<h3>has_many :through :source</h3>


<p>関連をひとつだけもつ場合には <strong>has_one</strong> を、1対多、多対多 を表す場合には <strong>has_many</strong> を使います。<em>:through</em> オプションと <em>:source</em> オプションはそれぞれ次のような意味です。</p>

<dl>
<dt>:through</dt>
<dd><p>has_many で定義した関連をどういう経路で取得するかを示す。</p></dd>
<dt>:source</dt>
<dd><p>:through で示された経路の先で、どの関連を使用するかを示す。</p></dd>
</dl>




<h3>親カテゴリを表す has_one と外部キーの指定の仕方</h3>


<p>今回の例で見ていくと、カテゴリは親カテゴリを 0 or 1 持ちます。なので、has_one を指定しています。</p>

<p>親カテゴリの定義では、最初に直接の関連であるカテゴリ関連の定義をしています。それが、<code>has_one :parent_rels, :class_name =&gt; &quot;CategoryRel&quot;, :foreign_key =&gt; &quot;sub_category_id&quot;</code> の部分です。</p>

<p>この関連は、:class_name で指定したクラスの関連、すなわちカテゴリ関連になります。カテゴリ関連との関係を <em>:foreign_key</em> で指定しています。親カテゴリは、カテゴリ関連の sub_category_id が自分のIDと一致するレコードのカテゴリのことになるので、:foreign_key には自分のIDと対応するカラムである sub_category_id を指定しています。</p>

<h4>関連のショートカットを定義する</h4>


<p>次に、毎回 parent_rels 関連をたどって親カテゴリオブジェクトを取得するのは面倒くさいので、:through を使ってショートカットを定義しています。それが <code> has_one :parent_category, :through =&gt; :parent_rels, :source =&gt; :parent_category</code> の部分です。</p>

<p><em>:through</em> にはどの経路を使ってオブジェクトを得るかを指定します。:source には :through でたどった先に関連が二つ以上ある場合にどれを使うかを指定します。カテゴリ関連には親カテゴリとサブカテゴリを表す関連があるので、親カテゴリの関連である :parent_category を指定しています。</p>

<p class="option"><em>:source の考え方</em><br />最初、:source は関連の元（ソース）はどっちか？を表すオプションだと思っていたので、自分のインスタンスから見て自分を表すのはどれか？を指定していましたが、これは間違いです。<br /><br />:source オプションは自分がどっちを表すものではなく、<strong>:through で表される経路の取得先を示す</strong>ものです。なので、自分から見て親カテゴリを表す関連はどっちか？を指定します。</p>




<h3>サブカテゴリを表す has_many</h3>


<p>サブカテゴリも、基本的には親カテゴリと同じです。サブカテゴリは複数取り得るので <em>has_many</em> を指定しています。</p>

<p>最初に直接の関連であるカテゴリ関連を has_many で定義します。定義名のみを書いておくと、ActiveRecord がモデル名の規約から適切に関連を定義してくれます。</p>

<p>今回は、カテゴリ関連の複数形である :category_rels を has_many で定義しているので、ActiveRecord が自動的に CateogryRel モデルの関連を張ってくれます。</p>

<p>次に、<code>has_many :sub_categories, :through =&gt; :category_rels, :source =&gt; :sub_category</code> の定義で category_rels の関連を経由して、カテゴリ関連の :sub_category で定義されている関連をサブカテゴリとして定義しています。</p>

<h2>まとめ</h2>


<p>説明がわかりずらく、逆にわからなくなったかもしれませんが、要は、has_many :through でたどった先に複数の関連がある場合（厳密には規約から推測できない関連があった場合）、:source を使ってどの関連をソースにしてオブジェクトを集めるかを指定する必要があるということです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyベストプラクティス -プロフェッショナルによるコードとテクニック]]></title>
    <link href="http://hamasyou.com/blog/2010/09/17/4873114454/"/>
    <updated>2010-09-17T22:12:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/09/17/4873114454</id>
    <content type="html"><![CDATA[<p>本書は、Ruby プログラミングの中級者向け指南書のようなものです。様々なコーディングテクニック（例えば、順序付き引数の使いどころ、ブロックの使い方、メソッド名のつけ方、メタプログラミング、関数型プログラミングテクニック、プロジェクトでRubyを使う際の慣習などなど）が満載です。</p>

<p>さすがオライリーといえる深い内容になっていて、Ruby を始めたばかりの人よりは、<em>一通り Ruby でプログラミングをしたことがある人、Ruby を使いこなせているのか不安な人が読むと良い</em>と思います。</p>

<p>今すぐ使えるテクニック！とはちょっと違うかもしれませんが、Ruby の動的な振る舞いや柔軟な拡張性を理解してさらに Ruby を使いこなすための一冊になると思います。</p>

<p>なお、<strong>Ruby1.9に対応</strong>していますので、サンプルコードは Ruby1.9で動きますし、最新 Ruby ではどうするの？を一発で解決できるようになっています。</p>

<!-- more -->




<h2>目次</h2>




<ul class="none">
<li>１章 テストでコードを駆動する</li>
<li>２章 美しい API を設計する</li>
<li>３章 動的な機能を使いこなす</li>
<li>４章 テキスト処理とファイル管理</li>
<li>５章 関数型プログラミングのテクニック</li>
<li>６章 うまういかないとき</li>
<li>７章 文化の壁を取り払う</li>
<li>８章 上手なプロジェクトメンテナンス</li>
<li>付録Ａ 後方互換性のあるコードを書く</li>
<li>付録Ｂ Ruby の標準ライブラリを活用する</li>
<li>付録Ｃ Ruby ワーストプラクティス</li>
</ul>




<h2>２章 美しい API を設計する - 覚書</h2>




<h3>メソッドの引数にデフォルト値を持つパラメータが複数ある場合は擬似キーワード引数を使う</h3>


<p>デフォルト値をもつパラメータが複数ある場合は、Ruby の「メソッドの引数の末尾に要素がひとつ以上のハッシュを渡す際は中括弧（{,}）を省略できる」という仕様を利用して、<strong>擬似キーワード引数</strong>が使えます。</p>

<pre><code class="ruby">def hello(name, options = {})
  options = { nickname: "hamasyou", age: 28 }.merge(options)
  p "Hello #{name}! " + options.to_s
end

hello("Syougo")
# =&gt; "Hello Syougo! {:nickname=&gt;"hamasyou", :age=&gt;28}"
hello("Syougo", age: 27)
# =&gt; "Hello Syougo! {:nickname=&gt;"hamasyou", :age=&gt;27}"
</code></pre>

<h3>インターフェースをシンプルにするためのブロック</h3>


<p>Rails の Configuration に使われているオブジェクトショートカットのことです。次のようなコードを</p>

<pre><code class="ruby">server = Server.new

server.handle(/hello/i) { "Hello from server at #{Time.now}" }
server.handle(/goodby/i) { "Goodby from server at #{Time.now}" }
server.handle(/name is (\w+)/) {|m| "Nice to meet you #{m[1]}!" }

server.run
</code></pre>

<p>次のように書けるようにします。</p>

<pre><code class="ruby">Server.run do
  handle(/hello/i) { "Hello from server at #{Time.now}" }
  handle(/goodby/i) { "Goodby from server at #{Time.now}" }
  handle(/name is (\w+)/) {|m| "Nice to meet you #{m[1]}!" }
end
</code></pre>

<p>これを実現するには、次のようなコードになります。</p>

<pre><code class="ruby">class Server
  def self.run(port, &amp;block)
    server = Server.new(port)
    server.instance_eval(&amp;block)
    server.run
  end
end
</code></pre>

<p>インスタンス化したオブジェクトの <em>instance_eval()</em> メソッドにブロックを渡すことで、ブロックをそのインスタンスのコンテキストで実行しています。</p>

<p>この方法を使うと、ブロックはインスタンス化したオブジェクトのコンテキストで実行されるため、ブロックのスコープ内で定義されたローカル変数にしかアクセスできません。つまり、次のコードは<em>動きません</em>。</p>

<pre><code class="ruby">class MyClass
  def nickname
    "hamasyou"
  end

  def my_method
    Server.run do
      p "Hello #{nickname}"
    end
  end
end

MyClass.new.my_method
# =&gt; NameError: undefined local variable or method `nickname' for #&lt;Server:0x000001020478a8&gt;
</code></pre>

<p>この問題を解決するには、ブロックをインスタンスのコンテキストで評価するのではなく、クロージャとして実行すればよいです。</p>

<pre><code class="ruby">class Server
  def self.run(&amp;block)
    server = Server.new
    block.arity &lt; 1 ? server.instance_eval(&amp;block) : block.call(server)
    server.run
  end
end
</code></pre>

<pre><code class="ruby">class MyClass
  def nickname
    "hamasyou"
  end

  def my_method
    Server.run do |server|
      p "Hello #{nickname}"
    end
  end
end

MyClass.new.my_method
# =&gt; "Hello hamasyou"
</code></pre>

<p>block.arity を使ってコードブロックに引数がいくつあるかを調べて、引数がひとつ以上あればブロックをクロージャとして呼び出すようにしています。　</p>

<h3>method? と method! の意味</h3>


<p><section></p>

<h4>method? 疑問符</h4>


<p><em>method?</em> のようにメソッド名の末尾に疑問符（?）をつけるのは目的は、<strong>オブジェクトに何かを問い合わせる</strong>ことになります。条件分岐などにメソッドを利用する際に使えます。</p>

<p>疑問符をつけたメソッドの戻り値は、<em>true</em> か <em>false or nil</em> を返すようにします。</p>

<p></section></p>

<p><section></p>

<h4>method! 感嘆符</h4>


<p><em>method!</em> のようにメソッド名の末尾に感嘆符（!）をつける目的は、<strong>このメソッドは特別だ、「注意しろ！」</strong>になります。</p>

<p><blockquote><p>よくある誤解は、受け取ったオブジェクトを変更することを知らせたいときに感嘆符を使う、というものだ。たいていの場合、感嘆符は私たちに何か警告をするものだからだろう。</p></p><p><p></p><footer><strong>method?とmethod!が何を意味しているか理解しよう - 本書 P.57</strong></footer></blockquote></p>

<p>Ruby の組み込みクラスのメソッドには破壊的メソッドでも感嘆符がついているのとついていないものがあります。</p>

<p>これはすなわち、メソッドに感嘆符をつける目的はこのメソッドが特別であることを知らせるのであって、破壊的であるとか危険であることを知らせるのではないということです。</p>

<p><blockquote><p>したがって、同じようなことをする　foo() メソッドがないのに foo!() メソッドだけがあるのは、あまり意味のないことだ。（中略）感嘆符は必ずしもそのメソッドが<em>破壊的な操作</em>をすることを意味するわけではないと考えると、&hellip;</p></p><p><p></p><footer><strong>本書 P.59</strong></footer></blockquote></p>

<p></section></p>

<h3>２章のポイント</h3>




<h4>引数</h4>




<ul>
<li>options ハッシュによる擬似キーワード引数が使えないか検討する</li>
<li>順序付き引数と options ハッシュを組み合わせて使うときは、配列 splat 演算子（*）は使わない</li>
<li>必須パラメータは、options ハッシュには入れないこと。必須パラメータは順序付き引数として扱う</li>
</ul>




<h4>ブロック</h4>




<ul>
<li>前処理後処理の間に、ブロックを yield するようなヘルパメソッドを検討する</li>
<li>&amp;block と instance_eval() を組み合わせると任意のオブジェクトのコンテキストでブロックを実行できる</li>
<li>yield と block.call の戻り値は、与えられた戻り値と同じにする</li>
</ul>




<h2>３章 動的な機能を使いこなす - 覚書</h2>




<h3>define_method() を使って動的にインスタンスメソッドを定義する</h3>


<p>メソッドを定義するというのは、クラスのインスタンスメソッドを定義するということなので、動的にインスタンスメソッドを定義するにはクラスのスコープで define_method() を呼び出します。</p>

<pre><code class="ruby">class MyClass
  def self.define(method_name, &amp;block)
    define_method(method_name, &amp;block)
  end
end

obj = MyClass.new
obj.hello
# =&gt; NoMethodError: undefined method `hello'

MyClass.define(:hello) do
  "Hello World"
end

obj.hello
# =&gt; "Hello World"
</code></pre>

<h3>define_method() を使って動的にクラスメソッドを定義する</h3>


<p>クラスメソッドを定義するには、クラスの特異クラスにメソッドを定義する必要があります。特異クラスをオープンするには、class &lt;&lt; obj 構文を使います。</p>

<pre><code class="ruby">class MyClass
  def self.define(method_name, &amp;block)
    obj = class &lt;&lt; self; self; end
    obj.send(:define_method, method_name, &amp;block)
  end
end

MyClass.define(:hello) do
  "Hello World"
end

MyClass.hello
# =&gt; "Hello World"
</code></pre>

<p><section></p>

<h4>define_method() は private メソッド</h4>


<p>define_method() は特異クラス上でプライベートになっているため、レシーバを指定して呼び出すには send() メソッドを使う必要があります。</p>

<p></section></p>

<h3>モジュールのメソッドをモジュールのクラスメソッドにする</h3>




<pre>extend self</pre>


<p>extend self を使うと、自信のインスタンスメソッドを特異クラスに定義することになりクラスメソッド化することができます。</p>

<pre><code class="ruby">module MyModule
  extend self

  def hello
    "Hello World"
  end
end

MyModule.hello
# =&gt; "Hello World"
</code></pre>

<h3>３章のポイント</h3>




<ul>
<li>Ruby ではすべてのクラスがオープン。振る舞いを実行時に変更することができる</li>
<li>オブジェクト毎の振る舞いは、class &lt;&lt; obj 構文を使ってオブジェクトの特異クラスにアクセスすることで実装できる</li>
<li>拡張するときはできるだけオブジェクトごとの振る舞いを拡張するほうがよい。obj.extend() を使うようにする</li>
<li>クラスもモジュールも動的につくることができる。メソッドを定義するためのブロックを受け付けるようにする</li>
<li>モジュールをクラスに混ぜるとき、include を使うとインスタンスレベルで利用可能になり、extend を使うとクラスレベルで利用可能になる</li>
<li>フックは特定のクラスやモジュールに実装することができ、それより下位のすべてを捕捉する</li>
</ul>




<h3>３章のまとめ</h3>


<p>３章で学習したことが詰まったコードの読み解きです。</p>

<pre><code class="ruby">module NativeCampingRoutes

  extend self

  def R(url)
    route_lookup = routes

    klass = Class.new
    meta = class &lt;&lt; klass; self; end
    meta.send(:define_method, :inherited) do |base|
      raise "Already defined" if route_lookup[url]
      route_lookup[url] = base
    end
    klass
  end

  def routes
    @routes ||= {}
  end

  def process(url, params = {})
    routes[url].new.get(params)
  end
end

module NativeCampingRoutes
  class Hello &lt; R '/hello'
    def get(params)
      puts "hello #{params[:name]}"
    end
  end

  class Goodbye &lt; R '/goodbye'
    def get(params)
      puts "goodbye #{params[:name]}"
    end
  end
end

NativeCampingRoutes.process('/hello', name: "greg")
# =&gt; hello greg
NativeCampingRoutes.process('/goodbye', name: "joe")
# =&gt; goodbye joe
</code></pre>

<h4>3行目 extend self</h4>


<p>Object#extend は引数で渡されたモジュールのインスタンスメソッドを特異クラスのメソッド（つまり、クラスメソッド）として追加します。</p>

<p>すなわち、この後に続く def で定義されたモジュールのインスタンスメソッドを自身のクラスメソッドに再定義しています。</p>

<h4>6行目 route_lookup = routes</h4>


<p>10行目で呼び出している define_method() メソッドに渡すブロックはクロージャなので、ローカル変数にアクセスできます。define_method() メソッド内で @routes にアクセスしたいので、ローカル変数に格納しています。</p>

<h4>9行目 meta = class &lt;&lt; klass; self; end</h4>


<p>10行目で定義する Class#inherited メソッドは、継承されるクラス（klass）のクラスメソッドとして定義します。クラスメソッドは特異クラスのメソッドとして定義する必要があるので、特異クラスを取り出しています。</p>

<h4>10行目 meta.send(:define_method, :inherited) do |base|</h4>


<p>define_method() メソッドは private メソッドなので、meta.define_method() という呼出はできません。</p>

<p>そこで、send() メソッドを使って private メソッドを呼び出しています。特異クラスである meta に対して inherited メソッド（クラスが継承された際に呼び出されるフックメソッド）を定義しています。</p>

<p>inherited メソッドは、呼び出される際に引数として継承先の子クラス（NativeCampingRoutes::Hello、NativeCampingRoutes::Goodbye）が渡されるので、ブロック引数の base として受け取っています。</p>

<h4>14行目 klass</h4>


<p>R() メソッドは継承元として使うことを想定しているので、クラスを返しています。</p>

<h4>22行目 routes[url].new.get(params)</h4>


<p>routes メソッドで返される @routes ハッシュに対して url をキーにアクセスします。</p>

<p>R() メソッドで @routes[url] に継承先クラスが格納されているので、Class#new を使ってインスタンス化し、get() メソッドを呼び出しています。</p>

<h4>27, 28行目 class Hello &lt; R '/hello'</h4>


<p>定義した NativeCamppingRoutes モジュールのサブクラスとして Hello を定義し、R() メソッドで返される無名クラスを継承しています。</p>

<p>クラスに get() メソッドを定義して、21行目の process メソッドでインスタンス化したオブジェクトから呼び出せるようにしています。</p>

<h2>６章 うまくいかないとき - 覚書</h2>




<h3>データ構造を確認するのに YAML がつかえる</h3>


<p>YAML というデータシリアライゼーションのための標準ライブラリを使うと、データ構造をプリントしてくれる y() メソッドが使えるようになる。</p>

<pre><code class="ruby">require "yaml"

data = { name: "hamasyou", age: 28, address: { zip: "272-0000", pref: "Chiba", city: "Ichikawa" } }
y data
#---
#:name: hamasyou
#:age: 28
#:address:
#  :zip: 272-0000
#  :pref: Chiba
#  :city: Ichikawa
</code></pre>

<h3>テストデータ生成用ライブラリ faker</h3>


<p>テスト用のデータ生成に、Faker というライブラリが使えます。gem install faker でインストールできます。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>sudo gem install faker</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>次のように使います。</p>

<pre><code class="ruby">require "faker"
require "pp"

data = 5.times.map do
  { name: Faker::Name.name, phone: Faker::PhoneNumber.phone_number }
end

pp data
#[{:name=&gt;"Johnathan Lowe III", :phone=&gt;"(859)707-2471 x1926"},
# {:name=&gt;"Lucius Murray", :phone=&gt;"(760)338-6980"},
# {:name=&gt;"Queen Beahan II", :phone=&gt;"1-085-613-9274 x52563"},
# {:name=&gt;"Daniela Boyle", :phone=&gt;"956.964.3848"},
# {:name=&gt;"Mrs. Jarret Wisozk", :phone=&gt;"(760)687-0168 x68429"}]
</code></pre>

<p>Faker で作れるダミーデータには次のようなものがあります。</p>

<table class="table table-bordered">
  <tr><th>クラス</th><th>作れるデータ</th><th>サンプル</th></tr>
  <tr><td>Faker::Address</td><td>住所データ</td><td><ul class="none"><li>zip_code<br/>"15832-6995"</li><li>city<br/>"South Verlie"</li></ul></td></tr>
  <tr><td>Faker::Company</td><td>会社データ</td><td><ul class="none"><li>name<br/>"Carroll, Kuhlman and Glover"</li><li>bs<br/>"orchestrate vertical action-items"</li></ul></td></tr>
  <tr><td>Faker::Internet</td><td>ネットワークデータ</td><td><ul class="none"><li>email<br/>"wiley@andersoncrist.us"</li><li>free_email<br/>"aubree.waters@gmail.com"</li><li>domain_name<br/>"littel.com"</li></ul></td></tr>
  <tr><td>Faker::Lorem</td><td>文章データ</td><td><ul class="none"><li>words<br/>["quaerat", "blanditiis", "qui"]</li><li>sentences<br/>["Maiores dicta sed voluptas corrupti repudiandae eos aliquam eligendi.", "Dolorem eius ut nam esse nihil illum.", "Non sapiente accusamus maiores neque eum est ea."]</li></ul></td></tr>
  <tr><td>Faker::Name</td><td>名前データ</td><td><ul class="none"><li>name<br/>"Nicklaus Swift"</li><li>first_name<br/>"Angus"</li><li>last_name<br/>"Morissette"</li></ul></td></tr>
  <tr><td>Faker::PhoneNumber</td><td>電話番号</td><td><ul class="none"><li>phone_number<br/>"024-597-6027 x86091"</li></ul></td></tr>
</table>


<p>Faker::PhoneNumber::Formats に phone_number() メソッドで返される電話番号のフォーマットの一覧が入っています。テスト時にフォーマットをいじることで、phone_number() メソッドの戻り値の形式を変更できます。</p>

<pre><code class="ruby">Faker::PhoneNumber::Formats = ["(###)##-####", "###-####-####"]
Faker::PhoneNumber::phone_number
# =&gt; "(109)29-6592"
</code></pre>

<h2>７章 文化の壁を取り払う - 覚書</h2>




<h3>ソースコードのエンコーディングを明示する</h3>


<p>Ruby1.9 から多言語対応に注意を払わなければいけなくなりました。<em>M17N（MultilingualizatioN）</em> です。</p>

<p>M17N 可能なプロジェクトで作成するソースコードには、ソースコード中に<strong>マジックコメント</strong>を埋め込む必要があります。</p>

<p>Ruby ソースコード中に #! がない限り、マジックコメントはファイルの一行目に書きます。#! がある場合は2行目に書きます。</p>

<p>マジックコメントのフォーマットは次のとおりです。</p>

<pre># coding: UTF-8</pre>




<pre># -*- coding: utf-8 -*-</pre>




<h3>ファイルを扱う場合</h3>


<p>例えば、EUC-JP で書かれたファイルを UTF-8 で書かれた Ruby のソースコード上で処理したい場合、次のようにします。</p>

<pre><code class="ruby">File.open("euc.txt", encoding: "EUC-JP:UTF-8").each do |line|
  p line
end
</code></pre>

<p><em>encoding:</em> パラメータを指定してファイルを開きます。encoding パラメータは &quot;&lt;ファイルのエンコード&gt;:&lt;処理するソースコードのエンコード&gt;&quot; のように書きます。</p>

<p>例の場合、EUC-JP で書かれた euc.txt ファイルを UTF-8 のソースコードで処理するので、encoding:&quot;EUC-JP:UTF-8&quot; としています。</p>

<p>なお、ファイルのエンコーディングがソースコードのエンコーディングと同じ場合は、encoding: &quot;UTF-8&quot; と書くことができます。</p>

<p class="option">encodingオプションを指定しない場合、Ruby は Encoding#default_external で指定されているエンコーディングでファイルを解釈しようとします。</p>




<h3>バイナリファイルを扱う場合</h3>


<pre><code class="ruby">img = File.read("hoge.png");
</code></pre>

<p>上記のようにバイナリデータを読み込んでいる場合は注意が必要です。Ruby1.9 からは encoding が指定されない場合、<em>Encoding#default_external</em> の値がエンコーディングとして使われます。</p>

<p>そのため、read() メソッドで encoding を指定しないと、中身がバイナリデータであっても default_external のエンコーディングだと解釈されてしまいます。</p>

<p>バイナリデータを読み込む際は、<em>File#binread()</em> メソッドを使うようにします。</p>

<h3>閑話休題</h3>


<p>７章の P.223 に L10N の話題が載っています。そこで見つけたソースコード。</p>

<pre><code class="ruby">data = { given_name: "姉ヶ崎", surname: "寧々" }
Gibberish::Simple.use_language(:ja) do
  p T("{given_name}{surname}", [:name, data]) #=&gt; "姉ヶ崎寧々"
end
</code></pre>

<p>ね、寧々さん！！？</p>

<h2>８章 プロジェクトメンテナンス - 覚書</h2>




<h3>README ファイルに書くとよいこと</h3>




<dl>
<dt>Description（説明）</dt>
<dd>なんのためのプロジェクトなのか、何を解決するものなのか、1〜2段落程度で説明する。</dd>
<dt>Documentation（ドキュメント）</dt>
<dd>プロジェクトの公開 API となっている主要なクラスを2〜3個紹介するとよい。</dd>
<dt>Examples（サンプル）</dt>
<dd>基本的な使い方、何が出来るのか？どうやってクラスを使うのか？の概要を説明するとよい</dd>
<dt>Install（インストール方法）</dt>
<dd>インストール手順が簡単であれば、README にインストール手順を書いておくとよい。</dd>
<dt>Q&amp;A（質問の宛先）</dt>
<dd>自分たちへの質問の方法を記述する。Eメール、電話、会社の住所などなど。</dd>
</dl>




<h3>ライブラリのレイアウト</h3>




<h4>ライブラリディレクトリ</h4>


<p>lib フォルダを作り、ひとつのファイルとひとつのサブディレクトリを用意します。</p>

<p>ひとつのファイルとは、プロジェクト名と同じファイルになっており、依存関係のあるライブラリなどをロードするための出発点としての役割を果たすものになります。</p>

<p>ひとつのサブディレクトリには、プロジェクト名と同じディレクトリ名にしておき、必要なライブラリやソースコードをすべてこの中に閉じ込める。</p>

<pre>
- lib
  - csvparser/
    - ...ライブラリ群...
  - csvparser.rb
</pre>


<p>クラス名とファイル名の対応等は、<a href="http://shugo.net/ruby-codeconv/codeconv.html" rel="external nofollow">Ruby コーディング規約 - Shugo.net</a> 等を参考にする。</p>

<h4>実行ファイル</h4>


<p>実行ファイルは bin ディレクトリに置く。</p>

<h4>テストコード</h4>


<p>テストコードは、test ディレクトリに置く。</p>

<h4>サンプルコード</h4>


<p>サンプルコードがあれば、examples ディレクトリに置く。</p>

<h4>ここまでをまとめると</h4>


<p>次のようなディレクトリ構成になる。</p>

<pre>-Projectルート/
  - README
  - bin/
  - examples/
  - lib/
    - csvparser/
      - ...ソースコード...
    - csvparser.rb
  - test</pre>



]]></content>
  </entry>
  
</feed>
