<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: フレームワーク | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/huremuwaku/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-08-30T13:56:03+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pro Spring]]></title>
    <link href="http://hamasyou.com/blog/2005/06/14/1590594614/"/>
    <updated>2005-06-14T23:41:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/06/14/1590594614</id>
    <content type="html"><![CDATA[<p>最初に断っておきます。本書は洋書です。ただ、この記事を執筆している現在(2005/06/14)で、<b>この本より詳しく、この本より分かりやすくSpringを解説している本はない</b>です。しかも洋書なので、下手な訳がない分逆に分かりやすいです。</p>

<p>本書は、<a href="http://www.springframework.org/" rel="external nofollow">Spring Framework</a>(以下、Spring)について解説した本です。Springは数あるフレームワークの一つで、最近話題のDIパターンを実装しています。</p>

<p>本書は、DIパターンを実装しているフレームワークの中でも、アメリカで爆発的に人気の在るSpringの、仕組みや使い方を学ぶ本です。業務でSpringを使う予定がある人、Springを勉強したい人は、かなり買いの一冊です。</p>

<!-- more -->




<h2>特徴</h2>


<p>本書の特徴は、詳しい解説と豊富なサンプルコードです。</p>

<p>詳しい解説とは何を意味するかと言うと、Springのコアテクノロジをほぼすべて解説していることと、使う場合に注意することが網羅されていることです。実際に業務でSpringを使う人には、非常に便利な構成になっています。</p>

<p>豊富なサンプルコードは、英語が読めない人でもコードを読めば動きが分かるくらいの物が多数載っています。そのまま真似できるレベルのコードが書かれています。</p>

<p>本書が訳されたら、大ヒットすると思います。それくらい、内容が濃く分かりやすい本になっています。業務で利用する人もそうでない人も、Springに興味があれば本書を購入することをおすすめします。</p>

<h2>参考</h2>


<ul>
<li>日本語でSpringを解説した最初の本だと思います。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774123412/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>In Action シリーズ、Spring編です。(洋書)</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1932394354/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>Spring用の入門書です。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221431/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>Spring、JSF、Hibernateを使った実践的な入門書です。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hibernate のトランザクション制御]]></title>
    <link href="http://hamasyou.com/blog/2005/04/23/hibernate/"/>
    <updated>2005-04-23T08:24:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/04/23/hibernate</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/193239415X/sorehabooks-22" rel="external nofollow"></a>
</p>


<p>Hibernate は O/R マッピングツールと呼ばれる、リレーショナルデータベースとオブジェクトモデルとの間を埋めるフレームワークです。</p>

<p>O/Rマッピングを行うとトランザクション制御をあまり考えなくてもいいような気になってしまう感があります。でも、トランザクション制御って非常に大切な要素です。しかも、O/Rマッピングを行っていようと、トランザクションのことを何も考えていなければ、データの不整合が起きる可能性もあればデッドロックが起きる可能性もあります。</p>

<p>JDBCを直接扱う場合は、まだトランザクションを気にしながらコーディングする方なのでいいのですが、O/Rマッピングを使う場合に忘れがちなトランザクションのことを、ちょっとでも頭にとどめておくためにメモ程度に記録しておきます。(間違いを見つけたらコメントください)
+ <a href="http://www.hibernate.org/hib_docs/v3/reference/en/html/" rel="external nofollow">Hibernate Reference 3.0</a></p>

<p><section></p>

<h4>[参考]</h4>


<p>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281027/sorehabooks-22" rel="external nofollow">トランザクション処理〈上〉-概念と技法</a>』</p>

<p>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281035/sorehabooks-22" rel="external nofollow">トランザクション処理〈下〉-概念と技法</a>』</p>

<p></section></p>

<!-- more -->




<h2>Hibernateのトランザクション制御方法</h2>




<h3>SessionFactory と Session</h3>


<p>SessionFactory クラスと Session クラスが、Hibernate の肝となる部分です。<strong>SessionFactoryはスレッドセーフ</strong>で、アプリケーションで一つのインスタンスのみを生成すればいいです。ただし、データベースとSessionFactoryが1対1で対応するので、アプリケーションで複数のデータベースにアクセスする場合(グローバルトランザクション)はその分だけ SessionFactory を生成します。</p>

<p><strong>SessionFactory は データベースの数だけ生成する</strong></p>

<p>次に、Sessionです。Sessionは、スレッドセーフではありません。マルチスレッド環境下でSessionオブジェクトを使用する場合は気をつける必要があります。Webアプリケーションは基本的にマルチスレッド環境です。したがって、<strong>Sessionは使い捨て</strong>で使用するべきです。</p>

<p>Hibernateはトランザクション管理はベースとなるデータコネクションに任せています。データコネクションがJTAに管理されていれば、Sessionが実行する処理はトランザクションの一部となります。</p>

<h3>Sessionのフラッシュ</h3>


<p>基本的にSessionはコネクションと思えばいいようです。Sessionの処理手順としては基本的に下のような感じになります。</p>

<pre>
1. セッションのオープン
例）　sessionFactory.openSession()
↓
2. トランザクション開始
例）　transaction = session.beginTransaction
↓
3. トランザクション
例）　session.save()
session.update()
session.delete()
session.saveOrUpdate()
↓
4. データベースと同期
例）　session.flush()
↓
5. トランザクションコミット or ロールバック
例）　transaction.commit()
transaction.rollback()
↓
6. セッションのクローズ
例）　session.close()
</pre>


<p>Sessionの <strong>flush</strong> は大事な概念のようです。Hibernateは永続化データをキャッシュします。実際には、データベースにはリアルタイムに処理が施されているわけで、いざ save するときにはデータベースのデータと同期が取れていない可能性があります。</p>

<p>これを防止するのが flush の役割です。Hibernateはいろいろな処理を行う際に flush を自動で呼び出してくれます。例えば transaction.commit() の直前などです。しかし、<strong>明示的に session.flush() を呼び出すことはよい手法</strong>となっています。</p>

<h3>HibernateExceptionは致命的な例外</h3>


<p>HibernateでスローされるHibernateExceptionはすべて致命的な例外ととらえます。これは、現在のSessionが整合性の取れないものになっている可能性があることを示しています。つまり、<strong>HibernateExceptionがスローされたら、トランザクションをロールバックして、session.close() を即座に呼び出す必要がある</strong>ということです。</p>

<pre class="code"><code>Session session = factory.openSession(); 
Transaction tx = <span class="keyword">null</span>; 
 
<span class="keyword">try</span> { 
   tx = session.beginTransaction(); 
   <span class="comment">// 何らかの処理 </span>
    tx.commit(); 
} 
<span class="keyword">catch</span> (Exception e) { 
    <span class="keyword">if</span> (tx != <span class="keyword">null</span>) { 
        tx.rollback(); 
    } 
    <span class="keyword">throw</span> e; 
} 
<span class="keyword">finally</span> { 
    session.close(); 
} 
</code></pre>




<h3>楽観的同時平行性制御 (Optimisticトランザクション)</h3>


<p>通常、データベーストランザクションがユーザとの対話に関与することは許されません。ユーザとの対話に関与(つまり、Webアプリケーションで画面をまたいでトランザクションをかけ続けること)はロングトランザクションとなり、他のデータベーストランザクションがリソースにアクセスすることができなくなります。</p>

<p><em>ユーザとの対話をはさんだビジネスプロセスにおいて、データベーストランザクションを維持するのはアプリケーション層の役割になります</em>。よく使われる方法は、バージョン番号を使って、更新を管理する方法です。Hibernateは3つの方法で、Optimisticなトランザクション制御を行えます。</p>

<ul><li><b>自動バージョン付けのロングトランザクション</b></li>
<li><b>自動バージョン付けのManyトランザクション</b></li>
<li><b>アプリケーションによるバージョンチェック</b></li></ul>


<p>どのチェックの仕方にも共通するのが、バージョン番号を使って処理するということです。Hibernateが永続化処理する場合、バージョン番号も自動的に変更されます。</p>

<h3>ロック制御</h3>


<p>Hibernateは、排他ロックをサポートしています。通常、SELECT文というのは、共有ロックがかけれられます。共有ロックは、別のトランザクションから読み取りが許可されるロックです。</p>

<p>一連のトランザクションで見たときに、SELECTした値を変更する場合、排他ロックをかける必要があります。Hibernateではロック機構を<strong>LockMode</strong>クラスで表現しています。</p>

<dl><dt>LockMode.WRITE</dt><dd>行の挿入・更新時に自動的に取得されるロック</dd>
<dt>LockMode.UPGRADE</dt><dd>排他ロックを取得します。SELECT ... FOR UPDATE 文が実行されます。</dd>
<dt>LockMode.UPGRADE_NOWAIT</dt><dd>SELECT ... FOR UPDATE NO WAIT を実行します。(Oracleのみ)</dd>
<dt>LockMode.READ</dt><dd>分離レベルが Repeatable Read か Serializable の場合の読み込みのときに取得されます。</dd>
<dt>LockMode.NONE</dt><dd>ロックされていないことを表します。</dd></dl>


<p>O/Rマッピングを行う場合でも、トランザクションのことは忘れてはいけないのです。すべてをHibernateに任せることは間違っていて、トランザクションの分離レベルとロックトランザクション・Optimisticトランザクションの区別は、アプリケーション側で適切に考える必要があります。</p>

<h2>参考</h2>


<ul>
<li>JSF / Spring / Hibernate を使ったアプリケーション開発</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>開発者ノート「Hibernate」</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311215X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>トランザクション処理のバイブル</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281027/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>トランザクション処理のバイブル</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281035/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>トランザクション処理について、最初に学び始めるのにちょうど良いくらい</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822280268/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
