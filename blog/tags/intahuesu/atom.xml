<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: インターフェース | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/intahuesu/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2017-06-27T15:56:33+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[インターフェイス指向設計 アジャイル手法によるオブジェクト指向設計の実践]]></title>
    <link href="http://hamasyou.com/blog/2008/07/05/4873113660/"/>
    <updated>2008-07-05T10:40:00+09:00</updated>
    <id>http://hamasyou.com/blog/2008/07/05/4873113660</id>
    <content type="html"><![CDATA[<p>本書は、プログラムにおけるインターフェース設計へアドバイスを与えるものです。GUIやデザインの話ではありません。高凝集度で疎結合な設計を行うためにインタフェース設計をどのように進めたらよいか、どのように考えてインターフェースを作れば良いかなどを説明しています。</p>

<p>システム開発というのは複雑な作業です。その複雑さを少しでも解消するために<strong>分割して統治せよ（Divide and Conquer）</strong>という理論を用いることが良いことだとされています。このときに大切になってくるのが「<strong>凝集度</strong>」と「<strong>結合度</strong>」になります。</p>

<p>凝集度は高いほど良い、つまり責任範囲が明確でが軸ぶれないほどよいです。結合度は低いほど、つまりそっちはそっちで勝手にやっててねとできるほどよいです。高凝集で低結合（英語で言うと「High Cohesion and Low Coupling!」）なプログラム部品にするために必要なのが「<strong>良いインターフェース</strong>」なのです。本書は、この良いインターフェースとは何か？どうやって良いインターフェースを設計するか？を解説するものです。</p>

<p>本書の対象読者は、プログラム経験があり設計に興味がある人、DI（Dependency Injection）って流行ってたけど未だに何が良いのかわからない人、テスト容易性が大事って聞くけどどうやって設計したらいいかわからない人です。</p>

<p>200ページくらいしかなく、かなり薄い本になっていますのでサクサク読めると思いますが、実はあまり詳しい説明というのが載っていません。内容が薄いのではなく、説明が薄いのです。「こんな場合こういう考えでインターフェースを切ると良いよ。作り方は二種類ある。長所はこれで、短所はこれ」みたいな説明が多いように思えました。</p>

<p>それでもかなりの良書の部類に入ると思います。さらっと読んで、良く理解できなかった部分は先輩に聞いたり、Webで質問したりして、自分なりに噛み砕いていく。そういう読み方をする本かなと思います。</p>

<!-- more -->




<h2>本書に出てくるキーワード</h2>




<h3>インターフェイスの三原則</h3>




<ol>
<li>インターフェイス実装は、そのメソッド名が示す通りの処理をしなければならない</li>
<li>インターフェイス実装は他に危害を加えてはならない</li>
<li>インターフェイス実装は、責務を果たせない場合にそれを呼び出し元に伝えねばならない</li>
</ol>


<p>つまり、「名前どおりの処理をし」、「後始末は自分でする、自分がエラーでも他に迷惑をかけない」、「自分で処理できないときは、呼び出し元に誤りをいれる」ということ。</p>

<h3>契約（Contract）、契約による設計（Design By Contract）</h3>


<p>インターフェイスの呼び出し元とインターフェイスとの間で交わされる約束のこと。事前条件、事後条件、不変表明の3つからなる。</p>

<p><strong>事前条件</strong>はインターフェイスの呼び出し元が守らなければならない条件で、事前条件を満たない状態でインターフェイスを呼び出すと正しく動作しない。</p>

<p><strong>事後条件</strong>はインターフェイスが守らなければならない条件で、事前条件を満たした状態で呼び出しが行われた場合に満たさなければならないもの。事後条件を満たせない場合は Java であれば例外をスローしたりする（原則3）</p>

<p><strong>不変表明</strong>はインターフェイスのインスタンスが満たさなければいけない内部状態を表すもの。</p>

<h3>データインターフェイスとサービスインターフェイス</h3>


<p>データインターフェイスとは、属性の設定や取得のメソッドで構成されるインターフェイスのこと。JavaBeans などが該当する。</p>

<p>サービスインターフェイスとは、処理を行うメソッドで構成されるインターフェイスのこと。よくある3階層アーキテクチャのサービス層を司るものや、GUIのボタン押下で呼び出されるメソッドなどを持つもの。</p>

<h3>エンティティ、バウンダリ、コントロール</h3>


<p><strong>エンティティ</strong>は、データインターフェイスに相当する。</p>

<p><strong>バウンダリ</strong>は、サービスインターフェイスに相当する。主に GUI やユーザインターフェイスとして動作する種類のサービスインターフェイス。</p>

<p><strong>コントロール</strong>も、サービスインターフェイスに相当する。主にビジネスロジックやビジネスルール、サービスを処理する種類のサービスインターフェイス。</p>

<h3>ステートフルインターフェイスとステートレスインターフェイス</h3>


<p>インターフェイスも状態を持つことができる。</p>

<p><strong>ステートフルインターフェイス</strong>は、メソッドの呼び出しに順序があり、呼び出し順で状態が変わるもの。</p>

<p><strong>ステートレスインターフェイス</strong>は、メソッドの呼び出しに順序がなく振る舞いが変わらないもの。</p>

<h3>凝集度</h3>


<p>責務の似具合のこと。共通のコンセプトに基づいたメソッドばかりで構成されたインターフェイスは凝集度が高いといえる。</p>

<h3>結合度</h3>


<p>相手がいないと動作できない具合のこと。相手のモジュールの処理に依存していない場合には結合度が低いといえる。</p>

<h3>継承とインターフェイス</h3>


<p>継承は機能の連鎖。is_a （である）や is_kind_of （の一種である） で表されることが多い。共通の処理や属性をまとめる際に使える。</p>

<p>インターフェイスはロールの連鎖。インターフェイスの継承は provides-a （提供する）で表されることが多い。</p>

<p>（適当に書いてみたけど、説明が難しいというか感覚的な感じなので、本書を読んでください。。。）</p>

<h3>手続き型インターフェイスとドキュメント型インターフェイス</h3>


<p>リモートインターフェイスとしてのインターフェイスを考える際の種類。</p>

<p><strong>手続き型インターフェイス</strong>は、メソッドの処理を定義するタイプのインターフェイス。CORBA や RMI なんかがそれ。</p>

<p><strong>ドキュメント型インターフェイス</strong>は、データメッセージをやり取りするタイプのインターフェイス。JSON や XML なんかがこれに当たる。</p>

<h2>感想</h2>


<p>良書だと思いました。ただし、インターフェイスってこういうものだっていう考えがある人が読まないと、頭が混乱してくる気がしました。それは、インターフェイスという言葉がいろいろな意味で使われているからです。Java のインターフェイスを表していることもあれば、相手とのやり取りそのものをインターフェイスといったり、メソッド定義もインターフェイス定義だよねというような、広い意味でインターフェイスといったりと。</p>

<p>インターフェイス設計の総おさらいのような感じで読むこともできるし、おお！こんな考え方があったのか！という新しい発見もあるしという感じです。</p>

<h3>本書には書いてなかった気がするもの</h3>




<h4>インターフェイスの定義は呼び出し元がするべし！</h4>


<p>これは私の持論（？）ですが、インターフェイスの定義というものは、使う側が指定するべきだと思っています。哲学とか入ってきてしまいますが、「自分が今ここにいるのは、他人がそう認識しているから」というイメージです。</p>

<p>「<a href="http://blog.goo.ne.jp/glass-_-onion/e/91d51585d966f1a005f957eacacc01de" rel="external nofollow">依存関係逆転の法則</a>」的な考え方ともいえると思います。</p>

<dl>
<dt class="tips">Tips</dt>
<dd>「<strong>インターフェイスが変わるときは、ユーザの要求が変わったときである。</strong>」</dd> 
</dl>




<h2>参考</h2>




<div class="rakuten">
<table  width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797347783/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/ref=nosim/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
</feed>
