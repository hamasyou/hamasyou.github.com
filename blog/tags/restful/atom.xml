<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: RESTful | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/restful/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-03-03T13:33:34+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RailsでつくるRESTful APIのrequest specを書く]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/rails-request-rspec/"/>
    <updated>2014-02-17T14:09:38+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/rails-request-rspec</id>
    <content type="html"><![CDATA[<p>Rails 環境で RESTful API を提供する場面があると思います。API もコントローラで提供するので、コントローラのテストで記述してもいいのですが、RESTful API であれば、<strong>request spec</strong> を使うほうがよさそうなので request spec を書くメモです。</p>

<ul>
<li>Rails 4.0.2</li>
<li>rspec 2.14.1</li>
</ul>


<!-- more -->


<h2>テスト用のプロジェクトを整える</h2>

<p>まずは、チュートリアル用のプロジェクトを作成します。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>rails new specbox &ndash;skip-bundle</span><span class='line command'>cd specbox</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><code>Gemfile</code> を開いて次の gem を追記します。</p>

<pre><code class="ruby Gemfile">group :development, :test do
  gem 'rspec-rails'
  gem 'guard-rspec'
  gem 'factory_girl_rails'
  gem 'spring'
  gem 'spring-commands-rspec'
end
</code></pre>

<p>rspec と scaffold の設定を行います。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>bundle install &ndash;path vendor/bundle</span><span class='line command'>bundle exec rails g rspec:install</span><span class='line command'>bundle exec guard init rspec</span><span class='line command'>bundle exec rails g model Book title:string author:string price:integer</span><span class='line command'>bundle exec rails g scaffold_controller Books</span><span class='line command'>bundle exec rake db:migrate</span><span class='line command'>bundle exec rake db:test:prepare</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><code>config/routes.rb</code> にルーティングを追加します。</p>

<pre><code class="ruby config/routes.rb">Specbox::Application.routes.draw do
  ...
  resources :books
  ...
end
</code></pre>

<p>テストを実行します。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>bundle exec guard</span><span class='line output'>15:12:01 - INFO - Run all
</span><span class='line output'>15:12:01 - INFO - Running all specs
</span><span class='line output'>..**&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..</p>
</span><span class='line output'>
</span><span class='line output'><p>Pending:
</span><span class='line output'>  Book add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/models/book_spec.rb
</span><span class='line output'>    # No reason given
</span><span class='line output'>    # ./spec/models/book_spec.rb:4
</span><span class='line output'>  BooksHelper add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/helpers/books_helper_spec.rb
</span><span class='line output'>    # No reason given
</span><span class='line output'>    # ./spec/helpers/books_helper_spec.rb:14</p>
</span><span class='line output'>
</span><span class='line output'><p>Finished in 0.18066 seconds
</span><span class='line output'>30 examples, 0 failures, 2 pending</p>
</span><span class='line output'>
</span><span class='line output'><p>Randomized with seed 14063</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>これで rspec の設定ができました。それでは <em>request spec</em> を書いていきます。</p>

<h2>request spec を書く</h2>

<p><em>request spec</em> は他の rspec のテストとほとんど変わりありません。テストは <code>spec/requests</code> フォルダの下に作成していきます。</p>

<p><code>scaffold_controller</code> でコントローラを作成したので、すでに <code>spec/requests/books_spec.rb</code> があるはずです。テストコードを見てみます。</p>

<pre><code class="ruby spec/requests/books_spec.rb">require 'spec_helper'

describe "Books" do
  describe "GET /books" do
    it "works! (now write some real specs)" do
      # Run the generator again with the --webrat flag if you want to use webrat methods/matchers
      get books_path
      response.status.should be(200)
    end
  end
end
</code></pre>

<p>request spec もコントローラのテストと同じように、<code>get</code>、<code>post</code>、といったメソッドを使ってテストを行います。<code>books_spec.rb</code> を次のように書き換えてみます。</p>

<pre><code class="ruby spec/requests/books_spec.rb">require 'spec_helper'

describe 'Books' do
  describe 'GET /books' do

    it '登録されている本が返されること' do
      book = FactoryGirl.create(:book)
      get '/books', format: 'json'
      expect(response).to be_success
      expect(json).to be_a_kind_of(Array)
      expect(json[0]['id']).to eq book.id
    end
  end
end
</code></pre>

<p>request spec はこういう感じで、<strong>実際に呼び出す URL を記述する</strong> のと、<strong>json の中身をチェックする</strong> のが大事だと思っています。</p>

<p>コントローラのテストではビューの中身までチェックしませんし、ビューのテストとコントローラのテストを2つ書くのはテストを把握しづらいので、request spec のテストのように一箇所で同時にテストするのが効果的だと思います。</p>

<p>API はインターフェース（<em>入力パラメータ</em> と <em>出力形式</em> ）が大事なのでここをきっちり押さえておくテストを書く必要があります。</p>

<p>で、テストケースを変えると当然テストが失敗するので、テストが通るようにヘルパを書き換えます。</p>

<h3>request_helpers.rb を作成する</h3>

<p>request spec を書くときに便利なメソッドをいくつか用意しておきます。</p>

<p>RESTful API は出力を json で返すものが多いと思うので、json を扱いやすくするヘルパーを用意します。</p>

<p>また、 <code>AuthenticationHelper</code> は認証が必要な API を呼び出すときの便利メソッドとして記述してありますが、不要であれば削除、仕様が違うようであれば書きなおしてつかいます。</p>

<p>次のファイルを <code>spec/support/request_helpers.rb</code> として作成します。</p>

<pre><code class="ruby spec/support/request_helpers.rb">module Requests
  module JsonHelpers
    def json
      @json ||= JSON.parse(response.body)
    end
  end

  module AuthenticationHelper
    %w(get post put delete).each do |method_name|
      define_method("auth_#{method_name}") do |uri, auth_user, params = {}, env = {}, &amp;block|
        __send__(method_name, uri, params, env.reverse_merge(HTTP_AUTHORIZATION: "token #{auth_user.access_token}"), &amp;block)
      end
    end
  end
end
</code></pre>

<p>このヘルパを <code>spec/spec_helper.rb</code> に追加します。</p>

<pre><code class="ruby spec/spec_helper.rb">RSpec.configure do |config|
  ...
  config.include Requests::JsonHelpers, type: :request
  config.include Requests::AuthenticationHelper, type: :request
  ...
end
</code></pre>

<p>これでテストが通るようになりました。</p>

<h2>まとめ</h2>

<p>Rails で RESTful な API を作ることはよくあると思いますが、今までは API のテストもコントローラのテストで行っていました。</p>

<p>でも、request spec を使ったほうが <strong>呼び出しのURL</strong>、<strong>必要なパラメータ</strong>、<strong>出力形式</strong> を素直にテストとして書けるので、API のテストは request spec を使うようにするといいかなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TitaniumのHTTPClientでRESTfulリクエストを送る]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful/"/>
    <updated>2014-02-17T10:24:58+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile</a> の <code>Titanium.Network.HTTPClient</code> を使って RESTful リクエストを送る場合の注意点です。</p>

<p>Titanium の <code>HTTPClient</code> で <code>DELETE</code> のときに <code>send</code> でパラメータを送ると <code>POST</code> リクエストになってしまいます。</p>

<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile Development Environment</a></p>

<ul>
<li>Titanium 3.2.1.GA</li>
</ul>


<!-- more -->


<p>Titanium の <code>HTTPClient</code> は <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> などのメソッドに対応していて、標準で RESTful リクエストを送れるようになっています。</p>

<h3>GET の例</h3>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010286b4a8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010286b318&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{}
127.0.0.1 - - [17/Feb/2014 10:29:45] "GET / HTTP/1.1" 200 - 0.0006
</code></pre>

<h3>POST の例</h3>

<p><code>client.open('GET', url)</code> を <code>client.open('POST', url)</code> に変えて実行します。</p>

<pre><code class="javascript">client.open('POST', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:43:06] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<h3>PUT と DELETE の例</h3>

<p>同じように <code>PUT</code> と <code>DELETE</code> でも試してみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:45:32] "PUT / HTTP/1.1" 200 - 0.0005
</code></pre>

<pre><code class="javascript">client.open('DELETE', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : DELETE"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:46:28] "DELETE / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>client.send</code> でパラメータを送信しなければ、<code>open</code> で渡したメソッドでリクエストが投げられています。</p>

<h2>HTTPClient でパラメータを渡して <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> してみる</h2>

<p>次は、パラメータを渡して試してみます。</p>

<p><code>GET</code> は <code>send</code> メソッドにパラメータを渡すのではなく URL にクエリを設定して送ります。</p>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url + '?name=hamasyou');
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/?name=hamasyou"
"QUERY_STRING : name=hamasyou"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001019451b8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x00000101945140&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:49:41] "GET /?name=hamasyou HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>GET</code> で送られています。次は <code>POST</code> で送ってみます。</p>

<pre><code class="javascript">client.open('POST', url);
client.send({name: 'hamasyou'});
</code></pre>

<p><code>POST</code> は <code>client.send</code> にパラメータを渡して送ります。<code>POST</code> のデフォルトの <code>Content-Type</code> は <code>application/x-www-form-urlencoded</code> になります。</p>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded; charset=utf-8"
"QUERY_STRING : "
...
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:52:10] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>POST</code> で <code>Content-Type: application/json</code> で送る場合は、<code>HTTPClient#setRequestHeader</code> で設定します。</p>

<pre><code class="javascript">client.open('POST', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:56:20] "POST / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>PUT</code> と <code>DELETE</code> も <code>send</code> でパラメータを送ってみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:57:49] "PUT / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>PUT</code> はうまくいきました。次は <code>DELETE</code> です。</p>

<pre><code class="javascript">client.open('DELETE', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:58:52] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p>なんと、<code>POST</code> リクエストになってしまいました。。<code>DELETE</code> メソッドだけ、パラメータを <code>body</code> 部分に含めると <code>POST</code> リクエストになってしまうみたいです。。</p>

<p>OAuth 対応の API 等で access_token をパラメータに含めてリクエストする様な API を呼び出すときは要注意です。</p>

<p>できるだけ、認証情報は HTTP Header を使うようにした方がいいのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyからMicrosoft Translator APIを呼び出す]]></title>
    <link href="http://hamasyou.com/blog/2014/02/14/microsoft-translator-api/"/>
    <updated>2014-02-14T15:40:59+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/14/microsoft-translator-api</id>
    <content type="html"><![CDATA[<p>Google の翻訳 API が有料化されたことで、無料で使える翻訳 API が実質 <strong>Microsoft Translator API</strong> 一択になってしまいました。</p>

<p>実際に使ってみようと思ったときに、いろいろなサイトをぐるぐる回ったり、API の呼び出し方が変わっていたりしてとまどったので、手順のおさらいをしておきます。</p>

<!-- more -->


<h2>Microsoft Translator API</h2>

<p>Microsoft Translator API は Microsfot が提供する翻訳サービスで REST インターフェースを備えています。</p>

<p>利用するには Microsoft Azure Marketplace で Microsoft Translator の利用登録が必要です。</p>

<h3>Microsoft Translator 登録を行う</h3>

<p>翻訳 API を使うには Azure Marketplace で利用登録が必要になります。</p>

<p><a href="https://datamarket.azure.com/dataset/1899a118-d202-492c-aa16-ba21c33c06cb">Microsoft Azure Marketplace</a></p>

<p>アカウントを持っていない人はアカウントを作成して、月額0円のプランを購入します。</p>

<p><img src="/images/2014-02-14-microsoft-translator-api-01.png" alt="Microsoft Translator の購入" /></p>

<h3>アプリケーション登録を行う</h3>

<p>次に、Azure Marketplace でアプリケーションの登録を行います。</p>

<p><a href="https://datamarket.azure.com/developer/applications">開発者 アプリケーション登録 - Microsoft Azure Marketplace</a></p>

<p><img src="/images/2014-02-14-microsoft-translator-api-02.png" alt="アプリケーション登録" /></p>

<p>翻訳 API だけを利用する場合には <em>リダイレクトURI</em> は利用しませんが、必須入力なので <code>http://localhost/</code> と入力しておきます。<code>https</code> で登録しろと怒られますが無視して登録できます。</p>

<p>ここで登録した <em>クライアントID</em> 、<em>顧客の秘密</em> が API 呼び出しの時に使う <strong>client_id</strong> 、 <strong>client_secret</strong> になります。</p>

<h3>Ruby から呼び出してみる</h3>

<p>翻訳 API を呼び出すには、呼び出しの前に OAuth を通さなければなりません。OAuth を通すと得られる <em>access_token</em> を使って翻訳 API を呼び出します。</p>

<p>OAuth を通すには POST リクエストが必要なので、サンプルでは Ruby の <code>open-uri</code> を post 対応したものを使っています。<a href="https://github.com/rest-client/rest-client">Rest Client gem</a> もオススメです。</p>

<p><a href="http://d.hatena.ne.jp/urekat/20070201/1170349097">[ruby]open-uriをPOST対応させる</a></p>

<pre><code class="ruby">require 'cgi'
require 'open-uri-post'
require 'rexml/document'
require 'json'

CLIENT_ID       = '&lt;クライアントID&gt;'
CLIENT_SECRET   = '&lt;顧客の秘密&gt;'
AUTHORIZE_URL   = 'https://datamarket.accesscontrol.windows.net/v2/OAuth2-13'
TRANSLATION_URL = 'http://api.microsofttranslator.com/V2/Http.svc/Translate'
SCOPE           = 'http://api.microsofttranslator.com'

def get_access_token
  access_token = nil
  open(AUTHORIZE_URL,
       'postdata' =&gt; "grant_type=client_credentials&amp;client_id=#{CGI.escape(CLIENT_ID)}&amp;client_secret=#{CGI.escape(CLIENT_SECRET)}&amp;scope=#{CGI.escape(SCOPE)}") do |f|
    json           = JSON.parse(f.read)
    access_token   = json['access_token']
  end
  access_token
end


def translate_text(text)
  access_token = get_access_token
  res = open("#{TRANSLATION_URL}?from=en&amp;to=ja&amp;text=#{URI.escape(text)}",
             'Authorization' =&gt; "Bearer #{access_token}").read
  xml = REXML::Document.new(res)
  xml.root.text
end

puts translate_text('Hello World')
# =&gt; "ハローワールド"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[REST] 認証が必要な API を REST っぽく作るときのメモ]]></title>
    <link href="http://hamasyou.com/blog/2010/11/18/api-rest/"/>
    <updated>2010-11-18T22:23:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/11/18/api-rest</id>
    <content type="html"><![CDATA[<p>REST で Web サービスを構築する場合に、いつも認証が必要なリソースの URI の設計で悩むので、今までの経験上こうしたら上手くいったというのをメモしておきます。</p>

<p>RESTful でもなければ、こんなの世に広めるなよ、害悪だ。っていう批判もあるかもしれませんが、Web の世界でセキュリティと上手く付き合っていくために、セッションを使って認証管理をすると何かといいことが多いので。</p>

<p>あとは、認証が必要な Web API に無理に REST を適用しなくてもいいんじゃないか？ みたいな所もあるかと思いますが。</p>

<!-- more -->




<h2>認証が必要な API を REST っぽく作るメモ</h2>




<h3>REST とは</h3>


<p><strong>REST</strong> に馴染みのない人はまずこっちをみてください。</p>

<h4>参考</h4>




<ul>
<li><a href="http://yohei-y.blogspot.com/2005/04/rest_23.html" rel="external nofollow">yohei-y:weblog</a></li>
<li><a href="http://hamasyou.com/archives/000343" rel="external nofollow">RESTful Webサービス - それはBooks</a></li>
<li><a href="http://hamasyou.com/archives/000347" rel="external nofollow">Webを支える技術 -HTTP、URI、HTML、そしてREST - それはBooks</a></li>
</ul>




<div class="bookInfo">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/4774142042?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4774142042" rel="external nofollow"></a>
</div>
<ul><li><em>Webを支える技術 -HTTP、URI、HTML、そしてREST</em></li><li>山本 陽平 (著) </li><li>技術評論社</li></ul>
<div class="clear"></div>
</div>




<div class="bookInfo">
<div class="bookImg">
<a href="http://www.amazon.co.jp/gp/product/4873113539?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4873113539" rel="external nofollow"></a>
</div>
<ul><li><em>RESTful Webサービス</em></li><li>Leonard Richardson (著), Sam Ruby (著), 山本 陽平 (監修), 株式会社クイープ (翻訳)</li><li>オライリー・ジャパン</li></ul>
<div class="clear"></div>
</div>




<h3>認証が必要な API の URL 設計</h3>


<p>RESTful なサービスでは、ステートレスが望ましいとされているみたいですが、現実的には認証済みのユーザしかアクセス出来ないリソースや、権限を持っているユーザしか更新できないリソースっていうのも多くあります。</p>

<p>Cookie を使ったセッション管理の罪はステートをサーバ側に保持してしまう、<em>ステートフル</em>な状態をつくってしまうことというのは十分理解した上で、それでもやっぱりセッションで認証状態を管理する方法が分かりやすくて Web 屋には使いやすいと個人的には思っています。</p>

<p>そこで、<em>REST</em> を完全に理解したわけではないし、こういう使い方は多分 RESTful ではないんだろうけれども、セッションで認証情報を使った Web サービスを作る上でのポイントをメモしておきます。</p>

<h2>認証が必要なリソースは、認証済みの状態を元に URI を設計する</h2>




<h3>認証した人から見た URI か誰から見ても同じリソースを表す URI か</h3>


<p>たとえば、Twitter を思い浮かべてください。Twitter API をつかって自分のタイムラインを表示する場合、Twitter では次のような URI を使います。</p>

<pre>http://api.twitter.com/1/statuses/home_timeline.format</pre>


<p>この URI は認証が必要な URI になっています。この URI には&quot;誰の&quot;タイムラインを取得するかの情報は入っておらず、<em>home_timeline</em>、つまり自分のホームのタイムラインを取得する URI になっています。</p>

<p>&quot;自分の&quot;とは、<em>認証した人</em>という意味になります。</p>

<p>この URI は次のような URI になるように設計しても良いはずです。（※ 説明のための例なので、実際に Twitter にこの URI でアクセスしても繋がらないです。）</p>

<pre>http://api.twitter.com/1/statuses/<em>hamasyou</em>/home_timeline.format</pre>


<p>hamasyou のタイムラインを表したリソースです。認証した人が誰かという事は関係なく、常に同じリソースを表すようにしたものです。</p>

<p>ただし、認証した人 = hamasyou ではない場合には、この URI へアクセスしても、401 Unauthorized を返します。</p>

<h3>認証が必要な URI は、認証した人から見た URI になるように設計するほうがよい</h3>


<p>同じリソースを表す URI はいくつあっても構わず、唯一の URI である必要はないというのが REST の考え方ですので、どういうふうに URI を設計してもよいとは思います。</p>

<p>が、僕の経験上ですが、上のような認証が必要なリソースを表す URI は、認証した人から見た URI として設計するのがよいです。</p>

<p>こうしておくと何が良いかというと、<em>セキュリティを保ったままコードがきれいに書けることが多い</em>からです。</p>

<h3>認証が必要なリソースは、常にアクセス権限を意識しなければならない</h3>


<p>Ruby on Rails で作られたブログサービスを例にとります。例えば、次のようなルーティングでアクセスする機能があったとします。</p>

<pre>/blogs/<i>:blog_id</i>/articles/<i>:id</i>.<i>:format</i></pre>


<p>これは、あるユーザが所持する :blog_id のブログの :id で表される記事を取得するルーティングです。このルーティングを定義すると</p>

<pre>
GET     /blogs/<i>:blog_id</i>/articles/<i>:id</i>.<i>:format</i>
POST    /blogs/<i>:blog_id</i>/articles
PUT     /blogs/<i>:blog_id</i>/articles/<i>:id</i>
DELETE  /blogs/<i>:blog_id</i>/articles/<i>:id</i></pre>


<p>という HTTP リクエストと対応する機能のルーティングが定義されます。</p>

<p>この時、GET 以外のリクエストはすべて :blog_id を所持するユーザからのリクエストしか受け付けたくないとします。よくある会員サービスはこういう形になると思います。</p>

<h3>:blog_id はリクエストで送られるべきではなく、認証情報から取得するべき</h3>


<p>上のようなリクエストを受け付けたとき、やりがちなのは次のようなコードです。</p>

<pre class="code">blog = <em><span class="class">Blog</span>.find(params[<span class="literal">:blog_id</span>]</em>
blog.articles.create(params[<span class="literal">:id</span>])</pre>


<p>こうしてしまうと、:blog_id が認証した人の所持するブログと違う場合でも、認証さえ通っていれば別の人のブログの記事を触れてしまうことになります。</p>

<p>これは、正しくは次のようにする必要があります。</p>

<pre class="code">user = <span class="class">User</span>.authenticated_user_from_session
blog = user.blog
blog.articles.create(params[<span class="literal">:id</span>])</pre>


<p>authenticated_user_from_session は認証済みのユーザを取得するメソッドと考えてください。このように、きちんと認証した人に紐づくブログを取り出して、その記事を触るということをする必要があります。</p>

<h3>認証情報から引ける情報を URI に含めると不要な処理が増える</h3>


<p>上で見たように、セキュリティを考慮すると、認証情報から操作対象のリソースを引っ張る必要がでてきます。このとき、URI に :blog_id が含まれていると</p>

<ul><li>「<em>URI に :blog_id が含まれているので、自分以外のブログも更新できるんだな</em>」と考えられてしまったり、</li>
<li>「<em>URI には :blog_id が含まれているけど使わない</em>」という実装になって、URI の表現と挙動が一致しなくなってしまったり、</li>
<li>「<em>認証情報から引けるブログの id と URI の :blog_id を毎回比較してエラーチェックをする</em>」といった不要な処理を書くようになってしまったりします。</li>
</ul>




<h3>RESTful ではないかもしれないけど、認証にセッションをつかうなら</h3>


<p>このように、認証が必要なリソースへのアクセスに、認証情報から引ける情報を含めてしまうと、いろいろとめんどうくさいことになりがちです。なので、個人的におすすめするのが、次のように URI を設計する方法です。</p>

<ul><li>1) リソースごとに認証が必要かどうかを考える</li>
<li>2) 認証が不要なリソースの場合、URI にはリソースへアクセスするのに必要なパラメータをすべて含めるようにする</li>
<li>3) メソッドごとに認証が必要なリソースの場合、認証が必要なメソッドに関しては認証情報から引ける情報は含めないようにする</li>
<li>4) または、認証が必要なリソースを表す URI を別に作成してそちらにリダイレクトする</li></ul>




<pre>2の例)
GET     /wiki/<i>:page_name</i>.<i>:format</i>
PUT     /wiki/<i>:page_name</i>
DELETE  /wiki/<i>:page_name</i></pre>




<pre>3の例)
GET     /blogs/<i>:blog_id</i>/articles/<i>:id</i>.<i>:format</i>
POST    /articles
PUT     /articles/<i>:id</i>
DELETE  /articles/<i>:id</i></pre>


<p>こんなふうに考えると、認証が必要なリソースも上手く扱えるんじゃないかと思います。</p>

<p>他に、上手くやる方法を知っている方がいれば、是非教えていただけると助かります。いつも認証周りの設計で苦労するので。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webを支える技術 -HTTP、URI、HTML、そしてREST]]></title>
    <link href="http://hamasyou.com/blog/2010/05/31/4774142042/"/>
    <updated>2010-05-31T18:31:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/05/31/4774142042</id>
    <content type="html"><![CDATA[<p>Webで成功するサービスを作る究極の指針は「シンプルであること」だと思います。これは別にWebに限らずそうだと思います。例えば、AppleやSONYやDELLなどの起業が成功したのは、シンプルな製品、サービスを作り出したからではないかと思います。Googleの検索窓なんかは、究極のシンプルだと思います（だんだんといろんなものがつき始めましたが。。。）</p>

<p>業務で使用するWebサービス、コンシューマ向けのWebアプリケーションAPIなどもこの設計指針が当てはまると思いますし、本書はこのことだけが追求されて書かれている良書です。</p>

<p>Webの成り立ち、ここまで成長してきたのは何故か、Webをより良く使うための設計方針が本書には詰まっています。Web開発の初心者にはもちろん、Web開発をバンバンにやってきた人にも、一度は目を通して欲しい本です。かなりオススメですし、読めば必ず目から鱗間違いなしです。</p>

<!-- more -->


<p>RESTについては、<a href="http://hamasyou.com/archives/000343" rel="external nofollow">RESTful Webサービス</a>の記事も参考にしてください。</p>

<h2>Webを支える技術</h2>




<dl>
  <dt>HTTP、URI、HTML</dt>
  <dd><p>HTTPというシンプルなプロトコルの上で、リソースを一意に特定するURIを用いて、HTMLで記述されたメディアを読む。Webはそんなシンプルな技術によって成り立っています。</p></dd>
  <dt>ハイパーメディア</dt>
  <dd><p>テキスト、画像、音声、動画などをハイパーリンクで結びつけたシステムをハイパーメディアと呼びます。Webで最も重要なのはこのハイパーリンクによってメディアがリンクしているということです。</p></dd>  
  <dt>分散システム</dt>
  <dd><p>Webはひとつのシステムで成り立っているわけではなく、大量のコンピュータが組み合わさっています。ネットワーク上に散らばったこれらのコンピュータが相互動作するのは、シンプルなプロトコルだからこそと言えるでしょう。</p></dd>
</dl>




<h2>REST-Webのアーキテクチャスタイル</h2>


<p>RESTとはアーキテクチャスタイルでRESTアーキテクチャスタイルなアーキテクチャのことをRESTfulアーキテクチャと呼びます。</p>

<p><blockquote><p>RESTはWeb全体のアーキテクチャスタイルでもあり、個別のWebサービスやWeb APIのアーキテクチャスタイルでもあります。一人一人が作る個別のWebサービスやWeb APIでも、RESTの約束を守ることが重要です。個別のWebサービスが全体の調和を乱しては、全体が統一したアーキテクチャスタイルを守れないからです。</p></p><p><p></p><footer><strong>本書 P.27</strong></footer></blockquote></p>

<h3>リソース</h3>


<p>RESTの重要な概念の一つにリソースがあります。<strong>リソースとはWeb上に存在する名前を持った情報</strong>の事をいいます。WebではこれをURIで表します。</p>

<p>RESTfulアーキテクチャではこのリソースを「アドレス可能な状態」にしておくことで、システムとして綺麗な形（シンプルなプログラムが可能）になります。</p>

<p><blockquote><p>URIが備える、リソースを簡単に指し示せる性質のことを「アドレス可能性」（Addressability）と呼びます。リソースをアドレス可能な状態、すなわちきちんと名前が付いており適切な手段でアクセスできる状態にすると、プログラムをとても作りやすくなります。</p></p><p><p></p><footer><strong>本書 P.29</strong></footer></blockquote></p>

<p>リソースは複数のURIを持つことができます。例えば、</p>

<pre>
http://www.hamasyou.com/reports/newest
</pre>




<pre>
http://www.hamasyou.com/reports/system/2010-05-31/1
</pre>


<p>は同じリソースを指すことができます。ただし、一つ目のURIは時間の経過とともに指し示すリソースが変わってしまうことがあります。常に同じリソースを表したい場合には、パーマネントリンクなどを参考にすると良いでしょう。</p>

<h3>クールなURIは変わらない</h3>


<p>良いURIやきれいなURIの事を「<strong>クールURI</strong>」と呼ぶそうです。「URIが変わらないべきである。変わらないURIこそが最上のURIである。」</p>

<p>クールURIにするためには、次のことに気をつければ良さそうです。</p>

<ul>
  <li>プログラミング言語に依存した拡張子やパスを含めない</li>
  <li>メソッド名やセッションIDを含めない</li>
  <li>URIはリソースを表現する名詞にする</li>
</ul>




<h4>プログラミング言語に依存した拡張子やパスを含めない</h4>


<p>例えば、JavaのStrutsを使うと、スタンダードなURIは「.do」という拡張子がつけることが多くあります。また、CGIなどの場合には、スクリプト言語の拡張子（.pl、.rb、.cgi など）をそのまま使うことがあります。</p>

<p>また、CGIなどの場合、「cgi-bin」などのディレクトリ名をパスに含めることがあります。これもプログラミング言語に依存したパスを含めていることになります。</p>

<p>こういった、プログラミング言語のデファクト、パス情報、ファイル拡張子などをURIに含めないようにすると、URIが変わりにくくなります。</p>

<h4>メソッド名やセッションIDを含めない</h4>


<p>リソースに対する処理メソッド名をURIに含めると、使っているフレームワークや仕様変更によりURIが変わりやすくなってしまいます。また、セッションIDなどをURIに含めるとアクセスする度にURIが変わってしまいかねないという状況になってしまいます。</p>

<pre>
http://www.hamasyou.com/sample/execute?cmdName=showPage&page=3;jssessionid=1234567890
</pre>


<p>URIにはメソッド名やセッションIDを含めないようにすると良いです。RESTfulアーキテクチャでは、統一インターフェースとしてHTTPのメソッド（GET, POST, PUT, DELETE）を使用すると良いでしょう。</p>

<h4>URIはリソースを表現する名詞にする</h4>


<p>URIにはメソッド名を含めずに、HTTPメソッドを使用して処理を分けると良いです。</p>

<pre>
悪い（×）： http://www.hamasyou.com/show/articles?id=10 （POSTでアクセスする）
</pre>




<pre>
良い（◯）： http://www.hamasyou.com/articles/10  (GETでアクセスする）
</pre>




<h2>URI設計のテクニック</h2>




<h3>拡張子で表現を指定する</h3>


<p><blockquote><p>ここまで、拡張子はURIの設計にとって悪であると述べてきました。しかし、悪いのは「.cgi」や「.pl」など実装に依存した拡張子です。実装に依存していない拡張子は良い側面を持つ場合もあります。</p></p><p><p></p><footer><strong>本書 P.60</strong></footer></blockquote></p>

<dl>
  <dt>言語を指定する拡張子</dt>
  <dd>言語を指定する拡張子「.ja」「.en」をリソースに含める。</dd>
  <dt>フォーマットを指定する拡張子</dt>
  <dd>「.html」「.atom」「.xml」「.json」などの表現フォーマットを指定する拡張子をリソースに含める。</dd>
</dl>




<h2>その他</h2>




<h3>統一インターフェース</h3>




<dl>
  <dt>GET</dt>
  <dd>リソースを取得する場合に使う。冪等（べきとう）。</dd>
  <dt>POST</dt>
  <dd>リソースを作成するときに使う。レスポンスとしてリソースのURIを返してくれることを希望する（新規作成の場合など）。新しいリソースのURIはLocationヘッダで返される（POST後はリダイレクトされる）。冪等ではない。</dd>
  <dt>PUT</dt>
  <dd>リソースを更新するときに使う。リソースのURIは変わらない。冪等だがリソースの状態は変わる。</dd>
  <dt>DELETE</dt>
  <dd>リソースを削除する時に使う。リソースのURIがわかっている場合に使い、なんど呼び出しても結果は変わらないべき。つまり、存在しないリソースに対してのDELETEは何もいわずに成功するし、DELETEによって他のリソースのURI表現が変わることはないようにする。冪等。</dd>
</dl>




<h3>検索結果にリソース表現</h3>




<pre>
http://www.hamasyou.com/articles/search?q={query}
</pre>


<p>searchというメソッド名をURIを含めているじゃないかと思うが、そうではなく、これは検索結果というリソースを表している（searchは名詞の方の検索）。</p>

<h3>オブジェクトモデルにおける関連のリソース表現</h3>


<p>関連のどちらがトップレベルリソース（上にくるリソース）かを考え、URIの階層構造でURIを表す。</p>

<p>記事群-設計カテゴリ-最新記事の場合。</p>

<pre>
http://www.hamasyou.com/articles/system/newest
</pre>


<p>設計カテゴリ-記事群-最新記事の場合。</p>

<pre>
http://www.hamasyou.com/system/articles/newest
</pre>




<h3>ロック機構をリソースで表す</h3>


<p>Web APIによってはロック機構を組み込みたい場合があります。この場合は、ロックを表す子リソースを作ることで対応できます。</p>

<p>リソースに対して、ロックリソースを作成し、そのロックリソースをDELETEすることでロック解除を表す。</p>

<p>本書 P.289より抜粋。</p>

<pre>
POST /1120034 HTTP/1.1
Host: zip.ricollab.jp
Content-Type: application/x-www-form-urlencoded
Authorization: Basic ...
 
scope=exclusive&timeout=300
</pre>


<p>ロック用のパラメータをリソースに対して送信し、ロックリソースを作成する。</p>

<pre>
HTTP/1.1 201 Created
Location: http://zip.ricollab.jp/1120034/lock
Content-Type: application/json
 
{
 "locktype": "exclusive",
 "timeout": "2010-09-07T10:00:30Z",
 "owner": "yohei"
}
</pre>


<p>ロック解除は、POSTで作成された子リソース（lock）を削除することで行う。</p>

<pre>
DELETE /1120034/lock HTTP/1.1
Host: zip.ricollab.jp
Authorization: Basic ... 
</pre>




<pre>
HTTP/1.1 200 OK
</pre>




<h2>参考</h2>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/RESTful-Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-Leonard-Richardson/dp/4873113539%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873113539" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>




<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3-Sanjiva-Weerawarana/dp/4434073435%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dsorehabooks-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4434073435" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
</feed>
