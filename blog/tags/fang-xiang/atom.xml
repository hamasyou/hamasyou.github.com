<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 方向 | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/fang-xiang/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2017-09-03T15:18:24+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[緯度・経度から二点間の距離と方向を計算する]]></title>
    <link href="http://hamasyou.com/blog/2010/09/07/post-2/"/>
    <updated>2010-09-07T13:39:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/09/07/post-2</id>
    <content type="html"><![CDATA[<p>ジオ系を触っていて、緯度、経度から二点間の距離とその方向を計算するロジックは色々なところで必要になるので、メモ。</p>

<p>元記事は下で、JavaScript に書き直しただけです。</p>

<h4>緯度、経度から距離と向きを算出</h4>




<ul><li>緯度、経度から距離と向きを算出 - 中年プログラマblog</li></ul>


<p>※現在リンク切れのため、ページのタイトルのみ記載させていただきます。</p>

<!-- more -->




<h2>緯度・経度から二点間の距離を計算する</h2>


<pre><code class="js">//
// 測地線航海算法の公式
//
function geoDistance(lat1, lng1, lat2, lng2, precision) {
  // 引数　precision は小数点以下の桁数（距離の精度）
  var distance = 0;
  if ((Math.abs(lat1 - lat2) &lt; 0.00001) &amp;&amp; (Math.abs(lng1 - lng2) &lt; 0.00001)) {
    distance = 0;
  } else {
    lat1 = lat1 * Math.PI / 180;
    lng1 = lng1 * Math.PI / 180;
    lat2 = lat2 * Math.PI / 180;
    lng2 = lng2 * Math.PI / 180;

    var A = 6378140;
    var B = 6356755;
    var F = (A - B) / A;

    var P1 = Math.atan((B / A) * Math.tan(lat1));
    var P2 = Math.atan((B / A) * Math.tan(lat2));

    var X = Math.acos(Math.sin(P1) * Math.sin(P2) + Math.cos(P1) * Math.cos(P2) * Math.cos(lng1 - lng2));
    var L = (F / 8) * ((Math.sin(X) - X) * Math.pow((Math.sin(P1) + Math.sin(P2)), 2) / Math.pow(Math.cos(X / 2), 2) - (Math.sin(X) - X) * Math.pow(Math.sin(P1) - Math.sin(P2), 2) / Math.pow(Math.sin(X), 2));

    distance = A * (X + L);
    var decimal_no = Math.pow(10, precision);
    distance = Math.round(decimal_no * distance / 1) / decimal_no;   // kmに変換するときは(1000で割る)
  }
  return distance;
}
</code></pre>

<h2>緯度・経度から方向（方角）を計算する</h2>


<pre><code class="js">function geoDirection(lat1, lng1, lat2, lng2) {
  // 緯度経度 lat1, lng1 の点を出発として、緯度経度 lat2, lng2 への方位
  // 北を０度で右回りの角度０～３６０度
  var Y = Math.cos(lng2 * Math.PI / 180) * Math.sin(lat2 * Math.PI / 180 - lat1 * Math.PI / 180);
  var X = Math.cos(lng1 * Math.PI / 180) * Math.sin(lng2 * Math.PI / 180) - Math.sin(lng1 * Math.PI / 180) * Math.cos(lng2 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180 - lat1 * Math.PI / 180);
  var dirE0 = 180 * Math.atan2(Y, X) / Math.PI; // 東向きが０度の方向
  if (dirE0 &lt; 0) {
    dirE0 = dirE0 + 360; //0～360 にする。
  }
  var dirN0 = (dirE0 + 90) % 360; //(dirE0+90)÷360の余りを出力 北向きが０度の方向
  return dirN0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
