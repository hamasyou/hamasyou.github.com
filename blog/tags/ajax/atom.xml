<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ajax | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/ajax/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-24T18:23:19+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ajaxイン・アクション]]></title>
    <link href="http://hamasyou.com/blog/2006/09/18/4844322222/"/>
    <updated>2006-09-18T02:00:00+09:00</updated>
    <id>http://hamasyou.com/blog/2006/09/18/4844322222</id>
    <content type="html"><![CDATA[<p>本書は、Ajax（エイジャックス : Asynchronous JavaScript + XML）の実践本です。Ajax とは何か？Ajax を使って何ができるのか？Ajax と呼べるアプリケーションを構築したい！Ajax ブームに乗っかりたい！という人のための本になっています。</p>

<p>本書は Ajax に関する4つの話題について書かれています。</p>

<ul><li>Ajax とは何か？Ajax を使う理由</li>
<li>Ajax アプリケーションを取り巻くコア技術</li>
<li>Ajax アプリケーションを実際に使えるようにするには、どういう点に気をつけるべきか</li>
<li>Ajax アプリケーションを実際に作りながら、実践的なアプローチの仕方を学ぶ</li></ul>


<p><blockquote><p>Ajax では、よく知られているいくつかのウェブ技術を組み合わせ、それらを新しい興味深い方法で使用します。&lt;中略&gt; Ajax 技術そのものはすべてクライアントサイドの話であるものの、その特徴はサーバーサイドにも及びます。</p></p><p><p></p><footer><strong>本書 序章 「本書の内容」 より抜粋</strong></footer></blockquote></p>

<p>本書の対象読者は、Ajax に興味のある人ですが、それなりにヘビーな内容になっています。本書を隅々まで読むには、Web の仕組み（HTTP 通信）を理解してることと、JavaScript が読める必要があります。Ajax とは何か？だけが知りたい人は別の書籍を当たったほうがよいと思います。本書は、Ajax 開発者向けの本になっています。</p>

<!-- more -->




<h2>Ajax とは</h2>




<h3>Asynchronous JavaScript + XML</h3>


<p>Ajax（エイジャックス）とは、Asynchronous JavaScript + XML のことで、古くからの Web 技術を組み合わせたものをあらわします。Ajax という技術があるわけではなく、Ajax は<strong>方法論</strong>のことです。Ajax は次のような技術がの集まりです。</p>

<ul><li>JavaScript</li><li>XHTML</li><li>XML</li><li>XSLT</li><li>Document Object Model（DOM）</li><li>XMLHttpRequestオブジェクト</li></ul>




<h3>Ajax の目的</h3>


<p>Ajax を使う目的は、Web 用のリッチユーザインターフェースを構築することにあります。「リッチ」 とは、色とりどりな装飾がされたという意味ではありません。Ajax におけるリッチとは、クライアントとの快適な対話モデルを指します。それは、入力手段に対する直感的な操作と反応があるというものです。クライアントが何かを入力したら、それに対する反応が即座に起こる。スタンドアローンのアプリケーションと変わらないユーザインターフェースを Web アプリケーションでも提供しようというのが Ajax の目的となります。</p>

<h3>Ajax アプリケーションの例</h3>




<ul><li><a href="http://labs.cybozu.co.jp/blog/akky/archives/2005/09/ajax_10.html" rel="external nofollow">Ajax アプリケーショントップ10</a></li>
<li><a href="http://maps.google.co.jp/" rel="external nofollow">Google マップ</a></li>
</ul>




<h2>Ajax の特徴</h2>




<h3>ブラウザが扱うのはコンテンツではなくアプリケーションである</h3>


<p><blockquote><p>従来型のページベースのアプリケーションでは、ブラウザは事実上、ダム端末です。<strong>ブラウザは、ユーザーが現在ワークフローのどの位置にいるのかについて何も知りません。</strong>通常は、その情報はすべて、ウェブサーバー上のユーザーセッションに保持されています。</p></p><p><p></p><footer><strong>本書 P.17 「Ajaxの特徴となる4つの原則」より</strong></footer></blockquote></p>

<p>つまり、従来型のアプリケーションでは、ブラウザはサーバが送ってくるコンテンツをただ表示するだけに過ぎなかったというわけです。サーバサイドでページ遷移の情報を管理し、データの管理を行っていました。Ajax を使うとこのモデルが次のようになります。</p>

<p><blockquote><p><strong>Ajax アプリケーションでは、アプリケーションロジックの一部をブラウザに移します</strong>。ユーザがログインすると、非常に複雑なドキュメントがブラウザに送られます。その大部分は JavaScript コードです。このドキュメントはセッション中ずっとユーザー側にとどまりますが、ユーザーがそのドキュメントと対話している間にその見た目を変化させることになります。</p></p><p><p>また、このドキュメントはユーザー入力に対する応答の方法を知っており、ユーザー入力自身で処理するか、ウェブサーバー（システムデータベースなどのリソースへのアクセスが可能）にリクエストとして渡すか、その両方を組み合わせるかを判断することができます。</p></p><p><p></p><footer><strong>本書 P.18 「Ajaxの特徴となる4つの原則」より</strong></footer></blockquote></p>

<p>Ajax アプリケーションでは、サーバサイドでしか管理していなかったビジネスロジックやワークフロー情報の一部を、クライアントサイドに移すことを考えます。こうすることで、ユーザとのリッチな対話モデルを実装しやすくなります。</p>

<dl>
<dt class="info">Information</dt>
<dd>サーバサイドからクライアントサイドへ、ビジネスロジックやワークフローの一部を移動する。</dd>
</dl>




<h3>サーバが配信するのはコンテンツではなくデータである</h3>


<p>従来型の Web アプリケーションは、一度のリクエスト/レスポンスでやり取りされる情報に、コンテンツとデータの両方が含まれていました（コンテンツとは画像や広告やページレイアウトなど、データはショッピングカートの中身など）。</p>

<p>Ajax アプリケーションでは、コンテンツ部分のやり取りは最初の一度のみで、後は必要なデータのやり取りだけを行うという形をとります。これにより通信データ量を抑えることができ、パフォーマンスがよくなります。</p>

<p><blockquote><p>Ajax アプリケーションでは、ユーザのログ印字に大規模で複雑なクライアントが一度に配信されるので、トラフィックは最初の負荷が大きくなります。しかし、その後のサーバーとの通信ははるかに効率がよくなります。短期滞在的アプリケーションの場合、累積トラフィックは従来のウェブページアプリケーションの方が少ないものの、対話時間が長くなるにつれて、Ajax アプリケーションの大域幅コストは従来のアプリケーションよりも少なくなります。</p></p><p><p></p><footer><strong>本書 P.20  「Ajaxの特徴となる4つの原則」より</strong></footer></blockquote></p>

<dl>
<dt class="info">Information</dt>
<dd>ページ全体をやり取りするのではなく、データだけをやり取りする。</dd>
</dl>




<h3>ユーザーとの対話は滑らかで継続的である</h3>


<p>Ajax の A（Asynchronous） と DHTML によって、ページ全体をリフレッシュすることなく滑らかな反応を行うことができます。また、ユーザのブラウザに対するさまざまなイベントにフックできるため、洗練されたユーザインターフェース（ドラッグアンドドロップなど）を実現することができます。</p>

<p><blockquote><p>ただし、ユーザビリティの観点からすると、このような自由度の高さはそれほど重要ではありません。私たちの想像力を活かせるという利点はありますが、その一方で、ユーザーとの対話とサーバーサイドリクエストを一緒くたにすることにもなるからです。</p></p><p><p></p><footer><strong>本書 P.22  「Ajaxの特徴となる4つの原則」より</strong></footer></blockquote></p>

<dl>
<dt class="info">Information</dt>
<dd>ユーザをイライラさせない。</dd>
</dl>




<h3>真のコーディングには規律が必要である</h3>


<p>Ajax アプリケーションで使われる JavaScript は、従来型のアプリケーションで使われる JavaScript とは少し違ったものになります。従来型のアプリケーションでは、単に入力確認やページに少し装飾を行う程度の使い方でした。</p>

<p>Ajax アプリケーションにおける JavaScript は、ビジネスロジックの一部であったり、ワークフローの一部を担う複雑なものになります。そのため、アプリケーションを閉じるまでの間動作し続けるものでなければなりません。メモリリークや低速化が行われないように注意してコーディングを行う必要があります。</p>

<dl>
<dt class="info">Information</dt>
<dd>やっつけ言語としての JavaScript ではなく、通常のコーディングと同じように規律を守ったコーディングを行う。</dd>
</dl>




<h2>CSS セレクタ</h2>




<h3>スタイルクラスの定義</h3>


<p>HTML タグの種類と関係ないスタイリングのためのクラスを定義するには、「.（ドット）」をつけて定義する。</p>

<pre class="code"><code>.info { border: solid blue 1px; backgournd-color: cyan }</code></pre>


<p>クラスをネストすることもできる。</p>

<pre class="code"><code>.info .help { font-size: small }
span.highlight { background-color: red }
</code></pre>


<p>HTML 内で id 属性によって指定されたものだけに適用されるようなスタイルクラスを定義するには、「#」を使う。</p>

<pre class="code"><code>#close { color: red }</code></pre>


<p>擬似セレクタに基づいてスタイルを定義することもできる。</p>

<p><a href="http://msugai.fc2web.com/web/CSS/pseudo.html" rel="external nofollow">CSS概説 | 5. 擬似クラスと擬似要素</a></p>

<p>次は、任意の要素の一文字目を 500% の文字サイズで表示する。</p>

<pre class="code"><code>*:first-letter { font-size: 500% }</code></pre>




<h3>JSON</h3>


<p>書けたら書く・・・</p>

<h2>参考</h2>


<ul>
<li>Ajax アプリケーションを書けるようになる本</li>
</ul>


<div class="rakuten"><table size="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774127728/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>Ajax の基礎に適しています</li>
</ul>


<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774125792/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
