<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: API | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/api/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2015-01-01T00:22:39+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[APIデザインの極意 Java/NetBeansアーキテクト探究ノート]]></title>
    <link href="http://hamasyou.com/blog/2014/08/30/484433591x/"/>
    <updated>2014-08-30T12:40:36+09:00</updated>
    <id>http://hamasyou.com/blog/2014/08/30/484433591x</id>
    <content type="html"><![CDATA[<p>本書は <strong>プログラミング API</strong> の設計本です。Web API の設計極意に関して知りたい人は 『<a href="http://www.amazon.co.jp/gp/product/4873113539?ie=UTF8&amp;camp=247&amp;creativeASIN=4873113539&amp;linkCode=xm2&amp;tag=sorehabooks-22">RESTful Webサービス</a>』や『<a href="http://www.amazon.co.jp/gp/product/4774142042?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4774142042">Webを支える技術 -HTTP、URI、HTML、そしてREST</a>』を読むのがいいと思います。本書は <a href="http://www.amazon.co.jp/gp/product/4797311126?ie=UTF8&amp;camp=247&amp;creativeASIN=4797311126&amp;linkCode=xm2&amp;tag=sorehabooks-22">GoF のデザインパターン
</a> や <a href="http://www.amazon.co.jp/gp/product/4621066056?ie=UTF8&amp;camp=247&amp;creativeASIN=4621066056&amp;linkCode=xm2&amp;tag=sorehabooks-22">EFFECTIVE JAVA</a> を読んだ開発者が次に読むべき本として紹介されています。</p>

<p><a href="http://www.amazon.co.jp/gp/product/4873113539?ie=UTF8&amp;camp=247&amp;creativeASIN=4873113539&amp;linkCode=xm2&amp;tag=sorehabooks-22"><img src="http://ecx.images-amazon.com/images/I/51ojIhXBP3L._SS140_.jpg" alt="RESTful Webサービス" /></a>
<a href="http://www.amazon.co.jp/gp/product/4774142042?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4774142042"><img src="http://ecx.images-amazon.com/images/I/51qo6pgjaSL._SS140_.jpg" alt="Webを支える技術 -HTTP、URI、HTML、そしてREST" /></a>
<a href="http://www.amazon.co.jp/gp/product/4797311126?ie=UTF8&amp;camp=247&amp;creativeASIN=4797311126&amp;linkCode=xm2&amp;tag=sorehabooks-22"><img src="http://ecx.images-amazon.com/images/I/61YX3ZDFIwL._SS140_.jpg" alt="オブジェクト指向における再利用のためのデザインパターン" /></a>
<a href="http://www.amazon.co.jp/gp/product/4621066056?ie=UTF8&amp;camp=247&amp;creativeASIN=4621066056&amp;linkCode=xm2&amp;tag=sorehabooks-22"><img src="http://ecx.images-amazon.com/images/I/91tYrFpKmLL._SS140_.jpg" alt="EFFECTIVE JAVA 第2版" /></a></p>

<p>本書は、NetBeans API を構築した筆者がデザインパターンやコーディング作法だけではうまくいかない問題、後方互換性を維持したままライブラリを発展させる方法、を重点的に解説しています。なるほど、 <strong>デザインパターンや設計方法を学んだ次に読むべき本</strong> として挙げられている理由がよくわかる内容になっています。</p>

<!-- more -->


<h3>社内ライブラリと API 設計は別物</h3>

<p>本書で扱う API という言葉は、例えばオープンソースライブラリのような、多くの人に共有されるものという位置づけになっています。社内で使うようなライブラリなどの API とはニュアンスが違う感じがしました。</p>

<p>一度リリースしたら、後方互換性を維持して発展させていかなければならない、そういった類のライブラリや API を作る開発者向けの本です。</p>

<h2>本書のテーマ</h2>

<p>本書のテーマは、次の2つに集約されると思います。</p>

<ul>
<li>後方互換性を維持する API のデザインパターン</li>
<li>優れた API であるためにどうするか</li>
</ul>


<p>NetBeans API で培った経験則を余す所なく記載してくれているため、ボリュームがスゴイことになっています。また、作って終わりの API の作り方を教えているわけではないので、おそらくほとんどの開発者には <em>なんとなくわかった気になるだけか難しくて後回しにする</em> ような内容かもしれません。</p>

<p>はっきり言って、本書が役に立った！と感じる開発者は少ないかもしれませんが、少なくとも GitHub でソースコードを公開している開発者は頑張って読んでもらうのがいいと思いました。それくらい内容が濃く、経験者しかわからないことが書いてあります。</p>

<h3>後方互換性を維持する API のデザインパターン</h3>

<p><blockquote><p>開発者は、API の現在のバージョンをコーディングしている場合に、未来について考えることが求められます。私に言えることは、それは、今までの API 設計でよく行われた方法ではないということです。また、今日までに書かれた書籍やその中の助言は、この種の思考にはあまり役に立ちません。それらには、単一バージョンの場合のデザインパターンが説明されていることがほとんどです。</p><footer><strong>本書</strong></footer></blockquote></p>

<p>これが、<strong>新しいデザイン本が必要な理由</strong> です。今日のシステムはコンポーネントの組み合わせで出来ています。おそらく今後もこの傾向は変わらないと思います。コンポーネント利用者の経験（投資）をムダにしない為に、よりよい発展を目指す上で、後方互換性を維持することは重要なことになります。これが、<strong>本書を読む理由</strong> です。</p>

<h3>優れた API であるためにどうするか</h3>

<p>では、どのように API 設計をすればいいか。その方法も本書に書かれています。</p>

<ul>
<li>メソッドとフィールドの優れたシグニチャ</li>
<li>ファイル操作</li>
<li>環境変数とコマンドラインオプション</li>
<li>API としてのテキストメッセージ</li>
<li>（ネットワーク）プロトコル</li>
<li>API の振る舞い</li>
<li>I18N と L10N のサポート</li>
<li>API の品質検査方法（正しさの証明）</li>
<li>理解しやすさ</li>
<li>一貫性</li>
<li>やりたいことが満たせる API を発見できること</li>
<li>単純なことを簡単に行えること</li>
<li>投資の保全（利用者を尊重すること）</li>
</ul>


<p>API に優れた名前をつけることや <strong>驚き最小の法則</strong>、シンプルで一貫性のある I/F にするというのは基本的にな事になります。こういったことを踏まえた上で、この API を利用してくれているユーザを尊重すること（次のバージョンでメソッド名を変更するなんてとんでもない！）が大切だと書かれています。</p>

<p>後方互換性を保ち、API のユーザの投資をムダにしない設計の方法を学びたい人、新しい視点を身につけたい人に本書はおすすめです。</p>

<p><blockquote><p>- オブジェクト指向アプリケーションフレームワークには、伝統的なデザインパターンとは異なるスキルが必要<br/>- クラスを API として扱って、頭痛の種を軽減<br/>- 将来、改善できるように API の発展計画を準備</p></blockquote></p>

<h2>目次</h2>

<ul>
<li>【第1部　理論と正当性】

<ul>
<li>第1章　 現代的なソフトウェア構築の技芸</li>
<li>第2章　 APIを作成する動機</li>
<li>第3章　 優れたAPIを決定づけるもの</li>
<li>第4章　 絶え間なく変わる標的</li>
</ul>
</li>
<li>【第2部　実践的設計】

<ul>
<li>第5章　 必要以上に公開しない</li>
<li>第6章　 実装ではなく、インタフェースに対してコーディングする</li>
<li>第7章　 モジュール方式アーキテクチャの使用</li>
<li>第8章　 クライアント用とプロバイダ用のAPIを分離</li>
<li>第9章　 テストの容易性に留意する</li>
<li>第10章　他のAPIとの協調</li>
<li>第11章　APIの実行時の側面</li>
<li>第12章　宣言型プログラミング</li>
</ul>
</li>
<li>【第3部　日々の生活】

<ul>
<li>第13章　有害で極端な助言</li>
<li>第14章　API設計のパラドックス</li>
<li>第15章　API宇宙の発展</li>
<li>第16章　チームワーク</li>
<li>第17章　ゲームでAPI設計スキルを向上させる</li>
<li>第18章　拡張可能なビジターパターンのケーススタディ</li>
<li>第19章　終焉の手続き</li>
</ul>
</li>
<li>終章：将来</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TitaniumのHTTPClientでRESTfulリクエストを送る]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful/"/>
    <updated>2014-02-17T10:24:58+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile</a> の <code>Titanium.Network.HTTPClient</code> を使って RESTful リクエストを送る場合の注意点です。</p>

<p>Titanium の <code>HTTPClient</code> で <code>DELETE</code> のときに <code>send</code> でパラメータを送ると <code>POST</code> リクエストになってしまいます。</p>

<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile Development Environment</a></p>

<ul>
<li>Titanium 3.2.1.GA</li>
</ul>


<!-- more -->


<p>Titanium の <code>HTTPClient</code> は <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> などのメソッドに対応していて、標準で RESTful リクエストを送れるようになっています。</p>

<h3>GET の例</h3>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010286b4a8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010286b318&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{}
127.0.0.1 - - [17/Feb/2014 10:29:45] "GET / HTTP/1.1" 200 - 0.0006
</code></pre>

<h3>POST の例</h3>

<p><code>client.open('GET', url)</code> を <code>client.open('POST', url)</code> に変えて実行します。</p>

<pre><code class="javascript">client.open('POST', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:43:06] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<h3>PUT と DELETE の例</h3>

<p>同じように <code>PUT</code> と <code>DELETE</code> でも試してみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:45:32] "PUT / HTTP/1.1" 200 - 0.0005
</code></pre>

<pre><code class="javascript">client.open('DELETE', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : DELETE"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:46:28] "DELETE / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>client.send</code> でパラメータを送信しなければ、<code>open</code> で渡したメソッドでリクエストが投げられています。</p>

<h2>HTTPClient でパラメータを渡して <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> してみる</h2>

<p>次は、パラメータを渡して試してみます。</p>

<p><code>GET</code> は <code>send</code> メソッドにパラメータを渡すのではなく URL にクエリを設定して送ります。</p>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url + '?name=hamasyou');
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/?name=hamasyou"
"QUERY_STRING : name=hamasyou"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001019451b8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x00000101945140&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:49:41] "GET /?name=hamasyou HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>GET</code> で送られています。次は <code>POST</code> で送ってみます。</p>

<pre><code class="javascript">client.open('POST', url);
client.send({name: 'hamasyou'});
</code></pre>

<p><code>POST</code> は <code>client.send</code> にパラメータを渡して送ります。<code>POST</code> のデフォルトの <code>Content-Type</code> は <code>application/x-www-form-urlencoded</code> になります。</p>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded; charset=utf-8"
"QUERY_STRING : "
...
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:52:10] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>POST</code> で <code>Content-Type: application/json</code> で送る場合は、<code>HTTPClient#setRequestHeader</code> で設定します。</p>

<pre><code class="javascript">client.open('POST', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:56:20] "POST / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>PUT</code> と <code>DELETE</code> も <code>send</code> でパラメータを送ってみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:57:49] "PUT / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>PUT</code> はうまくいきました。次は <code>DELETE</code> です。</p>

<pre><code class="javascript">client.open('DELETE', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:58:52] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p>なんと、<code>POST</code> リクエストになってしまいました。。<code>DELETE</code> メソッドだけ、パラメータを <code>body</code> 部分に含めると <code>POST</code> リクエストになってしまうみたいです。。</p>

<p>OAuth 対応の API 等で access_token をパラメータに含めてリクエストする様な API を呼び出すときは要注意です。</p>

<p>できるだけ、認証情報は HTTP Header を使うようにした方がいいのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザ操作で簡単にスクレイピングAPIが作れる「kimono」]]></title>
    <link href="http://hamasyou.com/blog/2014/02/15/kimono-api/"/>
    <updated>2014-02-15T19:57:19+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/15/kimono-api</id>
    <content type="html"><![CDATA[<p>「<strong>kimono</strong>」はウェブサイトをブラウザ操作で簡単にスクレイピングして API 化してくれるサービスです。</p>

<p><a href="http://www.kimonolabs.com/">kimono - Turn websites into structured APIs from your browser in seconds</a></p>

<p><img src="/images/2014-02-15-kimono-api-01.png" alt="kimono" /></p>

<!-- more -->


<p>スクレイピングしたいサイトの URL を入力すると抜き出す要素を選択する画面になります。</p>

<p>最近ページングにも対応したので、ページングのあるサイトも簡単に取得できるようになります。</p>

<p><img src="/images/2014-02-15-kimono-api-02.png" alt="要素の選択" /></p>

<p><img src="/images/2014-02-15-kimono-api-03.png" alt="プレビュー画面" /></p>

<p>スクレイピングの頻度もリアルタイムや何時間毎のような設定ができます。</p>

<p>できた API は言語ごとに呼び出し例が用意されているので便利です。こういう所気が効いていますね。</p>

<p><img src="/images/2014-02-15-kimono-api-04.png" alt="API 詳細" /></p>

<p>実際に呼び出してみるとちゃんと結果が取得できます。</p>

<pre><code class="ruby misc/kimono.rb">require 'rest_client'
require 'json'
require 'pp'

response = RestClient.get 'http://www.kimonolabs.com/api/4b5q146s?apikey=81c2b7add1263b7e459f5ed58b5f6504'
json = JSON.parse(response.to_str)
pp json
</code></pre>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>gem install rest-client</span><span class='line command'>bundle exec ruby misc/kimono.rb</span><span class='line output'>{&ldquo;name&rdquo;=>&ldquo;archives&rdquo;,
</span><span class='line output'> &ldquo;lastrunstatus&rdquo;=>&ldquo;success&rdquo;,
</span><span class='line output'> &ldquo;lastsuccess&rdquo;=>&ldquo;Sat Feb 15 2014 11:27:17 GMT+0000 (UTC)&rdquo;,
</span><span class='line output'> &ldquo;nextrun&rdquo;=>&ldquo;Sat Feb 15 2014 11:57:15 GMT+0000 (UTC)&rdquo;,
</span><span class='line output'> &ldquo;frequency&rdquo;=>&ldquo;halfhourly&rdquo;,
</span><span class='line output'> &ldquo;newdata&rdquo;=>false,
</span><span class='line output'> &ldquo;results&rdquo;=>
</span><span class='line output'>  {&ldquo;collection1&rdquo;=>
</span><span class='line output'>    [{&ldquo;title&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;ガンダムUCのシナンジュが好き&rdquo;,
</span><span class='line output'>        &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/2014/02/15/gundam-unicorn/&rdquo;},
</span><span class='line output'>      &ldquo;category&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;Blog&rdquo;, &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/categories/blog/&rdquo;}},
</span><span class='line output'>     {&ldquo;title&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;Octopress の rel=”canonical” の設定がおかしい件&rdquo;,
</span><span class='line output'>        &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/2014/02/15/octopress-canonical/&rdquo;},
</span><span class='line output'>      &ldquo;category&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;Blog&rdquo;, &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/categories/blog/&rdquo;}},
</span><span class='line output'>     {&ldquo;title&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;ビューティフルコード&rdquo;,
</span><span class='line output'>        &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/2014/02/14/4873113636/&rdquo;},
</span><span class='line output'>&hellip;</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><a href="http://pipes.yahoo.com/pipes/">Yahoo Pipes</a> のような有名なサービスもありますが、簡単にウェブサイトをスクレイピングしたい用途であれば <em>kimono</em> はオススメのサービスです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Platform API（Graph API、FQL）]]></title>
    <link href="http://hamasyou.com/blog/2011/02/02/facebook-platform-apigraph-apifql/"/>
    <updated>2011-02-02T19:55:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/02/02/facebook-platform-apigraph-apifql</id>
    <content type="html"><![CDATA[<p>Facebook Platform の API についてのメモ。間違っているところがあるかも。。。</p>

<!-- more -->




<h2>ソーシャルグラフとは</h2>


<p>ソーシャルグラフとは、簡単に言うと「<strong>人と人とのつながりを表したもの</strong>」です。Facebook はこのソーシャルグラフにアクセスするための API を提供してくれています。</p>

<p>Facebook が提供してくれている API のうち、ソーシャルグラフにアクセスするための API として <strong>Graph API</strong> と <strong>FQL（Facebook Query Language）</strong>、<strong>Legacy APIs</strong> を提供しています。</p>

<p>Legacy APIs は古い API 群で、Graph API に移行しろと Document で書かれているので今後は使わないほうがいいと思います。</p>

<h2>Graph API</h2>


<p>Graph API は、Facebook のソーシャルグラフにアクセスするための API です。Facebook ではソーシャルグラフ上のオブジェクトを次の二つのカテゴリに分けています。</p>

<ol><li>Objects</li><li>Connections</li></ol>


<p>Graph API は、Objects の Connections をたどって別の Objects を取得するような使い方をします。</p>

<p><a href="http://developers.facebook.com/docs/reference/api/" rel="external nofollow">Graph API - facebook.com</a></p>

<h3>Objects</h3>


<p>ソーシャルグラフ上のノードにあたるモノを表します。それぞれ属性（プロパティ）をもちます。</p>

<ul>
<li>Users</li>
<li>Pages</li>
<li>Events</li>
<li>Groups</li>
<li>Applications</li>
<li>Status messages</li>
<li>Photos</li>
<li>Photo albums</li>
<li>Profile pictures</li>
<li>Videos</li>
<li>Notes</li>
<li>Checkins</li>
</ul>




<h3>Connections</h3>


<p>Objects を結ぶ関連を表します。いいね！や自分で付けたタグなどがこれに当たります。</p>

<ul>
<li>Friends</li>
<li>News feed</li>
<li>Profile feed (Wall)</li>
<li>Likes</li>
<li>Movies</li>
<li>Music</li>
<li>Books</li>
<li>Notes</li>
<li>Photo Tags</li>
<li>Photo Albums</li>
<li>Video Tags</li>
<li>Video Uploads</li>
<li>Events</li>
<li>Groups</li>
<li>Checkins</li>
</ul>




<h2>FQL（Facebook Query Language）</h2>


<p>FQL はソーシャルグラフを SQL を使って取得できるような API です。FQL でアクセスできるテーブルは <a href="http://developers.facebook.com/docs/reference/fql/" rel="external nofollow">Facebook Query Language (FQL) - Facebook.com</a> を参考にしてみてください。</p>

<p>FQL を使うと、Graph API で取得することが難しかった「<em>この人がいいね！している写真を30件取得する</em>」のようなことができます。</p>

<p>あと、Graph API と FQL は全く別のものとして考えたほうが良いと思います。同じ like を取得するにしても、Graph API で取得する like と FQL の like テーブルを検索するのでは、思っていたのと違う情報が取れてきます。</p>

<p>Graph API の方の like は API で like を POST したデータが入っていて、例えば facebook 内で大学に対していいね！した情報等が入っています。逆に、FQL の like テーブルに入っているデータは、どうやら facebook の外のサイトでいいね！した情報のみが入っていて、facebook 内で大学等にいいね！すると、page_fan というテーブルに情報が入るようです。</p>

<p>FQL は複数クエリを同時に発行してバッチのように使うこともできます。</p>

<h3>FQL を試す環境</h3>


<p><a href="http://developers.facebook.com/docs/reference/rest/fql.query" rel="external nofollow">fql.query - facebook.com</a></p>

<h2>FQL の制約</h2>




<ol>
<li>ひとつのテーブルにしかアクセスできない</li>
<li>インデックスが付いたカラムしか検索条件に指定できない（ただし、user_id カラムなど、ログインユーザのID:me() で指定できる場合もある）</li>
<li>検索条件でテーブルのプライマリーキーを使う場合、存在しない値を検索するとエラーになる</li>
</ol>


<p>特に3.はハマりやすいので注意です。次のクエリはエラーになります。</p>

<pre class="code">SELECT url FROM link WHERE link_id IN (SELECT object_id FROM like WHERE user_id = me())</pre>


<p>link テーブルの link_id は identifier なので、IN で戻ってくる object_id がすべて存在していないといけないのです。結構ハマりやすいので注意！</p>

<p><section></p>

<h3>参考</h3>


<p><a href="http://www.madin.jp/diary/?date=20101214" rel="external nofollow">[Facebook]Facebook アプリ作ろうぜ (その7 Like の取得が面倒な件について、あと FQL について) - コーヒーサーバは香炉である</a></p>

<p></section></p>
]]></content>
  </entry>
  
</feed>
