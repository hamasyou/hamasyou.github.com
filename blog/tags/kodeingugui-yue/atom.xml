<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: コーディング規約 | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/kodeingugui-yue/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2017-05-10T11:49:17+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[プログラミング作法]]></title>
    <link href="http://hamasyou.com/blog/2004/06/30/4756136494/"/>
    <updated>2004-06-30T03:25:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/06/30/4756136494</id>
    <content type="html"><![CDATA[<p>この世の中に、自分のソースコードを芸術のように扱うプログラマーがいったい何人いるのだろうか。本書を読み終わった後、プログラミングって芸術だよなーって、一人で納得してしまいました。</p>

<p><strong>ソースコードは、コンピュータが解釈するもの。良いソースコードは、人が解釈できるもの。</strong>自らのプログラミングソースを優れたものとして自慢できるプログラマーに僕はなりたい。本書はそんな願いをかなえてくれる、すばらしきバイブルです。</p>

<!-- more -->




<h2>特徴</h2>


<p>本書は、以下のような経験をしたことがあるプログラマーに是非とも読んでいただきたい。</p>

<ul>
<li>間違ったアルゴリズムでコーディングしてやたらと時間を無駄にした</li>
<li>使用するデータ構造が死ぬほど複雑になった</li>
<li>プログラムをテストしたのに明白な問題点を見落としていた</li>
<li>5分もあれば見つかるはずのバグを1日がかりで探し回った</li>
<li>プログラムを3倍速くしメモリ使用量も減らしたいと思った</li>
<li>ワークステーションとPCの間でプログラムを移植するのに苦労した</li>
<li>他人のプログラムに少々変更を加えようとした</li>
<li>さっぱり理解できないプログラムを書き直した</li>
</ul>


<p>基本的で互いに関連しあう原則</p>

<ul><li>簡潔性(simplicity)</li><li>明瞭製(clarity)</li><li>一般性(generality)</li><li>自動化(automation)</li></ul>


<p>この4つの原則を基本アプローチとして解説している。</p>

<p>本書の目次は以下のようになっている</p>

<ul><li>スタイル</li><li>アルゴリズムとデータ構造</li><li>設計と実装</li><li>インターフェース</li><li>デバッグ</li><li>テスト</li><li>性能</li><li>移植性</li><li>記法</li></ul>


<p>本書の例は、C言語もしくはそれに似た言語で書かれている。しかし、作法という点で見るとどの言語についても言える、高水準なものが説明されている。</p>

<p>本書の中で特に良かったと思うところを参考までにあげておきます。</p>

<h3>スタイル</h3>


<p>よいコーディングとはどのようなものかを解説しています。具体的なコード例が載っていて、なぜこれが良いのかという理由がはっきりしているのが魅力的です。</p>

<p>名前についても書かれています。変数名やメソッド名、インターフェース名やクラス名にはどのような名前をつけたらよいのかも解説しています。<strong>名前は、情報を含み、簡潔で覚えやすくできれば発音可能な名前にしなければならない。</strong></p>

<p>他にも、聞きたくても聞けなかった疑問や、使えるTipsなど豊富に盛り込まれています。例えば、「オブジェクトサイズは言語に計算させよう」や「悪いコードにコメントはいらない。書き直せ。」など、プログラマの聖書となるようなアドバイスがたくさんです。</p>

<h3>インターフェース</h3>


<p>設計においてまず解決しなければならない問題をしっかりとした理由をつけて解説してくれています。インターフェース設計で注意する点やライブラリを作るときの心構えなども載っています。</p>

<p>「インターフェースというのは要するに提供者と顧客の間の契約だ」「ペアとなる作業(リソースのオープンとクローズなど)は同一のレベルないし同じ場所で実行されるべきだ」「原則として、ライブラリルーチンはエラー発生時に単純に死んではならない」「ユーザに内緒で何かをするな」など、目からウロコが落ちるアドバイスばかりです。</p>

<h3>デバッグ</h3>


<p>「丁寧な治療よりもほんのちょっとした予防のほうが、現実にはるかに効き目がある」「プログラムをステップ実行するよりも、もっと真剣に考えたり、重要部分に出力分野自動チェックコードを追加したりするほうが効率的」「コードをなめるように読んで、変更を施さずにしばらくよく考えてみること」</p>

<p>デバッグするときの金言集になっています。</p>

<p>本書について説明すればするほど、本書の価値が下がってしまうような気がします。<strong>ほんとうに良いものに、説明は必要ない。</strong>そんな言葉が一番マッチする本だと思います。</p>

<h2>参考</h2>


<ul>
<li>C言語の処方箋</li>
</ul>


<p><a href="http://www.pro.or.jp/~fuji/mybooks/cdiag/" rel="external nofollow">Cプログラミング診断室</a></p>

<ul>
<li>本書を実践している人たちがずばりこの人たちでしょう。</li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712741/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>


<ul>
<li>アルゴリズムに特化した、超おすすめ本</li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712369/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>



]]></content>
  </entry>
  
</feed>
