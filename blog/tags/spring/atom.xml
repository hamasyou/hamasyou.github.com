<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Spring | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/spring/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-13T17:24:26+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pro Spring]]></title>
    <link href="http://hamasyou.com/blog/2005/06/14/1590594614/"/>
    <updated>2005-06-14T23:41:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/06/14/1590594614</id>
    <content type="html"><![CDATA[<p>最初に断っておきます。本書は洋書です。ただ、この記事を執筆している現在(2005/06/14)で、<b>この本より詳しく、この本より分かりやすくSpringを解説している本はない</b>です。しかも洋書なので、下手な訳がない分逆に分かりやすいです。</p>

<p>本書は、<a href="http://www.springframework.org/" rel="external nofollow">Spring Framework</a>(以下、Spring)について解説した本です。Springは数あるフレームワークの一つで、最近話題のDIパターンを実装しています。</p>

<p>本書は、DIパターンを実装しているフレームワークの中でも、アメリカで爆発的に人気の在るSpringの、仕組みや使い方を学ぶ本です。業務でSpringを使う予定がある人、Springを勉強したい人は、かなり買いの一冊です。</p>

<!-- more -->




<h2>特徴</h2>


<p>本書の特徴は、詳しい解説と豊富なサンプルコードです。</p>

<p>詳しい解説とは何を意味するかと言うと、Springのコアテクノロジをほぼすべて解説していることと、使う場合に注意することが網羅されていることです。実際に業務でSpringを使う人には、非常に便利な構成になっています。</p>

<p>豊富なサンプルコードは、英語が読めない人でもコードを読めば動きが分かるくらいの物が多数載っています。そのまま真似できるレベルのコードが書かれています。</p>

<p>本書が訳されたら、大ヒットすると思います。それくらい、内容が濃く分かりやすい本になっています。業務で利用する人もそうでない人も、Springに興味があれば本書を購入することをおすすめします。</p>

<h2>参考</h2>


<ul>
<li>日本語でSpringを解説した最初の本だと思います。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774123412/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>In Action シリーズ、Spring編です。(洋書)</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/1932394354/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>Spring用の入門書です。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822221431/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>Spring、JSF、Hibernateを使った実践的な入門書です。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4839917779/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Framework 覚書き - AOP]]></title>
    <link href="http://hamasyou.com/blog/2004/11/09/spring-framework-jue-shu-ki-aop/"/>
    <updated>2004-11-09T10:14:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/11/09/spring-framework-jue-shu-ki-aop</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764558315/sorehabooks-22" rel="external nofollow"></a>
</p>


<p>アメリカではほとんどデフェクトスタンダードとなっている「<a href="http://www.springframework.org/" rel="external nofollow"></a>」の覚書きです。Spring は簡単に言うと、<abbr title="Inversion of Control">IoC (制御の反転)</abbr>、またの名を <abbr title="Dependency Injection">DI (依存性注入)</abbr> という仕組みを取り入れた軽量コンテナです。</p>

<p><abbr title="Aspect Oriented Programming">AOP</abbr>(アスペクト指向プログラミング) はクラスの直接的な責務ではない、各モジュールから共通で使われる処理を、独立して切り出す手法です。「クラスの直接的な責務でない」とは、例えば「ログ」や「トランザクション」、「認証」などです。多くのクラスに重複コードが生まれてしまうような処理は、<b>アスペクト(横断的関心事)</b> として別のモジュールにしてしまうという手法をとることが出来ます。Spring AOP は、このアスペクトを扱うものです。
参考：<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797326387/sorehabooks-22" rel="external nofollow">『AspectJによるアスペクト指向プログラミング入門』 ソフトバンクパブリッシング</a>
　
Springの詳細については、ほかにもっとよいサイト(<a href="http://www.andore.com/money/trans/spring_ref_ja.html" rel="external nofollow">Springフレームワークの紹介</a>)があるので、そちらを参考にしてください。ここでは、Springを使っていて、ハマった点や気になった点などをメモしていこうと思います。随時更新していくつもりです。間違っている可能性が高いので、気になる点があればコメントをお願いします。</p>

<p><section></p>

<h4>参考</h4>


<p><a href="http://wiki.bmedianode.com/Spring/?FrontPage" rel="external nofollow">Spring Pad - Wiki</a></p>

<p><a href="http://direct.idg.co.jp/detail_1.msp?id=1066&class=10005&n=2" rel="external nofollow">JavaWorld 7月号 2004年</a></p>

<p></section></p>

<!-- more -->




<h2>Spring AOP フレームワーク</h2>




<ul><li><a href="#Spring AOP 用語" rel="external nofollow">Spring AOP 用語</a></li>
<li><a href="#Spring AOP とは" rel="external nofollow">Spring AOP とは</a></li>
<li><a href="#Spring AOP で使われる主なクラス / インターフェース" rel="external nofollow">Spring AOP で使われる主なクラス / インターフェース</a></li>
<li><a href="#ProxyFactoryBean を使ったサンプルコード" rel="external nofollow">ProxyFactoryBean を使ったサンプルコード</a></li>
<li><a href="#Advisor とは？" rel="external nofollow">Advisor とは？</a></li>
<li><a href="#ハマった点" rel="external nofollow">ハマった点</a></li>
</ul>




<h2 id="Spring AOP 用語">Spring AOP 用語</h2>


<p>Spring AOP で出てくる主要な用語まとめです。</p>

<dl><dt><a name="アスペクト"></a>アスペクト (Aspect)</dt>
<dd>共通の処理としてモジュールから呼び出されるもの。</dd>
<dt><a name="インターセプト"></a>インターセプト (Intercept)</dt>
<dd>メソッドの呼び出しタイミングで、振る舞いを挿入すること。</dd>
<dt><a name="ジョインポイント"></a>ジョインポイント (Joinpoint)</dt>
<dd>アスペクトコードが挿入できる位置を表したもの。例えば、メソッド呼び出しの前後などは、ジョインポイントになる。</dd>
<dt><a name="アドバイス"></a>アドバイス (Advice)</dt>
<dd>ジョインポイントに埋め込まれるアスペクトコードのこと。4つの種類がある。
<dl><dt>Around Advice</dt>
<dd>ジョインポイントの前後で実行される。</dd>
<dt>Before Advice</dt>
<dd>ジョインポイントの前に実行される。</dd>
<dt>After Advice</dt>
<dd>ジョインポイントの後に実行される。2つの種類がある。
<dl><dt>After returning Advice</dt>
<dd>ジョインポイントでの処理が正常に終了した後に実行される。</dd>
<dt>Throws Advice</dt>
<dd>ジョインポイントでの処理で例外が発生した場合に実行される。</dd>
</dl>
</dd>
</dl>
</dd>
<dt><a name="ポイントカット"></a>ポイントカット (Pointcut)</dt>
<dd>ジョインポイントの集合のこと。条件にあうジョインポイントだけを抜き出すことも可能。</dd>
<dt<a name="イントロダクション"></a>イントロダクション (Introduction)</dt>
<dd>アドバイスとしてメソッドやフィールドを挿入すること。ソースコード上で実装していないインターフェースなどを実行時に付け加えることが出来るので、デバッグは難しくなる。</dd>
<dt><a name="ウィーブ"></a>ウィーブ (Weave)</dt>
<dd><p>アスペクトをジョインポイントやポイントカットに織り込むこと。</p>

<section>

<h4>[静的ウィーブと動的ウィーブ]</h4>

 静的ウィーブとは、コンパイル時にアスペクトを織り込むこと。静的ウィーブを提供している実行環境には、「AspectJ」などがある。逆に、動的時にウィーブするには、プロキシを使って実行コードを隠蔽してやる必要があります。

</section>
</dd>
</dl>


<p>アスペクト用語を図にするとこんな感じでしょうか？</p>

<p><img src="http://hamasyou.com/images/engineer_soul/aspect_image.gif" alt="アスペクト指向イメージ図" /></p>

<h2 id="Spring AOP とは">Spring AOP とは</h2>


<p>Spring AOP は<a href="#インターセプト" rel="external nofollow">イントロダクション</a>は使えます。</p>

<p>Spring AOP は、<a href="#ジョインポイント" rel="external nofollow">アスペクト</a>を織り込む方法として、インターセプトを使います。処理の流れはこんな感じです。</p>

<ol><li>Spring は実行時に、アスペクト対象クラスのプロキシオブジェクトを生成します。</li><li>そして、プロキシオブジェクトの内部で、アスペクト対象クラスの処理を実行します。</li><li>ジョインポイントとして、アスペクト対象クラスが指定されると、プロキシの中でインターセプトクラスのアドバイスメソッドが呼ばれます。</li></ol>


<p>Spring AOP では、<a href="#ポイントカット" rel="external nofollow">アドバイス</a>を一緒に扱う「<b>アドバイザー (Advisor)</b>」というものを使います。任意のポイントカットとアドバイスを組み合わせて使います。</p>

<h2 id="Spring AOP で使われる主なクラス / インターフェース">Spring AOP で使われる主なクラス / インターフェース</h2>


<p>Spring AOP を利用する場合に使われる主なクラスやインターフェースです。</p>

<h3>org.springframework.aop.framework.ProxyFactoryBean</h3>


<p>AOP Proxy 戦略を行うための FactoryBean です。簡単に言うと、Spring で AOP を行うときに使う、FactoryBean です。</p>

<p><section></p>

<h4>【設定する項目】</h4>




<dl><dt>interceptorNames</dt>
<dd>インターセプトするクラスを設定します。<i>org.aopalliance.intercept.MethodInterceptor</i> を実装したクラス参照の ID を指定します。リスト値を取ることが出来るので、クラス名の並び順を考える必要があります。(指定した順に適用される)</dd>
<dt>target</dt>
<dd>アスペクト対象の Bean 参照(ref bean)を指定します。</dd>
<dt>proxyInterfaces</dt>
<dd>プロキシに使用するクラス名の配列を指定します。特に指定のない場合は、書かなくても問題ありません。</dd>
</dl>


<p></section></p>

<h3>org.springframework.aop.Pointcut</h3>


<p><a href="#ポイントカット" rel="external nofollow">ポイントカット</a>はアドバイスの挿入地点であるジョインポイントの部分集合です。クラス名やメソッド名のマッチング条件を指定することにより、ジョインポイントの集合を表すことが出来ます。</p>

<h3>org.springframework.aop.MethodMatcher</h3>


<p><a href="#ポイントカット" rel="external nofollow">ポイントカット</a>の一部です。呼び出されたメソッドがポイントカットの集合に含まれるかどうかを判定します。静的な呼び出しである場合には、引数が2つの matches メソッドが呼び出されます。動的な呼び出しである場合には、引数が3つの matches メソッドが呼び出されます。</p>

<p>Spring AOP では、ポイントカットは Union (和集合) と Intersection (交差) で表せます。 org.springframework.aop.support.Pointcuts クラスを使います。</p>

<p><section></p>

<h4>【主な MethodMatcher】</h4>




<dl><dt>TrueMethodMatcher</dt>
<dd>すべてのメソッドにマッチするマッチャーです。</dd>
<dt>NameMatchMethodPointcut</dt>
<dd>メソッド名を正規表現を使って表せるマッチャーです。</dd>
<dt>RegexpMethodPointcutAdvisor</dt>
<dd>正規表現を使ってポイントカットを表せるアドバイザーです。</dd>
</dl>


<p></section></p>

<h3>org.aopalliance.aop.Advice</h3>


<p><a href="#アドバイス" rel="external nofollow">アドバイス</a>はポイントカットに挿入する処理を定義するインターフェースです。Spring では「Around Advice」、「Before Advice」、「Throws Advice」、「After returning Advice」の 4 種類をサポートしています。</p>

<dl><dt>org.aopalliance.intercept.MethodInterceptor</dt>
<dd><p>Around Advice を実装するためのインターフェースです。Around Advice は アドバイスの処理が、アスペクト対象の処理の前後に及ぶため、自分で Advice のタイミングを実装しなければなりません。Advice の処理の中で、 invocation.proceed() を呼び出す必要があります。このインターフェースの実装の仕方によっては、4種類全部の Advice を表現できます。</p></dd>
<dt>org.springframework.aop.MethodBeforeAdvice</dt>
<dd>Before Advice を実装するためのインターフェースです。before() メソッド中にアドバイスコードを実装します。</dd>
<dt>org.springframework.aop.ThrowsAdvice</dt>
<dd>
<p>Throws Advice を実装するためのインターフェースです。インターフェースで定義されたメソッドはありません。</p>

<pre>
public void afterThrowing(java.lang.refrect.Method m, Object[] args, Object target, Throwable subclass)
</pre>

<p>の形式でメソッドを定義しておくと、SpringFramework によって呼ばれます。</p>

<p>第4引数の Throwable は、キャッチしたい例外クラスを指定することで、例外にマッチするときだけ呼ばれるようになります。</p>
</dd>
<dt>org.springframework.aop.AfterReturningAdvice</dt>
<dd>After returning Advice を実装するためのインターフェースです。処理が正常に終了した場合に呼び出されます。</dd>
</dl>




<h3>org.springframework.aop.Advisor</h3>


<p><a href="#ポイントカット" rel="external nofollow">アドバイス</a>を一緒に扱うインターフェースです。Spring の世界では、おそらく「<b>インターセプト = アドバイス</b>」と言えると思います。</p>

<h2 id="ProxyFactoryBean を使ったサンプルコード">ProxyFactoryBean を使ったサンプルコード</h2>


<p>ProxyFactoryBean の使い方サンプルです。Bean 定義書に ProxyFactoryBean を使う指定をして、その<b> ID に プロキシでラップした Bean を取り出すときの名前を付ける</b> だけです。</p>

<p><section></p>

<h4>bean-context.xml の例</h4>




<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="tag">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; 
&quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;</span>
<span class="tag">&lt;beans&gt;</span>
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;calcTarget&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.aop.Calculator&quot;</span>/&gt;</span>   
 
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;debugInterceptor&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;org.springframework.aop.interceptor.DebugInterceptor&quot;</span>/&gt;</span>
 
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;calc&quot;</span>
       <span class="attr">class=</span><span class="value">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span>
      <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;target&quot;</span>&gt;</span>
        <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;calcTarget&quot;</span>/&gt;</span>
      <span class="tag">&lt;/property&gt;</span>
      <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;interceptorNames&quot;</span>&gt;</span>
      <span class="tag">&lt;list&gt;</span>
        <span class="tag">&lt;value&gt;</span>debugInterceptor<span class="tag">&lt;/value&gt;</span>
      <span class="tag">&lt;/list&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;/bean&gt;</span>
<span class="tag">&lt;/beans&gt;</span>
</code></pre>


<p></section></p>

<p>「ProxyFactoryBean」の定義のところの ID を使って Bean を取り出しています。</p>

<p><section></p>

<h4>メインクラス</h4>




<pre class="code"><code><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception {
  BeanFactory factory = 
      <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> FileInputStream(<span class="literal">"bean-context.xml"</span>));
  Calculator cal = (Calculator)factory.getBean(<span class="literal">"calc"</span>);
  cal.add(10, 20);
} 
</code></pre>


<p></section></p>

<p>アスペクト対象の Calculator クラスです。アスペクト対象のクラスは、<strong>JavaBeanでなければなりません</strong>。デフォルトコンストラクタ(引数無しのコンストラクタ)が無いと、プロキシを作る時にエラーになります。</p>

<p><section></p>

<h4>アスペクト対象のクラス</h4>




<pre class="code"><code><span class="keyword">public</span> <span class="keyword">class</span> Calculator {    
  <span class="keyword">public</span> Calculator() {
    <span class="keyword">super</span>();
  }
 
  <span class="keyword">public</span> <span class="keyword">int</span> add(<span class="keyword">int</span> a, <span class="keyword">int</span> b) {      
    System.out.println(<span class="literal">"add("</span> + a + <span class="literal">", "</span> + b + <span class="literal">")"</span>);
    <span class="keyword">return</span> a + b;
  }
}
</code></pre>


<p>実行結果です。</p>

<pre class="console"><code>Debug interceptor: count=1 invocation= ...
add(10, 20)
Debug interceptor: next returned
</code></pre>




<h2 id="Advisor とは？">Advisor (アドバイザー)とは？</h2>


<p>Advisor (アドバイザー)とは、<a href="#ポイントカット" rel="external nofollow">アドバイス</a>をセットにしたものと考えればよさそうです。アドバイスとはアスペクトとして付け加える処理のことです。ポイントカットはアドバイスを付け加える位置のことです。つまり、<b>アドバイザーとは、自身がアドバイスであり、ポイントカットである</b>わけです。</p>

<p><section></p>

<h4>アドバイザーの例</h4>




<pre class="code"><code><span class="tag">&lt;?xml version=&quot;.&quot; encoding=&quot;UTF-&quot;?&gt;</span>
<span class="tag">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot;
  &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt;</span>
<span class="tag">&lt;beans&gt;</span>
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;calcTarget&quot;</span>
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.aop.Calculator&quot;</span>/&gt;</span>
 
   <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;debugInterceptor&quot;</span>
      <span class="attr">class=</span><span class="value">&quot;org.springframework.aop.interceptor.DebugInterceptor&quot;</span>/&gt;</span>
 
   <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;advisor&quot;</span>
<span class="attr">class=</span><span class="value">&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;</span>&gt;</span>
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;advice&quot;</span>&gt;</span>
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;debugInterceptor&quot;</span>/&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;mappedNames&quot;</span>&gt;</span>
      <span class="tag">&lt;list&gt;</span>
        <span class="tag">&lt;value&gt;</span>insert*<span class="tag">&lt;/value&gt;</span>
        <span class="tag">&lt;value&gt;</span>update*<span class="tag">&lt;/value&gt;</span>
      <span class="tag">&lt;/list&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;/bean&gt;</span>
 
  <span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;calc&quot;</span>
       <span class="attr">class=</span><span class="value">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span>
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;target&quot;</span>&gt;</span>
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;calcTarget&quot;</span>/&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
    <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;interceptorNames&quot;</span>&gt;</span>
      <span class="tag">&lt;list&gt;</span>
        <span class="tag">&lt;value&gt;</span>advisor<span class="tag">&lt;/value&gt;</span>
      <span class="tag">&lt;/list&gt;</span>
    <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;/bean&gt;</span>
<span class="tag">&lt;/beans&gt;</span>
</code></pre>


<div class="clear"></div>


<p></section></p>

<p>11行目でアドバイザーを定義しています。アドバイザーは「ポイントカット」と「アドバイス」の組み合わせでした。13〜15行目で「アドバイス」を設定しています。<b>インターセプタはアドバイス</b>だということですね。16〜21行目で「ポイントカット」を正規表現で指定しています。最後に ProxyFactoryBean の interseptorNames に 定義したアドバイザーを指定して、アスペクト対象を設定すれば、AOP の出来上がりです。</p>

<h2 id="ハマった点">ハマった点</h2>




<h3>BeanCreationException が発生する</h3>


<p>取得しようとしている Bean に 「<b>デフォルトコンストラクタがない</b>」と、このエラーが発生することがあります。基本的に Spring の Bean 定義ファイルに書くクラスには、「デフォルトコンストラクタ」を書いておきましょう。案外忘れがち・・・</p>

<h3>Spring の ポイントカットは、クラス単位</h3>


<p>Bean 定義書を見ると分かるのですが、ProxyFactoryBean の target には単一のクラスしか書けません。ポイントカットに関しても、ターゲットののメソッドしかサポートしません。</p>

<p>トランザクション管理などで、複数のクラスを指定したい場合には、「<b>AutoProxy</b>」 と呼ばれる仕組みを使う必要があるとのことです。そのうち使ってみようかと思います。</p>

<h2>参考</h2>


<ul>
<li><p>Spring Framework の本家です。
<a href="http://www.springframework.org/" rel="external nofollow">Spring Framework</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring Framework の 日本語 Wiki です。大量の情報があります。
<a href="http://wiki.bmedianode.com/Spring/?FrontPage" rel="external nofollow">Spring Pad</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント (日本語訳)
<a href="http://www.andore.com/money/trans/spring_ref_ja.html" rel="external nofollow">Spring-Java/J2EEアプリケーションフレームワークドキュメント</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring フレームワークに関しての概要です。TECHSCORE さんの記事は読みやすいなぁ (^^ ;
<a href="http://www.techscore.com/tech/Java/Spring/1.html" rel="external nofollow">TECHSCORE - Spring Framework</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring を含めた、軽量コンポーネントのお話です。</p></li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>Spring の ロッドジョンソンが贈る、J2EE技術者のためのバイブル</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>Spring のロッドジョンソンによる Spring ユーザのための本 (洋書)</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>SpringでWebアプリケーションを作りながら、Springの全体像がわかりやすく解説されています。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Framework 覚書き - MVCフレームワーク]]></title>
    <link href="http://hamasyou.com/blog/2004/11/06/spring-framework-mvc/"/>
    <updated>2004-11-06T14:00:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/11/06/spring-framework-mvc</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764558315/sorehabooks-22" rel="external nofollow"></a>
</p>


<p>アメリカではほとんどデフェクトスタンダードとなっている「<a href="http://www.springframework.org/" rel="external nofollow"></a>」の覚書きです。Spring は簡単に言うと、<abbr title="Inversion of Control">IoC (制御の反転)</abbr>、またの名を <abbr title="Dependency Injection">DI (依存性注入)</abbr> という仕組みを取り入れた軽量コンテナです。</p>

<p>Springは MVCフレームワークを提供しています。Springのフレームワークは、すべてインターフェースベースになっているので、単一継承の JAVA にとっては非常にありがたいものです。Spring MVC の View には、JSP の他、Velocity、XSLT、JSFなどといったさまざまな技術が使えます。</p>

<p>Validation 機能は、Web システムにとって非常に重要なものとなっています。Springでは、 Validation は Web パッケージと切り離されているので、単体テストも簡単に出来るようになっています。</p>

<p>Springの詳細については、ほかにもっとよいサイト(<a href="http://www.andore.com/money/trans/spring_ref_ja.html" rel="external nofollow">Springフレームワークの紹介</a>)があるので、そちらを参考にしてください。ここでは、Springを使っていて、ハマった点や気になった点などをメモしていこうと思います。随時更新していくつもりです。間違っている可能性が高いので、気になる点があればコメントをお願いします。</p>

<p><section></p>

<h4>参考</h4>


<p><a href="http://wiki.bmedianode.com/Spring/?FrontPage" rel="external nofollow">Spring Pad - Wiki</a></p>

<p><a href="http://direct.idg.co.jp/detail_1.msp?id=1066&class=10005&n=2" rel="external nofollow">JavaWorld 7月号 2004年</a></p>

<p></section></p>

<!-- more -->




<h2>Spring MVC フレームワーク</h2>




<ul><li><a href="#Spring MVC フレームワークとは" rel="external nofollow">Spring MVC フレームワークとは</a></li>
<li><a href="#Spring MVC で使われる主なクラス / インターフェース" rel="external nofollow">Spring MVC で使われる主なクラス / インターフェース</a></li>
<li><a href="#コントローラ・サーブレットの設定 (web.xml)" rel="external nofollow">コントローラ・サーブレットの設定 (web.xml)</a></li>
<li><a href="#ModelAndView のサンプルコード" rel="external nofollow">ModelAndView のサンプルコード</a></li>
<li><a href="#ViewResolverの例" rel="external nofollow">ViewResolverの例</a></li>
<li><a href="#Validateを使った妥当性チェックの方法" rel="external nofollow">Validateを使った妥当性チェックの方法</a></li>
<li><a href="#Bind を使ったエラーメッセージの表示方法" rel="external nofollow">Bind を使ったエラーメッセージの表示方法</a></li>
<li><a href="#型変換時のエラーメッセージを独自のメッセージにする方法" rel="external nofollow">型変換時のエラーメッセージを独自のメッセージにする方法</a></li>
<li><a href="#独自の型変換を使う方法" rel="external nofollow">独自の型変換を使う方法</a></li>
<li><a href="#Command コントローラ一覧" rel="external nofollow">Command コントローラ一覧</a></li>
<li><a href="#コントローラマッピング" rel="external nofollow">コントローラマッピング</a></li>
<li><a href="#ハマった点" rel="external nofollow">ハマった点</a></li>
<li><a href="#Spring MVC フレームワークに出てくる用語" rel="external nofollow">Spring MVC フレームワークに出てくる用語</a></li>
</ul>




<h2 id="Spring MVC フレームワークとは">Spring MVC フレームワークとは</h2>


<p>Spring MVCは、IoC コンテナをベースにした、WebアプリケーションのためのMVCアーキテクチャです。IoCコンテナをベースにしているので、設定は定義ファイルに書くことになります。</p>

<p>Spring MVC が使用する定義ファイルは、WEB-INFフォルダの直下に 「<em>《サーブレット名》-servlet.xml</em>」という名前で作成します。《サーブレット名》は web.xml で設定した名前となります。(今後は、便宜的に 「Web アプリケーション定義ファイル」と呼びます。)</p>

<p>Spring MVC の基本的な処理の流れは以下のようになります。</p>

<pre>
リクエストを受け取る （コントローラーサーブレット）
　　　　　　↓
転送先のコントローラを決定する （ハンドラマッピング）
　　　　　　↓
ビジネスロジックを呼び出す （コントローラ）
　　　　　　↓
ビジネスロジックを呼び出して「モデル」に結果をセットする （ビジネスロジック）
　　　　　　↓
モデルと、それを表示するビュー名のセット （モデル＆ビュー）
　　　　　　↓
ビュー名からビューを解決する （ビューリゾルバ）
　　　　　　↓
モデルの結果を表示する （ビュー）
</pre>


<p>Spring MVC のアーキテクチャは非常に柔軟で、プラグイン形式でワークフローを制御したり、Validation を追加したりすることが出来ます。Web アプリケーション定義ファイルに定義された ID を使って Bean を指定することでプラグインします。</p>

<h2 id="Spring MVC で使われる主なクラス / インターフェース">Spring MVC で使われる主なクラス / インターフェース</h2>


<p>Spring MVC を利用する場合に使われる主なクラスやインターフェースです。</p>

<h3>org.springframework.web.servlet.DispatcherServlet</h3>


<p>コントローラサーブレットの基本クラスです。アダプタクラス設定することで、さまざまなワークフローを行うことが出来ます。デフォルトの設定クラスは以下のようになっています。</p>

<dl>
<dt>HandlerMapping</dt>
<dd>
<p>リクエストとコントローラのマッピングを保持します。デフォルトの設定は BeanNameUrlHandlerMappingです。このクラスは「/」で始まるBean名とURLをマッピングします。多くの場合、SimpleUrlHandlerMapping クラスを変わりに使います。</p>
</dd>
<dt>HandlerAdapter</dt>
<dd><p>ワークフローを制御するために設定されるもの(たぶん)です。デフォルトは SimpleControllerHandlerAdapter です。</p></dd>
<dt>HandlerExceptionResolver</dt>
<dd><p>例外からエラーページビューを解決するためのクラスです。デフォルトは設定されていません（none）。</p></dd>
<dt>ViewResolver</dt>
<dd><p>ビューと名前をマッピングさせるものです。 例えば、 prefix="/WEB-INF/jsp"  suffix=".jsp"  viewname="test"  の場合、/WEB-INF/jsp/test.jsp  というビューを参照することになります。</p>

<p><em>JSPファイルは、WEB-INF 以下のフォルダに置くことをおすすめします。</em>こうすることで、外部から直接アクセスが出来なくなります。コントローラを経由しなければファイルが読めないので、セキュリティ的にも非常に効果的です。</p>

<p>デフォルトは InternalResourceViewResolver を使います。このクラスは、実際にビューの在る無しに関わらず、名前からビューを解決することが出来ます。</p></dd>
<dt>MultipartResolver</dt>
<dd><p>マルチパートのリクエストを処理するものです。「multipartResolver」という名前でBean定義を設定します。デフォルトは設定されていません（none）。</p></dd>
<dt>LocaleResolver</dt>
<dd><p>Webベースロケール(?)を受け付けるかどうかを設定します。デフォルトは AcceptHeaderLocaleResolver クラスです。このクラスは、セッション、クッキーなどを受け付けます。おそらく、ワークフローを処理する条件か何かになると思います。「localeResolver」という名前でBean定義を設定します。</p></dd>
<dt>ThemeResolver</dt>
<dd><p>テーマを受け付けるかどうかを設定します。おそらく、ワークフローを処理する条件か何かだと思います。 「themeResolver」という名前でBean定義を設定します。デフォルトは FixedThemeResolver クラスです。</p></dd>
</dl>




<h3>org.springframework.web.servlet.mvc.Controller</h3>


<p>リクエストとレスポンスを引数にとるコントローラの基本インターフェースです。サーブレットとほとんど同じで、Struts の Action クラスのようなものです。このクラスは、複数のHTTPリクエストで処理できるように、スレッドセーフでなければなりません。</p>

<p>リクエストを受け取ったあと、ロケールやテーマを元にワークフローが決定されます。そして、適切なコントローラが見つかると、handleRequest メソッドが呼び出されます。Webアプリケーションのために、標準的な機能を持つコントローラが用意されています。</p>

<dl>
<dt>org.springframework.web.servlet.mvc.AbstractController</dt>
<dd><a href="http://hamasyou.com/archives/000173" rel="external nofollow">Template Method パターン</a>を利用した、便利なコントローラ抽象クラスです。

<section>

<h4>【特徴的な機能】</h4>

<dl>
<dt>Generation of Caching Headers</dt>
<dd><p>世代別キャッシュヘッダーを備えています。指定秒内の同じリクエストに対してはキャッシュされた結果を返します。</p></dd>
<dt>GET/POST のサポート切り替え</dt>
<dd><p>GET/POST のサポートを切り替えます。POST メソッドは処理するのに、GET メソッドはエラーにするといったことが出来ます。</p></dd>
</dl>

</section>
    
<section>

<h4>【設定可能な項目(Web アプリケーション定義ファイルに書く)】</h4>

<dl>
<dt>supportedMethods</dt>
<dd><p>サポートするメソッド(GET, POST, PUT)。カンマ(,)で区切って指定する(例： GET,POST)。デフォルトは『GET,POST』</p></dd>
<dt>requireSession</dt>
<dd><p>セッションの存在をチェックするかどうか(true, false)。この設定を true にしておけば、セッション切れをチェックできます。セッションが切れていたときには ServletException がスローされます。デフォルトは『false』</p></dd>
<dt>cacheSeconds</dt>
<dd><p>キャッシュヘッダーを利用する秒数(数値)。設定した秒内の同じリクエストに対しては、キャッシュされた結果を返します。デフォルトは『-1 (キャッシュを利用しない)』</p></dd>
</dl>

</section>
    
<section>

<h4>【ワークフロー】</h4>

<ol><li>メソッドがサポートされているかのチェック</li>
<li>セッションが要求されているかどうかのチェック</li>
<li>キャッシュヘッダーのチェック</li>
<li>コントローラ処理の呼び出し</li>
</ol>

</section>
</dd>
<dt>org.springframework.web.servlet.mvc.AbstractCommandController</dt>
<dd><p>リクエストからコマンドオブジェクトを作成して、リクエストパラメータをセットするコントローラです。リクエストパラメータを Bean クラスに設定するために利用できます。その際、Validation を使ってパラメータの妥当性チェックを行うことが出来ます。Validation の結果は Errors オブジェクトに格納します。</p>

<p>リクエストパラメータが 「firstName」であった場合、コマンドオブジェクトの「setFirstName」メソッドが呼び出されます。ネスとしたパラメータ、「address.city」といった形も受け入れられます(getAddress().setCity())。</p>

<p>パラメータを独自型や特殊型に変換することも出来ます。その際は、PropertyEditor クラスを利用します。</p>

<section>

<h4>[参考]</h4>

<a href="http://wiki.bmedianode.com/Spring/?PropertyEditor%A4%C0%A4%E8" rel="external nofollow">Spring Pad - PropertyEditorだよ</a>

</section>

<section>

<h4>【設定可能な項目】</h4>

<dl><dt>commandName</dt>
<dd><p>リクエストとコマンドオブジェクトを結びつけるときに使う名前(文字列)。デフォルトは『command』。</p></dd>
<dt>commandClass</dt>
<dd><p>コマンドとして使われる完全クラス名(文字列)。デフォルトは『null』。</p></dd>
<dt>validator</dt>
<dd><p>妥当性チェックで使われる名前(Bean 参照)。リストも受け取れます。複数のバリデーションクラスを指定する場合は 「validators」を使います。設定する値は、「&lt;ref bean=&quot;ValidatorID&quot;/&gt;」のように書きます。デフォルトは『null』です。</p></dd>
<dt>validateOnBinding</dt>
<dd><p>リクエストと結び付けられたバリデータを有効にするかどうか(true, false)。デフォルトは『true』。</p></dd>
</dl>

</section>

<p>通常は、このクラス使わずに AbstractFormController を代わりに使います。</p>
</dd>
<dt>org.springframework.web.servlet.mvc.AbstractFormController</dt>
<dd>
<p>リクエストパラメータを自動的に フォームオブジェクトに設定するコントローラです。 Struts の Action とほとんど同じものだと思います。フォームオブジェクトは、 Struts の ActionForm と同じくただの JavaBean です。リクエスト毎に新しいフォームオブジェクトを作成するか、毎回同じフォームオブジェクトを使いまわすかを決められるようです。フォームが送信されたかどうかは 「<em>isFormSubmission(HttpServletRequest)</em>」メソッドの戻り値で判断されます。デフォルトは POST で呼び出された場合に、送信とみなされます。オーバーライドして独自にカスタマイズも可能です(コマンド名が送信されたらフォーム送信とみなすとか)。</p>

<p>サブクラスに、 SimpleFormController があり、Bean定義 を使って処理後のページを設定できるようです。AbstractFormController を直接使う場合は、処理後のページはプログラマティックに設定しなければなりません。</p>

<section>

<h4>【設定可能な項目】</h4>

<dl><dt>bindOnNewForm</dt>
<dd><p>新しいフォームオブジェクトを作成した場合に、リクエストと結びつけるかを決めます(true, false)。結び付けなかった場合は、ただのリクエストパラメータはただのパラメータとして処理されます。デフォルトは『false』。</p></dd>
<dt>sessionForm</dt>
<dd><p>セッションで共有するかどうかの設定(true, false)。デフォルトは『false』</p></dd>
<dt>AbstractCommandControllerで設定できる項目</dt>
<dd><p>AbstractCommandController で設定できる項目が設定できます。</p></dd>
</dl>

</section>
</dd>
<dt>org.springframework.web.servlet.mvc.multiaction.MultiActionController</dt>
<dd><p>メソッド名で複数のリクエストを処理することが出来るクラスです。アクション名をメソッドと結びつけることで、コントローラクラスが膨張するのを防げます。</p>

<section>

<h4>定義するメソッドシグネチャ</h4>

<pre>
ModelAndView 《メソッド名》(HttpServletRequest request, HttpServletResponse response);
ModelAndView 《メソッド名》(HttpServletRequest request, HttpServletResponse response, ExceptionClass exception);
</pre>

</section>

<p>メソッド名とアクション名のマッピングは MethodNameResolver を使います。「methodNameResolver」というプロパティ名に設定します。</p>

<section>

<h4>MethodNameResolver に使える主なクラス</h4>

<dl>
<dt>ParameterMethodNameResolver</dt>
<dd><p>リクエストパラメータを元にメソッド名を決定します。例えば 「<code>http://hamasyou.com/index.view?action=insert</code>」 の場合、 「ModelAndView insert(HttpServletRequest, HttpServletResponse)」 というメソッドが呼ばれます。「action」というパラメータ名をメソッドと結びつけるという設定を行っておく必要があります。</p></dd>
<dt>InternalPathMethodNameResolver</dt>
<dd><p>パス名がそのままメソッド名と結び付けられるクラスです。「<code>http://hamasyou.com/insert.view</code>」 というリクエストパスがあった場合に 「ModelAndView insert(HttpServletRequest, HttpServletResponse)」 が呼ばれることになります。</p></dd>
<dt>PropertiesMethodNameResolver</dt>
<dd><p>マッピングをプロパティファイルに持つクラスです。「/action/insert.view=insert」というマッピング情報をプロパティファイルに書いておくことで、「/action/insert.view」 という名前が含まれるパスが呼ばれると 「ModelAndView insert(HttpServletRequest, HttpServletResponse)」 が呼ばれることになります。</p></dd>
</dl>

</section>
</dd>
</dl>




<h3>org.springframework.web.servlet.ModelAndView</h3>


<p>ビューに対するモデルを保持する単なるホルダーとして機能します。コントローラから返された ModelAndView インスタンスからビューに遷移し、ビューからモデルを使用できるようにします。</p>

<p>ビューには、View を継承したオブジェクトか、 ViewResolver によって解決されるビュー名を指定します。 モデルには、キーとなる文字列と、オブジェクトを設定します。内部では Mapで保持するようです。</p>

<p>ビューにおいてモデルは、EL式を用いて表現することが出来ます。JSPでは、request の attribute にモデルが設定されてるはずです。</p>

<h3>org.springframework.web.servlet.ViewResolver</h3>


<p>ビュー名とビューのマッピングを行うクラスです。ResourceBundleViewResolver クラスは、マッピング情報を設定ファイルに指定できます。InternalResourceViewResolver はマッピングを MVCアプリケーション定義ファイルにしていします。</p>

<p>Spring で言う 「ビュー」とは、レスポンスを返すクラスのことです。例えば、JSTL と JSP を使ってレスポンスを返す場合には、org.springframework.web.servlet.view.JstlView を使用します。Velocity などのテンプレートエンジンや JSF などを使用する場合には、別のビュークラスを指定します(<a href="#ViewResolverの例" rel="external nofollow">参考</a>)</p>

<h3>org.springframework.web.servlet.HandlerInterceptor</h3>


<p>ワークフローに処理を付け加えるためのインターフェースです。「インターセプター」という名前の通り、処理を横取りします。例えば、入力パラメータのエンコードに使えます。</p>

<h2 id="コントローラ・サーブレットの設定 (web.xml)">コントローラ・サーブレットの設定 (web.xml)</h2>


<p>コントローラ・サーブレットは web.xml に設定します。サーブレット読み込み時にIoC コンテナのところで書いた Bean定義ファイル を読み込むには、 <em>org.springframework.web.context.ContextLoaderListener</em> を使用します。</p>

<p><section></p>

<h4>[参考]</h4>


<p><a href="http://wiki.bmedianode.com/Spring/?Servlet%B4%C4%B6%AD%A4%D8%A4%CE%C6%B3%C6%FE" rel="external nofollow">Spring Pad- Servlet 環境への導入</a></p>

<p></section></p>

<p><section></p>

<h4>サーブレットの例</h4>




<pre class="code"><code><span class="tag">&lt;?xml version=&quot;1.0&quot; ?&gt;</span> 
<span class="tag">&lt;!DOCTYPE web-app PUBLIC &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;  
&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;&gt;</span> 
<span class="tag">&lt;web-app&gt;</span>    
   
<span class="tag">&lt;listener&gt;</span> 
    <span class="tag">&lt;listener-class&gt;</span> 
    org.springframework.web.context.ContextLoaderListener 
    <span class="tag">&lt;/listener-class&gt;</span> 
<span class="tag">&lt;/listener&gt;</span> 
   
  <span class="rem">&lt;!-- Bean定義ファイルの設定 --&gt;</span> 
  <span class="tag">&lt;context-param&gt;</span> 
    <span class="tag">&lt;param-name&gt;</span>contextConfigLocation<span class="tag">&lt;/param-name&gt;</span> 
    <span class="tag">&lt;param-value&gt;</span>BeanContext.xml<span class="tag">&lt;/param-value&gt;</span> 
  <span class="tag">&lt;/context-param&gt;</span>   
   
  <span class="rem">&lt;!-- 通常のコントローラ・サーブレット --&gt;</span> 
  <span class="tag">&lt;servlet&gt;</span> 
    <span class="tag">&lt;servlet-name&gt;</span>dispatcher<span class="tag">&lt;/servlet-name&gt;</span> 
    <span class="tag">&lt;servlet-class&gt;</span> 
      org.springframework.web.servlet.DispatcherServlet 
    <span class="tag">&lt;/servlet-class&gt;</span> 
    <span class="tag">&lt;load-on-startup&gt;</span>1<span class="tag">&lt;/load-on-startup&gt;</span> 
  <span class="tag">&lt;/servlet&gt;</span> 
   
  <span class="tag">&lt;servlet-mapping&gt;</span> 
    <span class="tag">&lt;servlet-name&gt;</span>dispatcher<span class="tag">&lt;/servlet-name&gt;</span>     
    <span class="tag">&lt;url-pattern&gt;</span>*.do<span class="tag">&lt;/url-pattern&gt;</span> 
  <span class="tag">&lt;/servlet-mapping&gt;</span> 
   
<span class="tag">&lt;/web-app&gt;</span> 
</code></pre>


<p></section></p>

<h2 id="ModelAndView のサンプルコード">ModelAndView のサンプルコード</h2>


<p>ModelAndView を使ったビュー表示の例です。</p>

<pre class="code"><code><span class="keyword">public</span> <span class="keyword">class</span> WelcomeForm <span class="keyword">extends</span> SimpleFormController {
  <span class="comment">/**
   * 読み取り専用で処理すること！
   * スレッドセーフでないから、書き込みすると危ない。
   * 本来なら、clone を返すか、ラップするべし。
   */</span>
  <span class="keyword">private</span> Person[] defaultPersons;
 
  <span class="keyword">public</span> WelcomeForm() {
    <span class="keyword">super</span>();
  }
 
  <span class="keyword">public</span> Person[] getDefaultPersons() {
    <span class="keyword">return</span> defaultPersons;
  }
 
  <span class="keyword">public</span> <span class="keyword">void</span> setDefaultPersons(Person[] defaultPersons) {
    <span class="keyword">this</span>.defaultPersons = defaultPersons;
  }
 
  <span class="keyword">protected</span> ModelAndView 
     processFormSubmission(HttpServletRequest request,
                           HttpServletResponse response, 
                           Object command, 
                           BindException errors)
      <span class="keyword">throws</span> Exception {
    Map map = <span class="keyword">new</span> HashMap();
    map.put(<span class="literal">"title"</span>, <span class="literal">"WelcomeFormTitle"</span>);
    map.put(<span class="literal">"persons"</span>, getDefaultPersons());        
    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="literal">"/WEB-INF/jsp/form_list.jsp"</span>, <span class="literal">"model"</span>, map);
  }
}
</code></pre>


<p>Webアプリケーション定義ファイルの設定例です。今回は、コントローラ(WelcomeForm)が SimpleFormController を継承しているので、「<em>commandClass</em>」 を設定しなければなりません。 jp.dip.xlegend.spring.web.cmd.WelcomeCommand は、ただの JavaBeanです。Struts で言うところの、 ActionForm だと思えばいいと思います。</p>

<p><section></p>

<h4>Web アプリケーション定義ファイルの設定例</h4>




<pre class="code"><code><span class="rem">&lt;!-- 中略 --&gt;</span> 
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;WelcomeForm&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.web.WelcomeForm&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;commandClass&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>jp.dip.xlegend.spring.web.cmd.WelcomeCommand<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;validator&quot;</span>&gt;</span> 
    <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;welcomeValidator&quot;</span>/&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;defaultPersons&quot;</span>&gt;</span> 
    <span class="tag">&lt;list&gt;</span> 
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;person1&quot;</span>/&gt;</span> 
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;person2&quot;</span>/&gt;</span> 
      <span class="tag">&lt;ref <span class="attr">bean=</span><span class="value">&quot;person3&quot;</span>/&gt;</span> 
    <span class="tag">&lt;/list&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
<span class="tag">&lt;/bean&gt;</span> 
 
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;person1&quot;</span>  
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.Person&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;value&gt;</span>山田　太郎<span class="tag">&lt;/value&gt;</span><span class="tag">&lt;/property&gt;</span> 
<span class="tag">&lt;/bean&gt;</span> 
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;person2&quot;</span>  
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.Person&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;value&gt;</span>山田　次郎<span class="tag">&lt;/value&gt;</span><span class="tag">&lt;/property&gt;</span> 
<span class="tag">&lt;/bean&gt;</span> 
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;person3&quot;</span>  
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.Person&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;value&gt;</span>山田　三郎<span class="tag">&lt;/value&gt;</span><span class="tag">&lt;/property&gt;</span> 
<span class="tag">&lt;/bean&gt;</span> 
<span class="rem">&lt;!-- 中略 --&gt;</span>
</code></pre>


<p></section></p>

<p>ModelAndView で設定された JSP ファイルの例です。JSTLを使って表示していますが、スクリプトレットを使って表示することも出来ます。</p>

<p><section></p>

<h4>JSPファイルの例</h4>




<pre class="code"><code><span class="tag">&lt;%@ page contentType=&quot;text/html; charset=Shift_JIS&quot; %&gt;</span>
<span class="tag">&lt;%@ page import=&quot;java.util.*&quot; %&gt;</span>
<span class="tag">&lt;%@ page import=&quot;jp.dip.xlegend.spring.Person&quot; %&gt;</span>
<span class="tag">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jstl/core&quot; %&gt;</span>
<span class="tag">&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jstl/fmt&quot; %&gt;</span>  
 
<span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
<span class="tag">&lt;title&gt;</span>form_list.jsp<span class="tag">&lt;/title&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body <span class="attr">bgcolor=</span><span class="value">&quot;#FFFFFF&quot;</span>&gt;</span>
<span class="tag">&lt;form <span class="attr">action=</span><span class="value">&quot;welcome.do&quot;</span> <span class="attr">method=</span><span class="value">&quot;post&quot;</span>&gt;</span>
  EL式を利用した表示 <span class="tag">&lt;br&gt;</span>
  <span class="tag">&lt;h4&gt;</span><span class="tag">&lt;c:out <span class="attr">value=</span><span class="value">&quot;${model.title}&quot;</span>/&gt;</span><span class="tag">&lt;/h4&gt;</span>
  <span class="tag">&lt;c:forEach <span class="attr">items=</span><span class="value">&quot;${model.persons}&quot;</span> <span class="attr">var=</span><span class="value">&quot;person&quot;</span>&gt;</span>
    <span class="tag">&lt;c:out <span class="attr">value=</span><span class="value">&quot;${person.name}&quot;</span>/&gt;</span>
  <span class="tag">&lt;/c:forEach&gt;</span>  
 
  こうしても同じ結果が取得できる。
  <span class="tag">&lt;%
      Map map = (Map)request.getAttribute(&quot;model&quot;);
  %&gt;</span>
 
  <span class="tag">&lt;h4&gt;</span><span class="tag">&lt;%= map.get(&quot;title&quot;) %&gt;</span><span class="tag">&lt;/h4&gt;</span>
  
  <span class="tag">&lt;%
      Person[] persons = (Person[])map.get(&quot;persons&quot;);
      for (int i = 0; i &lt; persons.length; i++) {      
  %&gt;</span>  
  <span class="tag">&lt;%= persons[i].getName() %&gt;</span>
  <span class="tag">&lt;% } %&gt;</span>
 
  <span class="tag">&lt;input <span class="attr">type=</span><span class="value">&quot;submit&quot;</span> <span class="attr">value=</span><span class="value">&quot;送信&quot;</span>&gt;</span>  
<span class="tag">&lt;/form&gt;</span>
<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span>
</code></pre>


<p></section></p>

<p>最後に、結果画面です。</p>

<p><img src="http://hamasyou.com/images/engineer_soul/spring_jsp_01.gif" alt="結果画面" /></p>

<h2 id="ViewResolverの例">ViewResolverの例</h2>


<p>ViewResolver はビュー名とビューとをマッピングするものです。レスポンスを返すものを「ビュー」と、Springでは呼んでいます。ビューの例としては「JSP」、「JSF」、「Velocity」、「Tiles」、「Excel」、「PDF」などがあります。</p>

<p>ViewResolver を指定する場合には、MVCアプリケーション定義ファイルに「<em>viewResolver</em>」という名前で設定します。</p>

<p><section></p>

<h4>ViewResolverの設定例</h4>




<pre class="code"><code><span class="rem">&lt;!-- 中略 --&gt;</span>
<span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;viewResolver&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;viewClass&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>org.springframework.web.servlet.view.JstlView<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;prefix&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>/WEB-INF/jsp/<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;suffix&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>.jsp<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
<span class="tag">&lt;/bean&gt;</span>
<span class="rem">&lt;!-- 中略 --&gt;</span>
</code></pre>


<p></section></p>

<h2 id="Validateを使った妥当性チェックの方法">Validateを使った妥当性チェックの方法</h2>


<p>データ検証について、『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22" rel="external nofollow">実践J2EE</a>』から、少し抜粋します。(P.532)</p>

<p>{% blockquote 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22" rel="external nofollow">実践J2EE</a>』 %}
データ検証 (Validation) は、「構文」の検証と「セマンティクス」の検証とに分類されます。構文検証には、データが存在するか、データの長さが許容範囲にあるか、データが有効なフォーマット(数字など)であるかといった、単純な操作が含まれます。通常、これはビジネスロジックではありません。セマンティクス検証はこれより手が込んだもので、ビジネスロジックやデータアクセスまでが含まれます。</p>

<p>{% endblockquote %}</p>

<p>Struts では、構文検証もセマンティクス検証も、アクションフォームの validate メソッドで行っています。しかし、Spring ではWeb 層にとらわれない方法でValidation 処理を行うことができます。Validator インターフェースを実装したクラスがそれに当たります。</p>

<p>ただし、<em>Validator インターフェースでは、サポートするクラスを明示的に指定しなければなりません(supports メソッド)</em>。これだと、フォームごとにアクションフォームのようなクラスをたくさん作った場合に、Validator クラスも作らなければなりません。</p>

<p>そこで、「構文」の検証には、BaseCommandController クラスの 「<em>onBindAndValidate</em>」メソッドをオーバーライドして、「セマンティクス」の検証にだけ、Validator インターフェースを継承したクラスを作成するのがいいと思います。</p>

<h2 id="Bind を使ったエラーメッセージの表示方法">Bind を使ったエラーメッセージの表示方法</h2>


<p>Bind というのは、コマンドオブジェクトのフィールドと、入力パラメータとを結びつける機構です。JSP の入力項目で idと password という入力項目があったとすると、コマンドオブジェクトの setId()、setPassword() というメソッドが自動的に呼ばれるということです。</p>

<p>もちろん、妥当性チェック(Validation) に失敗した場合にエラーメッセージを表示させることもできます。Struts のタグリブを使った動作とほとんど同じ感じです。</p>

<pre class="code"><code><span class="tag">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jstl/core&quot; %&gt;</span> 
<span class="tag">&lt;%@ taglib prefix=&quot;spring&quot; uri=&quot;/spring&quot; %&gt;</span> 
<span class="tag">&lt;html&gt;</span> 
<span class="tag">&lt;body&gt;</span> 
<span class="tag">&lt;form <span class="attr">action=</span><span class="value">&quot;entry.do&quot;</span> <span class="attr">method=</span><span class="value">&quot;post&quot;</span>&gt;</span> 
  <span class="tag">&lt;table&gt;</span> 
    <span class="tag">&lt;tr&gt;</span> 
   <span class="tag">&lt;spring:bind <span class="attr">path=</span><span class="value">&quot;person.id&quot;</span>&gt;</span> 
      <span class="tag">&lt;td&gt;</span> 
      ID： 
      <span class="tag">&lt;/td&gt;</span> 
      <span class="tag">&lt;td&gt;</span> 
      <span class="tag">&lt;input <span class="attr">type=</span><span class="value">&quot;text&quot;</span> <span class="attr">name=</span><span class="value">&quot;id&quot;</span> <span class="attr">value=</span><span class="value">&quot;&lt;c:out value=&quot;</span></span>&quot;&gt; 
      <span class="tag">&lt;td&gt;</span>  
      <span class="tag">&lt;font <span class="attr">color=</span><span class="value">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;c:out <span class="attr">value=</span><span class="value">&quot;${status.errorMessage}&quot;</span>/&gt;</span><span class="tag">&lt;/font&gt;</span> 
      <span class="tag">&lt;/td&gt;</span> 
     <span class="tag">&lt;/spring:bind&gt;</span> 
    <span class="tag">&lt;/tr&gt;</span> 
    <span class="tag">&lt;tr&gt;</span> 
      <span class="tag">&lt;spring:bind <span class="attr">path=</span><span class="value">&quot;person.password&quot;</span>&gt;</span> 
      <span class="tag">&lt;td&gt;</span> 
      Password： 
      <span class="tag">&lt;/td&gt;</span> 
      <span class="tag">&lt;td&gt;</span> 
      <span class="tag">&lt;input <span class="attr">type=</span><span class="value">&quot;text&quot;</span> <span class="attr">name=</span><span class="value">&quot;password&quot;</span> <span class="attr">value=</span><span class="value">&quot;&lt;c:out value=&quot;</span></span>&quot;&gt; 
      <span class="tag">&lt;td&gt;</span>  
      <span class="tag">&lt;font <span class="attr">color=</span><span class="value">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;c:out <span class="attr">value=</span><span class="value">&quot;${status.errorMessage}&quot;</span>/&gt;</span><span class="tag">&lt;/font&gt;</span> 
      <span class="tag">&lt;/td&gt;</span> 
      <span class="tag">&lt;/spring:bind&gt;</span> 
    <span class="tag">&lt;/tr&gt;</span> 
<span class="rem">&lt;!-- 中略 --&gt;</span>
</code></pre>


<p>「<em>&lt;spring:bind path=&quot;person.id&quot;&gt;</em>」の部分が Bind している部分です。person という名前で定義されたコマンドオブジェクトの id フィールドと、入力フィールドの id を結び付けています。 「<em>{status.value} </em>」というのは Bind された値を表示する場合に使うものです。入力値を Bind して、妥当性チェックでエラーがあった場合に、元の画面で入力値を再表示させるときに使えます。</p>

<p>「<em>{status.errorMessage}</em>」は妥当性チェック等で、Errors オブジェクトにエラーが設定された場合に表示されます。 Validation クラスのエラーチェック時に、 「errors.rejectValue(&ldquo;id&rdquo;, 《エラーコード》, &ldquo;Default Message.&rdquo;) メソッド」を呼び出してエラーを設定すると、画面に表示されるようになります。ちなみに「<em>{status.expression}</em>」はバインドするプロパティ名が取得できます。フィールドの name 属性にセットするという使い方が出来ます。</p>

<p><section></p>

<h3>Validation で エラーメッセージを追加する方法</h3>




<pre class="code"><code><span class="keyword">public</span> <span class="keyword">void</span> validate(Object command, Errors errors) { 
  Person person = (Person)command; 
  <span class="keyword">if</span> (person.getPassword() == <span class="keyword">null</span>) { 
    errors.rejectValue(<span class="literal">"password"</span>, <span class="literal">"M001"</span>,  
                       <span class="keyword">new</span> String[] { <span class="literal">"Password"</span> },  
                       <span class="literal">"必須入力です。"</span>); 
  } 
} 
</code></pre>


<p></section></p>

<p>Bind するときに使った「person」を定義する場所は、Web アプリケーション定義ファイルです。他にも、コントローラのコンストラクタで setCommandName を呼び出してコマンド名を設定しているサンプルもありました。</p>

<p><section></p>

<h3>Web アプリケーション定義ファイルでコマンドオブジェクトを指定する</h3>




<pre class="code"><code><span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;EntryFormController&quot;</span> 
      <span class="attr">class=</span><span class="value">&quot;jp.dip.xlegend.spring.web.EntryFormController&quot;</span>&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;commandName&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>person<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;commandClass&quot;</span>&gt;</span> 
    <span class="tag">&lt;value&gt;</span>jp.dip.xlegend.spring.Person<span class="tag">&lt;/value&gt;</span> 
  <span class="tag">&lt;/property&gt;</span> 
<span class="rem">&lt;!-- 中略 --&gt;</span>
</code></pre>


<p></section></p>

<p>「<em>commandName</em>」 に Bind するときに使ったコマンド名を指定します。「<em>commandClass</em>」 はコマンドのクラス名を書きます。Spring では、入力値をそのままドメインのオブジェクトにマッピングすることが出来ます。Struts では ActionForm を使わなければならず、コントローラで値の詰め替えが必要でしたが、Spring ではその必要はありません。ただ、凝った画面表示をしようとした場合には、画面用のコマンドを用意して処理を呼び出すなどの方法も必要かもしれません。</p>

<p><img src="http://hamasyou.com/images/engineer_soul/spring_jsp_02.gif" alt="Bindの結果" /></p>

<h2 id="型変換時のエラーメッセージを独自のメッセージにする方法">型変換時のエラーメッセージを独自のメッセージにする方法</h2>


<p>Bind 時に型変換でエラーが出ると次のようなエラーが出力されます。</p>

<pre>Failed to convert property value of type [java.lang.String] to required type [{型名}] for property '{プロパティ名}'; nested exception is ...</pre>


<p>このエラーは、開発時はまだ許せるとして、リリースした後は、ユーザにはまったく意味不明のメッセージになっています。</p>

<p>このメッセージは、MessageResource を使うことで、独自のメッセージにすることが出来ます。メッセージファイルに 「<em>typeMismatch.{プロパティ名}</em>」 というキーでメッセージを定義しておくと、そのメッセージが使えます。そして、置換文字の 0番目「{0}」にプロパティ名が埋め込まれるようになっています。(typeMismatch だけだと、すべての型変換エラーに対するメッセージが定義できる。typeMismatch.{コマンド名}.{プロパティ名} だと、コマンド名で指定されたものにマッチするようになる。さらに、typeMismatch.{型名} だと、型名にマッチするものに対してメッセージを指定できる。)</p>

<p><section></p>

<h4>errorMessage.properties</h4>




<pre>
# 日本語は native2ascii をかけておく
typeMismatch={0} は入力形式が無効です。
typeMismatch.java.sql.Timestamp={0} は日付型で入力してください。
typeMismatch.int={0} は整数値で入力してください。
typeMismatch.dateFiled={0} は yyyy/mm/dd 。
typeMismatch.command.dateField={0} は yyyy/mm/dd の形で入力してください。 
</pre>


<p></section></p>

<p>詳細に設定するほど優先的に使われるようです。上記のように定義した場合、command.dateFiled プロパティのエラーメッセージは「{0} はyyyy/mm/dd の形で入力してください。」 が使われます。それ以外の型エラーに関しては、「{0} は入力形式が無効です。」が使われます。</p>

<h4>[参考]</h4>


<p><a href="http://www.springframework.org/docs/api/org/springframework/validation/DefaultMessageCodesResolver.html" rel="external nofollow">Spring Framework API - DefaultMessageCodesResolver</a></p>

<h2 id="独自の型変換を使う方法">独自の型変換を使う方法</h2>


<p>MVC フレームワークでは、CustomeEditor の設定の仕方がちょっと違ったのでメモ。MVC フレームワーク中で CustomeEditor を設定するには、BaseCommandController クラスのメソッド 「<em>initBind(HttpServletRequest request,  ServletRequestDataBinder binder)</em>」メソッドをオーバーライドして、その中で、binder.registerCustomEditor(Class, PropertyEditor) を呼び出します。SimpleFormController は BaseCommandController を継承しています。</p>

<pre class="code"><code><span class="keyword">protected</span> <span class="keyword">void</span> initBinder(HttpServletRequest request, 
                          ServletRequestDataBinder binder)
    <span class="keyword">throws</span> ServletException {        
  CustomDateEditor de =  <span class="keyword">new</span> CustomDateEditor(
            <span class="keyword">new</span> SimpleDateFormat(<span class="literal">"yyyy/MM/dd"</span>), <span class="keyword">true</span>);        
  binder.registerCustomEditor(java.util.Date.class, de);
}
</code></pre>




<h2 id="Command コントローラ一覧">Command コントローラ一覧</h2>


<p>Spring MVC フレームワークで使われるコントローラの中で、基本的なコントローラである Command Controller をまとめます。</p>

<p><section></p>

<h4>[参考]</h4>


<p>「<a href="http://www.springframework.org/docs/reference/mvc.html#mvc-controller-command" rel="external nofollow">Spring Framework リファレンス - 12.3.4. CommandControllers</a>」</p>

<p></section></p>

<table>
<caption>Command Controller 一覧</caption>
<tr><th>クラス名</th><th>説明</th></tr>
<tr><td>AbstractCommandController</td><td>任意のデータオブジェクトにリクエストをマッピングできる コマンドコントローラ を定義するために使います。フォーム機能は提供しませんが妥当性チェック(Validation)機能は提供されます。。明示的にリクエストパラメータをデータオブジェクトせ設定できるので、分かりやすいコントローラです。</td></tr>
<tr><td>AbstractFormController</td><td>フォーム送信機能を提供します。データオブジェクトにバインドされたフォームを表示し、妥当性エラーが発生したときに画面を再表示できます。サポートされる機能は、不正入力送信チェック、妥当性チェック、フォームのワークフローです。このコントローラは、ビューの指定を明示することができません。</td></tr>
<tr><td>SimpleFormController</td><td>指定したデータオブジェクトとのマッピングを行うフォームコントローラの具象クラスです。コマンドオブジェクトと、成功時や失敗時に表示するビュー名を指定することができます。</td></tr>
<tr><td>AbstractWizardFormController</td><td>ウィザード形式のフォームを作るときに指定します。validatePage, processFinish, processCancel メソッドを実装します。この3つのメソッドを適切に実装して、ワークフローを定義します。</td></tr>
</table>




<h2 id="コントローラマッピング">コントローラマッピング</h2>


<p>コントローラサーブレットは、リクエストを処理するコントローラを選択します。どのような条件でコントローラが選択されるかは、Bean 定義で設定されている HandlerMapping インターフェースの実装クラスに任されます。</p>

<dl>
<dt>BeanNameUrlHandlerMapping</dt>
<dd><p>Struts と同じようなマッピング方法で、スラッシュ(&quot;/&quot;)で始まるURLと Bean の名前をマッピングするクラス。DispatcherServlet がデフォルトで使う実装です。</p></dd>
<dt>SimpleUrlHandlerMapping</dt>
<dd><p>URL からリクエストハンドラBean へのマッピングを提供します。「urlMap」プロパティにマッピンを定義します。この定義は Bean 定義ファイルに書きます。</p></dd>
</dl>




<h2 id="ハマった点">ハマった点</h2>




<h3>Bind 時に例外が発生する</h3>


<p>Bind 時に次のような例外がでます。</p>

<pre>javax.servlet.ServletException: Neither Errors instance nor plain target object for bean name 《コマンド名》 available as request attribute</pre>


<p>これは、Bind するコマンドオブジェクトがリクエストに保存されていないのが原因です。コントローラに SimpleFormController を使っている場合、processFormSubmission() メソッドで、super.onSumit(request, response, command, errors) を呼び出すと、例外は発生しなくなりました。参考までに。</p>

<h3>更新系画面の初期表示はどうするのか？</h3>


<p>FormController 系のコントローラを使うと、フォーム送信をデータオブジェクトに自動でバインドしてくれて楽チンです。ですが、初期表示(フォームに何も入力していない状態の画面)を行いたい場合に、どうすればいいのか分かりませんでした。</p>

<p>SimpleFormController の 「<em>formView</em>」プロパティは、初期表示する画面を設定するプロパティだったということに、やっと気づきました。Struts とかだと、初期表示用のアクションを用意していたので Spring でもそうするのかと思ってました。ハマった・・・ (T T;)</p>

<p>それでもって、初期表示に使いたいデータは 「protected Map referenceData(HttpServletRequest) throws Exception」メソッドをオーバーライドして Map につめて返せばいいわけでした。</p>

<h2 id="Spring MVC フレームワークに出てくる用語">Spring MVC フレームワークに出てくる用語</h2>


<p>Spring MVCフレームワークに出てくる用語をまとめておきます。</p>

<dl>
<dt>コントローラサーブレット</dt>
<dd><p>フレームワークを使用するためのエントリポイントとなるサーブレット。コントローラのコントローラであり、アプリケーション固有のリクエストコントローラを呼び出す役割を担います。DispatcherServlet はコントローラサーブレットです。</p></dd>
<dt>コントローラ(リクエストコントローラ)</dt>
<dd><p>リクエストの処理を受け持つサーブレットです。通常、コントローラサーブレットによってリクエストの処理を委譲されます。コントローラはマルチスレッドコンポーネントであり、スレッドセーフでなければなりません。したがって、フィールドやプロパティはリードオンリであることが推奨されます。<i>org.springframework.web.servlet.mvc.Controller</i> インターフェースを実装する必要があります。実装クラスには BaseCommandController, AbstractFormController, SimpleFormController, MultiActionController などがあります。</p></dd>
<dt>ハンドラマッピング</dt>
<dd><p>リクエストをリクエストコントローラに結びつける役割を担います。コントローラサーブレットは、ハンドラマッピングを元にリクエストを委譲するリクエストコントローラを判断します。<i>org.springframework.web.servlet.HandlerMapping</i> インターフェースを実装する必要があります。実装クラスには BeanNameUrlHandlerMapping, SimpleUrlHandlerMapping などがあります。</p>

<p><a href="http://www.springframework.org/docs/reference/mvc.html#mvc-handlermapping" rel="external nofollow">Handler mappings</a></p></dd>
<dt>ModelAndView</dt>
<dd><p>MVC アーキテクチャにおける モデルとビューのホルダーです。ビュー名にモデルをバインドして、リクエストコントローラから返されます。</p></dd>
<dt>ビュー</dt>
<dd><p>モデルをレンダリングするオブジェクトです。ビューオブジェクトはレスポンスにモデルデータをレンダリングするのが仕事です。<i>org.springframework.web.servlet.View</i> インターフェースを実装します。実装クラスには JstlView, TilesView, VelocityView などがあります。</p></dd>
<dt>ビューリゾルバ</dt>
<dd><p>ModelAndView のビュー名から、ビューオブジェクトを解決するクラスです。実装クラスには UrlBasedViewResolver などがあります。</p>

<p><a href="http://www.springframework.org/docs/reference/mvc.html#mvc-viewresolver" rel="external nofollow">View and resolving them</a></p></dd>
<dt>ワークフロー</dt>
<dd><p>コントローラにおける処理の流れのことです。ウィザード形式のフォームコントローラを使用する場合など、画面間における必須項目のチェックなどを行えます。</p></dd>
<dt>ハンドラインターセプター</dt>
<dd><p>コントローラを呼ぶ前や、コントローラの処理が終了した後などに、呼び出されるコールバックオブジェクト。インターセプターと名前がつくことから、コントローラの処理を横取りして、処理をなかったことにしたり、装飾を加えたリクエストをコントローラに渡したりできる。<i>HandlerInterceptor</i> インターフェースを実装する必要がある。通常、HandlerInterceptorAdapter クラスを継承して、任意のインターセプトポイントに関するメソッドのみをオーバーライドすればよい。</p></dd>
<dt>妥当性チェック (Validation)</dt>
<dd><p>入力値が処理可能なものかを検査すること。一般に「構文」の検証と「セマンティクス」の検証とがある。構文検証は、データが存在するか、データの長さが許容範囲に日あっているか、データが有効なフォーマットかどうかを調べるものです。セマンティクス検証は、ビジネスロジックやデータアクセスまでが含まれる、手の込んだ検証になります。</p></dd>
</dl>




<h2>参考</h2>


<ul>
<li><p>Spring Framework の本家です。
<a href="http://www.springframework.org/" rel="external nofollow">Spring Framework</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring Framework の 日本語 Wiki です。大量の情報があります。
<a href="http://wiki.bmedianode.com/Spring/?FrontPage" rel="external nofollow">Spring Pad</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント (日本語訳)
<a href="http://www.andore.com/money/trans/spring_ref_ja.html" rel="external nofollow">Spring-Java/J2EEアプリケーションフレームワークドキュメント</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring フレームワークに関しての概要です。TECHSCORE さんの記事は読みやすいなぁ (^^ ;
<a href="http://www.techscore.com/tech/Java/Spring/1.html" rel="external nofollow">TECHSCORE - Spring Framework</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring を含めた、軽量コンポーネントのお話です。</p></li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>Spring の ロッドジョンソンが贈る、J2EE技術者のためのバイブル</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>Spring のロッドジョンソンによる Spring ユーザのための本 (洋書)</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>SpringでWebアプリケーションを作りながら、Springの全体像がわかりやすく解説されています。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Framework 覚書き - トランザクション管理]]></title>
    <link href="http://hamasyou.com/blog/2004/11/04/spring-framework/"/>
    <updated>2004-11-04T13:38:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/11/04/spring-framework</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764558315/sorehabooks-22" rel="external nofollow"></a>
</p>


<p>アメリカではほとんどデフェクトスタンダードとなっている「<a href="http://www.springframework.org/" rel="external nofollow"></a>」の覚書きです。Spring は簡単に言うと、<abbr title="Inversion of Control" >IoC (制御の反転)</abbr>、またの名を <abbr title="Dependency Injection">DI (依存性注入)</abbr> という仕組みを取り入れた軽量コンテナです。</p>

<p>Springはとても抽象化した方法で、トランザクション管理を行います。抽象化というのは実装に依存していないという意味です。アプリケーションサーバが持つトランザクション機能や、 JDBCのようなリソースを使った DataSource に関しても、共通の方法でトランザクション管理を提供しています。</p>

<p>Springの詳細については、ほかにもっとよいサイト(<a href="http://www.andore.com/money/trans/spring_ref_ja.html" rel="external nofollow">Springフレームワークの紹介</a>)があるので、そちらを参考にしてください。ここでは、Springを使っていて、ハマった点や気になった点などをメモしていこうと思います。随時更新していくつもりです。間違っている可能性が高いので、気になる点があればコメントをお願いします。</p>

<p><section></p>

<h4>参考</h4>


<p><a href="http://wiki.bmedianode.com/Spring/?FrontPage" rel="external nofollow">Spring Pad - Wiki</a></p>

<p><a href="http://direct.idg.co.jp/detail_1.msp?id=1066&class=10005&n=2" rel="external nofollow">JavaWorld 7月号 2004年</a></p>

<p></section></p>

<!-- more -->




<h2>トランザクション管理</h2>




<ul><li><a href="#トランザクション管理機能" rel="external nofollow">トランザクション管理機能</a></li></ul>




<h2 id="トランザクション管理機能">トランザクション管理機能</h2>


<p>Springのトランザクション機能は、トランザクションマネジャというものが管理します。マネジャの設定もBean定義書で行います。Springのトランザクションマネジャは、<abbr title="Java Transaction API">JTA</abbr> をサポートしていない DataSource に対しても宣言的なトランザクションをかけることが出来る。</p>

<p>宣言的なトランザクションとは、トランザクション境界(トランザクションの開始と終了)を宣言して、<abbr title="Plain Old Java Object">POJO</abbr> のメソッドにトランザクション処理を行うことが出来るものです。例外が発生した場合に自動的にロールバックを行わせるものだと考えてください。</p>

<p><section></p>

<h4>[参考]</h4>


<p><a href="http://wiki.bmedianode.com/Spring/?TransactionProxyFactoryBean" rel="external nofollow">Spring Pad - TransactionProxyFactoryBean</a></p>

<h3>org.springframework.transaction.PlatformTransactionManager</h3>


<p>Springのトランザクションマネジャの基本インターフェースのようです。</p>

<dl><dt>グローバルトランザクション</dt>
<dd>リソースを使わないトランザクション。JTAを使ってアプリケーションサーバが処理します。</dd>
<dt>ローカルトランザクション</dt>
<dd>JDBCなどのリソースを使用したトランザクション処理。</dd>
</dl>


<p>Springは、グローバルトランザクションとローカルトランザクションを透過的に扱うためにこのインターフェースを用意しています。</p>

<h3>org.springframework.transaction.TransactionDefinition</h3>


<p><section></p>

<h4>トランザクション設定を定義するインターフェース</h4>




<dl><dt>PROPAGATION_REQUIRED</dt>
<dd>トランザクションを実行する。</dd>
<dt>PROPAGATION_REQUIRES_NEW</dt>
<dd>メソッド呼出し毎に新しいトランザクションを実行する。</dd>
<dt>PROPAGATION_MANDATORY</dt>
<dd>トランザクションを開始している必要がある。</dd>
<dt>PROPAGATION_NOT_SUPPORTED</dt>
<dd>トランザクションの開始に関わらず、メソッド呼び出しはトランザクションに含まれない。</dd>
<dt>PROPAGATION_SUPPORTS</dt>
<dd>トランザクションが開始されていれば、メソッドが実行される。開始されていなければ実行されない。</dd>
<dt>PROPAGATION_NEVER </dt>
<dd>トランザクションに参加しない。</dd>
</dl>


<p></section></p>

<p>コミット対象にする例外を追加するには、トランザクション属性に 「+《例外の型》」 をつける。ロールバック対象の例外を追加するには 「-《例外の型》」 をつける。</p>

<pre>PROPAGATION_REQUIRED, +java.io.IOException</pre>




<h3>org.springframework.jdbc.datasource.DataSourceTransactionManager</h3>


<p>一つのDataSourceのためのトランザクション実装です。DataSourceごとに一つのスレッドが対応します。JDBCのConnectionを利用してトランザクションを制御します。</p>

<h2>参考</h2>


<ul>
<li><p>Spring Framework の本家です。
<a href="http://www.springframework.org/" rel="external nofollow">Spring Framework</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring Framework の 日本語 Wiki です。大量の情報があります。
<a href="http://wiki.bmedianode.com/Spring/?FrontPage" rel="external nofollow">Spring Pad</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント (日本語訳)
<a href="http://www.andore.com/money/trans/spring_ref_ja.html" rel="external nofollow">Spring-Java/J2EEアプリケーションフレームワークドキュメント</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring フレームワークに関しての概要です。TECHSCORE さんの記事は読みやすいなぁ (^^ ;
<a href="http://www.techscore.com/tech/Java/Spring/1.html" rel="external nofollow">TECHSCORE - Spring Framework</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring を含めた、軽量コンポーネントのお話です。</p></li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>Spring の ロッドジョンソンが贈る、J2EE技術者のためのバイブル</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>Spring のロッドジョンソンによる Spring ユーザのための本 (洋書)</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>SpringでWebアプリケーションを作りながら、Springの全体像がわかりやすく解説されています。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Framework 覚書き - JDBC抽象化]]></title>
    <link href="http://hamasyou.com/blog/2004/11/04/spring-framework-jue-shu-ki-jdbcchou-xiang-hua/"/>
    <updated>2004-11-04T13:35:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/11/04/spring-framework-jue-shu-ki-jdbcchou-xiang-hua</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764558315/sorehabooks-22" rel="external nofollow"></a>
</p>


<p>アメリカではほとんどデフェクトスタンダードとなっている「<a href="http://www.springframework.org/" rel="external nofollow"></a>」の覚書きです。Spring は簡単に言うと、<abbr title="Inversion of Control">IoC (制御の反転)</abbr>、またの名を <abbr title="Dependency Injection">DI (依存性注入)</abbr> という仕組みを取り入れた軽量コンテナです。</p>

<p>Springは JDBCを抽象化した層を持っています。JDBCを使ったプログラミングで、共通化できる部分や、煩雑な部分をすっきりとした統一的な方法でアクセスできる手段を提供してくれます。</p>

<p>Springの詳細については、ほかにもっとよいサイト(<a href="http://www.andore.com/money/trans/spring_ref_ja.html" rel="external nofollow">Springフレームワークの紹介</a>)があるので、そちらを参考にしてください。ここでは、Springを使っていて、ハマった点や気になった点などをメモしていこうと思います。随時更新していくつもりです。間違っている可能性が高いので、気になる点があればコメントをお願いします。</p>

<p><section></p>

<h4>参考</h4>


<p><a href="http://wiki.bmedianode.com/Spring/?FrontPage" rel="external nofollow">Spring Pad - Wiki</a></p>

<p><a href="http://direct.idg.co.jp/detail_1.msp?id=1066&class=10005&n=2" rel="external nofollow">JavaWorld 7月号 2004年</a></p>

<p></section></p>

<!-- more -->




<h2>JDBC抽象化フレームワーク</h2>




<ul><li><a href="#JDBC抽象化層とは？" rel="external nofollow">JDBC抽象化層とは？</a></li>
<li><a href="#JDBC抽象化層で使われる主な クラス / インターフェース" rel="external nofollow">JDBC抽象化層で使われる主な クラス / インターフェース</a></li>
<li><a href="#JdbcTemplateを使った基本的なSQL文の実行" rel="external nofollow">JdbcTemplateを使った基本的なSQL文の実行</a></li>
<li><a href="#DataSource の設定の仕方" rel="external nofollow">DataSource の設定の仕方</a></li>
<li><a href="#SqlFunction クラスを使った単一問い合わせのサンプル" rel="external nofollow">SqlFunction クラスを使った単一問い合わせのサンプル</a></li>
</ul>




<h2 id="JDBC抽象化層とは？">JDBC抽象化層とは？</h2>


<p>Springは、JDBCをラップした抽象化層を提供しています。これは、JDBCを使ってプログラミングを行う際に必ず必要となる、Connectionのオープン / クローズや Statement、ResultSet の生成と破棄をテンプレート化して提供するものであると考えてよいと思います。</p>

<p>もう一つは、<em>SQLException を使わないで永続化処理が書ける</em>というものです。通常、データベースへの処理は SQLException を明示的に処理しなければなりません。しかし、実際のアプリケーションでSQLExceptionをキャッチして処理するということはあまりありません。なぜなら、ほとんどのSQLExceptionの原因はアプリケーション内からでは復帰が難しいものだからです。</p>

<p>JDBC抽象化層は、SQLException よりももっと抽象化した<em>実行時例外である org.springframework.dao.DataAccessException</em>を扱います。実行時例外であるため、開発者は無意味な SQLException をわざわざキャッチしなくてすむようになります。アプリケーション側で復帰できそうな例外に関してはキャッチして処理することも可能です。</p>

<p>JDBC抽象化層では、テーブルに対する検索(SELECT)や更新(INSERT / UPDATE / DELETE)を一つのオブジェクトとして定義する方法が提供されています。一つのSQL文に対して、一つのクラスを対応させる感じです。クラス数が非常に多くなっちゃいそうですね・・・。</p>

<h2 id="JDBC抽象化層で使われる主な クラス / インターフェース">JDBC抽象化層で使われる主な クラス / インターフェース</h2>


<p>JDBC抽象化層で使われる主なクラスとインターフェースです。</p>

<h3>org.springframework.dao.DataAccessException</h3>


<p>JDBC抽象化層で使われるトップレベルのデータアクセス実行時例外クラス。開発者は必要であれば、このクラスのサブクラスを適切に処理することができます。</p>

<h3>org.springframework.jdbc.datasource.DriverManagerDataSource</h3>


<p>Beanのプロパティを使ってJDBCドライバ構成を組み立てます。このクラスは、<strong>常に新しいコネクションオブジェクトを返します</strong>。既知のサブクラスに SingleConnectionDataSource クラスがあります。</p>

<p>このクラスは、常に同一のコネクションを使いまわします。マルチスレッド環境では使えません。</p>

<p><section></p>

<h4>Bean定義ファイルで宣言するときに設定する属性</h4>




<dl><dt>driverClassName</dt><dd>JDBCドライバの完全クラス名です。</dd>
<dt>url</dt><dd>データベースへのURLです。</dd>
<dt>username</dt><dd>データベースへつなぐユーザ名</dd>
<dt>password</dt><dd>データベースへつなぐパスワード</dd>
</dl>


<p></section></p>

<p>接続設定を直接書くのではなくて、設定ファイルに定義しておいて、その値を読み込むといったことも出来ます。詳しくは 『<a href="http://www.andore.com/money/trans/spring_ref_p4_ja.html#doc1_3.6.2" rel="external nofollow">Spring-Java/J2EE アプリケーションフレームワークドキュメント (3.6.2 PropertyPlaceholderConfigurer)</a>』をどうぞ。</p>

<h3>org.springframework.jdbc.object.MappingSqlQuery</h3>


<p>テーブルに関する検索処理を行う、再利用可能な問い合わせクラスです。サブクラスでは、mapRow メソッドによって、 ResultSet を オブジェクトに変換する処理が書けます。オブジェクト変換時に、SQL文に設定したパラメータ(PreparedStatementのパラメータ)が必要な場合には、org.springframework.jdbc.object.MappingSqlQueryWithParameters を使用します。</p>

<p>SqlQuery#findObject メソッドは、ユニークなオブジェクトを返すメソッドとなります。そのため、SQL文の結果がたった一つになるようにしなければなりません。主キーを指定するSQL文を作るのが一般的な使い方でしょう。</p>

<p>mapRow メソッドは、実行したSQL文の結果セットが存在する場合(レコードがある場合)のみ呼び出されます。</p>

<dl>
<dt>findObject メソッド</dt><dd>SELECT文を実行します。実行結果が一つだけ存在する場合に使います。</dd>
<dt>execute メソッド</dt><dd>SELECT文を実行します。実行結果が複数ある場合に使います。</dd>
</dl>




<h3>org.springframework.jdbc.object.SqlUpdate</h3>


<p>SQLの更新を表すクラスです。MappingSqlQueryと同様に再利用な可能(PreparedStatement式)なオブジェクトになります。update / execute メソッドを呼び出すことで、更新処理(INSERT, UPDATE, DELETE)が実行されます。</p>

<dl><dt>update メソッド</dt><dd>INSERT文、UPDATE文、DELETE文を実行します。</dd></dl>




<h3>org.springframework.jdbc.core.JdbcTemplate</h3>


<p>JDBC抽象化層のコアクラスです。通常のSQLクエリを抽象化します。RowCallbackHandler を使って、ResultSet をオブジェクトに変換する処理が書けます(<a href="#JdbcTemplateを使った基本的なSQL文の実行" rel="external nofollow">サンプルコード</a>参照)。</p>

<dl>
<dt>query メソッド</dt>
<dd><p>問い合わせSQL文を発行します。引数に現れる <code>ResultSetExtractor</code>、<code>RowCallbackHandler</code>、<code>RowMapper</code> はいづれも ResultSet に何らかの処理を加えられるものです。通常、オブジェクトへの変換を行います。</p></dd>
<dt>execute メソッド</dt>
<dd><p>あらゆる種類のSQL文を実行します。引数にとるコールバックインターフェースは、execute メソッドが呼ばれたときに呼び出されます。</p></dd>
<dt>update メソッド</dt>
<dd><p>更新系(INSERT, UPDATE, DELETE) のSQL文を発行します。</p></dd>
</dl>




<h3>org.springframework.jdbc.core.support.JdbcDaoSupport</h3>


<p>このクラスは、サブクラスに DataSource を提供できるようにしたクラスです。Bean定義書で DataSource の設定を書いておくと、IoCコンテナが自動的に DataSource を生成してセットしておいてくれます。サブクラスで JdbcTemplate を利用することが期待されているみたいです。</p>

<h3>org.springframework.jdbc.object.SqlFunction</h3>


<p>単一の結果を返す、SQL問い合わせのラッパークラスです。例えば、テーブルレコードのカウントをとりたい場合などに利用できます。サンプルコードは後述。基本的には SqlFunction の返す結果は int 型になるようです。他の方が使いたい場合には、runGeneric() メソッドを呼び出せばいいです。</p>

<h2 id="JdbcTemplateを使った基本的なSQL文の実行">JdbcTemplateを使った基本的なSQL文の実行</h2>


<p>JdbcTemplate クラスを使ったSQL文の実行方法です。ここでは、RowCallbackHandler クラスを使って、検索結果をオブジェクトに変換する処理までやっています。更新系の処理なら、JdbcTemplate オブジェクトを作成して、execute メソッドの引数にSQL文を渡してやるだけで実行されるようです。</p>

<p><section></p>

<h4>JdbcTemplateの例</h4>




<pre class="code"><code><span class="keyword">public</span> List findPersons() <span class="keyword">throws</span> DataAccessException {
  JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(getDataSource());
  <span class="keyword">final</span> List result = <span class="keyword">new</span> ArrayList();
  template.query(<span class="literal">"select ID, NAME, AGE from PERSON"</span>, 
                  <span class="keyword">new</span> RowCallbackHandler() {
    <span class="keyword">public</span> <span class="keyword">void</span> processRow(ResultSet rs) <span class="keyword">throws</span> SQLException {
      Person p = <span class="keyword">new</span> Person(rs.getBigDecimal(1));
      p.setName(rs.getString(2));
      p.setAge(rs.getBigDecimal(3));
      result.add(p);
    }
  });
  <span class="keyword">return</span> result;
}
 
<span class="keyword">public</span> List findPersonsAsMap() {
  <span class="comment">/*
   * List の要素は Map オブジェクト
   * key が 列名 で value が値
   * [ {ID=1, NAME=Taro, AGE=22}, {ID=2, NAME=Hanako,AGE=25} ]
   */</span>
  JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate(getDataSource());
  List result = jt.queryForList(<span class="literal">"select * from PERSON"</span>);
  <span class="keyword">return</span> result;
}
 
<span class="keyword">public</span> <span class="keyword">void</span> addPerson(BigDecimal id, String name, BigDecimal age) {
  JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate(getDataSource());
  jt.update(<span class="literal">"insert into PERSON (ID, NAME, AGE) "</span> +
            <span class="literal">"  values (?, ?, ?) "</span>,
            <span class="keyword">new</span> Object[] {id, name, age});
}
</code></pre>


<p></section></p>

<h2 id="DataSource の設定の仕方">DataSource の設定の仕方</h2>


<p>JdbcDaoSupport クラスには getDataSource() というデータ接続を返すメソッドが用意されています。DataSource の設定は、Bean定義に例えば次のように書きます。</p>

<p><section></p>

<h4>DataSourceのBean定義例</h4>




<pre class="code"><code><span class="tag">&lt;bean <span class="attr">id=</span><span class="value">&quot;dataSource&quot;</span> 
    <span class="attr">class=</span><span class="value">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span>
 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;driverClassName&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>org.hsqldb.jdbcDriver<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;url&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>jdbc:hsqldb:hsql://localhost<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;username&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span>sa<span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>
 
  <span class="tag">&lt;property <span class="attr">name=</span><span class="value">&quot;password&quot;</span>&gt;</span>
    <span class="tag">&lt;value&gt;</span><span class="tag">&lt;/value&gt;</span>
  <span class="tag">&lt;/property&gt;</span>    
<span class="tag">&lt;/bean&gt;</span>
</code></pre>


<p></section></p>

<h2 id="SqlFunction クラスを使った単一問い合わせのサンプル">SqlFunction クラスを使った単一問い合わせのサンプル</h2>


<p>SqlFunction クラスを使うと、単一の問い合わせを表現することができます。通常、単一問い合わせの結果は int 型になるみたいです。複数件の結果が返ってきたり、オブジェクトに変換したりする処理が発生する場合には、 JdbcTemplate の例のような方法を使います。</p>

<p><section></p>

<h4>テーブルのレコード数を返す例</h4>




<pre class="code"><code><span class="keyword">public</span> <span class="keyword">int</span> countRows() {
  SqlFunction sf = 
    <span class="keyword">new</span> SqlFunction(dataSource, <span class="literal">"select count(*) from mytable"</span>);
  sf.compile();
  <span class="keyword">return</span> sf.run();
}
</code></pre>


<p></section></p>

<h2>参考</h2>


<ul>
<li><p>Spring Framework の本家です。
<a href="http://www.springframework.org/" rel="external nofollow">Spring Framework</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring Framework の 日本語 Wiki です。大量の情報があります。
<a href="http://wiki.bmedianode.com/Spring/?FrontPage" rel="external nofollow">Spring Pad</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring-Java/J2EEアプリケーションフレームワークリファレンスドキュメント (日本語訳)
<a href="http://www.andore.com/money/trans/spring_ref_ja.html" rel="external nofollow">Spring-Java/J2EEアプリケーションフレームワークドキュメント</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring フレームワークに関しての概要です。TECHSCORE さんの記事は読みやすいなぁ (^^ ;
<a href="http://www.techscore.com/tech/Java/Spring/1.html" rel="external nofollow">TECHSCORE - Spring Framework</a><img src="http://hamasyou.com/images/linkext.gif" alt="linkext" /></p></li>
<li><p>Spring を含めた、軽量コンポーネントのお話です。</p></li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>Spring の ロッドジョンソンが贈る、J2EE技術者のためのバイブル</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797322888/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>Spring のロッドジョンソンによる Spring ユーザのための本 (洋書)</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0764574833/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>SpringでWebアプリケーションを作りながら、Springの全体像がわかりやすく解説されています。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122793/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
