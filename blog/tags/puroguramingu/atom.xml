<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: プログラミング | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/puroguramingu/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-14T14:14:16+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[小飼弾のコードなエッセイ ~我々は本当に世界を理解してコードしているのだろうか? ]]></title>
    <link href="http://hamasyou.com/blog/2013/06/24/4774156647/"/>
    <updated>2013-06-24T22:34:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/06/24/4774156647</id>
    <content type="html"><![CDATA[<p>コード。ラテン語で codex。codex とはもともとローマ法大全のことを指し示す言葉だそうです。コードは読みとくべきであり、書き下されるべきものである。そしてそれができたとき、喜びが生まれる。弾さんのまえがきにある言葉ですが、コーディング好きなプログラマのみなさんはこの言葉がよくわかると思います。</p>

<p>本書は、プログラミングに関わるいろいろな事柄が短文のエッセイの形でまとめられています。もともと Software Design の連載だったものをまとめたもののようですが、まとめて読むことに価値があると思います。</p>

<p>弾さんのコンピュータの捉え方、プログラミングの姿勢、豊富な知識や知見がまとめられています。スイスイと読んでいける日本版の『<a href="http://www.amazon.co.jp/gp/product/4274066304?ie=UTF8&camp=247&creativeASIN=4274066304&linkCode=xm2&tag=sorehabooks-22" rel="external nofollow">Joel on Software</a>』です。</p>

<!-- more -->




<h2>はじめに</h2>


<p>コードな世界へ、ようこそ!</p>

<p>コード?コードって何でしょう?</p>

<p>元をたどると、この言葉はラテン語 codex に行き着きます。</p>

<p><blockquote><p></p></p><p><p>ORIGIN Middle English: via Old French from Latin codex, codic- (see codex). The term originally denoted a systematic collection of statutes made by one of the later Roman emperors, particularly that of Justinian&hellip;</p></p><p><p></p><footer><strong>Oxford American Dictionary</strong></footer></blockquote></p>

<p>ここに出てくるJustinianとはユスティニアヌス1世のこと。「ローマ法大全」(Corpus Iuris Civilis)を編纂させた人。codexとは、元々はこのローマ法大全のことを指し示す言葉だったのです。固有名詞から生じた一般名詞。</p>

<p>このことはBibleという言葉の対局にあります。こちらは元々は「本」という一般名詞でした。そのことは bibliomania (本の虫&ndash;どこの私だ?)、 bibliography (本の目録)といった英単語からも伺うことができます。Bibleとは"The Book"という意味だったのですね。一般名詞から生じた固有名詞。</p>

<p>コードに話を戻しましょう。本来のコードであったローマ法に関して、塩野七生はこう述べています。</p>

<p><blockquote><p></p></p><p><p>人間の行動原則の正し手を、 宗教に求めたユダヤ人。 哲学に求めたギリシア人。 法律に求めたローマ人。</p></p><p><p></p><footer><strong>ローマ人の物語</strong></footer></blockquote></p>

<p>この意味において、日本を含め、およそ法治国家を標榜する国々の市民はローマ人の末裔ということになります。</p>

<p>ところが、このローマ人、法を作成し、改訂し、施行することには熱心でも、編纂することには少しも熱心ではなかったのです。前述のユスティニアヌス1世の527年から565年。ローマの全盛期はとっくに過ぎて、東西に分裂した後だったのです。</p>

<p>おそらく、それに熱心に取り組んでいる人にとって、それはあまりに当然で必然なことで、わざわざ「外から」編纂するという気持ちにはなりにくかったのでしょう。</p>

<p>ローマ人にとってそうであったように、コードという言葉は現代人にとってそういう存在になりつつあります。ただし現代人にあってローマ人になかったものが一つあります。</p>

<p>それが、電脳(computer)。これはローマ人に奴隷がいて現代人にはいないこと(になっている)ことと対をなしています。ローマ法はあくまでローマ市民に適用されるものであって非市民たる奴隷や異邦人(barbarian)に適用されるものではなかったのですが、現代人は、その電脳で実行されるプログラムのことも、コードと呼んでいます。</p>

<p>本書の「コード」は、その双方を指しています。電脳に適用するコードと、人脳に適用するコード、その双方を。いや、もしかしてもう一つあるかも知れません。この世界自体に適用されている、コード。</p>

<p>最後のそれは、「法則」とも呼ばれます。残念ながらこれは我々が書き下したものではなく、この世界自身に書かれているものです。それを読み解く人が、科学者。そして人電両脳のコードを読み書きする人が、技術者。これは、科学者と技術者の違いでもあります。扱うコードがリードオンリなのかライタブルなのか。</p>

<p>本書の想定読者は、一応後者たる技術者ということになっています。しかしこの両者が深く繋がっていることを、私は「<a href="http://www.amazon.co.jp/gp/product/4041103851?ie=UTF8&camp=247&creativeASIN=4041103851&linkCode=xm2&tag=sorehabooks-22" rel="external nofollow">『中卒』でもわかる科学入門</a>」に書いています。</p>

<p><blockquote><p>およそどんな人でも、幸せな瞬間というのは次の二つしかないのかも知れません。</p></p><p><ol><br/><li>できなかったことができるようになった瞬間</li><br/><li>わからなかったことがわかった瞬間</li><br/></ol></p><p><br/><p></p></blockquote></p>

<p>コードは読み解くべきものでもあり、書き下されるべきものでもある。そしてそれが出来た時、よろこびが生まれる。</p>

<p>それが私にとってのコードであり、本書で扱うコードの範囲(scope)です。</p>

<p>では改めて。コードな世界へ、ようこそ!</p>

<h2>もくじ</h2>




<ul style="list-unstyled">
<li>#0 堂々とevaろう。でもevaりすぎにご用心</li>
<li>#1 Y談。</li>
<li>#2 I/O止めないで</li>
<li>#3 メモレカス、ナマケモノドモ</li>
<li>#4 殺速と複殺</li>
<li>#5 OS、SOS</li>
<li>#6 自縄自縛のススメ</li>
<li>#7 Body and Soul</li>
<li>#8 Mathコミュニケーション</li>
<li>#9 コードと法律の共通点</li>
<li>#10 バカと電脳は使いよう</li>
<li>#11 データは人のためならず</li>
<li>#12 Connect</li>
<li>#13 いまそこにある夢</li>
<li>#14 最後のファイルシステム</li>
<li>#15 ファイルシステムの終わり</li>
<li>#16 From Jobs' Apple to Apple's jobs </li>
<li>#17 Too Beautiful to be Windows</li>
<li>#18 点と線</li>
<li>#19 1%のコードと99%のコンフィギュレーション</li>
<li>#20 言語のチュウス[ウイ]</li>
<li>#21 並べ方と並べ替え方</li>
<li>#22 参照にしか値しない</li>
<li>#23 働いたら負けなら、働いてもらえばいいじゃない</li>
<li>#24 安物買いの安全失い</li>
<li>#25 Not Even Odd</li>
<li>#26 安増税の税失い</li>
<li>#27 たまには( )つけてみよう</li>
<li>#28 ニシキヘビに呑み込めないもの</li>
<li>#29 三位<一体</li>
<li>#30 Where do(es) you(r heart) want to go today</li>
<li>#31 The Round Lens Square Hole</li>
<li>#32 Can we still stay hungry?</li>
<li>#33 Where has all the foolish gone?</li>
<li>Ex.0 美しいプログラムの美しくないソース</li>
<li>Ex.1 アマグラマのすすめ美徳その1:怠慢</li>
<li>Ex.2 アマグラマのすすめ美徳その2:短気</li>
<li>Ex.3 アマグラマのすすめ美徳その3:傲慢</li>
<li>Ex.4 プログラマでなくても名前ぐらい覚えておきたいアルゴリズム×11</li>
<li>Ex.5 プログラミングいつまでに学ぶ? なぜ学ぶ?</li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ディジタル作法 －カーニハン先生の「情報」教室－]]></title>
    <link href="http://hamasyou.com/blog/2013/06/23/4274069095/"/>
    <updated>2013-06-23T17:31:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/06/23/4274069095</id>
    <content type="html"><![CDATA[<p>本書は、現在のコンピュータシステムや通信システムがどのように動作しているのかを、ハードウェアとソフトウェアの両方の視点から解説している一般の人向けの本です。コンピュータのことをもっとよく知りたい、コンピュータがどのように動作しているかをもっと知りたい、そういった人にオススメの一冊です。</p>

<p><blockquote><p></p></p><p><p>&ldquo;D is for Digital&rdquo; （ディジタル作法） は、コンピュータシステムや通信システムがどのように動作しているかを、簡潔に、それでいて細かいところまで丁寧に説明した本であり、自分たちが暮らしている世界のことをより良く分かっておきたいと考える一般読者（専門家ではない人）を対象にしています。本書では、今日の世界におけるコンピュータシステムや通信システムがどのように動作しているかということを、ハードウェアおよびソフトウェアからインターネット、Webに到るまで、ひととおり説明しています。</p></p><p><p></p><footer><strong>『本書』日本語版の刊行に寄せてより</strong></footer></blockquote></p>

<!-- more -->


<p>コンピュータの理論、コンピュータの仕組みというのは情報系の大学であれば授業で習うと思いますが、情報系の大学を出ていない人にはコンピュータが実際にどのように動作して、コンピュータがなぜインターネットに繋がって、コンピュータがなぜアプリケーションを実行できるのかをきちんと説明するのは難しいと思います。情報系の大学を出ていても説明できない人もいますしね。。</p>

<p>本書は、大学で習うようなこれらの基礎的なことを一般の人にも分りやすい平易な説明や例を使って解説してくれている本になります。ハードウェアとしてのコンピュータ、ソフトウェアの集まりとしてのコンピュータ、PC以外のコンピュータ、コンピュータは色々な形をしています。1から説明をしたのではたった300ページで説明を終えることなど出来るはずはないと思います。</p>

<p>でも、本書を読み終わると一通りコンピュータのことを理解できてしまった気になります。さすがはカーニハン先生が書いただけのことはあるなと。コンピュータがなぜ動いているのか理解した人にオススメです！</p>

<h2>おぼえがき</h2>




<h3>CPU</h3>


<p>CPU はコンピュータが計算するを行うための装置のことです。最近の CPU は「2.1 GHz Intel Core Duo」というような記述があります。Intel は CPU のメーカで、<strong>コア（Core）</strong>というのは CPU と同じ意味になります。CPU はクロックと呼ばれる信号を使用して動作します。1秒間に1刻みする信号を1Hzといい、2.1 GHz は1秒間に2,100,000,000回動作するというわけです。</p>

<h3>ビット・バイト</h3>


<p>コンピュータはディジタル処理装置である。コンピュータは情報をビットで表現する。ビット列に寄って大きな情報が表せる。数値、文字、音、画像、動画、プログラムなどはすべてビット列で表される。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世界でもっとも強力な9のアルゴリズム]]></title>
    <link href="http://hamasyou.com/blog/2013/02/05/482228493X/"/>
    <updated>2013-02-05T22:17:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/02/05/482228493X</id>
    <content type="html"><![CDATA[<p><blockquote><p></p></p><p><p>この本で取り上げた偉大なアルゴリズムから導き出せる共通のテーマはあるだろうか。この本の著者として私がとても驚いたのは、これらの大きなアイデアは、どれもコンピュータプログラミングやコンピュータ科学の予備知識を一切必要とせずに説明できることだ。</p></p><p><p>&lt;中略></p></p><p><p>この本のアルゴリズム全体に共通するもう1つの重要なテーマは、コンピュータ科学という学問分野がただのプログラミングよりもずっと大きな世界だということだ。</p></p><p><p>&lt;中略></p></p><p><p>私が目指したのは、読者に偉大なアルゴリズムについての知識を仕入れてもらって、日常のコンピュータ操作の中でもこれはすごいと感じてもらえるようにすることだ。</p></p><p><p></p><footer><strong>本書</strong></footer></blockquote></p>

<p>9つの偉大なアルゴリズム、<em>検索エンジンのインデクシング</em>、<em>ページランク</em>、<em>公開鍵暗号法</em>、<em>誤り訂正符号</em>、<em>パターン認識</em>、<em>データ圧縮</em>、<em>データベース</em>、<em>デジタル署名</em>、<em>決定不能性</em>を知ることで、僕達の周りでこれらのアルゴリズムがどうやって機能していて、何が担保されているのか理解できるようになります。</p>

<p>これらのアルゴリズムを知ることで、コンピュータの世界はすごいことが起こっていると知ってもらい、新たに出てくる問題の解決の一つになるといいなと思います。</p>

<p>読み物なので、どんな人にもおすすめです。</p>

<!-- more -->




<h3>検索エンジンのインデクシング</h3>


<p>検索エンジンは「NEAR」（キーワードが近くにあることを条件にする検索）を使ってランキングの精度を上げている。</p>

<p>また、メタワードトリック（タイトル、見出し、リンクなどのメタ情報のどこにキーワードが含まれているか）をつかって精度を上げている。</p>

<h3>ページランク</h3>


<p>ハイパーリンクトリック（リンクされているかどうか）、オーソリティトリック（有名なところからのリンクは高評価）、ランダムサーファートリック（ランダムにページを選択肢リンクをたどる）などのアルゴリズムが使われている。</p>

<p>なお、Google のページランクはもっと複雑な条件で行われている。</p>

<h3>公開鍵暗号法</h3>


<p>「共有された秘密」をどのように作るかがポイント。</p>

<h3>誤り訂正符号</h3>


<p><q>人に誤っていると教えることと真実を与えることは別のことだ。</q></p>

<p>チェックサムと呼ばれる冗長化符号を付与してデータ通信することで、途中でデータが変更されたかどうかを検知する。</p>

<h3>パターン認識</h3>


<p>パターン認識は、2段階で動作する。訓練データを処理してクラスの特徴を抽出する「学習（訓練）段階」。新しい分類ラベルの付いていないデータを分類する「分類段階」である。</p>

<h3>データ圧縮</h3>


<p>まとまったデータをより短いシンボルで表すロスなし圧縮と、データの一部を取り除いてしまうロス有り圧縮がある。</p>

<h3>データベース</h3>


<p>「to-doリスト」、「仮想テーブル」、「準備してからコミット」。</p>

<h3>デジタル署名</h3>


<p>デジタル署名はあなたが誰か他人に送るものに署名するのではなく、誰か他人があなたにモノを送る前にその送ろうとしているモノに署名をする。</p>

<p>例えば、プログラムをダウンロード、実行しようとするたびに、ウェブブラウザはプログラムがデジタル署名を持っているかどうかをチェックし、その署名が有効かどうかをチェックする。</p>

<p>デジタル署名が提供するのは、機密性ではなく文章の真正性である。</p>

<h3>決定不能性</h3>


<p>他のプログラムを分析し、そのなかに含まれていてプログラムをクラッシュさせる原因になるようなバグをすべて見つけ出すプログラムは書けない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラマが知るべき97のこと]]></title>
    <link href="http://hamasyou.com/blog/2011/08/16/4873114799/"/>
    <updated>2011-08-16T09:45:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/08/16/4873114799</id>
    <content type="html"><![CDATA[<p>本書は、「プログラマ」の、「プログラマ」による、「プログラマ」のための本です。</p>

<ul><li>プログラマとして成功したい！</li>
<li>プログラミングの腕を上達させたい！</li>
<li>ソースコードの質を向上させたい！</li>
<li>メンバーと上手くやりたい！</li></ul>


<p>こういった願いを持つ人のために、世界中でよく知られた著者陣のエッセイがまとめられています。</p>

<p>何か壁にぶち当たっている人、成功したプログラマはどんなことを考えていたのか知りたい人、どういうことを考えてプログラムを書けば質が上がるのか知りたい人。</p>

<p>すべての「プログラマ」におすすめの一冊です。</p>

<p><section></p>

<h4 class="note">参考</h4>


<p><a href="http://ja.wikisource.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%8C%E7%9F%A5%E3%82%8B%E3%81%B9%E3%81%8D97%E3%81%AE%E3%81%93%E3%81%A8" rel="external nofollow">プログラマが知るべき97のこと - Wikisource</a></p>

<p></section></p>

<!-- more -->




<h2>カテゴリ別目次</h2>




<ul>
<li>バグとその修正</li>
<li>ビルドとデプロイメント</li>
<li>コーディングガイドラインとコードレイアウト</li>
<li>設計原則とコーディングテクニック</li>
<li>ドメインの考慮</li>
<li>エラー、例外とその処理</li>
<li>技術、知識の習得</li>
<li>夜と魔法</li>
<li>パフォーマンス向上、最適化、その具体策</li>
<li>プロとしての心構え、態度</li>
<li>プログラミング言語とパラダイム</li>
<li>リファクタリングと保守</li>
<li>再利用と重複</li>
<li>スケジュールと納期、見積もり</li>
<li>シンプルさ</li>
<li>チームワークと強調</li>
<li>テストとその実践、テスター</li>
<li>ツール、自動化、開発環境</li>
<li>コードと顧客</li>
</ul>




<h2>おぼえがき</h2>


<p>本書は、良いことばかり書いてあり、おぼえがきを真面目に書こうとすると全部抜き出すことになっちゃうので適当に抜き出しました。</p>

<p>すごくいいことがいっぱい書いてあるので、一度本屋で立ち読みしてみるといいと思います。</p>

<h3>コードの再利用</h3>


<p>コードの再利用をするときは、<em>コンテキスト</em>が同じかどうかを確認すること。システム内に同じことをするコードが二つあったとしてもそれぞれが違う役割をしていたら、それはコンテキストが違うから再利用のメリットは少ない。</p>

<p><blockquote><p>「再利用」は一般に良いこととされており、確かに基本的には良いことだからです。コンテキストさえ適切なら、間違いなく有効です。しかし、コンテキストが不適切だと、メリットよりもコストのほうが大きくなるのです。</p></p><p><p></p><footer><strong>本書-共有は慎重により</strong></footer></blockquote></p>

<h3>DRY原則</h3>


<p>「<strong>DRY（Don&rsquo;t Repeat Yourself:繰り返しを避ける）原則</strong>」とは「すべての<em>知識</em>はシステム内において、単一、かつ明確な、そして信頼できる表現になっていなければならない」という条件をみたすこと。</p>

<p>「知識」が唯一であるということがポイントで、その知識を取り出すコードの重複は DRY 原則違反ではない。その知識を取り出すコードの重複を一箇所にまとめることは、<strong>OAOO（Once and Only Once）</strong>と呼ぶ。</p>

<h3>技術的例外とビジネス例外を明確に区別する</h3>


<p>技術的例外、たとえばネットワークに繋がらない、データベースに繋がらない、配列のインデックスを超えてアクセスしたなどの例外と、預金額を超える額のお金を口座から引き出そうとしたというようなビジネス例外は、明確に別れた例外階層を使うべき。</p>

<h3>良いインターフェース仕様の条件は「正しい使い方を簡単に、誤った使い方を困難に」</h3>


<p>良いインターフェースは、<em>正しく使用することが操作ミスをするよりも簡単</em>である。良い API を設計するときに考えることは「<strong>それが一番自然かどうか</strong>」</p>

<h3>名前重要</h3>


<p>「<em>すべての人物・事物には真の名前があり、その名前を知るものはそれを支配することができる</em>」本当にしっくりくる名前を選択することは、とても重要なことで、適切な名前を選択できたら8割は設計が完成したと考えても大げさではない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラミング覚書き]]></title>
    <link href="http://hamasyou.com/blog/2005/03/18/memo/"/>
    <updated>2005-03-18T13:24:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/03/18/memo</id>
    <content type="html"><![CDATA[<p>設計やプログラミングを行う上で、覚えておいたほうがいいことなどをメモしておこうと思います。意見などありましたら、コメント等でご連絡ください。随時、更新予定です。</p>

<p>適用、引用による効能は自己責任でお願いします。</p>

<!-- more -->




<h2>インデックス</h2>




<ul><li><a href="#if文の構造を考える" rel="external nofollow">if文の構造を考える</a></li>
<li><a href="#実装の継承とインターフェイスの継承" rel="external nofollow">実装の継承とインターフェイスの継承</a></li>
<li><a href="#エラーメッセージには対処法を表示する" rel="external nofollow">エラーメッセージには対処法を表示する</a></li>
<li><a href="#デザインパターンの考え方" rel="external nofollow">デザインパターンの考え方</a></li>
<li><a href="#アプリケーションサービスレイヤーの設計方法" rel="external nofollow">アプリケーションサービスレイヤーの設計方法</a></li>
<li><a href="#サーブレットコンテキスト名はプログラムから取得するべし" rel="external nofollow">サーブレットコンテキスト名はプログラムから取得するべし</a></li>
<li><a href="#JBuilderでカスタムserver.xmlを使う方法" rel="external nofollow">JBuilderでカスタムserver.xmlを使う方法</a></li>
<li><a href="#コメントは道路標識の警告のように使う" rel="external nofollow">コメントは道路標識の警告のように使う</a></li>
<li><a href="#add, set 系のメソッドの戻り値はvoid よりも 受け取ったオブジェクト" rel="external nofollow">add, set 系のメソッドの戻り値はvoid よりも 受け取ったオブジェクト</a></li>
<li><a href="#Webアプリケーション内で使われるビジネスロジックはスレッドセーフにする必要がある" rel="external nofollow">Webアプリケーション内で使われるビジネスロジックはスレッドセーフにする必要がある</a></li>
<li><a href="#[JSF]&lt;h:commandLink&gt;は &lt;h:form&gt;タグの中に書く" rel="external nofollow">[JSF]&lt;h:commandLink&gt;は &lt;h:form&gt;タグの中に書く</a></li>
<li><a href="#[JSF] actionListenerとactionの使い分け" rel="external nofollow">[JSF] actionListenerとactionの使い分け</a></li>
<li><a href="#環境に依存するものは、引数で受け取る" rel="external nofollow">環境に依存するものは、引数で受け取る</a></li></ul>




<h2>ノウハウ一覧</h2>




<h3 id="if文の構造を考える">if文の構造を考える</h3>


<p>if - then - else の構造は、<em>同等の重要さを持つ条件</em>を並べるべき。特殊な条件の場合は<strong>ガード節</strong>を用いて、特殊な条件であることが分かるようにする。つまり<em>条件の重み付け</em>を行うこと。</p>

<pre class="code"><code><span class="keyword">if</span> (特殊な条件) {    <span class="comment">/* ガード節 */</span>
    <span class="comment">// 処理内容 </span>
    <span class="keyword">return</span> 
} 
 
<span class="keyword">if</span> (普通の条件1) { 
    <span class="comment">// 処理1 </span>
} 
<span class="keyword">else</span> <span class="keyword">if</span> (普通の条件2) { 
    <span class="comment">// 処理2 </span>
} 
<span class="keyword">else</span> {  
    <span class="comment">// その他の処理 </span>
}
</code></pre>




<h3 id="実装の継承とインターフェイスの継承">実装の継承とインターフェイスの継承</h3>


<p>継承には、実装の継承とインターフェイスの継承とがある。実装の継承とは、Javaでいう extends を使う方法である。インターフェイスの継承とはJavaでいう implements を使う方法である。</p>

<p>使い分けるルールとしては</p>

<ol><li>クラスが「もの」や「こと」の種類を表している場合は実装の継承</li><li>サービス、機能を継承する場合はインターフェイスの継承</li></ol>




<h4>[参考]</h4>


<ul>
<li>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/487311201X/sorehabooks-22" rel="external nofollow">軽快なJava</a>』 オライリージャパン</li>
</ul>


<h3 id="エラーメッセージには対処法を表示する">エラーメッセージには対処法を表示する</h3>


<p>エラーメッセージの表示には <strong>対処法</strong> を書くようにする。例えば、「意図しない入力です。」よりも「生年月日には数値を入力してください。」のようにしたり、「現在、要求を受理できませんでした。」よりも可能であれば「3時間以内に復帰する予定です。」のようにしたほうがよい。</p>

<h3 id="デザインパターンの考え方">デザインパターンの考え方</h3>


<p><em>デザインパターンは、ロール(役割)の相互作用</em>を表している。相互作用におけるロール(役割)は、抽象クラスで定義します。</p>

<p><blockquote><p>ロールの考え方を突き詰めていくと、「役割場(やくわりば)とその重ね合わせによるシステムの合成」という考え方に行き着きます。<p class="source"></p></p><p><p></p><footer><strong>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822206653/sorehabooks-22" rel="external nofollow">ソフトウェアの匠</a>』</strong></footer></blockquote></p>

<h3 id="アプリケーションサービスレイヤーの設計方法">アプリケーションサービスレイヤーの設計方法</h3>


<p>ソフトウェアアーキテクチャを設計する場合、サービスレイヤーのコンポーネントを、「<strong>チャネルサービス</strong>」、「<strong>ユースケースサービス</strong>」、「<strong>汎用サービス</strong>」の3段階に分けると良い。</p>

<p>チャネルサービスは、コンポーネントのクライアントに対して開かれるインターフェースを定義する段階です。HTTPクライアントやSOAPクライアントに対するインターフェース等を定義します。</p>

<p>ユースケースサービスは、ユースケース特有のロジックを定義する段階です。</p>

<p>汎用サービスは、共通のロジック例えばログの出力や帳票出力などを定義する段階です。</p>

<p>チャネルサービス、ユースケースサービス、汎用サービスはそれぞれ下に依存します。</p>

<h4>[参考]</h4>


<ul>
<li>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122645/sorehabooks-22" rel="external nofollow">WEB+DB Press 26</a>』</li>
</ul>


<h3 id="サーブレットコンテキスト名はプログラムから取得するべし">サーブレットコンテキスト名はプログラムから取得するべし</h3>


<p>JSPでリンクでサーブレットに飛ばす場合に、サーブレットコンテキスト名を付けなければならない場合がある。このとき、コンテキスト名をべた書きしてしまうと、コンテキスト名が変更になった場合にすべてのJSPを変更しなければならない。</p>

<p><em>&lt;%= request.getContextPath() %&gt;</em> と書くことで、コンテキスト名が取得できるので、JSPではできるだけこの方法でコンテキスト名を取得するようにする。</p>

<h3 id="JBuilderでカスタムserver.xmlを使う方法">JBuilderでカスタムserver.xmlを使う方法</h3>


<p>JBuilderでTomcatを使う場合、server.xmlが自動で生成され、サーバーをシャットダウンすると削除されてしまいます。カスタムserver.xmlを作るには、この自動で生成されたserver.xmlの2行目にあるコメント</p>

<pre>&lt;!--This comment marks this file as generated, so it may be deleted and regenerated at any time. To preserve manual changes to this file, delete this comment.--&gt;</pre>


<p>を削除すればよいとのこと。</p>

<h4>[参考]</h4>


<ul>
<li>『<a href="ftp://ftpc.borland.com/pub/jbuilder/techpubs/jbuilderx/j2eeapps.pdf" rel="external nofollow">Developing Applications for J2EE&#8482; Servers (英語)</a>』</li>
</ul>


<h3 id="コメントは道路標識の警告のように使う">コメントは道路標識の警告のように使う</h3>


<p>プログラムに記述するコメントは、道路標識の警告(例：この先急カーブ)のように使う。コメントが多いプログラムは、そこらじゅうに注意書きがある本のように読みにくいもの。</p>

<p>できるだけわかりやすく書き、コメントは道路で突然の急カーブを警告するためだけに用いられる矢印標識のように使う。</p>

<p><blockquote><p>プログラムは、人々がそれを読むために書かれるべきである。たまたま、それが計算機(コンパイラ)で実行できるにすぎない。</p></p><p><p></p><footer><strong>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274065979/sorehabooks-22" rel="external nofollow">ハッカーと画家</a>』</strong></footer></blockquote></p>

<h3 id="add, set 系のメソッドの戻り値はvoid よりも 受け取ったオブジェクト">add, set 系のメソッドの戻り値はvoid よりも 受け取ったオブジェクト</h3>


<p>add, set 系のメソッドの戻り値は void よりも、受け取ったオブジェクト(this) を返すようにすると、メソッドチェーンが行いやすい。特に<strong>Builder</strong>クラスはこの恩恵が受けやすい。</p>

<pre class="code"><code>Processor proc = <span class="keyword">new</span> ProcessorBuilder()
                     .addOption(<span class="literal">"hoge"</span>)
                     .addOption(<span class="literal">"bar"</span>)
                     .setChild(ChildClass.class)
</code></pre>




<h3 id="Webアプリケーション内で使われるビジネスロジックはスレッドセーフにする必要がある">Webアプリケーション内で使われるビジネスロジックはスレッドセーフにする必要がある</h3>


<p>Webアプリケーションはリクエストをスレッドで処理するようになっています。そのため、マルチスレッドを意識してプログラミングを行わなければなりません。</p>

<p>ビジネスロジック層のクラスにおいても、実装はマルチスレッドを意識しなければなりません。<em>特に、アプリケーションレベルで共有されるオブジェクトや、セッションに格納されるオブジェクトは特に意識しなければなりません</em>。</p>

<p>セッションに格納されるオブジェクトをなぜスレッドセーフにしなければならないのか？それは、同じユーザセッションを持つスレッドが複数存在する可能性があるからです。Submitボタンを二度押された場合、リクエストが二度発行されることになります。このとき、同一セッションIDを持つスレッドが複数存在することになります。</p>

<dl>
<dt class="info">Webアプリケーションはスレッドを意識するする必要がある</dt>
<dd>
<p>Webアプリケーションと言うのは、いろんなところに注意しなければなりません。マルチスレッドもしかり、セキュリティもしかりです。マルチスレッドプログラミングをちゃんと勉強しておく必要がありそうです。</p>

<ul>
<li>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/477411491X/sorehabooks-22" rel="external nofollow">Javaスレッド完全制覇標準プログラマーライブラリ</a>』</li>
<li>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756117848/sorehabooks-22" rel="external nofollow">実践マルチスレッドプログラミングサンソフトプレスシリーズ</a>』</li>
<li>『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714361/sorehabooks-22" rel="external nofollow">Effective Java プログラミング言語ガイド</a>』</li>
</ul></dd>
</dl>




<h3 id="[JSF]&lt;h:commandLink&gt;は &lt;h:form&gt;タグの中に書く">[JSF]&lt;h:commandLink&gt;は &lt;h:form&gt;タグの中に書く</h3>


<p>JSFでリンクを表現する場合、 &lt;h:outputLink&gt; と &lt;h:commandLink&gt; で表現できます。この二つの違いは前者は単純なリンクを表現するのに対して、後者はコマンドを発行するために JavaScript を使うものです。</p>

<p><strong>&lt;h:commandLink&gt;を使う場合は &lt;h:form&gt;タグに囲まれるように書く</strong>必要があります。</p>

<p>outputLink と commandLink の使い分けは、JSF以外のページに遷移する場合は outputLink。同じアプリケーション内のJSFに遷移するときは commandLink を使うようです。</p>

<h3 id="[JSF] actionListenerとactionの使い分け">[JSF] actionListenerとactionの使い分け</h3>


<p>アクションリスナーはUIComponent に対して処理を行うのに都合がよい。逆に、アクションは、戻り値でページ遷移を制御できるので、ページ処理が発生するビジネスロジックを記述するのに都合がよい。</p>

<h3 id="環境に依存するものは、引数で受け取る">環境に依存するものは、引数で受け取る</h3>


<p>リソースや、ファイルオブジェクト、入出力ストリームなどの環境に依存するオブジェクトは、メソッドの引数で受け取るようにする。</p>

<pre class="code"><code><span class="keyword">private</span> String[] parseFile(File file) <span class="keyword">throws</span> Exception;
<span class="keyword">private</span> String[] parseXML(InputStream is) <span class="keyword">throws</span> Exception; 
</code></pre>




<h2>参考</h2>


<ul>
<li>良いプログラミングを行うためのバイブル(超おすすめ)</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756102107/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>




<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4756103642/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>リファクタリング関係の情報はここから</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894712288/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>




<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797329769/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
