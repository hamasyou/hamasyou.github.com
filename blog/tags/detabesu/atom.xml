<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: データベース | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/detabesu/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-03-04T15:24:11+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NoSQLプログラミング実践活用技法]]></title>
    <link href="http://hamasyou.com/blog/2012/09/13/4798126055/"/>
    <updated>2012-09-13T10:10:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/09/13/4798126055</id>
    <content type="html"><![CDATA[<!-- more -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webエンジニアのための データベース技術[実践]入門]]></title>
    <link href="http://hamasyou.com/blog/2012/05/09/4774150207/"/>
    <updated>2012-05-09T00:47:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/05/09/4774150207</id>
    <content type="html"><![CDATA[<p>「データベース技術実践入門」とタイトルにはありますが、この本は入門ではなく「おぼえがき」のようなものだと読んで感じました。データベースの<em>設計</em>を行う際の注意点や、こういう点は押さえておくべきということを広く確認できる構成になっていたからです。</p>

<p>例えば、インデックスの種類を挙げ、データ数が増えてきた際にどのようにインデックスが効いてくるか、逆に効かなくなってくるかをまとめてあったり、データベースが吐き出すログにはどのようなものがあり、障害時の復旧手順のなかでどのログがどのような役割をになっていたりするかをまとめてあったりします。</p>

<p>また、最近のストレージ動向にも目を向け、データベースのパフォーマンスを上げるためにはどうすればよいかを解説していたりもします。</p>

<p>本書はつまるところ、「<em>データベースを自分で構築し、（大規模なデータを扱う）サービスと絡めて運用する人向け</em>」の本だと思います。「Webエンジニアのための」と書いてありますが、全てのエンジニアではなく、昨今話題のスマートフォン向けソーシャルゲームや、大量ログを扱わなければならないようなサービスを運営する中小規模の開発会社の開発者向けです。</p>

<p>DBの設計や、エンタープライズシステム向けのデータベースを扱う際に読むような本ではないですが、サラッと読んで知識を蓄える感じで読むのにステキなまとめられかたをしていると思います。</p>

<p>ちなみに、本書で扱っているデータベースは <em>MySQL</em> になります。</p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>片方向/非同期レプリケーション</h3>


<p>片方向レプリケーションは、「マスタ」に更新した結果が「スレーブ」に「非同期」で伝搬するというタイプのレプリケーションである。マスタで実行した更新系 SQL 文が<em>バイナリログ</em>というログファイルに記録され、このログファイルの中身がスレーブ側で順次実行される。</p>

<p>スレーブでは「<em>バイナリログの受信</em>」と「<em>バイナリログの実行</em>」の2段階で行われる。「バイナリログの受信」は I/O スレッド、「バイナリログの実行」は SQL スレッドが実行する。</p>

<p>このレプリケーションでは、バイナリログの受信よりも、バイナリログの実行の部分で遅延が発生しやすくなる。これは、ネットワークよりもディスクがボトルネックになることが多いからである。</p>

<h4>障害の状況パターン</h4>




<ol><li>マスタで生成したバイナリログがスレーブで最後まで受信出来ていない</li>
<li>スレーブでバイナリログの実行が最後まで行われていない</li></ol>


<ol>
<li><p>の場合はマスタを復旧させ、最新のバイナリログをスレーブに更新しなければ、最新のバイナリログ分のデータロスになる。</p></li>
<li><p>の場合は、スレーブがマスタの代わりに処理を継続する（マスター昇格）することで障害対応が可能だが、<em>バイナリログを最後まで実行し終わったことを確認</em>してから処理しなければ、データ不整合が発生することになる。</p></li>
</ol>


<h3>片方向/準同期レプリケーション</h3>


<p>「バイナリログの受信」を同期処理するようにしたもの。障害パターンの1. の状況が限りなく発生しなくなるメリットがある。デメリットとしては、マスタ→スレーブの通信を同期するため、スレーブからのレスポンス分スループットが悪くなる。</p>

<h3>片方向/同期レプリケーション</h3>


<p>「バイナリログの実行」までを同期処理するようにしたもの。MySQL では実装されていない。</p>

<h3>双方向レプリケーション</h3>


<p>双方向レプリケーションは、マスタを複数用意しそれぞれのマスタを更新できるようにするもの。マルチコア CPU や、SSD などのハードウェアの性能をより引き出すことができる。</p>

<p>ただし、それぞれのマスタに対して同時に更新を行った際の分散排他制御の仕組みが不可欠で、DBMS によって実装方法はまちまち。</p>

<h3>障害からの復旧方法</h3>


<p>トランザクション対応のデータベースの多くは、REDO ログという更新対象列の変更情報を記録したファイルを使って一貫性を保っている。</p>

<p>MySQL は更新されたデータをすぐにディスクに書き込むのではなく、キャッシュ領域に保持しており定期的にディスクに書き込むという処理を行なっている。そのため、データベースがクラッシュするとキャッシュ領域がクリアされ、ディスクに書かれたデータが古い状態ということが起きる。</p>

<p>そこで、クラッシュから回復するときには、最初に REDO ログからディスクの状態を最新の状態に戻す（進める）必要がある。</p>

<h3>MySQL のレプリケーションはシングルスレッド</h3>


<p>MySQL のレプリケーションはシングルスレッドで行われる。そのため、マスタが並列で大量に処理をさばいたとしても、レプリケーション処理が詰まってしまうということが大規模サービスでは起きてしまう。</p>

<p>遅延の主な要因はディスク I/O が低速なことであるため、スレーブには SATA SSD などの高速なディスクを使うことでこの問題を解決するのが現実的。</p>

<p>最近では、PCI-Express インターフェースをもつ FusionIO社の ioDrive や Virident社のFlashmax などが使われている。</p>

<h3>運用の勘所</h3>


<p>CPU 使用率で監視すべき点が3つある。</p>

<ul><li>ディスクI/O（%iowait）</li>
<li>システム空間での使用率（%system）</li>
<li>ユーザ空間での使用率（%user）</li></ul>




<dl><dt>ディスクI/O（%iowait）</dt>
<dd><p><em>ディスクI/Oがボトルネック</em>になっている場合、この値が跳ね上がる。</p></dd>
<dt>システム空間での使用率（%system）</dt>
<dd><p>OS 内の処理で使用されている CPU 率。<em>スワップが発生したり、ネットワーク周りでトラブルがおきている場合</em>この値が跳ね上がることがある。</p></dd>
<dt>ユーザ空間での使用率（%user）</dt>
<dd><p>CPU を使うような処理が多いことを表す。DB サーバではあまり大きな値になることはないが、大きくなった場合はテーブルスキャンを連発しているなどの問題があることが多い。</p></dd></dl>




<h3>リストアとリカバリ</h3>


<p><strong>リストア（バックアップの結果を戻す）</strong>だけでは、障害直前の状態に復旧することはできない。バックアップ以降にも処理が行われており、その更新結果は<strong>バイナリログ</strong>に記録されている。</p>

<p>リストアしたあとに、バイナリログの中身を順番に当てていくことで、障害直前の状態に戻すことができる。</p>

<h3>NoSQL</h3>


<p>「SQL文のような複雑な言語を使わずにプログラミング言語のライブラリ関数を使って直接データアクセスするほうが高速になるのではないか？」このような背景から生まれたのが <strong>NoSQL</strong>。</p>

<p>NoSQL では、テーブル/ファイルを開っぱなしにして処理性能を高めるようにしている。</p>

<p>一般的な NoSQL では、<em>トランザクションをサポートしていない</em>。また、<em>スキーマレス</em>なため主に XML や JSON を格納して扱う。<em>インデックスは主キー</em>以外使えないと思ったほうがよい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RDBMS解剖学 よくわかるリレーショナルデータベースの仕組み]]></title>
    <link href="http://hamasyou.com/blog/2005/05/11/4798108642/"/>
    <updated>2005-05-11T22:34:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/05/11/4798108642</id>
    <content type="html"><![CDATA[<p>本書を読めばリレーショナルデータベース(RDBMS)がどのように動くのか、とてもよく理解できます。RDBMSがSQL文を解析して処理するまでの道のりや、トランザクション制御、ログ、リカバリと言った、RDBMSの裏側の動きがすっきりと整理できます。</p>

<p>「RDBMSの仕組みなんかデータベース管理者だけが知っていれば良い！」そんなことを言われるかもしれません。確かに、データベースの仕組みなんか知らなくても、プログラムは書けるし、設計もできます。しかし、<strong class="red">データベースの仕組みを知っているのと知らないのではプログラムの質も設計の質も変わってくる</strong>のです。</p>

<p>なぜなら、RDBMSの仕組みを理解したプログラマは、最適なSQL文を書くことが出来るようになります。また、RDBMSの仕組みを理解したSEは、どのようにデータベースを作成し、物理テーブルを配置すればアクセス効率が良くなるかを知っているからです。</p>

<p>RDBMSの仕組みを理解して、最適な構成でデータベースを構築した場合、<b>数十倍のパフォーマンスの差</b>が出てくるといいます。これだけの差が出るとなると、RDBMSの仕組みに関する知識は不要とは言えません。</p>

<p>本書は、DB Magazineで連載されていた記事をまとめたものです。なので、図や表が随所に盛り込まれ、文章だけでは理解しにくい言葉も理解しやすくなっています。データベースを利用するすべての人に、本書を<b>おすすめ</b>します。</p>

<!-- more -->




<h2>特徴</h2>


<p>本書で解説しているRDBMSの仕組みは、特定の製品に依存していません。どのRDBMS製品にも共通する機能や要件について説明しています。図や表を多用しているため、視覚的に理解できるのがポイントです。</p>

<p>データベースについての知識がほとんどない人でも分かるように配慮されています。動作原理や動きが図で説明されているため、言葉が分からない人でもイメージで理解できるようになっています。</p>

<p>内容的には難しい分野だと思います。データベースの仕組みなんて、専門家しか理解できないのではないかと思われるかも知れません。でも、本書は違います。とても簡単な言葉で説明していて、最後までつっかえることなく読むことが出来ます。</p>

<p>データベースが専門の人もそうでない人も、プログラマの人もSEの人も、管理職の人も営業の人も、皆に読んでいただきたい本です。面白いです、とっても。</p>

<h2>参考</h2>


<ul>
<li>SQL文を体にしみこませる練習帳</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122998/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>データベース全体について知識がつく本</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534029497/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>データモデリングが良く分かる</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"  class="g-tools_title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[まるごと図解 最新SQLがわかる]]></title>
    <link href="http://hamasyou.com/blog/2005/04/10/4774112755/"/>
    <updated>2005-04-10T11:31:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/04/10/4774112755</id>
    <content type="html"><![CDATA[<p>本書は初心者向けのSQL解説本です。SQLとは何か？データベースとは何か？と言うことをまったく知らない人が導入段階で読むレベルの内容です。</p>

<p>SQLはデータベース管理システム(DBMS)を扱うための言語で標準が定められています。もちろん、詳細部分では各DBMSに固有の関数などが加えられていたりしますが、本書ではDBMS固有の部分については省かれています。</p>

<p>SQL文でできることには非常にたくさんの数があります。文法を覚えるだけでも大変なのに、実行結果をイメージしてSQL文を見つけるのは、最初の段階では至難の業だと思います。本書は、基本的に見開きで一つの項目を解説しています。</p>

<p>左側のページではその項目の解説を、右側のページでは実行結果やデータ操作のイメージが図として載っています。SQL文のことだけでなくデータベースに関しての解説もあるので、本書を取っ掛かりにしてさらに詳しい書籍にチャレンジするのがいいと思います。</p>

<!-- more -->




<h2>特徴</h2>


<p>データベースに関する基本的な項目(データベースとは何か？データベースのモデルには何があるか？正規化とは？インデックスとは？ビューとは？など)が網羅されています。そして、SQLの基本的な文法と実行結果が解説される流れになっています。最後には、AccessというMicrosoftのDBMS製品を使った実際のサンプルも載っています。</p>

<p>非常に基本的な事項しか載っていないので、業務経験の在るエンジニアの方には物足りないと思います。本書がおすすめなのは、これからプロジェクトに配属になるような新入社員のプログラマやSEの人です。</p>

<p>図解シリーズは安くてわかりやすいので、非常に初心者向けです。ただし、知識を整理したい人なら、業務経験のあるエンジニアの方でも読んで損はないと思います。分かりやすいデータベースに関する書籍を探しているなら、本書はおすすめできます。</p>

<h2>参考</h2>


<ul>
<li>RDBMSの仕組みをやさしく詳しく理解できます。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798108642/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>SQL文を覚えるには手を動かすしかありません。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774122998/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>わかりやすくて理解しやすい、データベースを知るにはおすすめの一本</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534029497/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>データベースの設計を行うことになったら、本書は必読でしょう。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810566X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>偉大なる幸三先生による、データモデリングのバイブル</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[T字形ER データベース設計技法]]></title>
    <link href="http://hamasyou.com/blog/2005/01/12/488373109X/"/>
    <updated>2005-01-12T16:09:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/01/12/488373109X</id>
    <content type="html"><![CDATA[<p>見た目は確かに教科書っぽい感じがします。「データベース設計技法」とタイトルにあるので、論理設計もしくは物理設計に関する書籍かと思うかもしれません。しかし本書は、教科書でもないし、DB設計の技術書でもありませんでした。</p>

<p>本書は、「<b>ビジネスドメインの解析手法</b>」を学ぶものです。T字形ER手法という考え方を用いて、ビジネスの現場をモデル化する手法を学べます。ページ数も140ページ少々と少なく、見開きでひとつのタイトルを解説しているため、とてもわかりやすく理解しやすいです。</p>

<p>T字形ER手法では、テーブルを「リソース」と「イベント」という区別で扱います。概念の違いですので、物理設計には関係ありませんが、ビジネス解析(要求分析)の段階では、とても重要になってきます。</p>

<p><b>オブジェクト指向設計に通じるところもあり</b>、本書で説明している概念を理解すると、ビジネスドメインでのデータの見方というのがしっくり来ると思います。業務アプリケーション開発者は一通り読んでおくと、設計時や開発時に参考になると思います。</p>

<!-- more -->




<h2>解説</h2>


<p>T字形ER手法では、「<b>コード体系</b>」を非常に重要な概念として扱います。Identifier、Resource と Event の区別、コード体系、サブセット、みなしエンティティの 5つのキーワードを理解するだけで、ビジネスモデリングに非常に効果的に働くと思います。</p>

<p>見開き構成になっていて、左で文章による解説、右で図を使った解説を行っており、とても理解しやすくなっています。紙質など、教科書っぽいところもありますが、それほど硬い文章ではありません。多少難しい言葉や聴きなれない言葉もありますが、内容の理解は容易だと思います。</p>

<p>分析・設計を行う開発者は、一度読むことをお勧めする良書です。後半、哲学的な話も出てきますが、そこを除いても120%おつりがくると思います。かなりお勧めします。</p>

<h2>覚書き</h2>




<h3>T字形ER手法とは</h3>


<p>「T字形ER手法」とは、「ビジネス解析技法」であり、データ設計技法ではない。業務で使われている「<b>コード体系</b>」をグループ化しながらビジネスを逆解析する技法である。</p>

<p>T字形ER手法では、データの集合を形成する元となるものが「コード体系」ということになる。</p>

<p>参考： <a href="http://www.sdi-net.co.jp/logico-13.htm" rel="external nofollow">Ｔ字形ＥＲ手法の概念</a></p>

<h3>Identifier と Master-Key の違い</h3>


<p><b>Identifier</b> はデータ集合(エンティティ)を生成する判断基準となる。逆に、エンティティとは、Identifier を付与された、一つ一つの違いが認識できるものということになる。</p>

<p>{% blockquote 本書 %}
マスターキーとはプライマリー・キーと呼ばれる、データアクセス用のキーであり、ビジネスにおいてのコード体系を表していないため、Identifier とは別のものと考える。データベース上においては、プライマリーキーは重複は許されないものとして扱われるが、Identifier は重複することがある。(例：ある契約において、営業所毎に契約番号が1から振られる場合、契約番号がIdentifier であるが、データベース上においては、営業所コードと契約番号でマスターキーとなる。)</p>

<p>{% endblockquote %}</p>

<p><b class="red">Identifier はけっして複合キーでは表されない</b>。複合キーとして Identifier を表現する場合は、「結合ファイルまたは、ビュー」ということになる。</p>

<p>{% blockquote 本書 %}
<b>みなしエンティティ</b>というものがある。コード体系が存在しないが、エンティティとみなせるもののこと。　たとえば、従業員というエンティティの属性に「前会社名称」というものがあるとする。前会社名称というのは、前会社というエンティティの属性にするべきであるが、前会社コードのようなコード体系はない。こういう場合に、みなしエンティティとして、「従業員.前会社名称」のようなエンティティを導出する。</p>

<p>みなしエンティティは、エンティティの純度を高める上に、ゼロの多重度を利用することでヌル値を回避するサブセットとしても使える。</p>

<p>{% endblockquote %}</p>

<h3>エンティティ名の付け方</h3>


<p>T字形ER手法では「コード体系」を主眼においてエンティティを見つける。コード体系において「○○番号」や「○○コード」とよばれるものから「番号」、「コード」を取り除いた○○の部分がエンティティ名となる。(例：「受注番号」 -> 「受注」)</p>

<p>「番号」、「コード」を取り除いたあとに、「○○書」、「○○伝票」などという言葉になった場合、「書」、「伝票」を取り除く。(例：「請求書番号」 -> 「請求書」 -> 「請求」)</p>

<p><b class="red">コード体系に表現されていないコードを勝手に使ってはいけない。</b></p>

<h3>Resource (リソース) と Event (イベント) の違い</h3>


<p>リソースは、事やモノに区別されるもの。イベントは、事象や履歴、事実などのこと。</p>

<p>Event であるかは、タイムスタンプを設定できるかどうかによる。<b>タイムスタンプが設定できるのであれば、それは履歴や事実を表すことができる</b>。</p>

<p>Resource は非常に重要な概念である。Resource と Event を比べて、Resourceの数のが多ければ、Resourceを元に Event を構築することが可能になる。</p>

<p>Resource と Event の関係は3つのパターンになる。</p>

<ol><li><b>Resource - Resource</b><br />　Resource - Resource の関係は、「対照表(関係テーブル)」を用いて表現する。</li>
<li><b>Resource - Event</b><br />　Event のほうに、Resource の参照キーを定義する。</li>
<li><b>Event - Event</b><br />　Event の並び順は、ビジネス上の時系列にそって並べる。このとき、「1 : 1」、「1 : 多」 であれば、時系列の遅い Event に参照キーを定義する(後ろのEvent)。「多 : 1」、「多 : 多」 の場合は、「対応表」を用いる(対応表と対照表は同じようなもの)。</li></ol>


<p><b>対照表(関連テーブル)は実質的には Event として扱われる</b>。例えば、顧客 (Resource) と 銀行 (Resource) と 口座 (Resource) の 対照表(関連テーブル)は <b>口座開設</b>という Event と取れる。</p>

<p>{% blockquote 本書 %}</p>

<h4>方式の対照表</h4>


<p>T字形ER手法では、3つ以上のエンティティを一度に接続する対照表(関連テーブル)は認めていない。上記の例の場合だと、顧客と銀行と口座を一度に接続することは認められていない。これは、ビジネス解析が難しくなるという理由からである。T字形ER手法では、2つのエンティティのみを接続する <b>Binary 方式</b>だけを認めている。</p>

<p>では、上記の場合どうするのかと言うと、顧客と銀行への対照表(顧客.銀行.対照表)を導出したあとで、顧客.銀行.対照表と口座との対照表を導出する。対照表とエンティティを接続した対照表を導出することは、T字形ER手法では推奨される手法の一つなのだ。</p>

<p>{% endblockquote %}</p>

<h3>Attribute (属性) に ヌル値 (null値) は許可しない</h3>


<p>例えば、契約解約日という属性があるとする。この属性は、契約が行われているときには ヌル値 を設定する(解約日が存在しないという意味)。しかし、<strong>Attribute とは本来、エンティティが存在するとき、原則としてそこに存在しなければならない</strong>(つまり、ヌル値を許さない)。</p>

<p>このような、ある状態の時には ヌル値 として処理したい場合、<b>サブセット</b>という概念をつかう。サブセットとは、簡単に言うと継承関係のようなもの。</p>

<p><b>繰返項目</b>とは、Identifier に対して複数の関係にある属性のこと。これらの属性は、ヌル値をセットする可能性があるため、別のテーブルとして分けて管理する。</p>

<p>同一の Identifier を時系列にそって上書きして流用するような<b>複写伝票</b>は、サブセットを使って表す。例えば、ある受注の受注番号を、受注、出荷、請求のそれぞれの Event で使う場合である。このようなサブセットの使い方は、「状態遷移」をあらわしている。</p>

<p>「<b>相違のサブセット</b>」という技法を使って、ヌル値を回避することができる。</p>

<h3>分類としてのサブセット</h3>


<p>サブセットを使う場合、下記の前提事項が存在する。</p>

<ul><li>サブセット(子)とスーパーセット(親)の間には「被包含・包含」の関係</li>
<li>サブセット同士は「排他」の関係</li></ul>


<p>サブセット間に交わり(排他でない)が起こるとすると、それはサブセットではないことになる。例えば、ある取引先が、出荷先でも請求先でもあるような場合、出荷先と請求先で取引先区分コードが同じになる。</p>

<p><img src="http://hamasyou.com/images/ttypedatabase/subset_intersect.gif" alt="サブセットの交わり" /></p>

<p>オブジェクト図で表すと以下のような感じ。同一の取引先インスタンス(取引先A)を共有している点がいけない。</p>

<p><img src="http://hamasyou.com/images/ttypedatabase/subset_object.gif" alt="サブセットの交わり(オブジェクト図)" /></p>

<p>サブセット間に交わりが起こった場合は、サブセットとして扱うのは適切ではないので何か処理を施す必要がある。今回は、「取引先区分コード」は「<b>分類 (Resource)</b>」として機能しているので、別のエンティティとして切り出す。</p>

<p><img src="http://hamasyou.com/images/ttypedatabase/subset_resource.gif" alt="別のエンティティとしてあつかう" /></p>

<p><img src="http://hamasyou.com/images/ttypedatabase/subset_object2.gif" alt="別のエンティティとしてあつかう(オブジェクト図)" /></p>

<p><i>※ <b>ここでは、UMLを使ってオブジェクト設計の図になっているが、実際はデータベース設計の話をしている</b>。オブジェクト指向であれば、取引先Aのインスタンスは同一のモノと判断すると思われる。が、ここではデータベースのエンティティレベルの話をしているので、別のインスタンスとして表してある。</i></p>

<p><b class="red">区分コード(種別コード)として使われるものは、サブセットとして表現する</b>。</p>

<h2>参考</h2>


<ul>
<li><p>著者のWebサイト。本書を保管する内容も多数。
<img src="http://hamasyou.com/images/img-link.gif"   align="middle" /><a href="http://www.sdi-net.co.jp/logico-index.htm" rel="external nofollow">SDI</a></p></li>
<li><p>テーブル設計の基礎力がつく本です。</p></li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883731340/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>渡辺式とよばれる、データモデリング手法を解説した本。こちらもお勧め。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>わかりやすさで選ぶなら、本書もはずせない逸品です。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>モデリングのパターンを解説した本。おすすめ。</li>
</ul>


<div class="rakuten"><table width=400 border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894715775/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
