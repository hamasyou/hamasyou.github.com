<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: アンチパターン | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/antipatan/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-03-10T19:05:52+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[J2EEアンチパターン]]></title>
    <link href="http://hamasyou.com/blog/2005/06/25/4822281981/"/>
    <updated>2005-06-25T20:24:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/06/25/4822281981</id>
    <content type="html"><![CDATA[<p>本書は、J2EE技術を使ったアプリケーション作成でおちいりやすい罠について説明されています。おちいりやすい罠とは例えば、ユースケースの一つ一つについてサービスクラスを作ってしまうようなものを言っています(Tiny Serviceアンチパターン)。</p>

<p>デザインパターンとは違った面白さがここにはあります。私が感じた面白さの一つは、「自分もこんな間違えやってるなー」といった敗北感や、「前にやった設計、このアンチパターンを回避してたぜ」みたいな安心感などを読みながら感じられるところです。</p>

<p>J2EEというと範囲がとても広いと思ってしまいます。確かに、ページ数は500ページを超える分厚い部類に入ると思います。ただ、本書のようなある種のパターン本は最初から最後まで全部読む必要はなく、必要になったとき(例えば設計やコードレビューのとき)にパラパラめくるだけでいいと思います。</p>

<p>サーブレット、JSP、EJB、分散、永続化、サービス層、そしてWebサービス。粒度は違えど、すべてJ2EEに関係のあるものばかりです。リファレンス感覚で、手元においておくのはどうですか？値段だけで決めるとしても、決して高くないと思いますよ。</p>

<!-- more -->




<h2>特徴</h2>




<h3>リファレンスとしてもっておくのがベスト</h3>


<p>やっぱり、リファレンス用途としてもっておくのがいいと思います。本書の構成は、</p>

<ol><li>パターン名</li><li>別名</li><li>頻出規模(例：アーキテクチャ、アプリケーション、システム)</li><li>リファクタリング(改善するときに使うリファクタリングのこと)</li><li>基本原因</li><li>挿話証拠(この言葉を聞いたら要注意)</li></ol>


<p>でアンチパターンを定義し、「<strong>背景</strong>」、「<strong>一般形式</strong>」、「<strong>症状と結果</strong>」、「<strong>典型的な原因</strong>」、「<strong>既知の例外</strong>」、「<strong>リファクタリング</strong>」、「<strong>変種</strong>」、「<strong>例</strong>」、「<strong>関連するソリューション</strong>」の9の項目について書かれています。</p>

<p>面白いのは、「既知の例外」という項目があるところです。基本的にはアンチパターンなんだけどこの場合は仕方ない、もしくはこのままのがよいということが書かれています。結構勉強になります。</p>

<h3>反面教師</h3>


<p>アンチパターンは、「反面教師」です。こういうふうにしてはいけない、ということがまとめられています。本書ではさらに、このアンチパターンを良くするにはどうすればよいかと言うことまで言及しています。ここが一つの本書のポイントだと思います。</p>

<p>厚い本なので、手に取るのを躊躇するかもしれませんが、手元においておいて損はないのではないでしょうか。結構楽しめると思います。</p>

<h2>参考</h2>


<ul>
<li>ソフトウェア開発のアンチパターン</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797321385/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>EJBのアンチパターン</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281841/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>サーブレット、JSPのアンチパターン</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281574/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>Javaプログラミングのアンチパターン</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774114901/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java開発者のためのアンチデザインパターン]]></title>
    <link href="http://hamasyou.com/blog/2004/06/05/4774114901/"/>
    <updated>2004-06-05T03:54:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/06/05/4774114901</id>
    <content type="html"><![CDATA[<p>本書は、Java開発者のためのデザインパターン入門である。アンチデザインパターンと銘打ってはいるが、アンチというよりもむしろデザインパターンを使わなかったときのはまりどころを、デザインパターンによって改善させる手段を解説したものである。</p>

<!-- more -->


<p>本書では、GoFの23パターンを、それぞれ解説している。デザインパターンを使わせるための例を、アンチパターンとして紹介し、その改善方法としてデザインパターンを紹介する方法がとられている。</p>

<h2>特徴</h2>


<p>解説に使われる画像が、アメリカンチックで好き嫌いが分かれるところだと思う。色使いも黒文字に、緑色のラベルなどが使われていて、新しい雰囲気をかもしだしている。</p>

<p>デザインパターンを使うタイミングや、注意点なども書かれていて中級者レベルの人にとっては、「AHA(アー)」と叫ぶ場面もあるかもしれないが、初めてのデザインパターンとして本書を選んだ人には、なんのこっちゃだろう。(^^;</p>

<h2>おすすめポイント</h2>


<p>本書でおすすめの点は、デザインパターンの解説よりもむしろ、アンチパターンとして解説されている、デザインパターンを使う背景の部分です。はっきり言って、デザインパターンの解説は、他の本を参考にしたほうがわかりやすいです。ソースコードも中途半端で、わかりやすいとは言いがたかったです。(+o+;)</p>

<p>ですが、所々にあるオブジェクト指向の考え方の解説は、デザインパターンの解説よりは役立ちます。例えば、オブジェクト指向では、「コピー&amp;ペーストは使わない」などの言葉は、完全な初心者には、心に響くことでしょう。</p>

<h2>まとめ</h2>


<p>結局、本書の対象読者は誰かということですが、完全な初心者でデザインパターンの概要を眺めるだけが目的の人か、中級者以上で、デザインパターンの知識があり、適用の背景を学びたい人が対象かなと思います。それ以外の人には、ちょっと合わなさそうです。</p>

<ul>
<li>デザインパターンのおすすめはこちら</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797327030/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>GoF の本家デザインパターン集</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797311126/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>現場で使える即知識。いかがですか？</li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798106976/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サーバーサイドJavaアンチパターン]]></title>
    <link href="http://hamasyou.com/blog/2004/05/27/4822281574/"/>
    <updated>2004-05-27T00:04:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/05/27/4822281574</id>
    <content type="html"><![CDATA[<p>「反面教師」という言葉を聞いたことがあると思います。悪い見本を見せて、良い行いをしてもらおうというものです。本書はサーバーサイドJavaプログラミングにおける、「反面教師」です。</p>

<p>この本の対象読者はJavaプログラミング中級者からアーキテクト担当、システム設計者などです。Javaプログラミングを始めて間もない人や、サーバーサイドプログラミングを始めて行う人には読みこなすのは困難です。</p>

<!-- more -->


<p>アンチパターンの名のとおり、悪いパターンの例をカタログにまとめ、それについてどの点が悪いのかを説明し、アンチパターンにおちいる原因とアンチパターンを適用した場合の結果について載せてあります。</p>

<p>当然、改善例も載っているので、自分の設計したシステムやアーキテクチャがアンチパターンにはまっている場合の手助けになります。</p>

<p>本書で扱っているアンチパターンのカテゴリは、サーブレット、JSP、キャッシュ、メモリー、接続リソース、Bean(EJB)、コーディング習慣、スケーラビリティです。それぞれについて、悪い点、パターンの原因、結果、解決策、リファクタリングの5つが載っています。</p>

<p>本書から、ひとつ例を簡単に説明します。</p>

<h3>アンチパターン：Monolithic JSPs</h3>


<p>モデルとビューの分離(MVC)がないプログラムですべてのコードをJSPに書いている。メソッドやクラスの定義、コントローラ、JSPを分けてソースコードを書くよりも、JSPにすべて書いたほうが早く簡単にできる。しかし、これでは保守性が著しく下がってしまう。</p>

<h4>解決策：リファクタリングして、MVCにする</h4>




<ol>
  <li>コントローラオブジェクトを作る。</li>
  <li>動的コンテンツを作る重要な領域を特定し、コマンドにする。</li>
  <li>JSPでは、コマンドごとにBeanを作る。</li>
  <li>モデルの更新や初期化を行うコアロジックを特定し、クラス化する。</li>
  <li>コントローラでコマンドを初期化し、コマンドを実行する。</li>
  <li>コマンドからのレスポンスをJSPに転送し、画面を表示する。</li>
</ol>


<p>上記は、非常に簡単に要約しました。実際はそれぞれのカテゴリごとに3〜4のアンチパターンを紹介し、補足説明、アンチパターンの背景などを織り交ぜながら説明しています。</p>

<p>本書の特徴は、アンチパターンをカテゴリにわけ、必要なときに参照しやすくした点にあります。納得できる部分が多く、実際の開発においても気をつける点がよくわかりました。本文もわかりやすく、図やサンプルコードが豊富に載っているので明快です。サーバーサイドプログラマーにおすすめです。</p>

<ul>
<li>デザインパターンはアンチパターンの正常版です。こちらの本がおすすめです。</li>
</ul>


<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797316462/sorehabooks-22" rel="external nofollow">Java言語で学ぶデザインパターン入門</a></p>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797311126/sorehabooks-22" rel="external nofollow">オブジェクト指向における再利用のためのデザインパターン</a></p>

<ul>
<li>MVC(Model-View-Controller)アーキテクチャに興味がある人はこちら。</li>
</ul>


<p><a href="http://www.hyuki.com/yukiwiki/wiki.cgi?MVC" rel="external nofollow">MVCとは&hellip;</a></p>

<ul>
<li>関連商品を買いませんか?</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>EJB アンチパターンに関してはこちら</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281841/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>J2EE アンチパターンに関してはこちら</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822281981/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
