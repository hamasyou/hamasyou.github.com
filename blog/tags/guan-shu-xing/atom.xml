<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 関数型 | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/guan-shu-xing/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-21T23:42:34+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScriptで学ぶ関数型プログラミング]]></title>
    <link href="http://hamasyou.com/blog/2014/02/21/functional-javascript/"/>
    <updated>2014-02-21T19:39:56+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/21/functional-javascript</id>
    <content type="html"><![CDATA[<p><blockquote><p>本書はJavaScriptを使って関数型プログラミングを学ぶ書籍です。関数型言語としてJavaScriptを理解し、使用することにより、コードがより洗練され、美しく、そして読みやすいものになることを目的としています。JavaScriptビルトインのデータ型を上手に利用するための基本知識やJavaScriptにおける関数の持つ特性など、関数型プログラミングの技術とその考え方について解説します。また実際のJavaScriptコーディングに関数型プログラミングのエッセンスを加えるポイントをサンプルを使って丁寧に説明します。関数型プログラミングに精通した著者が書き下ろした本書は、テクニックを増やし、コーディングのイマジネーションを広げたいエンジニア必携の一冊です。</p><footer><strong>内容紹介</strong></footer></blockquote></p>

<p>JavaScript は純粋な関数型プログラミング言語ではありません。が、<strong>関数型言語として JavaScript を理解し使用することでコードがより洗練され、読みやすいものになる</strong> はずという筆者の考えがこの本には現れています。</p>

<p>関数型プログラミングは JavaScript においては一つのスタイルにしかすぎず、必要な場面で適切に使うというアプローチをとることで、よりよく JavaScript を使えるようになります。</p>

<!-- more -->


<h2>おぼえがき</h2>

<h3>関数型プログラミングとは</h3>

<p><blockquote><p>関数型プログラミングとは、値を抽象の単位に変換する関数を使用して行うプログラミングであり、それらを使ってソフトウェアシステムを構築することである。</p></blockquote></p>

<p>オブジェクト指向では、問題領域をオブジェクトという単位に分解して対処していきますが、関数型プログラミングでは、問題を <strong>関数</strong> のパーツに分解します。</p>

<p>オブジェクト指向のアプローチは問題を「<strong>名詞</strong>」に分解して行う傾向があるのに対して、関数型プログラミングでは、問題を「<strong>動詞</strong>」に分解する傾向があります。</p>

<p>関数を通して、与えられた値を「<strong>変換</strong>」することができます。</p>

<pre><code class="plain-raw">markdown → toHTML → postProcess → modifyDOM
         │        │             │
      テキスト   HTML       編集されたHTML
</code></pre>

<h3>高階関数</h3>

<p><strong>高階関数</strong> とは、関数を引数にとり新しい関数を生成して返す関数のことです。</p>

<p>例えば、JavaScript の Array には <code>sort</code> 関数があります。<code>sort</code> は引数に <code>compareFunction</code> を取ります。値の大小を比較する関数を <code>lessOrEqual</code>、この関数を <code>compareFunction</code> の仕様に変換する関数を <code>compare</code> とします。</p>

<pre><code class="javascript">function lessOrEqual(x, y) {
  return x &lt;= y;
}

function compare(func) {
  return function(x, y) {
    if (func(x, y)) {
      return -1;
    } else if (func(y, x)) {
      return 1;
    } else {
      return 0;
    }
  };
}

[100, 1, 0, 10, -1, -2, -1].sort(compare(lessOrEqual));
// =&gt; [-2, -1, -1, 0, 1, 10, 100]
</code></pre>

<p><code>compare</code> 関数は大小比較を行う関数を引数にとり、<code>compareFunction</code> の仕様に則った関数を生成して返す高階関数になります。</p>

<h3>JavaScript における関数型プログラミング</h3>

<ul>
<li>関数による抽象の定義（<code>existy</code> や <code>truthy</code>）</li>
<li>関数を他の関数の引数に渡すことによる新たな動作の実現</li>
</ul>


<pre><code class="javascript">function existy(x) { return x != null; }
function truthy(x) { return (x !== false) &amp;&amp; existy(x); }

[null, undefined, 1, 2, false].map(existy);
// =&gt; [false, false, true, true, true]
[null, undefined, 1, 2, false].map(truthy);
// =&gt; [false, false, true, true, false]
</code></pre>

<p>これこそが、<strong>関数型プログラミング</strong> です。関数型プログラミングは強力な <em>データ抽象</em> とともに実装されて役に立つものです。</p>

<h3>命令型プログラミングと関数型プログラミングの違いの例</h3>

<p><em>99本のビール</em> の歌の歌詞を構築するプログラムを命令型プログラミングと関数型プログラミングで書いてみた例です。</p>

<pre><code class="javascript 命令型プログラミング">var lyrics = [];

for (var bottles = 99; bottles &gt; 0; bottles--) {
  lyrics.push(bottles + '本のビールが残ってる');
  lyrics.push(bottles + '本のビール');
  lyrics.push('ひとつ取って、隣に回せ');
  if (bottles === 1) {
    lyrics.push('もうビールは残ってない');
  }
}
</code></pre>

<p>関数型プログラミングのアプローチで書くとこうなります。</p>

<pre><code class="javascript 関数型プログラミング">// var _ = require('underscore');
function lyricsSegment(n) {
  return _.chain([])
    .push(n + '本のビールが残ってる')
    .push(n + '本のビール')
    .push('ひとつ取って、隣に回せ')
    .tap(function(lyrics) {
        if (n &lt; 1) {
          lyrics.push('もうビールは残ってない');
        }
    })
    .value();
}

function song(start, end, lyricGen) {
  return _.reduce(_.range(start, end, -1),
    function(acc, n) {
      return acc.concat(lyricGen(n));
    }, []);
}

song(99, 0, lyricSegment);
</code></pre>

<p><em>命令型プログラミングは一度きりの実装となり、再利用が難しいものになります。</em></p>

<h3>コレクション中心プログラミング</h3>

<p>関数型プログラミングは、コレクションに入った多数のアイテムに同じ操作を適用するようなタスクを行う際にとても便利です。</p>

<p>一般的な関数型プログラミングによって主張されるコレクション中心の考え方のポイントは、その処理を行うために一貫性のある語彙を確立し、包括的に揃えた関数を再利用出来るようにすることです。</p>

<p><blockquote><p>10種類のデータ構造上で10の関数を動かすよりも、ひとつのデータ構造上で100の関数を動かすほうがよい。</p><footer><strong>Alan Perlis</strong></footer></blockquote></p>

<p>関数型プログラミングでは、<em>それぞれの関数がすこしずつデータを変換し、最後の解に至る</em> ようにします。</p>

<h3>値ではなく、関数を使え</h3>

<p>ある値を何度か繰り返す関数はよい関数ですが、ある計算を何度か繰り返す関数のほうがよりよい関数です。</p>

<pre><code class="javascript よい関数">function repeat(times, VALUE) {
  return _.map(_.range(times), function() { return VALUE; });
}

repeat(4, 'Major');
// =&gt; ["Major", "Major", "Major", "Major"]
</code></pre>

<pre><code class="javascript よりよい関数">function repeatedly(times, func) {
  return _.map(_.range(times), func);
}

repeatedly(4, function() { return 'Major'; });
// =&gt; ["Major", "Major", "Major", "Major"]
repeatedly(3, function() { return Math.floor((Math.random() * 10) + 1); });
// =&gt; [1, 3, 8]
</code></pre>

<p>関数型スタイルのプログラミングでは、<em>実行の主体となるオブジェクトを引数に取る関数が好まれます</em>。</p>

<h2>メモ</h2>

<p>本書の中に出てきた、関数とかのメモ。</p>

<h3>predicate</h3>

<p>常に真偽値（<code>true</code> or <code>false</code>）を返す関数を <strong>predicate</strong> と呼びます。</p>

<pre><code class="javascript">function lessOrEqual(x, y) {
  return x &lt;= y;
}
</code></pre>

<h3>existy と truthy</h3>

<p><code>existy</code> は与えられた値が存在するかどうかを返す関数です。<code>truthy</code> は与えられた値が <code>true</code> とみなされるかどうかを返す関数です。</p>

<pre><code class="javascript">function existy(x) {
  return x != null;
}

function truthy(x) {
  return (x !== false) &amp;&amp; existy(x);
}
</code></pre>

<p><code>truthy</code> は0を <code>true</code> と判定します。これは JavaScript の標準の動作とは違いますが、0を <code>false</code> と同一とみなすのは C 言語の遺物であると筆者は考えているようです。</p>

<h3>JavaScript 関数の設計指針</h3>

<p>JavaScript ではある条件が <code>true</code> の場合のみ処理を行い、それ以外の場合には <code>undefined</code> か <code>null</code> を返す動作が使いやすい場合が多い。</p>

<h3>メタプログラミングとは</h3>

<p><blockquote><p>プログラミングは何かを行うためにコードを書くものであるが、メタプログラミングは何かを解釈する方法を変更するためにコードを書くものである。</p></blockquote></p>

<h3>第一級関数</h3>

<p>第一級関数は他のデータ型と同じように、扱うことができる関数のことです。</p>

<ul>
<li>変数に格納できる</li>
<li>必要に応じて生成できる</li>
<li>他の関数の引数として渡すことができる</li>
<li>関数の戻り値として返すことができる</li>
</ul>


<h3>コレクション中の <code>null</code> に対する防御用の関数 <code>fnull</code></h3>

<p><code>fnull</code> は関数と可変長引数をとる関数です。与えられた関数の実行を行う際に <code>undefined</code> か <code>null</code> の値の場合にはデフォルト値を使うようにして関数を呼び出します。</p>

<pre><code class="javascript fnull">function fnull(func /* , 可変長のデフォルト引数 */) {
  var defaults = _.rest(arguments);
  return function( /* args */ ) {
    var args = _.map(arguments, function(e, i) { return existy(e) ? e : defaults[i]; });
    return func.apply(null, args);
  };
}

var safeMulti = fnull(function(total, n) { return total * n; }, 1, 1);
_.reduce([1, 2, 3, null, 5], safeMulti);
// =&gt; 30
</code></pre>

<h2>感想</h2>

<p>JavaScript の関数の基本的なところから説明をはじめて、<strong>関数型プログラミング</strong>、<strong>クロージャ</strong>、<strong>高階関数</strong>、<strong>カリー化</strong>、<strong>再帰</strong>、<strong>フィルタ</strong>、<strong>パイプライン</strong>等の関数の設計方法がふんだんに解説されています。</p>

<p>説明がとても丁寧で分かりやすく、関数型プログラミングのことを知らない人でも理解しやすいと思います。</p>

<p>JavaScript は Java に次いで最も多く利用されている言語ですので、JavaScript をよりよく使うために本書を活用してみてはいかがでしょうか。おすすめです。</p>
]]></content>
  </entry>
  
</feed>
