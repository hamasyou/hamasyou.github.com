<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: spec | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/spec/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2017-09-03T15:18:24+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RailsでつくるRESTful APIのrequest specを書く]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/rails-request-rspec/"/>
    <updated>2014-02-17T14:09:38+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/rails-request-rspec</id>
    <content type="html"><![CDATA[<p>Rails 環境で RESTful API を提供する場面があると思います。API もコントローラで提供するので、コントローラのテストで記述してもいいのですが、RESTful API であれば、<strong>request spec</strong> を使うほうがよさそうなので request spec を書くメモです。</p>

<ul>
<li>Rails 4.0.2</li>
<li>rspec 2.14.1</li>
</ul>


<!-- more -->


<h2>テスト用のプロジェクトを整える</h2>

<p>まずは、チュートリアル用のプロジェクトを作成します。</p>

<p>{% terminal %}
$ rails new specbox &ndash;skip-bundle
$ cd specbox
{% endterminal %}</p>

<p><code>Gemfile</code> を開いて次の gem を追記します。</p>

<pre><code class="ruby Gemfile">group :development, :test do
  gem 'rspec-rails'
  gem 'guard-rspec'
  gem 'factory_girl_rails'
  gem 'spring'
  gem 'spring-commands-rspec'
end
</code></pre>

<p>rspec と scaffold の設定を行います。</p>

<p>{% terminal %}
$ bundle install &ndash;path vendor/bundle
$ bundle exec rails g rspec:install
$ bundle exec guard init rspec
$ bundle exec rails g model Book title:string author:string price:integer
$ bundle exec rails g scaffold_controller Books
$ bundle exec rake db:migrate
$ bundle exec rake db:test:prepare
{% endterminal %}</p>

<p><code>config/routes.rb</code> にルーティングを追加します。</p>

<pre><code class="ruby config/routes.rb">Specbox::Application.routes.draw do
  ...
  resources :books
  ...
end
</code></pre>

<p>テストを実行します。</p>

<p>{% terminal %}
$ bundle exec guard
15:12:01 - INFO - Run all
15:12:01 - INFO - Running all specs
..**&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..</p>

<p>Pending:
  Book add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/models/book_spec.rb
    # No reason given
    # ./spec/models/book_spec.rb:4
  BooksHelper add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/helpers/books_helper_spec.rb
    # No reason given
    # ./spec/helpers/books_helper_spec.rb:14</p>

<p>Finished in 0.18066 seconds
30 examples, 0 failures, 2 pending</p>

<p>Randomized with seed 14063
{% endterminal %}</p>

<p>これで rspec の設定ができました。それでは <em>request spec</em> を書いていきます。</p>

<h2>request spec を書く</h2>

<p><em>request spec</em> は他の rspec のテストとほとんど変わりありません。テストは <code>spec/requests</code> フォルダの下に作成していきます。</p>

<p><code>scaffold_controller</code> でコントローラを作成したので、すでに <code>spec/requests/books_spec.rb</code> があるはずです。テストコードを見てみます。</p>

<pre><code class="ruby spec/requests/books_spec.rb">require 'spec_helper'

describe "Books" do
  describe "GET /books" do
    it "works! (now write some real specs)" do
      # Run the generator again with the --webrat flag if you want to use webrat methods/matchers
      get books_path
      response.status.should be(200)
    end
  end
end
</code></pre>

<p>request spec もコントローラのテストと同じように、<code>get</code>、<code>post</code>、といったメソッドを使ってテストを行います。<code>books_spec.rb</code> を次のように書き換えてみます。</p>

<pre><code class="ruby spec/requests/books_spec.rb">require 'spec_helper'

describe 'Books' do
  describe 'GET /books' do

    it '登録されている本が返されること' do
      book = FactoryGirl.create(:book)
      get '/books', format: 'json'
      expect(response).to be_success
      expect(json).to be_a_kind_of(Array)
      expect(json[0]['id']).to eq book.id
    end
  end
end
</code></pre>

<p>request spec はこういう感じで、<strong>実際に呼び出す URL を記述する</strong> のと、<strong>json の中身をチェックする</strong> のが大事だと思っています。</p>

<p>コントローラのテストではビューの中身までチェックしませんし、ビューのテストとコントローラのテストを2つ書くのはテストを把握しづらいので、request spec のテストのように一箇所で同時にテストするのが効果的だと思います。</p>

<p>API はインターフェース（<em>入力パラメータ</em> と <em>出力形式</em> ）が大事なのでここをきっちり押さえておくテストを書く必要があります。</p>

<p>で、テストケースを変えると当然テストが失敗するので、テストが通るようにヘルパを書き換えます。</p>

<h3>request_helpers.rb を作成する</h3>

<p>request spec を書くときに便利なメソッドをいくつか用意しておきます。</p>

<p>RESTful API は出力を json で返すものが多いと思うので、json を扱いやすくするヘルパーを用意します。</p>

<p>また、 <code>AuthenticationHelper</code> は認証が必要な API を呼び出すときの便利メソッドとして記述してありますが、不要であれば削除、仕様が違うようであれば書きなおしてつかいます。</p>

<p>次のファイルを <code>spec/support/request_helpers.rb</code> として作成します。</p>

<pre><code class="ruby spec/support/request_helpers.rb">module Requests
  module JsonHelpers
    def json
      @json ||= JSON.parse(response.body)
    end
  end

  module AuthenticationHelper
    %w(get post put delete).each do |method_name|
      define_method("auth_#{method_name}") do |uri, auth_user, params = {}, env = {}, &amp;block|
        __send__(method_name, uri, params, env.reverse_merge(HTTP_AUTHORIZATION: "token #{auth_user.access_token}"), &amp;block)
      end
    end
  end
end
</code></pre>

<p>このヘルパを <code>spec/spec_helper.rb</code> に追加します。</p>

<pre><code class="ruby spec/spec_helper.rb">RSpec.configure do |config|
  ...
  config.include Requests::JsonHelpers, type: :request
  config.include Requests::AuthenticationHelper, type: :request
  ...
end
</code></pre>

<p>これでテストが通るようになりました。</p>

<h2>まとめ</h2>

<p>Rails で RESTful な API を作ることはよくあると思いますが、今までは API のテストもコントローラのテストで行っていました。</p>

<p>でも、request spec を使ったほうが <strong>呼び出しのURL</strong>、<strong>必要なパラメータ</strong>、<strong>出力形式</strong> を素直にテストとして書けるので、API のテストは request spec を使うようにするといいかなと思います。</p>
]]></content>
  </entry>
  
</feed>
