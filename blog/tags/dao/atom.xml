<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: DAO | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/dao/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2015-01-01T00:22:39+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DAOとO/Rマッピングとビジネスロジックと]]></title>
    <link href="http://hamasyou.com/blog/2004/10/28/daoor/"/>
    <updated>2004-10-28T15:44:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/10/28/daoor</id>
    <content type="html"><![CDATA[<p>
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4764902834/sorehabooks-22" rel="external nofollow"></a>
</p>


<p>最近、<a href="#ドメインモデリング" rel="external nofollow">ビジネスロジック</a>がふんだんに盛り込まれた業務システムというのはあまりありません。</p>

<p>「<strong>データの出し入れ</strong>」が基本ということは、データの格納庫が必要になってくるわけで、それがデータベースになります。最近ではオブジェクト指向データベースも使われ始めましたが、まだまだリレーショナルデータベースの方がよく使われています。</p>

<p>オブジェクト指向で開発していると、ほとんど必ず問題となるのが、<b>リレーショナルデータベースとオブジェクト指向のインピーダンスミスマッチ</b>です。データベースは「データ」を扱い、オブジェクト指向は「振る舞い」を扱います。つまり、「振る舞い」をいかにして「データ」に落とすかというのが、問題となるわけです。</p>

<p>最近では、「DAO(Data Access Object」パターンや「O/Rマッピング」というものを使い、オブジェクト指向とリレーショナルデータベースの差を埋める努力がされています。DAOとO/Rマッピングをまとめつつ、業務アプリケーション開発で思ったことを書いていこうと思います。かなり主観的な意見になります。</p>

<dl>
<dt id="ドメインモデリング">ドメインモデリング</dt>
<dd>
<p>簡単に言うと、システム要件から問題領域(医療システムであれば医学、とか)の用語を抜きだすこと。さらには、抜き出した用語の必要性や重要性、独立性などを考慮してオブジェクト間の関連をモデル化すること。</p>
</dd>
<dt id="ビジネスロジック">ビジネスロジック</dt>
<dd>
<p>ワークフローやUMLのアクティビティー図で分岐処理を行うこと。</p>
</dd>
</dl>




<!-- more -->




<h3>ドメインクラスと永続化機構へのアクセスは分けるべし！</h3>


<p>ドメインクラスと永続化機構(データベースやファイルシステム)へのアクセスは層を持って分けるべきです。理由の一つは、「<strong>単一責任の原則 (The Single Responsibility Principle: SRP)</strong>」に反してしまうからです。また、ドメインクラスに永続化処理の責務を負わせてしまうと、処理が複雑かつアクセス手段に依存した形になってしまうので、保守がしにくくなります。</p>

<p>保守がしにくいとは、テストがしにくいと言い換えてもいいと思います。永続化機構に依存したコードは、テスト環境が用意しにくく、環境に依存してしまうことが多いので、非常にテストがしづらくなります。単体レベルでテストが行えないクラスは、安心して使えません。</p>

<p><img src="http://hamasyou.com/images/engineer_soul/dao_interface.gif" alt="データアクセスのイメージ" /></p>

<p>業務アプリケーションで永続化機構(特にデータベース)を使わないことはほぼありえないので、<b class="red">データアクセス部分は、一つ層を増やしたほうがベター</b>です。データアクセスパターンには主に「DAO (Data Access Object)パターン」と「O/Rマッピング」という方法がとられます。</p>

<p>前者は、永続化機構とクライアントの間にデータアクセスインターフェースを用意して、データアクセスにはすべてインターフェース経由で行うというものです。後者は、オブジェクト指向分析/設計(OOA/OOD)で導出したドメインクラスと、リレーショナルデータベースのテーブルとをマッピングすると言うものです。</p>

<p><section></p>

<h4>結局</h4>


<p>永続化機構(データベース)と、クライアントとは一つ層を設けるほうがよい。クライアントがデータベースに依存してしまうと、単体テストや再利用が出来なくなってしまう。</p>

<p></section></p>

<h3>DAO (Data Access Object) + Value Object</h3>


<p>「DAO(Data Access Object)パターン + Value Object」 というのは 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22" rel="external nofollow">J2EEパターン―明暗を分ける設計の戦略</a>』 で紹介されている、データベースアクセスの一つの方法です。　</p>

<p>DAOパターンは永続化機構との間にデータアクセス層を増やすことで、クライアント(永続化機構を使うクラス群のこと)がデータアクセスの方法に依存させなくしたものです。データアクセス方法に依存しないと何が幸せかというと、「<em>テストしやすくなる</em>」の一言に尽きます。データベースが変わったときに変更が吸収できるというのもメリットの一つですが、実際にはデータベースが変わることはほとんどありません。</p>

<p><section></p>

<h4>メリット</h4>




<pre><ul><li>永続化機構(データベース等)のアクセス手段を、ドメインクラスから隠蔽できる</li><li>画面ベースでデータモデリングを行った場合に、Value Object の単位がぴったりとハマる</li><li>永続化層が明確になる</li><li>層が追加されるので柔軟性が増す<li>SQL文のチューニングも可能</li><li>キャッシュ戦略が使える(パフォーマンスの向上)</li><li><a href="http://www.tech-arts.co.jp/oo/pattern.html#Proxy" rel="external nofollow">Virtual Proxy</a>を使って、遅延ロードが可能(パフォーマンスの向上)</li></ul></pre>


<p></section></p>

<p><section></p>

<h4>デメリット</h4>




<pre><ul><li>クラスの責務の切り分けが難しい</li><li>うまく共通化しないと重複コードの嵐になりかねない</li><li>ツールを使ってコードを生成しないとめんどくさくてやってられない</li></ul></pre>


<p></section></p>

<h4>結局</h4>


<p>DAOは、データアクセス層という永続化機構にアクセスするインターフェースを提供する。データのアクセスはすべてDAO経由で行うことで、データアクセスから独立させることができる。外部に依存する部分は層を設けて独立させるのがよい。</p>

<h3>O/Rマッピング</h3>


<p>「O/Rマッピング」は、オブジェクト指向で言われる「オブジェクト」とリレーショナルデータベースにおける「リレーション」をマッピングしたものです。いまだに多くのデータベースはリレーショナル型になっています。オブジェクト指向アプローチで開発を行う際に必ずと言ってよいほど、「オブジェクト」と「リレーション」のインピーダンスミスマッチが起こります。この問題を解決するために行われるのが「O/Rマッピング」です。</p>

<p>O/Rマッピングが必要となるのは、オブジェクト指向とリレーショナルデータベースの考え方が違っているというのが大きな理由です。オブジェクト指向は、オブジェクト同士の関連を大切にする考え方です。例えば、領収書と明細という関係を考えた場合</p>

<p><img src="http://hamasyou.com/images/engineer_soul/meisai.gif" alt="ヘッダー明細の例" /></p>

<p>オブジェクト指向では、明細データの集合を取得するときに、親となる「領収書ヘッダー」に問い合わせをして、「明細」を取得します。つまり、クライアントは最初から「明細」に直接問い合わせをする事はありません。　逆にリレーショナルデータベースでは、明細データを取得する場合に、直接「明細」テーブルにアクセスします。データベースは「明細」テーブルのヘッダーIDを元にデータを取ってくるのです。</p>

<pre>
つまり、明細データが欲しい場合には、「明細」テーブルに対してのみSQL文を発行すればよい。しかし、オブジェクト指向でやっているので「領収書」オブジェクトと「明細」オブジェクトを作らなければならない。そのために「領収書ヘッダー」テーブルと「明細」テーブルを結合しないといけない。という面倒なことになってくるのです。
</pre>


<p>　</p>

<p>このように、オブジェクト指向とリレーショナルデータベースとで考え方が違っていることから、<em>オブジェクト指向設計とデータベース設計との差を埋めるために「O/Rマッピング」が使われます。</em></p>

<p><section></p>

<h4>参考</h4>


<p><a href="http://www.arclamp.jp/blog/archives/000021.html" rel="external nofollow">arclamp O/Rマッピングとは</a></p>

<p></section></p>

<p><section></p>

<h4>メリット</h4>




<pre><ul><li>永続化層の実装をクライアントから隠蔽できる</li><li>データベースのテーブルやカラムが変更になった場合に対応しやすい</li><li>オブジェクト指向アプローチで進められる</li><li>コードの自動生成でめんどくさくない</li></ul></pre>


<p></section></p>

<p><section></p>

<h4>デメリット</h4>




<pre><ul><li>SQL文のチューニングが難しい</li><li>データベース設計の質に左右される</li><li>永続化層が分かりにくくなりがち</li><li>細かい検索処理がしにくい</ul></pre>


<p></section></p>

<p><section></p>

<h4>結局</h4>


<p>O/Rマッピングはオブジェクト指向分析/設計で導出されたドメインモデルと、リレーショナルデータベースとの差を埋めるために使われている。そもそもO/Rマッピングを使わなければいけなくなる原因として、オブジェクト指向の考え方とリレーショナルデータベースの考え方が違うのが原因である。</p>

<p></section></p>

<h3>そもそもオブジェクト指向設計ってどうなんだ？</h3>


<p>僕が思うに、DAOもO/Rマッピングも使う場面とアーキテクチャによっては<em>恩恵が受けられない</em>のです。DAOパターンは、永続化層を設けてデータアクセスを隠蔽するのが目的です。なぜ隠蔽するのかといわれれば、ドメインクラスの独立性を高めるため。でも、ちょっとまってください。ドメインクラスってなんで必要なんでしょう？</p>

<p>ドメインクラスは、問題領域を表したモデルです。問題領域というのは<em>システムで解決すべきこと</em>であるはずです。この、「システムで解決すべきこと」というのは、そもそもなんなのでしょう？業務アプリケーションであれば、いまだにほとんどが「<strong>データの出し入れ</strong>」を目的としています。(例えば組み込み系などは、ビジネスロジックで出来ているといえます)</p>

<p>つまり、ドメインクラスをオブジェクト指向で分析/設計する必要はないのです。「データの出し入れ」のみを目的とするシステムであれば、ドメインクラスはオブジェクト指向分析/設計ではなく『<a href="http://www.drinet.co.jp/index.html" rel="external nofollow">データ指向アプローチ(DOA)</a>』で行ったほうがよいのです。<em>あくまで、「データの出し入れ」のみを行うシステム設計の場合ですが。</em></p>

<p>補足をしておくと、オブジェクト指向分析/設計とオブジェクト指向プログラミングは違います。オブジェクト指向プログラミングはすばらしいものです。データを隠蔽して、インターフェースで処理を行う。このプログラミング手法は今後もなくならないと思います。クラスの考え方をオブジェクト指向ではなくデータ指向で設計して、プログラムの開発はオブジェクト指向プログラミングで行う。現在の業務アプリケーションにはしっくりくるのではないでしょうか。</p>

<p>オブジェクト指向設計が生きてくるアプリケーションというのは、業務アプリケーションではあまりないのかも知れません。「データの出し入れ」よりも「処理や振る舞い」に主眼を置いたアプリケーションというのは、今後<a href="http://e-words.jp/w/SOA.html" rel="external nofollow"></a>などのサービス重視のアプリケーション開発が増えてくることで、多くなってくると思います。</p>

<p><section></p>

<h4>参考</h4>


<p><a href="http://www.atmarkit.co.jp/fxml/tanpatsu/33soa/soa01.html" rel="external nofollow">@IT: サービス指向アーキテクチャの未来を考察する（前編）</a></p>

<p></section></p>

<p><section></p>

<h4>結局</h4>


<p>「データの出し入れ」を行うだけの業務アプリケーションには、オブジェクト指向分析/設計はあわない。『<a href="http://www.drinet.co.jp/index.html" rel="external nofollow">データ指向アプローチ(DOA)</a>』でドメインモデルを設計したほうが、データベースとの相性は良くなる。オブジェクト指向アプローチは、「振る舞い」を重視するサービス指向アプリケーションに向いている。</p>

<p></section></p>

<h3>結局、DAOやO/Rマッピングは使えるのか？</h3>


<p>結局、ドメインをオブジェクト指向分析/設計をする必要がなくなれば、「O/Rマッピング」で苦労することがなくなります。「O/Rマッピング」を使わなくなるということではありません。クラスとテーブルが一対一に対応するから、データアクセス層を作って隠蔽すれば、インピーダンスミスマッチが起こらなくなるということです。</p>

<p>結局、「データの出し入れ」を行うだけのアプリケーションであれば、ドメインクラスをデータ指向アプローチで設計し、DAO でデータアクセス層を設けて、O/Rマッピングでテーブルとマッピングするというのがもっともすっきりくる開発スタイルではないかと思います。</p>

<p><section></p>

<h4>結局</h4>


<p>ドメインモデルと永続化機構との考えの違いを埋めるためにDAOもO/Rマッピングも考えられている。この差を埋めるのに必死になる前に、一貫したアプローチでシステム開発を行ったほうが効果的なんじゃないのかな。</p>

<p></section></p>

<h2>参考</h2>


<ul>
<li><p>業務アプリケーションのアーキテクチャパターンで、OOA と DOA の違いについてふれられています。
<a href="http://www.nri-aitd.com/tips/g-patern.html" rel="external nofollow">野村総合研究所 「業務アプリケーションアーキテクチャパターン」</a></p></li>
<li><p>アーキテクチャに関して、どういう点が良くて、どういうところが悪いのかと言う事が、非常にうまく書かれています。</p></li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/0321127420/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>DAOとO/Rマッピングツールについてのお話を参考にさせてもらいました。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774121630/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>DAOパターンの意義についてはここを参考にしました。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894714345/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>オブジェクト指向分析/設計の良書です。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894713861/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
