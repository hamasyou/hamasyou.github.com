<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: git | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/git/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-22T14:42:22+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Git] Git コマンドメモ]]></title>
    <link href="http://hamasyou.com/blog/2010/11/11/git/"/>
    <updated>2010-11-11T23:34:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/11/11/git</id>
    <content type="html"><![CDATA[<p>Git のコマンドメモ。</p>

<!-- more -->




<h2>コミット</h2>




<h3>ステージングエリアに追加する</h3>




<pre>$ git add [--all] &lt;filepattern&gt;</pre>


<p></p>

<p>オプション &ndash;all を指定するとすべてのファイルをステージングエリアに追加する。</p>

<h3>ステージングエリアから削除する</h3>




<pre>$ git rm --cached &lt;filepattern&gt;</pre>


<p></p>

<p>git rm を使うと、ファイルを作業ツリーから削除する。&ndash;cached オプションを指定するとステージングエリアから削除するが作業ツリーには残った状態になる。</p>

<p>単にステージングエリアへの追加を取り消したい場合は対話モードを使って <em>revert（取り消し）</em>を行う。</p>

<pre class="console">$ <kbd>git add -i</kbd>
           staged     unstaged path
  1:        +1/-1      nothing README.txt
 
*** Commands ***
  1: [s]tatus     2: [u]pdate     3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff       7: [q]uit       8: [h]elp
What now&gt; <kbd>revert</kbd>
           staged     unstaged path
  1:        +1/-1      nothing [R]EADME.txt
Revert&gt;&gt; <kbd>1</kbd>
           staged     unstaged path
* 1:        +1/-1      nothing [R]EADME.txt
Revert&gt;&gt;
reverted one path
 
*** Commands ***
  1: [s]tatus     2: [u]pdate     3: [r]evert     4: [a]dd untracked
  5: [p]atch      6: [d]iff       7: [q]uit       8: [h]elp
What now&gt; <kbd>quit</kbd>
Bye.</pre>


<p></p>

<h3>リポジトリにコミットする</h3>




<pre>$ git commit [-a] -m &lt;message&gt;</pre>


<p></p>

<p>オプション -a を指定すると、ステージングエリアに登録していないものでも全て直接コミットできる。</p>

<h2>ブランチ</h2>




<h3>ブランチを作る目的（例）</h3>




<ul><li>実験的な変更のため</li> 
<li>新しい機能の追加のため</li> 
<li>バグフィックスのため</li></ul>


<p></p>

<h3>ブランチを作る</h3>




<pre>$ git branch &lt;branch&gt; [&lt;start-point&gt;]</pre>


<p>start-point（コピー元のブランチ）を指定しないと、現在のブランチを元に新しいブランチが作られる。</p>

<h3>ブランチをチェックアウトする</h3>




<pre>$ git checkout &lt;branch&gt;</pre>


<p></p>

<h3>ブランチの名前を変更する</h3>




<pre>$ git branch (-m|-M) &lt;old_branch&gt; &lt;new_branch&gt;</pre>


<p>new_branch がすでに存在する場合 -M オプションを使って強制的に上書きできる。</p>

<h3>ブランチを作成すると同時にチェックアウトする</h3>




<pre>$ git checkout -b &lt;branch&gt; [&lt;start-point&gt;]</pre>


<p>branch で指定したブランチを作成し、すぐにチェックアウトする。</p>

<h3>ブランチを削除する</h3>




<pre>$ git branch (-d|-D) &lt;branch&gt;</pre>


<p>削除する際に現在のブランチにマージが完了していないブランチは、-d オプションではエラーになる。マージが完了していなくても強制的に削除したい場合に -D オプションを使用する。</p>

<h3>マージ済みのブランチを表示する</h3>




<pre>$ git branch --merged
* masert
  merged_branch</pre>


<p>このコマンドで現在のブランチにマージ済みのブランチの一覧が表示される。<em>*マークがついていないブランチは、すでにマージ済みのため通常は消しても良い</em>こととなる。</p>

<h3>未マージのブランチを表示する</h3>




<pre>$ git branch --no-merged
  no_merged_branch</pre>


<p>現在のブランチにまだマージを行っていないブランチの一覧を表示する。</p>

<h3>コミットしていない変更を一時的に保管する</h3>


<p>git ではコミットしていない変更があると、別のブランチに checkout できない。そんなときは、一時的に変更を保管する git stash を使う。</p>

<pre>$ git stash</pre>


<p>stash すると別のブランチに checkout できるようになる。stash した保管データを元に戻すには git stash pop を使う。</p>

<pre>$ git stash pop</pre>




<h2>マージ</h2>




<h3>マージの種類</h3>




<dl><dt>直接マージ</dt> 
<dd><p>ブランチを一つ持ってきて、すべてのコミットをマージする</p></dd> 
<dt>圧縮コミット</dt> 
<dd><p>あるブランチのコミットを最後の一つに圧縮して現在のブランチにマージする</p></dd> 
<dt>チェリーピック</dt> 
<dd><p>別のブランチからコミットを一つ取ってきて現在のブランチにマージする</p></dd>
</dl>


<p></p>

<h3>直接マージ</h3>




<pre>$ git merge &lt;branch&gt;</pre>


<p>merge コマンドは現在のブランチにマージしたいブランチをマージする。</p>

<h3>圧縮コミット</h3>




<pre>$ git merge --squash &lt;branch&gt;
$ git commit -a -m &lt;message&gt;</pre>


<p>squash オプションは指定したブランチからすべてのコミットを取ってきて、ひとつのコミットに圧縮する。実際に現在のブランチにマージするには、commit を行う必要がある。</p>

<h3>チェリーピック</h3>


<p>ブランチの全部をマージする必要はないが、コミットの一部を取り込みたい場合に使う。このコマンドはマージ先のブランチをチェックアウトした状態で行う。現在のブランチに対して、リポジトリのコミットをつまみ食いする。</p>

<pre>$ git cherry-pick [-n] &lt;commit&gt;
$ git commit</pre>


<p>コミット名は Git がコミットを追跡するために生成する SHA-1 のハッシュの先頭7文字。-n オプションをつけることで、マージはするがコミットしないように留まる。複数のコミットをチェリーピックする場合にこのオプションを使う。最後にコミットを行う際には -m オプションはつけない。</p>

<h3>コンフリクトが起こったら</h3>




<pre>$ git mergetool
$ git commit</pre>


<p>マージ解決ツールを使用して、コンフリクトを解決しコミットを行う。<em>コミットの時には -m オプションは不要。</em></p>

<h3>ブランチを統合する（rebase）</h3>




<pre>$ git rebase &lt;branch&gt;</pre>


<p>現在のブランチの履歴を指定したブランチに全部統合して一つの作業履歴のように見せる。</p>

<h4>参考</h4>


<p><a href="http://progit.org/book/ja/ch3-6.html" rel="external nofollow">Pro Git：リベース</a></p>

<h2>履歴を使った作業</h2>




<h3>ログを見る</h3>




<pre>$ git log [-p]</pre>


<p>現在のブランチのログを見る。オプション -p を使用すると変更した内容を一緒に表示する。</p>

<h3>バージョン間の違いを見る</h3>




<pre>$ git diff [&lt;option&gt;]</pre>


<p>diff で使えるオプションは、log で使ったリビジョンの範囲指定や修飾子が使える。比較するリビジョンを省略した場合は HEAD との比較になる。<strong>HEAD は、最新のコミット</strong>を表す。</p>

<h3>ファイル内の変更がいつ、誰によって行われたかを知る</h3>




<pre>$ git blame [&lt;option&gt;] &lt;file&gt;</pre>


<p>ファイルの一部だけを表示するには、<em>[-L 開始行,終了行]</em> のように記述する。</p>

<pre>$ git blame -L 12,13 index.html</pre>


<p>これで、index.html の12行目から13行目だけを表示する。</p>

<h3>コミットを取り消す</h3>




<pre>$ git revert [-n] &lt;commit&gt;</pre>


<p>オプション -n をつけることで、巻き戻しを即座にコミットしないようにする。<em>revert をするときは、最新のコミット（HEAD）から順番に巻き戻す</em>ようにする。</p>

<h3>リポジトリからコミットをなかった事にする</h3>


<p>リポジトリをリセットし、コミットをなかった事にする。</p>

<pre>$ git reset (--soft|--hard) &lt;commit&gt; </pre>


<p>オプション &ndash;soft は、リセットした内容をステージングエリアに戻してくれる。すなわち、リセットした内容をやり直せる。&ndash;hard オプションは即座に消す。コミット名の修飾子には ^ や ~N が使える。<strong>HEAD^ は最新のコミット</strong>を表す。</p>

<h3>前回コミットからの編集をすべてすてて、前回コミットの状態に戻す</h3>


<p>git reset を利用して、次のようにする。</p>

<pre>$ git reset --hard HEAD</pre>




<h2>リモートリポジトリ</h2>




<h3>リモートリポジトリを使って作業を共有する</h3>




<dl><dt>リポジトリ</dt> 
<dd><p>リポジトリは、ローカルのディレクトリにあるかもしれないし、ネットワーク上にあるかもしれない。とにかく、git でコンテンツを格納する場所がリポジトリ。</p></dd> 
<dt>ローカルリポジトリ</dt> 
<dd><p>自分専用のリポジトリ。git init で作ることもできるし、git clone で他の場所にあるリポジトリをコピーすることもできる。</p></dd> 
<dt>リモートリポジトリ</dt> 
<dd><p>git clone でコピーした元のリポジトリのこと。</p></dd> 
<dt>リモートブランチ</dt> 
<dd><p>リモートリポジトリから作成したブランチのこと。リモートブランチはローカルリポジトリにできるが、ローカルブランチとは区別される。origin/master というような表記になり、origin がリモートリポジトリの別名になる。</p></dd>
</dl>




<h4>参考</h4>


<p><a href="http://progit.org/book/ja/ch3-5.html" rel="external nofollow">ProGit：リモートブランチ</a></p>

<h3>リモートリポジトリのクローンをつくる</h3>




<pre>$ git clone &lt;repository&gt;</pre>


<p>git clone git@github.com:hamasyou/git_demo.git のように使う。これにより、ローカルリポジトリに master ブランチ、自分のリモートリポジトリに origin/master ブランチが作られる。</p>

<pre class="console">$ <kbd>git clone git@github.com:hamasyou/git_demo.git</kbd>
Initialized empty Git repository in /home/hamasyou/gitdemo/git_demo/.git
remote: Counting objects: 49, done.
remote: Compressing objects: 100% (41/41), done.
remote: Total 49 (delta 7), reused 0 (delta 0)
Receiving objects: 100% (49/49), 5.20 KiB, done.
Resolving deltas: 100% (7/7), done.
$ <kbd>cd git_demo</kbd>
$ <kbd>git branch</kbd>
* master
$ <kbd>git branch -r</kbd>
  origin/HEAD -&gt; origin/master
  origin/master</pre>


<p>git branch -r で自分のリモートリポジトリの一覧が表示される。git clone でリポジトリを作成するとデフォルトで origin という名前でリモートサイトの別名が作られる。また、ローカルブランチに master、リモートブランチに origin/master というブランチが作成される。</p>

<p>Git では誰かがリモートリポジトリを更新すると、自分のリモートブランチ（origin/master）と違う歴史がつくられる。リモートリポジトリの更新を取り込むには、リモートブランチ（origin/master）をリモートリポジトリに再接続しなければならない。そのためのコマンドが <strong>fetch</strong> である。</p>

<h3>リモートリポジトリの変更を取り込む（fetch）</h3>


<p>リモートブランチを最新の状態にするには fetch コマンドを利用する。</p>

<pre>$ git fetch &lt;repository&gt;</pre>


<p></p>

<p>git fetch origin のように使う。これにより、リモートリポジトリの更新をリモートブランチに反映させることができる。ただし、<em>リモートブランチを更新しただけではローカルで編集はできない</em>。ローカルブランチにマージする必要がある。</p>

<pre>$ git merge &lt;remote_branch&gt;</pre>


<p>git merge origin/master のように使う。この、fetch と merge を同時に行うものが <em>pull</em> コマンドになる。</p>

<h3>リモートリポジトリのブランチを確認する</h3>




<pre>$ git branch -r</pre>


<p></p>

<p>これでリモートリポジトリにあるブランチの一覧が表示される。</p>

<pre class="console">$ <kbd>git branch -r</kbd>
  origin/HEAD
  origin/master</pre>


<p>origin というのはローカルとリモートを区別するためのプレフィックスで、clone で作成した作成元のリポジトリに割り当てられるデフォルトのリモートリポジトリ名である。この名前は、.git/config に設定されている。</p>

<ul><li>origin以外のリモートリポジトリを追加する</li></ul>


<p></p>

<pre>$ git remote add &lt;alias&gt; &lt;url&gt;</pre>


<p>remote add はリモートリポジトリに別名（エイリアス）をつけるコマンド。</p>

<h3>リモートリポジトリに変更をプッシュする（push）</h3>




<pre>$ git push [&lt;repository&gt; &lt;refspec&gt;]</pre>


<p>リポジトリにはリモートリポジトリ名（デフォルトはorigin）を指定することもできるし、リポジトリのアドレスを指定することもできる。リモートリポジトリ名とプッシュするものが省略された場合、リモートリポジトリ名が origin、プッシュするものは現在のブランチ、プッシュ先は現在のブランチに対応するリモートのブランチとなる。</p>

<pre>$ git push origin mybranch:master</pre>


<p>上記のように指定することで、origin リモートリポジトリの master ブランチに、ローカルの mybranch ブランチをプッシュするという指定になる。</p>

<h3>リモートリポジトリから変更をプルする(pull）</h3>




<pre>$ git pull [&lt;repository&gt; &lt;branch&gt;]</pre>


<p>リモートリポジトリ名は git remote add で追加したリポジトリ名を指定する。リモートリポジトリアドレス（git://example.com/example.git）を指定することもできる。現在登録されているリモートリポジトリ名の一覧は git remote show で表示できる。リモートリポジトリ名を削除するには git remote rm &lt;repository&gt; を実行する。</p>

<pre>$ git pull origin master:tmp</pre>


<p>上記のように指定することで、origin リモートリポジトリの master ブランチを、ローカルの tmp ブランチにプルすることができる。<em>push の時と最後の引数の:の順番が違う。</em></p>

<h3>リモートブランチをローカルブランチの追跡ブランチにする</h3>


<p>git clone を使って作成したリモートリポジトリはデフォルトでリモートブランチの origin/master とローカルブランチの master が追跡状態になる。そのため、master ブランチ上で git push を行うと引数がなくても origin/master に対してプッシュを行う。</p>

<p>master ブランチ以外を追跡ブランチするためには、次のコマンドを使用する。</p>

<pre>$ git checkout --track &lt;remotename&gt;/&lt;branch&gt;</pre>



]]></content>
  </entry>
  
</feed>
