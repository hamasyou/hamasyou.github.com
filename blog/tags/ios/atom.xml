<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: iOS | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/ios/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2017-09-03T15:14:29+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[iOS] ReSwift の State を RxSwift っぽく使えるようにする]]></title>
    <link href="http://hamasyou.com/blog/2017/05/10/swift-reswift-rxswift/"/>
    <updated>2017-05-10T11:08:30+09:00</updated>
    <id>http://hamasyou.com/blog/2017/05/10/swift-reswift-rxswift</id>
    <content type="html"><![CDATA[<p>Swift ライブラリの <a href="https://github.com/ReSwift/ReSwift">ReSwift</a> を <a href="https://github.com/ReactiveX/RxSwift">RxSwift</a> に合わせて使えるようにするメモです。</p>

<h2>ReSwift とは</h2>

<p>ReSwift とは、iOS アプリを <a href="https://github.com/reactjs/redux">Redux</a> のように作れるようにしてくれるライブラリです。</p>

<p>スマホアプリを作っていると</p>

<ul>
<li>アプリの状態管理を一元管理したい</li>
<li>アプリの状態が変わったら、UI を最新に更新したい</li>
</ul>


<p>という要求が出てくると思います。そんなときに、ReSwift でステートを一元管理し、UI の更新を RxSwift の I/F に合わせて使えると結構便利です。</p>

<!-- more -->


<h2>ソースコード</h2>

<p>ということで、メモ書きなので、さっとソースを貼り付けておきます。</p>

<pre><code class="swift">
/// アプリの `Store` クラス
/// Rx 拡張を行うために独自クラスを作成する
class AppStore : Store&lt;AppState&gt; {

    required convenience init(reducer: @escaping (Action, AppState?) -&gt; AppState, state: State?) {
        self.init(reducer: reducer, state: state, middleware: [])
    }

}

/// AppStore を Rx 化するためのプロキシ
class AppStoreProxy&lt;SelectedState&gt; : StoreSubscriber {

    typealias StoreSubscriberStateType = SelectedState

    private weak var source: AppStore?
    private(set) var subject = PublishSubject&lt;StoreSubscriberStateType&gt;()

    fileprivate init(source: AppStore) {
        self.source = source
    }

    func newState(state: StoreSubscriberStateType) {
        subject.on(.next(state))
    }

    deinit {
        subject.on(.completed)
    }
}


extension AppStore : ReactiveCompatible {
}


extension Reactive where Base: AppStore {

    func state() -&gt; Observable&lt;AppStore.State&gt; {
        return state { $0 }
    }

    func state&lt;SelectedState: StateType&gt;(selector: @escaping ((AppStore.State) -&gt; SelectedState)) -&gt; Observable&lt;SelectedState&gt; {
        return Observable.create { observer in
            let proxy = AppStoreProxy&lt;SelectedState&gt;(source: self.base)
            _ = proxy.subject.bind(to: observer)

            self.base.subscribe(proxy, transform: { (subscriber: Subscription&lt;AppState&gt;) -&gt; Subscription&lt;SelectedState&gt; in
                subscriber.select(selector)
            })

            return Disposables.create {
                self.base.unsubscribe(proxy)
            }
        }
    }

    func state&lt;SelectedState: StateType &amp; Identifiable&gt;(selector: @escaping ((AppStore.State) -&gt; SelectedState)) -&gt; Observable&lt;SelectedState&gt; {
        return Observable.create { observer in
            let proxy = AppStoreProxy&lt;SelectedState&gt;(source: self.base)
            _ = proxy.subject.bind(to: observer)

            self.base.subscribe(proxy, transform: { (subscriber: Subscription&lt;AppState&gt;) -&gt; Subscription&lt;SelectedState&gt; in
                subscriber.select(selector)
            })

            return Disposables.create {
                self.base.unsubscribe(proxy)
            }
        }
    }
}
</code></pre>

<p>これで、ReSwift の <code>State</code> を次のように書くことができます。</p>

<pre><code class="swift">store.rx.state { $0.userState }
  .map { $0.name }
  .bind(to: nameLabel.rx.text)
  .disposed(by: disposeBag)
</code></pre>

<h2>オブザーブしているステートが更新されたときのみ通知して欲しい時</h2>

<p>ReSwift を RxSwift のように使うだけであれば、上の拡張でいいのですが、たくさんステートが出来てくると、
関係ないステートが更新されたときにも変更が通知されてしまって、パフォーマンスを気にすることが出てくるかもしれません。</p>

<p>そんなときは、<code>distinctUntilChanged</code> を使って、監視しているステートが更新されたかどうかを確認するようにするといいと思います。</p>

<p><code>State</code> 自体を <code>==</code> で比較できるように、State に <code>Identifier</code> を導入して、更新されたかどうかをチェック出来るようにしてみます。
(というのも、State は構造体(<code>struct</code>) で作ることになると思うので、同一のステートかどうかの一致が大変なのです。)</p>

<h3>State に一意性を持たせる</h3>

<pre><code class="swift">/// 識別子コンポーネント
struct IdentifiableComponent : Hashable {

    typealias Identifier = UInt64

    /// インスタンス生成毎に一意になる値を生成するクラス
    private struct Counter {
        static let lock = DispatchSemaphore(value: 1)
        static var count: Identifier = 0
        static func getAndIncrement() -&gt; Identifier {
            lock.wait()
            defer { lock.signal() }
            count += 1
            return count
        }
    }

    /// インスタンスの識別子
    private(set) var identifier: Identifier = Counter.getAndIncrement()

    var hashValue: Int { return identifier.hashValue }

    mutating func update() {
        identifier = Counter.getAndIncrement()
    }

    static func ==(lhs: IdentifiableComponent, rhs: IdentifiableComponent) -&gt; Bool {
        return lhs.identifier == rhs.identifier
    }
}

protocol HasIdentifiableComponent : Equatable {
    var identifiableComponent: IdentifiableComponent { get }
}

/// 識別子を持つタイプ
protocol Identifiable : HasIdentifiableComponent {
}

extension Identifiable {

    var identifier: IdentifiableComponent.Identifier {
        return identifiableComponent.identifier
    }    

    static func ==(lhs: Self, rhs: Self) -&gt; Bool {
        return lhs.identifiableComponent == rhs.identifiableComponent
    }
}
</code></pre>

<p>複雑そうなことをやっていますが、要はインスタンスを生成するたびに一意の数値を割り当てて、
状態が更新されたらその値をインクリメントするという方法で、数値比較だけで状態が変わったかを判断できるようにしています。</p>

<p>この識別子コンポーネントを State に持たせるようにして</p>

<pre><code class="swift">
struct UserState : StateType, Identifiable {

  fileprivate(set) var identifiableComponent = IdentifiableComponent()

  var name: String?
}

// MARK: - Reducer
extension UserState {    
    static func reducer(state: UserState?, action: Action) -&gt; UserState {
        var state = state ?? UserState()

        switch action {
        case let action as UserActions.SetName:
            state.name = action.name
            state.identifiableComponent.update()

        default:
            break
        }

        return state
    }
</code></pre>

<p>こんな感じで、ステートが更新したときに、<code>identifiableComponent.update()</code> を呼び出すと状態が更新されたことをマークします。
これで、ステートが更新されたときだけ UI を更新するようなコードを次のように書けるようになります。</p>

<pre><code class="swift">store.rx.state { $0.userState }
  .distinctUntilChanged()
  .map { $0.name }
  .bind(to: nameLabel.rx.text)
  .disposed(by: disposeBag)
</code></pre>

<p>パフォーマンスも気にせず使えるようになりました。</p>

<p>既存のプロジェクトからの抜粋なので、一部省略している箇所があります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift] RxSwift で iBeacon の RangeBeaconsInRegion を 5秒間隔で受け取る方法]]></title>
    <link href="http://hamasyou.com/blog/2015/11/25/rxswift-de-ibeacon-false-rangebeaconsinregion-wo-5miao-jian-ge-deshou-kequ-rufang-fa/"/>
    <updated>2015-11-25T15:25:47+09:00</updated>
    <id>http://hamasyou.com/blog/2015/11/25/rxswift-de-ibeacon-false-rangebeaconsinregion-wo-5miao-jian-ge-deshou-kequ-rufang-fa</id>
    <content type="html"><![CDATA[<p>CoreLocation を使って iBeacon の Ranging を行う場合、iOS だと 1秒間隔で通知されます。</p>

<p><a href="http://enamelsystems.com/0011/z">[参考] iBeacon(3) - リージョン監視とレンジング - Enamel Systems</a></p>

<p>そこで、1秒間隔だと通知間隔が短すぎるので、5秒間隔とか1分間隔とかに変えたい時にどうするかですが、<code>CLLocationManager</code> クラスに設定があればよかったのですが、特になさそうなので、<code>RxSwift</code> を使ってストリームのフィルタで対応する方法のメモです。</p>

<p><code>CLLocationManager</code> の初期設定とかは参考サイトを見てください。</p>

<p><a href="https://github.com/ReactiveX/RxSwift/">ReactiveX/RxSwift</a></p>

<pre><code class="swift">locationManager.rx_didRangeBeaconsInRegion
    .sample(interval(5, MainScheduler.sharedInstance))
    .subscribeNext { (tuple: ([CLBeacon]!, CLBeaconRegion!)) in
        debugPrint("beacons: \(tuple.0), region: \(tuple.1)")
    }
    .addDisposableTo(disposeBag)
</code></pre>

<p><code>Rx</code> の <code>sample</code> を使って、ストリームを <code>interval</code> 毎にサンプリングしてやるだけです。</p>

<p><a href="http://www.introtorx.com/content/v1.0.10621.0/13_TimeShiftedSequences.html#Sample">Time-shifted sequences - Introduction to Rx</a></p>

<p><code>RxSwift</code> も使いやすくて、めっちゃ便利です！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS/Swift]ReactiveCocoa 3.0 で ViewModel から Signal をセルフ・コントロールするイディオム]]></title>
    <link href="http://hamasyou.com/blog/2015/08/13/ios-swift-reactivecocoa-signal-viewmodel/"/>
    <updated>2015-08-13T11:57:28+09:00</updated>
    <id>http://hamasyou.com/blog/2015/08/13/ios-swift-reactivecocoa-signal-viewmodel</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a> が v.3.0-RC.1 がでて、そろそろ製品に Swift で ReactiveCocoa が使えるようになりそうな感じになってきました。</p>

<p>いつも <code>Signal</code> を自分で制御するイディオムを忘れてしまうので、メモ書きです。</p>

<pre><code class="swift">import Foundation
import UIKit
import ReactiveCocoa

class MyViewModel {
    let (changed, sink) = Signal&lt;Void, NoError&gt;.pipe()

    func doAction() {
        // do something
        sendNext(sink, ())
    }    
}


class MyViewController : UIViewController {
    let viewModel = MyViewModel()

    override func viewDidLoad() {
        super.viewDidLoad()

        viewModel.changed |&gt; observe(next: debugPrintln)

        viewModel.doAction()              
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS8対応]UITableViewのSeparatorInsetsをゼロにする方法]]></title>
    <link href="http://hamasyou.com/blog/2014/12/25/ios8-swift-uitableview-separatorinsets/"/>
    <updated>2014-12-25T11:03:14+09:00</updated>
    <id>http://hamasyou.com/blog/2014/12/25/ios8-swift-uitableview-separatorinsets</id>
    <content type="html"><![CDATA[<h2>iOS8 から separatorInset だけだと区切り線が広がらない</h2>

<p>こんにちは。iOS8 から SeparatorInsets をゼロにする方法が変わりました。今までの <code>UITableView</code> の <code>separatorInset</code> に <code>UIEdgeInsetsZero</code> を入れるだけだと、iOS7 では効きますが、iOS8 では効かなくなりました。</p>

<pre><code class="swift">tableView.separatorInset = UIEdgeInsetsZero
</code></pre>

<p>{% img /images/2014-12-25-tableview.png 320 &ldquo;図1&rdquo; %}</p>

<h2>iOS8 にも対応するには</h2>

<p>iOS8 からは <code>UIView</code> に追加された <code>layoutMargins</code> というプロパティにも <code>UIEdgeInsetsZero</code> をセットする必要があります。ただこのプロパティ、iOS8 以降でしか利用できないプロパティなので、分岐が必要になります。。</p>

<pre><code class="swift">tableView.layoutMargins = UIEdgeInsetsZero
cell.layoutMargins = UIEdgeInsetsZero
</code></pre>

<h3>全体に適用する簡単な例</h3>

<p>全体に適用するには UIAppearance を使うと便利です。iOS7 と iOS8 に対応したコードは次のように書けます。</p>

<pre><code class="swift">let version = NSString(string: UIDevice.currentDevice().systemVersion).doubleValue

UITableView.appearance().separatorInset = UIEdgeInsetsZero
UITableViewCell.appearance().separatorInset = UIEdgeInsetsZero
if version &gt;= 8 {
    UITableView.appearance().layoutMargins = UIEdgeInsetsZero
    UITableViewCell.appearance().layoutMargins = UIEdgeInsetsZero
}
</code></pre>

<p>{% img /images/2014-12-25-tableview2.png 320 &ldquo;図2&rdquo; %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS] Auto Layout を使いこなす。UITableViewCell と UIScrollView 編]]></title>
    <link href="http://hamasyou.com/blog/2014/10/09/ios-autolayout-scrollview-tablecell/"/>
    <updated>2014-10-09T01:31:20+09:00</updated>
    <id>http://hamasyou.com/blog/2014/10/09/ios-autolayout-scrollview-tablecell</id>
    <content type="html"><![CDATA[<p>iPhone6 と iPhone6 Plus が発売になり、本格的に iOS でも Android のように複数解像度に対応したやり方をしないといけなくなってきました。
iPhone5S までは、縦幅が伸びただけだったので、なんとなく <code>Auto Layout</code> を使っていても問題は表面化しづらかったのですが、
iPhone6 で横幅が伸びてしまったことで、適当に <code>Auto Layout</code> を使ってコーディングしていると残念なことになっているアプリが結構あります。</p>

<p>僕も iPhone アプリを開発しているのでこのあたりは結構気を使ってはいるんですが、いかんせん自分のやり方がほんとに正しいのか、やや疑問なところもあります。
そこで、今の自分のやり方を晒して、世の iPhone アプリ開発者の人に突っ込んでもらえればと思い記事を書くことにしました。</p>

<p>間違っている箇所もあると思いますので、ドンドンツッコミをお願いします！</p>

<!-- more -->


<h2>この記事で何が出来るようになりたいか</h2>

<p>このまとめ記事で、何が出来るようになりたいか。それは次の2点です。</p>

<ol>
<li><code>UITableViewCell</code> （可変長高さ）を <code>Auto Layout</code> を使ってキレイにつくりたい</li>
<li><code>UIScrollView</code> （可変コンテンツ）を <code>Auto Layout</code> を使ってキレイにつくりたい</li>
</ol>


<p>こんな感じのやつです。</p>

<p>{% img /images/20141008/SS1.png 240 &ldquo;可変長UITableViewCell&rdquo; %}
{% img /images/20141008/SS2.png 240 &ldquo;Auto Layout を使った横スクロールの UIScrollView&rdquo; %}
{% img /images/20141008/SS3.png 240 &ldquo;Auto Layout を使った横スクロールの UIScrollView&rdquo; %}</p>

<p><code>UILabel</code> の中身によって <code>UITableViewCell</code> の高さが変わるやつと、<code>UIScrollView</code> の中身をページングで切り替えるときに中身の個数を動的に差し替えるやつです。</p>

<p>それぞれ作り方をさらします。</p>

<p>ソースコードは</p>

<p><a href="https://github.com/hamasyou/autolayout">hamasyou/autolayout</a></p>

<p>にあるので、参考にしたい方はどうぞ。</p>

<h2>iOS8 以降だけに対応するのであれば</h2>

<p>ちなみに、iOS8 以降だけに対応するのであれば、<code>TableViewCell.xib</code> で <code>ContentView</code> に対して何も考えずに Auto Layout でレイアウトして、<code>TableViewController</code> を継承したクラスで次のように <code>tableView.rowHeight</code> に <code>UITableViewAutomaticDimension</code> を設定し、<code>tableView:estimatedHeightForRowAtIndexPath:</code> で <code>UITableViewAutomaticDimension</code> を返すようにするだけで解決します。</p>

<pre><code class="swift">class MyViewClass : UIViewController, UITableViewDelegate {
    @IBOutlet weak var tableView: UITableView!

    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.rowHeight = UITableViewAutomaticDimension
    }

    func tableView(tableView: UITableView, estimatedHeightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat {
        return UITableViewAutomaticDimension
    }
}
</code></pre>

<p><code>tableView</code> に <code>estimatedRowHeight</code> というプロパティがありますが、これに <code>UITableViewAutomaticDimension</code> を設定して、<code>tableView:estimatedHeightForRowAtIndexPath:</code> を実装しない方法だと上手くいきません。バグなんじゃないか？？。。。</p>

<h2>Auto Layout のおさらい</h2>

<p>作り方を晒す前に、まずは <strong>Auto Layout</strong> のおさらいをしておきます。</p>

<p>Auto Layout は Storyboard やプログラムから「制約」を利用してレイアウトを組み立てるものです。基本的に Auto Layout に対応したアプリでは、
<code>UIView(frame: CGRectMake(xx, xx, xx, xx))</code> みたいな作成方法はしなくなります。</p>

<p>Auto Layout を使うと、"画面のこのコンポーネントから◯pxずらしてこのコンポーネントを配置する" や &ldquo;このコンポーネントとこのコンポーネントのサイズを同じにする&rdquo;
みたいなことをなんとなく直感的に記述（または、設定）できます。</p>

<p>Auto Layout を Strobyboard 上で設定すると、その制約が実際にコンポーネントに反映されるのは、<code>UIViewController#viewDidLayoutSubviews</code> のタイミングになるようです。</p>

<h2>UITableViewCell での Auto Layout の作用</h2>

<p>UITableViewCell で Auto Layout を使うときに注意しなければならないのは、<code>awakeFromNib</code> のタイミングでは、セルの Auto Layout が設定されていないということです。</p>

<p>まぁ、これは当然といえば当然で、カスタムの UITableViewCell は再利用を前提に作られるので、実際にセルのコンテンツが設定されるは <code>UITableViewDataSource#cellForRowAtIndexPath</code> の段階になるからです。
このメソッドの中でセルのコンテンツを設定するわけです。</p>

<h3>セルの高さが問い合わせられるのはセルのコンテンツを設定する前！！</h3>

<p>で、まぁ普通に UITableView を使っているとドハマリするのが、セルの高さを返す <code>UITableViewDelegate#heightForRowAtIndexPath</code> のメソッドが呼び出されるのが、<code>cellForRowAtIndexPath</code> の前ということです。
セルの高さを計算できるのはセルのコンテンツが設定された後なんじゃないの？って思うわけですが、高さの問い合わせが来るのはセルのコンテンツを設定する前なのです。。</p>

<p>じゃあ、どうするかというと、僕はもう割りきって、<code>heightForRowAtIndexPath</code> の中で <code>cellForRowAtIndexPath</code> を呼び出して、セルにコンテンツを設定した後にセルの高さを計算するようにしています。</p>

<pre><code class="swift UITableViewController">
    // MARK: - UITableViewDataSource

    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return 2
    }

    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier("customCell") as CustomTableViewCell

        switch indexPath.row {
        case 0:
            cell.thumbView.image = UIImage(named: "Image1")
            cell.labelView.text  = "いろはにほへとちりぬるをわかよたれそつねならむうゐのおくやまけふこえてあさきゆめみしゑひもせす色はにほへど散りぬるを我が世たれぞ常ならむ有為の奥山今日越えて浅き夢見じ酔ひもせず"
        case 1:
            cell.thumbView.image = UIImage(named: "Image2")
            cell.labelView.text  = "Cozy lummox gives smart squid who asks for job pen."
        default:
            break
        }
        return cell
    }

    // MARK: UITableViewDelegate

    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat {
        let cell = self.tableView(tableView, cellForRowAtIndexPath: indexPath) as CustomTableViewCell
        var newBounds = cell.bounds
        newBounds.size.width = tableView.bounds.width
        cell.bounds = newBounds

        cell.setNeedsLayout()
        cell.layoutIfNeeded()
        return cell.preferredView.bounds.height
    }    

    func tableView(tableView: UITableView, estimatedHeightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat {
        return UITableViewAutomaticDimension
    }
</code></pre>

<p>高さを計算するときに、<code>cellForRowAtIndexPath</code> を呼び出してセルにコンテンツを設定した後、セルの width にテーブルビューの width を設定してあげて、一度 cell のレイアウトを更新します。</p>

<p><strong>セルの width にテーブルビューの width を設定しているのがミソ</strong> です。</p>

<p>Storyboard 上ではカスタムセルの横幅がデフォルトで320pxで作成されるので、iPhone5S まではセルの横幅を気にしなくてもセルの <code>layoutIfNeeded</code> だけを呼び出せば勝手に中のコンテンツの高さ決まっているように錯覚していたのですが、
実は Storyboard 上で320pxでセルが作られているのでたまたま偶然いままではうまくいっていただけっぽいです。</p>

<p>本来は、セルの横幅が決まった上でセルのコンテンツの Auto Layout にしたがって <code>layoutIfNeeded</code> しないと行けないのです。セルの横幅を設定せずに <code>layoutIfNeeded</code> だけでコンテンツの高さに合わせてセルの高さを決めていると、
iPhone6 Plus になったときにセルの高さがおかしくなってしまいます。</p>

<h3>heightForRowAtIndexPath と estimatedHeightForRowAtIndexPath の違い</h3>

<p>セルの高さを計算するメソッドは <code>heightForRowAtIndexPath</code> ですが <code>estimatedHeightForRowAtIndexPath</code> というメソッドも用意されています。
このメソッドは何なのかというと、UITableView は大量のデータを表示する場合でも、表示領域+αの部分だけしかセルをインスタンス化しないという設計になっています。
ですので、<code>cellForRowAtIndexPath</code> は表示領域+αの部分分だけ呼び出されるのですが、セルの高さの計算メソッドは、そうではありません。</p>

<p>スクロールバーの範囲を計算したり色々するために、セルの高さの計算は、データがどれだけ大量にあっても全ての数分呼び出されてしまうのです。</p>

<p>で、<code>heightForRowAtIndexPath</code> と <code>estimatedHeightForRowAtIndexPath</code> の違いですが、<code>estimatedHeightForRowAtIndexPath</code> はセルの大まかなサイズを返すメソッドとして用意されています。</p>

<p><code>heightForRowAtIndexPath</code> と <code>estimatedHeightForRowAtIndexPath</code> が両方用意されている場合は、全てのセルの高さを一旦 <code>estimatedHeightForRowAtIndexPath</code> で計算したあと、
表示領域+α分の回数だけ <code>heightForRowAtIndexPath</code> が呼び出されるという形になります。</p>

<p><code>estimatedHeightForRowAtIndexPath</code> を定義しない場合は、全てのデータ分だけ <code>heightForRowAtIndexPath</code> が呼び出されるので、データが多い場合は結構きつくなります。
なので、忘れずに <code>estimatedHeightForRowAtIndexPath</code> も定義しておきます。</p>

<p>返す値はなんとなくの定数(44pxとか)でもいいですし、<code>UITableViewAutomaticDimension</code> を返すでもどちらでもよさそうです。</p>

<h3>setNeedsLayout と layoutIfNeeded は何？</h3>

<p><code>setNeedsLayout</code> はそのコンポーネントに、再レイアウトが必要なフラグを設定するメソッドになります。再レイアウトが必要なコンポネントは次のタイミングの <code>layoutSubviews</code> の呼び出しの時に再レイアウトされます。</p>

<p><code>layoutIfNeeded</code> はそのコンポーネントが再レイアウトが必要なフラグが立っているかを確認して、再レイアウトが必要であれば <code>layoutSubviews</code> を呼び出してくれるメソッドです。</p>

<p>コンポーネントのレイアウトを強制的に更新したい場合は</p>

<pre><code class="swift">view.setNeedsLayout()
view.layoutIfNeeded()
</code></pre>

<p>のコンボでレイアウトを更新します。この処理を行うと、Auto Layout にしたがってレイアウトが設定されます。</p>

<p>レイアウトを更新したらセルの高さが決まっているはずなので <code>bounds.height</code> を返します。</p>

<h3>preferredView って何？</h3>

<p>UIView 関連のコンポーネントには、推奨サイズというのが設定されているコンポーネントがあります。例えば UILabel であれば、ラベルの文字数をきっちり表示できるサイズが推奨サイズになりますし、
UIButton であればボタン名が表示できるサイズが推奨サイズになります。</p>

<p>コンポーネントの推奨サイズを取得するメソッドが <code>UIView#intrinsicContentSize</code> になります。実はこのメソッド、Auto Layout と深い関係があります。</p>

<p>例えば、UILabel の制約を次のように設定したとします。</p>

<p>{% img /images/20141008/SS4.png 240 &ldquo;UILabel の制約&rdquo; %}</p>

<p>親のコンポーネントに対して、Top、Trailing、Leading を 0 に設定しています。こうすることで UILabel が親のコンポーネントの上左右の padding が 0 で表示されるわけです。</p>

<p>ここでのポイントは、bottom に制約を設定していないことです。bottom に制約を設定していないので、本来であればこのコンポーネントは高さが決まらずに ambiguity（曖昧）な状態なはずです。</p>

<p>でも UILabel や UIButton は ambiguity にはなりません。これは、コンポーネントに推奨サイズが設定されているので、そのサイズでコンポーネントが表示されるからです。</p>

<p>UILabel を使って、テキストがどれだけ多くなっても全て表示したいというときには、このように bottom に制約を設定せずに、<code>Lines</code> を 0 に、<code>Line Breaks</code> を <code>Character Wrap</code> に設定します。</p>

<p>{% img /images/20141008/SS5.png 240 &ldquo;Lines 0 Line Breaks Character Wrap&rdquo; %}
{% img /images/20141008/SS6.png 240 &ldquo;Lines 0 Line Breaks Character Wrap&rdquo; %}</p>

<h4>推奨サイズを持たないコンポーネントがある</h4>

<p>コンポーネントの中には、推奨サイズを持たないコンポーネントが存在します。<code>UIView</code> がそうです。UIView は子のビューのサイズによって自身のサイズが変わるため、
推奨サイズを持ちません。</p>

<p>逆に考えると、中のコンテンツのサイズが動的に変わる場合でも、UIView が親にいる限り、子のコンポーネントは好きにサイズが変わってよく、子のサイズが決まった段階で UIView のサイズ（bounds）が決まるということです。</p>

<p>この性質を使うと、UITableViewCell の中身が複雑に Auto Layout される場合でも、セルの高さを簡単に計算できるようになります。</p>

<h3>セルの中に UIView を配置して、その中にコンテンツを並べる</h3>

<p>カスタムの UITableViewCell には、<code>ContentView</code> という UIView が予め用意されていますが、この ContentView 、いまいち上手く Auto Layout してくれません。。
やり方が悪いだけのような気もしますが、僕は ContentView の子に UIView を入れるようにして、この UIView の上左右の padding を 0 に設定してレイアウトを始めるようにしています。</p>

<p>{% img /images/20141008/SS7.png 800 &ldquo;preferredView&rdquo; %}</p>

<p>bottom の制約を設定しないのがミソです。bottom の制約を設定しないことで、UIView は縦方向に自由に伸び縮みして、子のコンポーネントのサイズに合わせて高さが勝手に変わるようになります。</p>

<p>最後のコンポーネントを配置し終えたら、そのコンポーネントの bottom を親に対して設定をすれば、UIView の高さが子のコンポーネントの Auto Layout から決まるようになります。</p>

<p>{% img /images/20141008/SS9.png 800 %}</p>

<h3>推奨サイズをもつコンポーネントで位置とサイズで矛盾が起きた場合</h3>

<p>上の画像では、最後の要素の UILabel の bottom を親の Preferred View に対して設定していますが、UILabel の推奨サイズの高さと Preferred View からの bottom の位置とでコンフリクトが起きます。</p>

<p>Storyboard 上では、コンフリクトが起きると、赤い矢印マークがでます。実際には UILabel の高さを bottom の位置にまでの高さに設定することで矛盾は起きないのですが、
コレだと、高さが結局 UIView の高さに依存してしまい、UIView の高さは bottom を設定していないことから曖昧なサイズになってしまいます。</p>

<p>これだと思った様なレイアウトになりません。で、こんな時に設定するのが制約の <strong>priority</strong> です。制約同士でコンフリクトが起きた場合に、どちらの制約を優先的に適用するかを決めるのが priority になります。</p>

<p>今回は、<em>ラベルの高さを推奨サイズで配置して、その位置を元に UIView の高さを決めたい</em> ので、UILabel の bottom の制約の priority を下げます。UILabel の推奨サイズが決まる priority (Content Hugging Priority) が 251 なので、bottom の priority を 250 以下に設定すれば、
UILabel の推奨サイズを優先的に設定して、その高さからの bottom の位置が決まるようになります。</p>

<p>{% img /images/20141008/SS10.png 240 %}
{% img /images/20141008/SS11.png 500 %}</p>

<h4>高さが決まらない UIView を配置すると、Storyboard 上での作業がしずらい場合</h4>

<p>高さが決まらない UIView を使うと、Storyboard 上で制約に合わせてコンポーネントの位置を自動調整するときに困ることがあります。</p>

<p>そんな時は、高さ（height）を適当に設定して、制約のところの <em>Placeholder Remove at build time</em> にチェックを入れておきます。
こうすることで、Storyboard 上の作業のときだけ制約が設定されて、実行時には制約が削除される状況を作ることができます。</p>

<p>{% img /images/20141008/SS8.png 240 &ldquo;Remove at build time&rdquo; %}</p>

<h3>UIView を使って擬似的な Preferred View を作ると高さ可変のセルが簡単につくれる</h3>

<p>このように、セルの ContentView の子要素に Preferred View を用意して、コンテンツのサイズで UIView の高さが決まるようにすることで、
Auto Layout を使った配置の中でセルの高さを可変にすることが結構簡単にできるようになります。</p>

<p>{% img /images/20141008/SS1.png 240 &ldquo;iPhone5S&rdquo; %}
{% img /images/20141008/SS12.png 240 &ldquo;iPhone6 Plus&rdquo; %}</p>

<p>他にもっと良いやり方があるかと思いますが、参考になればと思います。</p>

<h2>UIScrollView で Auto Layout を上手く使う方法</h2>

<p>UIScrollView も UITableViewCell と考え方は同じで、中のコンテンツを Auto Layout するときには Preferred View を用意して、
こいつにサイズを計算させて UIScrollView の contentSize を決めてやるようにします。</p>

<h3>UIScrollView のまとめ</h3>

<p>UIScrollView はビュー自体の <code>frame</code> とコンテンツ部分の <code>contentSize</code> の二つの要素を持ちます。frame はスクロールビュー自身の位置やサイズを表します。
contentSize はスクロールビューが表示するコンテンツのサイズを表していて、スクロールビューのサイズよりも大きい contentSize の場合には、スクロールビューの中でスクロールが発生するということになります。</p>

<h3>UIScrollView と Auto Layout</h3>

<p>UIScrollView で気を付けないといけないのは、<strong>contentSize は中に含まれるコンポーネントの frame や bounds で決まるわけではない</strong> ということです。</p>

<p>UIScrollView の contentSize はコンポーネントの <code>intrinsicContentSize</code> によって決まります。ここが UIScrollView でハマる一番のポイントかなと思います。</p>

<p>つまり、intrinsicContentSize （推奨サイズ）が決まるコンポーネントのみをコンテンツとして表示する場合には contentSize は Auto Layout が自動で計算してくれるということです。</p>

<p>例えば UIImageView を UIScrollView の中に入れたとします。UIImageView の intrinsicContentSize は UIImageView の frame や bounds ではなく、表示する UIImage の size になります。
なので、UIImageView だけを UIScrollView に入れると、UIImageView のサイズをいくら Storyboard 上で設定しても、勝手にスクロールされてしまうのです。</p>

<p>{% img /images/20141008/SS13.png 800 &ldquo;UIScrollView の罠&rdquo; %}</p>

<p>{% img /images/20141008/SS14.png 240 &ldquo;UIScrollView の罠&rdquo; %}
{% img /images/20141008/SS15.png 240 &ldquo;UIScrollView の罠&rdquo; %}
{% img /images/20141008/SS16.png 240 &ldquo;UIScrollView の罠&rdquo; %}</p>

<h3>UIScrollView のサイズに合わせて画像をページングする方法</h3>

<p>UIScrollView の contentSize は intrinsicContentSize によって決まるというのは、上で書きました。
じゃあ、contentSize をプログラムで上書きしちゃえば上手くスクロールするんでは？ということで、さがすと出てくるのが大体 <code>viewDidLayoutSubviews</code> の中で
contentSize を設定すればいいじゃんっていうプログラム例です。</p>

<pre><code class="swift">    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()

        let contentWidth = CGFloat(preferredViews.count) * scrollView.bounds.width
        let contentHeight = scrollView.bounds.height
        scrollView.contentSize = CGSizeMake(contentWidth, contentHeight)
    }
</code></pre>

<p>ぶっちゃけ、僕もこの方法が結局妥当かなという結論に達しました。先に UIScrollView に画像を動的に追加して、ページングできるようにするコードを掲載します。</p>

<pre><code class="swift">import UIKit

class SecondViewController: UIViewController {

    @IBOutlet weak var scrollView: UIScrollView!

    var preferredViews: [UIView]!

    override func viewDidLoad() {
        super.viewDidLoad()

        let images = [UIImage(named: "Image1"), UIImage(named: "Image2"), UIImage(named: "Image3")]
        self.preferredViews = [UIView]()

        for image in images {
            let preferredView = UIView(frame: CGRectMake(0, 0, image.size.width, image.size.height))
            let imageView = UIImageView(frame: CGRectMake(0, 0, image.size.width, image.size.height))
            imageView.image = image
            imageView.contentMode = .ScaleAspectFill
            imageView.clipsToBounds = true
            preferredView.setTranslatesAutoresizingMaskIntoConstraints(false)
            imageView.setTranslatesAutoresizingMaskIntoConstraints(false)
            preferredView.addSubview(imageView)
            scrollView.addSubview(preferredView)

            preferredViews.append(preferredView)
        }
    }


    override func updateViewConstraints() {
        super.updateViewConstraints()

        var prevView: UIView? = nil
        for preferredView in preferredViews {
            let imageView = preferredView.subviews[0] as UIImageView
            preferredView.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("H:|[imageView]|",
                options: nil, metrics: nil, views: ["imageView": imageView]))
            preferredView.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("V:|[imageView]|",
                options: nil, metrics: nil, views: ["imageView": imageView]))

            if prevView == nil {
                scrollView.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("H:|[preferredView(==scrollView)]",
                    options: nil, metrics: nil, views: ["scrollView": scrollView, "preferredView": preferredView]))
            } else {
                scrollView.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("H:[prevView][preferredView(==scrollView)]",
                    options: nil, metrics: nil, views: ["scrollView": scrollView, "prevView": prevView!, "preferredView": preferredView]))
            }
            scrollView.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("V:|[preferredView(==scrollView)]",
                options: nil, metrics: nil, views: ["scrollView": scrollView, "preferredView": preferredView]))

            prevView = preferredView
        }

    }


    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()

        let contentWidth = CGFloat(preferredViews.count) * scrollView.bounds.width
        let contentHeight = scrollView.bounds.height
        scrollView.contentSize = CGSizeMake(contentWidth, contentHeight)
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}
</code></pre>

<p>{% img /images/20141008/SS17.png 800 %}</p>

<p>{% img /images/20141008/SS18.png 240 %}
{% img /images/20141008/SS19.png 240 %}</p>

<p>UIScrollView の中に画像を3つ表示して、それをページングスクロールするコードになります。Paging Enabled のオプションは Storyboard 上で設定しています。</p>

<p>画像を直接 UIScrollView にいれてしまうと、intrinsicContentSize の問題で表示が意図したとおりにならないので、UIImageView をラップする PreferredView を作成しています。</p>

<p>PreferredView の中に UIImageView を隙間なく配置し、PreferredView を ScrollView の縦横のサイズと同じサイズにして、Auto Layout で左から順番に配置しています。
ぶっちゃけ、この処理であれば、<code>UICollectionView</code> を使うほうが早いし楽だし美しいと思います。</p>

<p>UIScrollView で Auto Layout を使って頑張ってスクロールコンテンツを配置したいときに、参考になるといいと思っています。</p>
]]></content>
  </entry>
  
</feed>
