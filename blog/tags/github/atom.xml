<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: GitHub | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/github/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2015-06-10T12:10:27+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ムームードメイン+GitHub Pagesで独自ドメインを使う方法]]></title>
    <link href="http://hamasyou.com/blog/2014/03/05/github-pages-custom-domain/"/>
    <updated>2014-03-05T12:02:07+09:00</updated>
    <id>http://hamasyou.com/blog/2014/03/05/github-pages-custom-domain</id>
    <content type="html"><![CDATA[<p>GitHub Pages を Naked Domain（サブドメインをつけない hamasyou.com みたいなやつ）で運用する場合の手順です。</p>

<p><span class="small">GitHub Pages をサブドメイン（www.hamasyou.com みたいなやつ）で運用する場合は、DNS サービスの <strong>CNAME</strong> を <strong>hamasyou.github.io</strong> に設定すれば問題ないのでこの記事は読む必要がありません。</span></p>

<p>hamasyou.com はムームードメインで取得していますので、ムームードメインを元に説明します。が、ムームードメインに限らず、Apex Alias を設定できない DNS サービスを使うときの参考にしてください。
なんでこんな事をメモするかというと、GitHub Pages を独自ドメインで運用する際に Apex Alias を使わないと <strong>302 Found</strong> のステータスコードが返ってきて、SEO 的に嫌なのと <em>Facebook のシェアで404 Not Found が出てしまう</em> からです。</p>

<p><a href="http://subosito.com/fix-302-redirect-response-for-github-hosted-site">Fix 302 Redirect Response For GitHub Hosted Site</a></p>

<p>別に 302 Found がでても構わないっていうひとは GitHub Pages のヘルプを参考にしてやってみてください。</p>

<p><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages - GitHub Help</a></p>

<!-- more -->


<h3>やりたいこと</h3>

<p>やりたいことの整理です。</p>

<ul>
<li>GitHub Pages を hamasyou.com で運用する</li>
<li>www.hamasyou.com を hamasyou.com の CNAME に設定する</li>
</ul>


<p>hamasyou.com の A レコードを GitHub Pages の IP に設定するだけだと CDN が効かないし、ステータスコードが302で返ってくることがあるのでちゃんと200で返して欲しい。</p>

<h3>1. 独自ドメインを取得する</h3>

<p>まず、独自ドメインを持っていない場合はドメインを取得しましょう。
僕はすでにムームードメインでドメインを取得していたのでアレですが、もしこれからドメインを取るなら、Apex Alias が使えるサービスで取ったほうがいいかもしれません。
そのほうが幸せになれるかも。</p>

<h3>2. Apex Alias を設定する</h3>

<p>ムームードメインのように、Apex Alias も使えないし、Naked Domain に CNAME を割り当てられないサービスの場合は、レンタル DNS サービスを利用します。
<strong>Gehirn DNS</strong> がドメイン2つまで無料で使えるので、今回はここを利用しました。</p>

<p><a href="http://www.gehirn.jp/dns.html">Gehirn DNS</a></p>

<p>アカウント登録をして、ドメインの認証をまずは行います。TXT レコードを使って認証していきます。出てくるダイアログをよく読めば出来ると思います。</p>

<p><a href="http://support.gehirn.jp/manual/dns/domain/">独自ドメインを追加する方法 - Gehirn DNS</a></p>

<p>次に、Apex Alias を登録します。手順は次のサイトを見れば分かると思います。</p>

<p><a href="http://news.gehirn.jp/information/325/">Gehirn DNS、ホスト名無しのドメインにエイリアス機能をサポート - ゲヒルンニュース</a></p>

<p>コントロールパネルで CNAME も登録します。www.hamasyou.com を hamasyou.com に向けたいので、そのように設定します。
レコードの登録のさいは、末尾に <code>.</code> が付くので忘れずに。</p>

<p><img src="/images/2014-03-05-github-pages-custom-domain-01.png" alt="登録後01" /></p>

<p><img src="/images/2014-03-05-github-pages-custom-domain-02.png" alt="登録後02" /></p>

<p>Gehirn での設定は以上です。つぎは、ムームードメインのネームサーバの設定をします。</p>

<h3>3. ネームサーバを変更する</h3>

<p>ムームードメインの管理画面に入って、「ネームサーバ設定」で「弊社サービス以外のネームサーバ」を選びます。
ここで、Gehirn のネームサーバの情報を入力します。</p>

<p><img src="/images/2014-03-05-github-pages-custom-domain-03.png" alt="ネームサーバの設定" /></p>

<p>これで、hamasyou.com の DNS レコードが Gehirn のネームサーバで参照されて、Alias レコードで hamasyou.github.io を見に行くようになります。
Apex Alias を設定することで、GitHub Pages の CDN が利用出来るようになるので、参照のパフォーマンスもちょっとはあがるはず！らしいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Movable TypeからGitHub+Octopressに乗り換える手順]]></title>
    <link href="http://hamasyou.com/blog/2014/02/13/movable-type-to-octopress/"/>
    <updated>2014-02-13T10:53:07+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/13/movable-type-to-octopress</id>
    <content type="html"><![CDATA[<p>今まではブログを <em>ロリポップ</em> + <em>Movable Type</em> でやっていましたが、ブログデザインを変更したくなり、ついでにブログ環境も変更しました。</p>

<p>Movable Type から <em>WordPress</em> に乗り換えても良かったんですが、エンジニアっぽいブログ環境ってなんだろうと考えた末、<strong>GitHub Pages</strong> と <strong>Octopress</strong> を使ってブログ環境を作ることにしました。</p>

<p><a href="http://octopress.org/">Octopress</a> は <a href="http://jekyllrb.com/">Jekyll</a> を使ってブログ環境を作るためのフレームワークで、Jekyll はブログのような静的サイトを作るための Ruby のファイルジェネレータになります。</p>

<p><a href="http://pages.github.com/">GitHub Pages</a> と組み合わせると無料でブログを始めることができます。</p>

<p>移行でおこなったことの手順です。</p>

<!-- more -->


<h2>手順</h2>

<ol>
<li>公開用のサーバ設定

<ol>
<li>GitHub にリポジトリを作成する</li>
<li>Octopress をチェックアウトする</li>
<li>deploy する</li>
</ol>
</li>
<li>ローカルのブログ環境の設定

<ol>
<li>ブログの初期設定をおこなう</li>
<li>テーマを変更する</li>
<li>最初の記事を書いてみる</li>
</ol>
</li>
<li>環境をバックアップする

<ol>
<li>BitBucket にリポジトリを作成する</li>
<li>BitBucket にソースをプッシュする</li>
</ol>
</li>
<li>プラグインをつかう

<ol>
<li>記事にタグをつける</li>
</ol>
</li>
</ol>


<h2>公開用のサーバ設定</h2>

<h3>GitHub にリポジトリを作成する</h3>

<p>まず最初に GitHub にサイト公開用のリポジトリを作成します。</p>

<p><a href="https://github.com/">GitHub</a> にログインして、リポジトリを作成します。リポジトリ名は <strong>username.github.io</strong> とします。<code>username</code> の部分を自分のアカウント名に読みかえてください。僕の場合は hamasyou.github.io になります。</p>

<p>このリポジトリが公開用のサイトになり、<a href="http://username.github.io/">http://username.github.io/</a> が URL になります。</p>

<p><img src="/images/2014-02-13-movable-type-to-octopress-01.png" alt="リポジトリ作成" /></p>

<h3>Octopress をチェックアウトする</h3>

<p>つぎに、ブログ環境を作成するために <a href="http://pages.github.com/">Octopress</a> を github からチェックアウトします。<code>username</code> のところは自分のアカウント名です。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>git clone git@github.com:imathis/octopress.git username.github.io</span><span class='line output'>Cloning into &lsquo;username.github.io&rsquo;&hellip;
</span><span class='line output'>remote: Reusing existing pack: 10340, done.
</span><span class='line output'>remote: Counting objects: 20, done.
</span><span class='line output'>remote: Compressing objects: 100% (20/20), done.
</span><span class='line output'>remote: Total 10360 (delta 4), reused 3 (delta 0)
</span><span class='line output'>Receiving objects: 100% (10360/10360), 2.73 MiB | 785.00 KiB/s, done.
</span><span class='line output'>Resolving deltas: 100% (4949/4949), done.
</span><span class='line output'>Checking connectivity&hellip; done.</p>
</span><span class='line output'>
</span><span class='line output'><p>$ cd username.github.io</span></code></pre></td></tr></table></div></div>
        </div></p>

<h3>deploy する</h3>

<p>Octopress の初期設定を行い、deploy を行います。この時点でデプロイしたくない場合は最後のコマンド <code>bundle exec rake gen_deploy</code> を実行しないようにします。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>bundle install &ndash;path vendor/bundle</span><span class='line command'>bundle exec rake install</span><span class='line command'>bundle exec rake setup_github_pages</span><span class='line output'>Enter the read/write url for your repository
</span><span class='line output'>(For example, &lsquo;git@github.com:your_username/your_username.github.io.git)
</span><span class='line output'>           or 'https://github.com/your_username/your_username.github.io&rsquo;)
</span><span class='line output'>Repository url: <kbd>git@github.com:username/username.github.io.git<kbd>
</span><span class='line command'>bundle exec rake gen_deploy</span></code></pre></td></tr></table></div></div>
        </div></p>

<h2>ブログの初期設定を行う</h2>

<p>Octopress のブログ設定値は <code>_config.yml</code> というファイルになります。<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a> を参考に変更します。</p>

<h3>テーマを変更する</h3>

<p>デフォルトテーマでも十分カッコいいですが、テーマ変更もできます。Octopress のテーマは <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes</a> にまとまっているので、よさそうなテーマを選んでインストールします。</p>

<p>テーマのインストールは、<code>.themes</code> ディレクトリにテーマのリポジトリをチェックアウトして <code>bundle exec rake install['theme-name']</code> でおこないます。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>git clone git@github.com:kAworu/octostrap3.git .themes/octostrap3</span><span class='line command'>bundle exec rake install[&lsquo;octostrap3&rsquo;]</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><a href="http://opthemes.com/"><img src="/images/2014-02-13-movable-type-to-octopress-02.png" alt="Octopress-Themes" /></a></p>

<h3>あたらしい記事を作成する</h3>

<p>新しい記事を書くには <code>bundle exec rake new_post['title']</code> とします。<code>title</code> 部分が記事のファイル名に使われるので、この時点では英語で入力するほうがよいです。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>bundle exec rake new_post[&lsquo;movable-type-to-octopress&rsquo;]</span><span class='line output'>mkdir -p source/<em>posts
</span><span class='line output'>Creating new post: source/</em>posts/2014-02-13-movable-type-to-octopress.markdown</span></code></pre></td></tr></table></div></div>
        </div></p>

<pre><code>---
layout: post
title: "movable-type-to-octopress"
date: 2014-02-13 13:18:04 +0900
comments: true
categories:
---
</code></pre>

<p>記事のタイトルに日本語を使いたいときはファイル中の <code>title</code> 部分を書き換えます。また、カテゴリやタグ、ページのキーワードなどもここで変更できます。</p>

<pre><code>---
layout: post
title: "Movable TypeからGitHub+Octopressに乗り換える手順"
date: 2014-02-13 13:18:04 +0900
comments: true
categories: [Blog]
keywords: "Movable Type,GitHub,Octopress,Blog,Liquid,Jekyll,Ruby"
tags: [Movable Type,GitHub,Octopress,Liquid,Jekyll,Ruby]
---
</code></pre>

<h2>BitBucket にソースをコミットする</h2>

<p>GitHub もリポジトリサービスですが、現在は Public なリポジトリしか無料で作ることができません。そこで、<strong>BitBucket</strong> という別のリポジトリサービスを利用して環境をまるごとバックアップします。</p>

<p><a href="https://bitbucket.org/"><img src="http://upload.wikimedia.org/wikipedia/en/f/fc/Bitbucket_Logo.png" alt="BitBucket" /></a></p>

<p>BitBucket は Private なリポジトリが作成できるので、ブログ環境は BitBucket で管理して、サイトデータだけを GitHub にデプロイするようにします。</p>

<h3>リポジトリを作成する</h3>

<p>BitBucket にリポジトリを作成する方法は、GitHub とほとんど変わりません。こちらもリポジトリ名を <code>username.github.io</code> にしておきます。</p>

<p><img src="/images/2014-02-13-movable-type-to-octopress-03.png" alt="BitBucket リポジトリ作成" /></p>

<p>リポジトリを作成したら、ソースコードをプッシュします。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>git remote add bitbucket git@bitbucket.org:username/username.github.io.git</span><span class='line command'>git add .</span><span class='line command'>git commit -m &lsquo;init&rsquo;</span><span class='line command'>git push bitbucket source</span></code></pre></td></tr></table></div></div>
        </div></p>

<h2>その他</h2>

<h3>記事にタグをつけられるようにする</h3>

<p>Octopress にはいろいろなプラグインがあります。自作することも簡単にできます。デフォルトではタグというものが Octopress にはありませんが、カテゴリ機能を参考にすると簡単にタグを管理できるようになります。</p>

<p><a href="http://rcmdnk.github.io/blog/2013/04/12/blog-octopress/">Octopressでのタグ管理</a></p>

<h3>独自ドメインで運用する</h3>

<p><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages</a> の手順でできます。</p>

<p>要約すると、<code>CNAME</code> というファイルを作成して、メインのサイトドメインを登録する。</p>

<pre><code class="plain source/CNAME">hamasyou.com
</code></pre>

<p>独自ドメインを取ったら、DNS の設定で <code>ALIAS</code> レコード を <code>username.github.io</code> に向ければ CDN で配信が行われるそうです。ALIAS レコードに対応していない DNS プロバイダの場合は、IP アドレスをハードコードしないといけないので CDN の恩恵を受けられないよということだそうです。。</p>

<p>うちはムームードメインなので、ALIAS レコードに対応していないので、A レコードをハードコードしました。。DNS プロバイダ引越そうかな。。</p>

<pre><code>hamasyou.com A 192.30.252.153
hamasyou.com A 192.30.252.154
www.hamasyou.com CNAME hamasyou.github.io
</code></pre>

<p>これで、時間がたてば独自ドメイン名で GitHub のページが表示されるようになります。</p>

<h3>Markdown で <code>Definition LIST</code> を使えるようにする</h3>

<p>Octopress の使っている Markdown パーサの rdiscount のバージョンを上げます。2.1.7 からデフォルトで <em>Definition LIST（dl, dt, dd）</em> の拡張記法が使えるようになっているのでアップデート推奨です。</p>

<p><code>Gemfile</code> を開いて <code>gem 'rdiscount', '~&gt; 2.0.7'</code> を <code>gem 'rdiscount'</code> に書き換えます。</p>

<pre><code>- gem 'rdiscount', '~&gt; 2.0.7'
+ gem 'rdiscount
</code></pre>

<p>bundle update します。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>bundle update rdiscount</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>これで Markdown で Definition LIST がデフォルトで使えるようになります。</p>

<pre><code>これがキーワード
: キーワードの説明

&lt;dl&gt;
  &lt;dt&gt;これがキーワード&lt;/dt&gt;
  &lt;dd&gt;キーワードの説明&lt;/dd&gt;
&lt;/dl&gt;
</code></pre>

<h3>Movable Type の記事を Markdown に変換する</h3>

<p>Movable Type の記事エクスポートを Markdown 形式に変換するコードを見つけたので、移行にはこれを使いました。ちょっと手はいれましたが。</p>

<p><div><script src='https://gist.github.com/2351046.js?file=mt_to_markdown.rb'></script>
<noscript><pre><code>#!/usr/bin/env ruby

require &#39;date&#39;
require &#39;mustache&#39;
require &#39;stringex&#39;
require &#39;cgi&#39;

export     = File.open(ARGV[0])
target_dir = ARGV[1]

class Post &lt; Mustache
  self.template = &lt;&lt;-MARKDOWN
---
layout: post
title: &quot;{{title}}&quot;
date: {{formatted_date}}
comments: {{comments}}
categories: {{category}}
author: {{author}}
---

{{formatted_body}}
MARKDOWN

  attr_accessor :author, :title, :category, :comments, :status, :body

  def initialize
    @body = []
  end

  def date=(date)
    case date
    when String
      @date = DateTime.strptime(date, &quot;%m/%d/%Y %I:%M:%S %p&quot;)
    else
      @date = date
    end
  end

  def date
    @date
  end

  def formatted_date
    @date.strftime(&quot;%Y-%m-%d %H:%M&quot;)
  end

  def comments=(comments)
    @comments = comments == &quot;1&quot; ? true : false
  end

  def formatted_body
    CGI.unescapeHTML(body.join).
      gsub(/&lt;a href=&quot;(.*?)&quot;&gt;*(.*?)&lt;\/a&gt;/i, &#39;[\2](\1)&#39;).
      gsub(&quot;&lt;!--more--&gt;&quot;, &quot;\n\n&lt;!-- more --&gt;\n\n&quot;)
  end

  def file_name
    &quot;#{date.strftime(&quot;%Y-%m-%d&quot;)}-#{title.to_url}.markdown&quot;
  end
end

posts = [Post.new]

KEYWORDS = /(AUTHOR|TITLE|STATUS|COMMENTS|CATEGORY|DATE): (.*)/

def attr_and_value(line)
  line =~ KEYWORDS
  [&quot;#{$1.downcase}=&quot;, $2]
end

puts &quot; # Reading from data &#39;#{ARGV[0]}&#39; ...&quot;

puts &quot; # Generating Markdown ...&quot;

comment_section = false

export.each do |line|
  if line.strip == &quot;--------&quot;
    posts &lt;&lt; Post.new
    print &#39;.&#39;
    comment_section = false
    next
  end

  next if comment_section

  case line.strip
  when KEYWORDS
    posts.last.send(*attr_and_value(line))
  when /BODY/
    next
  when &quot;-----&quot;
    next
  when /COMMENT:/
    comment_section = true
    next
  else
    posts.last.body &lt;&lt; line
  end
end

puts
puts &quot; # Writing files to #{target_dir} ...&quot;
`mkdir -p #{target_dir}`
`cd #{target_dir} &amp;&amp; rm -rf _posts &amp;&amp; mkdir _posts`

ok, fails = 0, 0

posts.each do |post|
  begin
    File.open(File.join(target_dir, &quot;_posts&quot;, post.file_name), &quot;w+&quot;) { |f| f.puts post.render }
    puts &quot; -&gt; #{post.file_name}&quot;
    ok += 1
  rescue
    puts &quot; # Could not write file for &#39;#{post.title}&#39;&quot;
    fails += 1
  end
end

puts
puts &quot; # All done! (#{ok}/#{fails})&quot;
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubとOctopressで始める無料ブログ]]></title>
    <link href="http://hamasyou.com/blog/2014/02/12/github-octopress/"/>
    <updated>2014-02-12T19:33:48+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/12/github-octopress</id>
    <content type="html"><![CDATA[<p>長いもので、hamasyou.com を初めてから9年経ちました。何年かに一回ブログのデザインを更新したくなるのって普通ですよね。</p>

<p>今までずっと <em>MovableType</em> を使っていたんですが、markdown で書きたくなったのと、MovableType のデザインのいじり方を忘れてしまったため、ブログ環境を一新する決意をしました。</p>

<p>今回作ったブログ環境は次のとおり。</p>

<dl>
<dt>公開用のサーバ</dt>
<dd><a href="http://pages.github.com/" rel="external nofollow">GitHub Pages</a></dd>
<dt>ブログ編集用のCMS</dt>
<dd>ローカルマシン上に <a href="http://octopress.org/" rel="external nofollow">Octopress</a> で構築</dd>
</dl>

<!-- more -->


<h2>GitHub Pages とは</h2>

<p><a href="http://pages.github.com/" rel="external nofollow"><img title="GitHub Pages" class="img-thumbnail" src="http://hamasyou.com/images/2014-02-12-github-octopress.png" alt="http://pages.github.com/" width="400" height="310" /></a></p>

<p>GitHub Pages とは簡単に言うと GitHub のリポジトリを Web サーバとして利用できるサービスです。リポジトリに HTML ファイルをプッシュすると公開される仕組みです。</p>

<p>これがなかなかよく出来ていて、静的ページしか使えませんが、404ページの設定や DNS の CNAME の設定なんかもできます。</p>

<p>リポジトリ名がサイトのホスト名になります（例: <code>http://hamasyou.github.io</code>）。ドメインを取得すれば当然、独自ドメインで運用するなんてことも可能です。</p>

<h2>Octopress とは</h2>

<p><a href="http://octopress.org/" rel="external nofollow"><img title="Octopress" class="img-thumbnail" src="http://capture.heartrails.com/400x300?http://octopress.org/" alt="http://octopress.org/" width="400" height="300" /></a></p>

<p>Octopress は Ruby 用の GitHub Pages スターターキットです。内部で <code>Jekyll</code> や <code>rdiscount</code> を使っていて、簡単に GitHub Pages を利用する環境が構築できて、markdown ですぐに記事を書き始められます。</p>

<p>Octopress の詳しい使い方は <a href="http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/" rel="external nofollow">OctopressでGitHub無料ブログ構築。sourceをBitbucket管理。簡単ガイド！ - 酒と泪とRubyとRailsと</a> が参考になります。</p>

<p>Octopress には様々なテーマが用意されていて、うちのサイトもテーマを使っています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub で複数アカウントを使う]]></title>
    <link href="http://hamasyou.com/blog/2010/10/28/github/"/>
    <updated>2010-10-28T14:37:00+09:00</updated>
    <id>http://hamasyou.com/blog/2010/10/28/github</id>
    <content type="html"><![CDATA[<p>GitHub で複数アカウントを使った場合に、SSH の鍵管理周りではまったので解決方法のメモです。</p>

<p>Special Thanks <a href="http://twitter.com/bongole" rel="external nofollow">@bongole</a></p>

<!-- more -->




<h2>GitHub で複数アカウントを使う</h2>


<p>GitHub で複数アカウントを利用するときの設定です。</p>

<p>GitHub は、アカウントと紐付けて SSH の鍵を管理します。なので、複数アカウントを利用すると同じ SSH の鍵を使えません。</p>

<p>そこで、複数アカウントの SSH の鍵の管理をする方法のメモです。</p>

<p class="option">この記事で別アカウントとして作成するアカウントは mountposition とします。記事中に出てくる mountposition という文字は適宜ご自分の別アカウントのIDに変更してください。</p>




<h3>git の SSH の動き</h3>


<p>git で push を行うと、デフォルトで ~/.ssh/id_rsa 秘密鍵が利用されます。</p>

<p>デフォルトのファイル名以外の秘密鍵を使いたい場合には、 ~/.ssh/config ファイルを設定します。</p>

<p><section></p>

<h4>~/.ssh/config</h4>




<pre>Host github.com
 User git
 Port 22
 Hostname github.com
 IdentityFile ~/.ssh/github_id_rsa
 TCPKeepAlive yes
 IdentitiesOnly yes </pre>


<p></section></p>

<p><em>IdentityFile</em> で指定した鍵ファイルが github.com への接続で使われるようになります。</p>

<h3>GitHub の別アカウント用の SSH 鍵を用意する</h3>


<p>ssh-keygen を利用して、別アカウント用の秘密鍵を作成します。作った秘密鍵と対になる公開鍵を GitHub に登録します。</p>

<p>その後、~/.ssh/config に次の部分を追加します。</p>

<p><section></p>

<h4>~/.ssh/config 追記</h4>




<pre># Client user (mountposition)
Host github-mountposition
  HostName github.com
  User git
  IdentityFile ~/.ssh/github_mountposition_rsa
</pre>


<p></section></p>

<p>github-mountposition というホストへの SSH 接続には ~/.ssh/github_mountposition_rsa 鍵ファイルを使うという設定です。</p>

<p>github-mountposition というのは、この後 git remote add で設定する GitHub 上の別アカウントが所有するリポジトリのホストです。</p>

<p class="option">GitHub ではアカウントごとのリポジトリへ、 git@github-{client名} でつなぐことができるようです。</p>




<h3>git remote add で GitHub 上のリポジトリにアクセスできるようにする</h3>


<p>git remote add を使って GitHub 上のリポジトリへアクセスできるようにします。このとき、通常は git@github.com:{リポジトリのURL} とするところを、git@github-{アカウント名}:{リポジトリのURL} に変更していることに注意してください。</p>

<pre class="console">$ <kbd>git remote add origin git@github-mountposition:{リポジトリのURL}</kbd></pre>


<p>GitHub は SSH でつなぐ先を通常の github.com とは別に、github-{アカウント名} でもアクセスできるようになっています。この github-{アカウント名} という形式を用いて git から SSH で接続することによって、~/.ssh/config の HOST の設定を切り分けられるようにしています。</p>

<h3>~/.ssh/config の IdentityFile を複数書くことで対応する？</h3>


<p>いろいろなところで、~/.ssh/config ファイルの IdentityFile は複数書くことができるとあったのですが、実際にやってみるとうまくいきませんでした。</p>

<h3>Special Thanks</h3>


<p>Special Thanks <a href="http://twitter.com/bongole" rel="external nofollow">@bongole</a></p>
]]></content>
  </entry>
  
</feed>
