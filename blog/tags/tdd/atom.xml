<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: TDD | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/tdd/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-23T22:47:17+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JUnitによるテストファースト開発入門]]></title>
    <link href="http://hamasyou.com/blog/2004/12/12/4797325720/"/>
    <updated>2004-12-12T20:27:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/12/12/4797325720</id>
    <content type="html"><![CDATA[<p>「実装を行った後のテスト」と「実装を行う前のテスト」の違いを明確にしてくれる解説が多く、非常にためになりました。本書の中で「<strong>テストファースト</strong>」とは、「実装を行う前にテスト設計を立てること」だという、非常にシンプルな定義がされていて、テストファーストをはじめて聞く人にはわかりやすいのかなと思いました。</p>

<p>テスト段階で考えるべきことを重点的に解説してあり、プロジェクト中のテスト管理についてまで書かれていて、現場の開発者向けのテスト実践書という感じがしました。</p>

<p>テスト担当者や、これからプロジェクトに参加する開発者の人向けの本です。テストツールとして、「<a href="http://www.junit.org/" rel="external nofollow">DBUnit</a>」などのツールにも触れられていて、本書一冊で、現場のテスト実践のベースができてしまう気がしました。</p>

<p>とても参考になる事が載っているので、初学者の方におすすめです。自分なりの「テストファースト論」ができている人には、知っていることばかりかもしれません。</p>

<!-- more -->




<h2>特徴</h2>


<p>テストを行う上で、気をつけなければいけない事柄、テストケースの作り方、テストツールの使い方、テスト管理の仕方と、プロジェクトで即使える情報が満載です。</p>

<p>従来の開発方法論からイテレーション系の開発方法論に現代のシステム開発がなっている中で、テストの位置づけを詳細に説明されていて、<b>現場の匂いがぷんぷん</b>してきます。下手に抽象度を上げずに、具体的な解説や、具体的な成果物をベースにしているので、とても分かりやすいです。</p>

<p>今後、プロジェクトに「テストファースト」を取り入れたいと思っている開発者の方は、本書を指針にするとスムーズに開発が行っていけるかと思います。とても分かりやすく現場主義なので、開発者におすすめです。</p>

<h2>参考</h2>


<ul>
<li>テストファーストを開発方法論にした「テスト駆動開発」はどうですか。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810714X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>テスト駆動開発の長、ケントベックのバイブル本です。</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>


<ul>
<li>JUnit に関する解説書</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/" rel="external nofollow">G-Tools</a></font><br /></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バグがないプログラムのつくり方 JavaとEclipseで学ぶTDDテスト駆動開発]]></title>
    <link href="http://hamasyou.com/blog/2004/09/30/479810714X/"/>
    <updated>2004-09-30T23:59:00+09:00</updated>
    <id>http://hamasyou.com/blog/2004/09/30/479810714X</id>
    <content type="html"><![CDATA[<p>テスト駆動開発(TDD)は、アジャイル開発に非常に良く適した開発技法である。プログラムを書く前にテストケースを書くという、今までの開発のやり方とはまったく逆の「目的から解法を求める」やり方です。このやり方だと何がいいのかというと、目的が見えているから(テストケースを満足させること)、解法が非常にシンプルになることです。つまり無駄がなくなる。トヨタのカンバン方式をご存知ならば、ほとんど一緒の考え方がこの<strong>テスト駆動開発</strong>になるのです。</p>

<p>本書は、今までの開発方法とは一風変わったテスト駆動開発を、日本人による解説と豊富なサンプルプログラムで分かりやすく理解できます。なぜテスト駆動がいいのかということを、余すことなくかかれています。</p>

<p>開発者だけでなく管理者の方も、本書を読むことで品質の良いプログラムを作るためのきっかけが得られるのではないかと思います。とても良い本だと思うので、少しでもテスト駆動開発に興味のある方は読んでみてください。</p>

<!-- more -->




<h2>解説</h2>


<p>本書のタイトルに『バグがないプログラムの作り方』とあるので、プログラミング技法の本かと思いますが実は違います。</p>

<p>本書は、テスト駆動開発という開発手法の本となります。今までの開発は、「十分な設計 ⇒ 実装 ⇒ テスト」の順で行われているのが主だったと思います。が、テスト駆動開発だと、開発の流れが「必要最低限の設計 ⇒ テスト ⇒ 実装」の順になります。</p>

<p>実装の前にテストを行うのが、テスト駆動開発の特徴です。実装前にテストを行うことに意味があるのかというと、ここに非常に意味があります。品質のよいプログラムを書くためにはテストを最初に行う必要があります。</p>

<p>テスト駆動で開発すると良い事が、本書の中で非常に丁寧に分かりやすく、納得しやすく書いてあるので興味がわいてきたら読んでみてください。すらすら読めてしまうので、3時間もあればほとんど読めてしまうと思います。非常に良いことがかいてあります。</p>

<h2>覚書き</h2>




<h3>リズムが大切</h3>


<p>テスト駆動開発で重要な要素の一つして「リズム」があります。一般的にテスト駆動で開発するときには<a href="http://d.hatena.ne.jp/keyword/xUnit?kid=23897" rel="external nofollow">JUnit</a>を使っています。</p>

<p>このJUnitは、テストに成功すると「グリーン｣、失敗すると「レッド」のバーが出力されます。</p>

<p><strong>テスト駆動開発では、「レッド、グリーン、リファクタリング」というリズムを絶えず繰り返すことが、テスト駆動開発の極意</strong>となっています。最初にテストに失敗することからスタートします。ずっとグリーンだと、ほんとにプログラムがあっているのか不安になってきます。ですので、最初に「レッド」からスタートします。</p>

<p>グリーンにした後にリファクタリングを行うのがポイントで、最初のグリーンにする作業では、一番簡単なやり方(Fake It!)でテストをパスすることだけを考えます。次のリファクタリングフェーズで、重複をなくすようなコードに変更していきます。</p>

<p>テスト駆動で開発するときに、最初のレッドにする作業とグリーンにする作業が非常にかったるくなってくることがあります。でも、ここが我慢のしどころで、「レッド、グリーン、リファクタリング」のリズムを守ることを重視してください。折れそうになったら、「ペアプログラミング」をして、パートナーに何とか抑制してもらいましょう。</p>

<h3>テストコードを書くときのポイント</h3>




<ul><li>テストコードにはコードの意図を伝えるコメントを入れる</li><li>テスト同士が関連するのは避ける</li><li>テストの名前には何のテストをしているかと分かる名前を付ける</li></ul>


<p>テストコードには、引数の意味や数字の意味などを書いておくべきです。テストコードにはリテラルがそのまま使われることが多々ありますので、後々見たときに数字の意味が分かるようにしておくようにします。</p>

<p>プログラムに修正が入る場合、テストコードから最初に修正します。また、テストコードより先にテストコードに書いたコメントを最初に修正します。</p>

<h3>テスト駆動とDependency Injection</h3>


<p><a href="http://www.kakutani.com/trans/fowler/injection.html" rel="external nofollow">Dependency Injection(依存性注入)</a>というものがあります。これは簡単に言うと、クラスの関連を実装と切り離しておいて、第三者によって実装を設定させるというものです。(あんまり上手く説明できてないな・・・)
　
テスト駆動開発を行う上で、あるメソッドをテストするときにクラスの関連が多すぎてテストしにくい場合が出てきます。その場合、設計を見直して関連を減らすことが出来ればいいのですが、出来ない場合も出てきます。</p>

<p>そんな時、MockオブジェクトのほかにもDIを使うことでテストしやすくできます。</p>

<h4>参考</h4>




<ul>
<li><a href="http://blog.drecom.jp/object-garden/archive/28" rel="external nofollow">Object Garden</a></li>
<li><a href="http://www.ingrid.org/jajakarta/cactus/doc/mockobjects.html" rel="external nofollow">モック・オブジェクト 対 コンテナ内テスト</a></li>
</ul>




<h3>「テスト可能」なアプリケーションにするための7つの原則</h3>




<dl>
<dt>1. GUIビューの外側に</dt>
<dd>GUIのビューからコードを切り離すことが出来れば、単純なメソッド呼び出しとしてコードをテスト出来るようになる。</dd>
<dt>2. 型によるエラー検査</dt>
<dd>型の検査はシステムが自動的に行ってくれます。高い抽象度で型を切り出すことは、ほとんどの場合よいことです。</dd>
<dt>3. 「断層線」を避けるために仲介機能(mediator)を利用する</dt>
<dd>独立したコンポーネント同士のインターフェースに仲介役を用意すると、公開メソッドの呼び出しのみを使ってコンポーネントをテストすることが簡単になります。</dd>
<dt>4. メソッド、小さなシグニチャーおよびデフォルトの引数</dt>
<dd>小さな引数や、シグネチャを持つメソッドが複数(オーバーライド)あるほうが、テスト時に簡単に呼び出せます。</dd>
<dt>5. アクセサーは、メモリー状態を修正してはいけない</dt>
<dd>テストでオブジェクトの状態を検査するときには、オブジェクトの状態を変更しない用にするべきです。さもなければ、内部状態を検査しにくくなってしまいます。</dd>
<dt>6. インターフェースを使ってプログラム外のコンポーネントを明示する</dt>
<dd>プログラム外のコンポーネント接続にはインターフェースを使うことで、すべてのコードがそろわなくてもテストすることが出来るようになります。</dd>
<dt>7. 最初にテストから考える</dt>
<dd>最初にテストから実装することで、実装段階で間違いを発見することが出来るようになります。</dd>
</dl>




<h4>参考</h4>


<p><a href="http://www-6.ibm.com/jp/developerworks/java/020125/j_j-diag0911.html" rel="external nofollow">「テスト可能な」アプリケーションの設計 IBM</a></p>

<h2>参考</h2>


<ul>
<li>テスト駆動開発といったらケントベックは外せません。</li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>


<ul>
<li>JUnitに関することならこれがおすすめ</li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325143/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>


<ul>
<li>テストファースト開発に関して分かりやすく解説しています。JUnitの使い方に関しても解説されています。</li>
</ul>


<div class="rakuten"><table border="0" cellpadding="5" width="400"><tr><td valign="top"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797325720/sorehabooks-22/" rel="external nofollow"></a><br /></td></tr></table>
</div>



]]></content>
  </entry>
  
</feed>
