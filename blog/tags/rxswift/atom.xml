<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: RxSwift | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/tags/rxswift/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2017-09-03T15:14:29+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[iOS] ReSwift の State を RxSwift っぽく使えるようにする]]></title>
    <link href="http://hamasyou.com/blog/2017/05/10/swift-reswift-rxswift/"/>
    <updated>2017-05-10T11:08:30+09:00</updated>
    <id>http://hamasyou.com/blog/2017/05/10/swift-reswift-rxswift</id>
    <content type="html"><![CDATA[<p>Swift ライブラリの <a href="https://github.com/ReSwift/ReSwift">ReSwift</a> を <a href="https://github.com/ReactiveX/RxSwift">RxSwift</a> に合わせて使えるようにするメモです。</p>

<h2>ReSwift とは</h2>

<p>ReSwift とは、iOS アプリを <a href="https://github.com/reactjs/redux">Redux</a> のように作れるようにしてくれるライブラリです。</p>

<p>スマホアプリを作っていると</p>

<ul>
<li>アプリの状態管理を一元管理したい</li>
<li>アプリの状態が変わったら、UI を最新に更新したい</li>
</ul>


<p>という要求が出てくると思います。そんなときに、ReSwift でステートを一元管理し、UI の更新を RxSwift の I/F に合わせて使えると結構便利です。</p>

<!-- more -->


<h2>ソースコード</h2>

<p>ということで、メモ書きなので、さっとソースを貼り付けておきます。</p>

<pre><code class="swift">
/// アプリの `Store` クラス
/// Rx 拡張を行うために独自クラスを作成する
class AppStore : Store&lt;AppState&gt; {

    required convenience init(reducer: @escaping (Action, AppState?) -&gt; AppState, state: State?) {
        self.init(reducer: reducer, state: state, middleware: [])
    }

}

/// AppStore を Rx 化するためのプロキシ
class AppStoreProxy&lt;SelectedState&gt; : StoreSubscriber {

    typealias StoreSubscriberStateType = SelectedState

    private weak var source: AppStore?
    private(set) var subject = PublishSubject&lt;StoreSubscriberStateType&gt;()

    fileprivate init(source: AppStore) {
        self.source = source
    }

    func newState(state: StoreSubscriberStateType) {
        subject.on(.next(state))
    }

    deinit {
        subject.on(.completed)
    }
}


extension AppStore : ReactiveCompatible {
}


extension Reactive where Base: AppStore {

    func state() -&gt; Observable&lt;AppStore.State&gt; {
        return state { $0 }
    }

    func state&lt;SelectedState: StateType&gt;(selector: @escaping ((AppStore.State) -&gt; SelectedState)) -&gt; Observable&lt;SelectedState&gt; {
        return Observable.create { observer in
            let proxy = AppStoreProxy&lt;SelectedState&gt;(source: self.base)
            _ = proxy.subject.bind(to: observer)

            self.base.subscribe(proxy, transform: { (subscriber: Subscription&lt;AppState&gt;) -&gt; Subscription&lt;SelectedState&gt; in
                subscriber.select(selector)
            })

            return Disposables.create {
                self.base.unsubscribe(proxy)
            }
        }
    }

    func state&lt;SelectedState: StateType &amp; Identifiable&gt;(selector: @escaping ((AppStore.State) -&gt; SelectedState)) -&gt; Observable&lt;SelectedState&gt; {
        return Observable.create { observer in
            let proxy = AppStoreProxy&lt;SelectedState&gt;(source: self.base)
            _ = proxy.subject.bind(to: observer)

            self.base.subscribe(proxy, transform: { (subscriber: Subscription&lt;AppState&gt;) -&gt; Subscription&lt;SelectedState&gt; in
                subscriber.select(selector)
            })

            return Disposables.create {
                self.base.unsubscribe(proxy)
            }
        }
    }
}
</code></pre>

<p>これで、ReSwift の <code>State</code> を次のように書くことができます。</p>

<pre><code class="swift">store.rx.state { $0.userState }
  .map { $0.name }
  .bind(to: nameLabel.rx.text)
  .disposed(by: disposeBag)
</code></pre>

<h2>オブザーブしているステートが更新されたときのみ通知して欲しい時</h2>

<p>ReSwift を RxSwift のように使うだけであれば、上の拡張でいいのですが、たくさんステートが出来てくると、
関係ないステートが更新されたときにも変更が通知されてしまって、パフォーマンスを気にすることが出てくるかもしれません。</p>

<p>そんなときは、<code>distinctUntilChanged</code> を使って、監視しているステートが更新されたかどうかを確認するようにするといいと思います。</p>

<p><code>State</code> 自体を <code>==</code> で比較できるように、State に <code>Identifier</code> を導入して、更新されたかどうかをチェック出来るようにしてみます。
(というのも、State は構造体(<code>struct</code>) で作ることになると思うので、同一のステートかどうかの一致が大変なのです。)</p>

<h3>State に一意性を持たせる</h3>

<pre><code class="swift">/// 識別子コンポーネント
struct IdentifiableComponent : Hashable {

    typealias Identifier = UInt64

    /// インスタンス生成毎に一意になる値を生成するクラス
    private struct Counter {
        static let lock = DispatchSemaphore(value: 1)
        static var count: Identifier = 0
        static func getAndIncrement() -&gt; Identifier {
            lock.wait()
            defer { lock.signal() }
            count += 1
            return count
        }
    }

    /// インスタンスの識別子
    private(set) var identifier: Identifier = Counter.getAndIncrement()

    var hashValue: Int { return identifier.hashValue }

    mutating func update() {
        identifier = Counter.getAndIncrement()
    }

    static func ==(lhs: IdentifiableComponent, rhs: IdentifiableComponent) -&gt; Bool {
        return lhs.identifier == rhs.identifier
    }
}

protocol HasIdentifiableComponent : Equatable {
    var identifiableComponent: IdentifiableComponent { get }
}

/// 識別子を持つタイプ
protocol Identifiable : HasIdentifiableComponent {
}

extension Identifiable {

    var identifier: IdentifiableComponent.Identifier {
        return identifiableComponent.identifier
    }    

    static func ==(lhs: Self, rhs: Self) -&gt; Bool {
        return lhs.identifiableComponent == rhs.identifiableComponent
    }
}
</code></pre>

<p>複雑そうなことをやっていますが、要はインスタンスを生成するたびに一意の数値を割り当てて、
状態が更新されたらその値をインクリメントするという方法で、数値比較だけで状態が変わったかを判断できるようにしています。</p>

<p>この識別子コンポーネントを State に持たせるようにして</p>

<pre><code class="swift">
struct UserState : StateType, Identifiable {

  fileprivate(set) var identifiableComponent = IdentifiableComponent()

  var name: String?
}

// MARK: - Reducer
extension UserState {    
    static func reducer(state: UserState?, action: Action) -&gt; UserState {
        var state = state ?? UserState()

        switch action {
        case let action as UserActions.SetName:
            state.name = action.name
            state.identifiableComponent.update()

        default:
            break
        }

        return state
    }
</code></pre>

<p>こんな感じで、ステートが更新したときに、<code>identifiableComponent.update()</code> を呼び出すと状態が更新されたことをマークします。
これで、ステートが更新されたときだけ UI を更新するようなコードを次のように書けるようになります。</p>

<pre><code class="swift">store.rx.state { $0.userState }
  .distinctUntilChanged()
  .map { $0.name }
  .bind(to: nameLabel.rx.text)
  .disposed(by: disposeBag)
</code></pre>

<p>パフォーマンスも気にせず使えるようになりました。</p>

<p>既存のプロジェクトからの抜粋なので、一部省略している箇所があります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Extensions Basic]]></title>
    <link href="http://hamasyou.com/blog/2015/12/15/reactive-extensions-basic/"/>
    <updated>2015-12-15T11:11:45+09:00</updated>
    <id>http://hamasyou.com/blog/2015/12/15/reactive-extensions-basic</id>
    <content type="html"><![CDATA[<p><strong>Reactive Extensions (Rx)</strong> の覚書です。主に RxSwift をベースにしていますが、ReactiveX 全般に通じると思います。</p>

<p>細かいニュアンスは間違っているかも。。</p>

<p>基本用語の整理です。</p>

<!-- more -->




<div id="toc"></div>


<h2>Reactive Extensions</h2>

<p>大雑把に言うと、<strong>Observer Pattern (オブザーバパターン)</strong> と <strong>Stream/Sequence Programming</strong> を合わせたものが <strong>Reactive Extensions</strong> です。</p>

<h3>Observable</h3>

<p>オブザーバパターンにおいて、観測される対象を Subject と呼びますが、Rx では観測される対象のことを <strong>Observable</strong> と呼びます。観測する側は <em>Observer (オブザーバ）</em> なので、観測される側は <em>Observable</em> なわけです。</p>

<p>Rx では、Observable なものを <code>subscribe</code> (購読) することで、Observable から送られてくるデータを受け取ります。この、Observable からデータが流れてくることを <strong>Stream (ストリーム)</strong> と呼びます。流れてくるデータは <strong>Element</strong> と呼ばれます。</p>

<pre><code class="swift">someObservable
    .subscribe { (e: Event&lt;Element&gt;) in
        switch e {
        case .Next(let val):
        case .Error(let error):
        case .Completed:
        }
    .scopedDispose()
</code></pre>

<p>ストリームには状態が3種類あり、それぞれ <code>Next</code>、<code>Error</code>、<code>Completed</code> になります。</p>

<h4>Next</h4>

<p>ストリームから次のデータが流れてきたことを表します。正常処理と考えて構いません。</p>

<h4>Error</h4>

<p>Observable な対象が何かしらエラーを起こし、観測したかったデータが流れてこなかったことを表します。Rx では、Error を起こしたストリームは閉じられます。つまり、次のデータが流れてこないことを表します。</p>

<h4>Completed</h4>

<p>Observable な対象のストリームが閉じられ、この Observable な対象からは今後データが流れてこないことを表します。</p>

<h4>dispose</h4>

<p>観測を取りやめたい時には、<code>dispose</code> を呼び出します。いつ dispose するかを使い分けられるように、<code>Dispose</code> の実装がいろいろあります。</p>

<h3>Subject</h3>

<p><strong>Observable</strong> は観測対象のことでしたが、Rx においては観測可能な事柄のことを <strong>Subject (事象)</strong> と呼ぶほうが一般的だったりします。Subject を観測するわけですが、観測するデータのことは <strong>Behavior (振る舞い)</strong> と呼ばれます。<code>Subject</code> / <code>Behavior</code> は Reactive Extensions における一般的な説明となりますが、こと Rx Programming においては、<code>Observable</code> と <code>Subject</code>、<code>Element</code> と <code>Behavior</code> は似て非なるものとして扱われています。</p>

<h2>Hot and Cold Observables</h2>

<p>Observable な対象は、2つの種類にわけられます。<code>Hot</code> と <code>Cold</code> です。</p>

<h3>Hot Observable</h3>

<p>Hot な Observable とは、観測対象である Observable が作られたときから、任意のタイミングでデータを送信することができるものになります。</p>

<p>実はこの Hot Observable のことを、Rx Programming では <em>Subject</em> と呼ばれています。Subject は任意のタイミングでデータをストリームに流すことができ、同時に Observable なわけです。</p>

<p>Subject は任意のタイミングで <strong>Behavior (振る舞い)</strong> を決められることから、Subject / Behavior はセットで使われる言葉になります。</p>

<pre><code class="swift">    let msg = PublishSubject&lt;String&gt;()

    msg.subscribeNext { print($0) }

    msg.onNext("Hello World")
    msg.onCompleted()
</code></pre>

<h3>Cold Observable</h3>

<p>Cold な Obserable は、任意のタイミングでデータを流すことができません。いつデータが流れてくるのかわかりませんし、観測対象がいなければ、そもそも振る舞いが起きることもありません。</p>

<p>よく、API 通信を Observable にしますが、subscribe (観測) を忘れると、API 呼び出しがされないことになりますので注意が必要です。</p>

<pre><code class="swift">    API.call()
        .subscribeNext {
            // When to occur?
        }        
</code></pre>

<h2>Rx でプログラミングすると何が嬉しいか</h2>

<h3>テスタビリティが向上</h3>

<p>Rx は UI プログラミングで語られることが多いと思いますが、プログラムのあらゆる境界を Observable でつなぐことで、テスタビリティが向上します。</p>

<p>Observable でつなぐことにより、直接のデータの生成元に依存せずにプログラムを記述することができるようになるので、テスト時だけデータ生成部分をいじることで、例えば API 通信結果を画面に表示するようなプログラムでも、API 通信を行うことなくデータを生成し、Stream に流すことで色々な依存関係を排除することが出来るのです。</p>

<pre><code class="swift">func something(dataSource: Observable&lt;DataSource&gt;) {
    dataSource.
        subscribeNext {
            // do something
        }
}

// development
something(API.call())
// test
something(just(DummyDataSource()))
</code></pre>

<h3>非同期処理</h3>

<p>また、Rx には Stream の観測を任意のスレッドで行うスケジューリングの機能が備わっているものがほとんどですので、時間の掛かるデータ生成処理はバックグラウンドで行い、UI の表示処理のところだけメインスレッドで行うといったことを容易に行なえます。</p>

<pre><code class="swift">API.call()
    .map { $0.toViewModel() }
    .subscribeOn(BackgroundScheduler.sharedInstance)    
    .observeOn(MainScheduler.sharedInstance)
    .subscribeNext { (viewModel) in
        // UI バインディング
    }
    .addDisposeBag(disposeBag)    
</code></pre>

<h3>データソースの更新をリアルタイムに同期</h3>

<p>プログラムを書いていると、データソースの値を加工して別のところで使うという場面が多々あります。</p>

<p>このとき、何も考えずにプログラムすると、データソースが変更されても結果は変わらないという挙動になります。</p>

<pre><code class="swift">var a = 1
var b = 2
var c = ""

if a + b &gt;= 0 {
    c = "\(a + b) is positive"
}

a = 4

print(c)        // ""
</code></pre>

<p>こういった挙動でかまわないという場合もあるでしょうが、ほとんどの場合データソースの変化に合わせて挙動が変わってくれたほうが嬉しかったりします。そんな時は全部 Observable にします。</p>

<pre><code class="swift">let a = Variable(1)
let b = Variable(2)

let c = combineLatest(a, b) { $0 + $1 }
            .filter { $0 &gt;= 0 }
            .map { \($0) is positive" }            

c.subscribeNext {
    print($0)
}

a.value = 4
</code></pre>

<h2>Operators</h2>

<p>Rx には、Stream を操作するためのいろいろな演算が用意されています。Stream を別の形に変換する <code>map</code> や、複数の Stream を結合する <code>merge</code> や <code>concat</code> がなどがあります。</p>

<p>Stream の合成は使いドコロとしては API 通信などの時間の掛かる処理とキャッシュデータを返すストリームとを合成するなどが考えられます。</p>

<pre><code class="swift">sequenceOf(1, 2, 3, 4, 5)
    .map { $0 * $0 }
    .subscribeNext {
        print($0)
    }
    .scopedDispose()


let dataFromCache = CacheStore.fromCache()
dataFromCache.concat(API.call())
    .subscribeNext {
    }
    .addDisposeBag(disposeBag)
// もしくは
API.call()
  .startWith(dataFromCache)
  .subscribeNext {    
  }
  .addDisposeBag(disposeBag)
</code></pre>
]]></content>
  </entry>
  
</feed>
