<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-13T15:22:14+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webエンジニアのための データベース技術[実践]入門]]></title>
    <link href="http://hamasyou.com/blog/2012/05/09/4774150207/"/>
    <updated>2012-05-09T00:47:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/05/09/4774150207</id>
    <content type="html"><![CDATA[<p>「データベース技術実践入門」とタイトルにはありますが、この本は入門ではなく「おぼえがき」のようなものだと読んで感じました。データベースの<em>設計</em>を行う際の注意点や、こういう点は押さえておくべきということを広く確認できる構成になっていたからです。</p>

<p>例えば、インデックスの種類を挙げ、データ数が増えてきた際にどのようにインデックスが効いてくるか、逆に効かなくなってくるかをまとめてあったり、データベースが吐き出すログにはどのようなものがあり、障害時の復旧手順のなかでどのログがどのような役割をになっていたりするかをまとめてあったりします。</p>

<p>また、最近のストレージ動向にも目を向け、データベースのパフォーマンスを上げるためにはどうすればよいかを解説していたりもします。</p>

<p>本書はつまるところ、「<em>データベースを自分で構築し、（大規模なデータを扱う）サービスと絡めて運用する人向け</em>」の本だと思います。「Webエンジニアのための」と書いてありますが、全てのエンジニアではなく、昨今話題のスマートフォン向けソーシャルゲームや、大量ログを扱わなければならないようなサービスを運営する中小規模の開発会社の開発者向けです。</p>

<p>DBの設計や、エンタープライズシステム向けのデータベースを扱う際に読むような本ではないですが、サラッと読んで知識を蓄える感じで読むのにステキなまとめられかたをしていると思います。</p>

<p>ちなみに、本書で扱っているデータベースは <em>MySQL</em> になります。</p>

<!-- more -->




<h2>おぼえがき</h2>




<h3>片方向/非同期レプリケーション</h3>


<p>片方向レプリケーションは、「マスタ」に更新した結果が「スレーブ」に「非同期」で伝搬するというタイプのレプリケーションである。マスタで実行した更新系 SQL 文が<em>バイナリログ</em>というログファイルに記録され、このログファイルの中身がスレーブ側で順次実行される。</p>

<p>スレーブでは「<em>バイナリログの受信</em>」と「<em>バイナリログの実行</em>」の2段階で行われる。「バイナリログの受信」は I/O スレッド、「バイナリログの実行」は SQL スレッドが実行する。</p>

<p>このレプリケーションでは、バイナリログの受信よりも、バイナリログの実行の部分で遅延が発生しやすくなる。これは、ネットワークよりもディスクがボトルネックになることが多いからである。</p>

<h4>障害の状況パターン</h4>




<ol><li>マスタで生成したバイナリログがスレーブで最後まで受信出来ていない</li>
<li>スレーブでバイナリログの実行が最後まで行われていない</li></ol>


<ol>
<li><p>の場合はマスタを復旧させ、最新のバイナリログをスレーブに更新しなければ、最新のバイナリログ分のデータロスになる。</p></li>
<li><p>の場合は、スレーブがマスタの代わりに処理を継続する（マスター昇格）することで障害対応が可能だが、<em>バイナリログを最後まで実行し終わったことを確認</em>してから処理しなければ、データ不整合が発生することになる。</p></li>
</ol>


<h3>片方向/準同期レプリケーション</h3>


<p>「バイナリログの受信」を同期処理するようにしたもの。障害パターンの1. の状況が限りなく発生しなくなるメリットがある。デメリットとしては、マスタ→スレーブの通信を同期するため、スレーブからのレスポンス分スループットが悪くなる。</p>

<h3>片方向/同期レプリケーション</h3>


<p>「バイナリログの実行」までを同期処理するようにしたもの。MySQL では実装されていない。</p>

<h3>双方向レプリケーション</h3>


<p>双方向レプリケーションは、マスタを複数用意しそれぞれのマスタを更新できるようにするもの。マルチコア CPU や、SSD などのハードウェアの性能をより引き出すことができる。</p>

<p>ただし、それぞれのマスタに対して同時に更新を行った際の分散排他制御の仕組みが不可欠で、DBMS によって実装方法はまちまち。</p>

<h3>障害からの復旧方法</h3>


<p>トランザクション対応のデータベースの多くは、REDO ログという更新対象列の変更情報を記録したファイルを使って一貫性を保っている。</p>

<p>MySQL は更新されたデータをすぐにディスクに書き込むのではなく、キャッシュ領域に保持しており定期的にディスクに書き込むという処理を行なっている。そのため、データベースがクラッシュするとキャッシュ領域がクリアされ、ディスクに書かれたデータが古い状態ということが起きる。</p>

<p>そこで、クラッシュから回復するときには、最初に REDO ログからディスクの状態を最新の状態に戻す（進める）必要がある。</p>

<h3>MySQL のレプリケーションはシングルスレッド</h3>


<p>MySQL のレプリケーションはシングルスレッドで行われる。そのため、マスタが並列で大量に処理をさばいたとしても、レプリケーション処理が詰まってしまうということが大規模サービスでは起きてしまう。</p>

<p>遅延の主な要因はディスク I/O が低速なことであるため、スレーブには SATA SSD などの高速なディスクを使うことでこの問題を解決するのが現実的。</p>

<p>最近では、PCI-Express インターフェースをもつ FusionIO社の ioDrive や Virident社のFlashmax などが使われている。</p>

<h3>運用の勘所</h3>


<p>CPU 使用率で監視すべき点が3つある。</p>

<ul><li>ディスクI/O（%iowait）</li>
<li>システム空間での使用率（%system）</li>
<li>ユーザ空間での使用率（%user）</li></ul>




<dl><dt>ディスクI/O（%iowait）</dt>
<dd><p><em>ディスクI/Oがボトルネック</em>になっている場合、この値が跳ね上がる。</p></dd>
<dt>システム空間での使用率（%system）</dt>
<dd><p>OS 内の処理で使用されている CPU 率。<em>スワップが発生したり、ネットワーク周りでトラブルがおきている場合</em>この値が跳ね上がることがある。</p></dd>
<dt>ユーザ空間での使用率（%user）</dt>
<dd><p>CPU を使うような処理が多いことを表す。DB サーバではあまり大きな値になることはないが、大きくなった場合はテーブルスキャンを連発しているなどの問題があることが多い。</p></dd></dl>




<h3>リストアとリカバリ</h3>


<p><strong>リストア（バックアップの結果を戻す）</strong>だけでは、障害直前の状態に復旧することはできない。バックアップ以降にも処理が行われており、その更新結果は<strong>バイナリログ</strong>に記録されている。</p>

<p>リストアしたあとに、バイナリログの中身を順番に当てていくことで、障害直前の状態に戻すことができる。</p>

<h3>NoSQL</h3>


<p>「SQL文のような複雑な言語を使わずにプログラミング言語のライブラリ関数を使って直接データアクセスするほうが高速になるのではないか？」このような背景から生まれたのが <strong>NoSQL</strong>。</p>

<p>NoSQL では、テーブル/ファイルを開っぱなしにして処理性能を高めるようにしている。</p>

<p>一般的な NoSQL では、<em>トランザクションをサポートしていない</em>。また、<em>スキーマレス</em>なため主に XML や JSON を格納して扱う。<em>インデックスは主キー</em>以外使えないと思ったほうがよい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[楽々ERDレッスン]]></title>
    <link href="http://hamasyou.com/blog/2006/07/17/4798110663/"/>
    <updated>2006-07-17T08:36:00+09:00</updated>
    <id>http://hamasyou.com/blog/2006/07/17/4798110663</id>
    <content type="html"><![CDATA[<p>本書は、著者である羽生 章洋さんのご自分の経験を元に、データベース設計を行う底力を教えてくれる教科書です。テーブル設計のやり方や、コード体系の考え方、経営資産としてのデータベース、RDBMSを資産活用するためのSQLの書き方など、筆者の経験を惜しみなく公開されているという感じです。</p>

<p>最近はデータモデリングという言葉がもてはやされています。データモデリングにも色々な流派があり、コード体系、識別子、主キーの扱い、関係の扱いなど考え方がさまざまです。僕が読んできたデータモデリングの本で、これまでで一番共感が持てる考えが本書の考え方でした。もちろん、これまで読んできた本に書かれていることも多く、同じ考えをしているところも多々あります。ただ、本書はそういった部分を筆者の経験を元に解説しているので、非常にわかりやすいのです。</p>

<p>本書はデータモデリングとは何か、RDBの設計の練習がしたい人、ER設計に興味がある人が読者対象です。プログラマからSE、コンサルタントまで読んでおくと必ず為になる一冊だと思います。おすすめです。</p>

<!-- more -->




<h2>覚書</h2>




<h3>エンティティの候補</h3>


<p>データベースを設計する上で、もっとも重要なことは 「<strong>何を記録するか</strong>」 です。記録しないもの、記録したくないものはデータベース設計は行いません。この、記録したいものを2つの種類に分類すると次のようになります。</p>

<p><blockquote><p>「モノ」 に関する記録のことを 「リソース（資源）系エンティティ」、「出来事」 についての記録のことを 「イベント系エンティティ」 と読んだりします。</p></p><p><p></p><footer><strong>本書 p.25 「エンティティ名の決め方」 より抜粋</strong></footer></blockquote></p>

<p>出てきたエンティティは、業務上のモデルと <strong>6W3H</strong> で照らし合わせて確認することができます。</p>

<p><blockquote><p>「リソース系」</p></p><p><ul><li>誰に （Whom）</li><br/><li>誰が （Who）</li><br/><li>何を （What）</li><br/><li>どこへ （Where）</li></ul></p><p><br/><p>「イベント系」</p></p><p><ul><li>どのように （How）</li></ul></p><p><br/><p>「属性の候補」</p></p><p><ul><li>いつ （When）</li><br/><li>どれくらい （How many）</li><br/><li>いくら （How much）</li></ul></p><p><br/><p>「ビジネス上の正規化の対象となってくるもの」</p></p><p><ul><li>なぜ （Why）</li></ul></p><p><br/><p></p><footer><strong>本書 P.25 「エンティティ名の決め方」 より抜粋</strong></footer></blockquote></p>

<h3>コードとキーの違い</h3>




<h4>キーの種類</h4>


<p>データベース上で扱われるキーには大きく3つに分けられます。</p>

<ol><li>主キー</li><li>外部キー</li><li>ユニークキー</li></ol>


<p>主キーは、「候補キー」 の中から選ばれ、レコードを一意に識別することができるキーのことです。外部キーは、他のレコードを参照する際のキーのことです。ユニークキーは、他のレコードと重複が無い一意な値をもつキーのことです。</p>

<p>「候補キー」 は、レコードを一意に識別することができるキーの集まりのことです。例えば、シーケンシャル番号や社会保障番号、名前と生年月日の組み合わせも候補キーとして使えるかもしれません（業務による）。業務で使っている 「<strong>コード</strong>」 も候補キーの一つといえます。</p>

<h4>コードとキーの違い</h4>


<p><blockquote><p></p></p><p><ul style="margin-top:0px; margin-bottom: 0px"><li>コード体系は、ユーザがレコードに容易に到達するためのユーザインターフェースである</li><br/><li>コード体系は、システムの都合ではなくビジネスの都合によって決定されるものである</li></ul></p><p><br/><p></p><footer><strong>本書 P.30</strong></footer></blockquote></p>

<p>つまり、コードはユニークキー、さらに言えば候補キーになるということです。しかし、コードはビジネスの都合によって変えられることがあるので、主キーとしてはふさわしくありません。主キーを考えることは、レコードのID （アイデンティファイア） を考えることと同じことなのです。</p>

<p><blockquote><p>アイデンティファイアは、インスタンスのライフサイクル （一般にデータライフサイクル：DLCとも呼ばれます。） を表現していると考えればいいでしょう。その集合中に属してから消滅するまでの間、特定のインスタンスであることを示す座標として機能しているわけです。</p></p><p><p></p><footer><strong>本書 P.33</strong></footer></blockquote></p>

<p>コードは、ビジネスに合わせて柔軟に変更できるべきであるが、アイデンティファイア はそのレコードが存在する間は変更されてはいけないのです。</p>

<h2>参考</h2>


<ul>
<li>データモデリングの一つの流派。リソースとイベントとというエンティティの分け方についてよくわかります。</li>
</ul>


<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>データモデリングを学ぶならはずせない一冊</li>
</ul>


<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>業務知識と共にDB設計を</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109274/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[データベース実践講義―エンジニアのためのリレーショナル理論]]></title>
    <link href="http://hamasyou.com/blog/2006/05/23/4873112753/"/>
    <updated>2006-05-23T07:08:00+09:00</updated>
    <id>http://hamasyou.com/blog/2006/05/23/4873112753</id>
    <content type="html"><![CDATA[<p>この本は、RDB (リレーショナルデータベース) とは何か？ を理解するためのものです。RDB を学ぶ上で理解しておきたい用語 （<strong>関係と型</strong>、<strong>タプルと関係</strong>、<strong>関係変数</strong>、<strong>リレーショナル代数</strong>、<strong>整合性制約</strong>など) を説明し、RDB の概念を解説しています。</p>

<p>実践派と理論派のどっちよりの本かというと、本書はかなり理論に片寄った本です。用語も正確に書いてあるためか、一度の読みで理解することが難しかったです。</p>

<p>RDB の基礎概念を、理論的にしっかりと身に着けたい人に本書はおすすめです。かなり正確に書かれているような印象を受けました。ただし、それなりに読みづらいですが・・・。なお、特定の DBMS に依存した内容には触れられていません。</p>

<!-- more -->




<h2>感想</h2>


<p>読んでいて一番に感じたのは、良い意味で硬い文章だなというものです。理論的な本なので、それなりに硬い文章だとは覚悟していましたが、それにしても硬いです。</p>

<p>その文、用語の説明や定義は正確だという印象を受けました。たぶん、書かれている内容自体はそんなに難しいものでもないし、変なことでもないと思います。ただ、読んで理解するには集中できる環境が必要だったというだけです。</p>

<p>本書を読んでいてふと、識別子と主キーって何が違うんだったっけ？ と疑問がわいてきました。本書の中に答えがあったはずですが、僕は別の本を取り出して読み返しました。 『<a href="http://www.amazon.co.jp/exec/obidos/ASIN/488373109X/sorehabooks-22/249-7560247-3533949?%5Fencoding=UTF8&camp=247&link%5Fcode=xm2" rel="external nofollow">T字形ER データベース設計技法 (佐藤 正美:著)</a>』</p>

<p>理論系の本を読むと別のいろんな本にリンクしますね。</p>

<p>とにかく、「硬い文章、正確な用語の定義、理論」 と、3拍子そろった読みにくそうな本ですが、<strong>リレーショナル理論</strong> に関する正確な知識を得たい人にはおすすめの本です。内容的には悪くありませんでした。</p>

<h2>参考</h2>


<ul>
<li>T字形ER に関するデータベース設計理論</li>
</ul>


<div class="rakuten">
<table width="400" border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>


<ul>
<li>データモデリングの技を鍛える</li>
</ul>


<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109851/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>


<ul>
<li>実践的データモデリング</li>
</ul>


<div class="rakuten">
<table width="400"  border="0" cellpadding="5"><tr><td colspan="2"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[できる人のモデル思考力 -データモデルはこう使え!!]]></title>
    <link href="http://hamasyou.com/blog/2005/11/12/4774124346/"/>
    <updated>2005-11-12T10:44:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/11/12/4774124346</id>
    <content type="html"><![CDATA[<p>「<strong>ビジネスマンだからこそモデリングを覚えるべきだ！</strong>」本書はこう主張しています。その根拠は、システムはビジネスでやりたいこと（What）を具現化したものだから、ビジネスマンがモデリングを覚えてシステムのモデルを整理できることが一番正確で一番早いから、です。</p>

<p>しかし現実はそうかんたんには行きません。ビジネスマンにはモデリングを覚えることよりももっと他に優先度の高いことがあります。だからこそ、RFP（提案依頼書）作成の代行サービスが流行っているのです。</p>

<p>本書は、そんな<strong>時間の無いビジネスマンに、モデリングという作業を分かりやすく短時間で身に着けてもらうための本</strong>になっています。SI業務でデータベース設計をやったことがある人や、要件定義やシステム分析をバリバリにやっているコンサルタントやSEには少し物足りない内容になっています。</p>

<!-- more -->




<h2>特長</h2>




<h3>ビジネスのモデル化とはビジネスルールを記述すること</h3>


<p>モデリングという作業は、モノを整理する作業です。モデリングは別にシステム開発だけにかかわる技術ではありません。色々なものを、色々なときにモデリングという作業を通して、整理し、理解することが出来るようになります。</p>

<p>システム開発にスポットを当てて考えてみると、ビジネスマンは何をモデリングするべきなのでしょうか？それは、<strong>ビジネスルール</strong>なのです。システムが行うことと言うのは、このビジネスルールを実行することに他なりません。</p>

<p>本書では、このビジネスルールのモデリングに焦点を当てています。ビジネスルールのモデリングをさらに詳細化すると、<strong>データ</strong>、<strong>プロセス</strong>、<strong>インターフェース</strong>に分けられます。この中で、<strong>データ</strong>に重きを置いて考える方法論に<strong>DOA（データ指向アプローチ）</strong>と言うものがあります。</p>

<p>本書の後半は、このDOAについての説明と、DOAの考え方でデータモデリングを行っていく実際の方法を説明しています。</p>

<h2>参考</h2>


<ul>
<li>データモデリングをさらに詳しく勉強したいならコレ！</li>
</ul>


<div class="rakuten"><table  width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534032501/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>データモデリングとは何か？もっと基礎的で、もっと実践的な解説はコレ！</li>
</ul>


<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>DOAの権威による、彼独特の表記法で学ぶ方法論</li>
</ul>


<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798109851/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>データベース設計方法論。T字形ERモデルと言えば分かる人にはわかる</li>
</ul>


<div class="rakuten"><table width="400"  border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883732169/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[業務モデルとデータモデルの考え方]]></title>
    <link href="http://hamasyou.com/blog/2005/07/03/4798106453/"/>
    <updated>2005-07-03T17:00:00+09:00</updated>
    <id>http://hamasyou.com/blog/2005/07/03/4798106453</id>
    <content type="html"><![CDATA[<p>僕は最初この本を読んだとき、内容をあまり理解できませんでした。それは、趣味でしかモデリングをやっていなかったからです。つまり、業務の知識がまったくなかったのです。</p>

<p>本書は、業務をどうデータモデルに落とすか、ER図に落とすかというところを解説しています。そこには、どんなツールを使うか、どんなフローを書けばいいのかといったことまで含まれています。</p>

<p>「なんだか実務をこなしているみたい」と、読後は思いました。それくらい、<strong>実践よりの本</strong>になっています。データモデリング初心者でも読みこなせる優しい文章になっていますが、<b>業務知識がないと読み進めることがつらい</b>です。</p>

<!-- more -->




<h2>特徴</h2>




<h3>業務プロセスの話も含まれている</h3>


<p>データモデルの本と言うのは、実はあまり<strong>業務プロセス</strong>について触れられていなかったりします。</p>

<p>本書は、業務プロセス、ビジネスフローについても書かれています。ビジネスの現場でモデリングを使うには、当然ビジネスプロセスの話も必要になってきます。本書は、業務プロセスの分析とモデリングを一緒に解説しています。</p>

<h3>ツールの解説が豊富</h3>


<p>例えば、ビジネスフローについて解析したいとき、便利なのは「Xupper（ケン・システムコンサルティング）」であったり、IDEF0のツールとして有名なのは「All Fusion Process Modeler(コンピュータ・アソシエイツ）」であるといったことが本書では挙げられています。</p>

<p>モデリングの説明ばかりでなく、ツールの説明までしているところが、実際の現場で役に立ちそうだといえます。ツールだけでなく、命名規則の話や、識別子のつけかたの話など、盛りだくさんです。</p>

<h2>参考</h2>


<ul>
<li>データモデリングってどうやるんだろうという人にご紹介！</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798103853/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>データベース設計を理解したいひとにおすすめ</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798101109/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>


<ul>
<li>データベース設計ってどうやるんだろうという人にご紹介！</li>
</ul>


<div class="rakuten"><table width="400" border="0" cellpadding="5"><tr><td colspan="2" ><a href="http://www.amazon.co.jp/exec/obidos/ASIN/479810566X/sorehabooks-22/" rel="external nofollow">G-Tools</a></font></td></tr></table></div>



]]></content>
  </entry>
  
</feed>
