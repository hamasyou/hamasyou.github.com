<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-22T23:37:00+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[静的サイトを素早く構築するためにGoLangで作られたジェネレータHugo]]></title>
    <link href="http://hamasyou.com/blog/2014/02/21/hugo/"/>
    <updated>2014-02-21T15:43:47+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/21/hugo</id>
    <content type="html"><![CDATA[<p>最近は静的サイトブームが再到来なんですかね？<strong>GoLang</strong> で作られた静的サイトジェネレータの <strong>Hugo</strong> なんていうものがありました。</p>

<p>うちのサイトも最近 Ruby の <em>Octopress</em> でサイトをリニューアルしましたが、Go にもあるんですね。</p>

<p><a href="https://github.com/spf13/hugo">spf13 / hugo</a></p>

<p><a href="http://hugo.spf13.com/">The Fast and Flexible Static Site Generator - Hugo</a></p>

<p>Go でビルドするので速いとのこと。また、Windows、Mac、Linux と環境を選ばないのがいいですね。</p>

<p>記事は <strong>Markdown</strong> で記述します。カテゴリやタグなどの情報は <strong>YAML</strong> 形式でいけます。<a href="http://octopress.org/">Octopress</a> や <a href="http://jekyllrb.com/">Jekyll</a> と似ています。</p>

<p>最近 Go が人気急上昇なので、Go の環境が手元にある人は Hugo を使ってサイトを運営してみるのもありかもです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でtransactionの分離レベルを設定する]]></title>
    <link href="http://hamasyou.com/blog/2014/02/20/rails4-transaction/"/>
    <updated>2014-02-20T21:42:41+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/20/rails4-transaction</id>
    <content type="html"><![CDATA[<p>Rails4 から <code>ActiveRecord::Base.transaction</code> に分離レベルを手軽に設定できるようになったみたいです。</p>

<pre><code class="ruby">ActiveRecord::Base.transaction(isolation: :serializable) do
  ...
end
</code></pre>

<p>分離レベルには次の4つを設定できます。</p>

<ul>
<li><code>:read_uncommitted</code></li>
<li><code>:read_committed</code></li>
<li><code>:repeatable_read</code></li>
<li><code>:serializable</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano3をRailsで使ってみた感想]]></title>
    <link href="http://hamasyou.com/blog/2014/02/20/capistrano3/"/>
    <updated>2014-02-20T11:25:05+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/20/capistrano3</id>
    <content type="html"><![CDATA[<p><strong>Capistrano3</strong> がかなりシンプルになって使いやすくなったのでプロジェクトで使ってみました。うん。なかなかよさげです。</p>

<p>Capistrano2 にあった <em>copy_via</em> がなくなっていたので、デプロイ先のサーバから Git リポジトリにアクセスできるようにしないといけなかったりとちょっと面倒なこともありましたが概ね良好です。</p>

<!-- more -->


<p><a href="https://github.com/capistrano/capistrano">capistrano / capistrano</a></p>

<p>Capistrano3 の導入はこの記事がオススメです。</p>

<p><a href="http://threetreeslight.com/post/68344998681/capistrano-3-x-rails">capistrano 3.x系を使ってrailsをデプロイ</a></p>

<p>Capistrano3 になって、独自DSLから Rake に変わりました。なので、コマンドも結構すっきりして書きやすくなりました。</p>

<p>サンプルプロジェクトで使った <code>config/deploy.rb</code> の例です。</p>

<pre><code class="ruby config/deploy.rb"># config valid only for Capistrano 3.1
lock '3.1.0'

set :application, 'capbox'
set :repo_url, 'git@github.com:hamasyou/git_demo.git'
set :deploy_to, '/var/webapp/capbox'

set :linked_files, %w{config/database.yml}
set :linked_dirs, %w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system solr}

namespace :deploy do

  before :restart, :start_solr do
    on roles(:app), in: :groups do
      within release_path do
        with rails_env: fetch(:rails_env) do
          execute :rake, 'sunspot:solr:stop'
          execute :rake, 'sunspot:solr:start'
        end
      end
    end
  end

  desc 'Restart application'
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
      execute :touch, release_path.join('tmp/restart.txt')
    end
  end

  after :publishing, :restart

  after :restart, :sitemap do
    on roles(:app), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      within release_path do
        with rails_env: fetch(:rails_env) do
          execute :rake, 'tmp:cache:clear'
          execute :rake, 'sitemap:refresh'
        end
      end
    end
  end
end
</code></pre>

<p>タスクの実行時に指定できる <code>sequence</code>、<code>groups</code>、<code>parallel</code> の説明はこちら。</p>

<p><blockquote><p>Other modes for parallelism include:</p></p><p><pre><code class="ruby">    # Capistrano 3.0.x<br/>    on :all, in: :groups, max: 3, wait: 5 do<br/>      # Take all servers, in groups of three which execute in parallel<br/>      # wait five seconds between groups of servers.<br/>      # This is perfect for rolling restarts<br/>    end</p><p>    on :all, in: :sequence, wait: 15 do<br/>      # This takes all servers, in sequence and waits 15 seconds between<br/>      # each server, this might be perfect if you are afraid about<br/>      # overloading a shared resource, or want to defer the asset compilation<br/>      # over your cluster owing to worries about load<br/>    end</p><p>    on :all, in: :parallel do<br/>      # This will simply try and execute the commands contained within<br/>      # the block in parallel on all servers. This might be perfect for kicking<br/>      # off something like a Git checkout or similar.<br/>    end<br/></code></pre></p><p><p></p><footer><strong>Capistrano Version 3 Release Announcement</strong> <cite><a href='http://capistranorb.com/2013/06/01/release-announcement.html'>capistranorb.com/2013/06/01/&hellip;</a></cite></footer></blockquote></p>

<p>Capistrano2 と互換性がないですが、新規プロジェクトには使えるんじゃないかと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsのI18n.localizeでnilもゆるすようにすると捗る]]></title>
    <link href="http://hamasyou.com/blog/2014/02/19/rails-i18n-localize/"/>
    <updated>2014-02-19T22:30:13+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/19/rails-i18n-localize</id>
    <content type="html"><![CDATA[<p>Rails の <code>I18n.localize</code> は <code>nil</code> を渡すと例外が発生します。でも、コレだといろいろ使いづらいのでいつも</p>

<pre><code class="ruby config/initializers/relaxed_i18n.rb">module I18n
  class &lt;&lt; self
    alias_method :original_localize, :localize
    def localize(object, options = {})
      object.present? ? original_localize(object, options) : ''
    end
  end
end
</code></pre>

<p>こんな感じのコードを <code>config/initializers</code> の下において使っています。<code>nil</code> を渡すと空文字を返します。</p>

<p>今のところコレで問題は起きていないのでオススメしてもいいかなと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TitaniumのHTTPClientでRESTfulリクエストを送る]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful/"/>
    <updated>2014-02-17T10:24:58+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile</a> の <code>Titanium.Network.HTTPClient</code> を使って RESTful リクエストを送る場合の注意点です。</p>

<p>Titanium の <code>HTTPClient</code> で <code>DELETE</code> のときに <code>send</code> でパラメータを送ると <code>POST</code> リクエストになってしまいます。</p>

<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile Development Environment</a></p>

<ul>
<li>Titanium 3.2.1.GA</li>
</ul>


<!-- more -->


<p>Titanium の <code>HTTPClient</code> は <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> などのメソッドに対応していて、標準で RESTful リクエストを送れるようになっています。</p>

<h3>GET の例</h3>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010286b4a8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010286b318&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{}
127.0.0.1 - - [17/Feb/2014 10:29:45] "GET / HTTP/1.1" 200 - 0.0006
</code></pre>

<h3>POST の例</h3>

<p><code>client.open('GET', url)</code> を <code>client.open('POST', url)</code> に変えて実行します。</p>

<pre><code class="javascript">client.open('POST', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:43:06] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<h3>PUT と DELETE の例</h3>

<p>同じように <code>PUT</code> と <code>DELETE</code> でも試してみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:45:32] "PUT / HTTP/1.1" 200 - 0.0005
</code></pre>

<pre><code class="javascript">client.open('DELETE', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : DELETE"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:46:28] "DELETE / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>client.send</code> でパラメータを送信しなければ、<code>open</code> で渡したメソッドでリクエストが投げられています。</p>

<h2>HTTPClient でパラメータを渡して <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> してみる</h2>

<p>次は、パラメータを渡して試してみます。</p>

<p><code>GET</code> は <code>send</code> メソッドにパラメータを渡すのではなく URL にクエリを設定して送ります。</p>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url + '?name=hamasyou');
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/?name=hamasyou"
"QUERY_STRING : name=hamasyou"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001019451b8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x00000101945140&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:49:41] "GET /?name=hamasyou HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>GET</code> で送られています。次は <code>POST</code> で送ってみます。</p>

<pre><code class="javascript">client.open('POST', url);
client.send({name: 'hamasyou'});
</code></pre>

<p><code>POST</code> は <code>client.send</code> にパラメータを渡して送ります。<code>POST</code> のデフォルトの <code>Content-Type</code> は <code>application/x-www-form-urlencoded</code> になります。</p>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded; charset=utf-8"
"QUERY_STRING : "
...
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:52:10] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>POST</code> で <code>Content-Type: application/json</code> で送る場合は、<code>HTTPClient#setRequestHeader</code> で設定します。</p>

<pre><code class="javascript">client.open('POST', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:56:20] "POST / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>PUT</code> と <code>DELETE</code> も <code>send</code> でパラメータを送ってみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:57:49] "PUT / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>PUT</code> はうまくいきました。次は <code>DELETE</code> です。</p>

<pre><code class="javascript">client.open('DELETE', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:58:52] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p>なんと、<code>POST</code> リクエストになってしまいました。。<code>DELETE</code> メソッドだけ、パラメータを <code>body</code> 部分に含めると <code>POST</code> リクエストになってしまうみたいです。。</p>

<p>OAuth 対応の API 等で access_token をパラメータに含めてリクエストする様な API を呼び出すときは要注意です。</p>

<p>できるだけ、認証情報は HTTP Header を使うようにした方がいいのかもしれません。</p>
]]></content>
  </entry>
  
</feed>
