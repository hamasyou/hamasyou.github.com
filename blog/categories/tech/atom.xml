<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-18T00:10:57+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TitaniumのHTTPClientでRESTfulリクエストを送る]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful/"/>
    <updated>2014-02-17T10:24:58+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile</a> の <code>Titanium.Network.HTTPClient</code> を使って RESTful リクエストを送る場合の注意点です。</p>

<p>Titanium の <code>HTTPClient</code> で <code>DELETE</code> のときに <code>send</code> でパラメータを送ると <code>POST</code> リクエストになってしまいます。</p>

<p><a href="http://www.appcelerator.com/titanium/">Titanium Mobile Development Environment</a></p>

<ul>
<li>Titanium 3.2.1.GA</li>
</ul>


<!-- more -->


<p>Titanium の <code>HTTPClient</code> は <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> などのメソッドに対応していて、標準で RESTful リクエストを送れるようになっています。</p>

<h3>GET の例</h3>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010286b4a8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010286b318&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{}
127.0.0.1 - - [17/Feb/2014 10:29:45] "GET / HTTP/1.1" 200 - 0.0006
</code></pre>

<h3>POST の例</h3>

<p><code>client.open('GET', url)</code> を <code>client.open('POST', url)</code> に変えて実行します。</p>

<pre><code class="javascript">client.open('POST', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:43:06] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<h3>PUT と DELETE の例</h3>

<p>同じように <code>PUT</code> と <code>DELETE</code> でも試してみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:45:32] "PUT / HTTP/1.1" 200 - 0.0005
</code></pre>

<pre><code class="javascript">client.open('DELETE', url);
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : DELETE"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:46:28] "DELETE / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>client.send</code> でパラメータを送信しなければ、<code>open</code> で渡したメソッドでリクエストが投げられています。</p>

<h2>HTTPClient でパラメータを渡して <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> してみる</h2>

<p>次は、パラメータを渡して試してみます。</p>

<p><code>GET</code> は <code>send</code> メソッドにパラメータを渡すのではなく URL にクエリを設定して送ります。</p>

<pre><code class="javascript">var url = 'http://localhost:9292/';
var client = Ti.Network.createHTTPClient({
    onload: function(e) { Ti.API.info("Received text: " + this.responseText); },
    onerror: function(e) { Ti.API.info("Receive Error: " + e.error); }
});
client.open('GET', url + '?name=hamasyou');
client.send();
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/?name=hamasyou"
"QUERY_STRING : name=hamasyou"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001019451b8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x00000101945140&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:49:41] "GET /?name=hamasyou HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>GET</code> で送られています。次は <code>POST</code> で送ってみます。</p>

<pre><code class="javascript">client.open('POST', url);
client.send({name: 'hamasyou'});
</code></pre>

<p><code>POST</code> は <code>client.send</code> にパラメータを渡して送ります。<code>POST</code> のデフォルトの <code>Content-Type</code> は <code>application/x-www-form-urlencoded</code> になります。</p>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded; charset=utf-8"
"QUERY_STRING : "
...
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:52:10] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>POST</code> で <code>Content-Type: application/json</code> で送る場合は、<code>HTTPClient#setRequestHeader</code> で設定します。</p>

<pre><code class="javascript">client.open('POST', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:56:20] "POST / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>PUT</code> と <code>DELETE</code> も <code>send</code> でパラメータを送ってみます。</p>

<pre><code class="javascript">client.open('PUT', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:57:49] "PUT / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>PUT</code> はうまくいきました。次は <code>DELETE</code> です。</p>

<pre><code class="javascript">client.open('DELETE', url);
client.setRequestHeader('Content-Type', 'application/json');
client.send(JSON.stringify({name: 'hamasyou'}));
</code></pre>

<pre><code class="console-raw">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:58:52] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p>なんと、<code>POST</code> リクエストになってしまいました。。<code>DELETE</code> メソッドだけ、パラメータを <code>body</code> 部分に含めると <code>POST</code> リクエストになってしまうみたいです。。</p>

<p>OAuth 対応の API 等で access_token をパラメータに含めてリクエストする様な API を呼び出すときは要注意です。</p>

<p>できるだけ、認証情報は HTTP Header を使うようにした方がいいのかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザ操作で簡単にスクレイピングAPIが作れる「kimono」]]></title>
    <link href="http://hamasyou.com/blog/2014/02/15/kimono-api/"/>
    <updated>2014-02-15T19:57:19+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/15/kimono-api</id>
    <content type="html"><![CDATA[<p>「<strong>kimono</strong>」はウェブサイトをブラウザ操作で簡単にスクレイピングして API 化してくれるサービスです。</p>

<p><a href="http://www.kimonolabs.com/">kimono - Turn websites into structured APIs from your browser in seconds</a></p>

<p><img src="/images/2014-02-15-kimono-api-01.png" alt="kimono" /></p>

<!-- more -->


<p>スクレイピングしたいサイトの URL を入力すると抜き出す要素を選択する画面になります。</p>

<p>最近ページングにも対応したので、ページングのあるサイトも簡単に取得できるようになります。</p>

<p><img src="/images/2014-02-15-kimono-api-02.png" alt="要素の選択" /></p>

<p><img src="/images/2014-02-15-kimono-api-03.png" alt="プレビュー画面" /></p>

<p>スクレイピングの頻度もリアルタイムや何時間毎のような設定ができます。</p>

<p>できた API は言語ごとに呼び出し例が用意されているので便利です。こういう所気が効いていますね。</p>

<p><img src="/images/2014-02-15-kimono-api-04.png" alt="API 詳細" /></p>

<p>実際に呼び出してみるとちゃんと結果が取得できます。</p>

<pre><code class="ruby misc/kimono.rb">require 'rest_client'
require 'json'
require 'pp'

response = RestClient.get 'http://www.kimonolabs.com/api/4b5q146s?apikey=81c2b7add1263b7e459f5ed58b5f6504'
json = JSON.parse(response.to_str)
pp json
</code></pre>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>gem install rest-client</span><span class='line command'>bundle exec ruby misc/kimono.rb</span><span class='line output'>{&ldquo;name&rdquo;=>&ldquo;archives&rdquo;,
</span><span class='line output'> &ldquo;lastrunstatus&rdquo;=>&ldquo;success&rdquo;,
</span><span class='line output'> &ldquo;lastsuccess&rdquo;=>&ldquo;Sat Feb 15 2014 11:27:17 GMT+0000 (UTC)&rdquo;,
</span><span class='line output'> &ldquo;nextrun&rdquo;=>&ldquo;Sat Feb 15 2014 11:57:15 GMT+0000 (UTC)&rdquo;,
</span><span class='line output'> &ldquo;frequency&rdquo;=>&ldquo;halfhourly&rdquo;,
</span><span class='line output'> &ldquo;newdata&rdquo;=>false,
</span><span class='line output'> &ldquo;results&rdquo;=>
</span><span class='line output'>  {&ldquo;collection1&rdquo;=>
</span><span class='line output'>    [{&ldquo;title&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;ガンダムUCのシナンジュが好き&rdquo;,
</span><span class='line output'>        &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/2014/02/15/gundam-unicorn/&rdquo;},
</span><span class='line output'>      &ldquo;category&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;Blog&rdquo;, &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/categories/blog/&rdquo;}},
</span><span class='line output'>     {&ldquo;title&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;Octopress の rel=”canonical” の設定がおかしい件&rdquo;,
</span><span class='line output'>        &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/2014/02/15/octopress-canonical/&rdquo;},
</span><span class='line output'>      &ldquo;category&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;Blog&rdquo;, &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/categories/blog/&rdquo;}},
</span><span class='line output'>     {&ldquo;title&rdquo;=>
</span><span class='line output'>       {&ldquo;text&rdquo;=>&ldquo;ビューティフルコード&rdquo;,
</span><span class='line output'>        &ldquo;href&rdquo;=>&ldquo;http://hamasyou.com/blog/2014/02/14/4873113636/&rdquo;},
</span><span class='line output'>&hellip;</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><a href="http://pipes.yahoo.com/pipes/">Yahoo Pipes</a> のような有名なサービスもありますが、簡単にウェブサイトをスクレイピングしたい用途であれば <em>kimono</em> はオススメのサービスです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyからMicrosoft Translator APIを呼び出す]]></title>
    <link href="http://hamasyou.com/blog/2014/02/14/microsoft-translator-api/"/>
    <updated>2014-02-14T15:40:59+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/14/microsoft-translator-api</id>
    <content type="html"><![CDATA[<p>Google の翻訳 API が有料化されたことで、無料で使える翻訳 API が実質 <strong>Microsoft Translator API</strong> 一択になってしまいました。</p>

<p>実際に使ってみようと思ったときに、いろいろなサイトをぐるぐる回ったり、API の呼び出し方が変わっていたりしてとまどったので、手順のおさらいをしておきます。</p>

<!-- more -->


<h2>Microsoft Translator API</h2>

<p>Microsoft Translator API は Microsfot が提供する翻訳サービスで REST インターフェースを備えています。</p>

<p>利用するには Microsoft Azure Marketplace で Microsoft Translator の利用登録が必要です。</p>

<h3>Microsoft Translator 登録を行う</h3>

<p>翻訳 API を使うには Azure Marketplace で利用登録が必要になります。</p>

<p><a href="https://datamarket.azure.com/dataset/1899a118-d202-492c-aa16-ba21c33c06cb">Microsoft Azure Marketplace</a></p>

<p>アカウントを持っていない人はアカウントを作成して、月額0円のプランを購入します。</p>

<p><img src="/images/2014-02-14-microsoft-translator-api-01.png" alt="Microsoft Translator の購入" /></p>

<h3>アプリケーション登録を行う</h3>

<p>次に、Azure Marketplace でアプリケーションの登録を行います。</p>

<p><a href="https://datamarket.azure.com/developer/applications">開発者 アプリケーション登録 - Microsoft Azure Marketplace</a></p>

<p><img src="/images/2014-02-14-microsoft-translator-api-02.png" alt="アプリケーション登録" /></p>

<p>翻訳 API だけを利用する場合には <em>リダイレクトURI</em> は利用しませんが、必須入力なので <code>http://localhost/</code> と入力しておきます。<code>https</code> で登録しろと怒られますが無視して登録できます。</p>

<p>ここで登録した <em>クライアントID</em> 、<em>顧客の秘密</em> が API 呼び出しの時に使う <strong>client_id</strong> 、 <strong>client_secret</strong> になります。</p>

<h3>Ruby から呼び出してみる</h3>

<p>翻訳 API を呼び出すには、呼び出しの前に OAuth を通さなければなりません。OAuth を通すと得られる <em>access_token</em> を使って翻訳 API を呼び出します。</p>

<p>OAuth を通すには POST リクエストが必要なので、サンプルでは Ruby の <code>open-uri</code> を post 対応したものを使っています。</p>

<p><a href="http://d.hatena.ne.jp/urekat/20070201/1170349097">[ruby]open-uriをPOST対応させる</a></p>

<pre><code class="ruby">require 'cgi'
require 'open-uri-post'
require 'rexml/document'
require 'json'

CLIENT_ID       = '&lt;クライアントID&gt;'
CLIENT_SECRET   = '&lt;顧客の秘密&gt;'
AUTHORIZE_URL   = 'https://datamarket.accesscontrol.windows.net/v2/OAuth2-13'
TRANSLATION_URL = 'http://api.microsofttranslator.com/V2/Http.svc/Translate'
SCOPE           = 'http://api.microsofttranslator.com'

def get_access_token
  access_token = nil
  open(AUTHORIZE_URL,
       'postdata' =&gt; "grant_type=client_credentials&amp;client_id=#{CGI.escape(CLIENT_ID)}&amp;client_secret=#{CGI.escape(CLIENT_SECRET)}&amp;scope=#{CGI.escape(SCOPE)}") do |f|
    json           = JSON.parse(f.read)
    access_token   = json['access_token']
  end
  access_token
end


def translate_text(text)
  access_token = get_access_token
  res = open("#{TRANSLATION_URL}?from=en&amp;to=ja&amp;text=#{URI.escape(text)}",
             'Authorization' =&gt; "Bearer #{access_token}").read
  xml = REXML::Document.new(res)
  xml.root.text
end

puts translate_text('Hello World')
# =&gt; "ハローワールド"
</code></pre>
]]></content>
  </entry>
  
</feed>
