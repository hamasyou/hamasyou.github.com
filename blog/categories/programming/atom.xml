<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2015-12-18T20:09:07+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Game Programming Patterns ソフトウェア開発の問題解決メニュー (impress top gear)]]></title>
    <link href="http://hamasyou.com/blog/2015/12/16/9784844338901/"/>
    <updated>2015-12-16T09:38:35+09:00</updated>
    <id>http://hamasyou.com/blog/2015/12/16/9784844338901</id>
    <content type="html"><![CDATA[<p>読了。後で書く。</p>

<!-- more -->


<h2>目次</h2>

<ul>
<li>Part I　イントロダクション

<ul>
<li>第1章　アーキテクチャ、実行速度、ゲーム</li>
</ul>
</li>
<li>Part Ⅱ　デザインパターン再訪

<ul>
<li>第2章　コマンド</li>
<li>第3章　フライウェイト</li>
<li>第4章　オブザーバ</li>
<li>第5章　プロトタイプ</li>
<li>第6章　シングルトン</li>
<li>第7章　ステート</li>
</ul>
</li>
<li>Part Ⅲ　シーケンスのパターン

<ul>
<li>第8章　ダブルバッファ</li>
<li>第9章　ゲームループ</li>
<li>第10章　更新メソッド</li>
</ul>
</li>
<li>Part IV　ビヘイビアのパターン

<ul>
<li>第11章　バイトコード</li>
<li>第12章　サブクラスサンドボックス</li>
<li>第13章　型オブジェクト</li>
</ul>
</li>
<li>Part V　分離のパターン

<ul>
<li>第14章　コンポーネント</li>
<li>第15章　イベントキュー</li>
<li>第16章　サービスロケータ</li>
</ul>
</li>
<li>Part VI　最適化のパターン

<ul>
<li>第17章　データ局所化</li>
<li>第18章　ダーティフラグ</li>
<li>第19章　オブジェクトプール</li>
<li>第20章　空間分割</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Extensions Basic]]></title>
    <link href="http://hamasyou.com/blog/2015/12/15/reactive-extensions-basic/"/>
    <updated>2015-12-15T11:11:45+09:00</updated>
    <id>http://hamasyou.com/blog/2015/12/15/reactive-extensions-basic</id>
    <content type="html"><![CDATA[<p><strong>Reactive Extensions (Rx)</strong> の覚書です。主に RxSwift をベースにしていますが、ReactiveX 全般に通じると思います。</p>

<p>細かいニュアンスは間違っているかも。。</p>

<p>基本用語の整理です。</p>

<!-- more -->




<div id="toc"></div>


<h2>Reactive Extensions</h2>

<p>大雑把に言うと、<strong>Observer Pattern (オブザーバパターン)</strong> と <strong>Stream/Sequence Programming</strong> を合わせたものが <strong>Reactive Extensions</strong> です。</p>

<h3>Observable</h3>

<p>オブザーバパターンにおいて、観測される対象を Subject と呼びますが、Rx では観測される対象のことを <strong>Observable</strong> と呼びます。観測する側は <em>Observer (オブザーバ）</em> なので、観測される側は <em>Observable</em> なわけです。</p>

<p>Rx では、Observable なものを <code>subscribe</code> (購読) することで、Observable から送られてくるデータを受け取ります。この、Observable からデータが流れてくることを <strong>Stream (ストリーム)</strong> と呼びます。流れてくるデータは <strong>Element</strong> と呼ばれます。</p>

<pre><code class="swift">someObservable
    .subscribe { (e: Event&lt;Element&gt;) in
        switch e {
        case .Next(let val):
        case .Error(let error):
        case .Completed:
        }
    .scopedDispose()
</code></pre>

<p>ストリームには状態が3種類あり、それぞれ <code>Next</code>、<code>Error</code>、<code>Completed</code> になります。</p>

<h4>Next</h4>

<p>ストリームから次のデータが流れてきたことを表します。正常処理と考えて構いません。</p>

<h4>Error</h4>

<p>Observable な対象が何かしらエラーを起こし、観測したかったデータが流れてこなかったことを表します。Rx では、Error を起こしたストリームは閉じられます。つまり、次のデータが流れてこないことを表します。</p>

<h4>Completed</h4>

<p>Observable な対象のストリームが閉じられ、この Observable な対象からは今後データが流れてこないことを表します。</p>

<h4>dispose</h4>

<p>観測を取りやめたい時には、<code>dispose</code> を呼び出します。いつ dispose するかを使い分けられるように、<code>Dispose</code> の実装がいろいろあります。</p>

<h3>Subject</h3>

<p><strong>Observable</strong> は観測対象のことでしたが、Rx においては観測可能な事柄のことを <strong>Subject (事象)</strong> と呼ぶほうが一般的だったりします。Subject を観測するわけですが、観測するデータのことは <strong>Behavior (振る舞い)</strong> と呼ばれます。<code>Subject</code> / <code>Behavior</code> は Reactive Extensions における一般的な説明となりますが、こと Rx Programming においては、<code>Observable</code> と <code>Subject</code>、<code>Element</code> と <code>Behavior</code> は似て非なるものとして扱われています。</p>

<h2>Hot and Cold Observables</h2>

<p>Observable な対象は、2つの種類にわけられます。<code>Hot</code> と <code>Cold</code> です。</p>

<h3>Hot Observable</h3>

<p>Hot な Observable とは、観測対象である Observable が作られたときから、任意のタイミングでデータを送信することができるものになります。</p>

<p>実はこの Hot Observable のことを、Rx Programming では <em>Subject</em> と呼ばれています。Subject は任意のタイミングでデータをストリームに流すことができ、同時に Observable なわけです。</p>

<p>Subject は任意のタイミングで <strong>Behavior (振る舞い)</strong> を決められることから、Subject / Behavior はセットで使われる言葉になります。</p>

<pre><code class="swift">    let msg = PublishSubject&lt;String&gt;()

    msg.subscribeNext { print($0) }

    msg.onNext("Hello World")
    msg.onCompleted()
</code></pre>

<h3>Cold Observable</h3>

<p>Cold な Obserable は、任意のタイミングでデータを流すことができません。いつデータが流れてくるのかわかりませんし、観測対象がいなければ、そもそも振る舞いが起きることもありません。</p>

<p>よく、API 通信を Observable にしますが、subscribe (観測) を忘れると、API 呼び出しがされないことになりますので注意が必要です。</p>

<pre><code class="swift">    API.call()
        .subscribeNext {
            // When to occur?
        }        
</code></pre>

<h2>Rx でプログラミングすると何が嬉しいか</h2>

<h3>テスタビリティが向上</h3>

<p>Rx は UI プログラミングで語られることが多いと思いますが、プログラムのあらゆる境界を Observable でつなぐことで、テスタビリティが向上します。</p>

<p>Observable でつなぐことにより、直接のデータの生成元に依存せずにプログラムを記述することができるようになるので、テスト時だけデータ生成部分をいじることで、例えば API 通信結果を画面に表示するようなプログラムでも、API 通信を行うことなくデータを生成し、Stream に流すことで色々な依存関係を排除することが出来るのです。</p>

<pre><code class="swift">func something(dataSource: Observable&lt;DataSource&gt;) {
    dataSource.
        subscribeNext {
            // do something
        }
}

// development
something(API.call())
// test
something(just(DummyDataSource()))
</code></pre>

<h3>非同期処理</h3>

<p>また、Rx には Stream の観測を任意のスレッドで行うスケジューリングの機能が備わっているものがほとんどですので、時間の掛かるデータ生成処理はバックグラウンドで行い、UI の表示処理のところだけメインスレッドで行うといったことを容易に行なえます。</p>

<pre><code class="swift">API.call()
    .map { $0.toViewModel() }
    .subscribeOn(BackgroundScheduler.sharedInstance)    
    .observeOn(MainScheduler.sharedInstance)
    .subscribeNext { (viewModel) in
        // UI バインディング
    }
    .addDisposeBag(disposeBag)    
</code></pre>

<h3>データソースの更新をリアルタイムに同期</h3>

<p>プログラムを書いていると、データソースの値を加工して別のところで使うという場面が多々あります。</p>

<p>このとき、何も考えずにプログラムすると、データソースが変更されても結果は変わらないという挙動になります。</p>

<pre><code class="swift">var a = 1
var b = 2
var c = ""

if a + b &gt;= 0 {
    c = "\(a + b) is positive"
}

a = 4

print(c)        // ""
</code></pre>

<p>こういった挙動でかまわないという場合もあるでしょうが、ほとんどの場合データソースの変化に合わせて挙動が変わってくれたほうが嬉しかったりします。そんな時は全部 Observable にします。</p>

<pre><code class="swift">let a = Variable(1)
let b = Variable(2)

let c = combineLatest(a, b) { $0 + $1 }
            .filter { $0 &gt;= 0 }
            .map { \($0) is positive" }            

c.subscribeNext {
    print($0)
}

a.value = 4
</code></pre>

<h2>Operators</h2>

<p>Rx には、Stream を操作するためのいろいろな演算が用意されています。Stream を別の形に変換する <code>map</code> や、複数の Stream を結合する <code>merge</code> や <code>concat</code> がなどがあります。</p>

<p>Stream の合成は使いドコロとしては API 通信などの時間の掛かる処理とキャッシュデータを返すストリームとを合成するなどが考えられます。</p>

<pre><code class="swift">sequenceOf(1, 2, 3, 4, 5)
    .map { $0 * $0 }
    .subscribeNext {
        print($0)
    }
    .scopedDispose()


let dataFromCache = CacheStore.fromCache()
dataFromCache.concat(API.call())
    .subscribeNext {
    }
    .addDisposeBag(disposeBag)
// もしくは
API.call()
  .startWith(dataFromCache)
  .subscribeNext {    
  }
  .addDisposeBag(disposeBag)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift] RxSwift で iBeacon の RangeBeaconsInRegion を 5秒間隔で受け取る方法]]></title>
    <link href="http://hamasyou.com/blog/2015/11/25/rxswift-de-ibeacon-false-rangebeaconsinregion-wo-5miao-jian-ge-deshou-kequ-rufang-fa/"/>
    <updated>2015-11-25T15:25:47+09:00</updated>
    <id>http://hamasyou.com/blog/2015/11/25/rxswift-de-ibeacon-false-rangebeaconsinregion-wo-5miao-jian-ge-deshou-kequ-rufang-fa</id>
    <content type="html"><![CDATA[<p>CoreLocation を使って iBeacon の Ranging を行う場合、iOS だと 1秒間隔で通知されます。</p>

<p><a href="http://enamelsystems.com/0011/z">[参考] iBeacon(3) - リージョン監視とレンジング - Enamel Systems</a></p>

<p>そこで、1秒間隔だと通知間隔が短すぎるので、5秒間隔とか1分間隔とかに変えたい時にどうするかですが、<code>CLLocationManager</code> クラスに設定があればよかったのですが、特になさそうなので、<code>RxSwift</code> を使ってストリームのフィルタで対応する方法のメモです。</p>

<p><code>CLLocationManager</code> の初期設定とかは参考サイトを見てください。</p>

<p><a href="https://github.com/ReactiveX/RxSwift/">ReactiveX/RxSwift</a></p>

<pre><code class="swift">locationManager.rx_didRangeBeaconsInRegion
    .sample(interval(5, MainScheduler.sharedInstance))
    .subscribeNext { (tuple: ([CLBeacon]!, CLBeaconRegion!)) in
        debugPrint("beacons: \(tuple.0), region: \(tuple.1)")
    }
    .addDisposableTo(disposeBag)
</code></pre>

<p><code>Rx</code> の <code>sample</code> を使って、ストリームを <code>interval</code> 毎にサンプリングしてやるだけです。</p>

<p><a href="http://www.introtorx.com/content/v1.0.10621.0/13_TimeShiftedSequences.html#Sample">Time-shifted sequences - Introduction to Rx</a></p>

<p><code>RxSwift</code> も使いやすくて、めっちゃ便利です！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS/Swift]ReactiveCocoa 3.0 で ViewModel から Signal をセルフ・コントロールするイディオム]]></title>
    <link href="http://hamasyou.com/blog/2015/08/13/ios-swift-reactivecocoa-signal-viewmodel/"/>
    <updated>2015-08-13T11:57:28+09:00</updated>
    <id>http://hamasyou.com/blog/2015/08/13/ios-swift-reactivecocoa-signal-viewmodel</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a> が v.3.0-RC.1 がでて、そろそろ製品に Swift で ReactiveCocoa が使えるようになりそうな感じになってきました。</p>

<p>いつも <code>Signal</code> を自分で制御するイディオムを忘れてしまうので、メモ書きです。</p>

<pre><code class="swift">import Foundation
import UIKit
import ReactiveCocoa

class MyViewModel {
    let (changed, sink) = Signal&lt;Void, NoError&gt;.pipe()

    func doAction() {
        // do something
        sendNext(sink, ())
    }    
}


class MyViewController : UIViewController {
    let viewModel = MyViewModel()

    override func viewDidLoad() {
        super.viewDidLoad()

        viewModel.changed |&gt; observe(next: debugPrintln)

        viewModel.doAction()              
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS]Swift の Dollar ライブラリの each 関数を SequenceType に対応する拡張]]></title>
    <link href="http://hamasyou.com/blog/2015/08/12/ios-swift-dollar-each-sequencetype/"/>
    <updated>2015-08-12T16:47:11+09:00</updated>
    <id>http://hamasyou.com/blog/2015/08/12/ios-swift-dollar-each-sequencetype</id>
    <content type="html"><![CDATA[<p>Swift のメモ書きです。</p>

<p><a href="https://github.com/ankurp/Dollar.swift">ankurp/Dollar.swift</a> という JavaScript の Lo-Dash や Underscore と同じ感じでコレクションを扱うためのライブラリがありますが、 <code>each</code> が配列しか受け付けることが出来ないので、<code>SequenceType</code> を受け取れるように拡張する方法のメモです。</p>

<pre><code class="swift">import Dollar

extension $ {
    class func each&lt;T: SequenceType&gt;(array: T, callback: (T.Generator.Element) -&gt; ()) -&gt; T {
        for elem in array {
            callback(elem)
        }
        return array
    }
}

$.each(["a", "b", "c"]) { (s: String) in println(s) }
$.each(["key": "val"]) { (e: (String, String)) in println("\(e.0) = \(e.1)") }
// a
// b
// c
// key = val
</code></pre>
]]></content>
  </entry>
  
</feed>
