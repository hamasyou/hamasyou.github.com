<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-21T23:42:34+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScriptで学ぶ関数型プログラミング]]></title>
    <link href="http://hamasyou.com/blog/2014/02/21/functional-javascript/"/>
    <updated>2014-02-21T19:39:56+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/21/functional-javascript</id>
    <content type="html"><![CDATA[<p><blockquote><p>本書はJavaScriptを使って関数型プログラミングを学ぶ書籍です。関数型言語としてJavaScriptを理解し、使用することにより、コードがより洗練され、美しく、そして読みやすいものになることを目的としています。JavaScriptビルトインのデータ型を上手に利用するための基本知識やJavaScriptにおける関数の持つ特性など、関数型プログラミングの技術とその考え方について解説します。また実際のJavaScriptコーディングに関数型プログラミングのエッセンスを加えるポイントをサンプルを使って丁寧に説明します。関数型プログラミングに精通した著者が書き下ろした本書は、テクニックを増やし、コーディングのイマジネーションを広げたいエンジニア必携の一冊です。</p><footer><strong>内容紹介</strong></footer></blockquote></p>

<p>JavaScript は純粋な関数型プログラミング言語ではありません。が、<strong>関数型言語として JavaScript を理解し使用することでコードがより洗練され、読みやすいものになる</strong> はずという筆者の考えがこの本には現れています。</p>

<p>関数型プログラミングは JavaScript においては一つのスタイルにしかすぎず、必要な場面で適切に使うというアプローチをとることで、よりよく JavaScript を使えるようになります。</p>

<!-- more -->


<h2>おぼえがき</h2>

<h3>関数型プログラミングとは</h3>

<p><blockquote><p>関数型プログラミングとは、値を抽象の単位に変換する関数を使用して行うプログラミングであり、それらを使ってソフトウェアシステムを構築することである。</p></blockquote></p>

<p>オブジェクト指向では、問題領域をオブジェクトという単位に分解して対処していきますが、関数型プログラミングでは、問題を <strong>関数</strong> のパーツに分解します。</p>

<p>オブジェクト指向のアプローチは問題を「<strong>名詞</strong>」に分解して行う傾向があるのに対して、関数型プログラミングでは、問題を「<strong>動詞</strong>」に分解する傾向があります。</p>

<p>関数を通して、与えられた値を「<strong>変換</strong>」することができます。</p>

<pre><code class="plain-raw">markdown → toHTML → postProcess → modifyDOM
         │        │             │
      テキスト   HTML       編集されたHTML
</code></pre>

<h3>高階関数</h3>

<p><strong>高階関数</strong> とは、関数を引数にとり新しい関数を生成して返す関数のことです。</p>

<p>例えば、JavaScript の Array には <code>sort</code> 関数があります。<code>sort</code> は引数に <code>compareFunction</code> を取ります。値の大小を比較する関数を <code>lessOrEqual</code>、この関数を <code>compareFunction</code> の仕様に変換する関数を <code>compare</code> とします。</p>

<pre><code class="javascript">function lessOrEqual(x, y) {
  return x &lt;= y;
}

function compare(func) {
  return function(x, y) {
    if (func(x, y)) {
      return -1;
    } else if (func(y, x)) {
      return 1;
    } else {
      return 0;
    }
  };
}

[100, 1, 0, 10, -1, -2, -1].sort(compare(lessOrEqual));
// =&gt; [-2, -1, -1, 0, 1, 10, 100]
</code></pre>

<p><code>compare</code> 関数は大小比較を行う関数を引数にとり、<code>compareFunction</code> の仕様に則った関数を生成して返す高階関数になります。</p>

<h3>JavaScript における関数型プログラミング</h3>

<ul>
<li>関数による抽象の定義（<code>existy</code> や <code>truthy</code>）</li>
<li>関数を他の関数の引数に渡すことによる新たな動作の実現</li>
</ul>


<pre><code class="javascript">function existy(x) { return x != null; }
function truthy(x) { return (x !== false) &amp;&amp; existy(x); }

[null, undefined, 1, 2, false].map(existy);
// =&gt; [false, false, true, true, true]
[null, undefined, 1, 2, false].map(truthy);
// =&gt; [false, false, true, true, false]
</code></pre>

<p>これこそが、<strong>関数型プログラミング</strong> です。関数型プログラミングは強力な <em>データ抽象</em> とともに実装されて役に立つものです。</p>

<h3>命令型プログラミングと関数型プログラミングの違いの例</h3>

<p><em>99本のビール</em> の歌の歌詞を構築するプログラムを命令型プログラミングと関数型プログラミングで書いてみた例です。</p>

<pre><code class="javascript 命令型プログラミング">var lyrics = [];

for (var bottles = 99; bottles &gt; 0; bottles--) {
  lyrics.push(bottles + '本のビールが残ってる');
  lyrics.push(bottles + '本のビール');
  lyrics.push('ひとつ取って、隣に回せ');
  if (bottles === 1) {
    lyrics.push('もうビールは残ってない');
  }
}
</code></pre>

<p>関数型プログラミングのアプローチで書くとこうなります。</p>

<pre><code class="javascript 関数型プログラミング">// var _ = require('underscore');
function lyricsSegment(n) {
  return _.chain([])
    .push(n + '本のビールが残ってる')
    .push(n + '本のビール')
    .push('ひとつ取って、隣に回せ')
    .tap(function(lyrics) {
        if (n &lt; 1) {
          lyrics.push('もうビールは残ってない');
        }
    })
    .value();
}

function song(start, end, lyricGen) {
  return _.reduce(_.range(start, end, -1),
    function(acc, n) {
      return acc.concat(lyricGen(n));
    }, []);
}

song(99, 0, lyricSegment);
</code></pre>

<p><em>命令型プログラミングは一度きりの実装となり、再利用が難しいものになります。</em></p>

<h3>コレクション中心プログラミング</h3>

<p>関数型プログラミングは、コレクションに入った多数のアイテムに同じ操作を適用するようなタスクを行う際にとても便利です。</p>

<p>一般的な関数型プログラミングによって主張されるコレクション中心の考え方のポイントは、その処理を行うために一貫性のある語彙を確立し、包括的に揃えた関数を再利用出来るようにすることです。</p>

<p><blockquote><p>10種類のデータ構造上で10の関数を動かすよりも、ひとつのデータ構造上で100の関数を動かすほうがよい。</p><footer><strong>Alan Perlis</strong></footer></blockquote></p>

<p>関数型プログラミングでは、<em>それぞれの関数がすこしずつデータを変換し、最後の解に至る</em> ようにします。</p>

<h3>値ではなく、関数を使え</h3>

<p>ある値を何度か繰り返す関数はよい関数ですが、ある計算を何度か繰り返す関数のほうがよりよい関数です。</p>

<pre><code class="javascript よい関数">function repeat(times, VALUE) {
  return _.map(_.range(times), function() { return VALUE; });
}

repeat(4, 'Major');
// =&gt; ["Major", "Major", "Major", "Major"]
</code></pre>

<pre><code class="javascript よりよい関数">function repeatedly(times, func) {
  return _.map(_.range(times), func);
}

repeatedly(4, function() { return 'Major'; });
// =&gt; ["Major", "Major", "Major", "Major"]
repeatedly(3, function() { return Math.floor((Math.random() * 10) + 1); });
// =&gt; [1, 3, 8]
</code></pre>

<p>関数型スタイルのプログラミングでは、<em>実行の主体となるオブジェクトを引数に取る関数が好まれます</em>。</p>

<h2>メモ</h2>

<p>本書の中に出てきた、関数とかのメモ。</p>

<h3>predicate</h3>

<p>常に真偽値（<code>true</code> or <code>false</code>）を返す関数を <strong>predicate</strong> と呼びます。</p>

<pre><code class="javascript">function lessOrEqual(x, y) {
  return x &lt;= y;
}
</code></pre>

<h3>existy と truthy</h3>

<p><code>existy</code> は与えられた値が存在するかどうかを返す関数です。<code>truthy</code> は与えられた値が <code>true</code> とみなされるかどうかを返す関数です。</p>

<pre><code class="javascript">function existy(x) {
  return x != null;
}

function truthy(x) {
  return (x !== false) &amp;&amp; existy(x);
}
</code></pre>

<p><code>truthy</code> は0を <code>true</code> と判定します。これは JavaScript の標準の動作とは違いますが、0を <code>false</code> と同一とみなすのは C 言語の遺物であると筆者は考えているようです。</p>

<h3>JavaScript 関数の設計指針</h3>

<p>JavaScript ではある条件が <code>true</code> の場合のみ処理を行い、それ以外の場合には <code>undefined</code> か <code>null</code> を返す動作が使いやすい場合が多い。</p>

<h3>メタプログラミングとは</h3>

<p><blockquote><p>プログラミングは何かを行うためにコードを書くものであるが、メタプログラミングは何かを解釈する方法を変更するためにコードを書くものである。</p></blockquote></p>

<h3>第一級関数</h3>

<p>第一級関数は他のデータ型と同じように、扱うことができる関数のことです。</p>

<ul>
<li>変数に格納できる</li>
<li>必要に応じて生成できる</li>
<li>他の関数の引数として渡すことができる</li>
<li>関数の戻り値として返すことができる</li>
</ul>


<h3>コレクション中の <code>null</code> に対する防御用の関数 <code>fnull</code></h3>

<p><code>fnull</code> は関数と可変長引数をとる関数です。与えられた関数の実行を行う際に <code>undefined</code> か <code>null</code> の値の場合にはデフォルト値を使うようにして関数を呼び出します。</p>

<pre><code class="javascript fnull">function fnull(func /* , 可変長のデフォルト引数 */) {
  var defaults = _.rest(arguments);
  return function( /* args */ ) {
    var args = _.map(arguments, function(e, i) { return existy(e) ? e : defaults[i]; });
    return func.apply(null, args);
  };
}

var safeMulti = fnull(function(total, n) { return total * n; }, 1, 1);
_.reduce([1, 2, 3, null, 5], safeMulti);
// =&gt; 30
</code></pre>

<h2>感想</h2>

<p>JavaScript の関数の基本的なところから説明をはじめて、<strong>関数型プログラミング</strong>、<strong>クロージャ</strong>、<strong>高階関数</strong>、<strong>カリー化</strong>、<strong>再帰</strong>、<strong>フィルタ</strong>、<strong>パイプライン</strong>等の関数の設計方法がふんだんに解説されています。</p>

<p>説明がとても丁寧で分かりやすく、関数型プログラミングのことを知らない人でも理解しやすいと思います。</p>

<p>JavaScript は Java に次いで最も多く利用されている言語ですので、JavaScript をよりよく使うために本書を活用してみてはいかがでしょうか。おすすめです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでつくるRESTful APIのrequest specを書く]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/rails-request-rspec/"/>
    <updated>2014-02-17T14:09:38+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/rails-request-rspec</id>
    <content type="html"><![CDATA[<p>Rails 環境で RESTful API を提供する場面があると思います。API もコントローラで提供するので、コントローラのテストで記述してもいいのですが、RESTful API であれば、<strong>request spec</strong> を使うほうがよさそうなので request spec を書くメモです。</p>

<ul>
<li>Rails 4.0.2</li>
<li>rspec 2.14.1</li>
</ul>


<!-- more -->


<h2>テスト用のプロジェクトを整える</h2>

<p>まずは、チュートリアル用のプロジェクトを作成します。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>rails new specbox &ndash;skip-bundle</span><span class='line command'>cd specbox</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><code>Gemfile</code> を開いて次の gem を追記します。</p>

<pre><code class="ruby Gemfile">group :development, :test do
  gem 'rspec-rails'
  gem 'guard-rspec'
  gem 'factory_girl_rails'
  gem 'spring'
  gem 'spring-commands-rspec'
end
</code></pre>

<p>rspec と scaffold の設定を行います。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>bundle install &ndash;path vendor/bundle</span><span class='line command'>bundle exec rails g rspec:install</span><span class='line command'>bundle exec guard init rspec</span><span class='line command'>bundle exec rails g model Book title:string author:string price:integer</span><span class='line command'>bundle exec rails g scaffold_controller Books</span><span class='line command'>bundle exec rake db:migrate</span><span class='line command'>bundle exec rake db:test:prepare</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><code>config/routes.rb</code> にルーティングを追加します。</p>

<pre><code class="ruby config/routes.rb">Specbox::Application.routes.draw do
  ...
  resources :books
  ...
end
</code></pre>

<p>テストを実行します。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>bundle exec guard</span><span class='line output'>15:12:01 - INFO - Run all
</span><span class='line output'>15:12:01 - INFO - Running all specs
</span><span class='line output'>..**&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..</p>
</span><span class='line output'>
</span><span class='line output'><p>Pending:
</span><span class='line output'>  Book add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/models/book_spec.rb
</span><span class='line output'>    # No reason given
</span><span class='line output'>    # ./spec/models/book_spec.rb:4
</span><span class='line output'>  BooksHelper add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/helpers/books_helper_spec.rb
</span><span class='line output'>    # No reason given
</span><span class='line output'>    # ./spec/helpers/books_helper_spec.rb:14</p>
</span><span class='line output'>
</span><span class='line output'><p>Finished in 0.18066 seconds
</span><span class='line output'>30 examples, 0 failures, 2 pending</p>
</span><span class='line output'>
</span><span class='line output'><p>Randomized with seed 14063</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>これで rspec の設定ができました。それでは <em>request spec</em> を書いていきます。</p>

<h2>request spec を書く</h2>

<p><em>request spec</em> は他の rspec のテストとほとんど変わりありません。テストは <code>spec/requests</code> フォルダの下に作成していきます。</p>

<p><code>scaffold_controller</code> でコントローラを作成したので、すでに <code>spec/requests/books_spec.rb</code> があるはずです。テストコードを見てみます。</p>

<pre><code class="ruby spec/requests/books_spec.rb">require 'spec_helper'

describe "Books" do
  describe "GET /books" do
    it "works! (now write some real specs)" do
      # Run the generator again with the --webrat flag if you want to use webrat methods/matchers
      get books_path
      response.status.should be(200)
    end
  end
end
</code></pre>

<p>request spec もコントローラのテストと同じように、<code>get</code>、<code>post</code>、といったメソッドを使ってテストを行います。<code>books_spec.rb</code> を次のように書き換えてみます。</p>

<pre><code class="ruby spec/requests/books_spec.rb">require 'spec_helper'

describe 'Books' do
  describe 'GET /books' do

    it '登録されている本が返されること' do
      book = FactoryGirl.create(:book)
      get '/books', format: 'json'
      expect(response).to be_success
      expect(json).to be_a_kind_of(Array)
      expect(json[0]['id']).to eq book.id
    end
  end
end
</code></pre>

<p>request spec はこういう感じで、<strong>実際に呼び出す URL を記述する</strong> のと、<strong>json の中身をチェックする</strong> のが大事だと思っています。</p>

<p>コントローラのテストではビューの中身までチェックしませんし、ビューのテストとコントローラのテストを2つ書くのはテストを把握しづらいので、request spec のテストのように一箇所で同時にテストするのが効果的だと思います。</p>

<p>API はインターフェース（<em>入力パラメータ</em> と <em>出力形式</em> ）が大事なのでここをきっちり押さえておくテストを書く必要があります。</p>

<p>で、テストケースを変えると当然テストが失敗するので、テストが通るようにヘルパを書き換えます。</p>

<h3>request_helpers.rb を作成する</h3>

<p>request spec を書くときに便利なメソッドをいくつか用意しておきます。</p>

<p>RESTful API は出力を json で返すものが多いと思うので、json を扱いやすくするヘルパーを用意します。</p>

<p>また、 <code>AuthenticationHelper</code> は認証が必要な API を呼び出すときの便利メソッドとして記述してありますが、不要であれば削除、仕様が違うようであれば書きなおしてつかいます。</p>

<p>次のファイルを <code>spec/support/request_helpers.rb</code> として作成します。</p>

<pre><code class="ruby spec/support/request_helpers.rb">module Requests
  module JsonHelpers
    def json
      @json ||= JSON.parse(response.body)
    end
  end

  module AuthenticationHelper
    %w(get post put delete).each do |method_name|
      define_method("auth_#{method_name}") do |uri, auth_user, params = {}, env = {}, &amp;block|
        __send__(method_name, uri, params, env.reverse_merge(HTTP_AUTHORIZATION: "token #{auth_user.access_token}"), &amp;block)
      end
    end
  end
end
</code></pre>

<p>このヘルパを <code>spec/spec_helper.rb</code> に追加します。</p>

<pre><code class="ruby spec/spec_helper.rb">RSpec.configure do |config|
  ...
  config.include Requests::JsonHelpers, type: :request
  config.include Requests::AuthenticationHelper, type: :request
  ...
end
</code></pre>

<p>これでテストが通るようになりました。</p>

<h2>まとめ</h2>

<p>Rails で RESTful な API を作ることはよくあると思いますが、今までは API のテストもコントローラのテストで行っていました。</p>

<p>でも、request spec を使ったほうが <strong>呼び出しのURL</strong>、<strong>必要なパラメータ</strong>、<strong>出力形式</strong> を素直にテストとして書けるので、API のテストは request spec を使うようにするといいかなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[open-uri-postを使うとrest-clientが変な動きするをする]]></title>
    <link href="http://hamasyou.com/blog/2014/02/16/ruby-open-uri-post-rest-client/"/>
    <updated>2014-02-16T21:45:53+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/16/ruby-open-uri-post-rest-client</id>
    <content type="html"><![CDATA[<p>ruby の <code>open-uri</code> を POST に対応させる <code>open-uri-post</code> というライブラリがありますが、これを使うと <code>rest-client</code> の gem が変な動きをするようです。</p>

<!-- more -->


<p><code>open-uri-post</code> を <code>require</code> すると <code>RestClient.post</code> が GET のリクエストになってうまくリクエストできなくなってしまいました。。</p>

<p><a href="http://d.hatena.ne.jp/urekat/20070201/1170349097">[ruby]open-uriをPOST対応させる</a></p>

<p><a href="https://github.com/rest-client/rest-client">rest-client/rest-client</a></p>

<p>下のサンプルでは、そもそもリクエストが送れなかったりもします。。</p>

<h3>open-uri-post だけの場合</h3>

<pre><code class="ruby">require './open-uri-post.rb'
open('http://localhost:9292', {'postdata' =&gt; 'name=hamasyou'}).read
</code></pre>

<pre><code class="console">"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"QUERY_STRING : "
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_ACCEPT_ENCODING : gzip;q=1.0,deflate;q=0.6,identity;q=0.3"
"HTTP_ACCEPT : */*"
"HTTP_USER_AGENT : Ruby"
"HTTP_HOST : localhost:9292"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001029c65f0&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x000001029c6578&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [16/Feb/2014 22:02:26] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<p><code>CONTENT_LENGTH: 13</code> になっていて、パラメータもきちんと送れています。</p>

<h3>rest-client だけの場合</h3>

<pre><code class="ruby">require 'rest_client'
RestClient.post('http://localhost:9292', name: 'hamasyou')
</code></pre>

<pre><code class="console">"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"QUERY_STRING : "
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_ACCEPT : */*; q=0.5, application/xml"
"HTTP_ACCEPT_ENCODING : gzip, deflate"
"HTTP_USER_AGENT : Ruby"
"HTTP_HOST : localhost:9292"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010299d380&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010299d290&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [16/Feb/2014 22:03:29] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<p>こっちも、きちんとリクエストできています。</p>

<h3>open-uri-post と rest-client を同時に使うと</h3>

<pre><code class="ruby">require './open-uri-post.rb'
require 'rest_client'

# open('http://localhost:9292', {'postdata' =&gt; 'name=hamasyou'}).read
RestClient.post('http://localhost:9292', name: 'hamasyou')
RestClient.get('http://localhost:9292', params: {name: 'hamasyou'})
</code></pre>

<p><code>open-uri-post</code> の方の <code>open</code> メソッドはうまく動きますが、RestClient が動かなくなります。</p>

<pre><code class="console">/vendor/bundle/ruby/2.1.0/gems/rest-client-1.6.7/lib/restclient/abstract_response.rb:48:in `return!': 408 Request Timeout (RestClient::RequestTimeout)
</code></pre>

<p>RequestTimeout が出てしまいました。。ちなみに、<code>GET</code> リクエストの方はうまく動きます。<code>open-uri-post</code> と <code>rest-client</code> は一緒に使わないほうがいいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby-Nokogiriで取り出した要素を置き換える]]></title>
    <link href="http://hamasyou.com/blog/2014/02/13/ruby-nokogiri/"/>
    <updated>2014-02-13T16:19:09+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/13/ruby-nokogiri</id>
    <content type="html"><![CDATA[<p>Ruby の HTML パーサに <strong>Nokogiri</strong> があります。基本的な使い方は</p>

<ul>
<li><a href="https://github.com/sparklemotion/nokogiri">Nokogiri-GitHub</a></li>
<li><a href="http://morizyun.github.io/blog/ruby-nokogiri-scraping-tutorial/">Nokogiri を使った Rubyスクレイピング [初心者向けチュートリアル]</a></li>
<li><a href="http://www.absolute-keitarou.net/blog/?p=634">RubyのNokogiriでギコギコスクレイピングだ</a></li>
<li><a href="http://qiita.com/w650/items/e663fa2430145c456c4d">Nokogiriでスクレイピング</a></li>
</ul>


<p>とかを参考にしてもらえばいいんですが、パースした要素の特定の属性を置き換えたいとか追加で属性を追加したい時のメモです。</p>

<!-- more -->


<p>使い方は</p>

<pre><code class="console">gem install 'nokogiri'
</code></pre>

<pre><code class="ruby">require 'nokogiri'

doc = Nokogiri::HTML(html_text)

# 外部リンクに rel="external nofollow" と title 属性を付ける
doc.search('a[href^="http://"]', 'a[href^="https://"]').each do |link|
  link['rel'] = "#{link['rel']} external nofollow".strip
  link['title'] = link.text unless link.attr('title')
end
html_text = doc.css('body')[0].inner_html
</code></pre>

<p>Nokogiri に渡す HTML 文字列は <code>&lt;html&gt;</code> から始まる必要はなく、部分的な HTML 文字列でも OK です。</p>

<p>部分 HTML を置き換えた場合は、取り出しは <code>doc.css('body')[0].inner_html</code> になります。<code>doc.to_html</code> だと <code>&lt;!DOCTYPE html&gt;&lt;html&gt;</code> から始まる文字列になってしまうので注意。</p>

<h3>文字コードを指定する</h3>

<p>Nokogiri は日本語に対応していますが、デフォルトで <em>UTF-8</em> の文字エンコーディングになっているようです。なので Shift_JIS や EUC-JP の HTML を与えるとうまくパースできません。</p>

<p>そんな時は、次のようなコードで UTF-8 に変換してやれば OK です。</p>

<pre><code class="ruby">doc = Nokogiri::HTML(html_text, nil, 'utf-8')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで手書きの図や絵をプログラムに取り込む方法]]></title>
    <link href="http://hamasyou.com/blog/2013/12/03/rails/"/>
    <updated>2013-12-03T19:05:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/12/03/rails</id>
    <content type="html"><![CDATA[<p>スマホやタブレットが増えてきて、Railsアプリでも手書きで書いた絵や図を取り込みたいというような案件があるのではないでしょうか？手書き画像が保存する方法はいろいろありますが、そのひとつをちょっとメモのため残しておきます。特別なgemとかは必要ありません。使うのは HTML5 の canvas だけです。</p>

<!-- more -->




<h2>環境</h2>




<ul>
<li>Ruby 2.0.0p353</li>
<li>Rails 4.0.1</li>
<li>bundler</li>
</ul>




<h2>手順</h2>


<p>まず、Rails 環境を作成して足場をつくります。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>rails new blog &ndash;skip-bundle</span><span class='line output'>      create
</span><span class='line output'>      create  README.rdoc
</span><span class='line output'>      create  Rakefile
</span><span class='line output'>      create  config.ru
</span><span class='line output'>      create  .gitignore
</span><span class='line output'>      create  Gemfile
</span><span class='line output'>      create  app
</span><span class='line output'>      create  app/assets/javascripts/application.js
</span><span class='line output'>      create  app/assets/stylesheets/application.css
</span><span class='line output'>      create  app/controllers/application_controller.rb
</span><span class='line output'>      create  app/helpers/application_helper.rb
</span><span class='line output'>      create  app/views/layouts/application.html.erb
</span><span class='line output'>      create  app/assets/images/.keep
</span><span class='line output'>      create  app/mailers/.keep
</span><span class='line output'>      create  app/models/.keep
</span><span class='line output'>      create  app/controllers/concerns/.keep
</span><span class='line output'>      create  app/models/concerns/.keep
</span><span class='line output'>      create  bin
</span><span class='line output'>      create  bin/bundle
</span><span class='line output'>      create  bin/rails
</span><span class='line output'>      create  bin/rake
</span><span class='line output'>      create  config
</span><span class='line output'>      create  config/routes.rb
</span><span class='line output'>      create  config/application.rb
</span><span class='line output'>      create  config/environment.rb
</span><span class='line output'>      create  config/environments
</span><span class='line output'>      create  config/environments/development.rb
</span><span class='line output'>      create  config/environments/production.rb
</span><span class='line output'>      create  config/environments/test.rb
</span><span class='line output'>      create  config/initializers
</span><span class='line output'>      create  config/initializers/backtrace_silencers.rb
</span><span class='line output'>      create  config/initializers/filter_parameter_logging.rb
</span><span class='line output'>      create  config/initializers/inflections.rb
</span><span class='line output'>      create  config/initializers/mime_types.rb
</span><span class='line output'>      create  config/initializers/secret_token.rb
</span><span class='line output'>      create  config/initializers/session_store.rb
</span><span class='line output'>      create  config/initializers/wrap_parameters.rb
</span><span class='line output'>      create  config/locales
</span><span class='line output'>      create  config/locales/en.yml
</span><span class='line output'>      create  config/boot.rb
</span><span class='line output'>      create  config/database.yml
</span><span class='line output'>      create  db
</span><span class='line output'>      create  db/seeds.rb
</span><span class='line output'>      create  lib
</span><span class='line output'>      create  lib/tasks
</span><span class='line output'>      create  lib/tasks/.keep
</span><span class='line output'>      create  lib/assets
</span><span class='line output'>      create  lib/assets/.keep
</span><span class='line output'>      create  log
</span><span class='line output'>      create  log/.keep
</span><span class='line output'>      create  public
</span><span class='line output'>      create  public/404.html
</span><span class='line output'>      create  public/422.html
</span><span class='line output'>      create  public/500.html
</span><span class='line output'>      create  public/favicon.ico
</span><span class='line output'>      create  public/robots.txt
</span><span class='line output'>      create  test/fixtures
</span><span class='line output'>      create  test/fixtures/.keep
</span><span class='line output'>      create  test/controllers
</span><span class='line output'>      create  test/controllers/.keep
</span><span class='line output'>      create  test/mailers
</span><span class='line output'>      create  test/mailers/.keep
</span><span class='line output'>      create  test/models
</span><span class='line output'>      create  test/models/.keep
</span><span class='line output'>      create  test/helpers
</span><span class='line output'>      create  test/helpers/.keep
</span><span class='line output'>      create  test/integration
</span><span class='line output'>      create  test/integration/.keep
</span><span class='line output'>      create  test/test_helper.rb
</span><span class='line output'>      create  tmp/cache
</span><span class='line output'>      create  tmp/cache/assets
</span><span class='line output'>      create  vendor/assets/javascripts
</span><span class='line output'>      create  vendor/assets/javascripts/.keep
</span><span class='line output'>      create  vendor/assets/stylesheets
</span><span class='line output'>      create  vendor/assets/stylesheets/.keep
</span><span class='line command'>cd blog</span><span class='line command'>bundle install &ndash;path vendor/bundle</span><span class='line output'>Fetching gem metadata from https://rubygems.org/……….
</span><span class='line output'>Fetching gem metadata from https://rubygems.org/..
</span><span class='line output'>Resolving dependencies…
</span><span class='line output'>Installing rake (10.1.0)
</span><span class='line output'>Installing i18n (0.6.5)
</span><span class='line output'>Installing minitest (4.7.5)
</span><span class='line output'>Installing multi_json (1.8.2)
</span><span class='line output'>Installing atomic (1.1.14)
</span><span class='line output'>Installing thread_safe (0.1.3)
</span><span class='line output'>Installing tzinfo (0.3.38)
</span><span class='line output'>Installing activesupport (4.0.1)
</span><span class='line output'>Installing builder (3.1.4)
</span><span class='line output'>Installing erubis (2.7.0)
</span><span class='line output'>Installing rack (1.5.2)
</span><span class='line output'>Installing rack-test (0.6.2)
</span><span class='line output'>Installing actionpack (4.0.1)
</span><span class='line output'>Installing mime-types (1.25.1)
</span><span class='line output'>Installing polyglot (0.3.3)
</span><span class='line output'>Installing treetop (1.4.15)
</span><span class='line output'>Installing mail (2.5.4)
</span><span class='line output'>Installing actionmailer (4.0.1)
</span><span class='line output'>Installing activemodel (4.0.1)
</span><span class='line output'>Installing activerecord-deprecated_finders (1.0.3)
</span><span class='line output'>Installing arel (4.0.1)
</span><span class='line output'>Installing activerecord (4.0.1)
</span><span class='line output'>Using bundler (1.3.1)
</span><span class='line output'>Installing coffee-script-source (1.6.3)
</span><span class='line output'>Installing execjs (2.0.2)
</span><span class='line output'>Installing coffee-script (2.2.0)
</span><span class='line output'>Installing thor (0.18.1)
</span><span class='line output'>Installing railties (4.0.1)
</span><span class='line output'>Installing coffee-rails (4.0.1)
</span><span class='line output'>Installing hike (1.2.3)
</span><span class='line output'>Installing jbuilder (1.5.2)
</span><span class='line output'>Installing jquery-rails (3.0.4)
</span><span class='line output'>Installing json (1.8.1)
</span><span class='line output'>Installing tilt (1.4.1)
</span><span class='line output'>Installing sprockets (2.10.1)
</span><span class='line output'>Installing sprockets-rails (2.0.1)
</span><span class='line output'>Installing rails (4.0.1)
</span><span class='line output'>Installing rdoc (3.12.2)
</span><span class='line output'>Installing sass (3.2.12)
</span><span class='line output'>Installing sass-rails (4.0.1)
</span><span class='line output'>Installing sdoc (0.3.20)
</span><span class='line output'>Installing sqlite3 (1.3.8)
</span><span class='line output'>Installing turbolinks (1.3.1)
</span><span class='line output'>Installing uglifier (2.3.2)
</span><span class='line command'>bundle exec rails g scaffold post</span><span class='line output'>      invoke  active_record
</span><span class='line output'>      create    db/migrate/20131203101546_create_posts.rb
</span><span class='line output'>      create    app/models/post.rb
</span><span class='line output'>      invoke    test_unit
</span><span class='line output'>      create      test/models/post_test.rb
</span><span class='line output'>      create      test/fixtures/posts.yml
</span><span class='line output'>      invoke  resource_route
</span><span class='line output'>       route    resources :posts
</span><span class='line output'>      invoke  scaffold_controller
</span><span class='line output'>      create    app/controllers/posts_controller.rb
</span><span class='line output'>      invoke    erb
</span><span class='line output'>      create      app/views/posts
</span><span class='line output'>      create      app/views/posts/index.html.erb
</span><span class='line output'>      create      app/views/posts/edit.html.erb
</span><span class='line output'>      create      app/views/posts/show.html.erb
</span><span class='line output'>      create      app/views/posts/new.html.erb
</span><span class='line output'>      create      app/views/posts/_form.html.erb
</span><span class='line output'>      invoke    test_unit
</span><span class='line output'>      create      test/controllers/posts_controller_test.rb
</span><span class='line output'>      invoke    helper
</span><span class='line output'>      create      app/helpers/posts_helper.rb
</span><span class='line output'>      invoke      test_unit
</span><span class='line output'>      create        test/helpers/posts_helper_test.rb
</span><span class='line output'>      invoke    jbuilder
</span><span class='line output'>      create      app/views/posts/index.json.jbuilder
</span><span class='line output'>      create      app/views/posts/show.json.jbuilder
</span><span class='line output'>      invoke  assets
</span><span class='line output'>      invoke    coffee
</span><span class='line output'>      create      app/assets/javascripts/posts.js.coffee
</span><span class='line output'>      invoke    scss
</span><span class='line output'>      create      app/assets/stylesheets/posts.css.scss
</span><span class='line output'>      invoke  scss
</span><span class='line output'>      create    app/assets/stylesheets/scaffolds.css.scss
</span><span class='line command'>bundle exec rake db:migrate</span><span class='line output'>==  CreatePosts: migrating ====================================================
</span><span class='line output'>– create_table(:posts)
</span><span class='line output'>   -> 0.0010s
</span><span class='line output'>==  CreatePosts: migrated (0.0011s) ===========================================</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><code>app/views/posts/_form.html.erb</code> を開いて次のコードを追加します。このコードが手書き入力部分（canvas）になります。</p>

<pre><code class="html+erb app/views/posts/_form.html.erb">  &lt;canvas id="paper" class="paper" width="400" height="400" data-target="#sign"&gt;
    ご利用のブラウザではサインは表示できません。
  &lt;/canvas&gt;
  &lt;button type="button" name="clearCanvas" class="clear-canvas"&gt;クリア&lt;/button&gt;
  &lt;input type="hidden" id="sign" name="sign" value="" /&gt;
</code></pre>

<p><code>app/assets/javascripts</code> に paint.js.coffee ファイルを作成し、次のコードをコピペします。</p>

<pre><code class="coffeescript app/assets/javascripts/paint.js.coffee">jQuery ($) -&gt;
    screen2client = (e) -&gt;
        [px, py] = if e.type.startsWith('touch') then [e.originalEvent.touches[0].clientX, e.originalEvent.touches[0].clientY] else [e.clientX, e.clientY]
        rect = e.target.getBoundingClientRect()
        {x: px - rect.left, y: py - rect.top}
    drawFlag = false
    oldX = 0
    oldY = 0
    $canvas = $('#paper')
    $canvas.on 'mousedown touchstart', (e) -&gt;
        drawFlag = true
        {x, y} = screen2client(e)
        [oldX, oldY] = [x, y]
    $canvas.on 'mouseup mouseout touchend touchcancel', -&gt;
        drawFlag = false
        data = $canvas[0].toDataURL()
        $($canvas.data('target')).val(data)
    $canvas.on 'mousemove touchmove', (e) -&gt;
        return unless drawFlag
        {x, y} = screen2client(e)
        context = $canvas[0].getContext('2d')
        context.strokeStyle = '#C71C22'
        context.lineWidth = 1
        context.beginPath()
        context.moveTo(oldX, oldY)
        context.lineTo(x, y)
        context.stroke()
        context.closePath()
        oldX = x
        oldY = y
        e.preventDefault()
        return
    $('.clear-canvas').on 'click', -&gt;
        context = $canvas[0].getContext('2d')
        context.clearRect(0, 0, $canvas[0].width, $canvas[0].height)
        $($canvas.data('target')).val(null)
</code></pre>

<p><code>app/assets/javascript/application.js</code> を開き、ファイルの最後に次のコードを追加します。</p>

<pre><code class="javascript app/assets/javascript/application.js">if (typeof String.prototype.startsWith != 'function') {
    String.prototype.startsWith = function(str) {
        return this.substring(0, str.length) === str;
    }
}
</code></pre>

<p>最後に、画像データを受け取って画像ファイルにする処理をコントローラに追加します。<code>app/controllers/posts_controller.rb</code> を開き、<code>def create</code> に次のコードを追加します。</p>

<pre><code class="ruby app/controllers/posts_controller.rb">f = Tempfile.new(['sign', '.png'], encoding: Encoding::BINARY)
f.write Base64.decode64(params[:sign].sub('data:image/png;base64,', ''))
f
</code></pre>

<p>これで、一時ファイルにキャンバスデータを書き込んでファイル化できます。サーバを起動して <code>http://localhost:3000/posts/new</code> にアクセスして試してみてください。</p>

<p><img src="/images/2013-12-03-rails-ss.png" height="526" width="517" alt="スクリーンショット" /></p>
]]></content>
  </entry>
  
</feed>
