<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-03-04T12:16:28+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pythonメモ]]></title>
    <link href="http://hamasyou.com/blog/2014/02/25/python/"/>
    <updated>2014-02-25T15:43:02+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/25/python</id>
    <content type="html"><![CDATA[<p>プログラミング言語「<strong>Python</strong>」のメモです。v.2.5 のメモのなので最新だと違うかも。。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=FAFAFA&IS2=1&bg1=FAFAFA&fc1=666666&lc1=3399F3&t=sorehabooks-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873113938" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<!-- more -->


<h3>シーケンス</h3>

<p>シーケンスとは、オブジェクトを一定の順序に並べたものです。シーケンスでは要素となるオブジェクトの順序は常に変わりません。シーケンスには、<em>文字列</em>、<em>リスト</em>、<em>タプル</em> などがあります。</p>

<p>シーケンスに対して行える操作があります。要素の位置を指定して取り出す <strong>インデクシング</strong>、要素を範囲で取得する <strong>スライシング</strong> があります。</p>

<pre><code class="python">str = 'Spam'
str[0]   # S
str[-1]  # m
str[1:3] # pa
str[1:]  # pam
str[:3]  # Spa
str[:-1] # Spa
str[:]   # Spam

str = 'abcdefghij'
str[1:9:2]  # bdfh
str[5:1:-1] # fedc
str[::-1]   # jihgfedcba

len('abc')      # 3
len([1,2,3,4])  # 4
</code></pre>

<h3>リスト内包表記</h3>

<p>リスト内包表記はシーケンスに属する要素のそれぞれに同じ演算を行うことができる表記法です。リスト内包表記は最終的にリストを作成します。</p>

<pre><code class="python">matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]
col2 = [row[1] for row in matrix]
col2
# [2, 5, 8]
</code></pre>

<h3>タプル</h3>

<p><strong>タプル</strong> はリストと似ていますが、要素を変更することができません。タプルはカッコで作成します。<em>要素が一つの場合は、要素の後にカンマをつけなければいけません</em>。
タプルは <em>オブジェクトの集合</em>、リストは <em>データ構造</em> と使い分けをするらしいです。</p>

<pre><code class="python">tuple = (1, 2, 3, 4)
tuple[1] = 5
# TypeError: 'tuple' object does not support item assignment
tuple = (1,)
</code></pre>

<h3>ヘルプを調べる</h3>

<p>組み込み関数の <code>dir</code> を使うと、オブジェクトの全属性のリストが手に入ります。また、<code>help</code> 関数を使うとメソッドのヘルプ情報を出力可能です。</p>

<pre><code class="python">dir('string')
# ['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
help('string'.index)
# Help on built-in function index:
#
# index(...)
#     S.index(sub [,start [,end]]) -&gt; int
#
#     Like S.find() but raise ValueError when the substring is not found.
</code></pre>

<h3>文字列</h3>

<p><em>Python ではシングルクォートとダブルクォートは同じ意味を持ちます</em>。なので、他の言語のように、ダブルクォートの場合だけエスケープシーケンスが効くということはありません。</p>

<pre><code class="python">print 'a\nb\tc'
# a
# b c
</code></pre>

<h3>リスト操作</h3>

<p>Python のリストは <code>[]</code> を使って作ります。他の言語の配列操作と同じ処理は基本的にできます。Python 特有の操作だなと思ったものだけメモ。</p>

<pre><code class="python">a = [1, 2, 3, 4, 5]

# 特定の要素が含まれているかどうかの確認
3 in a  # =&gt; True
6 in a  # =&gt; False

# リスト内包表記
[x**2 for x in a] # =&gt; [1, 4, 9, 16, 25]
</code></pre>

<h3>ステートメント、構文に関する注意点</h3>

<h4>コロンを忘れない</h4>

<p>複合ステートメント（if、while、for などの最初の行）の末尾にはかならず <code>:</code> をつけます。</p>

<h4>トップレベルのコードはインデントしない</h4>

<p>トップレベルコードはかならず左端から書き始めます。</p>

<h4><code>while</code> や <code>range</code> よりも、単純な <code>for</code> を使う</h4>

<p>シーケンスを扱う場合は、できるだけ単純な <code>for</code> （<code>for x in seq:</code>）を使うようにします。</p>

<h4>オブジェクトの上書きを行う関数は値を返さない</h4>

<p><code>list.append</code> や <code>list.sort</code> などのオブジェクトを上書きするような関数は値を戻しません。<code>None</code> を返すようにします。</p>

<h3>変数のスコープ</h3>

<p>Python の変数のスコープは、「ローカルスコープ」「グローバルスコープ」「ビルトインスコープ」があります。
関数内で定義された変数は「ローカルスコープ」に所属します。</p>

<p>関数の引数で渡された変数は参照渡しになります。変数の代入では元のオブジェクトは変更されませんが、オブジェクトの上書きは影響を及ぼします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サードパーティJavaScript]]></title>
    <link href="http://hamasyou.com/blog/2014/02/23/third-party-javascript/"/>
    <updated>2014-02-23T17:47:39+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/23/third-party-javascript</id>
    <content type="html"><![CDATA[<p>サードパーティ JavaScript とは <em>異なる Web アドレスから配信される、独立したクライアントコード</em> のことを意味します。
例えばソーシャルウィジェットやアナリティクス用のトラッカーがそうです。
本書はこのサードパーティ JavaScript をどのように開発するとよいかについて書かれています。</p>

<p>サードパーティ JavaScript には様々な難しいポイントがあります。</p>

<ul>
<li>動的なスクリプト読み込み</li>
<li>サードパーティ Cookie の保存と読み込み</li>
<li>HTTP / HTTPS を使ったサーバとの通信</li>
</ul>


<p>多くの人に使われる JavaScript を開発するには、<strong>数多くの落とし穴や難関を乗り越えなければなりません</strong>。
本書はこういった落とし穴や難関に対する解決策を手順を追って説明してくれます。</p>

<p>本書の著者の一人は <a href="http://disqus.com/">Disqus</a> という Web サイトに即席のコメントシステムを導入することができる JavaScript アプリケーションを開発しています。
実際に世界中で使われているアプリケーションの経験を元に書かれているので説得力がありますし、「こんな事にも注意しないといけなかったのか！」といった目からウロコな内容も盛りだくさんでおすすめです。</p>

<p>本書を読み終わると「<span class="lead"><strong>IE 無くなったらいいのに！</strong></span>」って絶対に思います。そして「<span class="lead"><strong>iframe すげーな。使えるやつだ</strong></span>」って思います（笑</p>

<!-- more -->


<p>以下、おぼえがきとメモです。</p>

<p><nav id="toc" role="navigation"></nav></p>

<h2>サードパーティ JavaScript 入門</h2>

<p>サードパーティ JavaScript の例には次のようなものがあります。</p>

<ul>
<li>埋め込みウィジェット</li>
<li>分析と計測</li>
<li>Web サービス API のラッパー</li>
</ul>


<h3>サードパーティ JavaScript 開発が難しい理由</h3>

<h4>未知のコンテキスト</h4>

<p>JavaScript が読み込まれたときに、読み込まれた先（パブリッシャ）のページの環境がどのようになっているかがわかりません。
JavaScript の読み込まれる位置が <code>&lt;head&gt;</code> タグだったり、<code>&lt;body&gt;</code> タグの一番最後かもしれません。<code>&lt;head&gt;</code> タグがない可能性もあります。
<strong>ブラウザに依存するような状況に依存したコードは書くべきではありません</strong>。</p>

<p>ウィジェットを開発しているのであれば、正しく表示されるかも問題になります。
表示されるページの CSS に干渉してしまうようなスタイルの定義も問題になります。</p>

<p>共通して言えることは、サードパーティ JavaScript は外部の環境に依存するべきではないし、<strong>外部の環境を壊すようなことはあってはならない</strong> ということです。</p>

<h4>共有されている JavaScript 環境</h4>

<p>Web 環境では、JavaScript が実行される環境はグローバルな環境が一つしかありません。グローバル環境を汚さないようにしなければいけませんし、他の JavaScript に壊されることがないように防衛する必要もあります。</p>

<h4>ブラウザによるクロスドメイン制限</h4>

<p>ブラウザの同一生成元ポリシーによって、<code>XmlHttpRequest</code> は表示しているページと異なるドメインへアクセスするのを妨げられてしまいます。また、サードパーティ Cookie の保存や読み込みも制限していることが普通です。</p>

<h2>開発の足場</h2>

<h3>複数のドメインをシミュレートする開発環境</h3>

<p>クロスドメインの問題はかなり厄介な問題ですので、開発時点から複数ドメインをシミュレートするのは役にたちます。
OS の <code>hosts</code> ファイルを編集して、localhost の エイリアスを二つ用意するだけでこの環境が手に入ります。</p>

<pre><code class="plain-raw hosts">127.0.0.1 publisher.dev
127.0.0.1 widget.dev
</code></pre>

<p><em>「.dev」のような存在しないトップレベルドメインを使う方が、実際に存在する Web サイトのアドレスを差してしまう問題がないので便利</em> です。</p>

<h3>スクリプトを読み込むスニペット</h3>

<p>パブリッシャのページに最初のスクリプトを読み込むスニペットを用意します。スニペットを提供する方法は2つあります。</p>

<ul>
<li>「ブロッキング」を行うタイプの <code>script</code> タグによる読み込み</li>
<li>非同期でスクリプトを読み込むタイプ</li>
</ul>


<h4>ブロッキング読み込み</h4>

<p>```html</p>

<script src="http://camerastock.com/widget.js?product=1234"></script>


<pre><code>
#### ノンブロッキング読み込み

上のようなタグは、そのスクリプトが読み込まれるまでブラウザの処理をとめてしまいます。そのため、このようなスクリプトは `&lt;body&gt;` タグの最後におくことや、`defer` 属性、`async` 属性を使うことで回避できます。
`defer` 属性、`async` 属性をスクリプトタグに指定することで、そのスクリプトが文書のコンテンツを生成しない（`document.write` を使わない）のでページブロッキングをしなくても完全にダウンロードが可能であるとブラウザに伝えることができます。
</code></pre>

<script defer src="http://camerastock.com/widget.js?product=1234"></script>


<script async src="http://camerastock.com/widget.js?product=1234"></script>


<pre><code>
defer 属性
: `defer` 属性が指定されたスクリプトは、**ページが完全に解析された後** に実行が開始されます。
async 属性
: `async` 属性が指定されたスクリプトは、**ダウンロードが完了したすぐ直後** から実行が開始されます。

JavaScript を使って DOM 上に `script` 要素を動的に生成することでも、`async` 属性と同じ挙動でスクリプトを読み込ませることができます。
</code></pre>

<script>
(function() {
  var node     = document.getElementsByTagName('script')[0],
      script   = document.createElement('script');

  script.src   = 'http://camerastock.com/widget.js?product=1234';
  script.async = true;
  node.parentNode.insertBefore(script, node);
})();
</script>


<pre><code>
### 最初のスクリプトファイル

最初の JavaScript ファイルの中身はこんな感じになります。
</code></pre>

<p>var Stork = (function(window, undefined) {
  var Stork = {};</p>

<p>  return Stork;
})(window);
```</p>

<p>一番外側の <code>Stork</code> はアプリケーションをカプセル化するための名前空間オブジェクトです。<code>window</code> と <code>undefined</code> を引数に取っています。これは、<em>よく使う変数をローカル変数として定義することで、JavaScript のミニファイアが働くようになり変数名を短くすることができる</em> からです。
また、<code>undefined</code> はオリジナルの <code>undefined</code> が他の環境によって書き換えられていても問題ないようにするためのテクニックになります。この二つは、<em>JavaScript ライブラリの作者が非常によく使うテクニック</em> になります。</p>

<h3>loadScript 関数</h3>

<p>外部の JavaScript ライブラリを使いたい場合は、パブリッシャにそのスクリプトを読み込んでもらうようにするのはナンセンスです。
パブリッシャに依存ライブラリを追加してもらうのでは、依存ライブラリに変更が入った際にパブリッシャに変更を依頼しなければならなくなります。</p>

<p><em>サードパーティ JavaScript の開発者は依存ライブラリは外部に依存しない形で利用するようにするのが求められます</em>。次のコードは非同期の JavaScript ローダ関数です。必要なスクリプトの読み込みが完了したら、引数の <code>callback</code> 関数を呼び出します。</p>

<pre><code class="javascript">function loadScript(url, callback) {
  var node   = document.getElementsByTagName('script')[0],
      script = document.createElement('script');

  script.src   = url;
  script.async = true;
  node.parentNode.insertBefore(script, node);

  script.onload = script.onreadystatechange = function() {
    var readyState = script.readyState;

    if (!readyState || /complete|loaded/.test(script.readyState)) {
      callback();
      script.onload = script.onreadystatechange = null;
    }
  };
}
</code></pre>

<p>このように、必要なライブラリは、アプリケーションが実行する前に読み込んでおくようにします。</p>

<h4>ライブラリの衝突に注意</h4>

<p>jQuery のようなよく使われるライブラリをこの方法で読み込む際には、すでに存在するオブジェクトと衝突しないように注意しなければなりません。
衝突を防ぐには <strong>名前空間</strong> を使います。jQuery の場合には衝突を避ける <code>noConflict</code> が用意されているので、これを使います。</p>

<pre><code class="javascript">var Stork = Stork || {};
Stork.$ = Stork.jQuery = jQuery.noConflict(true);
</code></pre>

<p>外部ライブラリを使う場合には、既に読み込まれていても衝突しないように注意する必要があります。</p>

<h2>HTML と CSS のレンダリング</h2>

<h3>スタイルを調整する方法</h3>

<p>HTML にスタイルを追加で当てる方法には3つの基本的な方法が考えられます。</p>

<ol>
<li>HTML にインラインでスタイルを当てる</li>
<li>関連する CSS ファイルを別途動的に読み込む</li>
<li>JavaScript にスタイルシートのルールを埋め込む</li>
</ol>


<h4>1. インラインスタイル</h4>

<p>インラインスタイルは他の要素のスタイルと干渉する心配がありません。デメリットは一般の Web サイトでインラインスタイルを使うべきでない理由と同じになります。</p>

<h4>2. CSS ファイルをロードする</h4>

<p>CSS ファイルを動的にロードする方法は、JavaScript を動的にロードする方法とほとんど同じになります。</p>

<pre><code class="javascript">function loadStylesheet(url) {
  var node = document.getElementsByTagName('script')[0],
      link = document.createElement('link');
  link.rel  = 'stylesheet';
  link.type = 'text/css';
  link.href = url;

  node.parentNode.insertBefore(link, node);
}
</code></pre>

<p><code>link</code> タグは <code>rel</code> 属性と <code>type</code> 属性はどちらも必須の属性になります。
CSS が読み込まれたタイミングを知りたい場合には、少し変わった方法が必要になります。ブラウザによっては、<code>link</code> タグは <code>script</code> タグのように読み込みが終わったタイミングで <code>load</code> イベントを発生させない場合があるからです。
CSS が読み込まれたかどうかをチェックするには、要素にスタイルが当たったかどうかを定期的にチェックする必要があります。</p>

<p><blockquote><p>JavaScript やその他のデータを読み込むためのライブラリである Yepnope.js では、document.styleSheets を使って新しく挿入されたスタイルシートをスキャンする方法をとっている。</p></blockquote></p>

<h5>JavaScript で要素の色を調べるときは注意！</h5>

<p><strong>JavaScript で要素の色を調べるときは注意が必要です</strong>。<em>廃止予定のマイクロソフトのアクセサはオリジナルの16進数の値を返します</em>。<em>W3C のアクセサは16進数の値を RGB 表現に変換して返します</em>。</p>

<h4>3. CSS を JavaScript 中に埋め込む</h4>

<p>JavaScript の文字列に CSS を含めてしまう方法です。</p>

<h3>防衛的な HTML と CSS</h3>

<p>サードパーティ CSS においては、名前空間 (prefix) をつけるようにするとよいです。</p>

<pre><code class="css">.stork-container { width: 200px; height: 200px; }
</code></pre>

<h4>CSS 優先順位</h4>

<p>CSS が優先的に当たるルールは次のとおりです。</p>

<ol>
<li>インラインのスタイル(style=&ldquo;&hellip;&rdquo;)</li>
<li>ID</li>
<li>クラス、属性および擬似クラス(:forcus, :hover)</li>
<li>要素(div, span など)、擬似要素(:before, :after)</li>
</ol>


<p>ただし、<code>!important</code> というキーワードでタグ付けされたプロパティは優先順位が最も高くなります。</p>

<pre><code class="css !important の例">.stork-price {
  font-size:       11px  !important;
  color:           #888  !important;
  text-decoration: none  !important;
  display:         block !important;
}
</code></pre>

<p>ブラウザはスコアシステムを使ってどのルールが優先されるかを計算しています。</p>

<table>
<thead>
<tr>
<th> セレクタ / ルールタイプ  </th>
<th> スコア (a, b, c, d) </th>
</tr>
</thead>
<tbody>
<tr>
<td> インラインの style 属性  </td>
<td> 1, 0, 0, 0 </td>
</tr>
<tr>
<td> ID                       </td>
<td> 0, 1, 0, 0 </td>
</tr>
<tr>
<td> クラス、擬似クラス、属性 </td>
<td> 0, 0, 1, 0 </td>
</tr>
<tr>
<td> 要素、擬似要素           </td>
<td> 0, 0, 0, 1 </td>
</tr>
</tbody>
</table>


<p>スコアは <code>a &gt; b</code>、<code>b &gt; c</code>、<code>c &gt; d</code> のように価値が高くなります。(1, 0, 0, 0) は (0, 100, 0, 0) よりも優先されるということです。</p>

<ul>
<li><code>.stork-container</code> (0,0,1,0 - クラスセレクタ1つ)</li>
<li><code>.stork-container span</code> (0,0,1,1 - クラスセレクタ1つ、要素セレクタ1つ)</li>
<li><code>.stork-container .strok-msg</code> (0, 0, 2, 0 - クラスセレクタ2つ)</li>
</ul>


<h4>CSS を過剰に指定すれば優先度は高くなる</h4>

<p>パブリッシャのスタイルよりも優先的にスタイルを当てるための簡単な方法は、過剰にルールを指定することです。</p>

<p>```html</p>

<div id="stork-main">
  <div id="stork-container">
    <h3 class="stork-product">Mikon E90 Digital SLR</h3>
    <img src="http://camerastork.com/img/products/1337-small.png" />
    <p class="stork-price">$599</p>
    <p class="stork-rating">4.3/5.0 &bull; 176 Reviews</p>
  </div>
</div>


<pre><code></code></pre>

<h1>stork-main #stork-container { &hellip; }</h1>

<h1>stork-main #stork-container .stork-product { &hellip; }</h1>

<h1>stork-main #stork-container .stork-price { &hellip; }</h1>

<pre><code>

### コンテンツを iframe に埋め込む

*パブリッシャのスタイルルールによる影響を受けずにスタイルを設定する方法は、`iframe` を使うこと* です。

#### src なし iframe

`src` 属性を指定しない `iframe` を作る場合、独立したウィンドウと DOM 環境を有しているという点で強力な効果があります。そして、**親ページで実行されているスクリプトは直接それらのオブジェクトにアクセスが可能** です。
`iframe` はブラウザによって非同期的に処理されるため、`document.write` のようなブロッキングが発生する処理を `iframe` の中で行ってもブラウザが親ページを処理するのを妨げることはありません。
ただし1つ注意点は、*親ページの `onload` イベントはブロッキングしてしまう* 点です。これは、`iframe` のレンダリングが完了したあとで、`document.close()` を呼び出すことで `onload` を強制的に発生させることで回避できます。

#### 外部 iframe

`iframe` のコンテンツが外部から提供されている場合には *ブラウザは親ページでホストされているスクリプトがそのコンテンツにアクセスすることを許可しません*。


## サーバとの通信

サードパーティアプリケーションでは、**クロスドメイン** の問題を扱わなければなりません。クロスドメイン対応には基本的なテクニックがあります。

- JSONP
- サブドメインプロキシ
- クロスオリジンリソース共有 (CORS)

### AJAX とブラウザの同一生成元ポリシー (SOP)

ブラウザは異なる生成元から配信されたドキュメントがそれぞれお互いに分離されることを保証するという、**同一生成元ポリシー (SOP) ** を備えています。
これによって、ドキュメント上のスクリプトが他のドキュメントにアクセスできるのは *同じドメイン*、*同じポート*、*同じプロトコル* である場合に限ることになります。

すべてのブラウザが、`XMLHttpRequest`、`iframe`、それ以外のドキュメント間のメッセージのやり取りの方法についてこの同一生成元ポリシーを適用しています。

重要な点が1つあります。**HTML の script 要素は SOP の適用を受けません**。つまり、外部の JavaScript ファイルの読み込みは可能になっています。
ただし、*読み込まれた JavaScript はパブリッシャのコンテキストで実行されるということは注意が必要* です。
例えば、camerastork.com の widget.js を publisher.dev の index.html で読み込まれたとしても、widget.js は camerastork.com への `XmlHttpRequest` を開始できません。


### JSONP

SOP は「HTML の script 要素はチェックの対象外」という重要な例外をもっています。この例外を使って、例えば次のような JSON データを返す URL を script 要素を使って読み込んでみます。
</code></pre>

<p>{
  &ldquo;title&rdquo;: &ldquo;Third-party JavaScript&rdquo;,
  &ldquo;authors&rdquo;: [&ldquo;Anton&rdquo;, &ldquo;Ben&rdquo;],
  &ldquo;publisher&rdquo;: &ldquo;Manning&rdquo;
}
```</p>

<p>```html</p>

<script src="http://thirdpartyjs.com/info.json"></script>


<pre><code>
この読み込みはうまくいきます。ただし、問題は、info.json は JavaScript として実行されるということです。
info.json は JavaScript としては正しい構文ではありませんし、もし正しく JavaScript オブジェクトとして評価されたとしても、どこからも使われずに終わってしまいます。

そこで、info.json を次のように変更します。
</code></pre>

<p>var jsonResponse = {
  &ldquo;title&rdquo;: &ldquo;Third-party JavaScript&rdquo;,
  &ldquo;authors&rdquo;: [&ldquo;Anton&rdquo;, &ldquo;Ben&rdquo;],
  &ldquo;publisher&rdquo;: &ldquo;Manning&rdquo;
};
```</p>

<p>こうすると、JavaScript として正しい評価がされ、スクリプトの実行が終わると、グローバルの <code>jsonResponse</code> 変数にオブジェクトが設定され使えるようになります。
変数ではなく、関数を呼び出すこともできます。そして、<strong>JSONP</strong> というのは、この <em>script を読み込む際に URL のクエリパラメータを使って呼び出し元がコールバック関数を指定できる仕組み</em> のことになります。</p>

<pre><code class="javascript">
function jsonpCallback(json) {
  console.log(json);
}

var script = document.createElement('script');
script.async = true;
script.src   = 'http://thirdpartyjs.com/info.js?callback=jsonpCallback';
document.body.appendChild(script);
</code></pre>

<h4>JSONP の制限</h4>

<p>JSONP は <strong>GET リクエストでのみ利用可能</strong> です。RESTful API を提供しているような場合、JSONP に合わせて GET のエンドポイントを用意していあげる必要が出てくるかもしれません。</p>

<p><em>JSONP リクエストは必ず非同期で処理されます</em>。ほとんどないとは思いますが、もしブロッキングが必要になった場合は、JSONP では不可能です。</p>

<h3>サブドメインプロキシ</h3>

<p>SOP は生成元のホスト部分を厳密に区別しています。<code>sub.example.com</code> と <code>example.com</code> は上位レベルのドメインは同じ (example.com) ですが、ブラウザは無関係なドメインとみなします。</p>

<p>デフォルトの動作はこうなりますが、ブラウザは <strong>Web サイトが生成元のホスト名をその上位ドメインに設定することを許可しています</strong>。
そのため、sub.example.com と alt.example.com のような共通の上位ドメインをもつサイト同士であれば両方の生成元を example.com に設定することでお互いに通信することができるようになります。</p>

<p>もし、企業向けの限られた環境だけで使うような JavaScript を作るのであれば、サブドメインの CNAME を割り当ててもらい、同一生成元を上位ドメインに設定することで通信可能にできるかもしれません。</p>

<h4>document.domain を利用してドキュメントの生成元を変更する</h4>

<p>ドキュメントの生成元を変えるには次のようなスクリプトを実行します。</p>

<pre><code class="javascript">document.domain = 'example.com';
</code></pre>

<p>生成元変更にはいくつか注意点があります。</p>

<ul>
<li>生成元を変更するスクリプトは <code>example.com</code> と <code>sub.example.com</code> の <strong>両方</strong> で行う必要がある</li>
<li><code>document.domain</code> を変更できるのは <strong>ページあたり1回だけ</strong></li>
<li><code>document.domain</code> を変更することで、<strong>生成元のポートは80にリセット</strong> される</li>
</ul>


<h4>AJAX から呼び出すためのサブドメイントンネルファイル</h4>

<p><code>document.domain</code> を変更することでドキュメントの生成元を変更することができるようになりましたが、まだこれだけでは AJAX を使ってサブドメインのドキュメントを読み込むことはできません。
<em>AJAX においては、まずリクエストを送ってみない限り取得するドキュメントが同じドメインに参加しようとしているかを知ることができない</em> からです。
CORS の仕様では特別なヘッダを使ってプリフライトリクエストを行うことでこの問題を解決していますが、ここではトンネルファイルを使った方法を見ていきます。</p>

<h5>非表示の iframe を使う</h5>

<p>AJAX リクエストを呼び出すページが呼び出し先のドメインと同じであればリクエストを送ることができますので、予め呼び出し先のドキュメントを同一生成元を変更して読み込めていれば、そのドキュメントを使って AJAX リクエストを送ることができます。</p>

<p>それが、<em>非表示の iframe を使う方法</em> です。非表示の iframe で生成元を変更するスクリプトが書かれたページを読み込み、そのページから AJAX リクエストを送るようにするのです。
そうすれば、サブドメインプロキシを通じて、トンネルファイルの iframe 上の非表示ドキュメントから AJAX リクエストを呼び出すことができ、iframe 上のドキュメントと親ページは同じ同一の生成元にいるのでデータの受け渡しも可能になるという仕組みができます。</p>

<p><img src="/images/2014-02-23-third-party-javascript-01.png" alt="サブドメイントンネルファイル" /></p>

<h5>JSONP と動的フォームを使う</h5>

<p>AJAX リクエストを送るためには非表示の iframe をもちいた中間ファイルが必要になります。中間ファイルを用いない方法として、動的にフォームを作成して、フォームをリクエストするという方法があります。</p>

<p><code>form</code> タグには <code>target</code> 属性が用意されているので、動的にフォームを作る際に結果を受け取るための <code>iframe</code> を作成して、その iframe をターゲットにフォームをポストするといいです。</p>

<h4>Google のブラウザセキュリティハンドブック</h4>

<p>同一生成元ポリシーやそれに伴うセキュリティ上のリスクをもっとよく知りたい場合は、Google の「ブラウザセキュリティハンドブック」のパート2を読むとよいです。</p>

<p><a href="https://code.google.com/p/browsersec/wiki/Part2">ブラウザセキュリティハンドブック Part2</a></p>

<h3>クロスオリジンリソース共有 (CORS)</h3>

<p><strong>クロスオリジンリソース共有 (CORS)</strong> は W3C のワーキングドラフトになっている、きちんと管理された形でドメインをまたがってサーバと通信を行う方法を定めたものです。</p>

<p>CORS では一連の特別な HTTP ヘッダを使ってブラウザとサーバがやり取りを行えるかどうかを決定するようになっています。</p>

<h4>Origin リクエスト</h4>

<p>クロスオリジンの HTTP リクエストを開始する際には、CORS に対応したブラウザは <code>Origin</code> と呼ばれる特殊なヘッダを含むリクエストを使って生成元を示すことになっています。</p>

<pre><code class="plain-raw">Origin: http://www.example.com/
</code></pre>

<p>サーバ側はこのヘッダをチェックして、そのリクエストが許可されるかどうかを決定します。応答するには、サーバは <code>Access-Control-Allow-Origin</code> というレスポンスヘッダにクライアントが送ったのと同じ生成元を入れて返さなければなりません。</p>

<pre><code class="plain-raw">Access-Control-Allow-Origin: http://www.example.com/
</code></pre>

<p>あらゆるところからリクエストを許可するにはワイルドカードを使うこともできます。</p>

<pre><code class="plain-raw">Access-Control-Allow-Origin: *
</code></pre>

<p>リクエストを許可しない場合は、サーバ側は CORS ヘッダを返さないようにします。また、リクエストに <code>Origin</code> ヘッダが存在していない場合は、サーバも CORS ヘッダを送り返すべきではないとされています。</p>

<h4>CORS で Cookie や認証ヘッダを送信する</h4>

<p>デフォルトでは、ブラウザは CORS を行う際には Cookie や HTTP 認証ヘッダを送らないようになっています。
こうした識別情報を送信するべきであると明示する場合には、<code>XmlHttpRequest</code> オブジェクトに <code>withCredentials</code> プロパティを設定します。</p>

<pre><code class="javascript">var xhr = new XmlHttpRequest();
xhr.withCredentials = true;
</code></pre>

<p>サーバ側は、識別情報を必要としている場合には <code>Access-Control-Allow-Origin</code> ヘッダに加えて、<code>Access-Control-Allow-Credentials</code> というヘッダもレスポンスに含める必要があります。
このヘッダがないと、ブラウザはレスポンスを拒否していしまいます。</p>

<pre><code class="plain-raw">Access-Control-Allow-Credentials: true
</code></pre>

<h2>クロスドメインでの iframe 間通信</h2>

<p>パブリッシャのページ上で実行されるアプリケーションコードと iframe 内のサードパーティのドメインで配信されているページとの間でドキュメントをやり取りする方法です。</p>

<h3>HTML5 window.postMessage API</h3>

<p><code>window.postMessage</code> はイベントを利用した安全なクロスドメイン通信 API です。
メッセージを送りたいウィンドウオブジェクトを取得して、<code>postMessage</code> を送るだけです。
送られる側はウィンドウの <code>message</code> イベントで受け取ります。</p>

<p>```html http://publisher.dev/index.html
&lt;!DOCTYPE html>
<html>
<body></p>

<h1>Publisher</h1>




<iframe id="thirdparty" src="http://thirdparty.dev/index.html">
</iframe>




<script>
var frame = document.getElementById('thirdparty');
frame.addEventListener('load', function(e) {
    var win = frame.contentWindow;
    win.postMessage('Hello World!', 'http://thirdparty.dev/');
});
</script>


<p></body>
</html>
```</p>

<p>```html http://thirdparty.dev/index.html
&lt;!DOCTYPE html>
<html>
<body></p>

<h1>thirdparty</h1>


<script>
function receiver(e) {
    console.log(e.data);
    console.log(e.origin);
    console.log(e.source);
}
window.addEventListener('message', receiver, false);
</script>


<p></body>
</html>
```</p>

<h3>easyXDM を利用したクロスドメインメッセージング</h3>

<p><a href="http://easyxdm.net/wp/">easyXDM</a></p>

<p>クロスドメイン間でメッセージをやり取りするためのライブラリに <strong>easyXDM</strong> があります。
このライブラリは複数の異なるクロスドメインメッセージングのテクニックを組み合わせて、そのなかかkらそれぞれのブラウザに適したものを選択してくれます。</p>

<h2>メモ</h2>

<h3>ポップアップブロック機能を回避する方法</h3>

<p><blockquote><p>これを避けるには、新しいウィンドウを常に<strong>ユーザーのアクションの直接の結果</strong>として開くようにすることだ。ユーザーのアクションからウィンドウを開くまでの間に遅延が存在すると、多くのブラウザはそれを悪意ある動作とみなして処理を阻止してしまう。</p></blockquote></p>

<h2>感想</h2>

<p>読んでみて、<strong>本書はサードパーティ JavaScript を書かなくても、サーバ側の API を実装するだけの人も読むべき</strong> だと思いました。
クロスオリジン問題やセキュリティに関する話題も豊富に書かれていて、全てが有用な情報です。</p>

<p>ブラウザとサーバがどんなことをやっているのかをきちんと理解したい人は、是非よんでみてください。絶対に為になります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptで学ぶ関数型プログラミング]]></title>
    <link href="http://hamasyou.com/blog/2014/02/21/functional-javascript/"/>
    <updated>2014-02-21T19:39:56+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/21/functional-javascript</id>
    <content type="html"><![CDATA[<p><blockquote><p>本書はJavaScriptを使って関数型プログラミングを学ぶ書籍です。関数型言語としてJavaScriptを理解し、使用することにより、コードがより洗練され、美しく、そして読みやすいものになることを目的としています。JavaScriptビルトインのデータ型を上手に利用するための基本知識やJavaScriptにおける関数の持つ特性など、関数型プログラミングの技術とその考え方について解説します。また実際のJavaScriptコーディングに関数型プログラミングのエッセンスを加えるポイントをサンプルを使って丁寧に説明します。関数型プログラミングに精通した著者が書き下ろした本書は、テクニックを増やし、コーディングのイマジネーションを広げたいエンジニア必携の一冊です。</p><footer><strong>内容紹介</strong></footer></blockquote></p>

<p>JavaScript は純粋な関数型プログラミング言語ではありません。が、<strong>関数型言語として JavaScript を理解し使用することでコードがより洗練され、読みやすいものになる</strong> はずという筆者の考えがこの本には現れています。</p>

<p>JavaScript では関数型プログラミングは一つのスタイルにしかすぎず、必要な場面で適切に使うというアプローチをとることでよりよいコードや使いやすい関数になります。</p>

<!-- more -->


<h2>関数型プログラミング</h2>

<p><img src="/images/2014-02-21-functional-javascript-02.jpg" alt="関数型プログラミング" /></p>

<p>本書のおぼえがきです。本書の中から気になった箇所だけ抜き出しているので、意味が通じないかもしれません。。気になったら買って読んでみてください。</p>

<h3>関数型プログラミングとは</h3>

<p><blockquote><p>関数型プログラミングとは、値を抽象の単位に変換する関数を使用して行うプログラミングであり、それらを使ってソフトウェアシステムを構築することである。</p></blockquote></p>

<p>オブジェクト指向では、問題領域をオブジェクトという単位に分解して対処していきますが、関数型プログラミングでは、問題を <strong>関数</strong> のパーツに分解します。</p>

<p>オブジェクト指向のアプローチは問題を「<strong>名詞</strong>」に分解して行う傾向があるのに対して、関数型プログラミングでは、問題を「<strong>動詞</strong>」に分解する傾向があります。</p>

<p>関数を通して、与えられた値を「<strong>変換</strong>」することができます。</p>

<pre><code class="plain-raw">markdown → toHTML → postProcess → modifyDOM
         │        │             │
      テキスト   HTML       編集されたHTML
</code></pre>

<h3>高階関数</h3>

<p><strong>高階関数</strong> とは、関数を引数にとり新しい関数を生成して返す関数のことです。</p>

<p>例えば、JavaScript の Array には <code>sort</code> 関数があります。<code>sort</code> は引数に <code>compareFunction</code> を取ります。値の大小を比較する関数を <code>lessOrEqual</code>、この関数を <code>compareFunction</code> の仕様に変換する関数を <code>compare</code> とします。</p>

<pre><code class="javascript">function lessOrEqual(x, y) {
  return x &lt;= y;
}

function compare(func) {
  return function(x, y) {
    if (func(x, y)) {
      return -1;
    } else if (func(y, x)) {
      return 1;
    } else {
      return 0;
    }
  };
}

[100, 1, 0, 10, -1, -2, -1].sort(compare(lessOrEqual));
// =&gt; [-2, -1, -1, 0, 1, 10, 100]
</code></pre>

<p><code>compare</code> 関数は大小比較を行う関数を引数にとり、<code>compareFunction</code> の仕様に則った関数を生成して返す高階関数になります。</p>

<h3>JavaScript における関数型プログラミング</h3>

<ul>
<li>関数による抽象の定義（<code>existy</code> や <code>truthy</code>）</li>
<li>関数を他の関数の引数に渡すことによる新たな動作の実現</li>
</ul>


<pre><code class="javascript">function existy(x) { return x != null; }
function truthy(x) { return (x !== false) &amp;&amp; existy(x); }

[null, undefined, 1, 2, false].map(existy);
// =&gt; [false, false, true, true, true]
[null, undefined, 1, 2, false].map(truthy);
// =&gt; [false, false, true, true, false]
</code></pre>

<p>これこそが、<strong>関数型プログラミング</strong> です。関数型プログラミングは強力な <strong>データ抽象</strong> とともに実装されて役に立つものです。</p>

<h3>命令型プログラミングと関数型プログラミングの違いの例</h3>

<p>「99本のビール」の歌の歌詞を構築するプログラムを命令型プログラミングと関数型プログラミングで書いてみた例です。</p>

<pre><code class="javascript 命令型プログラミング">var lyrics = [];

for (var bottles = 99; bottles &gt; 0; bottles--) {
  lyrics.push(bottles + '本のビールが残ってる');
  lyrics.push(bottles + '本のビール');
  lyrics.push('ひとつ取って、隣に回せ');
  if (bottles === 1) {
    lyrics.push('もうビールは残ってない');
  }
}
</code></pre>

<p>関数型プログラミングのアプローチで書くとこうなります。</p>

<pre><code class="javascript 関数型プログラミング">// var _ = require('underscore');
function lyricsSegment(n) {
  return _.chain([])
    .push(n + '本のビールが残ってる')
    .push(n + '本のビール')
    .push('ひとつ取って、隣に回せ')
    .tap(function(lyrics) {
        if (n &lt; 1) {
          lyrics.push('もうビールは残ってない');
        }
    })
    .value();
}

function song(start, end, lyricGen) {
  return _.reduce(_.range(start, end, -1),
    function(acc, n) {
      return acc.concat(lyricGen(n));
    }, []);
}

song(99, 0, lyricSegment);
</code></pre>

<p><strong>命令型プログラミングは一度きりの実装となりがちで、再利用が難しいものになります</strong>。</p>

<h3>コレクション中心プログラミング</h3>

<p>関数型プログラミングは、<em>コレクションに入った多数のアイテムに同じ操作を適用するようなタスク</em> を行う際にとても便利です。</p>

<p>一般的な関数型プログラミングによって主張されるコレクション中心の考え方のポイントは、その処理を行うために一貫性のある語彙を確立し、包括的に揃えた関数を再利用出来るようにすることです。</p>

<p><blockquote><p>10種類のデータ構造上で10の関数を動かすよりも、ひとつのデータ構造上で100の関数を動かすほうがよい。</p><footer><strong>Alan Perlis</strong></footer></blockquote></p>

<p>関数型プログラミングでは、<strong>それぞれの関数がすこしずつデータを変換し、最後の解に至る</strong> ようにします。</p>

<h3>値ではなく、関数を使え</h3>

<p>ある値を何度か繰り返す関数はよい関数ですが、<strong>ある計算を何度か繰り返す関数のほうがよりよい</strong> 関数です。</p>

<pre><code class="javascript よい関数">function repeat(times, VALUE) {
  return _.map(_.range(times), function() { return VALUE; });
}

repeat(4, 'Major');
// =&gt; ["Major", "Major", "Major", "Major"]
</code></pre>

<pre><code class="javascript よりよい関数">function repeatedly(times, func) {
  return _.map(_.range(times), func);
}

repeatedly(4, function() { return 'Major'; });
// =&gt; ["Major", "Major", "Major", "Major"]
repeatedly(3, function() { return Math.floor((Math.random() * 10) + 1); });
// =&gt; [1, 3, 8]
</code></pre>

<h2>関数を作る関数を作る意義</h2>

<h3>カリー化</h3>

<p><img src="/images/2014-02-21-functional-javascript-01.jpg" alt="カリー化" /></p>

<p>カリー化された関数というのは、<em>引数を一つ受け取るたびに新しい関数を返す関数</em> のことです。<code>invoker</code> 関数はカリー化された関数といえます。</p>

<pre><code class="javascript カリー化された関数">invoker('reverse', Array.prototype.reverse)([1,2,3]);
// =&gt; [3,2,1]
</code></pre>

<p>JavaScript は変数の値の変更に対しておおらかな言語です。オブジェクト指向のカプセル化のような事をする場合、クロージャを使うと便利です。</p>

<p>クロージャを使うと、生成時のコンテキストにもとづいて特定の動作を行うように「<em>設定された</em>」関数を返すことができます。この設定された関数は外部からカプセル化されており、関数の抽象を高めます。</p>

<p>カリー化された関数も同じ考え方になります。</p>

<h3>JavaScript でカリー化を行う意味</h3>

<p>まず、シンプルな高階関数をつくります。関数を引数に取り、引数をひとつだけ取るように限定された関数を返す関数です。</p>

<pre><code class="javascript curry">function curry(func) {
  return function(arg) {
    return func(arg);
  };
}
</code></pre>

<p>JavaScript の関数は <strong>引数をいくら渡してもエラーになりません</strong>。そこで、いくつかの「<em>専門化を行う</em>」引数をオプションで取る場合がよくあります。</p>

<p>例えば <code>parseInt</code> という関数は、第2引数に n 進数の n をオプションで受け取ります。</p>

<pre><code class="javascript parseInt">parseInt('11');
// =&gt; 11
parseInt('11', 2);
// =&gt; 3
</code></pre>

<p><code>parseInt</code> を第一級関数として使うと第2引数が原因で混乱するケースがあります。</p>

<pre><code class="javascript">['11', '11', '11', '11'].map(parseInt);
// =&gt; [11, NaN, 3, 4]
</code></pre>

<p>JavaScript の <code>map</code> は与えられた関数の第1引数に <em>要素</em>、第2引数に <em>インデックス</em>、第3引数に <em>元の配列</em> を渡します。そのため、こんな結果になってしまいます。</p>

<p>ここで、先ほど定義した <code>curry</code> 関数を利用します。与えられた関数に一つだけ引数を渡すように強制してみます。</p>

<pre><code class="javascript">['11', '11', '11', '11'].map(curry(parseInt));
// =&gt; [11, 11, 11, 11]
</code></pre>

<p>引数を2つ取るようにする <code>curry2</code> は次のようになります。</p>

<pre><code class="javascript curry2">function curry2(func) {
  return function(secondArg) {
    return function(firstArg) {
      return func(firstArg, secondArg);
    };
  };
}

parseIntByBinary = curry2(parseInt)(2);
parseIntByBinary('111');
// =&gt; 7
parseIntByBinary('10');
// =&gt; 2
</code></pre>

<p>このように、<strong>カリー化は JavaScript の関数の動作を「専門化」させるための有効なテクニック</strong> になります。</p>

<h2>再帰</h2>

<p><img src="/images/2014-02-21-functional-javascript-03.jpg" alt="再帰" /></p>

<p>再帰が関数型プログラミングに重要である3つの理由。</p>

<ul>
<li>共通の問題のサブセットに単一の抽象を使用する</li>
<li>可変の状態を隠蔽することができる</li>
<li>遅延評価や無限データ構造の処理を行う手段のひとつ</li>
</ul>


<p>配列の長さを調べる関数を再帰の考え方で解くと。</p>

<ol>
<li>もし配列が空であれば長さは0</li>
<li>配列の最初の要素を取り出し、残りを自身の関数に渡した実行結果に1を加える</li>
</ol>


<pre><code class="javascript length">function length(array) {
  if (_.isEmpty(array)) {
    return 0;
  } else {
    return 1 + length(_.rest(array));
  }
}
</code></pre>

<p>再帰をうまく実装するヒントは、「<strong>値は大きな問題に内包された小さな問題によって組み立てられるものである</strong>」と認識することです。</p>

<p><em>基本的な場合を考える</em> ことで、分解の最初の一歩を踏み出しやすくなります。</p>

<h2>純粋関数と冪等とデータの不変性</h2>

<p><img src="/images/2014-02-21-functional-javascript-05.jpg" alt="データの普遍性" /></p>

<h3>純粋関数</h3>

<p><strong>純粋関数</strong> とは、その関数が外部に一切の影響を与えないことが静的に保証されている関数です。純粋性のルールはつぎのようになります。</p>

<ul>
<li>結果は引数として与えられた値からのみ計算される</li>
<li>関数の外部で変更される可能性のあるデータに一切依存しない</li>
<li>関数実行部の外側に存在する何かの状態を一切変更しない</li>
</ul>


<p><a href="https://github.com/k3kaimu/d-manual/blob/master/function.md#%E7%B4%94%E7%B2%8B%E9%96%A2%E6%95%B0pure">純粋関数</a></p>

<h3>冪等（べきとう）</h3>

<p>RESTful なアーキテクチャが一般化するにつれて <strong>冪等（べきとう）</strong> の考え方も一般に浸透してきました。冪等とは、<em>あるアクションを何度行っても一度行った場合とまったくおなじ効果をもたらす</em> というものです。冪等である関数は次の条件を満たします。</p>

<pre><code class="javascript 冪等な関数">someFunc(arg) == _.compose(someFunc, someFunc)(arg);
</code></pre>

<p>ある引数を与えて実行するということは、その関数を2回連続で呼び出しても同じ結果を返します。</p>

<h3>不変性</h3>

<p>JavaScript はダイナミックな言語です。<em>純粋関数のポリシーに縛られるがゆえに、関数のダイナミックさを犠牲にする必要はありません</em>。</p>

<p>しかし、変数は変更するたびにその変数を参照するタイミングによって異なる値が返ってきます。<em>プログラムのすべての状態変更を除去することは不可能ですが、可能なかぎり減らすほうがよい</em> です。</p>

<p>そして、<em>関数型プログラミングの理想な状況とは、可変なものが全く存在しない</em> という状況です。</p>

<p>関数を <strong>抽象の基本的な単位</strong> としてみる利点は、関数の実装内容が外部に「<em>漏れる</em>」ことがなければ、関数の利用側は関数の実装に無関係であることです。</p>

<p>つまり、関数型プログラミングにおける関数でも、内部で命令的なプログラミングをしていたり、変数の状態を変更していたとしても、外部にもれなければ問題にはならないということです。</p>

<p>JavaScript は <strong>関数が変数の境界をつくる</strong> ので、ローカル変数の状態変更は関数が外部に漏れるのを防いでくれます。</p>

<p><blockquote><p>誰もいない森で木が倒れたら、音がするでしょうか？<br/>不変性を持った戻り値を生成するために、純粋関数がローカルデータを変異させたとしたら、それは良いことなのでしょうか？</p><footer><strong>Rich Hickey</strong> <cite><a href='http://clojure.org/transients'>clojure.org/transients/&hellip;</a></cite></footer></blockquote></p>

<p>結局のところ、答えは <strong>Yes</strong> です。</p>

<h3>不変性を保つためにとりうる手段</h3>

<p>JavaScript のオブジェクトフィールドは常に参照可能なので、オブジェクトは不変ではありません。不変性を保つために関数の実装側がとりえる手段は実質つぎの3つのどれかになります。</p>

<ul>
<li>浅いコピーで十分な場合は <code>_.clone</code> を使ってコピーする</li>
<li>深いコピーが必要な場合は <code>deepClone</code> を使う</li>
<li>純粋関数を使ってコードを記述する</li>
</ul>


<h2>メモ</h2>

<p><img src="/images/2014-02-21-functional-javascript-04.jpg" alt="メモ" /></p>

<p>本書の中に出てきた、関数とかのメモ。</p>

<h3>predicate</h3>

<p>常に真偽値（<code>true</code> or <code>false</code>）を返す関数を <strong>predicate</strong> と呼びます。</p>

<pre><code class="javascript">function lessOrEqual(x, y) {
  return x &lt;= y;
}
</code></pre>

<h3>existy と truthy</h3>

<p><code>existy</code> は与えられた値が存在するかどうかを返す関数です。<code>truthy</code> は与えられた値が <code>true</code> とみなされるかどうかを返す関数です。</p>

<pre><code class="javascript">function existy(x) {
  return x != null;
}

function truthy(x) {
  return (x !== false) &amp;&amp; existy(x);
}
</code></pre>

<p><code>truthy</code> は0を <code>true</code> と判定します。これは JavaScript の標準の動作とは違いますが、0を <code>false</code> と同一とみなすのは C 言語の遺物であると筆者は考えているようです。</p>

<h3>JavaScript 関数の設計指針</h3>

<p>JavaScript ではある条件が <code>true</code> の場合のみ処理を行い、それ以外の場合には <code>undefined</code> か <code>null</code> を返す動作が使いやすい場合が多い。</p>

<h3>メタプログラミングとは</h3>

<p><blockquote><p>プログラミングは何かを行うためにコードを書くものであるが、メタプログラミングは何かを解釈する方法を変更するためにコードを書くものである。</p></blockquote></p>

<h3>第一級関数</h3>

<p>第一級関数は他のデータ型と同じように、扱うことができる関数のことです。</p>

<ul>
<li>変数に格納できる</li>
<li>必要に応じて生成できる</li>
<li>他の関数の引数として渡すことができる</li>
<li>関数の戻り値として返すことができる</li>
</ul>


<h3>コレクション中の <code>null</code> に対する防御用の関数 <code>fnull</code></h3>

<p><code>fnull</code> は関数と可変長引数をとる関数です。与えられた関数の実行を行う際に <code>undefined</code> か <code>null</code> の値の場合にはデフォルト値を使うようにして関数を呼び出します。</p>

<pre><code class="javascript fnull">function fnull(func /* , 可変長のデフォルト引数 */) {
  var defaults = _.rest(arguments);
  return function( /* args */ ) {
    var args = _.map(arguments, function(e, i) { return existy(e) ? e : defaults[i]; });
    return func.apply(null, args);
  };
}

var safeMulti = fnull(function(total, n) { return total * n; }, 1, 1);
_.reduce([1, 2, 3, null, 5], safeMulti);
// =&gt; 30
</code></pre>

<h3>invoker</h3>

<p><code>invoker</code> は関数を返す関数です。引数にメソッド名を取り、メソッドの実行主体のオブジェクトを渡すとそのオブジェクトでメソッドを実行する関数を返します。</p>

<pre><code class="javascript invoker">function invoker(NAME, METHOD) {
  return function(target /* , 任意の引数 */) {
    if (!existy(target)) fail('Must provide a target');

    var targetMethod = target[NAME];
    var args         = _.rest(arguments);
    return doWhen((existy(targetMethod) &amp;&amp; METHOD == targetMethod), function() {
      return targetMethod.apply(target, args);
    });
  };
}

var rev = invoker('reverse', Array.prototype.reverse);
_.map([[1, 2, 3]), rev);
// =&gt; [[3, 2, 1]]
</code></pre>

<p>関数型のスタイルでは、<em>関数の実行主体となるオブジェクトを引数にとる関数の形が好まれます</em>。</p>

<h3>メソッドチェーン</h3>

<p>メソッドチェーンは「<em>流暢な</em>」API を構築するために有用なパターンです。流暢な API とは例えば次のようなものです。</p>

<pre><code class="javascript 流暢な API の例">createPerson()
  .setFirstName('Mike')
  .setLastName('Fogus')
  .setAge(108)
  .toString();
</code></pre>

<p>メソッドチェーンを実現する「<em>魔法</em>」は <em>チェーン内のそれぞれのメソッドが同じホストのオブジェクトの参照を返す</em> ことです。</p>

<p>上の方のメモで、関数が前提条件に合わない引数を受け取った場合は <code>undefined</code> か <code>null</code> を返すのがよいとありました。メソッドチェーンで使うことを考えている関数の場合は <code>undefined</code>、<code>null</code>、<code>同じホストのオブジェクト</code> のどれを返せばいいんでしょうかね。。。</p>

<h2>感想</h2>

<p>JavaScript の関数の基本的なところから説明をはじめて、<strong>関数型プログラミング</strong>、<strong>クロージャ</strong>、<strong>高階関数</strong>、<strong>カリー化</strong>、<strong>再帰</strong>、<strong>フィルタ</strong>、<strong>パイプライン</strong>等の関数の設計方法がふんだんに解説されています。</p>

<p>説明がとても丁寧で分かりやすく、関数型プログラミングのことを知らない人でも理解しやすいと思います。</p>

<p>関数型プログラミングを学ぶと、<strong>純粋関数</strong>、<strong>データの不変性</strong> というテーマに当たります。JavaScript にはないですが、Ruby ではメソッドに <code>!</code> が付いた自分自身を変更する破壊的なメソッドがあります。関数型プログラミングとオブジェクト指向プログラミングをうまい具合に取り入れている言語だと再認識しました。</p>

<p>JavaScript で関数型プログラミングを学ぶというテーマですが、<em>関数型プログラミングを学ぶことで他の言語の面白い点も見えてくる</em> というのが読了しての感想です。</p>

<p>JavaScript は Java に次いで最も多く利用されている言語ですので、<strong>JavaScript をよりよく使うため、他の関数型言語をより楽しむため</strong> に本書を活用してみてはいかがでしょうか。おすすめです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでつくるRESTful APIのrequest specを書く]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/rails-request-rspec/"/>
    <updated>2014-02-17T14:09:38+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/rails-request-rspec</id>
    <content type="html"><![CDATA[<p>Rails 環境で RESTful API を提供する場面があると思います。API もコントローラで提供するので、コントローラのテストで記述してもいいのですが、RESTful API であれば、<strong>request spec</strong> を使うほうがよさそうなので request spec を書くメモです。</p>

<ul>
<li>Rails 4.0.2</li>
<li>rspec 2.14.1</li>
</ul>


<!-- more -->


<h2>テスト用のプロジェクトを整える</h2>

<p>まずは、チュートリアル用のプロジェクトを作成します。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>rails new specbox &ndash;skip-bundle</span><span class='line command'>cd specbox</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><code>Gemfile</code> を開いて次の gem を追記します。</p>

<pre><code class="ruby Gemfile">group :development, :test do
  gem 'rspec-rails'
  gem 'guard-rspec'
  gem 'factory_girl_rails'
  gem 'spring'
  gem 'spring-commands-rspec'
end
</code></pre>

<p>rspec と scaffold の設定を行います。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>bundle install &ndash;path vendor/bundle</span><span class='line command'>bundle exec rails g rspec:install</span><span class='line command'>bundle exec guard init rspec</span><span class='line command'>bundle exec rails g model Book title:string author:string price:integer</span><span class='line command'>bundle exec rails g scaffold_controller Books</span><span class='line command'>bundle exec rake db:migrate</span><span class='line command'>bundle exec rake db:test:prepare</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><code>config/routes.rb</code> にルーティングを追加します。</p>

<pre><code class="ruby config/routes.rb">Specbox::Application.routes.draw do
  ...
  resources :books
  ...
end
</code></pre>

<p>テストを実行します。</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>bundle exec guard</span><span class='line output'>15:12:01 - INFO - Run all
</span><span class='line output'>15:12:01 - INFO - Running all specs
</span><span class='line output'>..**&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..</p>
</span><span class='line output'>
</span><span class='line output'><p>Pending:
</span><span class='line output'>  Book add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/models/book_spec.rb
</span><span class='line output'>    # No reason given
</span><span class='line output'>    # ./spec/models/book_spec.rb:4
</span><span class='line output'>  BooksHelper add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/helpers/books_helper_spec.rb
</span><span class='line output'>    # No reason given
</span><span class='line output'>    # ./spec/helpers/books_helper_spec.rb:14</p>
</span><span class='line output'>
</span><span class='line output'><p>Finished in 0.18066 seconds
</span><span class='line output'>30 examples, 0 failures, 2 pending</p>
</span><span class='line output'>
</span><span class='line output'><p>Randomized with seed 14063</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>これで rspec の設定ができました。それでは <em>request spec</em> を書いていきます。</p>

<h2>request spec を書く</h2>

<p><em>request spec</em> は他の rspec のテストとほとんど変わりありません。テストは <code>spec/requests</code> フォルダの下に作成していきます。</p>

<p><code>scaffold_controller</code> でコントローラを作成したので、すでに <code>spec/requests/books_spec.rb</code> があるはずです。テストコードを見てみます。</p>

<pre><code class="ruby spec/requests/books_spec.rb">require 'spec_helper'

describe "Books" do
  describe "GET /books" do
    it "works! (now write some real specs)" do
      # Run the generator again with the --webrat flag if you want to use webrat methods/matchers
      get books_path
      response.status.should be(200)
    end
  end
end
</code></pre>

<p>request spec もコントローラのテストと同じように、<code>get</code>、<code>post</code>、といったメソッドを使ってテストを行います。<code>books_spec.rb</code> を次のように書き換えてみます。</p>

<pre><code class="ruby spec/requests/books_spec.rb">require 'spec_helper'

describe 'Books' do
  describe 'GET /books' do

    it '登録されている本が返されること' do
      book = FactoryGirl.create(:book)
      get '/books', format: 'json'
      expect(response).to be_success
      expect(json).to be_a_kind_of(Array)
      expect(json[0]['id']).to eq book.id
    end
  end
end
</code></pre>

<p>request spec はこういう感じで、<strong>実際に呼び出す URL を記述する</strong> のと、<strong>json の中身をチェックする</strong> のが大事だと思っています。</p>

<p>コントローラのテストではビューの中身までチェックしませんし、ビューのテストとコントローラのテストを2つ書くのはテストを把握しづらいので、request spec のテストのように一箇所で同時にテストするのが効果的だと思います。</p>

<p>API はインターフェース（<em>入力パラメータ</em> と <em>出力形式</em> ）が大事なのでここをきっちり押さえておくテストを書く必要があります。</p>

<p>で、テストケースを変えると当然テストが失敗するので、テストが通るようにヘルパを書き換えます。</p>

<h3>request_helpers.rb を作成する</h3>

<p>request spec を書くときに便利なメソッドをいくつか用意しておきます。</p>

<p>RESTful API は出力を json で返すものが多いと思うので、json を扱いやすくするヘルパーを用意します。</p>

<p>また、 <code>AuthenticationHelper</code> は認証が必要な API を呼び出すときの便利メソッドとして記述してありますが、不要であれば削除、仕様が違うようであれば書きなおしてつかいます。</p>

<p>次のファイルを <code>spec/support/request_helpers.rb</code> として作成します。</p>

<pre><code class="ruby spec/support/request_helpers.rb">module Requests
  module JsonHelpers
    def json
      @json ||= JSON.parse(response.body)
    end
  end

  module AuthenticationHelper
    %w(get post put delete).each do |method_name|
      define_method("auth_#{method_name}") do |uri, auth_user, params = {}, env = {}, &amp;block|
        __send__(method_name, uri, params, env.reverse_merge(HTTP_AUTHORIZATION: "token #{auth_user.access_token}"), &amp;block)
      end
    end
  end
end
</code></pre>

<p>このヘルパを <code>spec/spec_helper.rb</code> に追加します。</p>

<pre><code class="ruby spec/spec_helper.rb">RSpec.configure do |config|
  ...
  config.include Requests::JsonHelpers, type: :request
  config.include Requests::AuthenticationHelper, type: :request
  ...
end
</code></pre>

<p>これでテストが通るようになりました。</p>

<h2>まとめ</h2>

<p>Rails で RESTful な API を作ることはよくあると思いますが、今までは API のテストもコントローラのテストで行っていました。</p>

<p>でも、request spec を使ったほうが <strong>呼び出しのURL</strong>、<strong>必要なパラメータ</strong>、<strong>出力形式</strong> を素直にテストとして書けるので、API のテストは request spec を使うようにするといいかなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[open-uri-postを使うとrest-clientが変な動きするをする]]></title>
    <link href="http://hamasyou.com/blog/2014/02/16/ruby-open-uri-post-rest-client/"/>
    <updated>2014-02-16T21:45:53+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/16/ruby-open-uri-post-rest-client</id>
    <content type="html"><![CDATA[<p>ruby の <code>open-uri</code> を POST に対応させる <code>open-uri-post</code> というライブラリがありますが、これを使うと <code>rest-client</code> の gem が変な動きをするようです。</p>

<!-- more -->


<p><code>open-uri-post</code> を <code>require</code> すると <code>RestClient.post</code> が GET のリクエストになってうまくリクエストできなくなってしまいました。。</p>

<p><a href="http://d.hatena.ne.jp/urekat/20070201/1170349097">[ruby]open-uriをPOST対応させる</a></p>

<p><a href="https://github.com/rest-client/rest-client">rest-client/rest-client</a></p>

<p>下のサンプルでは、そもそもリクエストが送れなかったりもします。。</p>

<h3>open-uri-post だけの場合</h3>

<pre><code class="ruby">require './open-uri-post.rb'
open('http://localhost:9292', {'postdata' =&gt; 'name=hamasyou'}).read
</code></pre>

<pre><code class="console">"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"QUERY_STRING : "
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_ACCEPT_ENCODING : gzip;q=1.0,deflate;q=0.6,identity;q=0.3"
"HTTP_ACCEPT : */*"
"HTTP_USER_AGENT : Ruby"
"HTTP_HOST : localhost:9292"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001029c65f0&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x000001029c6578&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [16/Feb/2014 22:02:26] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<p><code>CONTENT_LENGTH: 13</code> になっていて、パラメータもきちんと送れています。</p>

<h3>rest-client だけの場合</h3>

<pre><code class="ruby">require 'rest_client'
RestClient.post('http://localhost:9292', name: 'hamasyou')
</code></pre>

<pre><code class="console">"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"QUERY_STRING : "
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_ACCEPT : */*; q=0.5, application/xml"
"HTTP_ACCEPT_ENCODING : gzip, deflate"
"HTTP_USER_AGENT : Ruby"
"HTTP_HOST : localhost:9292"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010299d380&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010299d290&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [16/Feb/2014 22:03:29] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<p>こっちも、きちんとリクエストできています。</p>

<h3>open-uri-post と rest-client を同時に使うと</h3>

<pre><code class="ruby">require './open-uri-post.rb'
require 'rest_client'

# open('http://localhost:9292', {'postdata' =&gt; 'name=hamasyou'}).read
RestClient.post('http://localhost:9292', name: 'hamasyou')
RestClient.get('http://localhost:9292', params: {name: 'hamasyou'})
</code></pre>

<p><code>open-uri-post</code> の方の <code>open</code> メソッドはうまく動きますが、RestClient が動かなくなります。</p>

<pre><code class="console">/vendor/bundle/ruby/2.1.0/gems/rest-client-1.6.7/lib/restclient/abstract_response.rb:48:in `return!': 408 Request Timeout (RestClient::RequestTimeout)
</code></pre>

<p>RequestTimeout が出てしまいました。。ちなみに、<code>GET</code> リクエストの方はうまく動きます。<code>open-uri-post</code> と <code>rest-client</code> は一緒に使わないほうがいいですね。</p>
]]></content>
  </entry>
  
</feed>
