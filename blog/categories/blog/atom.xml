<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | それはBooks]]></title>
  <link href="http://hamasyou.com/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-12T19:22:37+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[#qiita_sushi に参加した]]></title>
    <link href="http://hamasyou.com/blog/2013/03/04/qiita-sushi/"/>
    <updated>2013-03-04T23:15:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/03/04/qiita-sushi</id>
    <content type="html"><![CDATA[<p>Qiita を運営されている Increments さんが一周年ということで、白ワイン持参で参加させていただきました。</p>

<p>寿司職人が目の前で握ってくれる本格派！</p>

<p><img src="/images/qiita_sushi.jpg" width="320"></p>

<p>次の Qiita イベントにも是非参加します！今後とも、エンジニアのためのサービスをガンガンリリースしてもらいたいと思います。うちの会社もエンジニアの会社なので期待しています！</p>

<p>一周年、おめでとうございます！</p>

<p>ちなみに、Qiita イベントの出席者は、Perl 界隈の人と Ruby 界隈の人が半々くらいな感じ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text2 で Titanium Mobile のコード補完を効かせる方法]]></title>
    <link href="http://hamasyou.com/blog/2013/01/29/sublime-text2-titanium-mobile/"/>
    <updated>2013-01-29T13:23:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/01/29/sublime-text2-titanium-mobile</id>
    <content type="html"><![CDATA[<p>Qiita にも書きました。 <a href="http://qiita.com/items/ef8c332710960e2730d6" rel="external nofollow">Qiita: http://qiita.com/items/ef8c332710960e2730d6</a></p>

<h3>1. Package Manager で SublimeCodeIntel をインストールする</h3>


<p>Sublime Text2 の PackageManager を使って SublimeCodeIntel をインストールします。</p>

<p><i class="fa fa-search"></i> <a href="http://ready-study-go.blogspot.jp/2011/09/sublime-text-2.html" rel="external nofollow">http://ready-study-go.blogspot.jp/2011/09/sublime-text-2.html</a></p>

<h3>2. jsca2.js を使って Titanium Mobile の API doc を JavaScript 化する。</h3>


<p><i class="fa fa-search"></i> <a href="https://github.com/navinpeiris/jsca2js" rel="external nofollow">jsca2js: https://github.com/navinpeiris/jsca2js</a></p>

<p>git clone で落としてきて</p>

<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>./titanium-mobile.py 3.0.0</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>のように、生成した API のバージョンを指定すればOK。</p>

<h4>Titanium 3.0.0 のコードをインストールする場合の注意</h4>


<p>titanium-mobile.py の中でバージョン毎に参照先の URL を変えるようにしていますが、3.0.0 の API Doc 参照先が間違っています。</p>

<p>なので、URL を修正してあげる必要があります。titanium-mobile.py を開き 23行目辺りにある URL を次のように書き換えます。</p>

<pre><code class="python titanium-mobile.py">if version.startswith('2.'):
  url = 'http://docs.appcelerator.com/titanium/data/' + version + '/api.json'
else:
  #url = 'http://developer.appcelerator.com/apidoc/mobile/' + version + '/api.json'
  url = 'http://docs.appcelerator.com/titanium/data/' + version + '/api.json'
</code></pre>

<h3>3. 生成された titanium-mobile-3.0.0.js を ~/.codeintel/extra にコピーする</h3>


<p>SublimeCodeIntel をインストールすると ~/.codeintel というフォルダが作られているはずです。</p>

<p>追加の補完用コードをまとめるために、extra フォルダを作ってそこに生成された titanium-mobile-3.0.0.js をコピーします。</p>

<h3>4. SublimeCodeIntel に extra フォルダのパスを通す</h3>


<p>~/.codeintel/config を開いて次のコードを追記します。</p>

<pre class="code"><code>{
  "JavaScript": {
    "javascriptExtraPaths": ["~/.codeintel/extra"]
  }
}</code></pre>


<p>これで、 SublimeCodeIntel が JavaScript ファイルで Titanium Mobile のコード補完を行うようになります。</p>

<h3>5. (オプション) CoffeeScript でもコード補完を効かせる</h3>


<p>SublimeCodeIntel が CoffeeScript のコード補完に対応していないので CoffeeScript のシンタックスを JavaScript に設定してやります。</p>

<p>Sublime Text2 の > Preferences > Package Settings > SublimeCodeIntel > Settings - User を開いて次の設定を追加します。</p>

<pre class="code"><code>{
  "codeintel_syntax_map":
  {
    "CoffeeScript": "JavaScript"
  }
}</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium Alloy でつくったアプリをリリースしました]]></title>
    <link href="http://hamasyou.com/blog/2013/01/22/titanium-alloy/"/>
    <updated>2013-01-22T11:22:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/01/22/titanium-alloy</id>
    <content type="html"><![CDATA[<p>Titanium Mobile プラットフォームの開発元である Appcelerator が公開している公式のフレームワーク <strong>Alloy</strong> を使って作ったアプリを公開しました。</p>

<p>アプリ紹介ページは下になります。
<a href="http://mountposition.co.jp/obento/" rel="external nofollow">Thankお弁当: http://mountposition.co.jp/obento/</a></p>

<p><img alt="phones.png" src="http://hamasyou.com/images/phones.png" width="324" height="367" class="mt-image-none" style="" /></p>

<p>Titanium Mobile は JavaScript を使ってスマホアプリを開発できるプラットフォームです。iPhone や Android 向けのアプリを手軽に開発することが出来ます。</p>

<p>Alloy はそんな Titanium Mobile での開発に規約と規律を導入した MVC フレームワークになります。Ruby On Rails に似てる感じです。</p>

<p>Alloy を使うといろいろいいことがありますが、それはまた別の記事で紹介します。</p>

<p>以上、アプリの宣伝でした！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] carrierwave と fog で Amazon S3 をストレージとして使う]]></title>
    <link href="http://hamasyou.com/blog/2012/02/21/rails-carrierwave-fog-amazon-s3/"/>
    <updated>2012-02-21T21:54:00+09:00</updated>
    <id>http://hamasyou.com/blog/2012/02/21/rails-carrierwave-fog-amazon-s3</id>
    <content type="html"><![CDATA[<p>Rails のプラグイン <a href="https://github.com/jnicklas/carrierwave" rel="external nofollow">carrierwave</a> と fog を使って、<em>Amazon S3</em> をストレージとして使う方法のメモです。</p>

<h3>使用環境</h3>




<ul>
<li>Rails 3.2.1</li>
<li>carrierwave 0.6.0.beta</li>
<li>fog 1.1.2</li>
</ul>




<h3>carrierwave のインストール</h3>


<p><div class="terminal-window">
          <nav class="terminal-control-window">
            <a href="#finder" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav>
          <h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>gem install carrierwave</span></code></pre></td></tr></table></div></div>
        </div></p>

<h3>config の書き方</h3>


<p>initializers に carrierwave.rb というファイルを作成し、以下のような設定を書きます。</p>

<pre><code class="ruby initializers/carrierwave.rb">#-*- encoding: utf-8 -*-

unless Rails.env.test?
  CarrierWave.configure do |config|
    config.cache_dir = "#{Rails.root}/tmp/uploads"
    config.storage                          = :fog
    config.fog_credentials                  = {
        :provider              =&gt; 'AWS',
        :aws_access_key_id     =&gt; ENV["AWS_S3_KEY_ID"],
        :aws_secret_access_key =&gt; ENV["AWS_S3_SECRET_KEY"]
    }
    config.fog_directory                    = ENV["AWS_S3_BUCKET"]
    config.fog_public                       = false
    config.fog_authenticated_url_expiration = 60
  end
else
  CarrierWave.configure do |config|
    config.storage = :file
  end
end
</code></pre>

<p>ENV[&ldquo;AWS_S3_KEY_ID&rdquo;] にはユーザアクセスID、ENV[&ldquo;AWS_S3_SECRET_KEY&rdquo;] にはシークレットアクセスキー、ENV[&ldquo;AWS_S3_BUCKET&rdquo;] にはバケット名をそれぞれ設定する。</p>

<p>各値は、Amazon S3 の設定画面で確認できる。</p>

<p>この設定を行い、carrierwave で Uploader を作成して、ファイルをアップロードすると、S3 にファイルを置くことができる。また、S3 上のファイルの URL には、60秒のタイムアウト設定を掛けており、アプリからのアクセスでのみ参照可能なURLが表示されるようになる。（config.fog_public = false、config.fog_authenticated_url_expiration = 60 の設定）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『のほほんビレッジ〜みんなのカフェ〜』の御礼]]></title>
    <link href="http://hamasyou.com/blog/2011/09/12/game/"/>
    <updated>2011-09-12T20:16:00+09:00</updated>
    <id>http://hamasyou.com/blog/2011/09/12/game</id>
    <content type="html"><![CDATA[<p>携帯向けの GREE ソーシャルアプリ『<strong>のほほんビレッジ〜みんなのカフェ〜</strong>』を遊んでくださっている皆様、本当にありがとうございます。</p>

<p>のほほんビレッジは、<a href="http://www.ediva.jp/" rel="external nofollow">株式会社Ediva</a>さんと共同で製作したゲームです。</p>

<p><a href="http://hamasyou.com/blog/archives/images/%E7%B4%B9%E4%BB%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%86%E3%82%B9%E3%83%8805.jpg" rel="external nofollow"></a></p>

<p><a href="http://gree.jp/community/3035925" rel="external nofollow">公式コミュニティ</a>の方にもあげられていますが、<em>皆様からの要望</em>はすべて目を通しています。</p>

<p>要望の中から少しずつですがプログラムを実装して、今後も皆様にお届けしていきたいと思います。</p>

<p>致命的なバグに関しては出来る限り早く、要望の実装は定期メンテナンスで導入という感じで運営していますので、末永くお付き合い下さい。</p>

<p>今回の定期メンテナンスで導入されなかった機能も、次回のメンテナンスには導入されるかも！？というような楽しみ方もしていただけると。。。</p>

<p><a href="http://mpf.gree.jp/2733" rel="external nofollow">のほほんビレッジ〜みんなのカフェ〜</a>（携帯用アプリトップ）</p>
]]></content>
  </entry>
  
</feed>
