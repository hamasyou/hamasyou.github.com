<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[それはBooks]]></title>
  <link href="http://hamasyou.com/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-02-17T15:52:39+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RailsでつくるRESTful APIのrequest specを書く]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/rails-request-rspec/"/>
    <updated>2014-02-17T14:09:38+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/rails-request-rspec</id>
    <content type="html"><![CDATA[<p>Rails 環境で RESTful API を提供する場面があると思います。API もコントローラで提供するので、コントローラのテストで記述してもいいのですが、RESTful API であれば、<strong class="text-danger">request spec</strong> を使うほうがよさそうなので request spec を書くメモです。</p>

<ul>
<li>Rails 4.0.2</li>
<li>rspec 2.14.1</li>
</ul>
<!-- more --><h2>テスト用のプロジェクトを整える</h2>

<p>まずは、チュートリアル用のプロジェクトを作成します。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">rails new specbox --skip-bundle</span><span class="line command">cd specbox</span></code></pre></td>
</tr></table></div></div>
        </div>


<p><code>Gemfile</code> を開いて次の gem を追記します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'rspec-rails'</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'guard-rspec'</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'factory_girl_rails'</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'spring'</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'spring-commands-rspec'</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>rspec と scaffold の設定を行います。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">bundle install --path vendor/bundle</span><span class="line command">bundle exec rails g rspec:install</span><span class="line command">bundle exec guard init rspec</span><span class="line command">bundle exec rails g model Book title:string author:string price:integer</span><span class="line command">bundle exec rails g scaffold_controller Books</span><span class="line command">bundle exec rake db:migrate</span><span class="line command">bundle exec rake db:test:prepare</span></code></pre></td>
</tr></table></div></div>
        </div>


<p><code>config/routes.rb</code> にルーティングを追加します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Specbox</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="n">resources</span> <span class="ss">:books</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>テストを実行します。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span></pre></td>
<td class="code"><pre><code><span class="line command">bundle exec guard</span><span class="line output">15:12:01 - INFO - Run all
</span><span class="line output">15:12:01 - INFO - Running all specs
</span><span class="line output">..**..........................
</span><span class="line output">
</span><span class="line output">Pending:
</span><span class="line output">  Book add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/models/book_spec.rb
</span><span class="line output">    # No reason given
</span><span class="line output">    # ./spec/models/book_spec.rb:4
</span><span class="line output">  BooksHelper add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/helpers/books_helper_spec.rb
</span><span class="line output">    # No reason given
</span><span class="line output">    # ./spec/helpers/books_helper_spec.rb:14
</span><span class="line output">
</span><span class="line output">Finished in 0.18066 seconds
</span><span class="line output">30 examples, 0 failures, 2 pending
</span><span class="line output">
</span><span class="line output">Randomized with seed 14063</span></code></pre></td>
</tr></table></div></div>
        </div>


<p>これで rspec の設定ができました。それでは <em>request spec</em> を書いていきます。</p>

<h2>request spec を書く</h2>

<p><em>request spec</em> は他の rspec のテストとほとんど変わりありません。テストは <code>spec/requests</code> フォルダの下に作成していきます。</p>

<p><code>scaffold_controller</code> でコントローラを作成したので、すでに <code>spec/requests/books_spec.rb</code> があるはずです。テストコードを見てみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/requests/books_spec.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'spec_helper'</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="s2">"Books"</span> <span class="k">do</span>
</span><span class="line">  <span class="n">describe</span> <span class="s2">"GET /books"</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s2">"works! (now write some real specs)"</span> <span class="k">do</span>
</span><span class="line">      <span class="c1"># Run the generator again with the --webrat flag if you want to use webrat methods/matchers</span>
</span><span class="line">      <span class="n">get</span> <span class="n">books_path</span>
</span><span class="line">      <span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>request spec もコントローラのテストと同じように、<code>get</code>、<code>post</code>、といったメソッドを使ってテストを行います。<code>books_spec.rb</code> を次のように書き換えてみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/requests/books_spec.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'spec_helper'</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="s1">'Books'</span> <span class="k">do</span>
</span><span class="line">  <span class="n">describe</span> <span class="s1">'GET /books'</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">    <span class="n">it</span> <span class="s1">'登録されている本が返されること'</span> <span class="k">do</span>
</span><span class="line">      <span class="n">book</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:book</span><span class="p">)</span>
</span><span class="line">      <span class="n">get</span> <span class="s1">'/books'</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="s1">'json'</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_success</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">json</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a_kind_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">json</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">'id'</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">book</span><span class="o">.</span><span class="n">id</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>request spec はこういう感じで、<strong class="text-danger">実際に呼び出す URL を記述する</strong> のと、<strong class="text-danger">json の中身をチェックする</strong> のが大事だと思っています。</p>

<p>コントローラのテストではビューの中身までチェックしませんし、ビューのテストとコントローラのテストを2つ書くのはテストを把握しづらいので、request spec のテストのように一箇所で同時にテストするのが効果的だと思います。</p>

<p>API はインターフェース（<em>入力パラメータ</em> と <em>出力形式</em> ）が大事なのでここをきっちり押さえておくテストを書く必要があります。</p>

<p>で、テストケースを変えると当然テストが失敗するので、テストが通るようにヘルパを書き換えます。</p>

<h3>request_helpers.rb を作成する</h3>

<p>request spec を書くときに便利なメソッドをいくつか用意しておきます。</p>

<p>RESTful API は出力を json で返すものが多いと思うので、json を扱いやすくするヘルパーを用意します。</p>

<p>また、 <code>AuthenticationHelper</code> は認証が必要な API を呼び出すときの便利メソッドとして記述してありますが、不要であれば削除、仕様が違うようであれば書きなおしてつかいます。</p>

<p>次のファイルを <code>spec/support/request_helpers.rb</code> として作成します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/support/request_helpers.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Requests</span>
</span><span class="line">  <span class="k">module</span> <span class="nn">JsonHelpers</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">json</span>
</span><span class="line">      <span class="vi">@json</span> <span class="o">||=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">module</span> <span class="nn">AuthenticationHelper</span>
</span><span class="line">    <span class="sx">%w(get post put delete)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_name</span><span class="o">|</span>
</span><span class="line">      <span class="n">define_method</span><span class="p">(</span><span class="s2">"auth_</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">uri</span><span class="p">,</span> <span class="n">auth_user</span><span class="p">,</span> <span class="n">params</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">env</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class="line">        <span class="nb">__send__</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">env</span><span class="o">.</span><span class="n">reverse_merge</span><span class="p">(</span><span class="no">HTTP_AUTHORIZATION</span><span class="p">:</span> <span class="s2">"token </span><span class="si">#{</span><span class="n">auth_user</span><span class="o">.</span><span class="n">access_token</span><span class="si">}</span><span class="s2">"</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>このヘルパを <code>spec/spec_helper.rb</code> に追加します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">Requests</span><span class="p">:</span><span class="ss">:JsonHelpers</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:request</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">Requests</span><span class="p">:</span><span class="ss">:AuthenticationHelper</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:request</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>これでテストが通るようになりました。</p>

<h2>まとめ</h2>

<p>Rails で RESTful な API を作ることはよくあると思いますが、今までは API のテストもコントローラのテストで行っていました。</p>

<p>でも、request spec を使ったほうが <strong class="text-danger">呼び出しのURL</strong>、<strong class="text-danger">必要なパラメータ</strong>、<strong class="text-danger">出力形式</strong> を素直にテストとして書けるので、API のテストは request spec を使うようにするといいかなと思います。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TitaniumのHTTPClientでRESTfulリクエストを送る]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful/"/>
    <updated>2014-02-17T10:24:58+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcelerator.com/titanium/" rel="external nofollow" title="Titanium Mobile">Titanium Mobile</a> の <code>Titanium.Network.HTTPClient</code> を使って RESTful リクエストを送る場合の注意点です。</p>

<p>Titanium の <code>HTTPClient</code> で <code>DELETE</code> のときに <code>send</code> でパラメータを送ると <code>POST</code> リクエストになってしまいます。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://www.appcelerator.com/titanium/" rel="external nofollow" title="Titanium Mobile Development Environment">Titanium Mobile Development Environment</a></p>

<ul>
<li>Titanium 3.2.1.GA</li>
</ul>
<!-- more --><p>Titanium の <code>HTTPClient</code> は <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> などのメソッドに対応していて、標準で RESTful リクエストを送れるようになっています。</p>

<h3>GET の例</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">'http://localhost:9292/'</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Network</span><span class="p">.</span><span class="nx">createHTTPClient</span><span class="p">({</span>
</span><span class="line">    <span class="nx">onload</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">"Received text: "</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span> <span class="p">},</span>
</span><span class="line">    <span class="nx">onerror</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">"Receive Error: "</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010286b4a8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010286b318&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{}
127.0.0.1 - - [17/Feb/2014 10:29:45] "GET / HTTP/1.1" 200 - 0.0006
</code></pre>

<h3>POST の例</h3>

<p><code>client.open('GET', url)</code> を <code>client.open('POST', url)</code> に変えて実行します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:43:06] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<h3>PUT と DELETE の例</h3>

<p>同じように <code>PUT</code> と <code>DELETE</code> でも試してみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'PUT'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:45:32] "PUT / HTTP/1.1" 200 - 0.0005
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'DELETE'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : DELETE"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:46:28] "DELETE / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>client.send</code> でパラメータを送信しなければ、<code>open</code> で渡したメソッドでリクエストが投げられています。</p>

<h2>HTTPClient でパラメータを渡して <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> してみる</h2>

<p>次は、パラメータを渡して試してみます。</p>

<p><code>GET</code> は <code>send</code> メソッドにパラメータを渡すのではなく URL にクエリを設定して送ります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">'http://localhost:9292/'</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Network</span><span class="p">.</span><span class="nx">createHTTPClient</span><span class="p">({</span>
</span><span class="line">    <span class="nx">onload</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">"Received text: "</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span> <span class="p">},</span>
</span><span class="line">    <span class="nx">onerror</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">"Receive Error: "</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">url</span> <span class="o">+</span> <span class="s1">'?name=hamasyou'</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/?name=hamasyou"
"QUERY_STRING : name=hamasyou"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001019451b8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x00000101945140&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:49:41] "GET /?name=hamasyou HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>GET</code> で送られています。次は <code>POST</code> で送ってみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">'hamasyou'</span><span class="p">});</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>POST</code> は <code>client.send</code> にパラメータを渡して送ります。<code>POST</code> のデフォルトの <code>Content-Type</code> は <code>application/x-www-form-urlencoded</code> になります。</p>

<pre><code class="console">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded; charset=utf-8"
"QUERY_STRING : "
...
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:52:10] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>POST</code> で <code>Content-Type: application/json</code> で送る場合は、<code>HTTPClient#setRequestHeader</code> で設定します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">'hamasyou'</span><span class="p">}));</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:56:20] "POST / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>PUT</code> と <code>DELETE</code> も <code>send</code> でパラメータを送ってみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'PUT'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">'hamasyou'</span><span class="p">}));</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:57:49] "PUT / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>PUT</code> はうまくいきました。次は <code>DELETE</code> です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'DELETE'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">'hamasyou'</span><span class="p">}));</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:58:52] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p>なんと、<code>POST</code> リクエストになってしまいました。。<code>DELETE</code> メソッドだけ、パラメータを <code>body</code> 部分に含めると <code>POST</code> リクエストになってしまうみたいです。。</p>

<p>OAuth 対応の API 等で access_token をパラメータに含めてリクエストする様な API を呼び出すときは要注意です。</p>

<p>できるだけ、認証情報は HTTP Header を使うようにした方がいいのかもしれません。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[open-uri-postを使うとrest-clientが変な動きするをする]]></title>
    <link href="http://hamasyou.com/blog/2014/02/16/ruby-open-uri-post-rest-client/"/>
    <updated>2014-02-16T21:45:53+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/16/ruby-open-uri-post-rest-client</id>
    <content type="html"><![CDATA[<p>ruby の <code>open-uri</code> を POST に対応させる <code>open-uri-post</code> というライブラリがありますが、これを使うと <code>rest-client</code> の gem が変な動きをするようです。</p>

<!-- more -->


<p><code>open-uri-post</code> を <code>require</code> すると <code>RestClient.post</code> が GET のリクエストになってうまくリクエストできなくなってしまいました。。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://d.hatena.ne.jp/urekat/20070201/1170349097" rel="external nofollow" title="[ruby]open-uriをPOST対応させる">[ruby]open-uriをPOST対応させる</a></p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://github.com/rest-client/rest-client" rel="external nofollow" title="rest-client/rest-client">rest-client/rest-client</a></p>

<p>下のサンプルでは、そもそもリクエストが送れなかったりもします。。</p>

<h3>open-uri-post だけの場合</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'./open-uri-post.rb'</span>
</span><span class="line"><span class="nb">open</span><span class="p">(</span><span class="s1">'http://localhost:9292'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'postdata'</span> <span class="o">=&gt;</span> <span class="s1">'name=hamasyou'</span><span class="p">})</span><span class="o">.</span><span class="n">read</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td>
<td class="code"><pre><code class="console"><span class="line"><span class="go">"CONTENT_LENGTH : 13"</span>
</span><span class="line"><span class="go">"CONTENT_TYPE : application/x-www-form-urlencoded"</span>
</span><span class="line"><span class="go">"GATEWAY_INTERFACE : CGI/1.1"</span>
</span><span class="line"><span class="go">"PATH_INFO : /"</span>
</span><span class="line"><span class="go">"QUERY_STRING : "</span>
</span><span class="line"><span class="go">"REMOTE_ADDR : 127.0.0.1"</span>
</span><span class="line"><span class="go">"REMOTE_HOST : localhost"</span>
</span><span class="line"><span class="go">"REQUEST_METHOD : POST"</span>
</span><span class="line"><span class="go">"REQUEST_URI : http://localhost:9292/"</span>
</span><span class="line"><span class="go">"SCRIPT_NAME : "</span>
</span><span class="line"><span class="go">"SERVER_NAME : localhost"</span>
</span><span class="line"><span class="go">"SERVER_PORT : 9292"</span>
</span><span class="line"><span class="go">"SERVER_PROTOCOL : HTTP/1.1"</span>
</span><span class="line"><span class="go">"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"</span>
</span><span class="line"><span class="go">"HTTP_ACCEPT_ENCODING : gzip;q=1.0,deflate;q=0.6,identity;q=0.3"</span>
</span><span class="line"><span class="go">"HTTP_ACCEPT : */*"</span>
</span><span class="line"><span class="go">"HTTP_USER_AGENT : Ruby"</span>
</span><span class="line"><span class="go">"HTTP_HOST : localhost:9292"</span>
</span><span class="line"><span class="go">"rack.version : [1, 2]"</span>
</span><span class="line"><span class="go">"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001029c65f0&gt;"</span>
</span><span class="line"><span class="go">"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x000001029c6578&gt;"</span>
</span><span class="line"><span class="go">"rack.multithread : true"</span>
</span><span class="line"><span class="go">"rack.multiprocess : false"</span>
</span><span class="line"><span class="go">"rack.run_once : false"</span>
</span><span class="line"><span class="go">"rack.url_scheme : http"</span>
</span><span class="line"><span class="go">"HTTP_VERSION : HTTP/1.1"</span>
</span><span class="line"><span class="go">"REQUEST_PATH : /"</span>
</span><span class="line"><span class="go">{"name"=&gt;"hamasyou"}</span>
</span><span class="line"><span class="go">127.0.0.1 - - [16/Feb/2014 22:02:26] "POST / HTTP/1.1" 200 - 0.0005</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>CONTENT_LENGTH: 13</code> になっていて、パラメータもきちんと送れています。</p>

<h3>rest-client だけの場合</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'rest_client'</span>
</span><span class="line"><span class="no">RestClient</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">'http://localhost:9292'</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">'hamasyou'</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td>
<td class="code"><pre><code class="console"><span class="line"><span class="go">"CONTENT_LENGTH : 13"</span>
</span><span class="line"><span class="go">"CONTENT_TYPE : application/x-www-form-urlencoded"</span>
</span><span class="line"><span class="go">"GATEWAY_INTERFACE : CGI/1.1"</span>
</span><span class="line"><span class="go">"PATH_INFO : /"</span>
</span><span class="line"><span class="go">"QUERY_STRING : "</span>
</span><span class="line"><span class="go">"REMOTE_ADDR : 127.0.0.1"</span>
</span><span class="line"><span class="go">"REMOTE_HOST : localhost"</span>
</span><span class="line"><span class="go">"REQUEST_METHOD : POST"</span>
</span><span class="line"><span class="go">"REQUEST_URI : http://localhost:9292/"</span>
</span><span class="line"><span class="go">"SCRIPT_NAME : "</span>
</span><span class="line"><span class="go">"SERVER_NAME : localhost"</span>
</span><span class="line"><span class="go">"SERVER_PORT : 9292"</span>
</span><span class="line"><span class="go">"SERVER_PROTOCOL : HTTP/1.1"</span>
</span><span class="line"><span class="go">"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"</span>
</span><span class="line"><span class="go">"HTTP_ACCEPT : */*; q=0.5, application/xml"</span>
</span><span class="line"><span class="go">"HTTP_ACCEPT_ENCODING : gzip, deflate"</span>
</span><span class="line"><span class="go">"HTTP_USER_AGENT : Ruby"</span>
</span><span class="line"><span class="go">"HTTP_HOST : localhost:9292"</span>
</span><span class="line"><span class="go">"rack.version : [1, 2]"</span>
</span><span class="line"><span class="go">"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010299d380&gt;"</span>
</span><span class="line"><span class="go">"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010299d290&gt;"</span>
</span><span class="line"><span class="go">"rack.multithread : true"</span>
</span><span class="line"><span class="go">"rack.multiprocess : false"</span>
</span><span class="line"><span class="go">"rack.run_once : false"</span>
</span><span class="line"><span class="go">"rack.url_scheme : http"</span>
</span><span class="line"><span class="go">"HTTP_VERSION : HTTP/1.1"</span>
</span><span class="line"><span class="go">"REQUEST_PATH : /"</span>
</span><span class="line"><span class="go">{"name"=&gt;"hamasyou"}</span>
</span><span class="line"><span class="go">127.0.0.1 - - [16/Feb/2014 22:03:29] "POST / HTTP/1.1" 200 - 0.0005</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>こっちも、きちんとリクエストできています。</p>

<h3>open-uri-post と rest-client を同時に使うと</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'./open-uri-post.rb'</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'rest_client'</span>
</span><span class="line">
</span><span class="line"><span class="c1"># open('http://localhost:9292', {'postdata' =&gt; 'name=hamasyou'}).read</span>
</span><span class="line"><span class="no">RestClient</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">'http://localhost:9292'</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">'hamasyou'</span><span class="p">)</span>
</span><span class="line"><span class="no">RestClient</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'http://localhost:9292'</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s1">'hamasyou'</span><span class="p">})</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>open-uri-post</code> の方の <code>open</code> メソッドはうまく動きますが、RestClient が動かなくなります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="console"><span class="line"><span class="go">/vendor/bundle/ruby/2.1.0/gems/rest-client-1.6.7/lib/restclient/abstract_response.rb:48:in `return!': 408 Request Timeout (RestClient::RequestTimeout)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>RequestTimeout が出てしまいました。。ちなみに、<code>GET</code> リクエストの方はうまく動きます。<code>open-uri-post</code> と <code>rest-client</code> は一緒に使わないほうがいいですね。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[リア充爆発しろで本当に爆発したシーン]]></title>
    <link href="http://hamasyou.com/blog/2014/02/16/sm20183528/"/>
    <updated>2014-02-16T01:52:46+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/16/sm20183528</id>
    <content type="html"><![CDATA[<p><strong class="text-danger">リア充爆発しろ</strong> で、爆発した瞬間を初めて見た。。泣いた。</p>

<!-- more -->


<p>ガンダム00 の「ライルvsアニュー 命がけの恋」より。リア充爆発しました。セッちゃん。。。</p>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm20183528?w=698"></script><p></p>
<noscript><a href="http://www.nicovideo.jp/watch/sm20183528" rel="external nofollow" title="【ニコニコ動画】ガンダム00　ライルvsアニュー　命がけの恋">【ニコニコ動画】ガンダム00　ライルvsアニュー　命がけの恋</a></noscript>

<iframe width="312" height="176" src="http://ext.nicovideo.jp/thumb/sm20183528" scrolling="no" style="border:solid 1px #CCC;" frameborder="0"><a href="http://www.nicovideo.jp/watch/sm20183528" rel="external nofollow" title="【ニコニコ動画】ガンダム00　ライルvsアニュー　命がけの恋">【ニコニコ動画】ガンダム00　ライルvsアニュー　命がけの恋</a></iframe>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブラウザ操作で簡単にスクレイピングAPIが作れる「kimono」]]></title>
    <link href="http://hamasyou.com/blog/2014/02/15/kimono-api/"/>
    <updated>2014-02-15T19:57:19+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/15/kimono-api</id>
    <content type="html"><![CDATA[<p>「<strong class="text-danger">kimono</strong>」はウェブサイトをブラウザ操作で簡単にスクレイピングして API 化してくれるサービスです。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://www.kimonolabs.com/" rel="external nofollow" title="kimono - Turn websites into structured APIs from your browser in seconds">kimono - Turn websites into structured APIs from your browser in seconds</a></p>

<p><img src="http://hamasyou.com/images/2014-02-15-kimono-api-01.png" alt="kimono" class="img-thumbnail"></p>

<!-- more -->


<p>スクレイピングしたいサイトの URL を入力すると抜き出す要素を選択する画面になります。</p>

<p>最近ページングにも対応したので、ページングのあるサイトも簡単に取得できるようになります。</p>

<p><img src="http://hamasyou.com/images/2014-02-15-kimono-api-02.png" alt="要素の選択" class="img-thumbnail"></p>

<p><img src="http://hamasyou.com/images/2014-02-15-kimono-api-03.png" alt="プレビュー画面" class="img-thumbnail"></p>

<p>スクレイピングの頻度もリアルタイムや何時間毎のような設定ができます。</p>

<p>できた API は言語ごとに呼び出し例が用意されているので便利です。こういう所気が効いていますね。</p>

<p><img src="http://hamasyou.com/images/2014-02-15-kimono-api-04.png" alt="API 詳細" class="img-thumbnail"></p>

<p>実際に呼び出してみるとちゃんと結果が取得できます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>misc/kimono.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'rest_client'</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'json'</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'pp'</span>
</span><span class="line">
</span><span class="line"><span class="n">response</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="s1">'http://www.kimonolabs.com/api/4b5q146s?apikey=81c2b7add1263b7e459f5ed58b5f6504'</span>
</span><span class="line"><span class="n">json</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">to_str</span><span class="p">)</span>
</span><span class="line"><span class="n">pp</span> <span class="n">json</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span></pre></td>
<td class="code"><pre><code><span class="line command">gem install rest-client</span><span class="line command">bundle exec ruby misc/kimono.rb</span><span class="line output">{"name"=&gt;"archives",
</span><span class="line output"> "lastrunstatus"=&gt;"success",
</span><span class="line output"> "lastsuccess"=&gt;"Sat Feb 15 2014 11:27:17 GMT+0000 (UTC)",
</span><span class="line output"> "nextrun"=&gt;"Sat Feb 15 2014 11:57:15 GMT+0000 (UTC)",
</span><span class="line output"> "frequency"=&gt;"halfhourly",
</span><span class="line output"> "newdata"=&gt;false,
</span><span class="line output"> "results"=&gt;
</span><span class="line output">  {"collection1"=&gt;
</span><span class="line output">    [{"title"=&gt;
</span><span class="line output">       {"text"=&gt;"ガンダムUCのシナンジュが好き",
</span><span class="line output">        "href"=&gt;"http://hamasyou.com/blog/2014/02/15/gundam-unicorn/"},
</span><span class="line output">      "category"=&gt;
</span><span class="line output">       {"text"=&gt;"Blog", "href"=&gt;"http://hamasyou.com/blog/categories/blog/"}},
</span><span class="line output">     {"title"=&gt;
</span><span class="line output">       {"text"=&gt;"Octopress の rel=”canonical” の設定がおかしい件",
</span><span class="line output">        "href"=&gt;"http://hamasyou.com/blog/2014/02/15/octopress-canonical/"},
</span><span class="line output">      "category"=&gt;
</span><span class="line output">       {"text"=&gt;"Blog", "href"=&gt;"http://hamasyou.com/blog/categories/blog/"}},
</span><span class="line output">     {"title"=&gt;
</span><span class="line output">       {"text"=&gt;"ビューティフルコード",
</span><span class="line output">        "href"=&gt;"http://hamasyou.com/blog/2014/02/14/4873113636/"},
</span><span class="line output">...</span></code></pre></td>
</tr></table></div></div>
        </div>


<p><a href="http://pipes.yahoo.com/pipes/" rel="external nofollow" title="Yahoo Pipes">Yahoo Pipes</a> のような有名なサービスもありますが、簡単にウェブサイトをスクレイピングしたい用途であれば <em>kimono</em> はオススメのサービスです。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ガンダムUCのシナンジュが好き]]></title>
    <link href="http://hamasyou.com/blog/2014/02/15/gundam-unicorn/"/>
    <updated>2014-02-15T16:25:45+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/15/gundam-unicorn</id>
    <content type="html"><![CDATA[<p><a href="http://www.gundam-unicorn.net/" rel="external nofollow" title="ガンダムUC">ガンダムUC</a> にはまってます。2014年5月17日に final episode 7「虹の彼方に」も予定されてるので DVD とか見直しました。</p>

<p>シナンジュのガンプラも作ったので、次はニューガンダムに挑戦したいなと。RX-0 ユニコーンガンダム3号機 フェネクスのガンプラも発売になりましたね。</p>

<p><a href="http://www.amazon.co.jp/gp/product/B0032ZD5OI?ie=UTF8&amp;camp=247&amp;creativeASIN=B0032ZD5OI&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="http://www.1999.co.jp/itbig10/10106668.jpg" height="289" width="232" alt="MG 1/100 MSN-06S シナンジュ Ver.Ka チタニウムフィニッシュ (機動戦士ガンダムUC)" class="img-thumbnail"></a><a href="http://www.amazon.co.jp/gp/product/B00FKL68XM?ie=UTF8&amp;camp=247&amp;creativeASIN=B00FKL68XM&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="http://ecx.images-amazon.com/images/I/81QDARb2zTL._SX240_.jpg" height="289" width="232" alt="MG 1/100 RX-93 vガンダムVer.Ka チタニウムフィニッシュ (機動戦士ガンダム 逆襲のシャア)" class="img-thumbnail"></a><a href="http://www.amazon.co.jp/gp/product/B00HCV6T6E?ie=UTF8&amp;camp=247&amp;creativeASIN=B00HCV6T6E&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="http://ecx.images-amazon.com/images/I/91HCl2myAGL._SX240_.jpg" height="289" width="232" alt="MG 1/100 RX-0 ユニコーンガンダム3号機 フェネクス (機動戦士ガンダムUC)" class="img-thumbnail"></a></p>

<!-- more -->


<p>ガンダムUC 7話の PV も公開されてて待ち遠しいです。</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/xuhy3ZgIico"></iframe></div>


<p>最近は <a href="http://exvsfb.ggame.jp/" rel="external nofollow" title="exvsfb">exvsfb</a> ばかりやってて、当然持ちキャラはシナンジュです。</p>

<p>使用可能機体は90体以上あるので、ガンダム好きな人はぜひやってみてください。ネット対戦が熱いです！</p>

<p><a href="http://www.amazon.co.jp/gp/product/B00G4R5J04?ie=UTF8&amp;camp=247&amp;creativeASIN=B00G4R5J04&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="http://ecx.images-amazon.com/images/I/617A4%2BjXtSL._SS240_.jpg" height="232" width="232" alt="機動戦士ガンダム EXTREME VS. FULL BOOST プレミアムGサウンドエディション" class="img-thumbnail"></a><a href="http://www.amazon.co.jp/gp/product/B002YT9PSI?ie=UTF8&amp;camp=247&amp;creativeASIN=B002YT9PSI&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="http://ecx.images-amazon.com/images/I/41aXwx47pJL._SS240_.jpg" height="232" width="232" alt="リアルアーケードPro.V3 SA(PS3用)" class="img-thumbnail"></a><a href="http://www.amazon.co.jp/gp/product/B004KJ41ES?ie=UTF8&amp;camp=247&amp;creativeASIN=B004KJ41ES&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="http://ecx.images-amazon.com/images/I/81qz1Wro-bL._SS240_.jpg" height="232" width="232" alt="" class="img-thumbnail"></a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress の rel="canonical" の設定がおかしい件]]></title>
    <link href="http://hamasyou.com/blog/2014/02/15/octopress-canonical/"/>
    <updated>2014-02-15T14:21:58+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/15/octopress-canonical</id>
    <content type="html"><![CDATA[<p>Octopress の初期の <strong class="text-danger">rel=“canonical”</strong> の値がおかしいので直しました。</p>

<!-- more -->


<p>初期値では <code>_includes/head.html</code> の中に</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>_includes/head.html</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"canonical"</span> <span class="na">href=</span><span class="s">"{{ canonical }}"</span><span class="nt">&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>となっていますが、これだと吐き出される個別ページの HTML は</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>view-source</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">...
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"canonical"</span> <span class="na">href=</span><span class="s">"http://hamasyou.com/blog/2014/02/15/octopress-canonical"</span><span class="nt">&gt;</span>
</span><span class="line">...
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>のように、<code>href</code> の末尾が <code>/</code> で終わっていません。Octopress (Jekyll) は <code>title名</code> ディレクトリの下に index.html を生成するという形式になっているので、 <code>http://hamasyou.com/blog/2014/02/15/octopress-canonical/</code> が canonical として正しいはずです。</p>

<p>なので、<code>canonical</code> は</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>_includes/head.html</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"canonical"</span> <span class="na">href=</span><span class="s">"{{ canonical }}/"</span><span class="nt">&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>のように、末尾に <code>/</code> を入れてやる必要があります。</p>

<p><a href="https://developers.facebook.com/tools/debug" rel="external nofollow" title="Facebook URL Linter">Facebook URL Linter</a> を使ったときに警告が出たので気づきました。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビューティフルコード]]></title>
    <link href="http://hamasyou.com/blog/2014/02/14/4873113636/"/>
    <updated>2014-02-14T21:19:05+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/14/4873113636</id>
    <content type="html"><![CDATA[<p>本書は、ブライアン・カーニハンをはじめ一流のプログラマが各々の考える「<em>美しいコード</em>」を紹介するエッセイです。</p>

<p>世界屈指の一流ハッカーがこれぞ！と思うコードを読むことができる貴重な一冊です。</p>

<p>名前付け、アルゴリズム、アーキテクチャ、ショートコードなどなど美しいコードとして紹介されているものは様々です。また、言語も様々なため、知らない言語のコードは美しさがよくわからないところもあるかもしれません。</p>

<p>それでも、30人を越える偉人が紹介する <strong class="text-danger">ビューティフルコード</strong> は、プログラミング好きにはたまらないと思います。</p>

<!-- more -->


<h2>おぼえがき</h2>

<h3>美しいコードの第一歩</h3>

<p>美しいプログラムを書く第一歩は、 <em>だいたい正しく動くコードを書くところ</em> から始まります。エラー処理や例外処理を除いたほとんどの場合に正しく動く。そこから美しいコードは生み出されます。</p>

<p>美しいプログラムは、やさしい条件を先に扱って、難しい条件を後に書きます。</p>

<blockquote><p>デザイナーが自分は完璧に達成したんだと分かるのは、付け加えるべきものが何もない時ではなく、取り去るべきものが何もない時である。</p></blockquote>


<p>Jon Bentley が自分が書いた一番美しいコードとして紹介しているクイックソートのコードです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>quicksort.c</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">quicksort</span><span class="p">(</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">u</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;=</span> <span class="n">u</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class="line">    <span class="n">swap</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">randint</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">u</span><span class="p">));</span>
</span><span class="line">    <span class="n">m</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">u</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">[</span><span class="n">l</span><span class="p">])</span>
</span><span class="line">            <span class="n">swap</span><span class="p">(</span><span class="o">++</span><span class="n">m</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class="line">    <span class="n">swap</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class="line">    <span class="n">quicksort</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="n">quicksort</span><span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<blockquote><p>プログラミングは実用的なスキルだと信じており、「実用的なスキルは、真似をすることと練習することで獲得する」</p></blockquote>


<h3>プログラムの速度</h3>

<p>正しく、美しく、速く。プログラムはこの順番であるべきです。クヌース先生は言いました。「<em>未熟な段階での最適化は、プログラミングに置ける諸悪の根源</em>」であると。</p>

<p>正しく動くコードを書いて、O(N<sup>2</sup>) の場合には O(logN) に落とす。できれば O(N) にしたいところですが。正しいコードを美しくすることで、速度が改善されることが往々にしてあります。</p>

<h3>フレームワーク設計</h3>

<p>フレームワークの設計で一番の難題は、API をいったん公開したら、公開 API の仕様を変更したり、インターフェースを変えたりすることが難しくなることです。</p>

<p>この問題に対応するための伝統的な方法が次のものになります。</p>

<ol>
<li>public とするものは公開範囲を小さく保つ</li>
<li>インターフェースを使い、できるだけ実装だけでは公開しない</li>
<li>拡張を意図する場所は「フック」を良く考えて用意しておく</li>
<li>拡張が起こってほしくない場所は拡張できないようにする</li>
</ol>
<p>JavaMail の例です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">javax</span><span class="o">.</span><span class="na">mail</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Session</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Session</span> <span class="nf">getDefaultInstance</span><span class="o">(</span><span class="n">Properties</span> <span class="n">props</span><span class="o">);</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Store</span> <span class="nf">getStore</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">NoSuchProviderException</span><span class="o">;</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Store</span> <span class="kd">extends</span> <span class="n">javax</span><span class="o">.</span><span class="na">mail</span><span class="o">.</span><span class="na">Service</span> <span class="o">{</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addStoreListener</span><span class="o">(</span><span class="n">StoreListener</span> <span class="n">listener</span><span class="o">);</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>ビューティフル・テスト</h3>

<p>テストを美しくする3つの手法。</p>

<dl>
<dt>簡潔さゆえに美しいと言えるテスト</dt>
<dd>数行のテストコードで対象コードの基本的な動作を文章化したり検証できる。短いコードで端的に動作を説明できているので美しい。</dd>
<dt>コードの優雅さ、保守性、テストしやすさを増す方法が分かるために美しいと言えるテスト</dt>
<dd>コードをもっと美しくするのを助けてくれるようなテストのこと。プログラムの論理的な問題点、構造の問題、設計上の問題に気付く助けになるようなテストは美しい。</dd>
<dt>幅と深さゆえに美しいと言えるテスト</dt>
<dd>基本的なケースや厳選したケースだけでなく、すべてのケースにおいてコードが期待通りに動くという自信を持たせてくれるようなテストコードは美しい。</dd>
</dl>
<h3>大きなビットマップ画像を扱う処理</h3>

<p>縦px×横px×深さの3重ループで処理するのは論外。フィルタロジックをハードコード刷るよりも良い方法は、ビットマップの大きさ、ピクセルの深さ、フィルタの大きさと要素の値に応じて、その場でカスタムコードを生成すること。</p>

<p>（<span class="text-warning">うーむ、ちょっとここはいまいち理解が出来ませんでした。。本書を読んで自分で理解してください。。</span>）</p>

<h3>ネットワーク</h3>

<blockquote><p>インターネットを使えば通信線でつながったハッカー達は世界中どこからでも仕事ができる。なんて言われているけど、そんなことを吹聴している奴らはカリフォルニアのごく狭い場所に集まっている。</p></blockquote>


<p>エンドユーザ向けのアプリケーションでは、使いやすさが極めて重要です。また、スタートダッシュの為には、まず <em>動くプロトタイプで本質部分を作って</em> そこから製品レベルに持っていくのは常によいアイデア。</p>

<p>システムをできる限りシンプルに保つことは常に偉大なアイデアです。ソフトウェアは <em>なまもの</em> なので、常に注意し、更新し、機能追加し、修正し、調整し、サポートする必要があります。</p>

<h2>感想</h2>

<p>美しいコードの基準は人それぞれですが、共通してい言えることは <strong class="text-danger">正しく動く</strong>、<strong class="text-danger">ムダな部分がない</strong>、<strong class="text-danger">高速に動作する</strong> ものだと思いました。</p>

<p>プログラミングのエッセイだと、やっぱりアルゴリズム系の話題が多いので、ソースコードの見た目が美しいとかいうのはあまりなく、設計思想や短いコードにいろいろな意味が込められているようなものを美しいと感じる偉人が多いようでした。</p>

<p>簡単な問題から解く。正しさが疑いようのないくらいシンプルにコードを保つ。そういうのが大事だと改めて感じました。</p>

<p>ある程度広くコンピュータの知識がある人は、本書を読むと「なるほど」となる場面が多いと思います。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyからMicrosoft Translator APIを呼び出す]]></title>
    <link href="http://hamasyou.com/blog/2014/02/14/microsoft-translator-api/"/>
    <updated>2014-02-14T15:40:59+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/14/microsoft-translator-api</id>
    <content type="html"><![CDATA[<p>Google の翻訳 API が有料化されたことで、無料で使える翻訳 API が実質 <strong class="text-danger">Microsoft Translator API</strong> 一択になってしまいました。</p>

<p>実際に使ってみようと思ったときに、いろいろなサイトをぐるぐる回ったり、API の呼び出し方が変わっていたりしてとまどったので、手順のおさらいをしておきます。</p>

<!-- more -->


<h2>Microsoft Translator API</h2>

<p>Microsoft Translator API は Microsfot が提供する翻訳サービスで REST インターフェースを備えています。</p>

<p>利用するには Microsoft Azure Marketplace で Microsoft Translator の利用登録が必要です。</p>

<h3>Microsoft Translator 登録を行う</h3>

<p>翻訳 API を使うには Azure Marketplace で利用登録が必要になります。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://datamarket.azure.com/dataset/1899a118-d202-492c-aa16-ba21c33c06cb" rel="external nofollow" title="Microsoft Azure Marketplace">Microsoft Azure Marketplace</a></p>

<p>アカウントを持っていない人はアカウントを作成して、月額0円のプランを購入します。</p>

<p><img src="http://hamasyou.com/images/2014-02-14-microsoft-translator-api-01.png" alt="Microsoft Translator の購入" class="img-thumbnail"></p>

<h3>アプリケーション登録を行う</h3>

<p>次に、Azure Marketplace でアプリケーションの登録を行います。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://datamarket.azure.com/developer/applications" rel="external nofollow" title="開発者 アプリケーション登録 - Microsoft Azure Marketplace">開発者 アプリケーション登録 - Microsoft Azure Marketplace</a></p>

<p><img src="http://hamasyou.com/images/2014-02-14-microsoft-translator-api-02.png" alt="アプリケーション登録" class="img-thumbnail"></p>

<p>翻訳 API だけを利用する場合には <em>リダイレクトURI</em> は利用しませんが、必須入力なので <code>http://localhost/</code> と入力しておきます。<code>https</code> で登録しろと怒られますが無視して登録できます。</p>

<p>ここで登録した <em>クライアントID</em> 、<em>顧客の秘密</em> が API 呼び出しの時に使う <strong class="text-danger">client_id</strong> 、 <strong class="text-danger">client_secret</strong> になります。</p>

<h3>Ruby から呼び出してみる</h3>

<p>翻訳 API を呼び出すには、呼び出しの前に OAuth を通さなければなりません。OAuth を通すと得られる <em>access_token</em> を使って翻訳 API を呼び出します。</p>

<p>OAuth を通すには POST リクエストが必要なので、サンプルでは Ruby の <code>open-uri</code> を post 対応したものを使っています。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://d.hatena.ne.jp/urekat/20070201/1170349097" rel="external nofollow" title="[ruby]open-uriをPOST対応させる">[ruby]open-uriをPOST対応させる</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'cgi'</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'open-uri-post'</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'rexml/document'</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'json'</span>
</span><span class="line">
</span><span class="line"><span class="no">CLIENT_ID</span>       <span class="o">=</span> <span class="s1">'&lt;クライアントID&gt;'</span>
</span><span class="line"><span class="no">CLIENT_SECRET</span>   <span class="o">=</span> <span class="s1">'&lt;顧客の秘密&gt;'</span>
</span><span class="line"><span class="no">AUTHORIZE_URL</span>   <span class="o">=</span> <span class="s1">'https://datamarket.accesscontrol.windows.net/v2/OAuth2-13'</span>
</span><span class="line"><span class="no">TRANSLATION_URL</span> <span class="o">=</span> <span class="s1">'http://api.microsofttranslator.com/V2/Http.svc/Translate'</span>
</span><span class="line"><span class="no">SCOPE</span>           <span class="o">=</span> <span class="s1">'http://api.microsofttranslator.com'</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_access_token</span>
</span><span class="line">  <span class="n">access_token</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="nb">open</span><span class="p">(</span><span class="no">AUTHORIZE_URL</span><span class="p">,</span>
</span><span class="line">       <span class="s1">'postdata'</span> <span class="o">=&gt;</span> <span class="s2">"grant_type=client_credentials&amp;client_id=</span><span class="si">#{</span><span class="no">CGI</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="no">CLIENT_ID</span><span class="p">)</span><span class="si">}</span><span class="s2">&amp;client_secret=</span><span class="si">#{</span><span class="no">CGI</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="no">CLIENT_SECRET</span><span class="p">)</span><span class="si">}</span><span class="s2">&amp;scope=</span><span class="si">#{</span><span class="no">CGI</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="no">SCOPE</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class="line">    <span class="n">json</span>           <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class="line">    <span class="n">access_token</span>   <span class="o">=</span> <span class="n">json</span><span class="o">[</span><span class="s1">'access_token'</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="n">access_token</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">translate_text</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class="line">  <span class="n">access_token</span> <span class="o">=</span> <span class="n">get_access_token</span>
</span><span class="line">  <span class="n">res</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="no">TRANSLATION_URL</span><span class="si">}</span><span class="s2">?from=en&amp;to=ja&amp;text=</span><span class="si">#{</span><span class="no">URI</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span>
</span><span class="line">             <span class="s1">'Authorization'</span> <span class="o">=&gt;</span> <span class="s2">"Bearer </span><span class="si">#{</span><span class="n">access_token</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class="line">  <span class="n">xml</span> <span class="o">=</span> <span class="ss">REXML</span><span class="p">:</span><span class="ss">:Document</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</span><span class="line">  <span class="n">xml</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">text</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="nb">puts</span> <span class="n">translate_text</span><span class="p">(</span><span class="s1">'Hello World'</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; "ハローワールド"</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress参考リンクまとめ]]></title>
    <link href="http://hamasyou.com/blog/2014/02/14/octopress-summary/"/>
    <updated>2014-02-14T12:18:53+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/14/octopress-summary</id>
    <content type="html"><![CDATA[<p><strong class="text-danger">Octopress</strong> の設定や運用で参考にしたサイトのまとめです。</p>

<!-- more -->


<h3>インストール、初期設定</h3>

<p>インストールや初期設定周りでお世話になったサイトです。</p>

<ul>
<li><a href="http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/" rel="external nofollow" title="OctopressでGitHub無料ブログ構築。sourceをBitbucket管理。簡単ガイド！">OctopressでGitHub無料ブログ構築。sourceをBitbucket管理。簡単ガイド！</a></li>
<li><a href="http://www.miukoba.net/blog/2013/01/05/start-octopress/" rel="external nofollow" title="Octopressはじめました | mimemo">Octopressはじめました | mimemo</a></li>
<li><a href="http://tantant.jp/blog/Octopress/installing-octopress/" rel="external nofollow" title="Markdownで書いてGitで管理するブログ「Octopress」の始め方">Markdownで書いてGitで管理するブログ「Octopress」の始め方</a></li>
<li><a href="http://rcmdnk.github.io/blog/tags/octopress/" rel="external nofollow" title="Tag: Octopress - rcmdnk’s blog">Tag: Octopress - rcmdnk’s blog</a></li>
</ul>
<p>独自ドメインで運用するときにお世話になりました。</p>

<ul>
<li><a href="http://mojavy.com/blog/2014/02/13/faster-github-pages/" rel="external nofollow" title="あなたのgithub pagesを無料で高速化する方法">あなたのgithub pagesを無料で高速化する方法</a></li>
<li><a href="http://bekkou68.hatenablog.com/entry/2013/01/05/210902" rel="external nofollow" title="GitHub Pages に独自のトップレベルドメイン（TLD）を割り当てる">GitHub Pages に独自のトップレベルドメイン（TLD）を割り当てる</a></li>
</ul>
<p>404 Not Found ページの作り方。</p>

<ul>
<li><a href="http://rcmdnk.github.io/blog/2013/03/23/octopress/#not-found" rel="external nofollow" title="404 not found - Octopress Tips">404 not found - Octopress Tips</a></li>
</ul>
<h3>カテゴリリストとタグリストのプラグイン</h3>

<ul>
<li><a href="http://alotofwe.github.io/blog/2013/08/05/octopressdekategoririsutowotukuru/" rel="external nofollow" title="Octopressでカテゴリリストをつくる">Octopressでカテゴリリストをつくる</a></li>
<li><a href="http://rcmdnk.github.io/blog/2013/04/12/blog-octopress/" rel="external nofollow" title="Octopressでのタグの運用">Octopressでのタグの運用</a></li>
</ul>
<p>カテゴリリスト、タグリストの plugin ソースの中で URL を組み立てる部分があります。その部分下のように変更しておいたほうが無難です。</p>

<p>カテゴリやタグなどに <code>/</code> が入るような単語（例えば O/Rマッピング）の場合に URL が一致しなくなってしまうので。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="o">-</span> <span class="n">category_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">category_dir</span><span class="p">,</span> <span class="n">category</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/_|\P{Word}/</span><span class="p">,</span> <span class="s1">'­'</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/­{2,}/</span><span class="p">,</span> <span class="s1">'­'</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class="line"><span class="o">+</span> <span class="n">category_url</span> <span class="o">=</span> <span class="n">category_dir</span> <span class="o">+</span> <span class="n">category</span><span class="o">.</span><span class="n">to_url</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>関連ページ、ソーシャル系のボタンを表示する</h3>

<p>関連ページの表示やソーシャル系ボタン（いいね、シェア、はてブ等）を表示するための設定系サイトです。</p>

<ul>
<li><a href="http://blog.glidenote.com/blog/2012/01/04/octopress-related-posts/" rel="external nofollow" title="OctopressでRelated Posts(関連エントリー)を表示させるようにした">OctopressでRelated Posts(関連エントリー)を表示させるようにした</a></li>
<li><a href="http://www.mk-mode.com/octopress/2012/12/26/octopress-add-related-post/" rel="external nofollow" title="Octopress - 関連記事の表示！">Octopress - 関連記事の表示！</a></li>
<li><a href="http://morizyun.github.io/blog/octopress-hatena-disqus-new-tab/" rel="external nofollow" title="5分でできる簡単 Octopress セッティング">5分でできる簡単 Octopress セッティング</a></li>
<li><a href="http://rcmdnk.github.io/blog/2013/11/26/blog-octopress/" rel="external nofollow" title="シェアボタンを非同期読み込みでまとめて設定">シェアボタンを非同期読み込みでまとめて設定</a></li>
</ul>
<h3>Octopress で記事を書くときの高速化</h3>

<p><code>isolate</code> コマンドを使うと単体記事になるので高速化できますよという内容。</p>

<ul>
<li><a href="http://gam0022.net/blog/2013/09/28/speed-up-octopress-site-generation/" rel="external nofollow" title="Octopressのpreviewを高速化する">Octopressのpreviewを高速化する</a></li>
</ul>
<h3>まとめのまとめ</h3>

<ul>
<li><a href="http://rcmdnk.github.io/blog/2014/02/02/blog-octopress/" rel="external nofollow" title="Octorpessについてのここまでのまとめ">Octorpessについてのここまでのまとめ</a></li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby-Nokogiriで取り出した要素を置き換える]]></title>
    <link href="http://hamasyou.com/blog/2014/02/13/ruby-nokogiri/"/>
    <updated>2014-02-13T16:19:09+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/13/ruby-nokogiri</id>
    <content type="html"><![CDATA[<p>Ruby の HTML パーサに <strong class="text-danger">Nokogiri</strong> があります。基本的な使い方は</p>

<ul>
<li><a href="https://github.com/sparklemotion/nokogiri" rel="external nofollow" title="Nokogiri-GitHub">Nokogiri-GitHub</a></li>
<li><a href="http://morizyun.github.io/blog/ruby-nokogiri-scraping-tutorial/" rel="external nofollow" title="Nokogiri を使った Rubyスクレイピング [初心者向けチュートリアル]">Nokogiri を使った Rubyスクレイピング [初心者向けチュートリアル]</a></li>
<li><a href="http://www.absolute-keitarou.net/blog/?p=634" rel="external nofollow" title="RubyのNokogiriでギコギコスクレイピングだ">RubyのNokogiriでギコギコスクレイピングだ</a></li>
<li><a href="http://qiita.com/w650/items/e663fa2430145c456c4d" rel="external nofollow" title="Nokogiriでスクレイピング">Nokogiriでスクレイピング</a></li>
</ul>
<p>とかを参考にしてもらえばいいんですが、パースした要素の特定の属性を置き換えたいとか追加で属性を追加したい時のメモです。</p>

<!-- more -->


<p>使い方は</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="console"><span class="line"><span class="go">gem install 'nokogiri'</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'nokogiri'</span>
</span><span class="line">
</span><span class="line"><span class="n">doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="n">html_text</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 外部リンクに rel="external nofollow" と title 属性を付ける</span>
</span><span class="line"><span class="n">doc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">'a[href^="http://"]'</span><span class="p">,</span> <span class="s1">'a[href^="https://"]'</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">link</span><span class="o">|</span>
</span><span class="line">  <span class="n">link</span><span class="o">[</span><span class="s1">'rel'</span><span class="o">]</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">link</span><span class="o">[</span><span class="s1">'rel'</span><span class="o">]</span><span class="si">}</span><span class="s2"> external nofollow"</span><span class="o">.</span><span class="n">strip</span>
</span><span class="line">  <span class="n">link</span><span class="o">[</span><span class="s1">'title'</span><span class="o">]</span> <span class="o">=</span> <span class="n">link</span><span class="o">.</span><span class="n">text</span> <span class="k">unless</span> <span class="n">link</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s1">'title'</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">html_text</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">'body'</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">inner_html</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Nokogiri に渡す HTML 文字列は <code>&lt;html&gt;</code> から始まる必要はなく、部分的な HTML 文字列でも OK です。</p>

<p>部分 HTML を置き換えた場合は、取り出しは <code>doc.css('body')[0].inner_html</code> になります。<code>doc.to_html</code> だと <code>&lt;!DOCTYPE html&gt;&lt;html&gt;</code> から始まる文字列になってしまうので注意。</p>

<h3>文字コードを指定する</h3>

<p>Nokogiri は日本語に対応していますが、デフォルトで <em>UTF-8</em> の文字エンコーディングになっているようです。なので Shift_JIS や EUC-JP の HTML を与えるとうまくパースできません。</p>

<p>そんな時は、次のようなコードで UTF-8 に変換してやれば OK です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="n">html_text</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s1">'utf-8'</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Movable TypeからGitHub+Octopressに乗り換える手順]]></title>
    <link href="http://hamasyou.com/blog/2014/02/13/movable-type-to-octopress/"/>
    <updated>2014-02-13T10:53:07+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/13/movable-type-to-octopress</id>
    <content type="html"><![CDATA[<p>今まではブログを <em>ロリポップ</em> + <em>Movable Type</em> でやっていましたが、ブログデザインを変更したくなり、ついでにブログ環境も変更しました。</p>

<p>Movable Type から <em>WordPress</em> に乗り換えても良かったんですが、エンジニアっぽいブログ環境ってなんだろうと考えた末、<strong class="text-danger">GitHub Pages</strong> と <strong class="text-danger">Octopress</strong> を使ってブログ環境を作ることにしました。</p>

<p><a href="http://octopress.org/" rel="external nofollow" title="Octopress">Octopress</a> は <a href="http://jekyllrb.com/" rel="external nofollow" title="Jekyll">Jekyll</a> を使ってブログ環境を作るためのフレームワークで、Jekyll はブログのような静的サイトを作るための Ruby のファイルジェネレータになります。</p>

<p><a href="http://pages.github.com/" rel="external nofollow" title="GitHub Pages">GitHub Pages</a> と組み合わせると無料でブログを始めることができます。</p>

<p>移行でおこなったことの手順です。</p>

<!-- more -->


<h2>手順</h2>

<ol>
<li>公開用のサーバ設定

<ol>
<li>GitHub にリポジトリを作成する</li>
<li>Octopress をチェックアウトする</li>
<li>deploy する</li>
</ol>
</li>
<li>ローカルのブログ環境の設定

<ol>
<li>ブログの初期設定をおこなう</li>
<li>テーマを変更する</li>
<li>最初の記事を書いてみる</li>
</ol>
</li>
<li>環境をバックアップする

<ol>
<li>BitBucket にリポジトリを作成する</li>
<li>BitBucket にソースをプッシュする</li>
</ol>
</li>
<li>プラグインをつかう

<ol>
<li>記事にタグをつける</li>
</ol>
</li>
</ol>
<h2>公開用のサーバ設定</h2>

<h3>GitHub にリポジトリを作成する</h3>

<p>まず最初に GitHub にサイト公開用のリポジトリを作成します。</p>

<p><a href="https://github.com/" rel="external nofollow" title="GitHub">GitHub</a> にログインして、リポジトリを作成します。リポジトリ名は <strong class="text-danger">username.github.io</strong> とします。<code>username</code> の部分を自分のアカウント名に読みかえてください。僕の場合は hamasyou.github.io になります。</p>

<p>このリポジトリが公開用のサイトになり、<a href="http://username.github.io/" rel="external nofollow" title="http://username.github.io/">http://username.github.io/</a> が URL になります。</p>

<p><img src="http://hamasyou.com/images/2014-02-13-movable-type-to-octopress-01.png" alt="リポジトリ作成" class="img-thumbnail"></p>

<h3>Octopress をチェックアウトする</h3>

<p>つぎに、ブログ環境を作成するために <a href="http://pages.github.com/" rel="external nofollow" title="Octopress">Octopress</a> を github からチェックアウトします。<code>username</code> のところは自分のアカウント名です。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">git clone git@github.com:imathis/octopress.git username.github.io</span><span class="line output">Cloning into 'username.github.io'...
</span><span class="line output">remote: Reusing existing pack: 10340, done.
</span><span class="line output">remote: Counting objects: 20, done.
</span><span class="line output">remote: Compressing objects: 100% (20/20), done.
</span><span class="line output">remote: Total 10360 (delta 4), reused 3 (delta 0)
</span><span class="line output">Receiving objects: 100% (10360/10360), 2.73 MiB | 785.00 KiB/s, done.
</span><span class="line output">Resolving deltas: 100% (4949/4949), done.
</span><span class="line output">Checking connectivity... done.
</span><span class="line output">
</span><span class="line command">cd username.github.io</span></code></pre></td>
</tr></table></div></div>
        </div>


<h3>deploy する</h3>

<p>Octopress の初期設定を行い、deploy を行います。この時点でデプロイしたくない場合は最後のコマンド <code>bundle exec rake gen_deploy</code> を実行しないようにします。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">bundle install --path vendor/bundle</span><span class="line command">bundle exec rake install</span><span class="line command">bundle exec rake setup_github_pages</span><span class="line output">Enter the read/write url for your repository
</span><span class="line output">(For example, 'git@github.com:your_username/your_username.github.io.git)
</span><span class="line output">           or 'https://github.com/your_username/your_username.github.io')
</span><span class="line output">Repository url: <kbd>git@github.com:username/username.github.io.git<kbd>
</kbd></kbd></span><span class="line command">bundle exec rake gen_deploy</span></code></pre></td>
</tr></table></div></div>
        </div>


<h2>ブログの初期設定を行う</h2>

<p>Octopress のブログ設定値は <code>_config.yml</code> というファイルになります。<a href="http://octopress.org/docs/configuring/" rel="external nofollow" title="Configuring Octopress">Configuring Octopress</a> を参考に変更します。</p>

<h3>テーマを変更する</h3>

<p>デフォルトテーマでも十分カッコいいですが、テーマ変更もできます。Octopress のテーマは <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" rel="external nofollow" title="3rd Party Octopress Themes">3rd Party Octopress Themes</a> にまとまっているので、よさそうなテーマを選んでインストールします。</p>

<p>テーマのインストールは、<code>.themes</code> ディレクトリにテーマのリポジトリをチェックアウトして <code>bundle exec rake install['theme-name']</code> でおこないます。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">git clone git@github.com:kAworu/octostrap3.git .themes/octostrap3</span><span class="line command">bundle exec rake install['octostrap3']</span></code></pre></td>
</tr></table></div></div>
        </div>


<p><a href="http://opthemes.com/" rel="external nofollow" title=""><img src="http://hamasyou.com/images/2014-02-13-movable-type-to-octopress-02.png" alt="Octopress-Themes" class="img-thumbnail"></a></p>

<h3>あたらしい記事を作成する</h3>

<p>新しい記事を書くには <code>bundle exec rake new_post['title']</code> とします。<code>title</code> 部分が記事のファイル名に使われるので、この時点では英語で入力するほうがよいです。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span></pre></td>
<td class="code"><pre><code><span class="line command">bundle exec rake new_post['movable-type-to-octopress']</span><span class="line output">mkdir -p source/_posts
</span><span class="line output">Creating new post: source/_posts/2014-02-13-movable-type-to-octopress.markdown</span></code></pre></td>
</tr></table></div></div>
        </div>


<pre><code>---
layout: post
title: "movable-type-to-octopress"
date: 2014-02-13 13:18:04 +0900
comments: true
categories:
---
</code></pre>

<p>記事のタイトルに日本語を使いたいときはファイル中の <code>title</code> 部分を書き換えます。また、カテゴリやタグ、ページのキーワードなどもここで変更できます。</p>

<pre><code>---
layout: post
title: "Movable TypeからGitHub+Octopressに乗り換える手順"
date: 2014-02-13 13:18:04 +0900
comments: true
categories: [Blog]
keywords: "Movable Type,GitHub,Octopress,Blog,Liquid,Jekyll,Ruby"
tags: [Movable Type,GitHub,Octopress,Liquid,Jekyll,Ruby]
---
</code></pre>

<h2>BitBucket にソースをコミットする</h2>

<p>GitHub もリポジトリサービスですが、現在は Public なリポジトリしか無料で作ることができません。そこで、<strong class="text-danger">BitBucket</strong> という別のリポジトリサービスを利用して環境をまるごとバックアップします。</p>

<p><a href="https://bitbucket.org/" rel="external nofollow" title=""><img src="http://upload.wikimedia.org/wikipedia/en/f/fc/Bitbucket_Logo.png" alt="BitBucket" class="img-thumbnail"></a></p>

<p>BitBucket は Private なリポジトリが作成できるので、ブログ環境は BitBucket で管理して、サイトデータだけを GitHub にデプロイするようにします。</p>

<h3>リポジトリを作成する</h3>

<p>BitBucket にリポジトリを作成する方法は、GitHub とほとんど変わりません。こちらもリポジトリ名を <code>username.github.io</code> にしておきます。</p>

<p><img src="http://hamasyou.com/images/2014-02-13-movable-type-to-octopress-03.png" alt="BitBucket リポジトリ作成" class="img-thumbnail"></p>

<p>リポジトリを作成したら、ソースコードをプッシュします。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">git remote add bitbucket git@bitbucket.org:username/username.github.io.git</span><span class="line command">git add .</span><span class="line command">git commit -m 'init'</span><span class="line command">git push bitbucket source</span></code></pre></td>
</tr></table></div></div>
        </div>


<h2>その他</h2>

<h3>記事にタグをつけられるようにする</h3>

<p>Octopress にはいろいろなプラグインがあります。自作することも簡単にできます。デフォルトではタグというものが Octopress にはありませんが、カテゴリ機能を参考にすると簡単にタグを管理できるようになります。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://rcmdnk.github.io/blog/2013/04/12/blog-octopress/" rel="external nofollow" title="Octopressでのタグ管理">Octopressでのタグ管理</a></p>

<h3>独自ドメインで運用する</h3>

<p><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages" rel="external nofollow" title="Setting up a custom domain with Pages">Setting up a custom domain with Pages</a> の手順でできます。</p>

<p>要約すると、<code>CNAME</code> というファイルを作成して、メインのサイトドメインを登録する。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>source/CNAME</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">hamasyou.com</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>独自ドメインを取ったら、DNS の設定で <code>ALIAS</code> レコード を <code>username.github.io</code> に向ければ CDN で配信が行われるそうです。ALIAS レコードに対応していない DNS プロバイダの場合は、IP アドレスをハードコードしないといけないので CDN の恩恵を受けられないよということだそうです。。</p>

<p>うちはムームードメインなので、ALIAS レコードに対応していないので、A レコードをハードコードしました。。DNS プロバイダ引越そうかな。。</p>

<pre><code>hamasyou.com A 192.30.252.153
hamasyou.com A 192.30.252.154
www.hamasyou.com CNAME hamasyou.github.io
</code></pre>

<p>これで、時間がたてば独自ドメイン名で GitHub のページが表示されるようになります。</p>

<h3>Markdown で <code>Definition LIST</code> を使えるようにする</h3>

<p>Octopress の使っている Markdown パーサの rdiscount のバージョンを上げます。2.1.7 からデフォルトで <em>Definition LIST（dl, dt, dd）</em> の拡張記法が使えるようになっているのでアップデート推奨です。</p>

<p><code>Gemfile</code> を開いて <code>gem 'rdiscount', '~&gt; 2.0.7'</code> を <code>gem 'rdiscount'</code> に書き換えます。</p>

<pre><code>- gem 'rdiscount', '~&gt; 2.0.7'
+ gem 'rdiscount
</code></pre>

<p>bundle update します。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">bundle update rdiscount</span></code></pre></td>
</tr></table></div></div>
        </div>


<p>これで Markdown で Definition LIST がデフォルトで使えるようになります。</p>

<pre><code>これがキーワード
: キーワードの説明

&lt;dl&gt;
  &lt;dt&gt;これがキーワード&lt;/dt&gt;
  &lt;dd&gt;キーワードの説明&lt;/dd&gt;
&lt;/dl&gt;
</code></pre>

<h3>Movable Type の記事を Markdown に変換する</h3>

<p>Movable Type の記事エクスポートを Markdown 形式に変換するコードを見つけたので、移行にはこれを使いました。ちょっと手はいれましたが。</p>

<div>
<script src="https://gist.github.com/2351046.js?file=mt_to_markdown.rb"></script><noscript><pre><code>#!/usr/bin/env ruby

require 'date'
require 'mustache'
require 'stringex'
require 'cgi'

export     = File.open(ARGV[0])
target_dir = ARGV[1]

class Post &lt; Mustache
  self.template = &lt;&lt;-MARKDOWN
---
layout: post
title: "{{title}}"
date: {{formatted_date}}
comments: {{comments}}
categories: {{category}}
author: {{author}}
---

{{formatted_body}}
MARKDOWN

  attr_accessor :author, :title, :category, :comments, :status, :body

  def initialize
    @body = []
  end

  def date=(date)
    case date
    when String
      @date = DateTime.strptime(date, "%m/%d/%Y %I:%M:%S %p")
    else
      @date = date
    end
  end

  def date
    @date
  end

  def formatted_date
    @date.strftime("%Y-%m-%d %H:%M")
  end

  def comments=(comments)
    @comments = comments == "1" ? true : false
  end

  def formatted_body
    CGI.unescapeHTML(body.join).
      gsub(/&lt;a href="(.*?)"&gt;*(.*?)&lt;\/a&gt;/i, '[\2](\1)').
      gsub("&lt;!--more--&gt;", "\n\n&lt;!-- more --&gt;\n\n")
  end

  def file_name
    "#{date.strftime("%Y-%m-%d")}-#{title.to_url}.markdown"
  end
end

posts = [Post.new]

KEYWORDS = /(AUTHOR|TITLE|STATUS|COMMENTS|CATEGORY|DATE): (.*)/

def attr_and_value(line)
  line =~ KEYWORDS
  ["#{$1.downcase}=", $2]
end

puts " # Reading from data '#{ARGV[0]}' ..."

puts " # Generating Markdown ..."

comment_section = false

export.each do |line|
  if line.strip == "--------"
    posts &lt;&lt; Post.new
    print '.'
    comment_section = false
    next
  end

  next if comment_section

  case line.strip
  when KEYWORDS
    posts.last.send(*attr_and_value(line))
  when /BODY/
    next
  when "-----"
    next
  when /COMMENT:/
    comment_section = true
    next
  else
    posts.last.body &lt;&lt; line
  end
end

puts
puts " # Writing files to #{target_dir} ..."
`mkdir -p #{target_dir}`
`cd #{target_dir} &amp;&amp; rm -rf _posts &amp;&amp; mkdir _posts`

ok, fails = 0, 0

posts.each do |post|
  begin
    File.open(File.join(target_dir, "_posts", post.file_name), "w+") { |f| f.puts post.render }
    puts " -&gt; #{post.file_name}"
    ok += 1
  rescue
    puts " # Could not write file for '#{post.title}'"
    fails += 1
  end
end

puts
puts " # All done! (#{ok}/#{fails})"
</code></pre></noscript>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHubとOctopressで始める無料ブログ]]></title>
    <link href="http://hamasyou.com/blog/2014/02/12/github-octopress/"/>
    <updated>2014-02-12T19:33:48+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/12/github-octopress</id>
    <content type="html"><![CDATA[<p>長いもので、hamasyou.com を初めてから9年経ちました。何年かに一回ブログのデザインを更新したくなるのって普通ですよね。</p>

<p>今までずっと <em>MovableType</em> を使っていたんですが、markdown で書きたくなったのと、MovableType のデザインのいじり方を忘れてしまったため、ブログ環境を一新する決意をしました。</p>

<p>今回作ったブログ環境は次のとおり。</p>

<dl>
<dt>公開用のサーバ</dt>
<dd><a href="http://pages.github.com/" rel="external nofollow" title="GitHub Pages">GitHub Pages</a></dd>
<dt>ブログ編集用のCMS</dt>
<dd>ローカルマシン上に <a href="http://octopress.org/" rel="external nofollow" title="Octopress">Octopress</a> で構築</dd>
</dl>
<!-- more --><h2>GitHub Pages とは</h2>

<p><a href="http://pages.github.com/" rel="external nofollow" title=""><img title="GitHub Pages" class="img-thumbnail" src="http://hamasyou.com/images/2014-02-12-github-octopress.png" alt="http://pages.github.com/" width="400" height="310"></a></p>

<p>GitHub Pages とは簡単に言うと GitHub のリポジトリを Web サーバとして利用できるサービスです。リポジトリに HTML ファイルをプッシュすると公開される仕組みです。</p>

<p>これがなかなかよく出来ていて、静的ページしか使えませんが、404ページの設定や DNS の CNAME の設定なんかもできます。</p>

<p>リポジトリ名がサイトのホスト名になります（例: <code>http://hamasyou.github.io</code>）。ドメインを取得すれば当然、独自ドメインで運用するなんてことも可能です。</p>

<h2>Octopress とは</h2>

<p><a href="http://octopress.org/" rel="external nofollow" title=""><img title="Octopress" class="img-thumbnail" src="http://capture.heartrails.com/400x300?http://octopress.org/" alt="http://octopress.org/" width="400" height="300"></a></p>

<p>Octopress は Ruby 用の GitHub Pages スターターキットです。内部で <code>Jekyll</code> や <code>rdiscount</code> を使っていて、簡単に GitHub Pages を利用する環境が構築できて、markdown ですぐに記事を書き始められます。</p>

<p>Octopress の詳しい使い方は <a href="http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/" rel="external nofollow" title="OctopressでGitHub無料ブログ構築。sourceをBitbucket管理。簡単ガイド！ - 酒と泪とRubyとRailsと">OctopressでGitHub無料ブログ構築。sourceをBitbucket管理。簡単ガイド！ - 酒と泪とRubyとRailsと</a> が参考になります。</p>

<p>Octopress には様々なテーマが用意されていて、うちのサイトもテーマを使っています。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで手書きの図や絵をプログラムに取り込む方法]]></title>
    <link href="http://hamasyou.com/blog/2013/12/03/rails/"/>
    <updated>2013-12-03T19:05:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/12/03/rails</id>
    <content type="html"><![CDATA[<p>スマホやタブレットが増えてきて、Railsアプリでも手書きで書いた絵や図を取り込みたいというような案件があるのではないでしょうか？手書き画像が保存する方法はいろいろありますが、そのひとつをちょっとメモのため残しておきます。特別なgemとかは必要ありません。使うのは HTML5 の canvas だけです。</p>

<!-- more -->




<h2>環境</h2>




<ul>
<li>Ruby 2.0.0p353</li>
<li>Rails 4.0.1</li>
<li>bundler</li>
</ul>
<h2>手順</h2>


<p>まず、Rails 環境を作成して足場をつくります。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span></pre></td>
<td class="code"><pre><code><span class="line command">rails new blog --skip-bundle</span><span class="line output">      create
</span><span class="line output">      create  README.rdoc
</span><span class="line output">      create  Rakefile
</span><span class="line output">      create  config.ru
</span><span class="line output">      create  .gitignore
</span><span class="line output">      create  Gemfile
</span><span class="line output">      create  app
</span><span class="line output">      create  app/assets/javascripts/application.js
</span><span class="line output">      create  app/assets/stylesheets/application.css
</span><span class="line output">      create  app/controllers/application_controller.rb
</span><span class="line output">      create  app/helpers/application_helper.rb
</span><span class="line output">      create  app/views/layouts/application.html.erb
</span><span class="line output">      create  app/assets/images/.keep
</span><span class="line output">      create  app/mailers/.keep
</span><span class="line output">      create  app/models/.keep
</span><span class="line output">      create  app/controllers/concerns/.keep
</span><span class="line output">      create  app/models/concerns/.keep
</span><span class="line output">      create  bin
</span><span class="line output">      create  bin/bundle
</span><span class="line output">      create  bin/rails
</span><span class="line output">      create  bin/rake
</span><span class="line output">      create  config
</span><span class="line output">      create  config/routes.rb
</span><span class="line output">      create  config/application.rb
</span><span class="line output">      create  config/environment.rb
</span><span class="line output">      create  config/environments
</span><span class="line output">      create  config/environments/development.rb
</span><span class="line output">      create  config/environments/production.rb
</span><span class="line output">      create  config/environments/test.rb
</span><span class="line output">      create  config/initializers
</span><span class="line output">      create  config/initializers/backtrace_silencers.rb
</span><span class="line output">      create  config/initializers/filter_parameter_logging.rb
</span><span class="line output">      create  config/initializers/inflections.rb
</span><span class="line output">      create  config/initializers/mime_types.rb
</span><span class="line output">      create  config/initializers/secret_token.rb
</span><span class="line output">      create  config/initializers/session_store.rb
</span><span class="line output">      create  config/initializers/wrap_parameters.rb
</span><span class="line output">      create  config/locales
</span><span class="line output">      create  config/locales/en.yml
</span><span class="line output">      create  config/boot.rb
</span><span class="line output">      create  config/database.yml
</span><span class="line output">      create  db
</span><span class="line output">      create  db/seeds.rb
</span><span class="line output">      create  lib
</span><span class="line output">      create  lib/tasks
</span><span class="line output">      create  lib/tasks/.keep
</span><span class="line output">      create  lib/assets
</span><span class="line output">      create  lib/assets/.keep
</span><span class="line output">      create  log
</span><span class="line output">      create  log/.keep
</span><span class="line output">      create  public
</span><span class="line output">      create  public/404.html
</span><span class="line output">      create  public/422.html
</span><span class="line output">      create  public/500.html
</span><span class="line output">      create  public/favicon.ico
</span><span class="line output">      create  public/robots.txt
</span><span class="line output">      create  test/fixtures
</span><span class="line output">      create  test/fixtures/.keep
</span><span class="line output">      create  test/controllers
</span><span class="line output">      create  test/controllers/.keep
</span><span class="line output">      create  test/mailers
</span><span class="line output">      create  test/mailers/.keep
</span><span class="line output">      create  test/models
</span><span class="line output">      create  test/models/.keep
</span><span class="line output">      create  test/helpers
</span><span class="line output">      create  test/helpers/.keep
</span><span class="line output">      create  test/integration
</span><span class="line output">      create  test/integration/.keep
</span><span class="line output">      create  test/test_helper.rb
</span><span class="line output">      create  tmp/cache
</span><span class="line output">      create  tmp/cache/assets
</span><span class="line output">      create  vendor/assets/javascripts
</span><span class="line output">      create  vendor/assets/javascripts/.keep
</span><span class="line output">      create  vendor/assets/stylesheets
</span><span class="line output">      create  vendor/assets/stylesheets/.keep
</span><span class="line command">cd blog</span><span class="line command">bundle install --path vendor/bundle</span><span class="line output">Fetching gem metadata from https://rubygems.org/……….
</span><span class="line output">Fetching gem metadata from https://rubygems.org/..
</span><span class="line output">Resolving dependencies…
</span><span class="line output">Installing rake (10.1.0)
</span><span class="line output">Installing i18n (0.6.5)
</span><span class="line output">Installing minitest (4.7.5)
</span><span class="line output">Installing multi_json (1.8.2)
</span><span class="line output">Installing atomic (1.1.14)
</span><span class="line output">Installing thread_safe (0.1.3)
</span><span class="line output">Installing tzinfo (0.3.38)
</span><span class="line output">Installing activesupport (4.0.1)
</span><span class="line output">Installing builder (3.1.4)
</span><span class="line output">Installing erubis (2.7.0)
</span><span class="line output">Installing rack (1.5.2)
</span><span class="line output">Installing rack-test (0.6.2)
</span><span class="line output">Installing actionpack (4.0.1)
</span><span class="line output">Installing mime-types (1.25.1)
</span><span class="line output">Installing polyglot (0.3.3)
</span><span class="line output">Installing treetop (1.4.15)
</span><span class="line output">Installing mail (2.5.4)
</span><span class="line output">Installing actionmailer (4.0.1)
</span><span class="line output">Installing activemodel (4.0.1)
</span><span class="line output">Installing activerecord-deprecated_finders (1.0.3)
</span><span class="line output">Installing arel (4.0.1)
</span><span class="line output">Installing activerecord (4.0.1)
</span><span class="line output">Using bundler (1.3.1)
</span><span class="line output">Installing coffee-script-source (1.6.3)
</span><span class="line output">Installing execjs (2.0.2)
</span><span class="line output">Installing coffee-script (2.2.0)
</span><span class="line output">Installing thor (0.18.1)
</span><span class="line output">Installing railties (4.0.1)
</span><span class="line output">Installing coffee-rails (4.0.1)
</span><span class="line output">Installing hike (1.2.3)
</span><span class="line output">Installing jbuilder (1.5.2)
</span><span class="line output">Installing jquery-rails (3.0.4)
</span><span class="line output">Installing json (1.8.1)
</span><span class="line output">Installing tilt (1.4.1)
</span><span class="line output">Installing sprockets (2.10.1)
</span><span class="line output">Installing sprockets-rails (2.0.1)
</span><span class="line output">Installing rails (4.0.1)
</span><span class="line output">Installing rdoc (3.12.2)
</span><span class="line output">Installing sass (3.2.12)
</span><span class="line output">Installing sass-rails (4.0.1)
</span><span class="line output">Installing sdoc (0.3.20)
</span><span class="line output">Installing sqlite3 (1.3.8)
</span><span class="line output">Installing turbolinks (1.3.1)
</span><span class="line output">Installing uglifier (2.3.2)
</span><span class="line command">bundle exec rails g scaffold post</span><span class="line output">      invoke  active_record
</span><span class="line output">      create    db/migrate/20131203101546_create_posts.rb
</span><span class="line output">      create    app/models/post.rb
</span><span class="line output">      invoke    test_unit
</span><span class="line output">      create      test/models/post_test.rb
</span><span class="line output">      create      test/fixtures/posts.yml
</span><span class="line output">      invoke  resource_route
</span><span class="line output">       route    resources :posts
</span><span class="line output">      invoke  scaffold_controller
</span><span class="line output">      create    app/controllers/posts_controller.rb
</span><span class="line output">      invoke    erb
</span><span class="line output">      create      app/views/posts
</span><span class="line output">      create      app/views/posts/index.html.erb
</span><span class="line output">      create      app/views/posts/edit.html.erb
</span><span class="line output">      create      app/views/posts/show.html.erb
</span><span class="line output">      create      app/views/posts/new.html.erb
</span><span class="line output">      create      app/views/posts/_form.html.erb
</span><span class="line output">      invoke    test_unit
</span><span class="line output">      create      test/controllers/posts_controller_test.rb
</span><span class="line output">      invoke    helper
</span><span class="line output">      create      app/helpers/posts_helper.rb
</span><span class="line output">      invoke      test_unit
</span><span class="line output">      create        test/helpers/posts_helper_test.rb
</span><span class="line output">      invoke    jbuilder
</span><span class="line output">      create      app/views/posts/index.json.jbuilder
</span><span class="line output">      create      app/views/posts/show.json.jbuilder
</span><span class="line output">      invoke  assets
</span><span class="line output">      invoke    coffee
</span><span class="line output">      create      app/assets/javascripts/posts.js.coffee
</span><span class="line output">      invoke    scss
</span><span class="line output">      create      app/assets/stylesheets/posts.css.scss
</span><span class="line output">      invoke  scss
</span><span class="line output">      create    app/assets/stylesheets/scaffolds.css.scss
</span><span class="line command">bundle exec rake db:migrate</span><span class="line output">==  CreatePosts: migrating ====================================================
</span><span class="line output">– create_table(:posts)
</span><span class="line output">   -&gt; 0.0010s
</span><span class="line output">==  CreatePosts: migrated (0.0011s) ===========================================</span></code></pre></td>
</tr></table></div></div>
        </div>


<p><code>app/views/posts/_form.html.erb</code> を開いて次のコードを追加します。このコードが手書き入力部分（canvas）になります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/views/posts/_form.html.erb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="html+erb"><span class="line">  <span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">"paper"</span> <span class="na">class=</span><span class="s">"paper"</span> <span class="na">width=</span><span class="s">"400"</span> <span class="na">height=</span><span class="s">"400"</span> <span class="na">data-target=</span><span class="s">"#sign"</span><span class="nt">&gt;</span>
</span><span class="line">    ご利用のブラウザではサインは表示できません。
</span><span class="line">  <span class="nt">&lt;/canvas&gt;</span>
</span><span class="line">  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">name=</span><span class="s">"clearCanvas"</span> <span class="na">class=</span><span class="s">"clear-canvas"</span><span class="nt">&gt;</span>クリア<span class="nt">&lt;/button&gt;</span>
</span><span class="line">  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">id=</span><span class="s">"sign"</span> <span class="na">name=</span><span class="s">"sign"</span> <span class="na">value=</span><span class="s">""</span> <span class="nt">/&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>app/assets/javascripts</code> に paint.js.coffee ファイルを作成し、次のコードをコピペします。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/assets/javascripts/paint.js.coffee</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td>
<td class="code"><pre><code class="coffeescript"><span class="line"><span class="nx">jQuery</span> <span class="nf">($) -&gt;</span>
</span><span class="line">    <span class="nv">screen2client = </span><span class="nf">(e) -&gt;</span>
</span><span class="line">        <span class="p">[</span><span class="nx">px</span><span class="p">,</span> <span class="nx">py</span><span class="p">]</span> <span class="o">=</span> <span class="k">if</span> <span class="nx">e</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s">'touch'</span><span class="p">)</span> <span class="k">then</span> <span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">touches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clientX</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">touches</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clientY</span><span class="p">]</span> <span class="k">else</span> <span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span><span class="p">]</span>
</span><span class="line">        <span class="nv">rect = </span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">getBoundingClientRect</span><span class="p">()</span>
</span><span class="line">        <span class="p">{</span><span class="nv">x: </span><span class="nx">px</span> <span class="o">-</span> <span class="nx">rect</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span> <span class="nv">y: </span><span class="nx">py</span> <span class="o">-</span> <span class="nx">rect</span><span class="p">.</span><span class="nx">top</span><span class="p">}</span>
</span><span class="line">    <span class="nv">drawFlag = </span><span class="kc">false</span>
</span><span class="line">    <span class="nv">oldX = </span><span class="mi">0</span>
</span><span class="line">    <span class="nv">oldY = </span><span class="mi">0</span>
</span><span class="line">    <span class="nv">$canvas = </span><span class="nx">$</span><span class="p">(</span><span class="s">'#paper'</span><span class="p">)</span>
</span><span class="line">    <span class="nx">$canvas</span><span class="p">.</span><span class="nx">on</span> <span class="s">'mousedown touchstart'</span><span class="p">,</span> <span class="nf">(e) -&gt;</span>
</span><span class="line">        <span class="nv">drawFlag = </span><span class="kc">true</span>
</span><span class="line">        <span class="p">{</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">}</span> <span class="o">=</span> <span class="nx">screen2client</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
</span><span class="line">        <span class="p">[</span><span class="nx">oldX</span><span class="p">,</span> <span class="nx">oldY</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">]</span>
</span><span class="line">    <span class="nx">$canvas</span><span class="p">.</span><span class="nx">on</span> <span class="s">'mouseup mouseout touchend touchcancel'</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class="line">        <span class="nv">drawFlag = </span><span class="kc">false</span>
</span><span class="line">        <span class="nv">data = </span><span class="nx">$canvas</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">toDataURL</span><span class="p">()</span>
</span><span class="line">        <span class="nx">$</span><span class="p">(</span><span class="nx">$canvas</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s">'target'</span><span class="p">)).</span><span class="nx">val</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class="line">    <span class="nx">$canvas</span><span class="p">.</span><span class="nx">on</span> <span class="s">'mousemove touchmove'</span><span class="p">,</span> <span class="nf">(e) -&gt;</span>
</span><span class="line">        <span class="k">return</span> <span class="k">unless</span> <span class="nx">drawFlag</span>
</span><span class="line">        <span class="p">{</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">}</span> <span class="o">=</span> <span class="nx">screen2client</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
</span><span class="line">        <span class="nv">context = </span><span class="nx">$canvas</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getContext</span><span class="p">(</span><span class="s">'2d'</span><span class="p">)</span>
</span><span class="line">        <span class="nv">context.strokeStyle = </span><span class="s">'#C71C22'</span>
</span><span class="line">        <span class="nv">context.lineWidth = </span><span class="mi">1</span>
</span><span class="line">        <span class="nx">context</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">()</span>
</span><span class="line">        <span class="nx">context</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">oldX</span><span class="p">,</span> <span class="nx">oldY</span><span class="p">)</span>
</span><span class="line">        <span class="nx">context</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span>
</span><span class="line">        <span class="nx">context</span><span class="p">.</span><span class="nx">stroke</span><span class="p">()</span>
</span><span class="line">        <span class="nx">context</span><span class="p">.</span><span class="nx">closePath</span><span class="p">()</span>
</span><span class="line">        <span class="nv">oldX = </span><span class="nx">x</span>
</span><span class="line">        <span class="nv">oldY = </span><span class="nx">y</span>
</span><span class="line">        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class="line">        <span class="k">return</span>
</span><span class="line">    <span class="nx">$</span><span class="p">(</span><span class="s">'.clear-canvas'</span><span class="p">).</span><span class="nx">on</span> <span class="s">'click'</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class="line">        <span class="nv">context = </span><span class="nx">$canvas</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getContext</span><span class="p">(</span><span class="s">'2d'</span><span class="p">)</span>
</span><span class="line">        <span class="nx">context</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$canvas</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">width</span><span class="p">,</span> <span class="nx">$canvas</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">height</span><span class="p">)</span>
</span><span class="line">        <span class="nx">$</span><span class="p">(</span><span class="nx">$canvas</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s">'target'</span><span class="p">)).</span><span class="nx">val</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>app/assets/javascript/application.js</code> を開き、ファイルの最後に次のコードを追加します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/assets/javascript/application.js</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">startsWith</span> <span class="o">!=</span> <span class="s1">'function'</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">startsWith</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">===</span> <span class="nx">str</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>最後に、画像データを受け取って画像ファイルにする処理をコントローラに追加します。<code>app/controllers/posts_controller.rb</code> を開き、<code>def create</code> に次のコードを追加します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/controllers/posts_controller.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="no">Tempfile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="s1">'sign'</span><span class="p">,</span> <span class="s1">'.png'</span><span class="o">]</span><span class="p">,</span> <span class="ss">encoding</span><span class="p">:</span> <span class="ss">Encoding</span><span class="p">:</span><span class="ss">:BINARY</span><span class="p">)</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="no">Base64</span><span class="o">.</span><span class="n">decode64</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:sign</span><span class="o">].</span><span class="n">sub</span><span class="p">(</span><span class="s1">'data:image/png;base64,'</span><span class="p">,</span> <span class="s1">''</span><span class="p">))</span>
</span><span class="line"><span class="n">f</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>これで、一時ファイルにキャンバスデータを書き込んでファイル化できます。サーバを起動して <code>http://localhost:3000/posts/new</code> にアクセスして試してみてください。</p>

<p><img src="http://hamasyou.com/images/2013-12-03-rails-ss.png" height="526" width="517" alt="スクリーンショット" class="img-thumbnail"></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バッドデータハンドブック ―データにまつわる問題への19の処方箋]]></title>
    <link href="http://hamasyou.com/blog/2013/11/14/4873116406/"/>
    <updated>2013-11-14T11:45:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/11/14/4873116406</id>
    <content type="html"><![CDATA[<blockquote>
<p>値の欠落、形式から外れたレコード、エンコーディング形式が不明な文字列。「バッドデータ」と聞いた時に思い浮べる典型例です。しかし、これら以外にも「そもそもデータにアクセスできない」「消えてしまった」「昨日と違っている」「データはあるが形式が処理に適していない」など、データを収集・分析するエンジニアは、これらの「バッドデータ」と正面から向きあわなければならないことが多々あります。本書では、これらの問題のあるデータのパターンを紹介し、その対処法を解説しています。<br>19人のデータ分析の専門家が、自らの経験を通して得た、さまざまな教訓、実践的な方法論等を詳述した本書は、ビッグデータ時代のエンジニアにとって必携の一冊となるでしょう。</p>
<footer><strong>O&#8217;REILLY</strong></footer>
</blockquote>


<p>本書はプログラミングやデータ解析の時に扱うデータの内容やフォーマットについて書かれています。プログラミングの時に扱いやすいデータフォーマット、こういう点に気をつけてデータを扱え、こういうフォーマットが使いやすいなどについて書かれています。</p>

<p>コンピュータで扱うデータは大きく分けて<strong class="text-danger">コンピュータのためにフォーマットするデータ</strong>と<strong class="text-danger">人間のためにフォーマットするデータ</strong>があります。これらをごっちゃにしてしまうと扱いづらいデータ（<strong class="text-danger">バッドデータ</strong>）になってしまいます。本書はバッドデータをよりよく扱う方法、バッドデータにしない方法について、いろいろな点で考えられるようにアイデアや体験談を与えてくれます。</p>

<p>最近 API をよく作ってるんだけど通信データのフォーマットに困ってるというような Web プログラマにオススメです！</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小飼弾のコードなエッセイ ~我々は本当に世界を理解してコードしているのだろうか? ]]></title>
    <link href="http://hamasyou.com/blog/2013/06/24/4774156647/"/>
    <updated>2013-06-24T22:34:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/06/24/4774156647</id>
    <content type="html"><![CDATA[<p>コード。ラテン語で codex。codex とはもともとローマ法大全のことを指し示す言葉だそうです。コードは読みとくべきであり、書き下されるべきものである。そしてそれができたとき、喜びが生まれる。弾さんのまえがきにある言葉ですが、コーディング好きなプログラマのみなさんはこの言葉がよくわかると思います。</p>

<p>本書は、プログラミングに関わるいろいろな事柄が短文のエッセイの形でまとめられています。もともと Software Design の連載だったものをまとめたもののようですが、まとめて読むことに価値があると思います。</p>

<p>弾さんのコンピュータの捉え方、プログラミングの姿勢、豊富な知識や知見がまとめられています。スイスイと読んでいける日本版の『<a href="http://www.amazon.co.jp/gp/product/4274066304?ie=UTF8&amp;camp=247&amp;creativeASIN=4274066304&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="Joel on Software">Joel on Software</a>』です。</p>

<!-- more -->




<h2>はじめに</h2>


<p>コードな世界へ、ようこそ!</p>

<p>コード?コードって何でしょう?</p>

<p>元をたどると、この言葉はラテン語 codex に行き着きます。</p>

<blockquote>
<p>ORIGIN Middle English: via Old French from Latin codex, codic- (see codex). The term originally denoted a systematic collection of statutes made by one of the later Roman emperors, particularly that of Justinian&#8230;</p>
<footer><strong>Oxford American Dictionary</strong></footer>
</blockquote>


<p>ここに出てくるJustinianとはユスティニアヌス1世のこと。「ローマ法大全」(Corpus Iuris Civilis)を編纂させた人。codexとは、元々はこのローマ法大全のことを指し示す言葉だったのです。固有名詞から生じた一般名詞。</p>

<p>このことはBibleという言葉の対局にあります。こちらは元々は「本」という一般名詞でした。そのことは bibliomania (本の虫–どこの私だ?)、 bibliography (本の目録)といった英単語からも伺うことができます。Bibleとは&#8221;The Book&#8221;という意味だったのですね。一般名詞から生じた固有名詞。</p>

<p>コードに話を戻しましょう。本来のコードであったローマ法に関して、塩野七生はこう述べています。</p>

<blockquote>
<p>人間の行動原則の正し手を、 宗教に求めたユダヤ人。 哲学に求めたギリシア人。 法律に求めたローマ人。</p>
<footer><strong>ローマ人の物語</strong></footer>
</blockquote>


<p>この意味において、日本を含め、およそ法治国家を標榜する国々の市民はローマ人の末裔ということになります。</p>

<p>ところが、このローマ人、法を作成し、改訂し、施行することには熱心でも、編纂することには少しも熱心ではなかったのです。前述のユスティニアヌス1世の527年から565年。ローマの全盛期はとっくに過ぎて、東西に分裂した後だったのです。</p>

<p>おそらく、それに熱心に取り組んでいる人にとって、それはあまりに当然で必然なことで、わざわざ「外から」編纂するという気持ちにはなりにくかったのでしょう。</p>

<p>ローマ人にとってそうであったように、コードという言葉は現代人にとってそういう存在になりつつあります。ただし現代人にあってローマ人になかったものが一つあります。</p>

<p>それが、電脳(computer)。これはローマ人に奴隷がいて現代人にはいないこと(になっている)ことと対をなしています。ローマ法はあくまでローマ市民に適用されるものであって非市民たる奴隷や異邦人(barbarian)に適用されるものではなかったのですが、現代人は、その電脳で実行されるプログラムのことも、コードと呼んでいます。</p>

<p>本書の「コード」は、その双方を指しています。電脳に適用するコードと、人脳に適用するコード、その双方を。いや、もしかしてもう一つあるかも知れません。この世界自体に適用されている、コード。</p>

<p>最後のそれは、「法則」とも呼ばれます。残念ながらこれは我々が書き下したものではなく、この世界自身に書かれているものです。それを読み解く人が、科学者。そして人電両脳のコードを読み書きする人が、技術者。これは、科学者と技術者の違いでもあります。扱うコードがリードオンリなのかライタブルなのか。</p>

<p>本書の想定読者は、一応後者たる技術者ということになっています。しかしこの両者が深く繋がっていることを、私は「<a href="http://www.amazon.co.jp/gp/product/4041103851?ie=UTF8&amp;camp=247&amp;creativeASIN=4041103851&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="『中卒』でもわかる科学入門">『中卒』でもわかる科学入門</a>」に書いています。</p>

<blockquote>
<p>およそどんな人でも、幸せな瞬間というのは次の二つしかないのかも知れません。</p>
<p>1. できなかったことができるようになった瞬間<br>2. わからなかったことがわかった瞬間</p>
</blockquote>


<p>コードは読み解くべきものでもあり、書き下されるべきものでもある。そしてそれが出来た時、よろこびが生まれる。</p>

<p>それが私にとってのコードであり、本書で扱うコードの範囲(scope)です。</p>

<p>では改めて。コードな世界へ、ようこそ!</p>

<h2>もくじ</h2>




<ul class="list-unstyled">
<li>#0 堂々とevaろう。でもevaりすぎにご用心</li>
<li>#1 Y談。</li>
<li>#2 I/O止めないで</li>
<li>#3 メモレカス、ナマケモノドモ</li>
<li>#4 殺速と複殺</li>
<li>#5 OS、SOS</li>
<li>#6 自縄自縛のススメ</li>
<li>#7 Body and Soul</li>
<li>#8 Mathコミュニケーション</li>
<li>#9 コードと法律の共通点</li>
<li>#10 バカと電脳は使いよう</li>
<li>#11 データは人のためならず</li>
<li>#12 Connect</li>
<li>#13 いまそこにある夢</li>
<li>#14 最後のファイルシステム</li>
<li>#15 ファイルシステムの終わり</li>
<li>#16 From Jobs&#8217; Apple to Apple&#8217;s jobs </li>
<li>#17 Too Beautiful to be Windows</li>
<li>#18 点と線</li>
<li>#19 1%のコードと99%のコンフィギュレーション</li>
<li>#20 言語のチュウス[ウイ]</li>
<li>#21 並べ方と並べ替え方</li>
<li>#22 参照にしか値しない</li>
<li>#23 働いたら負けなら、働いてもらえばいいじゃない</li>
<li>#24 安物買いの安全失い</li>
<li>#25 Not Even Odd</li>
<li>#26 安増税の税失い</li>
<li>#27 たまには( )つけてみよう</li>
<li>#28 ニシキヘビに呑み込めないもの</li>
<li>#29 三位
</li>
<li>#30 Where do(es) you(r heart) want to go today</li>
<li>#31 The Round Lens Square Hole</li>
<li>#32 Can we still stay hungry?</li>
<li>#33 Where has all the foolish gone?</li>
<li>Ex.0 美しいプログラムの美しくないソース</li>
<li>Ex.1 アマグラマのすすめ美徳その1:怠慢</li>
<li>Ex.2 アマグラマのすすめ美徳その2:短気</li>
<li>Ex.3 アマグラマのすすめ美徳その3:傲慢</li>
<li>Ex.4 プログラマでなくても名前ぐらい覚えておきたいアルゴリズム×11</li>
<li>Ex.5 プログラミングいつまでに学ぶ? なぜ学ぶ?</li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ディジタル作法 －カーニハン先生の「情報」教室－]]></title>
    <link href="http://hamasyou.com/blog/2013/06/23/4274069095/"/>
    <updated>2013-06-23T17:31:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/06/23/4274069095</id>
    <content type="html"><![CDATA[<p>本書は、現在のコンピュータシステムや通信システムがどのように動作しているのかを、ハードウェアとソフトウェアの両方の視点から解説している一般の人向けの本です。コンピュータのことをもっとよく知りたい、コンピュータがどのように動作しているかをもっと知りたい、そういった人にオススメの一冊です。</p>

<blockquote>
<p>&#8220;D is for Digital&#8221; （ディジタル作法） は、コンピュータシステムや通信システムがどのように動作しているかを、簡潔に、それでいて細かいところまで丁寧に説明した本であり、自分たちが暮らしている世界のことをより良く分かっておきたいと考える一般読者（専門家ではない人）を対象にしています。本書では、今日の世界におけるコンピュータシステムや通信システムがどのように動作しているかということを、ハードウェアおよびソフトウェアからインターネット、Webに到るまで、ひととおり説明しています。</p>
<footer><strong>『本書』日本語版の刊行に寄せてより</strong></footer>
</blockquote>




<!-- more -->


<p>コンピュータの理論、コンピュータの仕組みというのは情報系の大学であれば授業で習うと思いますが、情報系の大学を出ていない人にはコンピュータが実際にどのように動作して、コンピュータがなぜインターネットに繋がって、コンピュータがなぜアプリケーションを実行できるのかをきちんと説明するのは難しいと思います。情報系の大学を出ていても説明できない人もいますしね。。</p>

<p>本書は、大学で習うようなこれらの基礎的なことを一般の人にも分りやすい平易な説明や例を使って解説してくれている本になります。ハードウェアとしてのコンピュータ、ソフトウェアの集まりとしてのコンピュータ、PC以外のコンピュータ、コンピュータは色々な形をしています。1から説明をしたのではたった300ページで説明を終えることなど出来るはずはないと思います。</p>

<p>でも、本書を読み終わると一通りコンピュータのことを理解できてしまった気になります。さすがはカーニハン先生が書いただけのことはあるなと。コンピュータがなぜ動いているのか理解した人にオススメです！</p>

<h2>おぼえがき</h2>




<h3>CPU</h3>


<p>CPU はコンピュータが計算するを行うための装置のことです。最近の CPU は「2.1 GHz Intel Core Duo」というような記述があります。Intel は CPU のメーカで、<strong class="text-danger">コア（Core）</strong>というのは CPU と同じ意味になります。CPU はクロックと呼ばれる信号を使用して動作します。1秒間に1刻みする信号を1Hzといい、2.1 GHz は1秒間に2,100,000,000回動作するというわけです。</p>

<h3>ビット・バイト</h3>


<p>コンピュータはディジタル処理装置である。コンピュータは情報をビットで表現する。ビット列に寄って大きな情報が表せる。数値、文字、音、画像、動画、プログラムなどはすべてビット列で表される。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Titanium]モジュールを使ったアプリで実機転送時にリンカエラーが発生する場合の対処]]></title>
    <link href="http://hamasyou.com/blog/2013/03/05/titanium/"/>
    <updated>2013-03-05T08:52:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/03/05/titanium</id>
    <content type="html"><![CDATA[<p>モジュールを作成して、デモアプリ等で利用する際に実機転送時に</p>

<pre><code>[ERROR] : ** BUILD FAILED **
[ERROR] : The following build commands failed:
[ERROR] :   Ld build/Debug-iphoneos/gpuimagedemo.app/gpuimagedemo normal armv7
[ERROR] : (1 failure)
</code></pre>

<p>のようなエラーが発生する場合がある。
これは、Titanium がビルド時に最適化で利用していない内部モジュールとのリンクを切ってしまうために起こる。</p>

<p>build ディレクトリの下の Xcode のプロジェクトを開くと</p>

<pre><code>Undefined symbols for architecture arvm7:
    ...
":_OBJC_CLASS_$_TiUIImageView":, referenced from:
    ...
</code></pre>

<p>のようにビルドエラーが発生している。</p>

<p>これを解決するには、モジュールで利用している内部クラスを、JavaScript 側のソースコードに現れるようにする。</p>

<p>例えば、今回の場合だと、TiUIImageView の参照先が見つからないとなっているので JavaScript のコードの方に</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">createImageView</span><span class="p">({</span>
</span><span class="line">        <span class="nx">image</span><span class="o">:</span> <span class="s1">'demo.jpg'</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>のようなコードを加えれば良い。バッドノウハウですね。。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#qiita_sushi に参加した]]></title>
    <link href="http://hamasyou.com/blog/2013/03/04/qiita-sushi/"/>
    <updated>2013-03-04T23:15:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/03/04/qiita-sushi</id>
    <content type="html"><![CDATA[<p>Qiita を運営されている Increments さんが一周年ということで、白ワイン持参で参加させていただきました。</p>

<p>寿司職人が目の前で握ってくれる本格派！</p>

<p><img src="http://hamasyou.com/images/qiita_sushi.jpg" width="320" class="img-thumbnail"></p>

<p>次の Qiita イベントにも是非参加します！今後とも、エンジニアのためのサービスをガンガンリリースしてもらいたいと思います。うちの会社もエンジニアの会社なので期待しています！</p>

<p>一周年、おめでとうございます！</p>

<p>ちなみに、Qiita イベントの出席者は、Perl 界隈の人と Ruby 界隈の人が半々くらいな感じ。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世界でもっとも強力な9のアルゴリズム]]></title>
    <link href="http://hamasyou.com/blog/2013/02/05/482228493X/"/>
    <updated>2013-02-05T22:17:00+09:00</updated>
    <id>http://hamasyou.com/blog/2013/02/05/482228493X</id>
    <content type="html"><![CDATA[<blockquote>
<p>この本で取り上げた偉大なアルゴリズムから導き出せる共通のテーマはあるだろうか。この本の著者として私がとても驚いたのは、これらの大きなアイデアは、どれもコンピュータプログラミングやコンピュータ科学の予備知識を一切必要とせずに説明できることだ。</p>
<p></p>
<p>この本のアルゴリズム全体に共通するもう1つの重要なテーマは、コンピュータ科学という学問分野がただのプログラミングよりもずっと大きな世界だということだ。</p>
<p></p>
<p>私が目指したのは、読者に偉大なアルゴリズムについての知識を仕入れてもらって、日常のコンピュータ操作の中でもこれはすごいと感じてもらえるようにすることだ。</p>
<footer><strong>本書</strong></footer>
</blockquote>


<p>9つの偉大なアルゴリズム、<em>検索エンジンのインデクシング</em>、<em>ページランク</em>、<em>公開鍵暗号法</em>、<em>誤り訂正符号</em>、<em>パターン認識</em>、<em>データ圧縮</em>、<em>データベース</em>、<em>デジタル署名</em>、<em>決定不能性</em>を知ることで、僕達の周りでこれらのアルゴリズムがどうやって機能していて、何が担保されているのか理解できるようになります。</p>

<p>これらのアルゴリズムを知ることで、コンピュータの世界はすごいことが起こっていると知ってもらい、新たに出てくる問題の解決の一つになるといいなと思います。</p>

<p>読み物なので、どんな人にもおすすめです。</p>

<!-- more -->




<h3>検索エンジンのインデクシング</h3>


<p>検索エンジンは「NEAR」（キーワードが近くにあることを条件にする検索）を使ってランキングの精度を上げている。</p>

<p>また、メタワードトリック（タイトル、見出し、リンクなどのメタ情報のどこにキーワードが含まれているか）をつかって精度を上げている。</p>

<h3>ページランク</h3>


<p>ハイパーリンクトリック（リンクされているかどうか）、オーソリティトリック（有名なところからのリンクは高評価）、ランダムサーファートリック（ランダムにページを選択肢リンクをたどる）などのアルゴリズムが使われている。</p>

<p>なお、Google のページランクはもっと複雑な条件で行われている。</p>

<h3>公開鍵暗号法</h3>


<p>「共有された秘密」をどのように作るかがポイント。</p>

<h3>誤り訂正符号</h3>


<p><q>人に誤っていると教えることと真実を与えることは別のことだ。</q></p>

<p>チェックサムと呼ばれる冗長化符号を付与してデータ通信することで、途中でデータが変更されたかどうかを検知する。</p>

<h3>パターン認識</h3>


<p>パターン認識は、2段階で動作する。訓練データを処理してクラスの特徴を抽出する「学習（訓練）段階」。新しい分類ラベルの付いていないデータを分類する「分類段階」である。</p>

<h3>データ圧縮</h3>


<p>まとまったデータをより短いシンボルで表すロスなし圧縮と、データの一部を取り除いてしまうロス有り圧縮がある。</p>

<h3>データベース</h3>


<p>「to-doリスト」、「仮想テーブル」、「準備してからコミット」。</p>

<h3>デジタル署名</h3>


<p>デジタル署名はあなたが誰か他人に送るものに署名するのではなく、誰か他人があなたにモノを送る前にその送ろうとしているモノに署名をする。</p>

<p>例えば、プログラムをダウンロード、実行しようとするたびに、ウェブブラウザはプログラムがデジタル署名を持っているかどうかをチェックし、その署名が有効かどうかをチェックする。</p>

<p>デジタル署名が提供するのは、機密性ではなく文章の真正性である。</p>

<h3>決定不能性</h3>


<p>他のプログラムを分析し、そのなかに含まれていてプログラムをクラッシュさせる原因になるようなバグをすべて見つけ出すプログラムは書けない。</p>]]></content>
  </entry>
  
</feed>
