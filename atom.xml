<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[それはBooks]]></title>
  <link href="http://hamasyou.com/atom.xml" rel="self"/>
  <link href="http://hamasyou.com/"/>
  <updated>2014-04-02T19:46:07+09:00</updated>
  <id>http://hamasyou.com/</id>
  <author>
    <name><![CDATA[hamasyou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Titanium] Alloyのmeasurementの実装がイケてなかったので再実装した]]></title>
    <link href="http://hamasyou.com/blog/2014/04/02/titanium-alloy-measurement/"/>
    <updated>2014-04-02T18:17:44+09:00</updated>
    <id>http://hamasyou.com/blog/2014/04/02/titanium-alloy-measurement/</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcelerator.com/titanium/" rel="external nofollow" title="Titanium">Titanium</a> Alloy の <code>measurement</code> がイケてない感じだったので再実装しました。</p>

<p><code>measurement</code> には <code>pxToDP</code> とか <code>dpToPX</code> とかの単位を変換するメソッドが用意されていますが、中身を見るとびっくりします。。</p>

<!-- more -->




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>alloy/measurement.js (alloy 1.3.1)</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">dpi</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">displayCaps</span><span class="p">.</span><span class="nx">dpi</span><span class="p">,</span> <span class="nx">density</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">displayCaps</span><span class="p">.</span><span class="nx">density</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">exports</span><span class="p">.</span><span class="nx">dpToPX</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">val</span> <span class="o">*</span> <span class="p">(</span><span class="s2">"high"</span> <span class="o">===</span> <span class="nx">density</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">exports</span><span class="p">.</span><span class="nx">pxToDP</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">val</span> <span class="o">/</span> <span class="p">(</span><span class="s2">"high"</span> <span class="o">===</span> <span class="nx">density</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">exports</span><span class="p">.</span><span class="nx">pointPXToDP</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pt</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">x</span><span class="o">:</span> <span class="nx">exports</span><span class="p">.</span><span class="nx">pxToDP</span><span class="p">(</span><span class="nx">pt</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span>
</span><span class="line">        <span class="nx">y</span><span class="o">:</span> <span class="nx">exports</span><span class="p">.</span><span class="nx">pxToDP</span><span class="p">(</span><span class="nx">pt</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>これ、イケてなさすぎでしょ。。</p>

<p><code>Ti.UI.convertUnits</code> を使って次のように実装しなおしました。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>lib/unit.js</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">currentUnit</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Properties</span><span class="p">.</span><span class="nx">getString</span><span class="p">(</span><span class="s1">'ti.ui.defaultunit'</span><span class="p">,</span> <span class="s1">'system'</span><span class="p">);</span>
</span><span class="line"><span class="nx">currentUnit</span> <span class="o">=</span> <span class="p">(</span><span class="nx">currentUnit</span> <span class="o">===</span> <span class="s1">'system'</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="nx">OS_IOS</span><span class="p">)</span> <span class="o">?</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span> <span class="o">:</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span> <span class="o">:</span> <span class="nx">currentUnit</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">convert</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">fromUnit</span><span class="p">,</span> <span class="nx">toUnit</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">convertUnits</span><span class="p">(</span><span class="s1">''</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="o">+</span> <span class="nx">fromUnit</span><span class="p">,</span> <span class="nx">toUnit</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">dpToPX</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">convert</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span><span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">dpToSystem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">convert</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span><span class="p">,</span> <span class="nx">currentUnit</span><span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">pxToDP</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">convert</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span><span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">pxToSystem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">convert</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span><span class="p">,</span> <span class="nx">currentUnit</span><span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">systemToPX</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">currentUnit</span> <span class="o">===</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">dpToPX</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">currentUnit</span> <span class="o">===</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">convert</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">convert</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">systemToDP</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">currentUnit</span> <span class="o">===</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">convert</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">currentUnit</span> <span class="o">===</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">pxToDP</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">convert</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">convertToPX</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">valStr</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">convertUnits</span><span class="p">(</span><span class="nx">valStr</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_PX</span><span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">convertToDP</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">valStr</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">convertUnits</span><span class="p">(</span><span class="nx">valStr</span><span class="p">,</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">UNIT_DIP</span><span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">convertToSystem</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">valStr</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">convertUnits</span><span class="p">(</span><span class="nx">valStr</span><span class="p">,</span> <span class="nx">currentUnit</span><span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">pointPXToDP</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pt</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">x</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">pxToDP</span><span class="p">(</span><span class="nx">pt</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span>
</span><span class="line">            <span class="nx">y</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">pxToDP</span><span class="p">(</span><span class="nx">pt</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>使い方と結果はこちら。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>sample.js</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">unit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'unit'</span><span class="p">);</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'----- iOS -----'</span><span class="p">);</span>
</span><span class="line"><span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">'Ti.Platform.displayCaps.density: '</span> <span class="o">+</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">displayCaps</span><span class="p">.</span><span class="nx">density</span><span class="p">);</span>
</span><span class="line"><span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">'Ti.Platform.displayCaps.dpi: '</span> <span class="o">+</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">displayCaps</span><span class="p">.</span><span class="nx">dpi</span><span class="p">);</span>
</span><span class="line"><span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">'Ti.Platform.displayCaps.platformHeight: '</span> <span class="o">+</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">displayCaps</span><span class="p">.</span><span class="nx">platformHeight</span><span class="p">);</span>
</span><span class="line"><span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">'Ti.Platform.displayCaps.platformWidth: '</span> <span class="o">+</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">displayCaps</span><span class="p">.</span><span class="nx">platformWidth</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">osname</span> <span class="o">===</span> <span class="s1">'android'</span><span class="p">){</span>
</span><span class="line">  <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">'Ti.Platform.displayCaps.xdpi: '</span> <span class="o">+</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">displayCaps</span><span class="p">.</span><span class="nx">xdpi</span><span class="p">);</span>
</span><span class="line">  <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">'Ti.Platform.displayCaps.ydpi: '</span> <span class="o">+</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">displayCaps</span><span class="p">.</span><span class="nx">ydpi</span><span class="p">);</span>
</span><span class="line">  <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">'Ti.Platform.displayCaps.logicalDensityFactor: '</span> <span class="o">+</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">displayCaps</span><span class="p">.</span><span class="nx">logicalDensityFactor</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'dpToPX: '</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">.</span><span class="nx">dpToPX</span><span class="p">(</span><span class="mi">130</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'dpToSystem: '</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">.</span><span class="nx">dpToSystem</span><span class="p">(</span><span class="mi">130</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'pxToDP: '</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">.</span><span class="nx">pxToDP</span><span class="p">(</span><span class="mi">130</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'pxToSystem: '</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">.</span><span class="nx">pxToSystem</span><span class="p">(</span><span class="mi">130</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'systemToPX: '</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">.</span><span class="nx">systemToPX</span><span class="p">(</span><span class="mi">130</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'systemToDP: '</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">.</span><span class="nx">systemToDP</span><span class="p">(</span><span class="mi">130</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'convertToPX: '</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">.</span><span class="nx">convertToPX</span><span class="p">(</span><span class="s1">'130dp'</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'convertToDP: '</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">.</span><span class="nx">convertToDP</span><span class="p">(</span><span class="s1">'130dp'</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'convertToSystem: '</span> <span class="o">+</span> <span class="nx">unit</span><span class="p">.</span><span class="nx">convertToSystem</span><span class="p">(</span><span class="s1">'130dp'</span><span class="p">));</span>
</span><span class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'-----'</span><span class="p">);</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span></pre></td>
<td class="code"><pre><code><span class="line output">[INFO] :   ----- iPhone OS -----
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.density: high
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.dpi: 320
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.platformHeight: 568
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.platformWidth: 320
</span><span class="line output">[INFO] :   dpToPX: 260
</span><span class="line output">[INFO] :   dpToSystem: 130
</span><span class="line output">[INFO] :   pxToDP: 65
</span><span class="line output">[INFO] :   pxToSystem: 65
</span><span class="line output">[INFO] :   systemToPX: 260
</span><span class="line output">[INFO] :   systemToDP: 130
</span><span class="line output">[INFO] :   convertToPX: 260
</span><span class="line output">[INFO] :   convertToDP: 130
</span><span class="line output">[INFO] :   convertToSystem: 130
</span><span class="line output">[INFO] :   -----
</span><span class="line output">
</span><span class="line output">[INFO] :   ----- android -----
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.density: xhigh
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.dpi: 320
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.platformHeight: 1280
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.platformWidth: 720
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.xdpi: 345.0566101074219
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.ydpi: 342.2315673828125
</span><span class="line output">[INFO] :   Ti.Platform.displayCaps.logicalDensityFactor: 2
</span><span class="line output">[INFO] :   dpToPX: 260
</span><span class="line output">[INFO] :   dpToSystem: 260
</span><span class="line output">[INFO] :   pxToDP: 65
</span><span class="line output">[INFO] :   pxToSystem: 130
</span><span class="line output">[INFO] :   systemToPX: 130
</span><span class="line output">[INFO] :   systemToDP: 65
</span><span class="line output">[INFO] :   convertToPX: 260
</span><span class="line output">[INFO] :   convertToDP: 130
</span><span class="line output">[INFO] :   convertToSystem: 260
</span><span class="line output">[INFO] :   -----</span></code></pre></td>
</tr></table></div></div>
        </div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インフラデザインパターン ~安定稼動に導く127の設計方式]]></title>
    <link href="http://hamasyou.com/blog/2014/03/10/4774162868/"/>
    <updated>2014-03-10T18:43:56+09:00</updated>
    <id>http://hamasyou.com/blog/2014/03/10/4774162868/</id>
    <content type="html"><![CDATA[<p>本書は、インフラの技術者たちがあみ出した設計方式を概念化・抽象化して名前をつけたインフラのデザインパターンを紹介するものです。
プロジェクトマネージャ、システム企画や導入の意思決定を行う人、インフラの設計や評価を行う人のために技術書になっています。</p>

<p>本書の特徴として次の点があげられます。</p>

<ul>
<li>全てのデザインパターンは特定の製品に依存していない</li>
<li>要件定義や基本設計などの上流工程で使うことを意識して構成されている</li>
</ul>
<p>本書には、パターンの特徴を把握しやすいように簡潔な図がそれぞれのパターンに用いられています。
プロジェクトに必要な要点からインフラの設計が導き出せるようになっています。</p>

<p>127のパターンが挙げられていて、インフラのパターンにそんなにあるのがびっくりですが、一通りパターンを抑えるだけでも結構なボリュームになります。
が、それだけインフラ設計は細かく、大事なポイントを抑える必要があるということです。
インフラ設計を担当するエンジニアにオススメの一冊です。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ムームードメイン+GitHub Pagesで独自ドメインを使う方法]]></title>
    <link href="http://hamasyou.com/blog/2014/03/05/github-pages-custom-domain/"/>
    <updated>2014-03-05T12:02:07+09:00</updated>
    <id>http://hamasyou.com/blog/2014/03/05/github-pages-custom-domain/</id>
    <content type="html"><![CDATA[<p>GitHub Pages を Naked Domain（サブドメインをつけない hamasyou.com みたいなやつ）で運用する場合の手順です。</p>

<p><span class="small">GitHub Pages をサブドメイン（www.hamasyou.com みたいなやつ）で運用する場合は、DNS サービスの <strong>CNAME</strong> を <strong>hamasyou.github.io</strong> に設定すれば問題ないのでこの記事は読む必要がありません。</span></p>

<p>hamasyou.com はムームードメインで取得していますので、ムームードメインを元に説明します。が、ムームードメインに限らず、Apex Alias を設定できない DNS サービスを使うときの参考にしてください。
なんでこんな事をメモするかというと、GitHub Pages を独自ドメインで運用する際に Apex Alias を使わないと <strong class="text-danger">302 Found</strong> のステータスコードが返ってきて、SEO 的に嫌なのと <em>Facebook のシェアで404 Not Found が出てしまう</em> からです。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://subosito.com/fix-302-redirect-response-for-github-hosted-site" rel="external nofollow" title="Fix 302 Redirect Response For GitHub Hosted Site">Fix 302 Redirect Response For GitHub Hosted Site</a></p>

<p>別に 302 Found がでても構わないっていうひとは GitHub Pages のヘルプを参考にしてやってみてください。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages" rel="external nofollow" title="Setting up a custom domain with Pages - GitHub Help">Setting up a custom domain with Pages - GitHub Help</a></p>

<!-- more -->


<h3>やりたいこと</h3>

<p>やりたいことの整理です。</p>

<ul>
<li>GitHub Pages を hamasyou.com で運用する</li>
<li>www.hamasyou.com を hamasyou.com の CNAME に設定する</li>
</ul>
<p>hamasyou.com の A レコードを GitHub Pages の IP に設定するだけだと CDN が効かないし、ステータスコードが302で返ってくることがあるのでちゃんと200で返して欲しい。</p>

<h3>1. 独自ドメインを取得する</h3>

<p>まず、独自ドメインを持っていない場合はドメインを取得しましょう。
僕はすでにムームードメインでドメインを取得していたのでアレですが、もしこれからドメインを取るなら、Apex Alias が使えるサービスで取ったほうがいいかもしれません。
そのほうが幸せになれるかも。</p>

<h3>2. Apex Alias を設定する</h3>

<p>ムームードメインのように、Apex Alias も使えないし、Naked Domain に CNAME を割り当てられないサービスの場合は、レンタル DNS サービスを利用します。
<strong class="text-danger">Gehirn DNS</strong> がドメイン2つまで無料で使えるので、今回はここを利用しました。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://www.gehirn.jp/dns.html" rel="external nofollow" title="Gehirn DNS">Gehirn DNS</a></p>

<p>アカウント登録をして、ドメインの認証をまずは行います。TXT レコードを使って認証していきます。出てくるダイアログをよく読めば出来ると思います。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://support.gehirn.jp/manual/dns/domain/" rel="external nofollow" title="独自ドメインを追加する方法 - Gehirn DNS">独自ドメインを追加する方法 - Gehirn DNS</a></p>

<p>次に、Apex Alias を登録します。手順は次のサイトを見れば分かると思います。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://news.gehirn.jp/information/325/" rel="external nofollow" title="Gehirn DNS、ホスト名無しのドメインにエイリアス機能をサポート - ゲヒルンニュース">Gehirn DNS、ホスト名無しのドメインにエイリアス機能をサポート - ゲヒルンニュース</a></p>

<p>コントロールパネルで CNAME も登録します。www.hamasyou.com を hamasyou.com に向けたいので、そのように設定します。
レコードの登録のさいは、末尾に <code>.</code> が付くので忘れずに。</p>

<p><img src="http://hamasyou.com/images/2014-03-05-github-pages-custom-domain-01.png" alt="登録後01" class="img-thumbnail" title="登録後01"></p>

<p><img src="http://hamasyou.com/images/2014-03-05-github-pages-custom-domain-02.png" alt="登録後02" class="img-thumbnail" title="登録後02"></p>

<p>Gehirn での設定は以上です。つぎは、ムームードメインのネームサーバの設定をします。</p>

<h3>3. ネームサーバを変更する</h3>

<p>ムームードメインの管理画面に入って、「ネームサーバ設定」で「弊社サービス以外のネームサーバ」を選びます。
ここで、Gehirn のネームサーバの情報を入力します。</p>

<p><img src="http://hamasyou.com/images/2014-03-05-github-pages-custom-domain-03.png" alt="ネームサーバの設定" class="img-thumbnail" title="ネームサーバの設定"></p>

<p>これで、hamasyou.com の DNS レコードが Gehirn のネームサーバで参照されて、Alias レコードで hamasyou.github.io を見に行くようになります。
Apex Alias を設定することで、GitHub Pages の CDN が利用出来るようになるので、参照のパフォーマンスもちょっとはあがるはず！らしいです。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webサービスをスタートアップする10の手順（Rails編）]]></title>
    <link href="http://hamasyou.com/blog/2014/03/05/rails-webservice-startup/"/>
    <updated>2014-03-05T09:44:22+09:00</updated>
    <id>http://hamasyou.com/blog/2014/03/05/rails-webservice-startup/</id>
    <content type="html"><![CDATA[<p>アイデアを思いついたときに Web サービスを作ってスタートアップする手順メモです。Rails 編としていますが、たぶん別のバージョンは書かないでしょう。。</p>

<p>手順は思いついた順（というか、前に作ったサービスの手順）で書いていますので、抜け漏れとかあると思いますがコメントあればよろしくおねがいします。</p>

<p>ちなみに、最近作ったサービスはこちら。よかったら使ってみてください。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://booboo.mountposition.co.jp/" rel="external nofollow" title="Web上のメディアのすべてにヤジを飛ばすサービス - 野次る">Web上のメディアのすべてにヤジを飛ばすサービス - 野次る</a></p>

<!-- more -->


<h2>1. アイデアを揉む</h2>

<p>思いついたアイデアをすぐに実現するのはいいことだと思いますが、世の中では2パターンで語られていますね。</p>

<ol>
<li>思いついたサービスは誰のためのサービス？</li>
<li>そのサービスは自分で使う？</li>
</ol>
<p>誰のためのサービスかという問は、すなわちどんな問題を解決するサービスなのか？ってことです。
「スタートアップが失敗する理由」みたいなキーワードで Google 先生に聞けばイロイロ教えてくれるかと。</p>

<p>まぁでも、<strong class="text-danger">思いついたサービスを自分で使ってみたいと思えるのなら創るべき</strong> でしょう！僕はそう思います。</p>

<h2>2. プロジェクトを作成する</h2>

<p>さて、実際にサービスをつくっていきます。まずは Rails のプロジェクトを作らねばなりません。
プロジェクトのスタートアップ手順は Qiita にメモを残していますのでそっちを参照してみてください。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://qiita.com/hamasyou/items/dc319f399fc851e4ba42" rel="external nofollow" title="Rails4プロジェクトを新規で立ち上げる時の設定メモ - Qiita">Rails4プロジェクトを新規で立ち上げる時の設定メモ - Qiita</a></p>

<h2>3. デザインを決める</h2>

<p>デザインとか多少でもかじった人なんかはすんなり行くんでしょうけど、デザインだけはまるでダメっていう人もいると思います。
そんなときは、<a href="http://getbootstrap.com/" rel="external nofollow" title="Bootstrap">Bootstrap</a> 使いましょう。</p>

<p>Bootstrap も Sass が提供されるようになりましたので、Sass ファイルをダウンロードしておくと、後でデザインを弄りたい時とか便利です。
ダウンロードした Sass ファイルは <code>vendor/assets</code> に入れましょう。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">- vendor
</span><span class="line">  - assets
</span><span class="line">    - fonts
</span><span class="line">      - bootstrap
</span><span class="line">        glyphicons-halflings-regular.eot
</span><span class="line">        glyphicons-halflings-regular.svg
</span><span class="line">        glyphicons-halflings-regular.ttf
</span><span class="line">        glyphicons-halflings-regular.woff
</span><span class="line">    - javascripts
</span><span class="line">      - bootstrap
</span><span class="line">        affix.js
</span><span class="line">        alert.js
</span><span class="line">        button.js
</span><span class="line">        carousel.js
</span><span class="line">        collapse.js
</span><span class="line">        dropdown.js
</span><span class="line">        modal.js
</span><span class="line">        popover.js
</span><span class="line">        scrollspy.js
</span><span class="line">        tab.js
</span><span class="line">        tooltip.js
</span><span class="line">        transition.js
</span><span class="line">      bootstrap.js
</span><span class="line">    - stylesheets
</span><span class="line">      - bootstrap
</span><span class="line">        _alerts.scss
</span><span class="line">        _badges.scss
</span><span class="line">        _breadcrumbs.scss
</span><span class="line">        _button-groups.scss
</span><span class="line">        _buttons.scss
</span><span class="line">        _carousel.scss
</span><span class="line">        _close.scss
</span><span class="line">        _code.scss
</span><span class="line">        _component-animations.scss
</span><span class="line">        _dropdowns.scss
</span><span class="line">        _forms.scss
</span><span class="line">        _glyphicons.scss
</span><span class="line">        _grid.scss
</span><span class="line">        _input-groups.scss
</span><span class="line">        _jumbotron.scss
</span><span class="line">        _labels.scss
</span><span class="line">        _list-group.scss
</span><span class="line">        _media.scss
</span><span class="line">        _mixins.scss
</span><span class="line">        _modals.scss
</span><span class="line">        _navbar.scss
</span><span class="line">        _navs.scss
</span><span class="line">        _normalize.scss
</span><span class="line">        _pager.scss
</span><span class="line">        _pagination.scss
</span><span class="line">        _panels.scss
</span><span class="line">        _popovers.scss
</span><span class="line">        _print.scss
</span><span class="line">        _progress-bars.scss
</span><span class="line">        _responsive-utilities.scss
</span><span class="line">        _scaffolding.scss
</span><span class="line">        _tables.scss
</span><span class="line">        _theme.scss
</span><span class="line">        _thumbnails.scss
</span><span class="line">        _tooltip.scss
</span><span class="line">        _type.scss
</span><span class="line">        _utilities.scss
</span><span class="line">        _variables.scss
</span><span class="line">        _wells.scss
</span><span class="line">        bootstrap.scss</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>app/assets/javascripts/application.js</code> と <code>app/assets/stylesheets/application.css</code> に bootstrap のファイルを追加します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/assets/javascripts/application.js</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="js"><span class="line"><span class="c1">//= require jquery</span>
</span><span class="line"><span class="c1">//= require jquery_ujs</span>
</span><span class="line"><span class="c1">//= require bootstrap</span>
</span><span class="line"><span class="c1">//= require_self</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/assets/stylesheets/application.css</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="css"><span class="line"><span class="c">/*</span>
</span><span class="line"><span class="c"> *= require bootstrap</span>
</span><span class="line"><span class="c"> *= require_self</span>
</span><span class="line"><span class="c"> */</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>僕は <code>require tree</code> は削除しちゃう派で、require が必要なファイルは自分で記述するようにしています。<code>fonts</code> フォルダは <code>asset pipeline</code> に含まれないので明示的に <code>config/application.rb</code> で読み込むようにします。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#...</span>
</span><span class="line"><span class="k">module</span> <span class="nn">YourApplication</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class="line">    <span class="c1"># ...</span>
</span><span class="line">    <span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">paths</span> <span class="o">&lt;&lt;</span> <span class="s2">"</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/vendor/assets/fonts"</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>4. テンプレートに BOILERPLATE を使う</h2>

<p>デザインと順番が前後するかもしれませんが、最近はレスポンシブデザインがはやりですよね。
HTML5 でレスポンシブ対応となるとキマリ文句みたいなテンプレートがあるわけなんですが、いちいち調べる物めんどくさいので僕は <strong class="text-danger">BOILERPLATE</strong> を使っています。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://html5boilerplate.com/" rel="external nofollow" title="HTML5 ★ BOILERPLATE - The web’s most popular front-end template">HTML5 ★ BOILERPLATE - The web’s most popular front-end template</a></p>

<p>BOILERPLATE をダウンロードして、プロジェクトディレクトリに配置します。<code>index.html</code> の中身をごっそり <code>app/views/layouts/application.html.erb</code> にいれこみます。
このとき、<code>csrf_meta_tags</code> を間違って消さないように注意です。</p>

<p>BOILERPLATE を見ると分かるように、最近は JavaScript ファイルを body 部の最後に置くようになっています。DOM の構築をブロックしないようにするためですね。
で、Rails では <code>turbolinks</code> っていう機能があって、まぁいろいろとこの辺がバッティングしてウザイので、<code>turbolinks</code> を使わないようにします。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://qiita.com/kazz187/items/12737363d62b9c91993c" rel="external nofollow" title="Rails 4 で turbolinks をオフにする方法 - Qiita">Rails 4 で turbolinks をオフにする方法 - Qiita</a></p>

<h2>5. レイアウトファイルをいじる（SEO対策）</h2>

<p>プログラムを書き始める前に、先にデザイン回りを調整しておくのがいいかと思います。</p>

<p>いろいろ追加すると大体こんな感じのテンプレートになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
</pre></td>
<td class="code"><pre><code class="html+erb"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="c">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span>
</span><span class="line"><span class="c">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span>
</span><span class="line"><span class="c">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span>
</span><span class="line"><span class="c">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="nt">&lt;html</span> <span class="na">class=</span><span class="s">"no-js"</span><span class="nt">&gt;</span> <span class="c">&lt;!--&lt;![endif]--&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;title&gt;</span><span class="cp">&lt;%=</span> <span class="n">content_for?</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="p">?</span> <span class="s2">"</span><span class="si">#{</span><span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="si">}</span><span class="s2"> - "</span> <span class="p">:</span> <span class="s1">''</span> <span class="cp">%&gt;&lt;%=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">app_name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/title&gt;</span>
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span><span class="nt">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"keywords"</span> <span class="na">content=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">content_for?</span><span class="p">(</span><span class="ss">:keywords</span><span class="p">)</span> <span class="p">?</span> <span class="s2">"</span><span class="si">#{</span><span class="k">yield</span><span class="p">(</span><span class="ss">:keywords</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span> <span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="no">Settings</span><span class="o">.</span><span class="n">keywords</span><span class="si">}</span><span class="s2">"</span> <span class="cp">%&gt;</span><span class="s">"</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"description"</span> <span class="na">content=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">content_for?</span><span class="p">(</span><span class="ss">:description</span><span class="p">)</span> <span class="p">?</span> <span class="s2">"</span><span class="si">#{</span><span class="k">yield</span><span class="p">(</span><span class="ss">:description</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span> <span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="no">Settings</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">"</span> <span class="cp">%&gt;</span><span class="s">"</span><span class="nt">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:title"</span> <span class="na">content=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">content_for?</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="p">?</span> <span class="s2">"</span><span class="si">#{</span><span class="k">yield</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="si">}</span><span class="s2"> - "</span> <span class="p">:</span> <span class="s1">''</span> <span class="cp">%&gt;&lt;%=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">app_name</span> <span class="cp">%&gt;</span><span class="s">"</span> <span class="nt">/&gt;</span>
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:type"</span> <span class="na">content=</span><span class="s">"article"</span> <span class="nt">/&gt;</span>
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:url"</span> <span class="na">content=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">request</span><span class="o">.</span><span class="n">url</span> <span class="cp">%&gt;</span><span class="s">"</span> <span class="nt">/&gt;</span>
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:site_name"</span> <span class="na">content=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">app_name</span> <span class="cp">%&gt;</span><span class="s">"</span> <span class="nt">/&gt;</span>
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"og:description"</span> <span class="na">content=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">content_for?</span><span class="p">(</span><span class="ss">:description</span><span class="p">)</span> <span class="p">?</span> <span class="s2">"</span><span class="si">#{</span><span class="k">yield</span><span class="p">(</span><span class="ss">:description</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span> <span class="p">:</span> <span class="s2">"</span><span class="si">#{</span><span class="no">Settings</span><span class="o">.</span><span class="n">description</span><span class="si">}</span><span class="s2">"</span> <span class="cp">%&gt;</span><span class="s">"</span> <span class="nt">/&gt;</span>
</span><span class="line"><span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">"fb:app_id"</span> <span class="na">content=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">facebook</span><span class="o">.</span><span class="n">app_id</span> <span class="cp">%&gt;</span><span class="s">"</span> <span class="nt">/&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span>    <span class="s2">"normalize"</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s2">"all"</span> <span class="cp">%&gt;</span>
</span><span class="line"><span class="cp">&lt;%=</span> <span class="n">stylesheet_link_tag</span>    <span class="s2">"application"</span><span class="p">,</span> <span class="ss">media</span><span class="p">:</span> <span class="s2">"all"</span> <span class="cp">%&gt;</span>
</span><span class="line"><span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s1">'modernizr-2.6.2.min'</span> <span class="cp">%&gt;</span>
</span><span class="line"><span class="cp">&lt;%=</span> <span class="n">csrf_meta_tags</span> <span class="cp">%&gt;</span>
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"navbar navbar-default"</span> <span class="na">role=</span><span class="s">"banner"</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"navbar-header"</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/"</span> <span class="na">class=</span><span class="s">"navbar-brand"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">app_name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/a&gt;</span>
</span><span class="line">      <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"navbar-toggle"</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">data-toggle=</span><span class="s">"collapse"</span> <span class="na">data-target=</span><span class="s">"#navbar-main"</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"icon-bar"</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class="line">        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"icon-bar"</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class="line">        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"icon-bar"</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class="line">      <span class="nt">&lt;/button&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"navbar-collapse collapse"</span> <span class="na">id=</span><span class="s">"navbar-main"</span> <span class="na">rel=</span><span class="s">"navigation"</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"nav navbar-nav"</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;li&gt;&lt;/li&gt;</span>
</span><span class="line">      <span class="nt">&lt;/ul&gt;</span>
</span><span class="line">    <span class="nt">&lt;/nav&gt;</span>
</span><span class="line">  <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/header&gt;</span>
</span><span class="line">
</span><span class="line"><span class="c">&lt;!--[if lt IE 7]&gt;</span>
</span><span class="line"><span class="c">    &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="http://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</span>
</span><span class="line"><span class="c">&lt;![endif]--&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span> <span class="na">role=</span><span class="s">"main"</span><span class="nt">&gt;</span>
</span><span class="line"><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;footer</span> <span class="na">role=</span><span class="s">"contentinfo"</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="ni">&amp;copy;</span> <span class="cp">&lt;%=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">year</span> <span class="cp">%&gt;</span> <span class="cp">&lt;%=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">copyright</span> <span class="cp">%&gt;</span>
</span><span class="line"><span class="nt">&lt;/footer&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="s2">"application"</span> <span class="cp">%&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>Settings</code> クラスは <code>rails_config</code> という gem を使った設定ファイルを読み込むものです。
<strong class="text-danger">SEO</strong> 対策系の <code>title</code> タグや <code>og</code> タグ周りの設定を意識したほうがいいです。</p>

<p>サイトマップの生成もここで検討しておいたほうがいいでしょう。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://morizyun.github.io/blog/meta-tags-sitemap-generator-rails-seo/" rel="external nofollow" title="meta-tagsとsitemap_generatorで始めるRails 4.0時代のSEO対策 - 酒と泪とRubyとRailsと">meta-tagsとsitemap_generatorで始めるRails 4.0時代のSEO対策 - 酒と泪とRubyとRailsと</a></p>

<h2>6. コア部分をつくり込む</h2>

<p>やっとプログラミング開始です。コア部分を作りこんでいきます。ここは気合が続く限り一気に作ったほうがいいと思います。
僕の場合は、サービス開発は結構集中力とやる気の持続がポイントになってくるので。</p>

<p>やる気の部分は結構重要で、1ヶ月とかかけて作るようだと案外あきちゃったりするんですよね。。エラー表示のところとかもちゃんとつくっていきましょう。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://qiita.com/hamasyou/items/22c50959490a3b52dbaf" rel="external nofollow" title="RailsでBootstrapを使ったときにフォームエラーをキレイに表示する方法 - Qiita">RailsでBootstrapを使ったときにフォームエラーをキレイに表示する方法 - Qiita</a></p>

<h2>7. 404ページと500ページを用意する</h2>

<p>コア部分ができたら、404ページと500ページを用意します。
Rails にはこの辺をうまく扱う方法がありますのでそれを使います。</p>

<p><code>config/routes.rb</code> の最後のルートに、次のルールを追加します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">match</span> <span class="s1">'*not_found'</span> <span class="o">=&gt;</span> <span class="s1">'application#render_404'</span><span class="p">,</span> <span class="ss">via</span><span class="p">:</span> <span class="ss">:all</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>規定のルールにマッチしないルートは、<code>application_controller#render_404</code> に飛ばされます。ここで404エラーの処理を記述します。
同じく、<code>application_controller</code> に500エラーをハンドリングする処理も記述します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/controllers/application_controller.rb`</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">protect_from_forgery</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:exception</span>
</span><span class="line">
</span><span class="line">  <span class="k">unless</span> <span class="no">Rails</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">consider_all_requests_local</span>
</span><span class="line">    <span class="n">rescue_from</span> <span class="no">Exception</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:render_500</span>
</span><span class="line">    <span class="n">rescue_from</span> <span class="ss">AbstractController</span><span class="p">:</span><span class="ss">:ActionNotFound</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:render_404</span>
</span><span class="line">    <span class="n">rescue_from</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:RoutingError</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:render_404</span>
</span><span class="line">    <span class="n">rescue_from</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordNotFound</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="ss">:render_404</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">render_404</span><span class="p">(</span><span class="n">exception</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">exception</span>
</span><span class="line">      <span class="n">logger</span><span class="o">.</span><span class="n">warn</span> <span class="s2">"Rendering 404 with exception: </span><span class="si">#{</span><span class="n">exception</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">"</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="n">render</span> <span class="ss">template</span><span class="p">:</span> <span class="s1">'errors/error_404'</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">404</span><span class="p">,</span> <span class="ss">layout</span><span class="p">:</span> <span class="s1">'application'</span><span class="p">,</span> <span class="n">content_type</span><span class="p">:</span> <span class="s1">'text/html'</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">render_500</span><span class="p">(</span><span class="n">exception</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">exception</span>
</span><span class="line">      <span class="n">logger</span><span class="o">.</span><span class="n">fatal</span> <span class="s2">"Rendering 500 with exception: </span><span class="si">#{</span><span class="n">exception</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">"</span>
</span><span class="line">      <span class="n">logger</span><span class="o">.</span><span class="n">fatal</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="s2">"</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> =&gt; </span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="s2">"</span> <span class="p">}</span>
</span><span class="line">      <span class="n">logger</span><span class="o">.</span><span class="n">fatal</span> <span class="n">exception</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class="line">      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">template</span><span class="p">:</span> <span class="s1">'errors/error_500'</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span> <span class="ss">layout</span><span class="p">:</span> <span class="s1">'application'</span><span class="p">,</span> <span class="n">content_type</span><span class="p">:</span> <span class="s1">'text/html'</span> <span class="p">}</span>
</span><span class="line">      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="ss">message</span><span class="p">:</span> <span class="n">exception</span><span class="o">.</span><span class="n">message</span><span class="p">},</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">500</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>app/views/errors</code> ディレクトリに <code>error_404.html.erb</code> と <code>error_500.html.erb</code> を作成して、それぞれ中身を記述します。</p>

<h2>8. ソーシャル流入用のボタン類と Google Analytics を配置する</h2>

<p>作ったサービスをユーザに宣伝してもらえるようにソーシャル系のボタンを用意するのを忘れないようにします。
また、Google Analytics も忘れないように設定します。
Facebook はアプリIDが必要になりますので別途登録してアプリIDを入手しておきます。Google Analytics も同じくですね。</p>

<p>ちなみに、ソーシャル系サービスはいろいろありますが、Facebook、Twitter、はてな、Google+、Pocket あたりを僕は抑えています。</p>

<p>ソーシャル系サービスで配布されている JavaScript を非同期で読み込むための JavaScript を作成します。
忘れずに <code>application.js</code> にも追加しておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/assets/javascripts/sharing.js.erb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td>
<td class="code"><pre><code class="js+erb"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">m</span><span class="p">){</span><span class="nx">i</span><span class="p">[</span><span class="s1">'GoogleAnalyticsObject'</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="nx">i</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">||</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line"><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">q</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">q</span><span class="o">||</span><span class="p">[]).</span><span class="nx">push</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)},</span><span class="nx">i</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">l</span><span class="o">=</span><span class="mi">1</span><span class="o">*</span><span class="k">new</span> <span class="nb">Date</span><span class="p">();</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">o</span><span class="p">),</span>
</span><span class="line"><span class="nx">m</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="nx">o</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">async</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">m</span><span class="p">)</span>
</span><span class="line"><span class="p">})(</span><span class="nb">window</span><span class="p">,</span><span class="nb">document</span><span class="p">,</span><span class="s1">'script'</span><span class="p">,</span><span class="s1">'//www.google-analytics.com/analytics.js'</span><span class="p">,</span><span class="s1">'ga'</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">ga</span><span class="p">(</span><span class="s1">'create'</span><span class="p">,</span> <span class="s1">'</span><span class="cp">&lt;%=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">google</span><span class="o">.</span><span class="n">analytics_tracking_id</span> <span class="cp">%&gt;</span><span class="s1">'</span><span class="p">,</span> <span class="s1">'hamasyou.com'</span><span class="p">);</span>
</span><span class="line"><span class="nx">ga</span><span class="p">(</span><span class="s1">'send'</span><span class="p">,</span> <span class="s1">'pageview'</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'script'</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">  <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">u</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">j</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
</span><span class="line">      <span class="nx">j</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">'text/javascript'</span><span class="p">;</span>
</span><span class="line">      <span class="nx">j</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">u</span><span class="p">;</span>
</span><span class="line">      <span class="nx">j</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span><span class="nx">j</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;}</span>
</span><span class="line">      <span class="nx">s</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="nx">s</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line">  <span class="nx">a</span><span class="p">(</span><span class="s1">'//platform.twitter.com/widgets.js'</span><span class="p">,</span> <span class="s1">'twitter-wjs'</span><span class="p">);</span>
</span><span class="line">  <span class="nx">a</span><span class="p">(</span><span class="s1">'//b.st-hatena.com/js/bookmark_button.js'</span><span class="p">,</span><span class="s1">'hatebu-js'</span><span class="p">);</span>
</span><span class="line">  <span class="nx">a</span><span class="p">(</span><span class="s1">'//apis.google.com/js/plusone.js'</span><span class="p">,</span><span class="s1">'plusone-js'</span><span class="p">);</span>
</span><span class="line">  <span class="nx">a</span><span class="p">(</span><span class="s1">'//connect.facebook.net/ja_JP/all.js#appId=</span><span class="cp">&lt;%=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">facebook</span><span class="o">.</span><span class="n">app_id</span> <span class="cp">%&gt;</span><span class="s1">&amp;xfbml=1'</span><span class="p">,</span><span class="s1">'facebook-jssdk'</span><span class="p">);</span>
</span><span class="line">  <span class="nx">a</span><span class="p">(</span><span class="s1">'//widgets.getpocket.com/v1/j/btn.js?v=1'</span><span class="p">,</span><span class="s1">'pocket-btn-js'</span><span class="p">);</span>
</span><span class="line"><span class="p">})(</span><span class="k">this</span><span class="p">,</span> <span class="nb">document</span><span class="p">);</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>ボタンを集めた部分テンプレートを用意します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/views/shared/_sharing.html.erb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td>
<td class="code"><pre><code class="html+erb"><span class="line"><span class="cp">&lt;%</span> <span class="n">cache</span> <span class="n">url</span> <span class="k">do</span> <span class="cp">%&gt;</span>
</span><span class="line">  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"sharing list-inline"</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"hatena"</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://b.hatena.ne.jp/entry/</span><span class="cp">&lt;%=</span> <span class="n">url</span> <span class="cp">%&gt;</span><span class="s">"</span>
</span><span class="line">         <span class="na">class=</span><span class="s">"hatena-bookmark-button"</span>
</span><span class="line">         <span class="na">rel=</span><span class="s">"nofollow"</span>
</span><span class="line">         <span class="na">data-hatena-bookmark-layout=</span><span class="s">"standard-balloon"</span>
</span><span class="line">      <span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"http://b.st-hatena.com/images/entry-button/button-only.gif"</span>
</span><span class="line">            <span class="na">alt=</span><span class="s">"Add to Hatena Bookmark"</span> <span class="nt">/&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;/li&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"fb-root"</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"facebook"</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fb-like"</span>
</span><span class="line">           <span class="na">data-share=</span><span class="s">"false"</span>
</span><span class="line">           <span class="na">data-layout=</span><span class="s">"button_count"</span>
</span><span class="line">           <span class="na">data-show-faces=</span><span class="s">"false"</span>
</span><span class="line">           <span class="na">data-font=</span><span class="s">"verdana"</span>
</span><span class="line">           <span class="na">data-href=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">url</span> <span class="cp">%&gt;</span><span class="s">"</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;/li&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"facebook_share"</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fb-share-button"</span>
</span><span class="line">           <span class="na">data-type=</span><span class="s">"button_count"</span>
</span><span class="line">           <span class="na">data-font=</span><span class="s">"verdana"</span>
</span><span class="line">           <span class="na">data-href=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">url</span> <span class="cp">%&gt;</span><span class="s">"</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;/li&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"twitter"</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://twitter.com/share"</span>
</span><span class="line">         <span class="na">class=</span><span class="s">"twitter-share-button"</span>
</span><span class="line">         <span class="na">rel=</span><span class="s">"nofollow"</span>
</span><span class="line">         <span class="na">data-url=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">url</span> <span class="cp">%&gt;</span><span class="s">"</span>
</span><span class="line">         <span class="na">data-via=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="no">Settings</span><span class="o">.</span><span class="n">twitter</span><span class="o">.</span><span class="n">data_via</span> <span class="cp">%&gt;</span><span class="s">"</span>
</span><span class="line">         <span class="na">data-counturl=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">url</span> <span class="cp">%&gt;</span><span class="s">"</span><span class="nt">&gt;</span>Tweet<span class="nt">&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;/li&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"googleplus"</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"g-plusone"</span>
</span><span class="line">           <span class="na">data-size=</span><span class="s">"medium"</span>
</span><span class="line">           <span class="na">data-href=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">url</span> <span class="cp">%&gt;</span><span class="s">"</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;/li&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"pocket"</span><span class="nt">&gt;</span>
</span><span class="line">      <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://getpocket.com/save"</span>
</span><span class="line">         <span class="na">class=</span><span class="s">"pocket-btn"</span> <span class="na">data-lang=</span><span class="s">"en"</span>
</span><span class="line">         <span class="na">data-save-url=</span><span class="s">"</span><span class="cp">&lt;%=</span> <span class="n">url</span> <span class="cp">%&gt;</span><span class="s">"</span>
</span><span class="line">         <span class="na">data-pocket-count=</span><span class="s">"horizontal"</span>
</span><span class="line">         <span class="na">data-pocket-align=</span><span class="s">"left"</span><span class="nt">&gt;</span>Pocket<span class="nt">&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;/li&gt;</span>
</span><span class="line">  <span class="nt">&lt;/ul&gt;</span>
</span><span class="line"><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>url</code> 変数は部分テンプレートを読み込むときに渡すシェアしたいページの URL です。最後に CSS も用意しておきます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/assets/stylesheets/sharging.css.scss</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td>
<td class="code"><pre><code class="scss"><span class="line"><span class="nc">.sharing</span> <span class="p">{</span>
</span><span class="line">  <span class="nt">li</span> <span class="p">{</span>
</span><span class="line">    <span class="na">height</span><span class="o">:</span> <span class="mi">23</span><span class="kt">px</span><span class="p">;</span>
</span><span class="line">    <span class="na">vertical-align</span><span class="o">:</span> <span class="no">bottom</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">li</span><span class="nc">.hatena</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">li</span><span class="nc">.twitter</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">li</span><span class="nc">.googleplus</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">li</span><span class="nc">.facebook</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nc">.fb_iframe_widget</span> <span class="o">&gt;</span> <span class="nt">span</span> <span class="p">{</span>
</span><span class="line">  <span class="na">vertical-align</span><span class="o">:</span> <span class="no">baseline</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">li</span><span class="nc">.facebook_share</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nn">#fb-root</span> <span class="p">{</span> <span class="na">display</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="nt">li</span><span class="nc">.pocket</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>ボタンの長さ等の調整が必要であれば、ここで調整します。<code>app/assets/stylesheets/application.css</code> に登録するのを忘れずに。</p>

<h2>9. SCM にプロジェクトを保存する</h2>

<p>ここまで来たら後はサーバに載っけて公開するだけですが、作ったプロジェクトはソースコードリポジトリに登録しておきましょう。
リポジトリサービスとしては <a href="https://github.com/" rel="external nofollow" title="GitHub">GitHub</a> が有名ですが、GitHub は無料で使う分には公開リポジトリしか作れません。
そこで、同じくリポジトリサービスで非公開リポジトリが作成できる <a href="https://bitbucket.org/" rel="external nofollow" title="BitBucket">BitBucket</a> を使うといいと思います。</p>

<h2>10. サービス公開用のサーバを用意する</h2>

<p>最後にサービス公開用のサーバを用意するわけですが、いきなり <a href="http://aws.amazon.com/jp/" rel="external nofollow" title="AWS">AWS</a> をつかうのもいいんですが AWS は個人で使うにはちょっとお高いんですよね。。
VPS を借りるなら <a href="http://vps.sakura.ad.jp/" rel="external nofollow" title="Sakura VPS">Sakura VPS</a> とかのほうが安くすみます。が、無料でサーバを利用したいのであれば <a href="https://www.heroku.com/%E2%80%8E" rel="external nofollow" title="Heroku">Heroku</a> がいいかと思います。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://morizyun.github.io/blog/heroku-rails4-postgresql-introduction/" rel="external nofollow" title="Rails4でheroku Pushまでの最短手順 [Haml/bootstrap 3.0/postgresql or MySQL] - 酒と泪とRubyとRailsと">Rails4でheroku Pushまでの最短手順 [Haml/bootstrap 3.0/postgresql or MySQL] - 酒と泪とRubyとRailsと</a></p>

<h2>サービスを大きくしていく</h2>

<p>サービスが軌道に乗ってきたら機能追加したり、独自ドメインをとったりしてサービスを大きくしていくといいと思います。</p>

<p>大体こんな感じで僕はいつもサービスを作っています。ちなみに、最近作ったサービスはこちら。よかったら使ってやってください。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://booboo.mountposition.co.jp/" rel="external nofollow" title="Web上のメディアのすべてにヤジを飛ばすサービス - 野次る">Web上のメディアのすべてにヤジを飛ばすサービス - 野次る</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サーバサイドJavaScript Node.js入門]]></title>
    <link href="http://hamasyou.com/blog/2014/03/04/4048703676/"/>
    <updated>2014-03-04T23:24:06+09:00</updated>
    <id>http://hamasyou.com/blog/2014/03/04/4048703676/</id>
    <content type="html"><![CDATA[<p>本書は、「<strong class="text-danger">Node</strong> って何？」という人から「Node の中身はどうなっているの？」を知りたい人のために幅広く網羅的に書かれています。</p>

<ol>
<li>Node の基本から順番に理解していきたい</li>
<li>Node を使ってすぐに Web アプリケーションを作ってみたい</li>
<li>Node の内部構造を理解したい</li>
</ol>
<p>これらのモデルケースに合う人にオススメの書籍です。</p>

<!-- more -->


<h1>おぼえがき</h1>

<h2>Node とはなにか？</h2>

<p><em>Node はプログラミング言語ではありません</em>。言語としては <strong class="text-danger">JavaScript</strong> を使います。
<em>Node は JavaScript ライブラリではありませんし、アプリケーションフレームワークでもありません</em>。</p>

<p>Node はスケーラビリティに優れた、Web アプリケーションを実行するためのサーバサイドのプラットフォームです。
特徴は、I/O 処理が非同期で行われプラットフォーム自体がサーバ機能を提供する方式であることです。</p>

<p>JavaScript で実現されたイベントループと非同期処理の仕組み、<strong class="text-danger">WebSocket</strong> との相性の良さ、V8 エンジン搭載などの技術的に優れた部分を持ち合わせています。
<em>Node は、従来の同期処理から決別し、ライブラリを含めてスレッドをブロックすることのない世界を作り上げました</em>。</p>

<h3>JavaScript である理由</h3>

<p>JavaScript ではスレッドライブラリが定義されておらず、多くの実装はシングルスレッドで動作します。また、イベントの仕組みをうまくつかって非同期処理を行います。
Node の世界にマッチさせるライブラリは非同期で動作しなければなりませんが、サーバサイドで JavaScript は今までほとんど使われてこなかったため、
サーバサイドのライブラリはゼロから作り上げる必要がありました。つまり、<em>過去の資産を気にすることなく非同期かつスレッドをブロックしない I/O を利用させることが可能でした</em>。</p>

<p>近年爆発的にユーザ数が増えると、<strong class="text-danger">C10K</strong> という問題が起こることがクローズアップされ始めました。
従来のアーキテクチャは、クライアントのアクセスに対して一つのスレッドを割り当てるマルチスレッドモデルで同時アクセスをさばいていました。
しかし、これではユーザ数が増えた際にスレッドを大量に生成しなければならず、この部分がボトルネックになるようになりました。</p>

<p>そこで、マルチスレッドモデルに対して、<strong class="text-danger">シングルスレッド+イベントループ</strong> により複数のクライアントをさばくというモデルがではじめました。
JavaScript はシングルスレッドモデルですし、イベントループの仕組みを使って非同期処理を行うようになっています。この C10K 問題に対する解として JavaScript はうってつけだったのです。</p>

<h3>Node とリアルタイムアプリケーション</h3>

<p>HTML5 が世に広まり始めると、その仕様の一部として策定されていた <strong class="text-danger">WebSocket</strong> プロトコルが注目されるようになってきました。（現在では HTML5 とは独立した仕様になっています。）</p>

<p>WebSocket は HTTP 通信とは異なり、接続を維持したまま通信することが前提のプロトコルです。接続確立時には HTTP をつかいますが、その後の通信では独自のプロトコルを使います。
そのため、WebSocket でリアルタイム通信を行おうとするとサーバ側も対応しなければならず、大掛かりになりがちでした。</p>

<p>Node はプログラム内にサーバ機能を実装可能であるという特徴から、WebSocket 用のモジュールが用意されました。
これらのモジュールを使うことで簡単に WebSocket を利用したアプリケーションが構築できるようになりました。</p>

<p>こうして、リアルタイム通信を行うなら Node という方程式が出来上がったのです。</p>

<h3>Node のプログラム</h3>

<p>Node はイベントループが回ることですべての処理をさばきます。Node のプログラムは <strong class="text-danger">必要なイベントハンドラを登録し、適切なタイミングでイベントを発生させる</strong> ことで成立しています。
これは、ブラウザ上の JavaScript とほとんど同じプログラムコードになります。</p>

<h2>モジュール</h2>

<p>Node のモジュールは JavaScript で記述されたファイルか、アドオンと呼ばれる C/C++ で記述されコンパイルされたファイルで構成されます。</p>

<p>Node では <strong class="text-danger">1つのファイルは必ず1つのモジュールに対応します</strong>。
あるファイルをモジュールとして利用可能にするには <code>module</code> オブジェクトか <code>exports</code> オブジェクトを使って必要な関数、オブジェクトを公開します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">funcA</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">funcB</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">funcB</span> <span class="o">=</span> <span class="nx">funcB</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// exports を外部公開オブジェクトとして定義する場合は慣例として次のように書く</span>
</span><span class="line"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">foo</span><span class="o">:</span> <span class="s1">'bar'</span><span class="p">,</span>
</span><span class="line">  <span class="nx">funcA</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>感想</h2>

<p>Node とはなにか？Node の仕組みを知りたい、Node を始めたいという人向けのタイトル通りの「入門」書だと思いました。
実際に使われているモジュールやフレームワークの説明なども入っているので、コレ一冊でとりあえず Node を始められるようになっています。
ここから始めて見て、壁にあたったら次の参考書を読んでみるという感じがいいんじゃないかと思います。</p>

<p>内容としては、プログラミング知識がある人（とくに JavaScript）なら、優しすぎず難しすぎずという感じです。</p>

<h2>目次</h2>

<ol>
<li>Node とは何か

<ol>
<li>非同期プログラミング</li>
<li>なぜ従来から非同期プログラミングが行われてこなかったのか</li>
<li>Node の誕生と既存の言語</li>
<li>JavaScript である理由</li>
<li>シングルスレッドの強み</li>
<li>Node とリアルタイムアプリケーション</li>
</ol>
</li>
<li>インストール

<ol>
<li>OS ごとのインストール方法</li>
<li>環境構築ツールを使う</li>
<li>npm を使ったパッケージのインストール</li>
</ol>
</li>
<li>開発環境

<ol>
<li>エディタ</li>
<li>IDE</li>
</ol>
</li>
<li>Node入門

<ol>
<li>Node コマンド</li>
<li>イベントループ</li>
<li>HTTP サーバ</li>
<li>イベントループの落とし穴</li>
<li>まとめ</li>
</ol>
</li>
<li>モジュール

<ol>
<li>モジュールの作り方</li>
<li>モジュールの使い方</li>
<li>モジュール活用</li>
</ol>
</li>
<li>イベント

<ol>
<li>Node とイベント駆動プログラミング</li>
<li>イベントの作成と利用</li>
<li>リスナ配列</li>
<li>特殊なイベント</li>
<li>シグナルとイベント</li>
<li>まとめ</li>
</ol>
</li>
<li>イベントループとprocess.nextTick()

<ol>
<li>Node のイベントループの仕組み</li>
<li>非同期イベントの生成</li>
<li>非同期コールバックの呼び出し</li>
</ol>
</li>
<li>ストリーム、バッファ、ファイルシステム

<ol>
<li>ストリーム</li>
<li>Buffer</li>
<li>ファイルシステム</li>
</ol>
</li>
<li>ソケット（TCP/UDP）

<ol>
<li>net モジュール</li>
<li>TCP サーバの概要</li>
<li>TCP クライアントの概要</li>
<li>TCP エコーサーバ・クライアントの実装</li>
<li>TCP と同期プロトコル</li>
<li>drain イベントを利用したデータ送信制御</li>
<li>TLS 通信の利用</li>
<li>OS のTCP 機能と直接関わるAPI</li>
<li>dgram モジュール</li>
</ol>
</li>
<li>HTTP/HTTPS

<ol>
<li>http モジュール</li>
<li>http.Server のエコーサーバの実装</li>
<li>HTTP RESTful サーバの実装</li>
<li>HTTP クライアントの概要</li>
<li>https モジュール</li>
<li>url モジュール</li>
<li>querystring モジュール</li>
</ol>
</li>
<li>Domain

<ol>
<li>domain モジュールの概要</li>
<li>domain モジュールのクラス</li>
<li>ドメインへのオブジェクトと関数の結びつけ</li>
<li>Implicit Binding</li>
<li>Explicit Binding</li>
<li>ドメインを利用したエラーページの表示</li>
</ol>
</li>
<li>ユニットテスト

<ol>
<li>はじめに</li>
<li>assert</li>
<li>should</li>
<li>chai</li>
<li>mocha</li>
<li>vows</li>
</ol>
</li>
<li>デバッグ

<ol>
<li>デバッガの基本機能</li>
<li>組み込みデバッガを利用したCUI でのデバッグ</li>
<li>Node Inspector を利用したGUI でのデバッグ</li>
<li>組み込みデバッガとNode Inspector の使い分け</li>
<li>IDE でのデバッグ</li>
<li>その他のサードパーティのデバッグモジュール</li>
</ol>
</li>
<li>実践編導入

<ol>
<li>実践編で扱う技術について</li>
<li>共通して扱うモジュール</li>
</ol>
</li>
<li>Express入門

<ol>
<li>はじめに</li>
<li>Express の導入</li>
<li>Connect のアーキテクチャ</li>
<li>Express のアーキテクチャ</li>
</ol>
</li>
<li>Express を用いたフォーラムアプリケーションの作成

<ol>
<li>はじめに</li>
<li>ルーティング</li>
<li>データの永続化</li>
<li>その他のリクエストメソッド</li>
<li>ビューの改善</li>
<li>エラー処理</li>
<li>ミドルウェア</li>
<li>ユーザー登録とログインの実装</li>
<li>セッション</li>
<li>ルートミドルウェア</li>
<li>remember me の実装</li>
<li>Tips</li>
<li>終わりに</li>
</ol>
</li>
<li>Socket.IO を使ったファイル共有アプリケーションの作成

<ol>
<li>はじめに</li>
<li>準備</li>
<li>ユーザー名の指定</li>
<li>チャンネルの実装</li>
<li>ファイルの送信</li>
<li>ファイルの受信</li>
<li>ファイルの永続化</li>
<li>ファイルの配信</li>
<li>終わりに</li>
</ol>
</li>
<li>外部API との連携

<ol>
<li>ハッシュタグストリーミング</li>
<li>今一緒にいる人を一括フォロー</li>
<li>終わりに</li>
</ol>
</li>
<li>Node はどう作られているか

<ol>
<li>JavaScript とNode</li>
<li>C10K とNode</li>
<li>Web アプリケーションアーキテクチャとしてのNode</li>
</ol>
</li>
<li>非同期プログラミングの改善

<ol>
<li>はじめに</li>
<li>コールバック関数の問題</li>
<li>コールバック関数の改善</li>
<li>まとめ</li>
</ol>
</li>
<li>アドオンの作成

<ol>
<li>概要</li>
<li>シンプルなHelloWorld のサンプル（オブジェクトの作成）</li>
<li>メソッドを持つアドオンのサンプル</li>
</ol>
</li>
<li>npm パッケージ

<ol>
<li>チュートリアル</li>
<li>パッケージの公開</li>
<li>パッケージの詳細</li>
<li>まとめ</li>
</ol>
</li>
<li>スケーラビリティ

<ol>
<li>複数プロセスの起動</li>
<li>複数サーバでのスケールアウト</li>
<li>終わりに</li>
</ol>
</li>
<li>運用

<ol>
<li>Apache やNginx との連携</li>
<li>環境</li>
</ol>
</li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[canonicalなURLってなにがいいんだろう？]]></title>
    <link href="http://hamasyou.com/blog/2014/03/04/canonical-url/"/>
    <updated>2014-03-04T12:27:08+09:00</updated>
    <id>http://hamasyou.com/blog/2014/03/04/canonical-url/</id>
    <content type="html"><![CDATA[<p>ちょっと疑問に思ったこと。Web の SEO をやっていると <strong class="text-danger">canonical</strong> ページっていうのを聞いたことがあるとおもいます。
canonical ページとは、Google 先生曰く「<em>複数の類似した内容のページの中で優先されるページです。</em>」だそうです。
僕は <strong class="text-danger">URL の正規化</strong> に使うものだという認識ですが、間違ってませんよね？？</p>

<p>で、この canonical URL ってどう付けたらいいんだろう？っていう疑問です。</p>

<!-- more -->


<h2>canonical URL ってどっち？</h2>

<h3>RESTful リソースの URL</h3>

<p>Web サービスやっていると、<strong class="text-danger">RESTful</strong> な URL 設計大事！ってなりますよね。
Rails なんかをやっていると、ルーティングが自動的に RESTful になってて便利です。こんな感じ。</p>

<pre><code class="console">
       hypermedia GET    /hypermedia(.:format)            hypermedia#index
                  POST   /hypermedia(.:format)            hypermedia#create
  new_hypermedium GET    /hypermedia/new(.:format)        hypermedia#new
 edit_hypermedium GET    /hypermedia/:id/edit(.:format)   hypermedia#edit
      hypermedium GET    /hypermedia/:id(.:format)        hypermedia#show
                  PATCH  /hypermedia/:id(.:format)        hypermedia#update
                  PUT    /hypermedia/:id(.:format)        hypermedia#update
                  DELETE /hypermedia/:id(.:format)        hypermedia#destroy
</code></pre>

<p>こういうルーティングだと、<code>http://example.com/hypermedia/1</code> みたいな感じでリソースにアクセスできます。
で、例えば、作ってる Web サービスで、<code>hypermedia/1</code> リソースの別名で、hypermedia の URL を使ってもアクセスできるようにしたい。こんな感じで。</p>

<pre><code class="console">http://example.com/hamasyou.com
</code></pre>

<p>ルーティングに</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">get</span> <span class="s1">'*url'</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">'hypermedia#show'</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="kp">false</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>を追加しておくと <code>hypermedia#show</code> の中で <code>params[:url]</code> から <code>hamasyou.com</code> っていう値をとれるようになります。
なので、こういう URL に別名付けてちょっとクールな感じの Web サービスを気取ってみたくなりました。</p>

<h3>どっちがいいの？</h3>

<p>で、本題ですが、こういうリソースの別名扱いの URL があるとき、canonical URL として指定するのは</p>

<ol>
<li><code>/hypermedia/:id</code></li>
<li><code>*url</code></li>
</ol>
<p>のどっちがいいんだろう？という疑問です。HTML 的に書くとこんな感じ。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"canonical"</span> <span class="na">href=</span><span class="s">"http://example.com/hypermedia/1"</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"canonical"</span> <span class="na">href=</span><span class="s">"http://example.com/hamasyou.com"</span><span class="nt">&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>どっちでもいい。好みの問題って感じもしなくもないですが、皆さんどっちを選ぶのが多いんでしょう？</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ハッカーと画家 コンピュータ時代の創造者たち]]></title>
    <link href="http://hamasyou.com/blog/2014/03/01/4274065979/"/>
    <updated>2014-03-01T03:57:29+09:00</updated>
    <id>http://hamasyou.com/blog/2014/03/01/4274065979/</id>
    <content type="html"><![CDATA[<blockquote>
<p>本書は、コンピュータの世界で今何が起こっているかを、より広い世界に向けて説明しょうとする試みだ。プログラマのためだけの本ではない。例えば第6章では、どうしたら裕福になれるかを論じている。一般の人々にとってもこれは興味ある話題だろう。</p>
<footer><strong>はじめに</strong></footer>
</blockquote>


<p>本書は、コンピュータの世界に生きる人への <strong class="text-danger">金言集</strong>、あるいは <strong class="text-danger">道しるべ</strong> になる言葉であふれています。
世界は今やコンピュータが身近な存在になっています。そして、コンピュータというのはハッカーがつくっています。
ハッカーの頭の中を理解することで、世界がどのような方向に向かっているのか、そういうことを考えさせてくれるのが本書です。</p>

<!-- more -->




<blockquote>
<p>『ハッカーと画家』は、ハッカーの世界とその住人の動機を探る。明解で考え抜かれた散文を、歴史上の例で彩りながら、ポール・グレアムは読者を「知的な未開の西部」へと誘う。</p>
<footer><strong>本書カバー</strong></footer>
</blockquote>


<h2>おぼえがきメモ</h2>

<h3>腕のよいプログラマは仕事が速い</h3>

<p>プログラマの仕事というのは、集中して一気に素早く行うもの。
ゆっくりと念入りに作り上げるものは確かにアイデアを精密に実現したものになるだろうが、おそらくそのアイデアは間違っている。
<em>遅く念入りな仕事は早過ぎる最適化</em> だ。
プロトタイプを速く仕上げて、新しいアイデアを得て行くほうがよい。
<strong class="text-danger">価値は新しいものにある</strong>。最初に何かを作り出したいと思うなら速くやることは重要だ。</p>

<h3>美しいものを創る最善の方法</h3>

<p>それは、すでにあるものに微妙な改良を加えたり、すでにある考え方をすこしだけ新しい方法で組み合わせたりすることだ。
日本ではそれを <strong class="text-danger">守破離（しゅはり）</strong> と言ったりする。</p>

<p>よいソフトウェアを書くには、ユーザがどれだけ何も知らないかを理解する必要がある。
同じようによいソースコードを書くには一目で内容が分かるべきである。</p>

<blockquote>
<p>プログラムは、人々がそれを読むために書かれるべきである。<br>たまたま、それが計算機で実行できるにすぎない。</p>
<footer><strong>『計算機プログラムの構造と解釈』</strong> <cite><a href="http://www.amazon.co.jp/gp/product/489471163X?ie=UTF8&amp;camp=247&amp;creativeASIN=489471163X&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="www.amazon.co.jp/gp/product/…">www.amazon.co.jp/gp/product/…</a></cite></footer>
</blockquote>


<h3>お金は富じゃない</h3>

<p>富とはもっと根本的なものだ。私たちが欲しがるもの、食物、衣服、住居、車、道具、旅行、そういうものだ。
お金を持っていなくても、何かを命令すれば全部やってくれる機会があればお金なんていらないし、南極のど真ん中で100億円もっていても仕方がない。
<em>お金は省略記法に過ぎない</em>。<strong class="text-danger">ほとんどのビジネスがやっていることは富を生み出すこと</strong> だ。人々が欲しがることをやるんだ。</p>

<h3>困難な方を選ぶ</h3>

<p>「階段を駆け上がれ」</p>

<p>もし君が小さく非力な男で、巨大で太ったいじめっ子に追いかけられているとしたら、上に逃げる？下に逃げる？
上に逃げた方がきっといい。いじめっ子はおそらくあなたと同じくらい速く階段を駆け下りることができる。
でも駆け上がるときはその体重が負荷になるだろう。もちろん、君だって駆け上がるのは苦しい。でも相手のほうがもっと苦しいはずだ。</p>

<p>企業の選択、ソフトウェアの選択を迫られたとき、困難度に比例した価値があったとすれば、困難な方を選ぶべきだ。
競争相手、ましてや大手は、寄り困難な土俵で私たちを追いかけるのに苦労するだろう。</p>

<p>攻撃は最大の防御になる。<strong class="text-danger">難しい問題を選ぶことから始め、決断が必要な場面では常に難しい方をえらべばいい</strong>。</p>

<h3>センス</h3>

<p>どうやったら良いものが作れる？センスは個人の好みだというのは論争を避けるにはいい方法だ。でも、それは真実じゃない。
センスはデザイン力と言い換えられるのかもしれない。別に絵だけのことをデザインというのではないけど、美（良いデザイン）とは何かを考えることはセンスを鍛えることになる。</p>

<ul>
<li>良いデザインは単純である</li>
<li>良いデザインは永遠である</li>
<li>良いデザインは正しい問題を解決する</li>
<li>良いデザインは想像力を喚起する</li>
<li>良いデザインはしばしばちょっと滑稽だ</li>
<li>良いデザインは難しい</li>
<li>良いデザインは簡単に見える</li>
<li>良いデザインは対称性を使う</li>
<li>良いデザインは自然に似る</li>
<li>良いデザインは再デザインだ</li>
<li>良いデザインは模倣する</li>
<li>良いデザインはしばしば奇妙だ</li>
<li>良いデザインは集団で生起する</li>
<li>良いデザインはしばしば大胆だ</li>
</ul>
<h3>素晴らしいハッカー</h3>

<p>素晴らしいハッカーっていうのは集まる傾向がある。ハッカーは道具にこだわる。仕事場にもこだわる。
ハッカーは面白いことが大好きだ。面白いことってなんだろう？難しいこと？誰もやったことのないこと？馬鹿みたいなこと？
たぶん、何が面白いかを感じるところが、ほんとうの意味でのセンスなんじゃないかな。</p>

<p>「普通のやつらの上を行け」</p>

<h2>感想</h2>

<p>ポール・グレアムのエッセイはやっぱり力強いです。訳者の方がすごいのかもしれませんが、すごくすっきりと言いたいことが頭に入ってきます。
何かを変えたい、何かの後押しが欲しい、何か新しい視点を取り入れたい。そういう時にポール・グレアムのエッセイはとても参考になります。</p>

<p>プログラマやハッカーに関するエッセイ集では他にも『<a href="http://www.amazon.co.jp/gp/product/4274067939?ie=UTF8&amp;camp=247&amp;creativeASIN=4274067939&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="情熱プログラマー ソフトウェア開発者の幸せな生き方">情熱プログラマー ソフトウェア開発者の幸せな生き方</a>』
『<a href="http://www.amazon.co.jp/gp/product/4274066304?ie=UTF8&amp;camp=247&amp;creativeASIN=4274066304&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="Joel on Software">Joel on Software</a>』
『<a href="http://www.amazon.co.jp/gp/product/4798118923?ie=UTF8&amp;camp=247&amp;creativeASIN=4798118923&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="More Joel on Software">More Joel on Software</a>』なんていうのもあります。
どれもオススメです。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonメモ]]></title>
    <link href="http://hamasyou.com/blog/2014/02/25/python/"/>
    <updated>2014-02-25T15:43:02+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/25/python/</id>
    <content type="html"><![CDATA[<p>プログラミング言語「<strong class="text-danger">Python</strong>」のメモです。v.2.5 のメモのなので最新だと違うかも。。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=FAFAFA&amp;IS2=1&amp;bg1=FAFAFA&amp;fc1=666666&amp;lc1=3399F3&amp;t=sorehabooks-22&amp;o=9&amp;p=8&amp;l=as1&amp;m=amazon&amp;f=ifr&amp;ref=tf_til&amp;asins=4873113938" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<!-- more -->


<h3>シーケンス</h3>

<p>シーケンスとは、オブジェクトを一定の順序に並べたものです。シーケンスでは要素となるオブジェクトの順序は常に変わりません。シーケンスには、<em>文字列</em>、<em>リスト</em>、<em>タプル</em> などがあります。</p>

<p>シーケンスに対して行える操作があります。要素の位置を指定して取り出す <strong class="text-danger">インデクシング</strong>、要素を範囲で取得する <strong class="text-danger">スライシング</strong> があります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td>
<td class="code"><pre><code class="python"><span class="line"><span class="nb">str</span> <span class="o">=</span> <span class="s">'Spam'</span>
</span><span class="line"><span class="nb">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>   <span class="c"># S</span>
</span><span class="line"><span class="nb">str</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c"># m</span>
</span><span class="line"><span class="nb">str</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span> <span class="c"># pa</span>
</span><span class="line"><span class="nb">str</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>  <span class="c"># pam</span>
</span><span class="line"><span class="nb">str</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span>  <span class="c"># Spa</span>
</span><span class="line"><span class="nb">str</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c"># Spa</span>
</span><span class="line"><span class="nb">str</span><span class="p">[:]</span>   <span class="c"># Spam</span>
</span><span class="line">
</span><span class="line"><span class="nb">str</span> <span class="o">=</span> <span class="s">'abcdefghij'</span>
</span><span class="line"><span class="nb">str</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">9</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>  <span class="c"># bdfh</span>
</span><span class="line"><span class="nb">str</span><span class="p">[</span><span class="mi">5</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c"># fedc</span>
</span><span class="line"><span class="nb">str</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>   <span class="c"># jihgfedcba</span>
</span><span class="line">
</span><span class="line"><span class="nb">len</span><span class="p">(</span><span class="s">'abc'</span><span class="p">)</span>      <span class="c"># 3</span>
</span><span class="line"><span class="nb">len</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>  <span class="c"># 4</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>リスト内包表記</h3>

<p>リスト内包表記はシーケンスに属する要素のそれぞれに同じ演算を行うことができる表記法です。リスト内包表記は最終的にリストを作成します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="python"><span class="line"><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class="line">          <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
</span><span class="line">          <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class="line"><span class="n">col2</span> <span class="o">=</span> <span class="p">[</span><span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">]</span>
</span><span class="line"><span class="n">col2</span>
</span><span class="line"><span class="c"># [2, 5, 8]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>タプル</h3>

<p><strong class="text-danger">タプル</strong> はリストと似ていますが、要素を変更することができません。タプルはカッコで作成します。<em>要素が一つの場合は、要素の後にカンマをつけなければいけません</em>。
タプルは <em>オブジェクトの集合</em>、リストは <em>データ構造</em> と使い分けをするらしいです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="python"><span class="line"><span class="nb">tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="nb">tuple</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class="line"><span class="c"># TypeError: 'tuple' object does not support item assignment</span>
</span><span class="line"><span class="nb">tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>ヘルプを調べる</h3>

<p>組み込み関数の <code>dir</code> を使うと、オブジェクトの全属性のリストが手に入ります。また、<code>help</code> 関数を使うとメソッドのヘルプ情報を出力可能です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="python"><span class="line"><span class="nb">dir</span><span class="p">(</span><span class="s">'string'</span><span class="p">)</span>
</span><span class="line"><span class="c"># ['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']</span>
</span><span class="line"><span class="n">help</span><span class="p">(</span><span class="s">'string'</span><span class="o">.</span><span class="n">index</span><span class="p">)</span>
</span><span class="line"><span class="c"># Help on built-in function index:</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># index(...)</span>
</span><span class="line"><span class="c">#     S.index(sub [,start [,end]]) -&gt; int</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c">#     Like S.find() but raise ValueError when the substring is not found.</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>文字列</h3>

<p><em>Python ではシングルクォートとダブルクォートは同じ意味を持ちます</em>。なので、他の言語のように、ダブルクォートの場合だけエスケープシーケンスが効くということはありません。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="python"><span class="line"><span class="k">print</span> <span class="s">'a</span><span class="se">\n</span><span class="s">b</span><span class="se">\t</span><span class="s">c'</span>
</span><span class="line"><span class="c"># a</span>
</span><span class="line"><span class="c"># b   c</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>リスト操作</h3>

<p>Python のリストは <code>[]</code> を使って作ります。他の言語の配列操作と同じ処理は基本的にできます。Python 特有の操作だなと思ったものだけメモ。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="python"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c"># 特定の要素が含まれているかどうかの確認</span>
</span><span class="line"><span class="mi">3</span> <span class="ow">in</span> <span class="n">a</span>  <span class="c"># =&gt; True</span>
</span><span class="line"><span class="mi">6</span> <span class="ow">in</span> <span class="n">a</span>  <span class="c"># =&gt; False</span>
</span><span class="line">
</span><span class="line"><span class="c"># リスト内包表記</span>
</span><span class="line"><span class="p">[</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">a</span><span class="p">]</span> <span class="c"># =&gt; [1, 4, 9, 16, 25]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>ステートメント、構文に関する注意点</h3>

<h4>コロンを忘れない</h4>

<p>複合ステートメント（if、while、for などの最初の行）の末尾にはかならず <code>:</code> をつけます。</p>

<h4>トップレベルのコードはインデントしない</h4>

<p>トップレベルコードはかならず左端から書き始めます。</p>

<h4>
<code>while</code> や <code>range</code> よりも、単純な <code>for</code> を使う</h4>

<p>シーケンスを扱う場合は、できるだけ単純な <code>for</code> （<code>for x in seq:</code>）を使うようにします。</p>

<h4>オブジェクトの上書きを行う関数は値を返さない</h4>

<p><code>list.append</code> や <code>list.sort</code> などのオブジェクトを上書きするような関数は値を戻しません。<code>None</code> を返すようにします。</p>

<h3>変数のスコープ</h3>

<p>Python の変数のスコープは、「ローカルスコープ」「グローバルスコープ」「ビルトインスコープ」があります。
関数内で定義された変数は「ローカルスコープ」に所属します。</p>

<p>関数の引数で渡された変数は参照渡しになります。変数の代入では元のオブジェクトは変更されませんが、オブジェクトの上書きは影響を及ぼします。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サードパーティJavaScript]]></title>
    <link href="http://hamasyou.com/blog/2014/02/23/third-party-javascript/"/>
    <updated>2014-02-23T17:47:39+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/23/third-party-javascript/</id>
    <content type="html"><![CDATA[<p>サードパーティ JavaScript とは <em>異なる Web アドレスから配信される、独立したクライアントコード</em> のことを意味します。
例えばソーシャルウィジェットやアナリティクス用のトラッカーがそうです。
本書はこのサードパーティ JavaScript をどのように開発するとよいかについて書かれています。</p>

<p>サードパーティ JavaScript には様々な難しいポイントがあります。</p>

<ul>
<li>動的なスクリプト読み込み</li>
<li>サードパーティ Cookie の保存と読み込み</li>
<li>HTTP / HTTPS を使ったサーバとの通信</li>
</ul>
<p>多くの人に使われる JavaScript を開発するには、<strong class="text-danger">数多くの落とし穴や難関を乗り越えなければなりません</strong>。
本書はこういった落とし穴や難関に対する解決策を手順を追って説明してくれます。</p>

<p>本書の著者の一人は <a href="http://disqus.com/" rel="external nofollow" title="Disqus">Disqus</a> という Web サイトに即席のコメントシステムを導入することができる JavaScript アプリケーションを開発しています。
実際に世界中で使われているアプリケーションの経験を元に書かれているので説得力がありますし、「こんな事にも注意しないといけなかったのか！」といった目からウロコな内容も盛りだくさんでおすすめです。</p>

<p>本書を読み終わると「<span class="lead"><strong>IE 無くなったらいいのに！</strong></span>」って絶対に思います。そして「<span class="lead"><strong>iframe すげーな。使えるやつだ</strong></span>」って思います（笑</p>

<!-- more -->


<p>以下、おぼえがきとメモです。</p>

<p><nav id="toc" role="navigation"></nav></p>

<h2>サードパーティ JavaScript 入門</h2>

<p>サードパーティ JavaScript の例には次のようなものがあります。</p>

<ul>
<li>埋め込みウィジェット</li>
<li>分析と計測</li>
<li>Web サービス API のラッパー</li>
</ul>
<h3>サードパーティ JavaScript 開発が難しい理由</h3>

<h4>未知のコンテキスト</h4>

<p>JavaScript が読み込まれたときに、読み込まれた先（パブリッシャ）のページの環境がどのようになっているかがわかりません。
JavaScript の読み込まれる位置が <code>&lt;head&gt;</code> タグだったり、<code>&lt;body&gt;</code> タグの一番最後かもしれません。<code>&lt;head&gt;</code> タグがない可能性もあります。
<strong class="text-danger">ブラウザに依存するような状況に依存したコードは書くべきではありません</strong>。</p>

<p>ウィジェットを開発しているのであれば、正しく表示されるかも問題になります。
表示されるページの CSS に干渉してしまうようなスタイルの定義も問題になります。</p>

<p>共通して言えることは、サードパーティ JavaScript は外部の環境に依存するべきではないし、<strong class="text-danger">外部の環境を壊すようなことはあってはならない</strong> ということです。</p>

<h4>共有されている JavaScript 環境</h4>

<p>Web 環境では、JavaScript が実行される環境はグローバルな環境が一つしかありません。グローバル環境を汚さないようにしなければいけませんし、他の JavaScript に壊されることがないように防衛する必要もあります。</p>

<h4>ブラウザによるクロスドメイン制限</h4>

<p>ブラウザの同一生成元ポリシーによって、<code>XmlHttpRequest</code> は表示しているページと異なるドメインへアクセスするのを妨げられてしまいます。また、サードパーティ Cookie の保存や読み込みも制限していることが普通です。</p>

<h2>開発の足場</h2>

<h3>複数のドメインをシミュレートする開発環境</h3>

<p>クロスドメインの問題はかなり厄介な問題ですので、開発時点から複数ドメインをシミュレートするのは役にたちます。
OS の <code>hosts</code> ファイルを編集して、localhost の エイリアスを二つ用意するだけでこの環境が手に入ります。</p>

<pre><code class="plain hosts">127.0.0.1 publisher.dev
127.0.0.1 widget.dev
</code></pre>

<p><em>「.dev」のような存在しないトップレベルドメインを使う方が、実際に存在する Web サイトのアドレスを差してしまう問題がないので便利</em> です。</p>

<h3>スクリプトを読み込むスニペット</h3>

<p>パブリッシャのページに最初のスクリプトを読み込むスニペットを用意します。スニペットを提供する方法は2つあります。</p>

<ul>
<li>「ブロッキング」を行うタイプの <code>script</code> タグによる読み込み</li>
<li>非同期でスクリプトを読み込むタイプ</li>
</ul>
<h4>ブロッキング読み込み</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://camerastock.com/widget.js?product=1234"</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h4>ノンブロッキング読み込み</h4>

<p>上のようなタグは、そのスクリプトが読み込まれるまでブラウザの処理をとめてしまいます。そのため、このようなスクリプトは <code>&lt;body&gt;</code> タグの最後におくことや、<code>defer</code> 属性、<code>async</code> 属性を使うことで回避できます。
<code>defer</code> 属性、<code>async</code> 属性をスクリプトタグに指定することで、そのスクリプトが文書のコンテンツを生成しない（<code>document.write</code> を使わない）のでページブロッキングをしなくても完全にダウンロードが可能であるとブラウザに伝えることができます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">defer</span> <span class="na">src=</span><span class="s">"http://camerastock.com/widget.js?product=1234"</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">async</span> <span class="na">src=</span><span class="s">"http://camerastock.com/widget.js?product=1234"</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<dl>
<dt>defer 属性</dt>
<dd>
<code>defer</code> 属性が指定されたスクリプトは、<strong>ページが完全に解析された後</strong> に実行が開始されます。</dd>
<dt>async 属性</dt>
<dd>
<code>async</code> 属性が指定されたスクリプトは、<strong>ダウンロードが完了したすぐ直後</strong> から実行が開始されます。</dd>
</dl>
<p>JavaScript を使って DOM 上に <code>script</code> 要素を動的に生成することでも、<code>async</code> 属性と同じ挙動でスクリプトを読み込ませることができます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>非同期のスクリプト読み込み</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script&gt;</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">node</span>     <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'script'</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">      <span class="nx">script</span>   <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">script</span><span class="p">.</span><span class="nx">src</span>   <span class="o">=</span> <span class="s1">'http://camerastock.com/widget.js?product=1234'</span><span class="p">;</span>
</span><span class="line">  <span class="nx">script</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">  <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">script</span><span class="p">,</span> <span class="nx">node</span><span class="p">);</span>
</span><span class="line"><span class="p">})();</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>最初のスクリプトファイル</h3>

<p>最初の JavaScript ファイルの中身はこんな感じになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">Stork</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">Stork</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="nx">Stork</span><span class="p">;</span>
</span><span class="line"><span class="p">})(</span><span class="nb">window</span><span class="p">);</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>一番外側の <code>Stork</code> はアプリケーションをカプセル化するための名前空間オブジェクトです。<code>window</code> と <code>undefined</code> を引数に取っています。これは、<em>よく使う変数をローカル変数として定義することで、JavaScript のミニファイアが働くようになり変数名を短くすることができる</em> からです。
また、<code>undefined</code> はオリジナルの <code>undefined</code> が他の環境によって書き換えられていても問題ないようにするためのテクニックになります。この二つは、<em>JavaScript ライブラリの作者が非常によく使うテクニック</em> になります。</p>

<h3>loadScript 関数</h3>

<p>外部の JavaScript ライブラリを使いたい場合は、パブリッシャにそのスクリプトを読み込んでもらうようにするのはナンセンスです。
パブリッシャに依存ライブラリを追加してもらうのでは、依存ライブラリに変更が入った際にパブリッシャに変更を依頼しなければならなくなります。</p>

<p><em>サードパーティ JavaScript の開発者は依存ライブラリは外部に依存しない形で利用するようにするのが求められます</em>。次のコードは非同期の JavaScript ローダ関数です。必要なスクリプトの読み込みが完了したら、引数の <code>callback</code> 関数を呼び出します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">loadScript</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">node</span>   <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'script'</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">      <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">script</span><span class="p">.</span><span class="nx">src</span>   <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span><span class="line">  <span class="nx">script</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">  <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">script</span><span class="p">,</span> <span class="nx">node</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">readyState</span> <span class="o">=</span> <span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">readyState</span> <span class="o">||</span> <span class="sr">/complete|loaded/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">callback</span><span class="p">();</span>
</span><span class="line">      <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>このように、必要なライブラリは、アプリケーションが実行する前に読み込んでおくようにします。</p>

<h4>ライブラリの衝突に注意</h4>

<p>jQuery のようなよく使われるライブラリをこの方法で読み込む際には、すでに存在するオブジェクトと衝突しないように注意しなければなりません。
衝突を防ぐには <strong class="text-danger">名前空間</strong> を使います。jQuery の場合には衝突を避ける <code>noConflict</code> が用意されているので、これを使います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">Stork</span> <span class="o">=</span> <span class="nx">Stork</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">Stork</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nx">Stork</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">noConflict</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>外部ライブラリを使う場合には、既に読み込まれていても衝突しないように注意する必要があります。</p>

<h2>HTML と CSS のレンダリング</h2>

<h3>スタイルを調整する方法</h3>

<p>HTML にスタイルを追加で当てる方法には3つの基本的な方法が考えられます。</p>

<ol>
<li>HTML にインラインでスタイルを当てる</li>
<li>関連する CSS ファイルを別途動的に読み込む</li>
<li>JavaScript にスタイルシートのルールを埋め込む</li>
</ol>
<h4>1. インラインスタイル</h4>

<p>インラインスタイルは他の要素のスタイルと干渉する心配がありません。デメリットは一般の Web サイトでインラインスタイルを使うべきでない理由と同じになります。</p>

<h4>2. CSS ファイルをロードする</h4>

<p>CSS ファイルを動的にロードする方法は、JavaScript を動的にロードする方法とほとんど同じになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">loadStylesheet</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'script'</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">      <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'link'</span><span class="p">);</span>
</span><span class="line">  <span class="nx">link</span><span class="p">.</span><span class="nx">rel</span>  <span class="o">=</span> <span class="s1">'stylesheet'</span><span class="p">;</span>
</span><span class="line">  <span class="nx">link</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">'text/css'</span><span class="p">;</span>
</span><span class="line">  <span class="nx">link</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="nx">node</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">link</span><span class="p">,</span> <span class="nx">node</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>link</code> タグは <code>rel</code> 属性と <code>type</code> 属性はどちらも必須の属性になります。
CSS が読み込まれたタイミングを知りたい場合には、少し変わった方法が必要になります。ブラウザによっては、<code>link</code> タグは <code>script</code> タグのように読み込みが終わったタイミングで <code>load</code> イベントを発生させない場合があるからです。
CSS が読み込まれたかどうかをチェックするには、要素にスタイルが当たったかどうかを定期的にチェックする必要があります。</p>

<blockquote><p>JavaScript やその他のデータを読み込むためのライブラリである Yepnope.js では、document.styleSheets を使って新しく挿入されたスタイルシートをスキャンする方法をとっている。</p></blockquote>


<h5>JavaScript で要素の色を調べるときは注意！</h5>

<p><strong class="text-danger">JavaScript で要素の色を調べるときは注意が必要です</strong>。<em>廃止予定のマイクロソフトのアクセサはオリジナルの16進数の値を返します</em>。<em>W3C のアクセサは16進数の値を RGB 表現に変換して返します</em>。</p>

<h4>3. CSS を JavaScript 中に埋め込む</h4>

<p>JavaScript の文字列に CSS を含めてしまう方法です。</p>

<h3>防衛的な HTML と CSS</h3>

<p>サードパーティ CSS においては、名前空間 (prefix) をつけるようにするとよいです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="css"><span class="line"><span class="nc">.stork-container</span> <span class="p">{</span> <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h4>CSS 優先順位</h4>

<p>CSS が優先的に当たるルールは次のとおりです。</p>

<ol>
<li>インラインのスタイル(style=“…”)</li>
<li>ID</li>
<li>クラス、属性および擬似クラス(:forcus, :hover)</li>
<li>要素(div, span など)、擬似要素(:before, :after)</li>
</ol>
<p>ただし、<code>!important</code> というキーワードでタグ付けされたプロパティは優先順位が最も高くなります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>!important の例</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="css"><span class="line"><span class="nc">.stork-price</span> <span class="p">{</span>
</span><span class="line">  <span class="k">font-size</span><span class="o">:</span>       <span class="m">11px</span>  <span class="cp">!important</span><span class="p">;</span>
</span><span class="line">  <span class="k">color</span><span class="o">:</span>           <span class="m">#888</span>  <span class="cp">!important</span><span class="p">;</span>
</span><span class="line">  <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span>  <span class="cp">!important</span><span class="p">;</span>
</span><span class="line">  <span class="k">display</span><span class="o">:</span>         <span class="k">block</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>ブラウザはスコアシステムを使ってどのルールが優先されるかを計算しています。</p>

<table>
<thead><tr>
<th> セレクタ / ルールタイプ  </th>
<th> スコア (a, b, c, d) </th>
</tr></thead>
<tbody>
<tr>
<td> インラインの style 属性  </td>
<td> 1, 0, 0, 0 </td>
</tr>
<tr>
<td> ID                       </td>
<td> 0, 1, 0, 0 </td>
</tr>
<tr>
<td> クラス、擬似クラス、属性 </td>
<td> 0, 0, 1, 0 </td>
</tr>
<tr>
<td> 要素、擬似要素           </td>
<td> 0, 0, 0, 1 </td>
</tr>
</tbody>
</table>
<p>スコアは <code>a &gt; b</code>、<code>b &gt; c</code>、<code>c &gt; d</code> のように価値が高くなります。(1, 0, 0, 0) は (0, 100, 0, 0) よりも優先されるということです。</p>

<ul>
<li>
<code>.stork-container</code> (0,0,1,0 - クラスセレクタ1つ)</li>
<li>
<code>.stork-container span</code> (0,0,1,1 - クラスセレクタ1つ、要素セレクタ1つ)</li>
<li>
<code>.stork-container .strok-msg</code> (0, 0, 2, 0 - クラスセレクタ2つ)</li>
</ul>
<h4>CSS を過剰に指定すれば優先度は高くなる</h4>

<p>パブリッシャのスタイルよりも優先的にスタイルを当てるための簡単な方法は、過剰にルールを指定することです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"stork-main"</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"stork-container"</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"stork-product"</span><span class="nt">&gt;</span>Mikon E90 Digital SLR<span class="nt">&lt;/h3&gt;</span>
</span><span class="line">    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"http://camerastork.com/img/products/1337-small.png"</span> <span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"stork-price"</span><span class="nt">&gt;</span>$599<span class="nt">&lt;/p&gt;</span>
</span><span class="line">    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"stork-rating"</span><span class="nt">&gt;</span>4.3/5.0 <span class="ni">&amp;bull;</span> 176 Reviews<span class="nt">&lt;/p&gt;</span>
</span><span class="line">  <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="css"><span class="line"><span class="nf">#stork-main</span> <span class="nf">#stork-container</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span><span class="line"><span class="nf">#stork-main</span> <span class="nf">#stork-container</span> <span class="nc">.stork-product</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span><span class="line"><span class="nf">#stork-main</span> <span class="nf">#stork-container</span> <span class="nc">.stork-price</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>コンテンツを iframe に埋め込む</h3>

<p><em>パブリッシャのスタイルルールによる影響を受けずにスタイルを設定する方法は、<code>iframe</code> を使うこと</em> です。</p>

<h4>src なし iframe</h4>

<p><code>src</code> 属性を指定しない <code>iframe</code> を作る場合、独立したウィンドウと DOM 環境を有しているという点で強力な効果があります。そして、<strong class="text-danger">親ページで実行されているスクリプトは直接それらのオブジェクトにアクセスが可能</strong> です。
<code>iframe</code> はブラウザによって非同期的に処理されるため、<code>document.write</code> のようなブロッキングが発生する処理を <code>iframe</code> の中で行ってもブラウザが親ページを処理するのを妨げることはありません。
ただし1つ注意点は、<em>親ページの <code>onload</code> イベントはブロッキングしてしまう</em> 点です。これは、<code>iframe</code> のレンダリングが完了したあとで、<code>document.close()</code> を呼び出すことで <code>onload</code> を強制的に発生させることで回避できます。</p>

<h4>外部 iframe</h4>

<p><code>iframe</code> のコンテンツが外部から提供されている場合には <em>ブラウザは親ページでホストされているスクリプトがそのコンテンツにアクセスすることを許可しません</em>。</p>

<h2>サーバとの通信</h2>

<p>サードパーティアプリケーションでは、<strong class="text-danger">クロスドメイン</strong> の問題を扱わなければなりません。クロスドメイン対応には基本的なテクニックがあります。</p>

<ul>
<li>JSONP</li>
<li>サブドメインプロキシ</li>
<li>クロスオリジンリソース共有 (CORS)</li>
</ul>
<h3>AJAX とブラウザの同一生成元ポリシー (SOP)</h3>

<p>ブラウザは異なる生成元から配信されたドキュメントがそれぞれお互いに分離されることを保証するという、<strong class="text-danger">同一生成元ポリシー (SOP) </strong> を備えています。
これによって、ドキュメント上のスクリプトが他のドキュメントにアクセスできるのは <em>同じドメイン</em>、<em>同じポート</em>、<em>同じプロトコル</em> である場合に限ることになります。</p>

<p>すべてのブラウザが、<code>XMLHttpRequest</code>、<code>iframe</code>、それ以外のドキュメント間のメッセージのやり取りの方法についてこの同一生成元ポリシーを適用しています。</p>

<p>重要な点が1つあります。<strong class="text-danger">HTML の script 要素は SOP の適用を受けません</strong>。つまり、外部の JavaScript ファイルの読み込みは可能になっています。
ただし、<em>読み込まれた JavaScript はパブリッシャのコンテキストで実行されるということは注意が必要</em> です。
例えば、camerastork.com の widget.js を publisher.dev の index.html で読み込まれたとしても、widget.js は camerastork.com への <code>XmlHttpRequest</code> を開始できません。</p>

<h3>JSONP</h3>

<p>SOP は「HTML の script 要素はチェックの対象外」という重要な例外をもっています。この例外を使って、例えば次のような JSON データを返す URL を script 要素を使って読み込んでみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>http://thirdpartyjs.com/info.json</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="nt">"title"</span><span class="p">:</span> <span class="s2">"Third-party JavaScript"</span><span class="p">,</span>
</span><span class="line">  <span class="nt">"authors"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"Anton"</span><span class="p">,</span> <span class="s2">"Ben"</span><span class="p">],</span>
</span><span class="line">  <span class="nt">"publisher"</span><span class="p">:</span> <span class="s2">"Manning"</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://thirdpartyjs.com/info.json"</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>この読み込みはうまくいきます。ただし、問題は、info.json は JavaScript として実行されるということです。
info.json は JavaScript としては正しい構文ではありませんし、もし正しく JavaScript オブジェクトとして評価されたとしても、どこからも使われずに終わってしまいます。</p>

<p>そこで、info.json を次のように変更します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>http://thirdpartyjs.com/info.js</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">jsonResponse</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="s2">"title"</span><span class="o">:</span> <span class="s2">"Third-party JavaScript"</span><span class="p">,</span>
</span><span class="line">  <span class="s2">"authors"</span><span class="o">:</span> <span class="p">[</span><span class="s2">"Anton"</span><span class="p">,</span> <span class="s2">"Ben"</span><span class="p">],</span>
</span><span class="line">  <span class="s2">"publisher"</span><span class="o">:</span> <span class="s2">"Manning"</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>こうすると、JavaScript として正しい評価がされ、スクリプトの実行が終わると、グローバルの <code>jsonResponse</code> 変数にオブジェクトが設定され使えるようになります。
変数ではなく、関数を呼び出すこともできます。そして、<strong class="text-danger">JSONP</strong> というのは、この <em>script を読み込む際に URL のクエリパラメータを使って呼び出し元がコールバック関数を指定できる仕組み</em> のことになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">jsonpCallback</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
</span><span class="line"><span class="nx">script</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line"><span class="nx">script</span><span class="p">.</span><span class="nx">src</span>   <span class="o">=</span> <span class="s1">'http://thirdpartyjs.com/info.js?callback=jsonpCallback'</span><span class="p">;</span>
</span><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h4>JSONP の制限</h4>

<p>JSONP は <strong class="text-danger">GET リクエストでのみ利用可能</strong> です。RESTful API を提供しているような場合、JSONP に合わせて GET のエンドポイントを用意していあげる必要が出てくるかもしれません。</p>

<p><em>JSONP リクエストは必ず非同期で処理されます</em>。ほとんどないとは思いますが、もしブロッキングが必要になった場合は、JSONP では不可能です。</p>

<h3>サブドメインプロキシ</h3>

<p>SOP は生成元のホスト部分を厳密に区別しています。<code>sub.example.com</code> と <code>example.com</code> は上位レベルのドメインは同じ (example.com) ですが、ブラウザは無関係なドメインとみなします。</p>

<p>デフォルトの動作はこうなりますが、ブラウザは <strong class="text-danger">Web サイトが生成元のホスト名をその上位ドメインに設定することを許可しています</strong>。
そのため、sub.example.com と alt.example.com のような共通の上位ドメインをもつサイト同士であれば両方の生成元を example.com に設定することでお互いに通信することができるようになります。</p>

<p>もし、企業向けの限られた環境だけで使うような JavaScript を作るのであれば、サブドメインの CNAME を割り当ててもらい、同一生成元を上位ドメインに設定することで通信可能にできるかもしれません。</p>

<h4>document.domain を利用してドキュメントの生成元を変更する</h4>

<p>ドキュメントの生成元を変えるには次のようなスクリプトを実行します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nb">document</span><span class="p">.</span><span class="nx">domain</span> <span class="o">=</span> <span class="s1">'example.com'</span><span class="p">;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>生成元変更にはいくつか注意点があります。</p>

<ul>
<li>生成元を変更するスクリプトは <code>example.com</code> と <code>sub.example.com</code> の <strong>両方</strong> で行う必要がある</li>
<li>
<code>document.domain</code> を変更できるのは <strong>ページあたり1回だけ</strong>
</li>
<li>
<code>document.domain</code> を変更することで、<strong>生成元のポートは80にリセット</strong> される</li>
</ul>
<h4>AJAX から呼び出すためのサブドメイントンネルファイル</h4>

<p><code>document.domain</code> を変更することでドキュメントの生成元を変更することができるようになりましたが、まだこれだけでは AJAX を使ってサブドメインのドキュメントを読み込むことはできません。
<em>AJAX においては、まずリクエストを送ってみない限り取得するドキュメントが同じドメインに参加しようとしているかを知ることができない</em> からです。
CORS の仕様では特別なヘッダを使ってプリフライトリクエストを行うことでこの問題を解決していますが、ここではトンネルファイルを使った方法を見ていきます。</p>

<h5>非表示の iframe を使う</h5>

<p>AJAX リクエストを呼び出すページが呼び出し先のドメインと同じであればリクエストを送ることができますので、予め呼び出し先のドキュメントを同一生成元を変更して読み込めていれば、そのドキュメントを使って AJAX リクエストを送ることができます。</p>

<p>それが、<em>非表示の iframe を使う方法</em> です。非表示の iframe で生成元を変更するスクリプトが書かれたページを読み込み、そのページから AJAX リクエストを送るようにするのです。
そうすれば、サブドメインプロキシを通じて、トンネルファイルの iframe 上の非表示ドキュメントから AJAX リクエストを呼び出すことができ、iframe 上のドキュメントと親ページは同じ同一の生成元にいるのでデータの受け渡しも可能になるという仕組みができます。</p>

<p><img src="http://hamasyou.com/images/2014-02-23-third-party-javascript-01.png" alt="サブドメイントンネルファイル" class="img-thumbnail" title="サブドメイントンネルファイル"></p>

<h5>JSONP と動的フォームを使う</h5>

<p>AJAX リクエストを送るためには非表示の iframe をもちいた中間ファイルが必要になります。中間ファイルを用いない方法として、動的にフォームを作成して、フォームをリクエストするという方法があります。</p>

<p><code>form</code> タグには <code>target</code> 属性が用意されているので、動的にフォームを作る際に結果を受け取るための <code>iframe</code> を作成して、その iframe をターゲットにフォームをポストするといいです。</p>

<h4>Google のブラウザセキュリティハンドブック</h4>

<p>同一生成元ポリシーやそれに伴うセキュリティ上のリスクをもっとよく知りたい場合は、Google の「ブラウザセキュリティハンドブック」のパート2を読むとよいです。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://code.google.com/p/browsersec/wiki/Part2" rel="external nofollow" title="ブラウザセキュリティハンドブック Part2">ブラウザセキュリティハンドブック Part2</a></p>

<h3>クロスオリジンリソース共有 (CORS)</h3>

<p><strong class="text-danger">クロスオリジンリソース共有 (CORS)</strong> は W3C のワーキングドラフトになっている、きちんと管理された形でドメインをまたがってサーバと通信を行う方法を定めたものです。</p>

<p>CORS では一連の特別な HTTP ヘッダを使ってブラウザとサーバがやり取りを行えるかどうかを決定するようになっています。</p>

<h4>Origin リクエスト</h4>

<p>クロスオリジンの HTTP リクエストを開始する際には、CORS に対応したブラウザは <code>Origin</code> と呼ばれる特殊なヘッダを含むリクエストを使って生成元を示すことになっています。</p>

<pre><code class="plain">Origin: http://www.example.com/
</code></pre>

<p>サーバ側はこのヘッダをチェックして、そのリクエストが許可されるかどうかを決定します。応答するには、サーバは <code>Access-Control-Allow-Origin</code> というレスポンスヘッダにクライアントが送ったのと同じ生成元を入れて返さなければなりません。</p>

<pre><code class="plain">Access-Control-Allow-Origin: http://www.example.com/
</code></pre>

<p>あらゆるところからリクエストを許可するにはワイルドカードを使うこともできます。</p>

<pre><code class="plain">Access-Control-Allow-Origin: *
</code></pre>

<p>リクエストを許可しない場合は、サーバ側は CORS ヘッダを返さないようにします。また、リクエストに <code>Origin</code> ヘッダが存在していない場合は、サーバも CORS ヘッダを送り返すべきではないとされています。</p>

<h4>CORS で Cookie や認証ヘッダを送信する</h4>

<p>デフォルトでは、ブラウザは CORS を行う際には Cookie や HTTP 認証ヘッダを送らないようになっています。
こうした識別情報を送信するべきであると明示する場合には、<code>XmlHttpRequest</code> オブジェクトに <code>withCredentials</code> プロパティを設定します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XmlHttpRequest</span><span class="p">();</span>
</span><span class="line"><span class="nx">xhr</span><span class="p">.</span><span class="nx">withCredentials</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>サーバ側は、識別情報を必要としている場合には <code>Access-Control-Allow-Origin</code> ヘッダに加えて、<code>Access-Control-Allow-Credentials</code> というヘッダもレスポンスに含める必要があります。
このヘッダがないと、ブラウザはレスポンスを拒否していしまいます。</p>

<pre><code class="plain">Access-Control-Allow-Credentials: true
</code></pre>

<h2>クロスドメインでの iframe 間通信</h2>

<p>パブリッシャのページ上で実行されるアプリケーションコードと iframe 内のサードパーティのドメインで配信されているページとの間でドキュメントをやり取りする方法です。</p>

<h3>HTML5 window.postMessage API</h3>

<p><code>window.postMessage</code> はイベントを利用した安全なクロスドメイン通信 API です。
メッセージを送りたいウィンドウオブジェクトを取得して、<code>postMessage</code> を送るだけです。
送られる側はウィンドウの <code>message</code> イベントで受け取ります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>http://publisher.dev/index.html</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line"><span class="nt">&lt;h1&gt;</span>Publisher<span class="nt">&lt;/h1&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">"thirdparty"</span> <span class="na">src=</span><span class="s">"http://thirdparty.dev/index.html"</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/iframe&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;script&gt;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">frame</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">'thirdparty'</span><span class="p">);</span>
</span><span class="line"><span class="nx">frame</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'load'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">win</span> <span class="o">=</span> <span class="nx">frame</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">;</span>
</span><span class="line">    <span class="nx">win</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="s1">'Hello World!'</span><span class="p">,</span> <span class="s1">'http://thirdparty.dev/'</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>http://thirdparty.dev/index.html</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td>
<td class="code"><pre><code class="html"><span class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line"><span class="nt">&lt;h1&gt;</span>thirdparty<span class="nt">&lt;/h1&gt;</span>
</span><span class="line"><span class="nt">&lt;script&gt;</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">receiver</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">origin</span><span class="p">);</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">source</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'message'</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>easyXDM を利用したクロスドメインメッセージング</h3>

<p><i class="fa fa-hand-o-right"></i> <a href="http://easyxdm.net/wp/" rel="external nofollow" title="easyXDM">easyXDM</a></p>

<p>クロスドメイン間でメッセージをやり取りするためのライブラリに <strong class="text-danger">easyXDM</strong> があります。
このライブラリは複数の異なるクロスドメインメッセージングのテクニックを組み合わせて、そのなかかkらそれぞれのブラウザに適したものを選択してくれます。</p>

<h2>メモ</h2>

<h3>ポップアップブロック機能を回避する方法</h3>

<blockquote><p>これを避けるには、新しいウィンドウを常に<strong class="text-danger">ユーザーのアクションの直接の結果</strong>として開くようにすることだ。ユーザーのアクションからウィンドウを開くまでの間に遅延が存在すると、多くのブラウザはそれを悪意ある動作とみなして処理を阻止してしまう。</p></blockquote>


<h2>感想</h2>

<p>読んでみて、<strong class="text-danger">本書はサードパーティ JavaScript を書かなくても、サーバ側の API を実装するだけの人も読むべき</strong> だと思いました。
クロスオリジン問題やセキュリティに関する話題も豊富に書かれていて、全てが有用な情報です。</p>

<p>ブラウザとサーバがどんなことをやっているのかをきちんと理解したい人は、是非よんでみてください。絶対に為になります。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[読みやすいブログ、読みにくいブログ]]></title>
    <link href="http://hamasyou.com/blog/2014/02/22/readable-blog-unreadable-blog/"/>
    <updated>2014-02-22T23:07:05+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/22/readable-blog-unreadable-blog/</id>
    <content type="html"><![CDATA[<p>読みやすいブログってどうしてあんなに読みやすいんでしょうかね？僕もかれこれサイトだけは9年ほどやってます。
毎日ブログを綴っているわけではないのでアレですが、ブログ歴は3〜5年くらいにはなるんじゃないかなと思います。</p>

<p>これまで3回くらいブログのデザインを変えました。デザインの賞味期限って、たぶん3年くらいなんじゃないかと思います。
Web の黎明期なんかは、<code>blink</code> タグや <code>marquee</code> タグなんかをつかって派手なアクションをするサイトが流行りました。
その後、Web デザイナさんが頑張って作るクール系のサイトが流行り、今やレスポンシブサイトですよ。</p>

<p><span class="lead">（Google で「<em>blink html</em>」を検索すると検索結果が面白いことになってますねw）</span></p>

<p>うちのサイトも一応それなりに時代の流れに合わせてデザインは変えてきたつもりですが、いつまで経っても読みやすいブログにならないのはなぜなんでしょうかね。。
文字の大きさや背景色と文字色の調和、フォントや <code>line-height</code> なんかにも気を付けているつもりなんですが、そういう小手先のテクニックに惑わされているうちは、
読みやすいブログにはならないってことですね、きっと。。。</p>

<!-- more -->


<h2>読みやすいブログの特徴</h2>

<h3>見出しが分かりやすい</h3>

<p>読みやすいブログの特徴として、僕が感じるのはやっぱり「<strong class="text-danger">見出しがわかりやすい</strong>」ことですね。
文字が大きいとかスペースが空いているとかだけじゃなく、なんか特徴的だったり、流し読みしても内容が頭の中に入ってくる感じ。
流し読みしても頭に入ってくるように見出しをつけるっていうのは、大事な気がします。</p>

<h3>文字が適度に大きい</h3>

<p>フォントもそうですが、フォントサイズも重要な要素だと思いました。読み物としてはやっぱり <strong class="text-danger">14pt〜16pt</strong> は欲しいんじゃないかと思います。
あとは <code>line-height</code> ですね。<strong class="text-danger">1.5em〜1.8em</strong> くらいあると、Web 上で文章を読んでも読みやすいと感じます。</p>

<p>あとは、適度に改行をいれるといいってよく書かれていますが、あんまり改行が多すぎても駄目な感じがします。。</p>

<h3>適度に画像が入っている</h3>

<p>うちのサイトは一応書評サイトなので、本の内容と感想、それにおぼえがきを中心にしています。そうすると、あんまり画像を載せることがないんですが、
<em>読みやすいサイトは適切に画像が入ってる</em> ことが多いと思います。アイキャッチの画像なんかも効果的に使われていますね。</p>

<h3>サイトの横幅が狭め</h3>

<p>最近は PC の性能もよくなって、ディスプレイサイズも大きい物が増えています。なので、PC のブラウザサイズは 1024x768 以上のものが多くなっています。
ただ、逆にスマホやタブレットで Web サイトを見る人も増えているので、二極化しているという感じでしょうか。</p>

<p>で、読みやすいサイトは、文章の一行の量が50文字以下に抑えられていることが多いと思いました。サイトのスペースを上手く使いながら、<strong class="text-danger">一行の長さは狭め</strong> というのが読みやすいサイトの特徴な気がします。</p>

<h2>まとめ</h2>

<p>読みやすいブログと読みにくいブログですが、うちのサイトは間違いなく <strong class="text-danger">読みにくいブログ</strong> なんでしょうね。。。毎日1記事で、だんだん読みやすいブログになっていけばいいなと思ってます。。
頑張ります！</p>

<p><a href="http://www.amazon.co.jp/gp/product/4799100874?ie=UTF8&amp;camp=247&amp;creativeASIN=4799100874&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="https://images-na.ssl-images-amazon.com/images/I/519LYdJLqIL._SS300_.jpg" height="230" width="230" alt="すっきり！　わかりやすい！　文章が書ける" class="img-thumbnail" title="すっきり！　わかりやすい！　文章が書ける"></a><a href="http://www.amazon.co.jp/gp/product/4820748270?ie=UTF8&amp;camp=247&amp;creativeASIN=4820748270&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="https://images-na.ssl-images-amazon.com/images/I/511vOWP0YeL._SS300_.jpg" height="230" width="230" alt="書くスキルUP すぐできる! 伝わる文章の書き方 確実に文章力がつく! 7つのステップ" class="img-thumbnail" title="書くスキルUP すぐできる! 伝わる文章の書き方 確実に文章力がつく! 7つのステップ"></a><a href="http://www.amazon.co.jp/gp/product/4620792993?ie=UTF8&amp;camp=247&amp;creativeASIN=4620792993&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="https://images-na.ssl-images-amazon.com/images/I/510Lvq7j7BL._SS300_.jpg" height="230" width="230" alt="1時間でできる ブログ &amp; SNS　――　大きな文字で読みやすい 初心者でもらくらく" class="img-thumbnail" title="1時間でできる ブログ &amp; SNS　――　大きな文字で読みやすい 初心者でもらくらく"></a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptで学ぶ関数型プログラミング]]></title>
    <link href="http://hamasyou.com/blog/2014/02/21/functional-javascript/"/>
    <updated>2014-02-21T19:39:56+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/21/functional-javascript/</id>
    <content type="html"><![CDATA[<blockquote>
<p>本書はJavaScriptを使って関数型プログラミングを学ぶ書籍です。関数型言語としてJavaScriptを理解し、使用することにより、コードがより洗練され、美しく、そして読みやすいものになることを目的としています。JavaScriptビルトインのデータ型を上手に利用するための基本知識やJavaScriptにおける関数の持つ特性など、関数型プログラミングの技術とその考え方について解説します。また実際のJavaScriptコーディングに関数型プログラミングのエッセンスを加えるポイントをサンプルを使って丁寧に説明します。関数型プログラミングに精通した著者が書き下ろした本書は、テクニックを増やし、コーディングのイマジネーションを広げたいエンジニア必携の一冊です。</p>
<footer><strong>内容紹介</strong></footer>
</blockquote>


<p>JavaScript は純粋な関数型プログラミング言語ではありません。が、<strong class="text-danger">関数型言語として JavaScript を理解し使用することでコードがより洗練され、読みやすいものになる</strong> はずという筆者の考えがこの本には現れています。</p>

<p>JavaScript では関数型プログラミングは一つのスタイルにしかすぎず、必要な場面で適切に使うというアプローチをとることでよりよいコードや使いやすい関数になります。</p>

<!-- more -->


<h2>関数型プログラミング</h2>

<p><img src="http://hamasyou.com/images/2014-02-21-functional-javascript-02.jpg" alt="関数型プログラミング" class="img-thumbnail" title="関数型プログラミング"></p>

<p>本書のおぼえがきです。本書の中から気になった箇所だけ抜き出しているので、意味が通じないかもしれません。。気になったら買って読んでみてください。</p>

<h3>関数型プログラミングとは</h3>

<blockquote><p>関数型プログラミングとは、値を抽象の単位に変換する関数を使用して行うプログラミングであり、それらを使ってソフトウェアシステムを構築することである。</p></blockquote>


<p>オブジェクト指向では、問題領域をオブジェクトという単位に分解して対処していきますが、関数型プログラミングでは、問題を <strong class="text-danger">関数</strong> のパーツに分解します。</p>

<p>オブジェクト指向のアプローチは問題を「<strong class="text-danger">名詞</strong>」に分解して行う傾向があるのに対して、関数型プログラミングでは、問題を「<strong class="text-danger">動詞</strong>」に分解する傾向があります。</p>

<p>関数を通して、与えられた値を「<strong class="text-danger">変換</strong>」することができます。</p>

<pre><code class="plain">markdown → toHTML → postProcess → modifyDOM
         │        │             │
      テキスト   HTML       編集されたHTML
</code></pre>

<h3>高階関数</h3>

<p><strong class="text-danger">高階関数</strong> とは、関数を引数にとり新しい関数を生成して返す関数のことです。</p>

<p>例えば、JavaScript の Array には <code>sort</code> 関数があります。<code>sort</code> は引数に <code>compareFunction</code> を取ります。値の大小を比較する関数を <code>lessOrEqual</code>、この関数を <code>compareFunction</code> の仕様に変換する関数を <code>compare</code> とします。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">lessOrEqual</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">x</span> <span class="o">&lt;=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">func</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">func</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">sort</span><span class="p">(</span><span class="nx">compare</span><span class="p">(</span><span class="nx">lessOrEqual</span><span class="p">));</span>
</span><span class="line"><span class="c1">// =&gt; [-2, -1, -1, 0, 1, 10, 100]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>compare</code> 関数は大小比較を行う関数を引数にとり、<code>compareFunction</code> の仕様に則った関数を生成して返す高階関数になります。</p>

<h3>JavaScript における関数型プログラミング</h3>

<ul>
<li>関数による抽象の定義（<code>existy</code> や <code>truthy</code>）</li>
<li>関数を他の関数の引数に渡すことによる新たな動作の実現</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">existy</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">truthy</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">existy</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">[</span><span class="kc">null</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kc">false</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">existy</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; [false, false, true, true, true]</span>
</span><span class="line"><span class="p">[</span><span class="kc">null</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kc">false</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">truthy</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; [false, false, true, true, false]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>これこそが、<strong class="text-danger">関数型プログラミング</strong> です。関数型プログラミングは強力な <strong class="text-danger">データ抽象</strong> とともに実装されて役に立つものです。</p>

<h3>命令型プログラミングと関数型プログラミングの違いの例</h3>

<p>「99本のビール」の歌の歌詞を構築するプログラムを命令型プログラミングと関数型プログラミングで書いてみた例です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>命令型プログラミング</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">lyrics</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">bottles</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span> <span class="nx">bottles</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">bottles</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">lyrics</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">bottles</span> <span class="o">+</span> <span class="s1">'本のビールが残ってる'</span><span class="p">);</span>
</span><span class="line">  <span class="nx">lyrics</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">bottles</span> <span class="o">+</span> <span class="s1">'本のビール'</span><span class="p">);</span>
</span><span class="line">  <span class="nx">lyrics</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">'ひとつ取って、隣に回せ'</span><span class="p">);</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nx">bottles</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">lyrics</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">'もうビールは残ってない'</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>関数型プログラミングのアプローチで書くとこうなります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>関数型プログラミング</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// var _ = require('underscore');</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">lyricsSegment</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">chain</span><span class="p">([])</span>
</span><span class="line">    <span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="s1">'本のビールが残ってる'</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="s1">'本のビール'</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">'ひとつ取って、隣に回せ'</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="nx">tap</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">lyrics</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="nx">lyrics</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">'もうビールは残ってない'</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">})</span>
</span><span class="line">    <span class="p">.</span><span class="nx">value</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">song</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">,</span> <span class="nx">lyricGen</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span>
</span><span class="line">    <span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">acc</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">lyricGen</span><span class="p">(</span><span class="nx">n</span><span class="p">));</span>
</span><span class="line">    <span class="p">},</span> <span class="p">[]);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">song</span><span class="p">(</span><span class="mi">99</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">lyricSegment</span><span class="p">);</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><strong class="text-danger">命令型プログラミングは一度きりの実装となりがちで、再利用が難しいものになります</strong>。</p>

<h3>コレクション中心プログラミング</h3>

<p>関数型プログラミングは、<em>コレクションに入った多数のアイテムに同じ操作を適用するようなタスク</em> を行う際にとても便利です。</p>

<p>一般的な関数型プログラミングによって主張されるコレクション中心の考え方のポイントは、その処理を行うために一貫性のある語彙を確立し、包括的に揃えた関数を再利用出来るようにすることです。</p>

<blockquote>
<p>10種類のデータ構造上で10の関数を動かすよりも、ひとつのデータ構造上で100の関数を動かすほうがよい。</p>
<footer><strong>Alan Perlis</strong></footer>
</blockquote>


<p>関数型プログラミングでは、<strong class="text-danger">それぞれの関数がすこしずつデータを変換し、最後の解に至る</strong> ようにします。</p>

<h3>値ではなく、関数を使え</h3>

<p>ある値を何度か繰り返す関数はよい関数ですが、<strong class="text-danger">ある計算を何度か繰り返す関数のほうがよりよい</strong> 関数です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>よい関数</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">repeat</span><span class="p">(</span><span class="nx">times</span><span class="p">,</span> <span class="nx">VALUE</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="nx">times</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">VALUE</span><span class="p">;</span> <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s1">'Major'</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; ["Major", "Major", "Major", "Major"]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>よりよい関数</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">repeatedly</span><span class="p">(</span><span class="nx">times</span><span class="p">,</span> <span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="nx">times</span><span class="p">),</span> <span class="nx">func</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">repeatedly</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">'Major'</span><span class="p">;</span> <span class="p">});</span>
</span><span class="line"><span class="c1">// =&gt; ["Major", "Major", "Major", "Major"]</span>
</span><span class="line"><span class="nx">repeatedly</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="p">});</span>
</span><span class="line"><span class="c1">// =&gt; [1, 3, 8]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>関数を作る関数を作る意義</h2>

<h3>カリー化</h3>

<p><img src="http://hamasyou.com/images/2014-02-21-functional-javascript-01.jpg" alt="カリー化" class="img-thumbnail" title="カリー化"></p>

<p>カリー化された関数というのは、<em>引数を一つ受け取るたびに新しい関数を返す関数</em> のことです。<code>invoker</code> 関数はカリー化された関数といえます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>カリー化された関数</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">invoker</span><span class="p">(</span><span class="s1">'reverse'</span><span class="p">,</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reverse</span><span class="p">)([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]);</span>
</span><span class="line"><span class="c1">// =&gt; [3,2,1]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>JavaScript は変数の値の変更に対しておおらかな言語です。オブジェクト指向のカプセル化のような事をする場合、クロージャを使うと便利です。</p>

<p>クロージャを使うと、生成時のコンテキストにもとづいて特定の動作を行うように「<em>設定された</em>」関数を返すことができます。この設定された関数は外部からカプセル化されており、関数の抽象を高めます。</p>

<p>カリー化された関数も同じ考え方になります。</p>

<h3>JavaScript でカリー化を行う意味</h3>

<p>まず、シンプルな高階関数をつくります。関数を引数に取り、引数をひとつだけ取るように限定された関数を返す関数です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>curry</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">curry</span><span class="p">(</span><span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">func</span><span class="p">(</span><span class="nx">arg</span><span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>JavaScript の関数は <strong class="text-danger">引数をいくら渡してもエラーになりません</strong>。そこで、いくつかの「<em>専門化を行う</em>」引数をオプションで取る場合がよくあります。</p>

<p>例えば <code>parseInt</code> という関数は、第2引数に n 進数の n をオプションで受け取ります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>parseInt</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nb">parseInt</span><span class="p">(</span><span class="s1">'11'</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; 11</span>
</span><span class="line"><span class="nb">parseInt</span><span class="p">(</span><span class="s1">'11'</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; 3</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>parseInt</code> を第一級関数として使うと第2引数が原因で混乱するケースがあります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span><span class="s1">'11'</span><span class="p">,</span> <span class="s1">'11'</span><span class="p">,</span> <span class="s1">'11'</span><span class="p">,</span> <span class="s1">'11'</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; [11, NaN, 3, 4]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>JavaScript の <code>map</code> は与えられた関数の第1引数に <em>要素</em>、第2引数に <em>インデックス</em>、第3引数に <em>元の配列</em> を渡します。そのため、こんな結果になってしまいます。</p>

<p>ここで、先ほど定義した <code>curry</code> 関数を利用します。与えられた関数に一つだけ引数を渡すように強制してみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span><span class="s1">'11'</span><span class="p">,</span> <span class="s1">'11'</span><span class="p">,</span> <span class="s1">'11'</span><span class="p">,</span> <span class="s1">'11'</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">curry</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">));</span>
</span><span class="line"><span class="c1">// =&gt; [11, 11, 11, 11]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>引数を2つ取るようにする <code>curry2</code> は次のようになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>curry2</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">curry2</span><span class="p">(</span><span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">secondArg</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">firstArg</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">func</span><span class="p">(</span><span class="nx">firstArg</span><span class="p">,</span> <span class="nx">secondArg</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">parseIntByBinary</span> <span class="o">=</span> <span class="nx">curry2</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">)(</span><span class="mi">2</span><span class="p">);</span>
</span><span class="line"><span class="nx">parseIntByBinary</span><span class="p">(</span><span class="s1">'111'</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; 7</span>
</span><span class="line"><span class="nx">parseIntByBinary</span><span class="p">(</span><span class="s1">'10'</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; 2</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>このように、<strong class="text-danger">カリー化は JavaScript の関数の動作を「専門化」させるための有効なテクニック</strong> になります。</p>

<h2>再帰</h2>

<p><img src="http://hamasyou.com/images/2014-02-21-functional-javascript-03.jpg" alt="再帰" class="img-thumbnail" title="再帰"></p>

<p>再帰が関数型プログラミングに重要である3つの理由。</p>

<ul>
<li>共通の問題のサブセットに単一の抽象を使用する</li>
<li>可変の状態を隠蔽することができる</li>
<li>遅延評価や無限データ構造の処理を行う手段のひとつ</li>
</ul>
<p>配列の長さを調べる関数を再帰の考え方で解くと。</p>

<ol>
<li>もし配列が空であれば長さは0</li>
<li>配列の最初の要素を取り出し、残りを自身の関数に渡した実行結果に1を加える</li>
</ol>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>length</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">length</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">array</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="nx">length</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">rest</span><span class="p">(</span><span class="nx">array</span><span class="p">));</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>再帰をうまく実装するヒントは、「<strong class="text-danger">値は大きな問題に内包された小さな問題によって組み立てられるものである</strong>」と認識することです。</p>

<p><em>基本的な場合を考える</em> ことで、分解の最初の一歩を踏み出しやすくなります。</p>

<h2>純粋関数と冪等とデータの不変性</h2>

<p><img src="http://hamasyou.com/images/2014-02-21-functional-javascript-05.jpg" alt="データの普遍性" class="img-thumbnail" title="データの普遍性"></p>

<h3>純粋関数</h3>

<p><strong class="text-danger">純粋関数</strong> とは、その関数が外部に一切の影響を与えないことが静的に保証されている関数です。純粋性のルールはつぎのようになります。</p>

<ul>
<li>結果は引数として与えられた値からのみ計算される</li>
<li>関数の外部で変更される可能性のあるデータに一切依存しない</li>
<li>関数実行部の外側に存在する何かの状態を一切変更しない</li>
</ul>
<p><i class="fa fa-hand-o-right"></i> <a href="https://github.com/k3kaimu/d-manual/blob/master/function.md#%E7%B4%94%E7%B2%8B%E9%96%A2%E6%95%B0pure" rel="external nofollow" title="純粋関数">純粋関数</a></p>

<h3>冪等（べきとう）</h3>

<p>RESTful なアーキテクチャが一般化するにつれて <strong class="text-danger">冪等（べきとう）</strong> の考え方も一般に浸透してきました。冪等とは、<em>あるアクションを何度行っても一度行った場合とまったくおなじ効果をもたらす</em> というものです。冪等である関数は次の条件を満たします。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>冪等な関数</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">someFunc</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="o">==</span> <span class="nx">_</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="nx">someFunc</span><span class="p">,</span> <span class="nx">someFunc</span><span class="p">)(</span><span class="nx">arg</span><span class="p">);</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>ある引数を与えて実行するということは、その関数を2回連続で呼び出しても同じ結果を返します。</p>

<h3>不変性</h3>

<p>JavaScript はダイナミックな言語です。<em>純粋関数のポリシーに縛られるがゆえに、関数のダイナミックさを犠牲にする必要はありません</em>。</p>

<p>しかし、変数は変更するたびにその変数を参照するタイミングによって異なる値が返ってきます。<em>プログラムのすべての状態変更を除去することは不可能ですが、可能なかぎり減らすほうがよい</em> です。</p>

<p>そして、<em>関数型プログラミングの理想な状況とは、可変なものが全く存在しない</em> という状況です。</p>

<p>関数を <strong class="text-danger">抽象の基本的な単位</strong> としてみる利点は、関数の実装内容が外部に「<em>漏れる</em>」ことがなければ、関数の利用側は関数の実装に無関係であることです。</p>

<p>つまり、関数型プログラミングにおける関数でも、内部で命令的なプログラミングをしていたり、変数の状態を変更していたとしても、外部にもれなければ問題にはならないということです。</p>

<p>JavaScript は <strong class="text-danger">関数が変数の境界をつくる</strong> ので、ローカル変数の状態変更は関数が外部に漏れるのを防いでくれます。</p>

<blockquote>
<p>誰もいない森で木が倒れたら、音がするでしょうか？<br>不変性を持った戻り値を生成するために、純粋関数がローカルデータを変異させたとしたら、それは良いことなのでしょうか？</p>
<footer><strong>Rich Hickey</strong> <cite><a href="http://clojure.org/transients" rel="external nofollow" title="clojure.org/transients/…">clojure.org/transients/…</a></cite></footer>
</blockquote>


<p>結局のところ、答えは <strong class="text-danger">Yes</strong> です。</p>

<h3>不変性を保つためにとりうる手段</h3>

<p>JavaScript のオブジェクトフィールドは常に参照可能なので、オブジェクトは不変ではありません。不変性を保つために関数の実装側がとりえる手段は実質つぎの3つのどれかになります。</p>

<ul>
<li>浅いコピーで十分な場合は <code>_.clone</code> を使ってコピーする</li>
<li>深いコピーが必要な場合は <code>deepClone</code> を使う</li>
<li>純粋関数を使ってコードを記述する</li>
</ul>
<h2>メモ</h2>

<p><img src="http://hamasyou.com/images/2014-02-21-functional-javascript-04.jpg" alt="メモ" class="img-thumbnail" title="メモ"></p>

<p>本書の中に出てきた、関数とかのメモ。</p>

<h3>predicate</h3>

<p>常に真偽値（<code>true</code> or <code>false</code>）を返す関数を <strong class="text-danger">predicate</strong> と呼びます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">lessOrEqual</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">x</span> <span class="o">&lt;=</span> <span class="nx">y</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>existy と truthy</h3>

<p><code>existy</code> は与えられた値が存在するかどうかを返す関数です。<code>truthy</code> は与えられた値が <code>true</code> とみなされるかどうかを返す関数です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">existy</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">x</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">truthy</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">existy</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>truthy</code> は0を <code>true</code> と判定します。これは JavaScript の標準の動作とは違いますが、0を <code>false</code> と同一とみなすのは C 言語の遺物であると筆者は考えているようです。</p>

<h3>JavaScript 関数の設計指針</h3>

<p>JavaScript ではある条件が <code>true</code> の場合のみ処理を行い、それ以外の場合には <code>undefined</code> か <code>null</code> を返す動作が使いやすい場合が多い。</p>

<h3>メタプログラミングとは</h3>

<blockquote><p>プログラミングは何かを行うためにコードを書くものであるが、メタプログラミングは何かを解釈する方法を変更するためにコードを書くものである。</p></blockquote>


<h3>第一級関数</h3>

<p>第一級関数は他のデータ型と同じように、扱うことができる関数のことです。</p>

<ul>
<li>変数に格納できる</li>
<li>必要に応じて生成できる</li>
<li>他の関数の引数として渡すことができる</li>
<li>関数の戻り値として返すことができる</li>
</ul>
<h3>コレクション中の <code>null</code> に対する防御用の関数 <code>fnull</code>
</h3>

<p><code>fnull</code> は関数と可変長引数をとる関数です。与えられた関数の実行を行う際に <code>undefined</code> か <code>null</code> の値の場合にはデフォルト値を使うようにして関数を呼び出します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>fnull</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">fnull</span><span class="p">(</span><span class="nx">func</span> <span class="cm">/* , 可変長のデフォルト引数 */</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">defaults</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">rest</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span> <span class="cm">/* args */</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">existy</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">?</span> <span class="nx">e</span> <span class="o">:</span> <span class="nx">defaults</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="p">});</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">safeMulti</span> <span class="o">=</span> <span class="nx">fnull</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">total</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">total</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span> <span class="p">},</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">reduce</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="nx">safeMulti</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; 30</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>invoker</h3>

<p><code>invoker</code> は関数を返す関数です。引数にメソッド名を取り、メソッドの実行主体のオブジェクトを渡すとそのオブジェクトでメソッドを実行する関数を返します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>invoker</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">invoker</span><span class="p">(</span><span class="nx">NAME</span><span class="p">,</span> <span class="nx">METHOD</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span> <span class="cm">/* , 任意の引数 */</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">existy</span><span class="p">(</span><span class="nx">target</span><span class="p">))</span> <span class="nx">fail</span><span class="p">(</span><span class="s1">'Must provide a target'</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">targetMethod</span> <span class="o">=</span> <span class="nx">target</span><span class="p">[</span><span class="nx">NAME</span><span class="p">];</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">args</span>         <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">rest</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">doWhen</span><span class="p">((</span><span class="nx">existy</span><span class="p">(</span><span class="nx">targetMethod</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">METHOD</span> <span class="o">==</span> <span class="nx">targetMethod</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">targetMethod</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">rev</span> <span class="o">=</span> <span class="nx">invoker</span><span class="p">(</span><span class="s1">'reverse'</span><span class="p">,</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reverse</span><span class="p">);</span>
</span><span class="line"><span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]),</span> <span class="nx">rev</span><span class="p">);</span>
</span><span class="line"><span class="c1">// =&gt; [[3, 2, 1]]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>関数型のスタイルでは、<em>関数の実行主体となるオブジェクトを引数にとる関数の形が好まれます</em>。</p>

<h3>メソッドチェーン</h3>

<p>メソッドチェーンは「<em>流暢な</em>」API を構築するために有用なパターンです。流暢な API とは例えば次のようなものです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>流暢な API の例</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">createPerson</span><span class="p">()</span>
</span><span class="line">  <span class="p">.</span><span class="nx">setFirstName</span><span class="p">(</span><span class="s1">'Mike'</span><span class="p">)</span>
</span><span class="line">  <span class="p">.</span><span class="nx">setLastName</span><span class="p">(</span><span class="s1">'Fogus'</span><span class="p">)</span>
</span><span class="line">  <span class="p">.</span><span class="nx">setAge</span><span class="p">(</span><span class="mi">108</span><span class="p">)</span>
</span><span class="line">  <span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>メソッドチェーンを実現する「<em>魔法</em>」は <em>チェーン内のそれぞれのメソッドが同じホストのオブジェクトの参照を返す</em> ことです。</p>

<p>上の方のメモで、関数が前提条件に合わない引数を受け取った場合は <code>undefined</code> か <code>null</code> を返すのがよいとありました。メソッドチェーンで使うことを考えている関数の場合は <code>undefined</code>、<code>null</code>、<code>同じホストのオブジェクト</code> のどれを返せばいいんでしょうかね。。。</p>

<h2>感想</h2>

<p>JavaScript の関数の基本的なところから説明をはじめて、<strong class="text-danger">関数型プログラミング</strong>、<strong class="text-danger">クロージャ</strong>、<strong class="text-danger">高階関数</strong>、<strong class="text-danger">カリー化</strong>、<strong class="text-danger">再帰</strong>、<strong class="text-danger">フィルタ</strong>、<strong class="text-danger">パイプライン</strong>等の関数の設計方法がふんだんに解説されています。</p>

<p>説明がとても丁寧で分かりやすく、関数型プログラミングのことを知らない人でも理解しやすいと思います。</p>

<p>関数型プログラミングを学ぶと、<strong class="text-danger">純粋関数</strong>、<strong class="text-danger">データの不変性</strong> というテーマに当たります。JavaScript にはないですが、Ruby ではメソッドに <code>!</code> が付いた自分自身を変更する破壊的なメソッドがあります。関数型プログラミングとオブジェクト指向プログラミングをうまい具合に取り入れている言語だと再認識しました。</p>

<p>JavaScript で関数型プログラミングを学ぶというテーマですが、<em>関数型プログラミングを学ぶことで他の言語の面白い点も見えてくる</em> というのが読了しての感想です。</p>

<p>JavaScript は Java に次いで最も多く利用されている言語ですので、<strong class="text-danger">JavaScript をよりよく使うため、他の関数型言語をより楽しむため</strong> に本書を活用してみてはいかがでしょうか。おすすめです。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[静的サイトを素早く構築するためにGoLangで作られたジェネレータHugo]]></title>
    <link href="http://hamasyou.com/blog/2014/02/21/hugo/"/>
    <updated>2014-02-21T15:43:47+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/21/hugo/</id>
    <content type="html"><![CDATA[<p>最近は静的サイトブームが再到来なんですかね？<strong class="text-danger">GoLang</strong> で作られた静的サイトジェネレータの <strong class="text-danger">Hugo</strong> なんていうものがありました。</p>

<p>うちのサイトも最近 Ruby の <em>Octopress</em> でサイトをリニューアルしましたが、Go にもあるんですね。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://github.com/spf13/hugo" rel="external nofollow" title="spf13 / hugo">spf13 / hugo</a></p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://hugo.spf13.com/" rel="external nofollow" title="The Fast and Flexible Static Site Generator - Hugo">The Fast and Flexible Static Site Generator - Hugo</a></p>

<p>Go でビルドするので速いとのこと。また、Windows、Mac、Linux と環境を選ばないのがいいですね。</p>

<p>記事は <strong class="text-danger">Markdown</strong> で記述します。カテゴリやタグなどの情報は <strong class="text-danger">YAML</strong> 形式でいけます。<a href="http://octopress.org/" rel="external nofollow" title="Octopress">Octopress</a> や <a href="http://jekyllrb.com/" rel="external nofollow" title="Jekyll">Jekyll</a> と似ています。</p>

<p>最近 Go が人気急上昇なので、Go の環境が手元にある人は Hugo を使ってサイトを運営してみるのもありかもです。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でtransactionの分離レベルを設定する]]></title>
    <link href="http://hamasyou.com/blog/2014/02/20/rails4-transaction/"/>
    <updated>2014-02-20T21:42:41+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/20/rails4-transaction/</id>
    <content type="html"><![CDATA[<p>Rails4 から <code>ActiveRecord::Base.transaction</code> に分離レベルを手軽に設定できるようになったみたいです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">transaction</span><span class="p">(</span><span class="ss">isolation</span><span class="p">:</span> <span class="ss">:serializable</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>分離レベルには次の4つを設定できます。</p>

<ul>
<li><code>:read_uncommitted</code></li>
<li><code>:read_committed</code></li>
<li><code>:repeatable_read</code></li>
<li><code>:serializable</code></li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano3をRailsで使ってみた感想]]></title>
    <link href="http://hamasyou.com/blog/2014/02/20/capistrano3/"/>
    <updated>2014-02-20T11:25:05+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/20/capistrano3/</id>
    <content type="html"><![CDATA[<p><strong class="text-danger">Capistrano3</strong> がかなりシンプルになって使いやすくなったのでプロジェクトで使ってみました。うん。なかなかよさげです。</p>

<p>Capistrano2 にあった <em>copy_via</em> がなくなっていたので、デプロイ先のサーバから Git リポジトリにアクセスできるようにしないといけなかったりとちょっと面倒なこともありましたが概ね良好です。</p>

<!-- more -->


<p><i class="fa fa-hand-o-right"></i> <a href="https://github.com/capistrano/capistrano" rel="external nofollow" title="capistrano / capistrano">capistrano / capistrano</a></p>

<p>Capistrano3 の導入はこの記事がオススメです。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://threetreeslight.com/post/68344998681/capistrano-3-x-rails" rel="external nofollow" title="capistrano 3.x系を使ってrailsをデプロイ">capistrano 3.x系を使ってrailsをデプロイ</a></p>

<p>Capistrano3 になって、独自DSLから Rake に変わりました。なので、コマンドも結構すっきりして書きやすくなりました。</p>

<p>サンプルプロジェクトで使った <code>config/deploy.rb</code> の例です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config valid only for Capistrano 3.1</span>
</span><span class="line"><span class="n">lock</span> <span class="s1">'3.1.0'</span>
</span><span class="line">
</span><span class="line"><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">'capbox'</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">'git@github.com:hamasyou/git_demo.git'</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">'/var/webapp/capbox'</span>
</span><span class="line">
</span><span class="line"><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="sx">%w{config/database.yml}</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system solr}</span>
</span><span class="line">
</span><span class="line"><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">  <span class="n">before</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:start_solr</span> <span class="k">do</span>
</span><span class="line">    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:groups</span> <span class="k">do</span>
</span><span class="line">      <span class="n">within</span> <span class="n">release_path</span> <span class="k">do</span>
</span><span class="line">        <span class="n">with</span> <span class="n">rails_env</span><span class="p">:</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:rails_env</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s1">'sunspot:solr:stop'</span>
</span><span class="line">          <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s1">'sunspot:solr:start'</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">desc</span> <span class="s1">'Restart application'</span>
</span><span class="line">  <span class="n">task</span> <span class="ss">:restart</span> <span class="k">do</span>
</span><span class="line">    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:sequence</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">5</span> <span class="k">do</span>
</span><span class="line">      <span class="n">execute</span> <span class="ss">:touch</span><span class="p">,</span> <span class="n">release_path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">'tmp/restart.txt'</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">after</span> <span class="ss">:publishing</span><span class="p">,</span> <span class="ss">:restart</span>
</span><span class="line">
</span><span class="line">  <span class="n">after</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:sitemap</span> <span class="k">do</span>
</span><span class="line">    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:groups</span><span class="p">,</span> <span class="ss">limit</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">10</span> <span class="k">do</span>
</span><span class="line">      <span class="c1"># Here we can do anything such as:</span>
</span><span class="line">      <span class="n">within</span> <span class="n">release_path</span> <span class="k">do</span>
</span><span class="line">        <span class="n">with</span> <span class="n">rails_env</span><span class="p">:</span> <span class="n">fetch</span><span class="p">(</span><span class="ss">:rails_env</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">          <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s1">'tmp:cache:clear'</span>
</span><span class="line">          <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s1">'sitemap:refresh'</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>タスクの実行時に指定できる <code>sequence</code>、<code>groups</code>、<code>parallel</code> の説明はこちら。</p>

<blockquote>
<p>Other modes for parallelism include:</p>
<p></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Capistrano 3.0.x</span><br></span><span class="line"><span class="n">on</span> <span class="ss">:all</span><span class="p">,</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:groups</span><span class="p">,</span> <span class="ss">max</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">5</span> <span class="k">do</span><br></span><span class="line">  <span class="c1"># Take all servers, in groups of three which execute in parallel</span><br></span><span class="line">  <span class="c1"># wait five seconds between groups of servers.</span><br></span><span class="line">  <span class="c1"># This is perfect for rolling restarts</span><br></span><span class="line"><span class="k">end</span><br></span><span class="line"><br></span><span class="line"><span class="n">on</span> <span class="ss">:all</span><span class="p">,</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:sequence</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">15</span> <span class="k">do</span><br></span><span class="line">  <span class="c1"># This takes all servers, in sequence and waits 15 seconds between</span><br></span><span class="line">  <span class="c1"># each server, this might be perfect if you are afraid about</span><br></span><span class="line">  <span class="c1"># overloading a shared resource, or want to defer the asset compilation</span><br></span><span class="line">  <span class="c1"># over your cluster owing to worries about load</span><br></span><span class="line"><span class="k">end</span><br></span><span class="line"><br></span><span class="line"><span class="n">on</span> <span class="ss">:all</span><span class="p">,</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:parallel</span> <span class="k">do</span><br></span><span class="line">  <span class="c1"># This will simply try and execute the commands contained within</span><br></span><span class="line">  <span class="c1"># the block in parallel on all servers. This might be perfect for kicking</span><br></span><span class="line">  <span class="c1"># off something like a Git checkout or similar.</span><br></span><span class="line"><span class="k">end</span><br></span></code></pre></td>
</tr></table></div></figure></notextile></div>
<footer><strong>Capistrano Version 3 Release Announcement</strong> <cite><a href="http://capistranorb.com/2013/06/01/release-announcement.html" rel="external nofollow" title="capistranorb.com/2013/06/01/…">capistranorb.com/2013/06/01/…</a></cite></footer>
</blockquote>


<p>Capistrano2 と互換性がないですが、新規プロジェクトには使えるんじゃないかと。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsのI18n.localizeでnilもゆるすようにすると捗る]]></title>
    <link href="http://hamasyou.com/blog/2014/02/19/rails-i18n-localize/"/>
    <updated>2014-02-19T22:30:13+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/19/rails-i18n-localize/</id>
    <content type="html"><![CDATA[<p>Rails の <code>I18n.localize</code> は <code>nil</code> を渡すと例外が発生します。でも、コレだといろいろ使いづらいのでいつも</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/initializers/relaxed_i18n.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">I18n</span>
</span><span class="line">  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class="line">    <span class="n">alias_method</span> <span class="ss">:original_localize</span><span class="p">,</span> <span class="ss">:localize</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">localize</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class="line">      <span class="n">object</span><span class="o">.</span><span class="n">present?</span> <span class="p">?</span> <span class="n">original_localize</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="s1">''</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>こんな感じのコードを <code>config/initializers</code> の下において使っています。<code>nil</code> を渡すと空文字を返します。</p>

<p>今のところコレで問題は起きていないのでオススメしてもいいかなと。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacのApp Storeで「ほかのアカウントで使用可能なアップデートがあります」が出てアップデート出来ないときの対応]]></title>
    <link href="http://hamasyou.com/blog/2014/02/19/mac-app-store-account/"/>
    <updated>2014-02-19T11:46:56+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/19/mac-app-store-account/</id>
    <content type="html"><![CDATA[<p>先日、古い MacBook Pro の Xcode のアップデートを行おうとしたときに、「<strong class="text-danger">ほかのアカウントで使用可能なアップデートがあります。このアプリケーションをアップデートするには、購入時に使用したアカウントでサインインしてください。</strong>」ってでてアップデートできなかったときにやった対応メモです。</p>

<!-- more -->


<p>アップデートできなかった原因は、<em>Spotlight</em> のインデックス更新を止めていたからでした。なので、Spotlight のインデックスを再構築すればアップデートできるようになりました。</p>

<p>Spotlight インデックスを再構築する以外にも、<strong class="text-danger">一回アプリをゴミ箱に入れてアップデート</strong> すれば直るというのも Google 先生に聞いたら教えてくれました。</p>

<h2>Spotlight インデックスの再構築手順</h2>

<p>まず、Spotlight のインデクサが起動していないと再構築できないので、先に起動させてから再構築します。</p>

<p>ターミナルを開いて次のコマンドを入力します。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</span><span class="line command">sudo mdutil -E /</span></code></pre></td>
</tr></table></div></div>
        </div>


<p>再構築が開始されると、画面の右上の Spotlight マークが点滅します。</p>

<p><img src="http://hamasyou.com/images/2014-02-19-mac-app-store-account-01.png" alt="Spotlight 索引再構築" class="img-thumbnail" title="Spotlight 索引再構築"></p>

<p>再構築は結構時間がかかりますが、全部終わるのをまたなくても、僕の場合はアップデートができるようになりました。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでつくるRESTful APIのrequest specを書く]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/rails-request-rspec/"/>
    <updated>2014-02-17T14:09:38+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/rails-request-rspec/</id>
    <content type="html"><![CDATA[<p>Rails 環境で RESTful API を提供する場面があると思います。API もコントローラで提供するので、コントローラのテストで記述してもいいのですが、RESTful API であれば、<strong class="text-danger">request spec</strong> を使うほうがよさそうなので request spec を書くメモです。</p>

<ul>
<li>Rails 4.0.2</li>
<li>rspec 2.14.1</li>
</ul>
<!-- more --><h2>テスト用のプロジェクトを整える</h2>

<p>まずは、チュートリアル用のプロジェクトを作成します。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">rails new specbox --skip-bundle</span><span class="line command">cd specbox</span></code></pre></td>
</tr></table></div></div>
        </div>


<p><code>Gemfile</code> を開いて次の gem を追記します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'rspec-rails'</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'guard-rspec'</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'factory_girl_rails'</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'spring'</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">'spring-commands-rspec'</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>rspec と scaffold の設定を行います。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span>
<span class="line-number">$</span></pre></td>
<td class="code"><pre><code><span class="line command">bundle install --path vendor/bundle</span><span class="line command">bundle exec rails g rspec:install</span><span class="line command">bundle exec guard init rspec</span><span class="line command">bundle exec rails g model Book title:string author:string price:integer</span><span class="line command">bundle exec rails g scaffold_controller Books</span><span class="line command">bundle exec rake db:migrate</span><span class="line command">bundle exec rake db:test:prepare</span></code></pre></td>
</tr></table></div></div>
        </div>


<p><code>config/routes.rb</code> にルーティングを追加します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Specbox</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="n">resources</span> <span class="ss">:books</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>テストを実行します。</p>

<div class="terminal-window">
          <nav class="terminal-control-window"><a href="#" class="terminal-close" data-rel="close">close</a>
            <a href="#" class="terminal-minimize">minimize</a>
            <a href="#" class="terminal-deactivate">deactivate</a>
          </nav><h1 class="terminal-title">Terminal</h1>
          <div class="terminal-container"><div class="terminal"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">$</span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span>
<span class="line-number"> </span></pre></td>
<td class="code"><pre><code><span class="line command">bundle exec guard</span><span class="line output">15:12:01 - INFO - Run all
</span><span class="line output">15:12:01 - INFO - Running all specs
</span><span class="line output">..**..........................
</span><span class="line output">
</span><span class="line output">Pending:
</span><span class="line output">  Book add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/models/book_spec.rb
</span><span class="line output">    # No reason given
</span><span class="line output">    # ./spec/models/book_spec.rb:4
</span><span class="line output">  BooksHelper add some examples to (or delete) /Users/hamasyou/tmp/specbox/spec/helpers/books_helper_spec.rb
</span><span class="line output">    # No reason given
</span><span class="line output">    # ./spec/helpers/books_helper_spec.rb:14
</span><span class="line output">
</span><span class="line output">Finished in 0.18066 seconds
</span><span class="line output">30 examples, 0 failures, 2 pending
</span><span class="line output">
</span><span class="line output">Randomized with seed 14063</span></code></pre></td>
</tr></table></div></div>
        </div>


<p>これで rspec の設定ができました。それでは <em>request spec</em> を書いていきます。</p>

<h2>request spec を書く</h2>

<p><em>request spec</em> は他の rspec のテストとほとんど変わりありません。テストは <code>spec/requests</code> フォルダの下に作成していきます。</p>

<p><code>scaffold_controller</code> でコントローラを作成したので、すでに <code>spec/requests/books_spec.rb</code> があるはずです。テストコードを見てみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/requests/books_spec.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'spec_helper'</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="s2">"Books"</span> <span class="k">do</span>
</span><span class="line">  <span class="n">describe</span> <span class="s2">"GET /books"</span> <span class="k">do</span>
</span><span class="line">    <span class="n">it</span> <span class="s2">"works! (now write some real specs)"</span> <span class="k">do</span>
</span><span class="line">      <span class="c1"># Run the generator again with the --webrat flag if you want to use webrat methods/matchers</span>
</span><span class="line">      <span class="n">get</span> <span class="n">books_path</span>
</span><span class="line">      <span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>request spec もコントローラのテストと同じように、<code>get</code>、<code>post</code>、といったメソッドを使ってテストを行います。<code>books_spec.rb</code> を次のように書き換えてみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/requests/books_spec.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'spec_helper'</span>
</span><span class="line">
</span><span class="line"><span class="n">describe</span> <span class="s1">'Books'</span> <span class="k">do</span>
</span><span class="line">  <span class="n">describe</span> <span class="s1">'GET /books'</span> <span class="k">do</span>
</span><span class="line">
</span><span class="line">    <span class="n">it</span> <span class="s1">'登録されている本が返されること'</span> <span class="k">do</span>
</span><span class="line">      <span class="n">book</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:book</span><span class="p">)</span>
</span><span class="line">      <span class="n">get</span> <span class="s1">'/books'</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="s1">'json'</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_success</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">json</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a_kind_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class="line">      <span class="n">expect</span><span class="p">(</span><span class="n">json</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">'id'</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">book</span><span class="o">.</span><span class="n">id</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>request spec はこういう感じで、<strong class="text-danger">実際に呼び出す URL を記述する</strong> のと、<strong class="text-danger">json の中身をチェックする</strong> のが大事だと思っています。</p>

<p>コントローラのテストではビューの中身までチェックしませんし、ビューのテストとコントローラのテストを2つ書くのはテストを把握しづらいので、request spec のテストのように一箇所で同時にテストするのが効果的だと思います。</p>

<p>API はインターフェース（<em>入力パラメータ</em> と <em>出力形式</em> ）が大事なのでここをきっちり押さえておくテストを書く必要があります。</p>

<p>で、テストケースを変えると当然テストが失敗するので、テストが通るようにヘルパを書き換えます。</p>

<h3>request_helpers.rb を作成する</h3>

<p>request spec を書くときに便利なメソッドをいくつか用意しておきます。</p>

<p>RESTful API は出力を json で返すものが多いと思うので、json を扱いやすくするヘルパーを用意します。</p>

<p>また、 <code>AuthenticationHelper</code> は認証が必要な API を呼び出すときの便利メソッドとして記述してありますが、不要であれば削除、仕様が違うようであれば書きなおしてつかいます。</p>

<p>次のファイルを <code>spec/support/request_helpers.rb</code> として作成します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/support/request_helpers.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Requests</span>
</span><span class="line">  <span class="k">module</span> <span class="nn">JsonHelpers</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">json</span>
</span><span class="line">      <span class="vi">@json</span> <span class="o">||=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">module</span> <span class="nn">AuthenticationHelper</span>
</span><span class="line">    <span class="sx">%w(get post put delete)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">method_name</span><span class="o">|</span>
</span><span class="line">      <span class="n">define_method</span><span class="p">(</span><span class="s2">"auth_</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">uri</span><span class="p">,</span> <span class="n">auth_user</span><span class="p">,</span> <span class="n">params</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">env</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class="line">        <span class="nb">__send__</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">env</span><span class="o">.</span><span class="n">reverse_merge</span><span class="p">(</span><span class="no">HTTP_AUTHORIZATION</span><span class="p">:</span> <span class="s2">"token </span><span class="si">#{</span><span class="n">auth_user</span><span class="o">.</span><span class="n">access_token</span><span class="si">}</span><span class="s2">"</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>このヘルパを <code>spec/spec_helper.rb</code> に追加します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">Requests</span><span class="p">:</span><span class="ss">:JsonHelpers</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:request</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">Requests</span><span class="p">:</span><span class="ss">:AuthenticationHelper</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:request</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>これでテストが通るようになりました。</p>

<h2>まとめ</h2>

<p>Rails で RESTful な API を作ることはよくあると思いますが、今までは API のテストもコントローラのテストで行っていました。</p>

<p>でも、request spec を使ったほうが <strong class="text-danger">呼び出しのURL</strong>、<strong class="text-danger">必要なパラメータ</strong>、<strong class="text-danger">出力形式</strong> を素直にテストとして書けるので、API のテストは request spec を使うようにするといいかなと思います。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TitaniumのHTTPClientでRESTfulリクエストを送る]]></title>
    <link href="http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful/"/>
    <updated>2014-02-17T10:24:58+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/17/titanium-http-client-restful/</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcelerator.com/titanium/" rel="external nofollow" title="Titanium Mobile">Titanium Mobile</a> の <code>Titanium.Network.HTTPClient</code> を使って RESTful リクエストを送る場合の注意点です。</p>

<p>Titanium の <code>HTTPClient</code> で <code>DELETE</code> のときに <code>send</code> でパラメータを送ると <code>POST</code> リクエストになってしまいます。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://www.appcelerator.com/titanium/" rel="external nofollow" title="Titanium Mobile Development Environment">Titanium Mobile Development Environment</a></p>

<ul>
<li>Titanium 3.2.1.GA</li>
</ul>
<!-- more --><p>Titanium の <code>HTTPClient</code> は <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> などのメソッドに対応していて、標準で RESTful リクエストを送れるようになっています。</p>

<h3>GET の例</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">'http://localhost:9292/'</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Network</span><span class="p">.</span><span class="nx">createHTTPClient</span><span class="p">({</span>
</span><span class="line">    <span class="nx">onload</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">"Received text: "</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span> <span class="p">},</span>
</span><span class="line">    <span class="nx">onerror</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">"Receive Error: "</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010286b4a8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010286b318&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{}
127.0.0.1 - - [17/Feb/2014 10:29:45] "GET / HTTP/1.1" 200 - 0.0006
</code></pre>

<h3>POST の例</h3>

<p><code>client.open('GET', url)</code> を <code>client.open('POST', url)</code> に変えて実行します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:43:06] "POST / HTTP/1.1" 200 - 0.0005
</code></pre>

<h3>PUT と DELETE の例</h3>

<p>同じように <code>PUT</code> と <code>DELETE</code> でも試してみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'PUT'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:45:32] "PUT / HTTP/1.1" 200 - 0.0005
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'DELETE'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : DELETE"
"REQUEST_URI : http://localhost:9292/"
"QUERY_STRING : "
...
{}
127.0.0.1 - - [17/Feb/2014 10:46:28] "DELETE / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>client.send</code> でパラメータを送信しなければ、<code>open</code> で渡したメソッドでリクエストが投げられています。</p>

<h2>HTTPClient でパラメータを渡して <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> してみる</h2>

<p>次は、パラメータを渡して試してみます。</p>

<p><code>GET</code> は <code>send</code> メソッドにパラメータを渡すのではなく URL にクエリを設定して送ります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">'http://localhost:9292/'</span><span class="p">;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">Network</span><span class="p">.</span><span class="nx">createHTTPClient</span><span class="p">({</span>
</span><span class="line">    <span class="nx">onload</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">"Received text: "</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span> <span class="p">},</span>
</span><span class="line">    <span class="nx">onerror</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">"Receive Error: "</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">url</span> <span class="o">+</span> <span class="s1">'?name=hamasyou'</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : GET"
"REQUEST_URI : http://localhost:9292/?name=hamasyou"
"QUERY_STRING : name=hamasyou"
"GATEWAY_INTERFACE : CGI/1.1"
"PATH_INFO : /"
"REMOTE_ADDR : 127.0.0.1"
"REMOTE_HOST : localhost"
"SCRIPT_NAME : "
"SERVER_NAME : localhost"
"SERVER_PORT : 9292"
"SERVER_PROTOCOL : HTTP/1.1"
"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"
"HTTP_HOST : localhost:9292"
"HTTP_X_TITANIUM_ID : 3659d1d4-77c2-4ffc-96d6-20b9d2251f74"
"HTTP_ACCEPT_ENCODING : gzip"
"HTTP_USER_AGENT : Appcelerator Titanium/3.2.1.GA (iPhone Simulator/7.0.3; iPhone OS; ja_JP;)"
"HTTP_CONNECTION : close"
"HTTP_X_REQUESTED_WITH : XMLHttpRequest"
"rack.version : [1, 2]"
"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001019451b8&gt;"
"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x00000101945140&gt;"
"rack.multithread : true"
"rack.multiprocess : false"
"rack.run_once : false"
"rack.url_scheme : http"
"HTTP_VERSION : HTTP/1.1"
"REQUEST_PATH : /"
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:49:41] "GET /?name=hamasyou HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>GET</code> で送られています。次は <code>POST</code> で送ってみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">'hamasyou'</span><span class="p">});</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>POST</code> は <code>client.send</code> にパラメータを渡して送ります。<code>POST</code> のデフォルトの <code>Content-Type</code> は <code>application/x-www-form-urlencoded</code> になります。</p>

<pre><code class="console">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 13"
"CONTENT_TYPE : application/x-www-form-urlencoded; charset=utf-8"
"QUERY_STRING : "
...
{"name"=&gt;"hamasyou"}
127.0.0.1 - - [17/Feb/2014 10:52:10] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>POST</code> で <code>Content-Type: application/json</code> で送る場合は、<code>HTTPClient#setRequestHeader</code> で設定します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">'hamasyou'</span><span class="p">}));</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:56:20] "POST / HTTP/1.1" 200 - 0.0009
</code></pre>

<p><code>PUT</code> と <code>DELETE</code> も <code>send</code> でパラメータを送ってみます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'PUT'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">'hamasyou'</span><span class="p">}));</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : PUT"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:57:49] "PUT / HTTP/1.1" 200 - 0.0006
</code></pre>

<p><code>PUT</code> はうまくいきました。次は <code>DELETE</code> です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'DELETE'</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json'</span><span class="p">);</span>
</span><span class="line"><span class="nx">client</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">'hamasyou'</span><span class="p">}));</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<pre><code class="console">"REQUEST_METHOD : POST"
"REQUEST_URI : http://localhost:9292/"
"CONTENT_LENGTH : 19"
"CONTENT_TYPE : application/json"
"QUERY_STRING : "
...
"{\"name\":\"hamasyou\"}"
127.0.0.1 - - [17/Feb/2014 10:58:52] "POST / HTTP/1.1" 200 - 0.0006
</code></pre>

<p>なんと、<code>POST</code> リクエストになってしまいました。。<code>DELETE</code> メソッドだけ、パラメータを <code>body</code> 部分に含めると <code>POST</code> リクエストになってしまうみたいです。。</p>

<p>OAuth 対応の API 等で access_token をパラメータに含めてリクエストする様な API を呼び出すときは要注意です。</p>

<p>できるだけ、認証情報は HTTP Header を使うようにした方がいいのかもしれません。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[open-uri-postを使うとrest-clientが変な動きするをする]]></title>
    <link href="http://hamasyou.com/blog/2014/02/16/ruby-open-uri-post-rest-client/"/>
    <updated>2014-02-16T21:45:53+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/16/ruby-open-uri-post-rest-client/</id>
    <content type="html"><![CDATA[<p>ruby の <code>open-uri</code> を POST に対応させる <code>open-uri-post</code> というライブラリがありますが、これを使うと <code>rest-client</code> の gem が変な動きをするようです。</p>

<!-- more -->


<p><code>open-uri-post</code> を <code>require</code> すると <code>RestClient.post</code> が GET のリクエストになってうまくリクエストできなくなってしまいました。。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://d.hatena.ne.jp/urekat/20070201/1170349097" rel="external nofollow" title="[ruby]open-uriをPOST対応させる">[ruby]open-uriをPOST対応させる</a></p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://github.com/rest-client/rest-client" rel="external nofollow" title="rest-client/rest-client">rest-client/rest-client</a></p>

<p>下のサンプルでは、そもそもリクエストが送れなかったりもします。。</p>

<h3>open-uri-post だけの場合</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'./open-uri-post.rb'</span>
</span><span class="line"><span class="nb">open</span><span class="p">(</span><span class="s1">'http://localhost:9292'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'postdata'</span> <span class="o">=&gt;</span> <span class="s1">'name=hamasyou'</span><span class="p">})</span><span class="o">.</span><span class="n">read</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td>
<td class="code"><pre><code class="console"><span class="line"><span class="go">"CONTENT_LENGTH : 13"</span>
</span><span class="line"><span class="go">"CONTENT_TYPE : application/x-www-form-urlencoded"</span>
</span><span class="line"><span class="go">"GATEWAY_INTERFACE : CGI/1.1"</span>
</span><span class="line"><span class="go">"PATH_INFO : /"</span>
</span><span class="line"><span class="go">"QUERY_STRING : "</span>
</span><span class="line"><span class="go">"REMOTE_ADDR : 127.0.0.1"</span>
</span><span class="line"><span class="go">"REMOTE_HOST : localhost"</span>
</span><span class="line"><span class="go">"REQUEST_METHOD : POST"</span>
</span><span class="line"><span class="go">"REQUEST_URI : http://localhost:9292/"</span>
</span><span class="line"><span class="go">"SCRIPT_NAME : "</span>
</span><span class="line"><span class="go">"SERVER_NAME : localhost"</span>
</span><span class="line"><span class="go">"SERVER_PORT : 9292"</span>
</span><span class="line"><span class="go">"SERVER_PROTOCOL : HTTP/1.1"</span>
</span><span class="line"><span class="go">"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"</span>
</span><span class="line"><span class="go">"HTTP_ACCEPT_ENCODING : gzip;q=1.0,deflate;q=0.6,identity;q=0.3"</span>
</span><span class="line"><span class="go">"HTTP_ACCEPT : */*"</span>
</span><span class="line"><span class="go">"HTTP_USER_AGENT : Ruby"</span>
</span><span class="line"><span class="go">"HTTP_HOST : localhost:9292"</span>
</span><span class="line"><span class="go">"rack.version : [1, 2]"</span>
</span><span class="line"><span class="go">"rack.input : #&lt;Rack::Lint::InputWrapper:0x000001029c65f0&gt;"</span>
</span><span class="line"><span class="go">"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x000001029c6578&gt;"</span>
</span><span class="line"><span class="go">"rack.multithread : true"</span>
</span><span class="line"><span class="go">"rack.multiprocess : false"</span>
</span><span class="line"><span class="go">"rack.run_once : false"</span>
</span><span class="line"><span class="go">"rack.url_scheme : http"</span>
</span><span class="line"><span class="go">"HTTP_VERSION : HTTP/1.1"</span>
</span><span class="line"><span class="go">"REQUEST_PATH : /"</span>
</span><span class="line"><span class="go">{"name"=&gt;"hamasyou"}</span>
</span><span class="line"><span class="go">127.0.0.1 - - [16/Feb/2014 22:02:26] "POST / HTTP/1.1" 200 - 0.0005</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>CONTENT_LENGTH: 13</code> になっていて、パラメータもきちんと送れています。</p>

<h3>rest-client だけの場合</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'rest_client'</span>
</span><span class="line"><span class="no">RestClient</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">'http://localhost:9292'</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">'hamasyou'</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td>
<td class="code"><pre><code class="console"><span class="line"><span class="go">"CONTENT_LENGTH : 13"</span>
</span><span class="line"><span class="go">"CONTENT_TYPE : application/x-www-form-urlencoded"</span>
</span><span class="line"><span class="go">"GATEWAY_INTERFACE : CGI/1.1"</span>
</span><span class="line"><span class="go">"PATH_INFO : /"</span>
</span><span class="line"><span class="go">"QUERY_STRING : "</span>
</span><span class="line"><span class="go">"REMOTE_ADDR : 127.0.0.1"</span>
</span><span class="line"><span class="go">"REMOTE_HOST : localhost"</span>
</span><span class="line"><span class="go">"REQUEST_METHOD : POST"</span>
</span><span class="line"><span class="go">"REQUEST_URI : http://localhost:9292/"</span>
</span><span class="line"><span class="go">"SCRIPT_NAME : "</span>
</span><span class="line"><span class="go">"SERVER_NAME : localhost"</span>
</span><span class="line"><span class="go">"SERVER_PORT : 9292"</span>
</span><span class="line"><span class="go">"SERVER_PROTOCOL : HTTP/1.1"</span>
</span><span class="line"><span class="go">"SERVER_SOFTWARE : WEBrick/1.3.1 (Ruby/2.1.0/2013-12-25)"</span>
</span><span class="line"><span class="go">"HTTP_ACCEPT : */*; q=0.5, application/xml"</span>
</span><span class="line"><span class="go">"HTTP_ACCEPT_ENCODING : gzip, deflate"</span>
</span><span class="line"><span class="go">"HTTP_USER_AGENT : Ruby"</span>
</span><span class="line"><span class="go">"HTTP_HOST : localhost:9292"</span>
</span><span class="line"><span class="go">"rack.version : [1, 2]"</span>
</span><span class="line"><span class="go">"rack.input : #&lt;Rack::Lint::InputWrapper:0x0000010299d380&gt;"</span>
</span><span class="line"><span class="go">"rack.errors : #&lt;Rack::Lint::ErrorWrapper:0x0000010299d290&gt;"</span>
</span><span class="line"><span class="go">"rack.multithread : true"</span>
</span><span class="line"><span class="go">"rack.multiprocess : false"</span>
</span><span class="line"><span class="go">"rack.run_once : false"</span>
</span><span class="line"><span class="go">"rack.url_scheme : http"</span>
</span><span class="line"><span class="go">"HTTP_VERSION : HTTP/1.1"</span>
</span><span class="line"><span class="go">"REQUEST_PATH : /"</span>
</span><span class="line"><span class="go">{"name"=&gt;"hamasyou"}</span>
</span><span class="line"><span class="go">127.0.0.1 - - [16/Feb/2014 22:03:29] "POST / HTTP/1.1" 200 - 0.0005</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>こっちも、きちんとリクエストできています。</p>

<h3>open-uri-post と rest-client を同時に使うと</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">'./open-uri-post.rb'</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'rest_client'</span>
</span><span class="line">
</span><span class="line"><span class="c1"># open('http://localhost:9292', {'postdata' =&gt; 'name=hamasyou'}).read</span>
</span><span class="line"><span class="no">RestClient</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">'http://localhost:9292'</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">'hamasyou'</span><span class="p">)</span>
</span><span class="line"><span class="no">RestClient</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'http://localhost:9292'</span><span class="p">,</span> <span class="ss">params</span><span class="p">:</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s1">'hamasyou'</span><span class="p">})</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>open-uri-post</code> の方の <code>open</code> メソッドはうまく動きますが、RestClient が動かなくなります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="console"><span class="line"><span class="go">/vendor/bundle/ruby/2.1.0/gems/rest-client-1.6.7/lib/restclient/abstract_response.rb:48:in `return!': 408 Request Timeout (RestClient::RequestTimeout)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>RequestTimeout が出てしまいました。。ちなみに、<code>GET</code> リクエストの方はうまく動きます。<code>open-uri-post</code> と <code>rest-client</code> は一緒に使わないほうがいいですね。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[リア充爆発しろで本当に爆発したシーン]]></title>
    <link href="http://hamasyou.com/blog/2014/02/16/sm20183528/"/>
    <updated>2014-02-16T01:52:46+09:00</updated>
    <id>http://hamasyou.com/blog/2014/02/16/sm20183528/</id>
    <content type="html"><![CDATA[<p><strong class="text-danger">リア充爆発しろ</strong> で、爆発した瞬間を初めて見た。。泣いた。</p>

<!-- more -->


<p>ガンダム00 の「ライルvsアニュー 命がけの恋」より。リア充爆発しました。セッちゃん。。。</p>

<script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm20183528?w=698"></script><p></p>
<noscript><a href="http://www.nicovideo.jp/watch/sm20183528" rel="external nofollow" title="【ニコニコ動画】ガンダム00　ライルvsアニュー　命がけの恋">【ニコニコ動画】ガンダム00　ライルvsアニュー　命がけの恋</a></noscript>

<iframe width="312" height="176" src="http://ext.nicovideo.jp/thumb/sm20183528" scrolling="no" style="border:solid 1px #CCC;" frameborder="0"><a href="http://www.nicovideo.jp/watch/sm20183528" rel="external nofollow" title="【ニコニコ動画】ガンダム00　ライルvsアニュー　命がけの恋">【ニコニコ動画】ガンダム00　ライルvsアニュー　命がけの恋</a></iframe>]]></content>
  </entry>
  
</feed>
