<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title><![CDATA[それはBooks]]></title>
  <link>http://hamasyou.com</link>
  <pubDate>Wed, 16 Dec 2015 07:44:48 +0900</pubDate>
  <description>
  コンピュータ書籍, デザイン書籍, ビジネス書籍, その他の書評を行うぶろぐ
  </description>
  <atom:link href="http://hamasyou.com/rss.xml" rel="self" type="application/rss+xml"/>

  
  <item>
    <title><![CDATA[Reactive Extensions Basic]]></title>
    <link>http://hamasyou.com/blog/2015/12/15/reactive-extensions-basic/</link>
    <guid>http://hamasyou.com/blog/2015/12/15/reactive-extensions-basic/</guid>
    <description>
      <![CDATA[<p><strong class="text-danger">Reactive Extensions (Rx)</strong> の覚書です。主に RxSwift をベースにしていますが、ReactiveX 全般に通じると思います。</p>

<p>細かいニュアンスは間違っているかも。。</p>

<p>基本用語の整理です。</p>

<!-- more -->




<div id="toc"></div>


<h2>Reactive Extensions</h2>

<p>大雑把に言うと、<strong class="text-danger">Observer Pattern (オブザーバパターン)</strong> と <strong class="text-danger">Stream/Sequence Programming</strong> を合わせたものが <strong class="text-danger">Reactive Extensions</strong> です。</p>

<h3>Observable</h3>

<p>オブザーバパターンにおいて、観測される対象を Subject と呼びますが、Rx では観測される対象のことを <strong class="text-danger">Observable</strong> と呼びます。観測する側は <em>Observer (オブザーバ）</em> なので、観測される側は <em>Observable</em> なわけです。</p>

<p>Rx では、Observable なものを <code>subscribe</code> (購読) することで、Observable から送られてくるデータを受け取ります。この、Observable からデータが流れてくることを <strong class="text-danger">Stream (ストリーム)</strong> と呼びます。流れてくるデータは <strong class="text-danger">Element</strong> と呼ばれます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">someObservable</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribe</span> <span class="p">{</span> <span class="p">(</span><span class="nl">e</span><span class="p">:</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">        <span class="k">switch</span> <span class="n">e</span> <span class="p">{</span>
</span><span class="line">        <span class="k">case</span> <span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="k">let</span> <span class="n">val</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">        <span class="k">case</span> <span class="p">.</span><span class="n">Error</span><span class="p">(</span><span class="k">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">        <span class="k">case</span> <span class="p">.</span><span class="nl">Completed</span><span class="p">:</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">.</span><span class="n">scopedDispose</span><span class="p">()</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>ストリームには状態が3種類あり、それぞれ <code>Next</code>、<code>Error</code>、<code>Completed</code> になります。</p>

<h4>Next</h4>

<p>ストリームから次のデータが流れてきたことを表します。正常処理と考えて構いません。</p>

<h4>Error</h4>

<p>Observable な対象が何かしらエラーを起こし、観測したかったデータが流れてこなかったことを表します。Rx では、Error を起こしたストリームは閉じられます。つまり、次のデータが流れてこないことを表します。</p>

<h4>Completed</h4>

<p>Observable な対象のストリームが閉じられ、この Observable な対象からは今後データが流れてこないことを表します。</p>

<h4>dispose</h4>

<p>観測を取りやめたい時には、<code>dispose</code> を呼び出します。いつ dispose するかを使い分けられるように、<code>Dispose</code> の実装がいろいろあります。</p>

<h3>Subject</h3>

<p><strong class="text-danger">Observable</strong> は観測対象のことでしたが、Rx においては観測可能な事柄のことを <strong class="text-danger">Subject (事象)</strong> と呼ぶほうが一般的だったりします。Subject を観測するわけですが、観測するデータのことは <strong class="text-danger">Behavior (振る舞い)</strong> と呼ばれます。<code>Subject</code> / <code>Behavior</code> は Reactive Extensions における一般的な説明となりますが、こと Rx Programming においては、<code>Observable</code> と <code>Subject</code>、<code>Element</code> と <code>Behavior</code> は似て非なるものとして扱われています。</p>

<h2>Hot and Cold Observables</h2>

<p>Observable な対象は、2つの種類にわけられます。<code>Hot</code> と <code>Cold</code> です。</p>

<h3>Hot Observable</h3>

<p>Hot な Observable とは、観測対象である Observable が作られたときから、任意のタイミングでデータを送信することができるものになります。</p>

<p>実はこの Hot Observable のことを、Rx Programming では <em>Subject</em> と呼ばれています。Subject は任意のタイミングでデータをストリームに流すことができ、同時に Observable なわけです。</p>

<p>Subject は任意のタイミングで <strong class="text-danger">Behavior (振る舞い)</strong> を決められることから、Subject / Behavior はセットで使われる言葉になります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">PublishSubject</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">msg</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">msg</span><span class="p">.</span><span class="n">onNext</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">)</span>
</span><span class="line"><span class="n">msg</span><span class="p">.</span><span class="n">onCompleted</span><span class="p">()</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Cold Observable</h3>

<p>Cold な Obserable は、任意のタイミングでデータを流すことができません。いつデータが流れてくるのかわかりませんし、観測対象がいなければ、そもそも振る舞いが起きることもありません。</p>

<p>よく、API 通信を Observable にしますが、subscribe (観測) を忘れると、API 呼び出しがされないことになりますので注意が必要です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">API</span><span class="p">.</span><span class="n">call</span><span class="p">()</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// When to occur?</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Rx でプログラミングすると何が嬉しいか</h2>

<h3>テスタビリティが向上</h3>

<p>Rx は UI プログラミングで語られることが多いと思いますが、プログラムのあらゆる境界を Observable でつなぐことで、テスタビリティが向上します。</p>

<p>Observable でつなぐことにより、直接のデータの生成元に依存せずにプログラムを記述することができるようになるので、テスト時だけデータ生成部分をいじることで、例えば API 通信結果を画面に表示するようなプログラムでも、API 通信を行うことなくデータを生成し、Stream に流すことで色々な依存関係を排除することが出来るのです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="nf">something</span><span class="p">(</span><span class="nl">dataSource</span><span class="p">:</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">DataSource</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">dataSource</span><span class="p">.</span>
</span><span class="line">        <span class="n">subscribeNext</span> <span class="p">{</span>
</span><span class="line">            <span class="c1">// do something</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// development</span>
</span><span class="line"><span class="n">something</span><span class="p">(</span><span class="n">API</span><span class="p">.</span><span class="n">call</span><span class="p">())</span>
</span><span class="line"><span class="c1">// test</span>
</span><span class="line"><span class="n">something</span><span class="p">(</span><span class="n">just</span><span class="p">(</span><span class="n">DummyDataSource</span><span class="p">()))</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>非同期処理</h3>

<p>また、Rx には Stream の観測を任意のスレッドで行うスケジューリングの機能が備わっているものがほとんどですので、時間の掛かるデータ生成処理はバックグラウンドで行い、UI の表示処理のところだけメインスレッドで行うといったことを容易に行なえます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">API</span><span class="p">.</span><span class="n">call</span><span class="p">()</span>
</span><span class="line">    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mf">0.</span><span class="n">toViewModel</span><span class="p">()</span> <span class="p">}</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribeOn</span><span class="p">(</span><span class="n">BackgroundScheduler</span><span class="p">.</span><span class="n">sharedInstance</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="n">observeOn</span><span class="p">(</span><span class="n">MainScheduler</span><span class="p">.</span><span class="n">sharedInstance</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="n">viewModel</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">        <span class="c1">// UI バインディング</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">.</span><span class="n">addDisposeBag</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>データソースの更新をリアルタイムに同期</h3>

<p>プログラムを書いていると、データソースの値を加工して別のところで使うという場面が多々あります。</p>

<p>このとき、何も考えずにプログラムすると、データソースが変更されても結果は変わらないという挙動になります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line"><span class="k">var</span> <span class="n">c</span> <span class="o">=</span> <span class="s">""</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">    <span class="n">c</span> <span class="o">=</span> <span class="s">"\(a + b) is positive"</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>        <span class="c1">// ""</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>こういった挙動でかまわないという場合もあるでしょうが、ほとんどの場合データソースの変化に合わせて挙動が変わってくれたほうが嬉しかったりします。そんな時は全部 Observable にします。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="k">let</span> <span class="n">b</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">combineLatest</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">+</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span>
</span><span class="line">            <span class="p">.</span><span class="n">filter</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class="line">            <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">\</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="kt">is</span> <span class="n">positive</span><span class="s">" }            </span>
</span><span class="line">
</span><span class="line"><span class="n">c</span><span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span>
</span><span class="line">    <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">4</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Operators</h2>

<p>Rx には、Stream を操作するためのいろいろな演算が用意されています。Stream を別の形に変換する <code>map</code> や、複数の Stream を結合する <code>merge</code> や <code>concat</code> がなどがあります。</p>

<p>Stream の合成は使いドコロとしては API 通信などの時間の掛かる処理とキャッシュデータを返すストリームとを合成するなどが考えられます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">sequenceOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">*</span> <span class="err">$</span><span class="mi">0</span> <span class="p">}</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span>
</span><span class="line">        <span class="n">print</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">.</span><span class="n">scopedDispose</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">dataFromCache</span> <span class="o">=</span> <span class="n">CacheStore</span><span class="p">.</span><span class="n">fromCache</span><span class="p">()</span>
</span><span class="line"><span class="n">dataFromCache</span><span class="p">.</span><span class="n">concat</span><span class="p">(</span><span class="n">API</span><span class="p">.</span><span class="n">call</span><span class="p">())</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">.</span><span class="n">addDisposeBag</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>



]]>
    </description>
    <pubDate>Tue, 15 Dec 2015 11:11:45 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[[Swift] RxSwift で iBeacon の RangeBeaconsInRegion を 5秒間隔で受け取る方法]]></title>
    <link>http://hamasyou.com/blog/2015/11/25/rxswift-de-ibeacon-false-rangebeaconsinregion-wo-5miao-jian-ge-deshou-kequ-rufang-fa/</link>
    <guid>http://hamasyou.com/blog/2015/11/25/rxswift-de-ibeacon-false-rangebeaconsinregion-wo-5miao-jian-ge-deshou-kequ-rufang-fa/</guid>
    <description>
      <![CDATA[<p>CoreLocation を使って iBeacon の Ranging を行う場合、iOS だと 1秒間隔で通知されます。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://enamelsystems.com/0011/z" rel="external nofollow" title="[参考] iBeacon(3) - リージョン監視とレンジング - Enamel Systems">[参考] iBeacon(3) - リージョン監視とレンジング - Enamel Systems</a></p>

<p>そこで、1秒間隔だと通知間隔が短すぎるので、5秒間隔とか1分間隔とかに変えたい時にどうするかですが、<code>CLLocationManager</code> クラスに設定があればよかったのですが、特になさそうなので、<code>RxSwift</code> を使ってストリームのフィルタで対応する方法のメモです。</p>

<p><code>CLLocationManager</code> の初期設定とかは参考サイトを見てください。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://github.com/ReactiveX/RxSwift/" rel="external nofollow" title="ReactiveX/RxSwift">ReactiveX/RxSwift</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">locationManager</span><span class="p">.</span><span class="n">rx_didRangeBeaconsInRegion</span>
</span><span class="line">    <span class="p">.</span><span class="n">sample</span><span class="p">(</span><span class="n">interval</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">MainScheduler</span><span class="p">.</span><span class="n">sharedInstance</span><span class="p">))</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">(</span><span class="nl">tuple</span><span class="p">:</span> <span class="p">([</span><span class="bp">CLBeacon</span><span class="p">]</span><span class="o">!</span><span class="p">,</span> <span class="bp">CLBeaconRegion</span><span class="o">!</span><span class="p">))</span> <span class="k">in</span>
</span><span class="line">        <span class="n">debugPrint</span><span class="p">(</span><span class="s">"beacons: \(tuple.0), region: \(tuple.1)"</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">.</span><span class="n">addDisposableTo</span><span class="p">(</span><span class="n">disposeBag</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>Rx</code> の <code>sample</code> を使って、ストリームを <code>interval</code> 毎にサンプリングしてやるだけです。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://www.introtorx.com/content/v1.0.10621.0/13_TimeShiftedSequences.html#Sample" rel="external nofollow" title="Time-shifted sequences - Introduction to Rx">Time-shifted sequences - Introduction to Rx</a></p>

<p><code>RxSwift</code> も使いやすくて、めっちゃ便利です！</p>
]]>
    </description>
    <pubDate>Wed, 25 Nov 2015 15:25:47 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[[iOS/Swift]ReactiveCocoa 3.0 で ViewModel から Signal をセルフ・コントロールするイディオム]]></title>
    <link>http://hamasyou.com/blog/2015/08/13/ios-swift-reactivecocoa-signal-viewmodel/</link>
    <guid>http://hamasyou.com/blog/2015/08/13/ios-swift-reactivecocoa-signal-viewmodel/</guid>
    <description>
      <![CDATA[<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa" rel="external nofollow" title="ReactiveCocoa">ReactiveCocoa</a> が v.3.0-RC.1 がでて、そろそろ製品に Swift で ReactiveCocoa が使えるようになりそうな感じになってきました。</p>

<p>いつも <code>Signal</code> を自分で制御するイディオムを忘れてしまうので、メモ書きです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">import</span> <span class="n">Foundation</span>
</span><span class="line"><span class="k">import</span> <span class="n">UIKit</span>
</span><span class="line"><span class="k">import</span> <span class="n">ReactiveCocoa</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="n">MyViewModel</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="p">(</span><span class="n">changed</span><span class="p">,</span> <span class="n">sink</span><span class="p">)</span> <span class="o">=</span> <span class="n">Signal</span><span class="o">&lt;</span><span class="n">Void</span><span class="p">,</span> <span class="n">NoError</span><span class="o">&gt;</span><span class="p">.</span><span class="n">pipe</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">doAction</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// do something</span>
</span><span class="line">        <span class="n">sendNext</span><span class="p">(</span><span class="n">sink</span><span class="p">,</span> <span class="p">())</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nl">MyViewController</span> <span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="n">viewModel</span> <span class="o">=</span> <span class="n">MyViewModel</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">        <span class="n">viewModel</span><span class="p">.</span><span class="n">changed</span> <span class="o">|&gt;</span> <span class="n">observe</span><span class="p">(</span><span class="nl">next</span><span class="p">:</span> <span class="n">debugPrintln</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="n">viewModel</span><span class="p">.</span><span class="n">doAction</span><span class="p">()</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>

]]>
    </description>
    <pubDate>Thu, 13 Aug 2015 11:57:28 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[[iOS]Swift の Dollar ライブラリの each 関数を SequenceType に対応する拡張]]></title>
    <link>http://hamasyou.com/blog/2015/08/12/ios-swift-dollar-each-sequencetype/</link>
    <guid>http://hamasyou.com/blog/2015/08/12/ios-swift-dollar-each-sequencetype/</guid>
    <description>
      <![CDATA[<p>Swift のメモ書きです。</p>

<p><a href="https://github.com/ankurp/Dollar.swift" rel="external nofollow" title="ankurp/Dollar.swift">ankurp/Dollar.swift</a> という JavaScript の Lo-Dash や Underscore と同じ感じでコレクションを扱うためのライブラリがありますが、 <code>each</code> が配列しか受け付けることが出来ないので、<code>SequenceType</code> を受け取れるように拡張する方法のメモです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">import</span> <span class="n">Dollar</span>
</span><span class="line">
</span><span class="line"><span class="k">extension</span> <span class="err">$</span> <span class="p">{</span>
</span><span class="line">    <span class="k">class</span> <span class="k">func</span> <span class="n">each</span><span class="o">&lt;</span><span class="nl">T</span><span class="p">:</span> <span class="n">SequenceType</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">array</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="nl">callback</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">.</span><span class="n">Generator</span><span class="p">.</span><span class="n">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="n">elem</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
</span><span class="line">            <span class="n">callback</span><span class="p">(</span><span class="n">elem</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">array</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="err">$</span><span class="p">.</span><span class="n">each</span><span class="p">([</span><span class="s">"a"</span><span class="p">,</span> <span class="s">"b"</span><span class="p">,</span> <span class="s">"c"</span><span class="p">])</span> <span class="p">{</span> <span class="p">(</span><span class="nl">s</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="err">$</span><span class="p">.</span><span class="n">each</span><span class="p">([</span><span class="s">"key"</span><span class="o">:</span> <span class="s">"val"</span><span class="p">])</span> <span class="p">{</span> <span class="p">(</span><span class="nl">e</span><span class="p">:</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">))</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="s">"\(e.0) = \(e.1)"</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="c1">// a</span>
</span><span class="line"><span class="c1">// b</span>
</span><span class="line"><span class="c1">// c</span>
</span><span class="line"><span class="c1">// key = val</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>

]]>
    </description>
    <pubDate>Wed, 12 Aug 2015 16:47:11 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[Swift の Array と Dictionary の Extension（each と map を実装した）]]></title>
    <link>http://hamasyou.com/blog/2015/06/10/swift-array-dictionary-extension/</link>
    <guid>http://hamasyou.com/blog/2015/06/10/swift-array-dictionary-extension/</guid>
    <description>
      <![CDATA[<h2>Array に each を実装してみた。</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">extension</span> <span class="n">Array</span> <span class="p">{</span>
</span><span class="line">    <span class="k">func</span> <span class="n">each</span><span class="p">(</span><span class="nl">block</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class="line">            <span class="n">block</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">each</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">block</span><span class="p">:</span> <span class="p">(</span><span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class="line">            <span class="n">block</span><span class="p">(</span><span class="n">item</span> <span class="kt">as</span><span class="o">!</span> <span class="n">U</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">eachWithIndex</span><span class="p">(</span><span class="nl">block</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span> <span class="k">in</span> <span class="n">enumerate</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">block</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">eachWithIndex</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">block</span><span class="p">:</span> <span class="p">(</span><span class="n">U</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span> <span class="k">in</span> <span class="n">enumerate</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">block</span><span class="p">(</span><span class="n">item</span> <span class="kt">as</span><span class="o">!</span> <span class="n">U</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>使い方はこんな感じ。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="n">each</span> <span class="p">{</span> <span class="p">(</span><span class="nl">n</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="n">each</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="n">eachWithIndex</span> <span class="p">{</span> <span class="p">(</span><span class="nl">n</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">i</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="k">in</span> <span class="n">println</span><span class="p">(</span><span class="s">"index \(i), n \(n)"</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="n">eachWithIndex</span> <span class="p">{</span> <span class="n">println</span><span class="p">(</span><span class="s">"index \($1), n \($0)"</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>配列の中身が <code>AnyObject</code> だった時に、型指定するときとしない時でどっちも動くようにするのに、メソッドを2つ定義しました。</p>

<p>このへん、<em>Generics</em> の達人のかたに、もっといい書き方あるよって教えて欲しいです。</p>

<h2>Swift の Dictionary に map を実装してみた。</h2>

<p>ついでに <code>reduce</code> も。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">extension</span> <span class="n">Dictionary</span> <span class="p">{</span>
</span><span class="line">    <span class="k">func</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">transform</span><span class="p">:</span> <span class="p">(</span><span class="n">Key</span><span class="p">,</span> <span class="n">Value</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">T</span><span class="p">]</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Swift</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">transform</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">reduce</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">initial</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="nl">combine</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="p">(</span><span class="n">Key</span><span class="p">,</span> <span class="n">Value</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Swift</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">initial</span><span class="p">,</span> <span class="n">combine</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>使い方はこんな感じ。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="n">dict</span> <span class="o">=</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">String</span><span class="p">]()</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="s">"hello"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"world"</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">array</span> <span class="o">=</span> <span class="n">dict</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="nl">k</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">v</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="k">in</span>
</span><span class="line">    <span class="k">return</span> <span class="n">v</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">println</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>      <span class="c1">// ["world"]</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">dict</span> <span class="o">=</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">Int</span><span class="p">]()</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="s">"a"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="s">"b"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="s">"c"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="s">"d"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="s">"e"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class="line"><span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">dict</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="k">in</span> <span class="n">n</span> <span class="o">+</span> <span class="n">d</span><span class="mf">.1</span> <span class="p">}</span>    <span class="c1">// 15</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Ruby の map っぽい感じで使えるにしたかったので。</p>
]]>
    </description>
    <pubDate>Wed, 10 Jun 2015 12:01:16 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[WEB+DB PRESS vol.85]]></title>
    <link>http://hamasyou.com/blog/2015/02/22/web-plus-db-press-vol-dot-85/</link>
    <guid>http://hamasyou.com/blog/2015/02/22/web-plus-db-press-vol-dot-85/</guid>
    <description>
      <![CDATA[<p>『<a href="http://www.amazon.co.jp/gp/product/4774171417?ie=UTF8&amp;camp=247&amp;creativeASIN=4774171417&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="WEB+DB PRESS vol.85">WEB+DB PRESS vol.85</a>』の特集2. <strong class="text-danger">速習 リアクティブプログラミング</strong> を寄稿しました。 <strong class="text-danger">リアクティブ</strong> という、去年辺りに盛り上がったキーワードを、Webプログラミングの観点から整理するとこういうものだよね？っていうふんわりした感じで解説しています。</p>

<p>定義や概念などは、語るコンテキストで捉え方が違ったり、論争の元になるので、今回はあえてこういう定義付けをさけ、実践で利用する場合にどういうメリットがあるのか、どういうふうに使えばいいのかに焦点を当てました。</p>

<p>一部、寝ぼけていたのかおかしな部分があったりもしますが（<em>React.js が Flux アーキテクチャに則っているとか変なこと書いてます。。。</em>）、今号はいろいろおもしろい話が満載ですので、是非読んでみてください。</p>
]]>
    </description>
    <pubDate>Sun, 22 Feb 2015 11:33:24 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[[iOS8対応]UITableViewのSeparatorInsetsをゼロにする方法]]></title>
    <link>http://hamasyou.com/blog/2014/12/25/ios8-swift-uitableview-separatorinsets/</link>
    <guid>http://hamasyou.com/blog/2014/12/25/ios8-swift-uitableview-separatorinsets/</guid>
    <description>
      <![CDATA[<h2>iOS8 から separatorInset だけだと区切り線が広がらない</h2>

<p>こんにちは。iOS8 から SeparatorInsets をゼロにする方法が変わりました。今までの <code>UITableView</code> の <code>separatorInset</code> に <code>UIEdgeInsetsZero</code> を入れるだけだと、iOS7 では効きますが、iOS8 では効かなくなりました。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">tableView</span><span class="p">.</span><span class="n">separatorInset</span> <span class="o">=</span> <span class="n">UIEdgeInsetsZero</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><img src="http://hamasyou.com/images/2014-12-25-tableview.png" width="320" title='"図1"' alt='"図1"' class="img-thumbnail"></p>

<h2>iOS8 にも対応するには</h2>

<p>iOS8 からは <code>UIView</code> に追加された <code>layoutMargins</code> というプロパティにも <code>UIEdgeInsetsZero</code> をセットする必要があります。ただこのプロパティ、iOS8 以降でしか利用できないプロパティなので、分岐が必要になります。。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">tableView</span><span class="p">.</span><span class="n">layoutMargins</span> <span class="o">=</span> <span class="n">UIEdgeInsetsZero</span>
</span><span class="line"><span class="n">cell</span><span class="p">.</span><span class="n">layoutMargins</span> <span class="o">=</span> <span class="n">UIEdgeInsetsZero</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>全体に適用する簡単な例</h3>

<p>全体に適用するには UIAppearance を使うと便利です。iOS7 と iOS8 に対応したコードは次のように書けます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">version</span> <span class="o">=</span> <span class="bp">NSString</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="bp">UIDevice</span><span class="p">.</span><span class="n">currentDevice</span><span class="p">().</span><span class="n">systemVersion</span><span class="p">).</span><span class="n">doubleValue</span>
</span><span class="line">
</span><span class="line"><span class="bp">UITableView</span><span class="p">.</span><span class="n">appearance</span><span class="p">().</span><span class="n">separatorInset</span> <span class="o">=</span> <span class="n">UIEdgeInsetsZero</span>
</span><span class="line"><span class="bp">UITableViewCell</span><span class="p">.</span><span class="n">appearance</span><span class="p">().</span><span class="n">separatorInset</span> <span class="o">=</span> <span class="n">UIEdgeInsetsZero</span>
</span><span class="line"><span class="k">if</span> <span class="n">version</span> <span class="o">&gt;=</span> <span class="mi">8</span> <span class="p">{</span>
</span><span class="line">    <span class="bp">UITableView</span><span class="p">.</span><span class="n">appearance</span><span class="p">().</span><span class="n">layoutMargins</span> <span class="o">=</span> <span class="n">UIEdgeInsetsZero</span>
</span><span class="line">    <span class="bp">UITableViewCell</span><span class="p">.</span><span class="n">appearance</span><span class="p">().</span><span class="n">layoutMargins</span> <span class="o">=</span> <span class="n">UIEdgeInsetsZero</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><img src="http://hamasyou.com/images/2014-12-25-tableview2.png" width="320" title='"図2"' alt='"図2"' class="img-thumbnail"></p>
]]>
    </description>
    <pubDate>Thu, 25 Dec 2014 11:03:14 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[[iOS] Auto Layout を使いこなす。UITableViewCell と UIScrollView 編]]></title>
    <link>http://hamasyou.com/blog/2014/10/09/ios-autolayout-scrollview-tablecell/</link>
    <guid>http://hamasyou.com/blog/2014/10/09/ios-autolayout-scrollview-tablecell/</guid>
    <description>
      <![CDATA[<p>iPhone6 と iPhone6 Plus が発売になり、本格的に iOS でも Android のように複数解像度に対応したやり方をしないといけなくなってきました。
iPhone5S までは、縦幅が伸びただけだったので、なんとなく <code>Auto Layout</code> を使っていても問題は表面化しづらかったのですが、
iPhone6 で横幅が伸びてしまったことで、適当に <code>Auto Layout</code> を使ってコーディングしていると残念なことになっているアプリが結構あります。</p>

<p>僕も iPhone アプリを開発しているのでこのあたりは結構気を使ってはいるんですが、いかんせん自分のやり方がほんとに正しいのか、やや疑問なところもあります。
そこで、今の自分のやり方を晒して、世の iPhone アプリ開発者の人に突っ込んでもらえればと思い記事を書くことにしました。</p>

<p>間違っている箇所もあると思いますので、ドンドンツッコミをお願いします！</p>

<!-- more -->


<h2>この記事で何が出来るようになりたいか</h2>

<p>このまとめ記事で、何が出来るようになりたいか。それは次の2点です。</p>

<ol>
<li>
<code>UITableViewCell</code> （可変長高さ）を <code>Auto Layout</code> を使ってキレイにつくりたい</li>
<li>
<code>UIScrollView</code> （可変コンテンツ）を <code>Auto Layout</code> を使ってキレイにつくりたい</li>
</ol>


<p>こんな感じのやつです。</p>

<p><img src="http://hamasyou.com/images/20141008/SS1.png" width="240" title='"可変長UITableViewCell"' alt='"可変長UITableViewCell"' class="img-thumbnail">
<img src="http://hamasyou.com/images/20141008/SS2.png" width="240" title='"Auto Layout を使った横スクロールの UIScrollView"' alt='"Auto Layout を使った横スクロールの UIScrollView"' class="img-thumbnail">
<img src="http://hamasyou.com/images/20141008/SS3.png" width="240" title='"Auto Layout を使った横スクロールの UIScrollView"' alt='"Auto Layout を使った横スクロールの UIScrollView"' class="img-thumbnail"></p>

<p><code>UILabel</code> の中身によって <code>UITableViewCell</code> の高さが変わるやつと、<code>UIScrollView</code> の中身をページングで切り替えるときに中身の個数を動的に差し替えるやつです。</p>

<p>それぞれ作り方をさらします。</p>

<p>ソースコードは</p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://github.com/hamasyou/autolayout" rel="external nofollow" title="hamasyou/autolayout">hamasyou/autolayout</a></p>

<p>にあるので、参考にしたい方はどうぞ。</p>

<h2>iOS8 以降だけに対応するのであれば</h2>

<p>ちなみに、iOS8 以降だけに対応するのであれば、<code>TableViewCell.xib</code> で <code>ContentView</code> に対して何も考えずに Auto Layout でレイアウトして、<code>TableViewController</code> を継承したクラスで次のように <code>tableView.rowHeight</code> に <code>UITableViewAutomaticDimension</code> を設定し、<code>tableView:estimatedHeightForRowAtIndexPath:</code> で <code>UITableViewAutomaticDimension</code> を返すようにするだけで解決します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="nl">MyViewClass</span> <span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span> <span class="bp">UITableViewDelegate</span> <span class="p">{</span>
</span><span class="line">    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="o">!</span>
</span><span class="line">
</span><span class="line">    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class="line">        <span class="n">tableView</span><span class="p">.</span><span class="n">rowHeight</span> <span class="o">=</span> <span class="n">UITableViewAutomaticDimension</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">estimatedHeightForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">UITableViewAutomaticDimension</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>tableView</code> に <code>estimatedRowHeight</code> というプロパティがありますが、これに <code>UITableViewAutomaticDimension</code> を設定して、<code>tableView:estimatedHeightForRowAtIndexPath:</code> を実装しない方法だと上手くいきません。バグなんじゃないか？？。。。</p>

<h2>Auto Layout のおさらい</h2>

<p>作り方を晒す前に、まずは <strong class="text-danger">Auto Layout</strong> のおさらいをしておきます。</p>

<p>Auto Layout は Storyboard やプログラムから「制約」を利用してレイアウトを組み立てるものです。基本的に Auto Layout に対応したアプリでは、
<code>UIView(frame: CGRectMake(xx, xx, xx, xx))</code> みたいな作成方法はしなくなります。</p>

<p>Auto Layout を使うと、&#8221;画面のこのコンポーネントから◯pxずらしてこのコンポーネントを配置する&#8221; や “このコンポーネントとこのコンポーネントのサイズを同じにする”
みたいなことをなんとなく直感的に記述（または、設定）できます。</p>

<p>Auto Layout を Strobyboard 上で設定すると、その制約が実際にコンポーネントに反映されるのは、<code>UIViewController#viewDidLayoutSubviews</code> のタイミングになるようです。</p>

<h2>UITableViewCell での Auto Layout の作用</h2>

<p>UITableViewCell で Auto Layout を使うときに注意しなければならないのは、<code>awakeFromNib</code> のタイミングでは、セルの Auto Layout が設定されていないということです。</p>

<p>まぁ、これは当然といえば当然で、カスタムの UITableViewCell は再利用を前提に作られるので、実際にセルのコンテンツが設定されるは <code>UITableViewDataSource#cellForRowAtIndexPath</code> の段階になるからです。
このメソッドの中でセルのコンテンツを設定するわけです。</p>

<h3>セルの高さが問い合わせられるのはセルのコンテンツを設定する前！！</h3>

<p>で、まぁ普通に UITableView を使っているとドハマリするのが、セルの高さを返す <code>UITableViewDelegate#heightForRowAtIndexPath</code> のメソッドが呼び出されるのが、<code>cellForRowAtIndexPath</code> の前ということです。
セルの高さを計算できるのはセルのコンテンツが設定された後なんじゃないの？って思うわけですが、高さの問い合わせが来るのはセルのコンテンツを設定する前なのです。。</p>

<p>じゃあ、どうするかというと、僕はもう割りきって、<code>heightForRowAtIndexPath</code> の中で <code>cellForRowAtIndexPath</code> を呼び出して、セルにコンテンツを設定した後にセルの高さを計算するようにしています。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>UITableViewController</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line">    <span class="c1">// MARK: - UITableViewDataSource</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nl">section</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">2</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">cellForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UITableViewCell</span> <span class="p">{</span>
</span><span class="line">        <span class="k">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">dequeueReusableCellWithIdentifier</span><span class="p">(</span><span class="s">"customCell"</span><span class="p">)</span> <span class="kt">as</span> <span class="n">CustomTableViewCell</span>
</span><span class="line">
</span><span class="line">        <span class="k">switch</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span> <span class="p">{</span>
</span><span class="line">        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class="line">            <span class="n">cell</span><span class="p">.</span><span class="n">thumbView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="s">"Image1"</span><span class="p">)</span>
</span><span class="line">            <span class="n">cell</span><span class="p">.</span><span class="n">labelView</span><span class="p">.</span><span class="n">text</span>  <span class="o">=</span> <span class="s">"いろはにほへとちりぬるをわかよたれそつねならむうゐのおくやまけふこえてあさきゆめみしゑひもせす色はにほへど散りぬるを我が世たれぞ常ならむ有為の奥山今日越えて浅き夢見じ酔ひもせず"</span>
</span><span class="line">        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class="line">            <span class="n">cell</span><span class="p">.</span><span class="n">thumbView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="s">"Image2"</span><span class="p">)</span>
</span><span class="line">            <span class="n">cell</span><span class="p">.</span><span class="n">labelView</span><span class="p">.</span><span class="n">text</span>  <span class="o">=</span> <span class="s">"Cozy lummox gives smart squid who asks for job pen."</span>
</span><span class="line">        <span class="k">default</span><span class="o">:</span>
</span><span class="line">            <span class="k">break</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cell</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// MARK: UITableViewDelegate</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">heightForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="p">{</span>
</span><span class="line">        <span class="k">let</span> <span class="n">cell</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">(</span><span class="n">tableView</span><span class="p">,</span> <span class="nl">cellForRowAtIndexPath</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="kt">as</span> <span class="n">CustomTableViewCell</span>
</span><span class="line">        <span class="k">var</span> <span class="n">newBounds</span> <span class="o">=</span> <span class="n">cell</span><span class="p">.</span><span class="n">bounds</span>
</span><span class="line">        <span class="n">newBounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">width</span>
</span><span class="line">        <span class="n">cell</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="n">newBounds</span>
</span><span class="line">
</span><span class="line">        <span class="n">cell</span><span class="p">.</span><span class="n">setNeedsLayout</span><span class="p">()</span>
</span><span class="line">        <span class="n">cell</span><span class="p">.</span><span class="n">layoutIfNeeded</span><span class="p">()</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cell</span><span class="p">.</span><span class="n">preferredView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">estimatedHeightForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">UITableViewAutomaticDimension</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>高さを計算するときに、<code>cellForRowAtIndexPath</code> を呼び出してセルにコンテンツを設定した後、セルの width にテーブルビューの width を設定してあげて、一度 cell のレイアウトを更新します。</p>

<p><strong class="text-danger">セルの width にテーブルビューの width を設定しているのがミソ</strong> です。</p>

<p>Storyboard 上ではカスタムセルの横幅がデフォルトで320pxで作成されるので、iPhone5S まではセルの横幅を気にしなくてもセルの <code>layoutIfNeeded</code> だけを呼び出せば勝手に中のコンテンツの高さ決まっているように錯覚していたのですが、
実は Storyboard 上で320pxでセルが作られているのでたまたま偶然いままではうまくいっていただけっぽいです。</p>

<p>本来は、セルの横幅が決まった上でセルのコンテンツの Auto Layout にしたがって <code>layoutIfNeeded</code> しないと行けないのです。セルの横幅を設定せずに <code>layoutIfNeeded</code> だけでコンテンツの高さに合わせてセルの高さを決めていると、
iPhone6 Plus になったときにセルの高さがおかしくなってしまいます。</p>

<h3>heightForRowAtIndexPath と estimatedHeightForRowAtIndexPath の違い</h3>

<p>セルの高さを計算するメソッドは <code>heightForRowAtIndexPath</code> ですが <code>estimatedHeightForRowAtIndexPath</code> というメソッドも用意されています。
このメソッドは何なのかというと、UITableView は大量のデータを表示する場合でも、表示領域+αの部分だけしかセルをインスタンス化しないという設計になっています。
ですので、<code>cellForRowAtIndexPath</code> は表示領域+αの部分分だけ呼び出されるのですが、セルの高さの計算メソッドは、そうではありません。</p>

<p>スクロールバーの範囲を計算したり色々するために、セルの高さの計算は、データがどれだけ大量にあっても全ての数分呼び出されてしまうのです。</p>

<p>で、<code>heightForRowAtIndexPath</code> と <code>estimatedHeightForRowAtIndexPath</code> の違いですが、<code>estimatedHeightForRowAtIndexPath</code> はセルの大まかなサイズを返すメソッドとして用意されています。</p>

<p><code>heightForRowAtIndexPath</code> と <code>estimatedHeightForRowAtIndexPath</code> が両方用意されている場合は、全てのセルの高さを一旦 <code>estimatedHeightForRowAtIndexPath</code> で計算したあと、
表示領域+α分の回数だけ <code>heightForRowAtIndexPath</code> が呼び出されるという形になります。</p>

<p><code>estimatedHeightForRowAtIndexPath</code> を定義しない場合は、全てのデータ分だけ <code>heightForRowAtIndexPath</code> が呼び出されるので、データが多い場合は結構きつくなります。
なので、忘れずに <code>estimatedHeightForRowAtIndexPath</code> も定義しておきます。</p>

<p>返す値はなんとなくの定数(44pxとか)でもいいですし、<code>UITableViewAutomaticDimension</code> を返すでもどちらでもよさそうです。</p>

<h3>setNeedsLayout と layoutIfNeeded は何？</h3>

<p><code>setNeedsLayout</code> はそのコンポーネントに、再レイアウトが必要なフラグを設定するメソッドになります。再レイアウトが必要なコンポネントは次のタイミングの <code>layoutSubviews</code> の呼び出しの時に再レイアウトされます。</p>

<p><code>layoutIfNeeded</code> はそのコンポーネントが再レイアウトが必要なフラグが立っているかを確認して、再レイアウトが必要であれば <code>layoutSubviews</code> を呼び出してくれるメソッドです。</p>

<p>コンポーネントのレイアウトを強制的に更新したい場合は</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">view</span><span class="p">.</span><span class="n">setNeedsLayout</span><span class="p">()</span>
</span><span class="line"><span class="n">view</span><span class="p">.</span><span class="n">layoutIfNeeded</span><span class="p">()</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>のコンボでレイアウトを更新します。この処理を行うと、Auto Layout にしたがってレイアウトが設定されます。</p>

<p>レイアウトを更新したらセルの高さが決まっているはずなので <code>bounds.height</code> を返します。</p>

<h3>preferredView って何？</h3>

<p>UIView 関連のコンポーネントには、推奨サイズというのが設定されているコンポーネントがあります。例えば UILabel であれば、ラベルの文字数をきっちり表示できるサイズが推奨サイズになりますし、
UIButton であればボタン名が表示できるサイズが推奨サイズになります。</p>

<p>コンポーネントの推奨サイズを取得するメソッドが <code>UIView#intrinsicContentSize</code> になります。実はこのメソッド、Auto Layout と深い関係があります。</p>

<p>例えば、UILabel の制約を次のように設定したとします。</p>

<p><img src="http://hamasyou.com/images/20141008/SS4.png" width="240" title='"UILabel の制約"' alt='"UILabel の制約"' class="img-thumbnail"></p>

<p>親のコンポーネントに対して、Top、Trailing、Leading を 0 に設定しています。こうすることで UILabel が親のコンポーネントの上左右の padding が 0 で表示されるわけです。</p>

<p>ここでのポイントは、bottom に制約を設定していないことです。bottom に制約を設定していないので、本来であればこのコンポーネントは高さが決まらずに ambiguity（曖昧）な状態なはずです。</p>

<p>でも UILabel や UIButton は ambiguity にはなりません。これは、コンポーネントに推奨サイズが設定されているので、そのサイズでコンポーネントが表示されるからです。</p>

<p>UILabel を使って、テキストがどれだけ多くなっても全て表示したいというときには、このように bottom に制約を設定せずに、<code>Lines</code> を 0 に、<code>Line Breaks</code> を <code>Character Wrap</code> に設定します。</p>

<p><img src="http://hamasyou.com/images/20141008/SS5.png" width="240" title='"Lines 0 Line Breaks Character Wrap"' alt='"Lines 0 Line Breaks Character Wrap"' class="img-thumbnail">
<img src="http://hamasyou.com/images/20141008/SS6.png" width="240" title='"Lines 0 Line Breaks Character Wrap"' alt='"Lines 0 Line Breaks Character Wrap"' class="img-thumbnail"></p>

<h4>推奨サイズを持たないコンポーネントがある</h4>

<p>コンポーネントの中には、推奨サイズを持たないコンポーネントが存在します。<code>UIView</code> がそうです。UIView は子のビューのサイズによって自身のサイズが変わるため、
推奨サイズを持ちません。</p>

<p>逆に考えると、中のコンテンツのサイズが動的に変わる場合でも、UIView が親にいる限り、子のコンポーネントは好きにサイズが変わってよく、子のサイズが決まった段階で UIView のサイズ（bounds）が決まるということです。</p>

<p>この性質を使うと、UITableViewCell の中身が複雑に Auto Layout される場合でも、セルの高さを簡単に計算できるようになります。</p>

<h3>セルの中に UIView を配置して、その中にコンテンツを並べる</h3>

<p>カスタムの UITableViewCell には、<code>ContentView</code> という UIView が予め用意されていますが、この ContentView 、いまいち上手く Auto Layout してくれません。。
やり方が悪いだけのような気もしますが、僕は ContentView の子に UIView を入れるようにして、この UIView の上左右の padding を 0 に設定してレイアウトを始めるようにしています。</p>

<p><img src="http://hamasyou.com/images/20141008/SS7.png" width="800" title='"preferredView"' alt='"preferredView"' class="img-thumbnail"></p>

<p>bottom の制約を設定しないのがミソです。bottom の制約を設定しないことで、UIView は縦方向に自由に伸び縮みして、子のコンポーネントのサイズに合わせて高さが勝手に変わるようになります。</p>

<p>最後のコンポーネントを配置し終えたら、そのコンポーネントの bottom を親に対して設定をすれば、UIView の高さが子のコンポーネントの Auto Layout から決まるようになります。</p>

<p><img src="http://hamasyou.com/images/20141008/SS9.png" width="800" class="img-thumbnail" title=""></p>

<h3>推奨サイズをもつコンポーネントで位置とサイズで矛盾が起きた場合</h3>

<p>上の画像では、最後の要素の UILabel の bottom を親の Preferred View に対して設定していますが、UILabel の推奨サイズの高さと Preferred View からの bottom の位置とでコンフリクトが起きます。</p>

<p>Storyboard 上では、コンフリクトが起きると、赤い矢印マークがでます。実際には UILabel の高さを bottom の位置にまでの高さに設定することで矛盾は起きないのですが、
コレだと、高さが結局 UIView の高さに依存してしまい、UIView の高さは bottom を設定していないことから曖昧なサイズになってしまいます。</p>

<p>これだと思った様なレイアウトになりません。で、こんな時に設定するのが制約の <strong class="text-danger">priority</strong> です。制約同士でコンフリクトが起きた場合に、どちらの制約を優先的に適用するかを決めるのが priority になります。</p>

<p>今回は、<em>ラベルの高さを推奨サイズで配置して、その位置を元に UIView の高さを決めたい</em> ので、UILabel の bottom の制約の priority を下げます。UILabel の推奨サイズが決まる priority (Content Hugging Priority) が 251 なので、bottom の priority を 250 以下に設定すれば、
UILabel の推奨サイズを優先的に設定して、その高さからの bottom の位置が決まるようになります。</p>

<p><img src="http://hamasyou.com/images/20141008/SS10.png" width="240" class="img-thumbnail" title="">
<img src="http://hamasyou.com/images/20141008/SS11.png" width="500" class="img-thumbnail" title=""></p>

<h4>高さが決まらない UIView を配置すると、Storyboard 上での作業がしずらい場合</h4>

<p>高さが決まらない UIView を使うと、Storyboard 上で制約に合わせてコンポーネントの位置を自動調整するときに困ることがあります。</p>

<p>そんな時は、高さ（height）を適当に設定して、制約のところの <em>Placeholder Remove at build time</em> にチェックを入れておきます。
こうすることで、Storyboard 上の作業のときだけ制約が設定されて、実行時には制約が削除される状況を作ることができます。</p>

<p><img src="http://hamasyou.com/images/20141008/SS8.png" width="240" title='"Remove at build time"' alt='"Remove at build time"' class="img-thumbnail"></p>

<h3>UIView を使って擬似的な Preferred View を作ると高さ可変のセルが簡単につくれる</h3>

<p>このように、セルの ContentView の子要素に Preferred View を用意して、コンテンツのサイズで UIView の高さが決まるようにすることで、
Auto Layout を使った配置の中でセルの高さを可変にすることが結構簡単にできるようになります。</p>

<p><img src="http://hamasyou.com/images/20141008/SS1.png" width="240" title='"iPhone5S"' alt='"iPhone5S"' class="img-thumbnail">
<img src="http://hamasyou.com/images/20141008/SS12.png" width="240" title='"iPhone6 Plus"' alt='"iPhone6 Plus"' class="img-thumbnail"></p>

<p>他にもっと良いやり方があるかと思いますが、参考になればと思います。</p>

<h2>UIScrollView で Auto Layout を上手く使う方法</h2>

<p>UIScrollView も UITableViewCell と考え方は同じで、中のコンテンツを Auto Layout するときには Preferred View を用意して、
こいつにサイズを計算させて UIScrollView の contentSize を決めてやるようにします。</p>

<h3>UIScrollView のまとめ</h3>

<p>UIScrollView はビュー自体の <code>frame</code> とコンテンツ部分の <code>contentSize</code> の二つの要素を持ちます。frame はスクロールビュー自身の位置やサイズを表します。
contentSize はスクロールビューが表示するコンテンツのサイズを表していて、スクロールビューのサイズよりも大きい contentSize の場合には、スクロールビューの中でスクロールが発生するということになります。</p>

<h3>UIScrollView と Auto Layout</h3>

<p>UIScrollView で気を付けないといけないのは、<strong class="text-danger">contentSize は中に含まれるコンポーネントの frame や bounds で決まるわけではない</strong> ということです。</p>

<p>UIScrollView の contentSize はコンポーネントの <code>intrinsicContentSize</code> によって決まります。ここが UIScrollView でハマる一番のポイントかなと思います。</p>

<p>つまり、intrinsicContentSize （推奨サイズ）が決まるコンポーネントのみをコンテンツとして表示する場合には contentSize は Auto Layout が自動で計算してくれるということです。</p>

<p>例えば UIImageView を UIScrollView の中に入れたとします。UIImageView の intrinsicContentSize は UIImageView の frame や bounds ではなく、表示する UIImage の size になります。
なので、UIImageView だけを UIScrollView に入れると、UIImageView のサイズをいくら Storyboard 上で設定しても、勝手にスクロールされてしまうのです。</p>

<p><img src="http://hamasyou.com/images/20141008/SS13.png" width="800" title='"UIScrollView の罠"' alt='"UIScrollView の罠"' class="img-thumbnail"></p>

<p><img src="http://hamasyou.com/images/20141008/SS14.png" width="240" title='"UIScrollView の罠"' alt='"UIScrollView の罠"' class="img-thumbnail">
<img src="http://hamasyou.com/images/20141008/SS15.png" width="240" title='"UIScrollView の罠"' alt='"UIScrollView の罠"' class="img-thumbnail">
<img src="http://hamasyou.com/images/20141008/SS16.png" width="240" title='"UIScrollView の罠"' alt='"UIScrollView の罠"' class="img-thumbnail"></p>

<h3>UIScrollView のサイズに合わせて画像をページングする方法</h3>

<p>UIScrollView の contentSize は intrinsicContentSize によって決まるというのは、上で書きました。
じゃあ、contentSize をプログラムで上書きしちゃえば上手くスクロールするんでは？ということで、さがすと出てくるのが大体 <code>viewDidLayoutSubviews</code> の中で
contentSize を設定すればいいじゃんっていうプログラム例です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="kr">override</span> <span class="k">func</span> <span class="nf">viewDidLayoutSubviews</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLayoutSubviews</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">let</span> <span class="n">contentWidth</span> <span class="o">=</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">preferredViews</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="o">*</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">width</span>
</span><span class="line">    <span class="k">let</span> <span class="n">contentHeight</span> <span class="o">=</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span>
</span><span class="line">    <span class="n">scrollView</span><span class="p">.</span><span class="n">contentSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">contentWidth</span><span class="p">,</span> <span class="n">contentHeight</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>ぶっちゃけ、僕もこの方法が結局妥当かなという結論に達しました。先に UIScrollView に画像を動的に追加して、ページングできるようにするコードを掲載します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">import</span> <span class="n">UIKit</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nl">SecondViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">scrollView</span><span class="p">:</span> <span class="bp">UIScrollView</span><span class="o">!</span>
</span><span class="line">
</span><span class="line">    <span class="k">var</span> <span class="nl">preferredViews</span><span class="p">:</span> <span class="p">[</span><span class="bp">UIView</span><span class="p">]</span><span class="o">!</span>
</span><span class="line">
</span><span class="line">    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">        <span class="k">let</span> <span class="n">images</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="s">"Image1"</span><span class="p">),</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="s">"Image2"</span><span class="p">),</span> <span class="bp">UIImage</span><span class="p">(</span><span class="nl">named</span><span class="p">:</span> <span class="s">"Image3"</span><span class="p">)]</span>
</span><span class="line">        <span class="nb">self</span><span class="p">.</span><span class="n">preferredViews</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIView</span><span class="p">]()</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="n">image</span> <span class="k">in</span> <span class="n">images</span> <span class="p">{</span>
</span><span class="line">            <span class="k">let</span> <span class="n">preferredView</span> <span class="o">=</span> <span class="bp">UIView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">))</span>
</span><span class="line">            <span class="k">let</span> <span class="n">imageView</span> <span class="o">=</span> <span class="bp">UIImageView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">))</span>
</span><span class="line">            <span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span>
</span><span class="line">            <span class="n">imageView</span><span class="p">.</span><span class="n">contentMode</span> <span class="o">=</span> <span class="p">.</span><span class="n">ScaleAspectFill</span>
</span><span class="line">            <span class="n">imageView</span><span class="p">.</span><span class="n">clipsToBounds</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class="line">            <span class="n">preferredView</span><span class="p">.</span><span class="n">setTranslatesAutoresizingMaskIntoConstraints</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class="line">            <span class="n">imageView</span><span class="p">.</span><span class="n">setTranslatesAutoresizingMaskIntoConstraints</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class="line">            <span class="n">preferredView</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">imageView</span><span class="p">)</span>
</span><span class="line">            <span class="n">scrollView</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">preferredView</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">            <span class="n">preferredViews</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">preferredView</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="kr">override</span> <span class="k">func</span> <span class="n">updateViewConstraints</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">super</span><span class="p">.</span><span class="n">updateViewConstraints</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">        <span class="k">var</span> <span class="nl">prevView</span><span class="p">:</span> <span class="bp">UIView</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class="line">        <span class="k">for</span> <span class="n">preferredView</span> <span class="k">in</span> <span class="n">preferredViews</span> <span class="p">{</span>
</span><span class="line">            <span class="k">let</span> <span class="n">imageView</span> <span class="o">=</span> <span class="n">preferredView</span><span class="p">.</span><span class="n">subviews</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="kt">as</span> <span class="bp">UIImageView</span>
</span><span class="line">            <span class="n">preferredView</span><span class="p">.</span><span class="n">addConstraints</span><span class="p">(</span><span class="bp">NSLayoutConstraint</span><span class="p">.</span><span class="n">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"H:|[imageView]|"</span><span class="p">,</span>
</span><span class="line">                <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">metrics</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"imageView"</span><span class="o">:</span> <span class="n">imageView</span><span class="p">]))</span>
</span><span class="line">            <span class="n">preferredView</span><span class="p">.</span><span class="n">addConstraints</span><span class="p">(</span><span class="bp">NSLayoutConstraint</span><span class="p">.</span><span class="n">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"V:|[imageView]|"</span><span class="p">,</span>
</span><span class="line">                <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">metrics</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"imageView"</span><span class="o">:</span> <span class="n">imageView</span><span class="p">]))</span>
</span><span class="line">
</span><span class="line">            <span class="k">if</span> <span class="n">prevView</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class="line">                <span class="n">scrollView</span><span class="p">.</span><span class="n">addConstraints</span><span class="p">(</span><span class="bp">NSLayoutConstraint</span><span class="p">.</span><span class="n">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"H:|[preferredView(==scrollView)]"</span><span class="p">,</span>
</span><span class="line">                    <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">metrics</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"scrollView"</span><span class="o">:</span> <span class="n">scrollView</span><span class="p">,</span> <span class="s">"preferredView"</span><span class="o">:</span> <span class="n">preferredView</span><span class="p">]))</span>
</span><span class="line">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">                <span class="n">scrollView</span><span class="p">.</span><span class="n">addConstraints</span><span class="p">(</span><span class="bp">NSLayoutConstraint</span><span class="p">.</span><span class="n">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"H:[prevView][preferredView(==scrollView)]"</span><span class="p">,</span>
</span><span class="line">                    <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">metrics</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"scrollView"</span><span class="o">:</span> <span class="n">scrollView</span><span class="p">,</span> <span class="s">"prevView"</span><span class="o">:</span> <span class="n">prevView</span><span class="o">!</span><span class="p">,</span> <span class="s">"preferredView"</span><span class="o">:</span> <span class="n">preferredView</span><span class="p">]))</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="n">scrollView</span><span class="p">.</span><span class="n">addConstraints</span><span class="p">(</span><span class="bp">NSLayoutConstraint</span><span class="p">.</span><span class="n">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"V:|[preferredView(==scrollView)]"</span><span class="p">,</span>
</span><span class="line">                <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">metrics</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"scrollView"</span><span class="o">:</span> <span class="n">scrollView</span><span class="p">,</span> <span class="s">"preferredView"</span><span class="o">:</span> <span class="n">preferredView</span><span class="p">]))</span>
</span><span class="line">
</span><span class="line">            <span class="n">prevView</span> <span class="o">=</span> <span class="n">preferredView</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLayoutSubviews</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLayoutSubviews</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">        <span class="k">let</span> <span class="n">contentWidth</span> <span class="o">=</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">preferredViews</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="o">*</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">width</span>
</span><span class="line">        <span class="k">let</span> <span class="n">contentHeight</span> <span class="o">=</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span>
</span><span class="line">        <span class="n">scrollView</span><span class="p">.</span><span class="n">contentSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">contentWidth</span><span class="p">,</span> <span class="n">contentHeight</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kr">override</span> <span class="k">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class="line">        <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><img src="http://hamasyou.com/images/20141008/SS17.png" width="800" class="img-thumbnail" title=""></p>

<p><img src="http://hamasyou.com/images/20141008/SS18.png" width="240" class="img-thumbnail" title="">
<img src="http://hamasyou.com/images/20141008/SS19.png" width="240" class="img-thumbnail" title=""></p>

<p>UIScrollView の中に画像を3つ表示して、それをページングスクロールするコードになります。Paging Enabled のオプションは Storyboard 上で設定しています。</p>

<p>画像を直接 UIScrollView にいれてしまうと、intrinsicContentSize の問題で表示が意図したとおりにならないので、UIImageView をラップする PreferredView を作成しています。</p>

<p>PreferredView の中に UIImageView を隙間なく配置し、PreferredView を ScrollView の縦横のサイズと同じサイズにして、Auto Layout で左から順番に配置しています。
ぶっちゃけ、この処理であれば、<code>UICollectionView</code> を使うほうが早いし楽だし美しいと思います。</p>

<p>UIScrollView で Auto Layout を使って頑張ってスクロールコンテンツを配置したいときに、参考になるといいと思っています。</p>
]]>
    </description>
    <pubDate>Thu, 09 Oct 2014 01:31:20 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[[iOS] ReactiveCocoa の RACCommand で、実行中にローディングを出す方法]]></title>
    <link>http://hamasyou.com/blog/2014/09/19/reactivecocoa-raccommand-executing/</link>
    <guid>http://hamasyou.com/blog/2014/09/19/reactivecocoa-raccommand-executing/</guid>
    <description>
      <![CDATA[<p>最近 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" rel="external nofollow" title="ReactiveCocoa">ReactiveCocoa</a> を使いまくってます。そのなかで調べた Signal の使い方イディオムのメモです。</p>

<p>RACCommand で検索処理とかしてるときに、ローディング画面やインジケータを表示したいということがあると思います。そういうときに使える Signal のイディオムです。コードは Swift で書いています。</p>

<p><em>MVVM</em> で viewModel が searchCommand を実装しているとします。また、ローディングインジケータの表示には <a href="https://github.com/jdg/MBProgressHUD" rel="external nofollow" title="MBProgressHUD">MBProgressHUD</a> を使っているとします。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>MyViewController#viewDidLoad</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">searchButton</span><span class="p">.</span><span class="n">rac_command</span> <span class="o">=</span> <span class="n">viewModel</span><span class="p">.</span><span class="n">searchCommand</span>
</span><span class="line"><span class="n">searchButton</span><span class="p">.</span><span class="n">rac_command</span><span class="p">.</span><span class="n">executing</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribeNext</span><span class="p">({</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="p">(</span><span class="n">executing</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">        <span class="k">if</span> <span class="k">let</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="n">executing</span> <span class="kt">as</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class="line">                <span class="n">MBProgressHUD</span><span class="p">.</span><span class="n">showHUDAddedTo</span><span class="p">(</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">view</span><span class="p">,</span> <span class="nl">animated</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class="line">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">                <span class="n">MBProgressHUD</span><span class="p">.</span><span class="n">hideHUDForView</span><span class="p">(</span><span class="n">weakSelf</span><span class="p">.</span><span class="n">view</span><span class="p">,</span> <span class="nl">animated</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">})</span>
</span><span class="line"><span class="n">searchButton</span><span class="p">.</span><span class="n">rac_command</span><span class="p">.</span><span class="n">errors</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribeNext</span><span class="p">({</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">        <span class="c1">// エラー時のメッセージ表示処理</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">)</span>
</span><span class="line">    <span class="p">})</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>executing</code> Signal はこういう風につかうんですね。</p>
]]>
    </description>
    <pubDate>Fri, 19 Sep 2014 18:13:11 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[[Swift] 多次元配列の定義の謎]]></title>
    <link>http://hamasyou.com/blog/2014/09/12/swift-mysterious-multi-dimensional-array/</link>
    <guid>http://hamasyou.com/blog/2014/09/12/swift-mysterious-multi-dimensional-array/</guid>
    <description>
      <![CDATA[<p>Xcode6 GM でましたね！ Beta1 の頃から Swift 触ってますが、まぁ言語仕様がよく変わること（笑。</p>

<p>で、いつか直るだろうと思ってたけど、GM でも直っていない Swift の多次元配列の定義の謎に関してです。だれか理由分かる人いたら教えてください。。</p>

<p>下のようなコードがあるとします。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">typealias</span> <span class="n">NameAndValue</span> <span class="o">=</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="nl">dict</span><span class="p">:</span> <span class="p">[[</span><span class="n">NameAndValue</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">  <span class="p">[</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">  <span class="p">],</span>
</span><span class="line">  <span class="p">[</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">  <span class="p">]]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>typealias</code> で別名つけて2次元配列を定義しているだけです。要素が <code>Dictionary</code> になっています。ここまでは普通にコンパイルが通ります。</p>

<p>ですが、これをこんなふうに…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="nl">dict</span><span class="p">:</span> <span class="p">[[</span><span class="n">NameAndValue</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">  <span class="p">[</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">  <span class="p">],</span>
</span><span class="line">  <span class="p">[</span>
</span><span class="line">     <span class="p">[</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">],</span>
</span><span class="line">  <span class="p">]]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>配列の要素を増やしていきます。そうするとだいたい <strong class="text-danger">10件くらい</strong> からコンパイルが遅くなり、<strong class="text-danger">15件過ぎたくらいから</strong> コンパイルエラーが出るようになります。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">Cannot</span> <span class="n">convert</span> <span class="n">the</span> <span class="n">expression</span><span class="err">'</span><span class="n">s</span> <span class="n">type</span> <span class="err">'</span><span class="p">[[</span><span class="n">NameAndValue</span><span class="p">]]</span><span class="err">'</span> <span class="n">to</span> <span class="n">type</span> <span class="err">'</span><span class="n">StringLiteralConvertible</span><span class="err">'</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>意味がわからんです。。</p>

<p>仕方ないので</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="nl">dict</span><span class="p">:</span> <span class="p">[[</span><span class="n">NameAndValue</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[[],[]]</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span><span class="line"><span class="n">dict</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">append</span><span class="p">([</span><span class="s">"name"</span><span class="o">:</span> <span class="s">""</span><span class="p">,</span>    <span class="s">"value"</span><span class="o">:</span> <span class="s">""</span><span class="p">])</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p></p>

<p>こうやって、プログラムでデータ登録するようにしました。。</p>
]]>
    </description>
    <pubDate>Fri, 12 Sep 2014 11:21:20 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[APIデザインの極意 Java/NetBeansアーキテクト探究ノート]]></title>
    <link>http://hamasyou.com/blog/2014/08/30/484433591x/</link>
    <guid>http://hamasyou.com/blog/2014/08/30/484433591x/</guid>
    <description>
      <![CDATA[<p>本書は <strong class="text-danger">プログラミング API</strong> の設計本です。Web API の設計極意に関して知りたい人は 『<a href="http://www.amazon.co.jp/gp/product/4873113539?ie=UTF8&amp;camp=247&amp;creativeASIN=4873113539&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="RESTful Webサービス">RESTful Webサービス</a>』や『<a href="http://www.amazon.co.jp/gp/product/4774142042?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4774142042" rel="external nofollow" title="Webを支える技術 -HTTP、URI、HTML、そしてREST">Webを支える技術 -HTTP、URI、HTML、そしてREST</a>』を読むのがいいと思います。本書は <a href="http://www.amazon.co.jp/gp/product/4797311126?ie=UTF8&amp;camp=247&amp;creativeASIN=4797311126&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="GoF のデザインパターン">GoF のデザインパターン
</a> や <a href="http://www.amazon.co.jp/gp/product/4621066056?ie=UTF8&amp;camp=247&amp;creativeASIN=4621066056&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title="EFFECTIVE JAVA">EFFECTIVE JAVA</a> を読んだ開発者が次に読むべき本として紹介されています。</p>

<p><a href="http://www.amazon.co.jp/gp/product/4873113539?ie=UTF8&amp;camp=247&amp;creativeASIN=4873113539&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="http://ecx.images-amazon.com/images/I/51ojIhXBP3L._SS140_.jpg" alt="RESTful Webサービス" class="img-thumbnail" title="RESTful Webサービス"></a>
<a href="http://www.amazon.co.jp/gp/product/4774142042?ie=UTF8&amp;tag=sorehabooks-22&amp;linkCode=xm2&amp;camp=247&amp;creativeASIN=4774142042" rel="external nofollow" title=""><img src="http://ecx.images-amazon.com/images/I/51qo6pgjaSL._SS140_.jpg" alt="Webを支える技術 -HTTP、URI、HTML、そしてREST" class="img-thumbnail" title="Webを支える技術 -HTTP、URI、HTML、そしてREST"></a>
<a href="http://www.amazon.co.jp/gp/product/4797311126?ie=UTF8&amp;camp=247&amp;creativeASIN=4797311126&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="http://ecx.images-amazon.com/images/I/61YX3ZDFIwL._SS140_.jpg" alt="オブジェクト指向における再利用のためのデザインパターン" class="img-thumbnail" title="オブジェクト指向における再利用のためのデザインパターン"></a>
<a href="http://www.amazon.co.jp/gp/product/4621066056?ie=UTF8&amp;camp=247&amp;creativeASIN=4621066056&amp;linkCode=xm2&amp;tag=sorehabooks-22" rel="external nofollow" title=""><img src="http://ecx.images-amazon.com/images/I/91tYrFpKmLL._SS140_.jpg" alt="EFFECTIVE JAVA 第2版" class="img-thumbnail" title="EFFECTIVE JAVA 第2版"></a></p>

<p>本書は、NetBeans API を構築した筆者がデザインパターンやコーディング作法だけではうまくいかない問題、後方互換性を維持したままライブラリを発展させる方法、を重点的に解説しています。なるほど、 <strong class="text-danger">デザインパターンや設計方法を学んだ次に読むべき本</strong> として挙げられている理由がよくわかる内容になっています。</p>

<!-- more -->


<h3>社内ライブラリと API 設計は別物</h3>

<p>本書で扱う API という言葉は、例えばオープンソースライブラリのような、多くの人に共有されるものという位置づけになっています。社内で使うようなライブラリなどの API とはニュアンスが違う感じがしました。</p>

<p>一度リリースしたら、後方互換性を維持して発展させていかなければならない、そういった類のライブラリや API を作る開発者向けの本です。</p>

<h2>本書のテーマ</h2>

<p>本書のテーマは、次の2つに集約されると思います。</p>

<ul>
<li>後方互換性を維持する API のデザインパターン</li>
<li>優れた API であるためにどうするか</li>
</ul>


<p>NetBeans API で培った経験則を余す所なく記載してくれているため、ボリュームがスゴイことになっています。また、作って終わりの API の作り方を教えているわけではないので、おそらくほとんどの開発者には <em>なんとなくわかった気になるだけか難しくて後回しにする</em> ような内容かもしれません。</p>

<p>はっきり言って、本書が役に立った！と感じる開発者は少ないかもしれませんが、少なくとも GitHub でソースコードを公開している開発者は頑張って読んでもらうのがいいと思いました。それくらい内容が濃く、経験者しかわからないことが書いてあります。</p>

<h3>後方互換性を維持する API のデザインパターン</h3>

<blockquote>
<p>開発者は、API の現在のバージョンをコーディングしている場合に、未来について考えることが求められます。私に言えることは、それは、今までの API 設計でよく行われた方法ではないということです。また、今日までに書かれた書籍やその中の助言は、この種の思考にはあまり役に立ちません。それらには、単一バージョンの場合のデザインパターンが説明されていることがほとんどです。</p>
<footer><strong>本書</strong></footer>
</blockquote>


<p>これが、<strong class="text-danger">新しいデザイン本が必要な理由</strong> です。今日のシステムはコンポーネントの組み合わせで出来ています。おそらく今後もこの傾向は変わらないと思います。コンポーネント利用者の経験（投資）をムダにしない為に、よりよい発展を目指す上で、後方互換性を維持することは重要なことになります。これが、<strong class="text-danger">本書を読む理由</strong> です。</p>

<h3>優れた API であるためにどうするか</h3>

<p>では、どのように API 設計をすればいいか。その方法も本書に書かれています。</p>

<ul>
<li>メソッドとフィールドの優れたシグニチャ</li>
<li>ファイル操作</li>
<li>環境変数とコマンドラインオプション</li>
<li>API としてのテキストメッセージ</li>
<li>（ネットワーク）プロトコル</li>
<li>API の振る舞い</li>
<li>I18N と L10N のサポート</li>
<li>API の品質検査方法（正しさの証明）</li>
<li>理解しやすさ</li>
<li>一貫性</li>
<li>やりたいことが満たせる API を発見できること</li>
<li>単純なことを簡単に行えること</li>
<li>投資の保全（利用者を尊重すること）</li>
</ul>


<p>API に優れた名前をつけることや <strong class="text-danger">驚き最小の法則</strong>、シンプルで一貫性のある I/F にするというのは基本的にな事になります。こういったことを踏まえた上で、この API を利用してくれているユーザを尊重すること（次のバージョンでメソッド名を変更するなんてとんでもない！）が大切だと書かれています。</p>

<p>後方互換性を保ち、API のユーザの投資をムダにしない設計の方法を学びたい人、新しい視点を身につけたい人に本書はおすすめです。</p>

<blockquote><p>- オブジェクト指向アプリケーションフレームワークには、伝統的なデザインパターンとは異なるスキルが必要<br>- クラスを API として扱って、頭痛の種を軽減<br>- 将来、改善できるように API の発展計画を準備</p></blockquote>


<h2>目次</h2>

<ul>
<li>【第1部　理論と正当性】

<ul>
<li>第1章　 現代的なソフトウェア構築の技芸</li>
<li>第2章　 APIを作成する動機</li>
<li>第3章　 優れたAPIを決定づけるもの</li>
<li>第4章　 絶え間なく変わる標的</li>
</ul>
</li>
<li>【第2部　実践的設計】

<ul>
<li>第5章　 必要以上に公開しない</li>
<li>第6章　 実装ではなく、インタフェースに対してコーディングする</li>
<li>第7章　 モジュール方式アーキテクチャの使用</li>
<li>第8章　 クライアント用とプロバイダ用のAPIを分離</li>
<li>第9章　 テストの容易性に留意する</li>
<li>第10章　他のAPIとの協調</li>
<li>第11章　APIの実行時の側面</li>
<li>第12章　宣言型プログラミング</li>
</ul>
</li>
<li>【第3部　日々の生活】

<ul>
<li>第13章　有害で極端な助言</li>
<li>第14章　API設計のパラドックス</li>
<li>第15章　API宇宙の発展</li>
<li>第16章　チームワーク</li>
<li>第17章　ゲームでAPI設計スキルを向上させる</li>
<li>第18章　拡張可能なビジターパターンのケーススタディ</li>
<li>第19章　終焉の手続き</li>
</ul>
</li>
<li>終章：将来</li>
</ul>

]]>
    </description>
    <pubDate>Sat, 30 Aug 2014 12:40:36 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[[ReactiveCocoa] catchTo の使いどころ]]></title>
    <link>http://hamasyou.com/blog/2014/08/29/reactivecocoa-catchto/</link>
    <guid>http://hamasyou.com/blog/2014/08/29/reactivecocoa-catchto/</guid>
    <description>
      <![CDATA[<p><strong class="text-danger">ReactiveCocoa</strong> で <code>catchTo</code> の使い方を覚えたのでメモ。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" rel="external nofollow" title="ReactiveCocoa">ReactiveCocoa</a></p>

<p>リアクティブプログラミングの詳細は省くとして、<code>RACSignal</code> のイベントには <code>next</code> と <code>completed</code> と <code>error</code> があります。それぞれ、<code>subscribeNext</code>、<code>subscribeCompleted</code>、<code>subscribeError</code> でハンドリングできるやつです。</p>

<p>で、HTTP API 等を呼び出す際に API 呼び出しの結果を JSON にパースして、結果をモデルに設定するみたいなことをやりたい時に、次のように行います。（Swift で記述しています。）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">RAC</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="s">"model"</span><span class="p">)</span> <span class="o">&lt;~</span> <span class="n">API</span><span class="p">.</span><span class="n">loadData</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="n">API</span> <span class="p">{</span>
</span><span class="line">    <span class="k">class</span> <span class="k">func</span> <span class="n">loadData</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">RACSignal</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">RACSignal</span><span class="p">.</span><span class="n">createSignal</span><span class="p">({</span> <span class="p">(</span><span class="nl">subscriber</span><span class="p">:</span> <span class="n">RACSubscriber</span><span class="o">!</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">            <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">"http://localhost:300/search"</span><span class="p">)</span>
</span><span class="line">            <span class="k">let</span> <span class="n">configuration</span> <span class="o">=</span> <span class="bp">NSURLSessionConfiguration</span><span class="p">.</span><span class="n">defaultSessionConfiguration</span><span class="p">()</span>
</span><span class="line">            <span class="n">configuration</span><span class="p">.</span><span class="n">HTTPAdditionalHeaders</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Accept"</span><span class="o">:</span> <span class="s">"application/json"</span><span class="p">]</span>
</span><span class="line">            <span class="k">let</span> <span class="nl">session</span><span class="p">:</span> <span class="bp">NSURLSession</span> <span class="o">=</span> <span class="bp">NSURLSession</span><span class="p">(</span><span class="nl">configuration</span><span class="p">:</span> <span class="n">configuration</span><span class="p">)</span>
</span><span class="line">            <span class="k">let</span> <span class="nl">task</span><span class="p">:</span> <span class="bp">NSURLSessionDataTask</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">dataTaskWithURL</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="bp">NSData</span><span class="o">!</span><span class="p">,</span> <span class="nl">response</span><span class="p">:</span> <span class="bp">NSURLResponse</span><span class="o">!</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">!</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">                <span class="k">if</span> <span class="n">error</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class="line">                    <span class="c1">// data をパースしてモデル化</span>
</span><span class="line">                    <span class="n">subscriber</span><span class="p">.</span><span class="n">sendNext</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</span><span class="line">                    <span class="n">subscriber</span><span class="p">.</span><span class="n">sendCompleted</span><span class="p">()</span>
</span><span class="line">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">                    <span class="n">subscriber</span><span class="p">.</span><span class="n">sendError</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">                <span class="n">session</span><span class="p">.</span><span class="n">invalidateAndCancel</span><span class="p">()</span>
</span><span class="line">            <span class="p">})</span>
</span><span class="line">            <span class="n">task</span><span class="p">.</span><span class="n">resume</span><span class="p">()</span>
</span><span class="line">            <span class="k">return</span> <span class="nb">nil</span>
</span><span class="line">        <span class="p">})</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>こうすると、API の呼び出しが成功した場合には <code>subscriber.sendNext</code> の結果がきちんと <code>self.model</code> に設定されるわけですが、API の呼び出しが失敗して <code>subscriber.sendError</code> が呼び出されてしまうと、例外がなげられます。</p>

<p>ではどうするか。</p>

<h3>catchTo を使って sendError に備える</h3>

<p>そこで <code>catchTo</code> を使います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">RAC</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="s">"model"</span><span class="p">)</span> <span class="o">&lt;~</span> <span class="n">API</span><span class="p">.</span><span class="n">loadData</span><span class="p">().</span><span class="n">catchTo</span><span class="p">(</span><span class="n">RACSignal</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>catchTo</code> は <code>sendError</code> が呼び出された場合に代わりに投げる <code>RACSignal</code> を指定します。そうすることで、ネットワークエラー等で API の呼び出しが失敗した場合には、<code>RACSignal.empty()</code> で何も起きなかったことになる（正確には sendCompleted が呼び出される）ようになります。</p>

<p>sendError 時に処理を行いたい場合には <code>catch</code> を代わりに使用します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">RAC</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="s">"model"</span><span class="p">)</span> <span class="o">&lt;~</span> <span class="n">API</span><span class="p">.</span><span class="n">loadData</span><span class="p">()</span>
</span><span class="line">    <span class="p">.</span><span class="n">catch</span><span class="p">({</span> <span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">!</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">RACSignal</span><span class="o">!</span> <span class="k">in</span>
</span><span class="line">        <span class="k">return</span> <span class="n">RACSignal</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span>
</span><span class="line">    <span class="p">})</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>以上です。</p>
]]>
    </description>
    <pubDate>Fri, 29 Aug 2014 19:44:49 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[Swift での Dictionary<String, AnyObject> の扱いメモ]]></title>
    <link>http://hamasyou.com/blog/2014/08/28/swift-dictionary-anyobject/</link>
    <guid>http://hamasyou.com/blog/2014/08/28/swift-dictionary-anyobject/</guid>
    <description>
      <![CDATA[<p>Swift で <code>Dictionary</code> を扱うときのメモです。API 呼び出しのレスポンスを JSON で扱いたい時に <code>Dictionary&lt;String, AnyObject&gt;</code> として扱う際のポイントです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">typealias</span> <span class="n">JSONDictionary</span> <span class="o">=</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">AnyObject</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="bp">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">MutableContainers</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span> <span class="kt">as</span> <span class="n">JSONDictionary</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">str1</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"foobar"</span><span class="p">]</span><span class="o">!</span> <span class="kt">as</span> <span class="n">String</span>    <span class="c1">// String</span>
</span><span class="line"><span class="k">let</span> <span class="n">str2</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"foobar"</span><span class="p">]</span> <span class="kt">as</span> <span class="n">AnyObject</span><span class="o">?</span> <span class="kt">as</span><span class="o">?</span> <span class="n">String</span>  <span class="c1">// String?</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">str3</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">"foobar"</span><span class="p">]</span> <span class="kt">as</span> <span class="n">String</span>     <span class="c1">// これはコンパイルエラー '(String, AnyObject)' is not convertible to 'String'</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>最後のはなぜコンパイルエラーになるかというと、<code>Dictionary</code> の <code>subscript</code> が2種類定義されていて、期待したのと違う方が呼び出されているからです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">struct</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="nl">Key</span> <span class="p">:</span> <span class="n">Hashable</span><span class="p">,</span> <span class="n">Value</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">CollectionType</span><span class="p">,</span> <span class="n">DictionaryLiteralConvertible</span> <span class="p">{</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="k">subscript</span> <span class="p">(</span><span class="nl">i</span><span class="p">:</span> <span class="n">DictionaryIndex</span><span class="o">&lt;</span><span class="n">Key</span><span class="p">,</span> <span class="n">Value</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Key</span><span class="p">,</span> <span class="n">Value</span><span class="p">)</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class="line">    <span class="k">subscript</span> <span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="n">Key</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Value</span><span class="o">?</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>json["foobar"]</code> の戻り値は <code>(Key, Value)</code> か <code>Value?</code> のどちらかですが、<code>as String</code> を付けた際に Optional ではないと判断されてしまい <code>(Key, Value)</code> が戻り値の型と判定されます。それでコンパイルエラーになるわけですね。</p>

<p>期待した通りに取得するには、<code>json["foobar"]</code> の戻り値を <code>Value?</code> として扱う必要があるので、</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">json</span><span class="p">[</span><span class="s">"foobar"</span><span class="p">]</span><span class="o">!</span>
</span><span class="line"><span class="n">json</span><span class="p">[</span><span class="s">"foobar"</span><span class="p">]</span> <span class="kt">as</span> <span class="n">AnyObject</span><span class="o">?</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>のどちらかでアクセスする必要があるわけです。<code>!</code> を付けると unwrap されるので <code>nil</code> が入っていると実行時エラーになります。逆に <code>as AnyObject? as? String</code> でアクセスすると Optional 型になってしまいます。</p>

<p>API のインターフェースと相談して、どちらの型で処理するか決めるといいんじゃないかと思います。</p>
]]>
    </description>
    <pubDate>Thu, 28 Aug 2014 00:12:25 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[SwiftでForce Unwrapping型の配列に値を追加できない]]></title>
    <link>http://hamasyou.com/blog/2014/07/31/swift-array-force-unwrapping/</link>
    <guid>http://hamasyou.com/blog/2014/07/31/swift-array-force-unwrapping/</guid>
    <description>
      <![CDATA[<p>この記事は Xcode6 beta4 を元に記述しています。</p>

<h3>Swift の配列は mutable か immutable</h3>

<p>Swift では配列を <strong class="text-danger">mutable/immutable</strong> の区別なく定義することができるようになりました。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="n">println</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>    <span class="c1">// [0, 2, 3]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>let</code> で定義すると <strong class="text-danger">immutable</strong>、<code>var</code> で定義すると <strong class="text-danger">mutable</strong> になり、配列の代入はすべてコピーで行われるようになっています。</p>

<h3>Force UnWrapping 型!</h3>

<p>で、ハマったのが次のようなコードです。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="nl">numbers</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span><span class="o">!</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>    <span class="c1">// error: '@lvalue $T7' is not identical to 'Int'</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Force Unwrapping 型とでも言うんでしょうかね？変数に必ず値が入ってることを保証するために <code>!</code> が付いた型です。
この型で定義した配列には、値の追加や変更ができなくなっています。。</p>

<p>これで何が困るかというと、<code>UIKit</code> 使って <code>UIViewController</code> のサブクラスにプロパティを定義する際に
初期化を <code>viewDidLoad</code> で行う時には、<code>!</code> をつけないと <code>initializer</code> が必要になってしまうので、プロパティの定義には <code>!</code> を付けていました。</p>

<p>そうすると、<em>mutable</em> で扱いたかったプロパティなのに、変更できないという問題にぶち当たったわけです。。どうすんだこれ。。。</p>

<h4>コンパイルエラーの例</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">var</span> <span class="nl">numbers</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span><span class="o">!</span>
</span><span class="line">
</span><span class="line">  <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">  <span class="k">func</span> <span class="n">myFunc</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>     <span class="c1">// コンパイルエラー</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h4>うまくいく例</h4>

<p>対応としては、一旦変数で受けて、変更後に元に戻すっていうので何とかなりますが、コンパイラの方でなんとかならんもんですかね。。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line">  <span class="k">func</span> <span class="nf">myFunc</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">nums</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">numbers</span>
</span><span class="line">    <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">numbers</span> <span class="o">=</span> <span class="n">nums</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>



]]>
    </description>
    <pubDate>Thu, 31 Jul 2014 11:28:11 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[SwiftはenumをAnyObject型の変数に入れられない]]></title>
    <link>http://hamasyou.com/blog/2014/07/31/swift-enum-anyobject/</link>
    <guid>http://hamasyou.com/blog/2014/07/31/swift-enum-anyobject/</guid>
    <description>
      <![CDATA[<p>Swift で <em>enum</em> を扱う際にハマった問題です。確認は <em>Xcode6 beta4</em> で行っています。</p>

<h3>Swift の enum は AnyObject 型変数に代入できない</h3>

<p>Swift では <code>enum</code> を <code>AnyObject</code> 型の変数に入れることができません。コンパイルエラーになります。<code>Any</code> 型なら代入できます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">enum</span> <span class="nl">SomeType</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">None</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Something</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">something</span> <span class="o">=</span> <span class="n">SomeType</span><span class="p">.</span><span class="n">None</span>
</span><span class="line"><span class="n">something</span>                                     <span class="c1">// Enum Value</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="nl">anything</span><span class="p">:</span> <span class="n">AnyObject</span> <span class="o">=</span> <span class="n">SomeType</span><span class="p">.</span><span class="n">Something</span>  <span class="c1">// error: type 'SomeType' does not conform to protocol 'AnyObject'</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="nl">any</span><span class="p">:</span> <span class="n">Any</span> <span class="o">=</span> <span class="n">SomeType</span><span class="p">.</span><span class="n">Something</span>             <span class="c1">// Enum Value</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Swift の <code>enum</code> は <code>AnyObject</code> protocol を実装していないので、<code>AnyObject</code> 型の変数に入れることが出来ません。</p>

<h4>ReactiveCocoa とかと組み合わせるときにこまる</h4>

<p>これの何が不便かというと、<code>enum</code> は UIKit でよく使われていて、<a href="https://github.com/ReactiveCocoa/ReactiveCocoa" rel="external nofollow" title="ReactiveCocoa">ReactiveCocoa</a> を Swift で使う際に
<code>enum</code> で設定する例えば <code>UITableViewCellAccessoryType</code> なんかを使いたい場合にコンパイルエラーになってしまいます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="c1">// これはコンパイルエラーになる</span>
</span><span class="line"><span class="n">RAC</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="s">"cell.accessoryType"</span><span class="p">)</span> <span class="o">=</span> <span class="n">RACObserve</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="s">"viewModel.checked"</span><span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="err">$</span><span class="mi">0</span> <span class="kt">as</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">?</span> <span class="n">UITableViewCellAccessoryType</span><span class="p">.</span><span class="nl">Checkmark</span> <span class="p">:</span> <span class="n">UITableViewCellAccessoryType</span><span class="p">.</span><span class="n">None</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// こうしないといけない。。</span>
</span><span class="line"><span class="n">RACObserve</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">viewModel</span><span class="p">,</span> <span class="s">"checked"</span><span class="p">)</span>
</span><span class="line">    <span class="p">.</span><span class="n">subscribeNext</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="n">arg</span> <span class="k">in</span>
</span><span class="line">        <span class="k">let</span> <span class="n">checked</span> <span class="o">=</span> <span class="n">arg</span> <span class="kt">as</span> <span class="n">Bool</span>
</span><span class="line">        <span class="nb">self</span><span class="o">!</span><span class="p">.</span><span class="n">accessoryType</span> <span class="o">=</span> <span class="n">checked</span> <span class="o">?</span> <span class="p">.</span><span class="nl">Checkmark</span> <span class="p">:</span> <span class="p">.</span><span class="n">None</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>既存の Objective-C ライブラリで <code>id</code> が使われている箇所が、Swift では <code>AnyObject</code> に対応するので、
Closure 等で <code>id</code> を引数に取ったり、<code>id</code> を戻り値にしていたりする箇所が <code>AnyObject</code> になってしまい、
<code>enum</code> を利用することができません。</p>

<p>変数に代入するだけなら <code>Any</code> 型にすればいいんですが、既存ライブラリとの連携では難しそうです。 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>
これ、何かやり方ないんでしょうかね。。ReactiveSwift 待ちかなぁ</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn:1">
<p>Any 型にすれば代入できることを <a href="https://twitter.com/takabosoft" rel="external nofollow" title="@takabosoft">@takabosoft</a> さんに教えてもらいました。ありがとうございます！<a href="#fnref:1" rev="footnote">↩</a></p>
</li>
</ol>
</div>

]]>
    </description>
    <pubDate>Thu, 31 Jul 2014 10:39:48 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[Swift で UITableView 関連の操作をする際に NSIndexPath を作る方法]]></title>
    <link>http://hamasyou.com/blog/2014/07/03/swift-uitableview-nsindexpath/</link>
    <guid>http://hamasyou.com/blog/2014/07/03/swift-uitableview-nsindexpath/</guid>
    <description>
      <![CDATA[<p>Swift で <code>UITableView</code> 関連のロジックを書くときに、<code>NSIndexPath</code> を作るときは</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">section</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="bp">NSIndexPath</span><span class="p">(</span><span class="nl">forRow</span><span class="p">:</span> <span class="n">row</span><span class="p">,</span> <span class="nl">inSection</span><span class="p">:</span> <span class="n">section</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>のイニシャライザを使うべし。<code>NSIndexPath(index: row)</code> だと <code>row</code> の参照ができなくてエラーになる。</p>
]]>
    </description>
    <pubDate>Thu, 03 Jul 2014 11:53:41 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[Using Swift with Cocoa and Objective-C]]></title>
    <link>http://hamasyou.com/blog/2014/06/27/apple-swift-cocoa-objective-c/</link>
    <guid>http://hamasyou.com/blog/2014/06/27/apple-swift-cocoa-objective-c/</guid>
    <description>
      <![CDATA[<p><strong class="text-danger">Swift</strong> を Cocoa や Objective-C と一緒に使う方法の覚書です。</p>

<p>なお、Swift で作成したアプリは iOS8 と OS X Yosemite がリリースされた時点で審査に入れるようです。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html" rel="external nofollow" title="Using Swift with Cocoa and Objective-C">Using Swift with Cocoa and Objective-C</a></p>

<!-- more -->




<div id="toc"></div>


<h2>Basic Setup</h2>

<p>Swift から Objective-C API を呼び出すことができる。逆に、Objective-C から Swift のコードを呼び出すこともできる。</p>

<p>Swift と Objective-C のプロジェクトの大きな違いは、Swift にはヘッダーファイルがない。Swift には全ての情報が <code>.swift</code> ファイルに含まれている。</p>

<h3>import</h3>

<p>Swift でもフレームワークやライブラリを読み込むには <code>import</code> を使う。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">import</span> <span class="n">Foundation</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>Foundation</code> を読み込むことで、NSDate, NSURL, NSMutableData などを含む全ての Foundation API、全てのメソッド、プロパティ、カテゴリを利用出来るようになる。</p>

<h3>Objective-C と Swift のマッピング</h3>

<ul>
<li>Objective-C の型は同等の Swift の型にマッピングされる。<code>id</code> は <code>AnyObject</code>
</li>
<li>Objective-C のコア型は Swift の型にマッピングされる。<code>NSString</code> が <code>String</code> のように</li>
<li>Objective-C のコンセプト機能は同等の Swift のコンセプト機能にマッピングされる。ポインタが Optionals と対応するように</li>
</ul>


<p>C++ のコードは直接 Swift には取り込めない。代わりに Objective-C か C で作ったラッパーを作り、それを取り込む。</p>

<h3>Swift から Objective-C のコードを呼び出す方法</h3>

<p><strong class="text-danger">Bridging Header</strong> というものを作る。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://qiita.com/edo_m18/items/861d090a5471f4f0eeae" rel="external nofollow" title="[Swift] SwiftとObjective-Cで相互に連携する">[Swift] SwiftとObjective-Cで相互に連携する</a></p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://qiita.com/skatata/items/1facd024d239b9545031" rel="external nofollow" title="SwiftでObjective-CのFrameworkを読み込む方法">SwiftでObjective-CのFrameworkを読み込む方法</a></p>

<h2>Interoperability</h2>

<h3>Initialization</h3>

<p>Objective-C の <code>init</code> メソッド、<code>initWith</code> メソッドは、<code>init</code> で切られて <code>With</code> の部分が捨てられる。捨てられて残った部分が第一引数のパラメータ名に対応する。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Objective-C</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="objective-c"><span class="line"><span class="bp">UITableView</span> <span class="o">*</span><span class="n">myTableView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITableVIew</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectZero</span> <span class="nl">style</span><span class="p">:</span><span class="n">UITableViewStyleGrouped</span><span class="p">];</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Swift</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="nl">myTableView</span><span class="p">:</span> <span class="bp">UITableView</span> <span class="o">=</span> <span class="bp">UITableView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">CGRectZero</span><span class="p">,</span> <span class="nl">style</span><span class="p">:</span> <span class="p">.</span><span class="n">Grouped</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Objective-C のファクトリメソッドは <code>convenience initializer</code> にマッピングされている。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Objective-C</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="objective-c"><span class="line"><span class="bp">UIColor</span> <span class="o">*</span><span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithRed</span><span class="p">:</span><span class="mf">0.5</span> <span class="nl">green</span><span class="p">:</span><span class="mf">0.0</span> <span class="nl">blue</span><span class="p">:</span><span class="mf">0.5</span> <span class="nl">alpha</span><span class="p">:</span><span class="mf">1.0</span><span class="p">];</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Swift</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">color</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">alpha</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Methods</h3>

<p>Objective-C のメソッド名がそのまま Swift のメソッドになり、第一引数名が省略される。残りの引数名はそのまま残る。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Objective-C</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="objective-c"><span class="line"><span class="p">[</span><span class="n">myTableView</span> <span class="nl">insertSubview</span><span class="p">:</span><span class="n">mySubview</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">2</span><span class="p">];</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Swift</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">myTableView</span><span class="p">.</span><span class="n">insertSubview</span><span class="p">(</span><span class="n">mySubview</span><span class="p">,</span> <span class="nl">atIndex</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>id</h3>

<p>Swift ではどんな型も表すタイプとして <code>AnyObject</code> を用意している。Objective-C の <code>id</code> は <code>AnyObject</code> に対応する。</p>

<p>Objective-C のメソッドを呼び出すのに、キャストは必要ない。<code>@objc</code> 属性がメソッドに修飾されているので、そのまま呼び出すことができる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">futureDate</span> <span class="o">=</span> <span class="n">myObject</span><span class="p">.</span><span class="n">dateByAddingTimeInterval</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="k">let</span> <span class="n">timeSinceNow</span> <span class="o">=</span> <span class="n">myObject</span><span class="p">.</span><span class="n">timeIntervalSinceNow</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>AnyObject から <code>as</code> によるキャストでは、ダウンキャストが成功するかどうかの保証ができない。そのため、<code>if-let</code> 構文を使ってチェックすること。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">userDefaults</span> <span class="o">=</span> <span class="bp">NSUserDefaults</span><span class="p">.</span><span class="n">standardUserDefaults</span><span class="p">()</span>
</span><span class="line"><span class="k">let</span> <span class="nl">lastRefreshDate</span><span class="p">:</span> <span class="n">AnyObject</span><span class="o">?</span> <span class="o">=</span> <span class="n">userDefaults</span><span class="p">.</span><span class="n">objectForKey</span><span class="p">(</span><span class="s">"LastRefreshDate"</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="k">let</span> <span class="n">date</span> <span class="o">=</span> <span class="n">lastRefreshDate</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSDate</span> <span class="p">{</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="s">"\(date.timeIntervalSinceReferenceDate)"</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Closure and Block</h3>

<p>Objective-C の <code>block</code> は Swift の <code>Closure</code> に対応する。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Objective-C</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="objective-c"><span class="line"><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">completionBlock</span><span class="p">)(</span><span class="bp">NSData</span> <span class="o">*</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span><span class="cm">/* ... */</span><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Swift</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="nl">completionBlock</span><span class="p">:</span> <span class="p">(</span><span class="bp">NSData</span><span class="p">,</span> <span class="bp">NSError</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="o">=</span> <span class="p">{</span><span class="n">data</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span> <span class="cm">/* ... */</span><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>@objc アノテーション</h3>

<p>@objc アノテーションを使うことで、Swift のコードを Objective-C の中から呼び出すことができるようになる。</p>

<p><code>@IBOutlet</code>、<code>@IBAction</code>、<code>@NSManaged</code> を使うと暗黙的に @objc が付与される。</p>

<h3>Swift コードから Objective-C コードへの変換</h3>

<p>メソッドはほとんどそのままマッピングされる。init コンストラクタは、第一引数に <code>initWith</code> がつくように変換される。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Swift</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="n">playSong</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class="line"><span class="k">init</span><span class="p">(</span><span class="nl">songName</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">artist</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Objective-C</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="objective-c"><span class="line"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">playSong:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithSongName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">songName</span> <span class="nf">artist:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">artist</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Selector</h3>

<p>Objective-C のセレクタは Swift では Selector 構造体にマッピングされる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="nl">mySelector</span><span class="p">:</span> <span class="n">Selector</span> <span class="o">=</span> <span class="s">"tappedButton:"</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">import</span> <span class="n">UIKit</span>
</span><span class="line"><span class="k">class</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="n">myButton</span> <span class="o">=</span> <span class="bp">UIButton</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mi">50</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="k">init</span><span class="p">(</span><span class="n">nibName</span> <span class="nl">nibNameOrNil</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">,</span> <span class="n">bundle</span> <span class="nl">nibBundleOrNil</span><span class="p">:</span> <span class="bp">NSBundle</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">nibName</span><span class="p">:</span> <span class="n">nibName</span><span class="p">,</span> <span class="nl">bundle</span><span class="p">:</span> <span class="n">nibBundle</span><span class="p">)</span>
</span><span class="line">        <span class="n">myButton</span><span class="p">.</span><span class="n">targetForAction</span><span class="p">(</span><span class="s">"tappedButton:"</span><span class="p">,</span> <span class="nl">withSender</span><span class="p">:</span> <span class="nb">self</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">func</span> <span class="n">tappedButton</span><span class="p">(</span><span class="nl">sender</span><span class="p">:</span> <span class="bp">UIButton</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"tapped button"</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Writing Swift Classes with Objective-C Behavior</h2>

<p>Objective-C のプロトコルは Swift の protocol に対応する。Objective-C の NSObject プロトコルは <code>NSObjectProtocol</code> になっている。</p>

<h3>Integrating with Interface builder</h3>

<p>Swift でも Interface Builder の機能は利用出来る。Outlet、Actions、ライブレンダリングは Swift でも可能。</p>

<p>Swift では @IBOutlet、@IBAction をプロパティやメソッドに付与する。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="nl">MyViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class="line">    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">var</span> <span class="nl">button</span><span class="p">:</span> <span class="bp">UIButton</span>
</span><span class="line">    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">var</span> <span class="nl">textFields</span><span class="p">:</span> <span class="bp">UITextField</span><span class="p">[]</span>
</span><span class="line">    <span class="p">@</span><span class="kt">IBAction</span> <span class="k">func</span> <span class="n">buttonTapped</span><span class="p">(</span><span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"button tapped!"</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>@IBDesignable</code> と <code>@IBInspectable</code> をつかうと Interface Builder で編集が出来る。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="p">@</span><span class="n">IBDesignable</span>
</span><span class="line"><span class="k">class</span> <span class="nl">MyCustomView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class="line">    <span class="p">@</span><span class="n">IBInspectable</span> <span class="k">var</span> <span class="nl">textColor</span><span class="p">:</span> <span class="bp">UIColor</span>
</span><span class="line">    <span class="p">@</span><span class="n">IBInspectable</span> <span class="k">var</span> <span class="nl">iconHeight</span><span class="p">:</span> <span class="n">CGFloat</span>
</span><span class="line">    <span class="cm">/* ... */</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Working with Cocoa Data Types</h2>

<h3>String（NSString）、Number（NSNumber）</h3>

<p>NSString を利用したい場合は <code>as</code> を使ってキャストする。もしくは、最初から <code>NSString</code> 型を使う。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"123"</span>
</span><span class="line"><span class="p">(</span><span class="n">str</span> <span class="kt">as</span> <span class="bp">NSString</span><span class="p">).</span><span class="n">floatValue</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="n">Foundation</span>
</span><span class="line"><span class="k">let</span> <span class="nl">myString</span><span class="p">:</span> <span class="bp">NSString</span> <span class="o">=</span> <span class="s">"123"</span>
</span><span class="line"><span class="k">if</span> <span class="k">let</span> <span class="n">integerValue</span> <span class="o">=</span> <span class="p">(</span><span class="n">myString</span> <span class="kt">as</span> <span class="n">String</span><span class="p">).</span><span class="n">toInt</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="s">"\(myString) is the integer \(integerValue)"</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>NSNumber も同じ。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class="line"><span class="k">let</span> <span class="nl">m</span><span class="p">:</span> <span class="bp">NSNumber</span> <span class="o">=</span> <span class="n">n</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Array</h3>

<p>NSArray は <code>AnyObject[]</code> にマッピングされる。</p>

<h3>Foundation Data Types</h3>

<p>NSSize、NSPoint はそのまま利用出来る。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">size</span> <span class="o">=</span> <span class="n">NSSize</span><span class="p">(</span><span class="nl">width</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
</span><span class="line"><span class="k">let</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">NSRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>NSLog</h3>

<p>NSLog はそのままの構文で利用出来る。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">NSLog</span><span class="p">(</span><span class="s">"%.7f"</span><span class="p">,</span> <span class="n">pi</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>NSError and Error Reporting</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="nl">writeError</span> <span class="p">:</span> <span class="bp">NSError</span><span class="o">?</span>
</span><span class="line"><span class="k">let</span> <span class="n">written</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">writeToFile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="nl">atomically</span><span class="p">:</span> <span class="nb">false</span><span class="p">,</span>
</span><span class="line">    <span class="nl">encoding</span><span class="p">:</span> <span class="n">NSUTF8StringEncoding</span><span class="p">,</span>
</span><span class="line">    <span class="nl">error</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">writeError</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="o">!</span><span class="n">written</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="k">let</span> <span class="n">error</span> <span class="o">=</span> <span class="n">writeError</span> <span class="p">{</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"write failure: \(error.localizedDescription)"</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">func</span> <span class="n">contentsForType</span><span class="p">(</span><span class="nl">typeName</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span> <span class="nl">error</span><span class="p">:</span> <span class="n">NSErrorPointer</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AnyObject</span><span class="o">!</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="n">cannotProduceContentsForType</span><span class="p">(</span><span class="n">typeName</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="n">error</span> <span class="p">{</span>
</span><span class="line">            <span class="n">error</span><span class="p">.</span><span class="n">memory</span> <span class="o">=</span> <span class="bp">NSError</span><span class="p">(</span><span class="nl">domain</span><span class="p">:</span> <span class="n">domain</span><span class="p">,</span> <span class="nl">code</span><span class="p">:</span> <span class="n">code</span><span class="p">,</span> <span class="nl">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="o">:</span><span class="p">])</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">nil</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>

]]>
    </description>
    <pubDate>Fri, 27 Jun 2014 00:03:15 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[Apple Swift プログラミング言語おぼえがき]]></title>
    <link>http://hamasyou.com/blog/2014/06/26/apple-swift/</link>
    <guid>http://hamasyou.com/blog/2014/06/26/apple-swift/</guid>
    <description>
      <![CDATA[<p>Apple が新しいプログラミング言語 <strong class="text-danger">Swift</strong> を2014年の WWDC で発表しました。言語仕様自体は色々なモダンプログラミング言語のいいとこ取りのような感じです。独特な仕様もいくつかあるのでおぼえがきしておきます。</p>

<p>なお、Swift で作成したアプリは iOS8 と OS X Yosemite がリリースされた時点で審査に入れるようです。</p>

<p><em>Xcode6 Beta4 で Swift コンパイラでの minimum target が iOS7 と OS X10.9 に制限されました</em></p>

<p><i class="fa fa-hand-o-right"></i> <a href="https://developer.apple.com/swift/" rel="external nofollow" title="Introducing Swift">Introducing Swift</a></p>

<p>※ Xcode6 Beta4 を元に記載しています。</p>

<!-- more -->




<div id="toc"></div>


<h2>The Basics</h2>

<p><code>NSLog</code> の代わりに <code>println</code> が使える。Xcode のコンソールにも表示される。文字列の変数展開は <code>\()</code> を使う。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"hamasyou"</span>
</span><span class="line"><span class="n">println</span><span class="p">(</span><span class="s">"Hello \(name)"</span><span class="p">)</span>  <span class="c1">// Hello hamasyou</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>基本型</h3>

<p><code>Int</code>、<code>Double</code>、<code>Float</code>、<code>Bool</code>、<code>String</code>、<code>Array</code>、<code>Dictionary</code> などが用意されている。<code>Int16</code> や <code>UInt8</code> などもある。型の変換は <code>型名()</code> を使う。</p>

<p>Swift では <code>nil</code> を特別な値として定義している。<code>Bool</code> 値は <code>true</code> と <code>false</code>。条件式では <code>Bool</code> 値のみが使える。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="kt">UInt8</span><span class="p">.</span><span class="n">max</span>   <span class="c1">// 255</span>
</span><span class="line"><span class="kt">UInt8</span><span class="p">.</span><span class="n">min</span>   <span class="c1">// 0</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">three</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line"><span class="k">let</span> <span class="n">floatValue</span> <span class="o">=</span> <span class="mf">0.14159</span>
</span><span class="line"><span class="k">let</span> <span class="n">pi</span> <span class="o">=</span> <span class="n">Double</span><span class="p">(</span><span class="n">three</span><span class="p">)</span> <span class="o">+</span> <span class="n">floatValue</span> <span class="c1">// 3.14159</span>
</span><span class="line"><span class="k">let</span> <span class="n">integerPi</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span> <span class="c1">// 3</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">pi</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// この文法はコンパイルエラーになる。正しくは↓</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">pi</span> <span class="o">==</span> <span class="mf">3.14159</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>タプルも使える。不要な値を受け取るときは <code>_</code> を使う。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">httpError</span> <span class="o">=</span> <span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s">"Not Found"</span><span class="p">)</span>
</span><span class="line"><span class="n">httpError</span><span class="mf">.0</span>   <span class="c1">// 404</span>
</span><span class="line"><span class="n">httpError</span><span class="mf">.1</span>   <span class="c1">// "Not Found"</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">otherError</span> <span class="o">=</span> <span class="p">(</span><span class="nl">errorCode</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span> <span class="nl">errorMessage</span><span class="p">:</span> <span class="s">"Internal Server Error"</span><span class="p">)</span>
</span><span class="line"><span class="n">otherError</span><span class="p">.</span><span class="n">errorCode</span>    <span class="c1">// 500</span>
</span><span class="line"><span class="n">otherError</span><span class="p">.</span><span class="n">errorMessage</span> <span class="c1">// "Internal Server Error"</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span> <span class="o">=</span> <span class="n">httpError</span>
</span><span class="line"><span class="n">code</span>  <span class="c1">// 404</span>
</span><span class="line"><span class="n">msg</span>   <span class="c1">// "Not Found"</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">msg2</span><span class="p">)</span> <span class="o">=</span> <span class="n">otherError</span>
</span><span class="line"><span class="n">msg2</span>  <span class="c1">// "Internal Server Error"</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>配列は <code>[Int]</code> のように記述する。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="nl">ary</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>リテラルと変数</h3>

<p>Swift ではリテラルの定義は <code>let</code> を使い、変数の定義は <code>var</code> を使う。<code>let</code> で定義したリテラルは変更できない。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">myName</span> <span class="o">=</span> <span class="s">"hamasyou"</span>
</span><span class="line"><span class="k">let</span> <span class="err">π</span> <span class="o">=</span> <span class="mf">3.14</span>
</span><span class="line"><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mf">3.0</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>文字列を数値に直すのに <code>toInt</code> メソッドが使える。この時返される値は <code>Int</code> 型でなく、<code>Int?</code> 型なので注意。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"123"</span>
</span><span class="line"><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span>   <span class="c1">// num は Int? か Optional Int として型推論される</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>if 文の条件式には <code>Bool</code> しか記述できないが、この、<code>型 + ?</code> の形式で表される <code>Optional 型</code> も if 文の式に記述できる。この場合値が nil ではない場合に <code>true</code> と評価される。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"123"</span>
</span><span class="line"><span class="k">var</span> <span class="n">num</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">num</span> <span class="p">{</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="s">"\(str) is number of \(num!)"</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>このように、Swift では <code>nil</code> を返す可能性があるメソッドの戻り値の型は <code>Optional 型</code> になる。<code>Optional 型</code> から値を取り出すには <code>!</code> をつける。但し、nil が入っている変数から値を取り出そうとするとランタイムエラーになる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="n">str</span> <span class="o">=</span> <span class="s">"abc"</span>
</span><span class="line"><span class="n">num</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">println</span><span class="p">(</span><span class="n">num</span><span class="o">!</span><span class="p">)</span>   <span class="c1">// これはランタイムエラーになるので、必ず下の様に呼び出す</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">!</span><span class="n">num</span> <span class="p">{</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="s">"\(str) is not number"</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Optional 型から値を取り出す方法に、<code>!</code> をつける以外に次のようにも書ける。（Optional Binding）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"123"</span>
</span><span class="line"><span class="k">let</span> <span class="n">expectNum</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span>
</span><span class="line"><span class="k">if</span> <span class="k">let</span> <span class="n">actual</span> <span class="o">=</span> <span class="n">expectNum</span> <span class="p">{</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="n">actual</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Implicity Unwrapped Optionals</h3>

<p>Swift は Objective-C の nil ポインタとは違う <code>nil</code> を採用している。nil が格納される可能性がある変数は Optional 型として定義する必要がある。</p>

<p>Optional 型の変数から値を取り出すには <code>!</code> を使う。必ず値が入っている確証が持てる場合は <code>型名 + !</code> の形で記述することもできる。値が入っていない時に <code>!</code> を使うとランタイムエラーがでるので注意。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="nl">optioanValue</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>   <span class="c1">// Optional 型の変数は nil で初期化される</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"123"</span>
</span><span class="line"><span class="k">let</span> <span class="nl">num</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span>
</span><span class="line"><span class="n">num</span>   <span class="c1">// num は 123 が入る Int! で定義しない場合は型推論によって Int? 型の Wrapped Value が入っているので 123 ではない</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Range</h3>

<p><code>(a..&lt;b)</code>、<code>(a...b)</code> の形で範囲を求めることができる。<code>(a..&lt;b)</code> は b を含まない。Ruby とは逆の動きをする。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="nf">in</span> <span class="p">(</span><span class="mi">0</span> <span class="p">..</span><span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>    <span class="c1">// 0, 1, 2</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Xcode6 Beta3 から終端を含まない範囲を <code>..&lt;</code> で表すようになった。</p>

<h2>String And Character</h2>

<p><code>String</code> は <code>NSString</code> が使われているところでも使える。String は <code>Character</code> のコレクション型である。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"Hello World"</span>
</span><span class="line"><span class="k">let</span> <span class="nl">c</span><span class="p">:</span> <span class="n">Character</span> <span class="o">=</span> <span class="s">"!"</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">s</span> <span class="o">=</span> <span class="n">str</span> <span class="o">+</span> <span class="n">c</span>
</span><span class="line">
</span><span class="line"><span class="n">str</span><span class="p">.</span><span class="n">isEmpty</span>             <span class="c1">// false</span>
</span><span class="line"><span class="n">str</span><span class="p">.</span><span class="n">hasPrefix</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">)</span>  <span class="c1">// true</span>
</span><span class="line"><span class="n">str</span><span class="p">.</span><span class="n">hasSuffix</span><span class="p">(</span><span class="s">"World"</span><span class="p">)</span>  <span class="c1">// true</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Collection Types</h2>

<h3>Array</h3>

<p>Swift の配列は <code>Array</code> 型。<code>Array&lt;SomeType&gt;</code> で表す。略語として <code>型名[]</code> の形式も使える。<code>NSArray</code>、<code>NSMutableArray</code> が使われているところでも使える。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Hello"</span><span class="p">,</span> <span class="s">"World"</span><span class="p">,</span> <span class="s">"Good"</span><span class="p">]</span>
</span><span class="line"><span class="n">list</span><span class="p">.</span><span class="n">count</span>
</span><span class="line"><span class="n">list</span> <span class="o">+=</span> <span class="s">"Nice"</span>      <span class="c1">// ["Hello", "World", "Good", "Nice"]</span>
</span><span class="line"><span class="n">list</span><span class="p">.</span><span class="n">removeLast</span><span class="p">()</span>   <span class="c1">// "Nice"</span>
</span><span class="line">
</span><span class="line"><span class="k">var</span> <span class="nl">stringList</span><span class="p">:</span> <span class="n">String</span><span class="p">[]</span><span class="o">?</span>             <span class="c1">// nil</span>
</span><span class="line"><span class="k">var</span> <span class="nl">anyList</span><span class="p">:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">AnyObject</span><span class="o">&gt;?</span>        <span class="c1">// nil</span>
</span><span class="line"><span class="k">var</span> <span class="nl">stringList2</span><span class="p">:</span> <span class="n">Array</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[]</span>   <span class="c1">// empty String array</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Dictionary</h3>

<p>Swift の Hash は <code>Dictionary</code> 型。<code>Dictionary&lt;KeyType, ValueType&gt;</code> で定義する。<code>NSDictionary</code>、<code>NSMutableDictionary</code> が使われているところでも使える。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="n">airports</span> <span class="o">=</span> <span class="p">[</span><span class="s">"TYO"</span><span class="o">:</span> <span class="s">"Tokyo"</span><span class="p">,</span> <span class="s">"DUB"</span><span class="o">:</span> <span class="s">"Dublin"</span><span class="p">]</span>
</span><span class="line"><span class="c1">// var airports: Dictionary&lt;String, String&gt; = ["TYO": "Tokyo", "DUB": "Dublin"] とも書ける</span>
</span><span class="line"><span class="n">airports</span><span class="p">.</span><span class="n">count</span>
</span><span class="line"><span class="n">airports</span><span class="p">[</span><span class="s">"OSK"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"OSAKA"</span>
</span><span class="line"><span class="n">airports</span><span class="p">[</span><span class="s">"HOGE"</span><span class="p">]</span>    <span class="c1">// nil</span>
</span><span class="line"><span class="n">airports</span><span class="p">.</span><span class="n">keys</span>       <span class="c1">// ["TYO", "DUB", "OSK"]</span>
</span><span class="line"><span class="n">airports</span><span class="p">.</span><span class="n">values</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">in</span> <span class="n">airports</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">var</span> <span class="nl">dict</span><span class="p">:</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;?</span>             <span class="c1">// nil</span>
</span><span class="line"><span class="k">var</span> <span class="n">emptyDict</span> <span class="o">=</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span><span class="p">()</span>      <span class="c1">// empty Dictionary </span>
</span><span class="line"><span class="k">var</span> <span class="nl">emptyDict2</span><span class="p">:</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>  <span class="c1">// empty Dictionary</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Functions</h2>

<p>関数は <code>func メソッド名(引数: 型) -&gt; 戻り値の型</code> の形で書く。戻り値が必要ない場合は省略するか、<code>Void</code> を記述する。</p>

<p>Swift の関数（メソッド）は <em>第一級関数</em> なので、変数や引数に渡すことができる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="n">hello</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">greet</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="s">"Hello \(name), \(greet)"</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">println</span><span class="p">(</span><span class="n">hello</span><span class="p">(</span><span class="s">"hamasyou"</span><span class="p">,</span> <span class="s">"Good Morning"</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">func</span> <span class="n">sayHello</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="p">{</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="s">"Hello \(name)"</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">sayHello</span><span class="p">(</span><span class="s">"hamasyou"</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>戻り値にはタプルを指定することもできる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="nf">count</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nl">vowels</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">consonants</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">others</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">n3</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">count</span><span class="p">()</span>
</span><span class="line"><span class="n">ret</span><span class="p">.</span><span class="n">vowels</span>
</span><span class="line"><span class="n">ret</span><span class="p">.</span><span class="n">consonants</span>
</span><span class="line"><span class="n">ret</span><span class="p">.</span><span class="n">others</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>External Parameter Names</h3>

<p>関数呼び出し時にキーワード引数として呼び出す名前を指定できる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="nf">someFunction</span><span class="p">(</span><span class="n">externalParameterName</span> <span class="nl">localParameterName</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">localParameterName</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">someFunction</span><span class="p">(</span><span class="nl">externalParameterName</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">func</span> <span class="n">join</span><span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">withJoiner</span> <span class="nl">joiner</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">joiner</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">join</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">,</span> <span class="s">"World"</span><span class="p">,</span> <span class="nl">withJoiner</span><span class="p">:</span> <span class="s">"-"</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>externalParameterName</code> と <code>localParameterName</code> を同じにしたいときは、<code>#</code> を使う。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span><span class="p">(</span><span class="n">containsCharacter</span><span class="p">(</span><span class="err">#</span><span class="nl">string</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="err">#</span><span class="nl">characterToFind</span><span class="p">:</span> <span class="n">Character</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="n">character</span> <span class="k">in</span> <span class="n">string</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="n">character</span> <span class="o">==</span> <span class="n">characterToFind</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="nb">true</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">false</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>引数にデフォルト値を指定することもできる。デフォルト値を指定して、externalParameterName を指定しないときは、localParameterName が externalParameterName になる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="n">join</span><span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">joiner</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">"-"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">joiner</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">join</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">,</span> <span class="s">"World"</span><span class="p">,</span> <span class="nl">joiner</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>_</code> を externalParameterName に指定すれば、デフォルト値を設定しても呼び出し時に externalParameterName を指定する必要はなくなる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="n">join</span><span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">_</span> <span class="nl">joiner</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">"-"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">joiner</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">join</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">,</span> <span class="s">"World"</span><span class="p">,</span> <span class="s">" "</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>In-Out Parameters</h3>

<p>関数の引数は定数（<code>let</code>）として渡される。引数を変数（<code>var</code>）として渡したい場合は、引数名の前に <code>var</code> をつける。</p>

<p>var をつけて引数を定義しても、変更の影響を受けるのは関数の中だけ。関数の外の変数にも影響を及ぼしたい場合には <code>inout</code> をつけて引数を定義して、引数を渡すときに <code>&amp;</code> を使う。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="nf">swap</span><span class="p">(</span><span class="k">inout</span> <span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="k">inout</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">s1</span>
</span><span class="line">    <span class="n">s1</span> <span class="o">=</span> <span class="n">s2</span>
</span><span class="line">    <span class="n">s2</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">var</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"Hello"</span>
</span><span class="line"><span class="k">var</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"World"</span>
</span><span class="line"><span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">s1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">s2</span><span class="p">)</span>
</span><span class="line"><span class="n">s1</span>    <span class="c1">// "World"</span>
</span><span class="line"><span class="n">s2</span>    <span class="c1">// "Hello"</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Closures</h2>

<p>Swift の Closure は次の点が最適化されている。</p>

<ul>
<li>引数と戻り値の型が推論される</li>
<li>Closre Body が単一式の場合はそれが暗黙の戻り値になる</li>
<li>引数を略式で書ける</li>
<li>Closure を最後の引数として取るメソッドの場合、Closure を <code>()</code> の外側に書くことができる</li>
</ul>


<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Closure Syntax</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="p">{</span> <span class="p">(</span><span class="n">parameters</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">returnType</span> <span class="k">in</span>
</span><span class="line">    <span class="n">statements</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Closure syntaxes</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Chris"</span><span class="p">,</span> <span class="s">"Alex"</span><span class="p">,</span> <span class="s">"Ewa"</span><span class="p">,</span> <span class="s">"Barry"</span><span class="p">,</span> <span class="s">"Daniella"</span><span class="p">]</span>
</span><span class="line"><span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s1</span> <span class="o">&lt;</span> <span class="n">s2</span>
</span><span class="line"><span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span> <span class="k">return</span> <span class="n">s1</span> <span class="o">&lt;</span> <span class="n">s2</span> <span class="p">})</span>
</span><span class="line"><span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="k">in</span> <span class="k">return</span> <span class="n">s1</span> <span class="o">&lt;</span> <span class="n">s2</span> <span class="p">})</span>
</span><span class="line"><span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="k">in</span> <span class="n">s2</span> <span class="o">&lt;</span> <span class="n">s2</span> <span class="p">})</span>
</span><span class="line"><span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&lt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">})</span>
</span><span class="line"><span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">)</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&lt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>map sample</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">digitNames</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="mi">0</span><span class="o">:</span> <span class="s">"Zero"</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span> <span class="s">"One"</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span> <span class="s">"Two"</span><span class="p">,</span>   <span class="mi">3</span><span class="o">:</span> <span class="s">"Three"</span><span class="p">,</span> <span class="mi">4</span><span class="o">:</span> <span class="s">"Four"</span><span class="p">,</span>
</span><span class="line">    <span class="mi">5</span><span class="o">:</span> <span class="s">"Five"</span><span class="p">,</span> <span class="mi">6</span><span class="o">:</span> <span class="s">"Six"</span><span class="p">,</span> <span class="mi">7</span><span class="o">:</span> <span class="s">"Seven"</span><span class="p">,</span> <span class="mi">8</span><span class="o">:</span> <span class="s">"Eight"</span><span class="p">,</span> <span class="mi">9</span><span class="o">:</span> <span class="s">"Nine"</span>
</span><span class="line"><span class="p">]</span>
</span><span class="line"><span class="k">let</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">510</span><span class="p">]</span>
</span><span class="line"><span class="k">let</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="k">var</span> <span class="n">num</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="k">in</span>
</span><span class="line">    <span class="k">var</span> <span class="n">output</span> <span class="o">=</span> <span class="s">""</span>
</span><span class="line">    <span class="k">while</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">        <span class="n">output</span> <span class="o">=</span> <span class="n">digitNames</span><span class="p">[</span><span class="n">num</span> <span class="o">%</span> <span class="mi">10</span><span class="p">]</span><span class="o">!</span> <span class="o">+</span> <span class="n">output</span>
</span><span class="line">        <span class="n">num</span> <span class="o">/=</span> <span class="mi">10</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">output</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">strings</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Closure sample</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="nf">makeIncrementor</span><span class="p">(</span><span class="n">forIncrement</span> <span class="nl">amount</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="n">runningTotal</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">func</span> <span class="n">incrementor</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class="line">        <span class="n">runningTotal</span> <span class="o">+=</span> <span class="n">amount</span>
</span><span class="line">        <span class="k">return</span> <span class="n">runningTotal</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">incrementor</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">incrementByTen</span> <span class="o">=</span> <span class="n">makeIncrementor</span><span class="p">(</span><span class="nl">forIncrement</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="n">incrementByTen</span><span class="p">()</span>    <span class="c1">// 10</span>
</span><span class="line"><span class="n">incrementByTen</span><span class="p">()</span>    <span class="c1">// 20</span>
</span><span class="line"><span class="n">incrementByTen</span><span class="p">()</span>    <span class="c1">// 30</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Enumerations</h2>

<p>Swift では <code>Enumeration</code> も first-class type である。Swift ではデフォルト値を設定しない限り、自動で 0, 1, 2 の様な値がふられることはない。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">enum</span> <span class="n">CompassPoint</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">North</span>
</span><span class="line">    <span class="k">case</span> <span class="n">South</span>
</span><span class="line">    <span class="k">case</span> <span class="n">East</span>
</span><span class="line">    <span class="k">case</span> <span class="n">West</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">CompassPoint</span><span class="p">.</span><span class="n">North</span>
</span><span class="line">
</span><span class="line"><span class="k">enum</span> <span class="nl">Numbers</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Zero</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">One</span><span class="p">,</span> <span class="n">Two</span><span class="p">,</span> <span class="n">Three</span><span class="p">,</span> <span class="n">Four</span><span class="p">,</span> <span class="n">Five</span><span class="p">,</span> <span class="n">Six</span><span class="p">,</span> <span class="n">Seven</span><span class="p">,</span> <span class="n">Eight</span><span class="p">,</span> <span class="n">Nine</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">Numbers</span><span class="p">.</span><span class="n">Four</span><span class="p">.</span><span class="n">toRaw</span><span class="p">()</span>                <span class="c1">// 4</span>
</span><span class="line"><span class="n">Numbers</span><span class="p">.</span><span class="n">fromRaw</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="o">==</span> <span class="n">Numbers</span><span class="p">.</span><span class="n">Seven</span> <span class="c1">// true </span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Associated Values</h3>

<p>Swift の enumerations は関連する値を保持することができる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">enum</span> <span class="n">Barcode</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">UPCA</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">QRCode</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">productBarcode</span> <span class="o">=</span> <span class="n">Barcode</span><span class="p">.</span><span class="n">UPCA</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">85900</span><span class="n">_51226</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="k">switch</span> <span class="n">productBarcode</span> <span class="p">{</span>
</span><span class="line"><span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">UPCA</span><span class="p">(</span><span class="n">numberSystem</span><span class="p">,</span> <span class="n">identifier</span><span class="p">,</span> <span class="n">check</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="s">"UPC-A with value of \(numberSystem), \(identifier), \(check)."</span><span class="p">)</span>
</span><span class="line"><span class="k">case</span> <span class="k">let</span> <span class="p">.</span><span class="n">QRCode</span><span class="p">(</span><span class="n">productCode</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="s">"QR code with value of \(productCode)."</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Classes and Structures</h2>

<p>Swift では、クラスと構造体はほぼ同じ物と考えることができる。構造体は参照ではなく copy value で管理される。</p>

<blockquote>
<p>Unlike value types, reference types are not copied when they are assigned to a variable or constant, or when they are passed to a function. Rather than a copy, a reference to the same existing instance is used instead.</p>
<footer><strong>Classes Are Reference Types</strong></footer>
</blockquote>


<h4>クラスと構造体の共通点</h4>

<ul>
<li>
<strong>プロパティ</strong> を定義することができる</li>
<li>
<strong>メソッド</strong> を定義することができる</li>
<li>
<strong>subscripts</strong> （配列の<code>[0]</code> のようにアクセスできる仕組み）を提供することができる</li>
<li>
<strong>イニシャライザ</strong> （コンストラクタ）を定義することができる</li>
<li>デフォルトの振る舞いを拡張することができる</li>
<li>
<strong>protocol</strong> を使うことができる</li>
</ul>


<h4>クラスだけがもつ機能</h4>

<ul>
<li><strong>継承</strong></li>
<li>タイプキャストが可能</li>
<li>
<strong>デイニシャライザ</strong> （デストラクタ）を定義することができる</li>
<li>ひとつ以上の参照カウントが許される（構造体は copy-value、クラスは reference）</li>
</ul>


<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>syntax</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">struct</span> <span class="n">Resolution</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">var</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="n">VideoMode</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="n">resolution</span> <span class="o">=</span> <span class="n">Resolution</span><span class="p">()</span>
</span><span class="line">    <span class="k">var</span> <span class="n">interlaced</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class="line">    <span class="k">var</span> <span class="n">frameRate</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">let</span> <span class="n">someResolution</span> <span class="o">=</span> <span class="n">Resolution</span><span class="p">()</span>
</span><span class="line"><span class="k">let</span> <span class="n">someVideoMode</span> <span class="o">=</span> <span class="n">VideoMode</span><span class="p">()</span>
</span><span class="line"><span class="n">someVideoMode</span><span class="p">.</span><span class="n">resolution</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mi">1280</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Objective-C とは違って、参照をたどって直接値を設定することも可能。</p>

<p>構造体は、暗黙のイニシャライザを使って、プロパティを初期化することが可能。クラスはイニシャライザを明示的に定義しなければいけない。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="n">rvga</span> <span class="o">=</span> <span class="n">Resolution</span><span class="p">(</span><span class="nl">width</span><span class="p">:</span> <span class="mi">640</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mi">480</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>クラスと構造体のどちらを選ぶか</h3>

<ul>
<li>構造体を使う一番の理由は関係する値をまとめるため</li>
<li>プロパティのデータを何かしら処理する場合には、クラスの方がいいかも</li>
</ul>


<h3>Array と Dictionary</h3>

<p>Swift の Array と Dictionary は構造体の様に振舞う。</p>

<p>Dictionary は変数に割り当てられる際にコピーされる。Key/Value の Value がさらに Dictionary の場合はそれもコピーされる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Peter"</span><span class="o">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s">"Wei"</span><span class="o">:</span> <span class="mi">35</span><span class="p">,</span> <span class="s">"Anish"</span><span class="o">:</span> <span class="mi">65</span><span class="p">,</span> <span class="s">"Katya"</span><span class="o">:</span> <span class="mi">19</span><span class="p">]</span>
</span><span class="line"><span class="k">var</span> <span class="n">copiedAges</span> <span class="o">=</span> <span class="n">ages</span>
</span><span class="line"><span class="n">ages</span><span class="p">[</span><span class="s">"Peter"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">24</span>    <span class="c1">// 24</span>
</span><span class="line"><span class="n">copiedAges</span><span class="p">[</span><span class="s">"Peter"</span><span class="p">]</span>   <span class="c1">// 23</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Xcode6 Beta3 からは、Array の動作も Dictionary と同じ動きをする。つまり、値がコピーされる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">]</span>
</span><span class="line"><span class="k">var</span> <span class="n">otherNums</span> <span class="o">=</span> <span class="n">nums</span>
</span><span class="line">
</span><span class="line"><span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class="line"><span class="n">otherNums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>    <span class="c1">// 50</span>
</span><span class="line">
</span><span class="line"><span class="n">nums</span> <span class="o">+=</span> <span class="mi">100</span>     <span class="c1">// occure copy, nums is [50, 20, 30, 40, 100]</span>
</span><span class="line"><span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>    <span class="c1">// nums is [10, 20, 30, 40, 100]</span>
</span><span class="line"><span class="n">otherNums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>    <span class="c1">// 50, otherNums is [50, 20, 30, 40]</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Array で参照を切りたいときは <code>unshare()</code> メソッドを使う。変数への割り当て時に強制的にコピーしたいときは <code>copy()</code> メソッドを使う。</p>

<h2>Properties</h2>

<h3>Lazy Stored Properties</h3>

<p>最初にアクセスされるまで初期化されないようにするには、<code>@lazy</code> を使用する。変数（var）で定義するプロパティには lazy をつけるようにするといい。</p>

<blockquote>
<p>You must always declare a lazy property as a variable (with the var keyword), because its initial value may not be retrieved until after instance initialization completes. Constant properties must always have a value before initialization completes, and therefore cannot be declared as lazy.</p>
<footer><strong>Lazy Stored Properties</strong></footer>
</blockquote>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="n">DataManager</span> <span class="p">{</span>
</span><span class="line">    <span class="n">lazy</span> <span class="k">var</span> <span class="n">importer</span> <span class="o">=</span> <span class="n">DataImporter</span><span class="p">()</span>   <span class="c1">// DataImporter is assumed to take a non-trivial amount of time to initialize.</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>Xcode6 Beta4 から <code>@final</code>、 <code>@lazy</code>、 <code>@optional</code>、<code>@required</code> に <code>@</code> が不要になった。</p>

<h3>Computed Properties</h3>

<p><code>center</code> プロパティが Computed Property になる。<code>set</code> で受け取る引数は明示してもいいし、明示しない場合は <code>newValue</code> で受け取れる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">struct</span> <span class="n">Rect</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Point</span><span class="p">()</span>
</span><span class="line">    <span class="k">var</span> <span class="n">size</span> <span class="o">=</span> <span class="n">Size</span><span class="p">()</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">center</span><span class="p">:</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class="line">    <span class="kr">get</span> <span class="p">{</span>
</span><span class="line">        <span class="k">let</span> <span class="n">centerX</span> <span class="o">=</span> <span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">        <span class="k">let</span> <span class="n">centerY</span> <span class="o">=</span> <span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">centerX</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">centerY</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kr">set</span> <span class="p">{</span>
</span><span class="line">        <span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">newValue</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">        <span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">newValue</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Property Observers</h3>

<p><code>willSet</code>, <code>didSet</code> を使うと、プロパティが設定されるまえ、設定された後にコールバックを受け取ることができる。これらのコールバックは初期化時にはよばれない。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="n">StepCounter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">totalSteps</span><span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class="line">    <span class="kr">willSet</span><span class="p">(</span><span class="n">newTotalSteps</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"About to set totalSteps to \(newTotalSteps)"</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kr">didSet</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="n">totalSteps</span> <span class="o">&gt;</span> <span class="n">oldValue</span>  <span class="p">{</span>
</span><span class="line">            <span class="n">println</span><span class="p">(</span><span class="s">"Added \(totalSteps - oldValue) steps"</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">let</span> <span class="n">stepCounter</span> <span class="o">=</span> <span class="n">StepCounter</span><span class="p">()</span>
</span><span class="line"><span class="n">stepCounter</span><span class="p">.</span><span class="n">totalSteps</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class="line"><span class="c1">// About to set totalSteps to 200</span>
</span><span class="line"><span class="c1">// Added 200 steps</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Methods</h2>

<p>メソッドにも関数と同じく <code>externalParameterName</code> と <code>localParameterName</code> を指定できる。メソッドの場合は関数と違って、externalParameterName と localParameterName の定義の振る舞いが違う。</p>

<p>メソッドは最初の引数の externalParameterName は、localParameterName と同じになり、呼び出し時は最初の引数の externalParameterName は省略できる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="n">MyClass</span> <span class="p">{</span>
</span><span class="line">    <span class="k">func</span> <span class="n">hello</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">greet</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">"Hello \(name) \(greet)"</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</span><span class="line"><span class="n">obj</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="s">"hamasyou"</span><span class="p">,</span> <span class="nl">greet</span><span class="p">:</span> <span class="s">"Good Morning"</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>第二引数以降の呼び出しで externalParameterName を指定したくない場合は <code>_</code> を使う。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="n">MyClass</span> <span class="p">{</span>
</span><span class="line">    <span class="k">func</span> <span class="n">hello</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">_</span> <span class="nl">greet</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s">"Hello \(name) \(greet)"</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</span><span class="line"><span class="n">obj</span><span class="p">.</span><span class="n">hello</span><span class="p">(</span><span class="s">"hamasyou"</span><span class="p">,</span> <span class="s">"Good Night"</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Modifying Value Types from Within Instance Methods</h3>

<p>構造体と Enumerations はデフォルトでメソッドの中からプロパティの変更を行うことができない。変更できるようにするには <code>mutating</code> でメソッドを修飾する。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">struct</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="kr">mutating</span> <span class="k">func</span> <span class="n">moveByX</span><span class="p">(</span><span class="nl">deltaX</span><span class="p">:</span> <span class="n">Double</span><span class="p">,</span> <span class="n">y</span> <span class="nl">deltaY</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">x</span> <span class="o">+=</span> <span class="n">deltaX</span>
</span><span class="line">        <span class="n">y</span> <span class="o">+=</span> <span class="n">deltaY</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Access Control Level</h2>

<p>Xcode6 Beta4 より 3つのアクセスレベルが用意された。</p>

<dl>
<dt>private</dt>
<dd>定義された <em>ソースファイル</em> 内からのみアクセスできる</dd>
<dt>internal</dt>
<dd>定義されたエンティティ内からであればどこからでもアクセスできる</dd>
<dt>public</dt>
<dd>どこからでもアクセスできる</dd>
</dl>

<p>デフォルトは <em>internal</em>。</p>

<h2>Subscripts</h2>

<p>Subscript はコレクションにアクセスするための略式を定義するもの。クラスや構造体、Enumeration に定義できる。定義すると <code>[0]</code> などでアクセスできるようになる。</p>

<p><code>subscript</code> の引数は複数指定することもできる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">subscript</span><span class="p">(</span><span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class="line">    <span class="kr">get</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// return an appropriate subscript value here</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kr">set</span><span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// perform a suitable setting action here</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Inheritance</h2>

<p>メソッドやプロパティのオーバーライドには <code>override</code> キーワードを使用する。override されたくないメソッドやプロパティには <code>@final</code> を指定する。</p>

<h2>Initialization</h2>

<p>イニシャライザは <code>init</code> で定義する。イニシャライザに引数を指定する場合、externalPropertyName を指定しなければ暗黙で localPropertyName が externalPropertyName に指定される。</p>

<p>メソッドと違い、<em>イニシャライザの呼び出し時には全ての externalPropertyName の指定が必要</em>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">struct</span> <span class="n">Color</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="n">red</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">green</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">blue</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">init</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">self</span><span class="p">.</span><span class="n">red</span>   <span class="o">=</span> <span class="n">red</span>
</span><span class="line">        <span class="nb">self</span><span class="p">.</span><span class="n">green</span> <span class="o">=</span> <span class="n">green</span>
</span><span class="line">        <span class="nb">self</span><span class="p">.</span><span class="n">blue</span>  <span class="o">=</span> <span class="n">blue</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">let</span> <span class="n">magenta</span> <span class="o">=</span> <span class="n">Color</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h3>Designated Initializers and Convenience Initializers</h3>

<p><code>Designated Initializer</code> はインスタンスの初期化の目的で定義される。<code>Convenience Initializer</code> は Designated Intitializer を呼び出す際のデフォルト値などを設定する目的で使う。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="n">MyClass</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class="line">    <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">convenience</span> <span class="k">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">self</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">"hamasyou"</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">let</span> <span class="n">me</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Type Casting</h2>

<p>型チェックには <code>is</code> を使う。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">library</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="n">item</span> <span class="kt">is</span> <span class="n">Movie</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// execute movie logic</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>ダウンキャストに <code>as</code> が使える。Optional Type の場合は <code>as?</code> を使う。Dictionary とかから値を取り出すときに使える。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">library</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="k">let</span> <span class="n">movie</span> <span class="o">=</span> <span class="n">item</span> <span class="kt">as</span><span class="o">?</span> <span class="n">Movie</span> <span class="p">{</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"Movie: '\(movie.name)', dir. \(movie.director)"</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="k">let</span> <span class="n">song</span> <span class="o">=</span> <span class="n">item</span> <span class="kt">as</span><span class="o">?</span> <span class="n">Song</span> <span class="p">{</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"Song: '\(song.name)', by \(song.artist)"</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>配列の型に <code>AnyObject</code> を使うと、利用時にキャストが必要だが何の型か指定しなくても入れれるようになる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">let</span> <span class="nl">someObjects</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">    <span class="n">Movie</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">"2001: A Space Odyssey"</span><span class="p">,</span> <span class="nl">director</span><span class="p">:</span> <span class="s">"Stanley Kubrick"</span><span class="p">),</span>
</span><span class="line">    <span class="n">Movie</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">"Moon"</span><span class="p">,</span> <span class="nl">director</span><span class="p">:</span> <span class="s">"Duncan Jones"</span><span class="p">),</span>
</span><span class="line">    <span class="n">Movie</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">"Alien"</span><span class="p">,</span> <span class="nl">director</span><span class="p">:</span> <span class="s">"Ridley Scott"</span><span class="p">)</span>
</span><span class="line"><span class="p">]</span>
</span><span class="line"><span class="k">for</span> <span class="n">object</span> <span class="k">in</span> <span class="n">someObjects</span> <span class="p">{</span>
</span><span class="line">    <span class="k">let</span> <span class="n">movie</span> <span class="o">=</span> <span class="n">object</span> <span class="kt">as</span> <span class="n">Movie</span>
</span><span class="line">    <span class="n">println</span><span class="p">(</span><span class="s">"Movie: '\(movie.name)', dir. \(movie.director)"</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>配列の型に <code>Any</code> を使うと、なんでもいれれるようになる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">var</span> <span class="n">things</span> <span class="o">=</span> <span class="n">Any</span><span class="p">[]()</span>
</span><span class="line">
</span><span class="line"><span class="n">things</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="n">things</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mf">0.0</span><span class="p">)</span>
</span><span class="line"><span class="n">things</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</span><span class="line"><span class="n">things</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mf">3.14159</span><span class="p">)</span>
</span><span class="line"><span class="n">things</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"hello"</span><span class="p">)</span>
</span><span class="line"><span class="n">things</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="mf">3.0</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">))</span>
</span><span class="line"><span class="n">things</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Movie</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">"Ghostbusters"</span><span class="p">,</span> <span class="nl">director</span><span class="p">:</span> <span class="s">"Ivan Reitman"</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">thing</span> <span class="k">in</span> <span class="n">things</span> <span class="p">{</span>
</span><span class="line">    <span class="k">switch</span> <span class="n">thing</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="mi">0</span> <span class="kt">as</span> <span class="nl">Int</span><span class="p">:</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"zero as an Int"</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="mi">0</span> <span class="kt">as</span> <span class="nl">Double</span><span class="p">:</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"zero as a Double"</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="k">let</span> <span class="n">someInt</span> <span class="kt">as</span> <span class="nl">Int</span><span class="p">:</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"an integer value of \(someInt)"</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="k">let</span> <span class="n">someDouble</span> <span class="kt">as</span> <span class="n">Double</span> <span class="k">where</span> <span class="n">someDouble</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">:</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"a positive double value of \(someDouble)"</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="kt">is</span> <span class="nl">Double</span><span class="p">:</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"some other double value that I don't want to print"</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="k">let</span> <span class="n">someString</span> <span class="kt">as</span> <span class="nl">String</span><span class="p">:</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"a string value of </span><span class="se">\"</span><span class="s">\(someString)</span><span class="se">\"</span><span class="s">"</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="k">let</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="kt">as</span> <span class="p">(</span><span class="n">Double</span><span class="p">,</span> <span class="n">Double</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"an (x, y) point at \(x), \(y)"</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="k">let</span> <span class="n">movie</span> <span class="kt">as</span> <span class="nl">Movie</span><span class="p">:</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"a movie called '\(movie.name)', dir. \(movie.director)"</span><span class="p">)</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span>
</span><span class="line">        <span class="n">println</span><span class="p">(</span><span class="s">"something else"</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<h2>Extensions</h2>

<p>既存のクラス、構造体、Enumeration に機能を追加できる。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="swift"><span class="line"><span class="k">extension</span> <span class="nl">SomeType</span><span class="p">:</span> <span class="n">SomeProtocol</span><span class="p">,</span> <span class="n">AnotherProtocol</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// implementation of protocol requirements goes here</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">extension</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">km</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">self</span> <span class="o">*</span> <span class="mi">1</span><span class="n">_000</span><span class="mf">.0</span> <span class="p">}</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">m</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">self</span> <span class="p">}</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">cm</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">self</span> <span class="o">/</span> <span class="mf">100.0</span> <span class="p">}</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">mm</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">self</span> <span class="o">/</span> <span class="mi">1</span><span class="n">_000</span><span class="mf">.0</span> <span class="p">}</span>
</span><span class="line">    <span class="k">var</span> <span class="nl">ft</span><span class="p">:</span> <span class="n">Double</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">self</span> <span class="o">/</span> <span class="mf">3.28084</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>

]]>
    </description>
    <pubDate>Thu, 26 Jun 2014 08:00:55 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[Titanium AlloyでSNS認証をアプリスキーマを使ってクライアント側で行う方法]]></title>
    <link>http://hamasyou.com/blog/2014/05/14/titanium-sns-oauth-app-scheme/</link>
    <guid>http://hamasyou.com/blog/2014/05/14/titanium-sns-oauth-app-scheme/</guid>
    <description>
      <![CDATA[<p><strong class="text-danger">Titanium Alloy</strong> で SNS 認証 (<em>OAuth</em>) をアプリ側で行う方法のまとめです。</p>

<p>iPhone や Android だと、アプリスキーマ （例: snsnet://twitter）を使ってブラウザのリンクからアプリを立ち上げることができます。
この仕組を使って、アプリ内でブラウザを立ち上げるのではなく、アプリのブラウザを使って <strong class="text-danger">OAuth</strong> 認証を行い、アプリに戻ってくるということができるようになります。</p>

<p>ここで紹介するやり方は、iPhone と Android の両方で使える方法ですが、一部ブラウザ側の画面を閉じるためにサーバサイドが必要になります。
また、Facebook は認証後の戻りURL (redirect_url) にアプリスキーマを利用することができませんので、Facebook 連携を行うのもサーバサイドが必要です。</p>

<p>まぁ、Facebook に関しては、Titanium にすでにモジュールが組み込まれていて、簡単に認証を行えるようになっているので、わざわざアプリのブラウザを使って認証を行う必要もないんですけど。。</p>

<!-- more -->


<p>ところどころ、処理を端折っていたりしますが、雰囲気だけ掴んでください。<code>OAuth</code> オブジェクトは <em>oauth_adapter</em> とかで検索するとでてくるライブラリを使っています。</p>

<p>サンプルのプロジェクトフォルダは <a href="http://hamasyou.com/assets/sample/snsnet.zip">snsnet.zip</a> にあります。これだけでは動きませんが雰囲気をつかむように利用してください。</p>

<p><i class="fa fa-hand-o-right"></i> <a href="http://wada811.blogspot.com/2014/01/android-twitter-oauth.html" rel="external nofollow" title="参考: [Android]TwitterのOAuth認証を行う">参考: [Android]TwitterのOAuth認証を行う</a></p>

<h2>1. アプリのブラウザを開く</h2>

<p>SNS 認証を行うトリガーとなる処理で、まずはアプリのブラウザを開きます。アプリのブラウザを開くには <code>Ti.Platform.openURL</code> を使います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/app/controllers/index.js</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="kd">function</span> <span class="nx">onFacebookLogin</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">OAuth</span><span class="p">.</span><span class="nx">addToURL</span><span class="p">(</span><span class="s1">'https://www.facebook.com/dialog/oauth'</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">client_id</span><span class="o">:</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">CFG</span><span class="p">.</span><span class="nx">facebookConsumerKey</span><span class="p">,</span>
</span><span class="line">        <span class="nx">redirect_uri</span><span class="o">:</span> <span class="s1">'https://example.com/fbredirect'</span><span class="p">,</span>
</span><span class="line">        <span class="nx">scope</span><span class="o">:</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">CFG</span><span class="p">.</span><span class="nx">facebookPermissions</span><span class="p">,</span>
</span><span class="line">        <span class="nx">auth_type</span><span class="o">:</span> <span class="s1">'reauthenticate'</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">openURL</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">onTwitterLogin</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">oauth</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OAuth</span><span class="p">({</span>
</span><span class="line">        <span class="nx">consumerKey</span><span class="o">:</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">CFG</span><span class="p">.</span><span class="nx">twitterConsumerKey</span><span class="p">,</span>
</span><span class="line">        <span class="nx">consumerSecret</span><span class="o">:</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">CFG</span><span class="p">.</span><span class="nx">twitterConsumerSecret</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="nx">oauth</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'https://api.twitter.com/oauth/request_token'</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">oauth_callback</span><span class="o">:</span> <span class="s1">'https://example.com/twredirect'</span>
</span><span class="line">    <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">Ti</span><span class="p">.</span><span class="nx">Platform</span><span class="p">.</span><span class="nx">openURL</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">'%s?%s&amp;force_login=false'</span><span class="p">,</span> <span class="s1">'https://api.twitter.com/oauth/authorize'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">responseText</span><span class="p">));</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">$</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">open</span><span class="p">();</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>ブラウザを開くときに、<em>twitter</em> の場合は <code>oauth_callback</code> で OAuth の戻りの URL を指定します。<code>twredirect</code> の処理は、サンプルプロジェクトの <code>/server</code> ディレクトリにあります。</p>

<h3>OAuth の callback URL をサーバ側で受ける理由</h3>

<p>callback URL にアプリスキーマをつけて、<code>snsnet://twitter</code> の URL に戻ってくるようにすれば、サーバサイドの処理は不要になりますが、これだとアプリのブラウザに認証画面が残ってしまいます。</p>

<p>気にしないのであればいいですが、ブラウザで認証が終わったあとに閉じるように、JavaScript で画面を閉じるようにした画面をサーバサイドから返すようにして、そのなかで iframe を使ってアプリスキーマを呼び出しています。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>application_controller.rb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">fbredirect</span>
</span><span class="line">    <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@url</span> <span class="o">=</span> <span class="s2">"snsnet://facebook?</span><span class="si">#{</span><span class="n">uri</span><span class="o">.</span><span class="n">query</span><span class="si">}</span><span class="s2">"</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">twredirect</span>
</span><span class="line">    <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@url</span> <span class="o">=</span> <span class="s2">"snsnet://twitter?</span><span class="si">#{</span><span class="n">uri</span><span class="o">.</span><span class="n">query</span><span class="si">}</span><span class="s2">"</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>




<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>fbredirect.html.erb</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class="html+erb"><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line"><span class="nt">&lt;title&gt;</span>start application automatically and kill myself.<span class="nt">&lt;/title&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">init</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">iframe</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'iframe'</span><span class="p">);</span>
</span><span class="line">  <span class="nx">iframe</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'</span><span class="cp">&lt;%=</span> <span class="n">raw</span> <span class="vi">@url</span> <span class="cp">%&gt;</span><span class="s1">'</span><span class="p">;</span>
</span><span class="line">  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">iframe</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="nb">window</span><span class="p">.</span><span class="nx">opener</span> <span class="o">=</span> <span class="nb">window</span><span class="p">;</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">win</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'about:blank'</span><span class="p">,</span> <span class="s1">'_self'</span><span class="p">);</span>
</span><span class="line">  <span class="nx">win</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body</span> <span class="na">onload=</span><span class="s">"init()"</span><span class="nt">&gt;</span>
</span><span class="line">  このウィンドウは閉じてかまいません。
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>fbredirect.html.erb</code> と <code>twredirect.html.erb</code> は中身は同じでOKです。</p>

<h2>2. 認証後の callback をアプリで受け取る</h2>

<p>OAuth 後の callback URL にアプリスキーマを設定しておけば OAuth 後にアプリが開かれます。そこでは次のような処理を行います。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/app/alloy.js</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td>
<td class="code"><pre><code class="javascript"><span class="line"><span class="nx">Ti</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'resumed'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">launchOptions</span> <span class="o">=</span> <span class="p">(</span><span class="nx">OS_IOS</span><span class="p">)</span> <span class="o">?</span> <span class="nx">Ti</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">getArguments</span><span class="p">()</span> <span class="o">:</span> <span class="p">(</span><span class="nx">e</span> <span class="o">&amp;&amp;</span> <span class="nx">e</span><span class="p">.</span><span class="nx">args</span><span class="p">),</span>
</span><span class="line">        <span class="nx">host</span><span class="p">,</span> <span class="nx">queryString</span><span class="p">,</span> <span class="nx">parameters</span><span class="p">,</span> <span class="nx">oauth</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">launchOptions</span> <span class="o">&amp;&amp;</span> <span class="nx">launchOptions</span><span class="p">.</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">host</span> <span class="o">=</span> <span class="nx">launchOptions</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">'?'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="nx">queryString</span> <span class="o">=</span> <span class="nx">launchOptions</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">'?'</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">queryString</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">parameters</span> <span class="o">=</span> <span class="nx">OAuth</span><span class="p">.</span><span class="nx">decodeForm</span><span class="p">(</span><span class="nx">queryString</span><span class="p">);</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="nx">host</span> <span class="o">===</span> <span class="s1">'snsnet://twitter'</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">oauth</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OAuth</span><span class="p">({</span>
</span><span class="line">                    <span class="nx">consumerKey</span><span class="o">:</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">CFG</span><span class="p">.</span><span class="nx">twitterConsumerKey</span><span class="p">,</span>
</span><span class="line">                    <span class="nx">consumerSecret</span><span class="o">:</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">CFG</span><span class="p">.</span><span class="nx">twitterConsumerSecret</span>
</span><span class="line">                <span class="p">});</span>
</span><span class="line">                <span class="nx">oauth</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'https://api.twitter.com/oauth/access_token'</span><span class="p">,</span> <span class="nx">parameters</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="c1">// access_token 取得後の処理</span>
</span><span class="line">                <span class="p">});</span>
</span><span class="line">
</span><span class="line">            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">host</span> <span class="o">===</span> <span class="s1">'snsnet://facebook'</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="c1">// Facebook callback</span>
</span><span class="line">                <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">Globals</span><span class="p">.</span><span class="nx">RestClient</span><span class="p">.</span><span class="nx">addToURL</span><span class="p">(</span><span class="s1">'https://graph.facebook.com/oauth/access_token'</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">OAuth</span><span class="p">.</span><span class="nx">getParameterMap</span><span class="p">(</span><span class="nx">parameters</span><span class="p">),</span> <span class="p">{</span>
</span><span class="line">                    <span class="nx">client_id</span><span class="o">:</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">CFG</span><span class="p">.</span><span class="nx">facebookConsumerKey</span><span class="p">,</span>
</span><span class="line">                    <span class="nx">client_secret</span><span class="o">:</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">CFG</span><span class="p">.</span><span class="nx">facebookConsumerSecret</span><span class="p">,</span>
</span><span class="line">                    <span class="nx">redirect_uri</span><span class="o">:</span> <span class="nx">Alloy</span><span class="p">.</span><span class="nx">CFG</span><span class="p">.</span><span class="nx">facebookCallbackURL</span>
</span><span class="line">                <span class="p">}));</span>
</span><span class="line">                <span class="nx">Alloy</span><span class="p">.</span><span class="nx">Globals</span><span class="p">.</span><span class="nx">RestClient</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="c1">// access_token 取得後の処理</span>
</span><span class="line">                <span class="p">});</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// For SNS Activity</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="nx">OS_ANDROID</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">Ti</span><span class="p">.</span><span class="nx">Android</span><span class="p">.</span><span class="nx">currentActivity</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'app:resume'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">Ti</span><span class="p">.</span><span class="nx">API</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="s1">'***** app:resume:'</span><span class="p">);</span>
</span><span class="line">        <span class="nx">Ti</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">fireEvent</span><span class="p">(</span><span class="s1">'resumed'</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">args</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">url</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">});</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>アプリスキーマで戻ってきたときには、<code>resumed</code> が呼び出されますのでここで <code>access_token</code> を受け取るようにします。</p>

<h3>Android の場合は、画面の途中で SNS 認証が入ると、元の画面にもどれない</h3>

<p>Titanium のアーキテクチャの仕様上、Android で HeavyWeight Window で画面を複数立ち上げていると、OAuth 後に途中の画面に戻ってくることができません。</p>

<p>そこで、OAuth のコールバックを受け取って終了するだけの Activity を作ってコレを利用します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/platform/android/src/com/hamasyou/SnsAuthActivity.java</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td>
<td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">hamasyou</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span>  <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span>  <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span>  <span class="nn">android.content.Intent</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span>  <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span>  <span class="nn">android.net.Uri</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.appcelerator.titanium.TiApplication</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.appcelerator.titanium.TiRootActivity</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.appcelerator.titanium.proxy.ActivityProxy</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.appcelerator.kroll.KrollDict</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SnsAuthActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">"SnsAuthActivity"</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">){</span>
</span><span class="line">        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class="line">        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"********* onCreate"</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">Intent</span> <span class="n">currentIntent</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">();</span>
</span><span class="line">        <span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">currentIntent</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span><span class="line">        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"***** uri:"</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">TiRootActivity</span> <span class="n">app</span> <span class="o">=</span> <span class="o">(</span><span class="n">TiRootActivity</span><span class="o">)</span> <span class="n">TiApplication</span><span class="o">.</span><span class="na">getAppRootOrCurrentActivity</span><span class="o">();</span>
</span><span class="line">        <span class="n">ActivityProxy</span> <span class="n">proxy</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="na">getActivityProxy</span><span class="o">();</span>
</span><span class="line">        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"**** app:"</span> <span class="o">+</span> <span class="n">app</span><span class="o">);</span>
</span><span class="line">        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"**** proxy:"</span> <span class="o">+</span> <span class="n">proxy</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">KrollDict</span> <span class="n">event</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KrollDict</span><span class="o">();</span>
</span><span class="line">        <span class="n">event</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"data"</span><span class="o">,</span> <span class="n">uri</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">        <span class="n">proxy</span><span class="o">.</span><span class="na">fireEvent</span><span class="o">(</span><span class="s">"app:resume"</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">finish</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onNewIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">){</span>
</span><span class="line">        <span class="kd">super</span><span class="o">.</span><span class="na">onNewIntent</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class="line">        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"********* onNewIntent"</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">finish</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p>この Activity を <code>tiapp.xml</code> で設定してアプリスキーマの起動をここで受け取るようにします。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>tiapp.xml</span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
</pre></td>
<td class="code"><pre><code class="xml"><span class="line"><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
</span><span class="line"><span class="nt">&lt;ti:app</span> <span class="na">xmlns:ti=</span><span class="s">"http://ti.appcelerator.org"</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;id&gt;</span>com.hamasyou<span class="nt">&lt;/id&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>snsnet<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class="line">    <span class="nt">&lt;publisher&gt;</span>hamasyou<span class="nt">&lt;/publisher&gt;</span>
</span><span class="line">    <span class="nt">&lt;url&gt;</span>http://<span class="nt">&lt;/url&gt;</span>
</span><span class="line">    <span class="nt">&lt;description&gt;</span>not specified<span class="nt">&lt;/description&gt;</span>
</span><span class="line">    <span class="nt">&lt;copyright&gt;</span>2014 by hamasyou<span class="nt">&lt;/copyright&gt;</span>
</span><span class="line">    <span class="nt">&lt;icon&gt;</span>appicon.png<span class="nt">&lt;/icon&gt;</span>
</span><span class="line">    <span class="nt">&lt;fullscreen&gt;</span>false<span class="nt">&lt;/fullscreen&gt;</span>
</span><span class="line">    <span class="nt">&lt;navbar-hidden&gt;</span>false<span class="nt">&lt;/navbar-hidden&gt;</span>
</span><span class="line">    <span class="nt">&lt;analytics&gt;</span>true<span class="nt">&lt;/analytics&gt;</span>
</span><span class="line">    <span class="nt">&lt;guid&gt;</span>749b688a-dc5e-4308-badd-d1013baaf13e<span class="nt">&lt;/guid&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"ti.ui.defaultunit"</span> <span class="na">type=</span><span class="s">"string"</span><span class="nt">&gt;</span>dp<span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"ti.android.bug2373.finishfalseroot"</span> <span class="na">type=</span><span class="s">"bool"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;ios&gt;</span>
</span><span class="line">        <span class="nt">&lt;plist&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>UISupportedInterfaceOrientations~iphone<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;array&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>UIInterfaceOrientationPortrait<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                <span class="nt">&lt;/array&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>UISupportedInterfaceOrientations~ipad<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;array&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>UIInterfaceOrientationPortrait<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>UIInterfaceOrientationPortraitUpsideDown<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>UIInterfaceOrientationLandscapeLeft<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>UIInterfaceOrientationLandscapeRight<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                <span class="nt">&lt;/array&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>UIRequiresPersistentWiFi<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>UIPrerenderedIcon<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>UIStatusBarHidden<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>UIStatusBarStyle<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;string&gt;</span>UIStatusBarStyleDefault<span class="nt">&lt;/string&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/plist&gt;</span>
</span><span class="line">    <span class="nt">&lt;/ios&gt;</span>
</span><span class="line">    <span class="nt">&lt;android</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;manifest&gt;</span>
</span><span class="line">          <span class="nt">&lt;application</span> <span class="na">android:icon=</span><span class="s">"@drawable/appicon"</span> <span class="na">android:label=</span><span class="s">"snsnet"</span> <span class="na">android:name=</span><span class="s">"SnsnetApplication"</span> <span class="na">android:debuggable=</span><span class="s">"false"</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">".SnsnetActivity"</span> <span class="na">android:label=</span><span class="s">"@string/app_name"</span> <span class="na">android:theme=</span><span class="s">"@style/Theme.Titanium"</span> <span class="na">android:configChanges=</span><span class="s">"keyboardHidden|orientation|screenSize"</span><span class="nt">&gt;</span>
</span><span class="line">              <span class="nt">&lt;intent-filter&gt;</span>
</span><span class="line">                <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">"android.intent.action.MAIN"</span><span class="nt">/&gt;</span>
</span><span class="line">                <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">"android.intent.category.LAUNCHER"</span><span class="nt">/&gt;</span>
</span><span class="line">              <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class="line">            <span class="nt">&lt;/activity&gt;</span>
</span><span class="line">            <span class="c">&lt;!-- SNS 連携用の Activity を作って処理させる --&gt;</span>
</span><span class="line">            <span class="c">&lt;!--  http://wada811.blogspot.com/2014/01/android-twitter-oauth.html --&gt;</span>
</span><span class="line">            <span class="nt">&lt;activity</span> <span class="na">android:launchMode=</span><span class="s">"singleTask"</span> <span class="na">android:name=</span><span class="s">".SnsAuthActivity"</span><span class="nt">&gt;</span>
</span><span class="line">                <span class="nt">&lt;intent-filter&gt;</span>
</span><span class="line">                    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">"android.intent.action.VIEW"</span><span class="nt">/&gt;</span>
</span><span class="line">                    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">"android.intent.category.DEFAULT"</span><span class="nt">/&gt;</span>
</span><span class="line">                    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">"android.intent.category.BROWSABLE"</span><span class="nt">/&gt;</span>
</span><span class="line">                    <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">"snsnet"</span><span class="nt">/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class="line">            <span class="nt">&lt;/activity&gt;</span>
</span><span class="line">          <span class="nt">&lt;/application&gt;</span>
</span><span class="line">      <span class="nt">&lt;/manifest&gt;</span>
</span><span class="line">    <span class="nt">&lt;/android&gt;</span>
</span><span class="line">    <span class="nt">&lt;mobileweb&gt;</span>
</span><span class="line">        <span class="nt">&lt;precache/&gt;</span>
</span><span class="line">        <span class="nt">&lt;splash&gt;</span>
</span><span class="line">            <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span><span class="line">            <span class="nt">&lt;inline-css-images&gt;</span>true<span class="nt">&lt;/inline-css-images&gt;</span>
</span><span class="line">        <span class="nt">&lt;/splash&gt;</span>
</span><span class="line">        <span class="nt">&lt;theme&gt;</span>default<span class="nt">&lt;/theme&gt;</span>
</span><span class="line">    <span class="nt">&lt;/mobileweb&gt;</span>
</span><span class="line">    <span class="nt">&lt;modules/&gt;</span>
</span><span class="line">    <span class="nt">&lt;deployment-targets&gt;</span>
</span><span class="line">        <span class="nt">&lt;target</span> <span class="na">device=</span><span class="s">"android"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/target&gt;</span>
</span><span class="line">        <span class="nt">&lt;target</span> <span class="na">device=</span><span class="s">"blackberry"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/target&gt;</span>
</span><span class="line">        <span class="nt">&lt;target</span> <span class="na">device=</span><span class="s">"ipad"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/target&gt;</span>
</span><span class="line">        <span class="nt">&lt;target</span> <span class="na">device=</span><span class="s">"iphone"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/target&gt;</span>
</span><span class="line">        <span class="nt">&lt;target</span> <span class="na">device=</span><span class="s">"mobileweb"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/target&gt;</span>
</span><span class="line">        <span class="nt">&lt;target</span> <span class="na">device=</span><span class="s">"tizen"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/target&gt;</span>
</span><span class="line">    <span class="nt">&lt;/deployment-targets&gt;</span>
</span><span class="line">    <span class="nt">&lt;sdk-version&gt;</span>3.2.3.GA<span class="nt">&lt;/sdk-version&gt;</span>
</span><span class="line">    <span class="nt">&lt;plugins&gt;</span>
</span><span class="line">        <span class="nt">&lt;plugin</span> <span class="na">version=</span><span class="s">"1.0"</span><span class="nt">&gt;</span>ti.alloy<span class="nt">&lt;/plugin&gt;</span>
</span><span class="line">    <span class="nt">&lt;/plugins&gt;</span>
</span><span class="line"><span class="nt">&lt;/ti:app&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>


<p><code>SnsAuthActivity</code> で OAuth のコールバックを受け取って、<code>Ti.Android.currentActivity</code> の <code>app:resume</code> イベントを fire して、元のアプリに戻しています。
これで、元の画面を残したまま OAuth の処理を行うことができます。</p>

<p>ちょっと説明が不足している気もしますが、サンプルプロジェクトでなんとなく雰囲気を感じ取っていただければ。</p>
]]>
    </description>
    <pubDate>Wed, 14 May 2014 13:39:48 +0900</pubDate>
  </item>
  
  <item>
    <title><![CDATA[Railsが用意したasset precompile済みのgzファイルを返すapache confの設定]]></title>
    <link>http://hamasyou.com/blog/2014/04/04/passenger-js-css-gzip/</link>
    <guid>http://hamasyou.com/blog/2014/04/04/passenger-js-css-gzip/</guid>
    <description>
      <![CDATA[<p>Passenger で Rails アプリを動かすときに、<code>assets:precompile</code> 済みの <code>gz</code> ファイルを返すようにする apache の設定方法例のメモ。</p>

<p>いただき物です。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td>
<td class="code"><pre><code class="apache"><span class="line"><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class="line">   <span class="c"># ...</span>
</span><span class="line">   <span class="nt">&lt;LocationMatch</span> <span class="s">"^/assets/.*$"</span><span class="nt">&gt;</span>
</span><span class="line">     <span class="c"># Some browsers still send conditional-GET requests if there's a</span>
</span><span class="line">     <span class="c"># Last-Modified header or an ETag header even if they haven't</span>
</span><span class="line">     <span class="c"># reached the expiry date sent in the Expires header.</span>
</span><span class="line">     <span class="c">#Header unset Last-Modified</span>
</span><span class="line">     <span class="c">#Header unset ETag</span>
</span><span class="line">     <span class="nb">FileETag</span> Size
</span><span class="line">     <span class="c"># RFC says only cache for 1 year</span>
</span><span class="line">     <span class="nb">ExpiresActive</span> <span class="k">On</span>
</span><span class="line">     <span class="nb">ExpiresDefault</span> <span class="s2">"access plus 1 year"</span>
</span><span class="line">
</span><span class="line">     <span class="nb">SetEnv</span> no-gzip
</span><span class="line">
</span><span class="line">     <span class="nb">RewriteEngine</span> <span class="k">on</span>
</span><span class="line">     <span class="c">#RewriteLog /tmp/rewrite.log</span>
</span><span class="line">     <span class="c">#RewriteLogLevel 15</span>
</span><span class="line">     <span class="c"># Make sure the browser supports gzip encoding before we send it</span>
</span><span class="line">     <span class="nb">RewriteCond</span> %{HTTP:Accept-Encoding} \b(x-)?gzip\b
</span><span class="line">     <span class="nb">RewriteCond</span> %{REQUEST_FILENAME}.gz -f
</span><span class="line">     <span class="nb">RewriteRule</span> ^(.+) \$1.gz [L]
</span><span class="line">   <span class="nt">&lt;/LocationMatch&gt;</span>
</span><span class="line">
</span><span class="line">   <span class="nt">&lt;FilesMatch</span> <span class="s">\.css\.gz$</span><span class="nt">&gt;</span>
</span><span class="line">       <span class="nb">ForceType</span> text/css
</span><span class="line">       <span class="nb">Header</span> set Content-Encoding gzip
</span><span class="line">   <span class="nt">&lt;/FilesMatch&gt;</span>
</span><span class="line">
</span><span class="line">   <span class="nt">&lt;FilesMatch</span> <span class="s">\.js\.gz$</span><span class="nt">&gt;</span>
</span><span class="line">       <span class="nb">ForceType</span> text/javascript
</span><span class="line">       <span class="nb">Header</span> set Content-Encoding gzip
</span><span class="line">   <span class="nt">&lt;/FilesMatch&gt;</span>
</span><span class="line"><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td>
</tr></table></div></figure></notextile></div>

]]>
    </description>
    <pubDate>Fri, 04 Apr 2014 18:45:30 +0900</pubDate>
  </item>
  
</channel>
</rss>
